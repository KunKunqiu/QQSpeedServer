void RequestGetPurchaseBroadcast(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetPurchaseBroadcast(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //BroadcastNum
	for (size_t i = 0; i < n; i++)
	{ //Broadcast
		BYTE* pBroadcast = p;
		Write16(pBroadcast, 0); //len

		WriteString(pBroadcast, 0); //Name[]
		WriteUn(pBroadcast, 0); //tTime
		Write8(pBroadcast, 0); //Discount
		Write32(pBroadcast, 0); //CommodityID
		Write32(pBroadcast, 0); //SavedMoney

		len = pBroadcast - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 20007, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestCheckCommodityOnSale(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	bool CheckOccasion = Read8(p);
	int CommodityID = Read32(p);

}

void ResponseCheckCommodityOnSale(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //CheckOccasion
	Write32(p, 0); //CommodityID
	Write16(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 20006, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestBuyCommodity(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	char[] NickName[] = ReadString(p);
	int ReqBuySeq = Read32(p);
	UINT DstUin = Read32(p);
	UINT PlayerExp = Read32(p);
	USHORT CommodityType = Read16(p);
	int PayType = Read32(p);
	int BuyCount = Read32(p);
	for (size_t i = 0; i < n; i++)
	{ //ShoppingCar
		BYTE* pShoppingCar = p;
		len = Read16(pShoppingCar);

		int CommodityID = Read32(pShoppingCar);
		int PriceIdx = Read32(pShoppingCar);
		int DiscountCardID = Read32(pShoppingCar);
		USHORT DisCount = Read16(pShoppingCar);
		UINT SpeedCoinNum = Read32(pShoppingCar);
		USHORT BuyActivityType = Read16(pShoppingCar);
		int BuyActivityPara = Read32(pShoppingCar);
		UCHAR ActivityNameLen = Read8(pShoppingCar);

		p += len;
	}
	short AttachInfoLen = Read16(p);
	UINT OtherInfo = Read32(p);
	Un FirstLoginTime = ReadUn(p);
	UINT BuyNum = Read32(p);
	UINT GuildID = Read32(p);
	int ReduceCouponsID = Read32(p);
	int CashCouponsID = Read32(p);
	int ItemID = Read32(p);
	UCHAR OtherType = Read8(p);
	UINT QBCouponsNum = Read32(p);
	UINT SpeedCoinNum = Read32(p);
	USHORT GamesvrID = Read16(p);
	USHORT PlayerID = Read16(p);

}

void ResponseBuyCommodity(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write32(p, 0); //Time
	WriteString(p, 0); //NickName[]
	Write32(p, 0); //ReqBuySeq
	Write32(p, 0); //DstUin
	Write32(p, 0); //PlayerExp
	Write16(p, 0); //CommodityType
	Write32(p, 0); //PayType
	Write32(p, 0); //BuyCount
	for (size_t i = 0; i < n; i++)
	{ //ShoppingCar
		BYTE* pShoppingCar = p;
		Write16(pShoppingCar, 0); //len

		Write32(pShoppingCar, 0); //CommodityID
		Write32(pShoppingCar, 0); //PriceIdx
		Write32(pShoppingCar, 0); //DiscountCardID
		Write16(pShoppingCar, 0); //DisCount
		Write32(pShoppingCar, 0); //SpeedCoinNum
		Write16(pShoppingCar, 0); //BuyActivityType
		Write32(pShoppingCar, 0); //BuyActivityPara
		Write8(pShoppingCar, 0); //ActivityNameLen

		len = pShoppingCar - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //AttachInfoLen
	Write32(p, 0); //OtherInfo
	WriteUn(p, 0); //FirstLoginTime
	Write16(p, 0); //ReasonLen
	Write16(p, 0); //QuerySigLen
	Write8(p, 0); //CommMbItem
	Write8(p, 0); //MbItemNum
	for (size_t i = 0; i < n; i++)
	{ //Item
		BYTE* pItem = p;
		Write16(pItem, 0); //len

		Write8(pItem, 0); //MbItemId
		Write8(pItem, 0); //Use
		Write16(pItem, 0); //ContentLen

		len = pItem - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //ReduceCouponsID
	{ //payMoneyInfo
		BYTE* ppayMoneyInfo = p;
		Write16(ppayMoneyInfo, 0); //len

		WriteUn(ppayMoneyInfo, 0); //money
		WriteUn(ppayMoneyInfo, 0); //superMoney
		WriteUn(ppayMoneyInfo, 0); //coupons
		WriteUn(ppayMoneyInfo, 0); //luckMoney
		WriteUn(ppayMoneyInfo, 0); //qbqd

		len = ppayMoneyInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //CashCouponsID
	Write8(p, 0); //OtherType
	Write32(p, 0); //QBCouponsNum
	Write16(p, 0); //OrderIDLen
	Write32(p, 0); //SpeedCoinNum

	len = p - buf;
	SendToClient(Client, 20000, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestBuyCommodityEx(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	char[] NickName[] = ReadString(p);
	int ReqBuySeq = Read32(p);
	UINT DstUin = Read32(p);
	UINT PlayerExp = Read32(p);
	USHORT CommodityType = Read16(p);
	int PayType = Read32(p);
	int BuyCount = Read32(p);
	for (size_t i = 0; i < n; i++)
	{ //ShoppingCar
		BYTE* pShoppingCar = p;
		len = Read16(pShoppingCar);

		int CommodityID = Read32(pShoppingCar);
		int PriceIdx = Read32(pShoppingCar);
		int DiscountCardID = Read32(pShoppingCar);
		USHORT DisCount = Read16(pShoppingCar);
		UINT SpeedCoinNum = Read32(pShoppingCar);
		USHORT BuyActivityType = Read16(pShoppingCar);
		int BuyActivityPara = Read32(pShoppingCar);
		UCHAR ActivityNameLen = Read8(pShoppingCar);

		p += len;
	}
	short AttachInfoLen = Read16(p);
	UINT OtherInfo = Read32(p);
	Un FirstLoginTime = ReadUn(p);
	WORD QuerySigLen = Read16(p);
	bool MbItemNum = Read8(p);
	for (size_t i = 0; i < n; i++)
	{ //itemAns
		BYTE* pitemAns = p;
		len = Read16(pitemAns);

		char MbItemId = Read8(pitemAns);
		WORD VerifyContentLen = Read16(pitemAns);

		p += len;
	}
	UINT BuyNum = Read32(p);
	UINT GuildID = Read32(p);
	int ReduceCouponsID = Read32(p);
	int CashCouponsID = Read32(p);
	int ItemID = Read32(p);
	UCHAR OtherType = Read8(p);
	UINT QBCouponsNum = Read32(p);
	UINT SpeedCoinNum = Read32(p);
	USHORT GamesvrID = Read16(p);
	USHORT PlayerID = Read16(p);

}

void ResponseBuyCommodityEx(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write32(p, 0); //ReqBuySeq
	Write32(p, 0); //DstUin
	Write16(p, 0); //CommodityType
	Write32(p, 0); //PayType
	Write32(p, 0); //BuyCount
	for (size_t i = 0; i < n; i++)
	{ //ShoppingCar
		BYTE* pShoppingCar = p;
		Write16(pShoppingCar, 0); //len

		Write32(pShoppingCar, 0); //CommodityID
		Write32(pShoppingCar, 0); //PriceIdx
		Write32(pShoppingCar, 0); //DiscountCardID
		Write16(pShoppingCar, 0); //DisCount
		Write32(pShoppingCar, 0); //SpeedCoinNum
		Write16(pShoppingCar, 0); //BuyActivityType
		Write32(pShoppingCar, 0); //BuyActivityPara
		Write8(pShoppingCar, 0); //ActivityNameLen

		len = pShoppingCar - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //ReasonLen
	Write32(p, 0); //ReduceCouponsID
	{ //payMoneyInfo
		BYTE* ppayMoneyInfo = p;
		Write16(ppayMoneyInfo, 0); //len

		WriteUn(ppayMoneyInfo, 0); //money
		WriteUn(ppayMoneyInfo, 0); //superMoney
		WriteUn(ppayMoneyInfo, 0); //coupons
		WriteUn(ppayMoneyInfo, 0); //luckMoney
		WriteUn(ppayMoneyInfo, 0); //qbqd

		len = ppayMoneyInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //CashCouponsID
	Write8(p, 0); //OtherType
	Write32(p, 0); //QBCouponsNum
	Write32(p, 0); //SpeedCoinNum

	len = p - buf;
	SendToClient(Client, 20005, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestBuyActivity(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT BuyActivityType = Read16(p);
	int BuyActivityPara = Read32(p);
	int PayType = Read32(p);

}

void ResponseBuyActivity(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write16(p, 0); //BuyActivityType
	Write32(p, 0); //BuyActivityPara
	Write32(p, 0); //PayType

	len = p - buf;
	SendToClient(Client, 19999, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetCommodityList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetCommodityList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //EndFlag
	Write16(p, 0); //CommodityNum
	for (size_t i = 0; i < n; i++)
	{ //Commodity
		BYTE* pCommodity = p;
		Write16(pCommodity, 0); //len

		Write32(pCommodity, 0); //ID
		WriteString(pCommodity, 0); //Name[]
		{ //Type
			BYTE* pType = pCommodity;
			Write16(pType, 0); //len

			Write16(pType, 0); //Base
			Write16(pType, 0); //Sub

			len = pType - pCommodity;
			Set16(pCommodity, (WORD)len);
			pCommodity += len;
		}
		{ //Description
			BYTE* pDescription = pCommodity;
			Write16(pDescription, 0); //len

			Write16(pDescription, 0); //GDescLen
			Write16(pDescription, 0); //ADescLen

			len = pDescription - pCommodity;
			Set16(pCommodity, (WORD)len);
			pCommodity += len;
		}
		{ //Rebate
			BYTE* pRebate = pCommodity;
			Write16(pRebate, 0); //len

			Write16(pRebate, 0); //Memeber
			Write16(pRebate, 0); //Common
			Write16(pRebate, 0); //Lucky
			Write16(pRebate, 0); //TimeLimitMember
			Write16(pRebate, 0); //TimeLimitCommon
			Write16(pRebate, 0); //MemberInUsing
			Write16(pRebate, 0); //CommonInUsing

			len = pRebate - pCommodity;
			Set16(pCommodity, (WORD)len);
			pCommodity += len;
		}
		{ //Limit
			BYTE* pLimit = pCommodity;
			Write16(pLimit, 0); //len

			Write32(pLimit, 0); //LevelLimit
			Write32(pLimit, 0); //HonorLimit
			Write32(pLimit, 0); //OtherLimit

			len = pLimit - pCommodity;
			Set16(pCommodity, (WORD)len);
			pCommodity += len;
		}
		Write32(pCommodity, 0); //PriceNum
		for (size_t i = 0; i < n; i++)
		{ //Price
			BYTE* pPrice = pCommodity;
			Write16(pPrice, 0); //len

			Write32(pPrice, 0); //QBPrice
			Write32(pPrice, 0); //QPPrice
			Write32(pPrice, 0); //MoneyPrice
			Write32(pPrice, 0); //SuperMoneyPrice
			Write32(pPrice, 0); //LuckyCoin
			Write32(pPrice, 0); //FishMoneyPrice
			Write16(pPrice, 0); //MixRate

			len = pPrice - pCommodity;
			Set16(pCommodity, (WORD)len);
			pCommodity += len;
		}
		Write32(pCommodity, 0); //DateSaleLimit
		Write32(pCommodity, 0); //DateSold
		Write32(pCommodity, 0); //TimeSaleBegin
		Write32(pCommodity, 0); //TimeSaleEnd
		Write32(pCommodity, 0); //Priority
		Write32(pCommodity, 0); //SaleTag
		WriteUn(pCommodity, 0); //VipFlag
		Write16(pCommodity, 0); //ItemCount
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pCommodity;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write16(pItemInfo, 0); //AvailPeriodCount
			Write32(pItemInfo, 0); //AvailPeriods[]
			Write16(pItemInfo, 0); //ItemNumCount
			Write32(pItemInfo, 0); //ItemNums[]
			Write16(pItemInfo, 0); //Probability

			len = pItemInfo - pCommodity;
			Set16(pCommodity, (WORD)len);
			pCommodity += len;
		}
		Write16(pCommodity, 0); //MoneyCount
		for (size_t i = 0; i < n; i++)
		{ //MoneyInfo
			BYTE* pMoneyInfo = pCommodity;
			Write16(pMoneyInfo, 0); //len

			Write16(pMoneyInfo, 0); //SuperMoneyAmtCount
			Write32(pMoneyInfo, 0); //SuperMoneyAmout[]
			Write16(pMoneyInfo, 0); //SuperMoneyPresentCount
			Write32(pMoneyInfo, 0); //SuperMoneyPresent[]
			Write16(pMoneyInfo, 0); //SuperMoneyMemPresentCount
			Write32(pMoneyInfo, 0); //SuperMoneyMemeberPresent[]
			Write16(pMoneyInfo, 0); //Probability

			len = pMoneyInfo - pCommodity;
			Set16(pCommodity, (WORD)len);
			pCommodity += len;
		}
		Write32(pCommodity, 0); //FirstOnSaleTime
		Write16(pCommodity, 0); //SubsitituteComIDNum
		Write32(pCommodity, 0); //SubstituteCommodityID[]
		Write32(pCommodity, 0); //PresentNum
		for (size_t i = 0; i < n; i++)
		{ //PresentInfo
			BYTE* pPresentInfo = pCommodity;
			Write16(pPresentInfo, 0); //len

			Write32(pPresentInfo, 0); //ExpInc
			Write32(pPresentInfo, 0); //MoneyInc
			Write32(pPresentInfo, 0); //SuperMnyInc
			Write16(pPresentInfo, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pPresentInfo;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //ItemPeriod

				len = pItemInfo - pPresentInfo;
				Set16(pPresentInfo, (WORD)len);
				pPresentInfo += len;
			}
			Write32(pPresentInfo, 0); //CouponsInc
			Write32(pPresentInfo, 0); //LuckMoneyInc

			len = pPresentInfo - pCommodity;
			Set16(pCommodity, (WORD)len);
			pCommodity += len;
		}
		Write32(pCommodity, 0); //ExchangeID
		Write32(pCommodity, 0); //ReturnSuperMoneyRatio
		Write32(pCommodity, 0); //ReturnCouponsRatio
		Write32(pCommodity, 0); //QuickEquip
		Write32(pCommodity, 0); //AllowanceNum
		for (size_t i = 0; i < n; i++)
		{ //Allowance
			BYTE* pAllowance = pCommodity;
			Write16(pAllowance, 0); //len

			Write32(pAllowance, 0); //Coupons
			Write32(pAllowance, 0); //SupperMoney
			Write32(pAllowance, 0); //Probability

			len = pAllowance - pCommodity;
			Set16(pCommodity, (WORD)len);
			pCommodity += len;
		}
		Write32(pCommodity, 0); //ReturnLuckMoneyRatio
		{ //ReturnRatio
			BYTE* pReturnRatio = pCommodity;
			Write16(pReturnRatio, 0); //len

			Write32(pReturnRatio, 0); //ReturnSuperMoneyRatio
			Write32(pReturnRatio, 0); //ReturnLuckMoneyRatio
			Write32(pReturnRatio, 0); //ReturnCouponsRatio
			Write32(pReturnRatio, 0); //TimeLimitReturnSuperMoneyRatio
			Write32(pReturnRatio, 0); //TimeLimitReturnLuckMoneyRatio
			Write32(pReturnRatio, 0); //TimeLimitReturnCouponsRatio
			Write32(pReturnRatio, 0); //ReturnSuperMoneyRatioInUsing
			Write32(pReturnRatio, 0); //ReturnLuckMoneyRatioInUsing
			Write32(pReturnRatio, 0); //ReturnCouponsRatioInUsing

			len = pReturnRatio - pCommodity;
			Set16(pCommodity, (WORD)len);
			pCommodity += len;
		}
		Write16(pCommodity, 0); //LimitMemeberRebate
		Write16(pCommodity, 0); //LimitCommonRebate
		Write32(pCommodity, 0); //TimeLimitReturnSuperMoneyRatio
		Write32(pCommodity, 0); //TimeLimitReturnCouponsRatio
		Write32(pCommodity, 0); //TimeLimitReturnLuckMoneyRatio
		WriteString(pCommodity, 0); //IntroduceURL[]
		Write16(pCommodity, 0); //ItemZizuanFlag
		Write16(pCommodity, 0); //AwardNum
		Write32(pCommodity, 0); //SpecialAward[]
		Write32(pCommodity, 0); //TimeLimit
		Write16(pCommodity, 0); //ShowPicNum
		Write32(pCommodity, 0); //BaseTypeEx
		Write16(pCommodity, 0); //TimeLimitSpecialRewards
		WriteString(pCommodity, 0); //TimeLimitIntroduce[]
		Write(pCommodity, 0); //SpecialAwardsLabel[]
		Write32(pCommodity, 0); //TimeLabelBegin
		Write32(pCommodity, 0); //TimeLabelEnd
		Write16(pCommodity, 0); //ItemCharismaFlag
		Write32(pCommodity, 0); //TimeRebateBegin
		Write32(pCommodity, 0); //TimeRebateEnd
		Write(pCommodity, 0); //SpecialAwardDesc[]
		Write8(pCommodity, 0); //IsSaleOnPhoneAssistant
		Write32(pCommodity, 0); //TypeOnPhoneAssistant
		Write(pCommodity, 0); //SpecialDesc[]

		len = pCommodity - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestShopCommonBroadcast(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	short ShopBroadcastType = Read16(p);

}

void ResponseShopCommonBroadcast(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //BroadcastNum
	for (size_t i = 0; i < n; i++)
	{ //BroadcastInfo
		BYTE* pBroadcastInfo = p;
		Write16(pBroadcastInfo, 0); //len

		Write16(pBroadcastInfo, 0); //ShopBroadcastType
		Write8(pBroadcastInfo, 0); //DescLen

		len = pBroadcastInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 20078, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestSeekFortune(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int PayType = Read32(p);
	int Type = Read32(p);
	int PlayerExp = Read32(p);
	char[] NickName[] = ReadString(p);

}

void ResponseSeekFortune(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //AttachLen
	Write32(p, 0); //PayType
	Write32(p, 0); //Type

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetCfgFile(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	{ //CfgFileInfos
		BYTE* pCfgFileInfos = p;
		len = Read16(pCfgFileInfos);

		int FileID = Read32(pCfgFileInfos);
		int FileVersion = Read32(pCfgFileInfos);
		int CRC = Read32(pCfgFileInfos);

		p += len;
	}

}

void ResponseGetCfgFile(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //Time
	Write16(p, 0); //ResultID
	{ //CfgFileInfos
		BYTE* pCfgFileInfos = p;
		Write16(pCfgFileInfos, 0); //len

		Write32(pCfgFileInfos, 0); //FileID
		Write32(pCfgFileInfos, 0); //FileVersion
		Write32(pCfgFileInfos, 0); //CRC
		Write32(pCfgFileInfos, 0); //FileLen
		Write32(pCfgFileInfos, 0); //FileZipLen
		Write32(pCfgFileInfos, 0); //CurFileZipLen

		len = pCfgFileInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //CommDirectionLen
	Write32(p, 0); //DiscountCardVersion
	Write32(p, 0); //ReduceCouponsVersion

	len = p - buf;
	SendToClient(Client, 20002, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetDiscountCardInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT CurVersion = Read32(p);

}

void ResponseGetDiscountCardInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Version
	Write8(p, 0); //DiscountCardNum
	for (size_t i = 0; i < n; i++)
	{ //DiscountCardInfo
		BYTE* pDiscountCardInfo = p;
		Write16(pDiscountCardInfo, 0); //len

		Write32(pDiscountCardInfo, 0); //ItemID
		Write8(pDiscountCardInfo, 0); //Discount
		Write8(pDiscountCardInfo, 0); //ValidCommodityNum
		Write32(pDiscountCardInfo, 0); //ValidCommodityID[]
		Write32(pDiscountCardInfo, 0); //PayTypeFlag
		Write8(pDiscountCardInfo, 0); //LimitTypeNum
		Write32(pDiscountCardInfo, 0); //LimitTypeList[]
		WriteU(pDiscountCardInfo, 0); //OverdueTime

		len = pDiscountCardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 20008, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestWebpaySendItem(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	Un orderidLen = ReadUn(p);
	int OssID = Read32(p);
	UCHAR HasIDIPInfo = Read8(p);
	for (size_t i = 0; i < n; i++)
	{ //IDIPInfo
		BYTE* pIDIPInfo = p;
		len = Read16(pIDIPInfo);

		char[] SerialNum[] = ReadString(pIDIPInfo);
		int SourceID = Read32(pIDIPInfo);
		int AreaID = Read32(pIDIPInfo);
		short CmdID = Read16(pIDIPInfo);

		p += len;
	}

}

void ResponseWebpaySendItem(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //Time
	WriteUn(p, 0); //orderidLen
	Write32(p, 0); //OssID
	Write16(p, 0); //ResultID
	Write16(p, 0); //AttachLen
	Write8(p, 0); //HasIDIPInfo
	for (size_t i = 0; i < n; i++)
	{ //IDIPInfo
		BYTE* pIDIPInfo = p;
		Write16(pIDIPInfo, 0); //len

		WriteString(pIDIPInfo, 0); //SerialNum[]
		Write32(pIDIPInfo, 0); //SourceID
		Write32(pIDIPInfo, 0); //AreaID
		Write16(pIDIPInfo, 0); //CmdID

		len = pIDIPInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyShowWebPayPage(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write32(p, 0); //Time
	WriteString(p, 0); //NickName[]
	Write32(p, 0); //ReqBuySeq
	Write32(p, 0); //DstUin
	Write32(p, 0); //PlayerExp
	Write16(p, 0); //CommodityType
	Write32(p, 0); //PayType
	Write32(p, 0); //BuyCount
	for (size_t i = 0; i < n; i++)
	{ //ShoppingCar
		BYTE* pShoppingCar = p;
		Write16(pShoppingCar, 0); //len

		Write32(pShoppingCar, 0); //CommodityID
		Write32(pShoppingCar, 0); //PriceIdx
		Write32(pShoppingCar, 0); //DiscountCardID
		Write16(pShoppingCar, 0); //DisCount
		Write32(pShoppingCar, 0); //SpeedCoinNum
		Write16(pShoppingCar, 0); //BuyActivityType
		Write32(pShoppingCar, 0); //BuyActivityPara
		Write8(pShoppingCar, 0); //ActivityNameLen

		len = pShoppingCar - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //AttachInfoLen
	Write32(p, 0); //OtherInfo
	WriteUn(p, 0); //FirstLoginTime
	Write16(p, 0); //ReasonLen
	Write16(p, 0); //QuerySigLen
	Write8(p, 0); //CommMbItem
	Write8(p, 0); //MbItemNum
	for (size_t i = 0; i < n; i++)
	{ //Item
		BYTE* pItem = p;
		Write16(pItem, 0); //len

		Write8(pItem, 0); //MbItemId
		Write8(pItem, 0); //Use
		Write16(pItem, 0); //ContentLen

		len = pItem - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //ReduceCouponsID
	{ //payMoneyInfo
		BYTE* ppayMoneyInfo = p;
		Write16(ppayMoneyInfo, 0); //len

		WriteUn(ppayMoneyInfo, 0); //money
		WriteUn(ppayMoneyInfo, 0); //superMoney
		WriteUn(ppayMoneyInfo, 0); //coupons
		WriteUn(ppayMoneyInfo, 0); //luckMoney
		WriteUn(ppayMoneyInfo, 0); //qbqd

		len = ppayMoneyInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //CashCouponsID
	Write8(p, 0); //OtherType
	Write32(p, 0); //QBCouponsNum
	Write16(p, 0); //UrlLen
	Write16(p, 0); //OrderIDLen

	len = p - buf;
	SendToClient(Client, 24813, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestPayRebateCfg(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT Version = Read32(p);

}

void ResponsePayRebateCfg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write32(p, 0); //Version
	Write8(p, 0); //PayRebate
	Write16(p, 0); //RebateNum
	for (size_t i = 0; i < n; i++)
	{ //RebateAmountInfo
		BYTE* pRebateAmountInfo = p;
		Write16(pRebateAmountInfo, 0); //len

		Write32(pRebateAmountInfo, 0); //PayLow
		Write32(pRebateAmountInfo, 0); //RebateLow
		Write32(pRebateAmountInfo, 0); //RebateHigh

		len = pRebateAmountInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //DescLen

	len = p - buf;
	SendToClient(Client, 20077, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestReduceCouponseInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT CurVersion = Read32(p);

}

void ResponseReduceCouponseInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //NeedUpdate
	Write32(p, 0); //CurVersion
	Write16(p, 0); //Num
	for (size_t i = 0; i < n; i++)
	{ //Info
		BYTE* pInfo = p;
		Write16(pInfo, 0); //len

		Write32(pInfo, 0); //ItemID
		Write32(pInfo, 0); //PayLimit
		Write32(pInfo, 0); //ReducePay
		Write16(pInfo, 0); //ConsumeLimit
		WriteU(pInfo, 0); //OverdueTime

		len = pInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 20051, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestCashCouponseInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT CurVersion = Read32(p);

}

void ResponseCashCouponseInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //NeedUpdate
	Write32(p, 0); //CurVersion
	Write16(p, 0); //Num
	for (size_t i = 0; i < n; i++)
	{ //Info
		BYTE* pInfo = p;
		Write16(pInfo, 0); //len

		Write32(pInfo, 0); //ItemID
		Write32(pInfo, 0); //PayLimit
		Write32(pInfo, 0); //ReducePay
		Write16(pInfo, 0); //ConsumeLimit
		WriteU(pInfo, 0); //OverdueTime
		Write8(pInfo, 0); //CommodityNum
		Write32(pInfo, 0); //CommodityList[]

		len = pInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //QBCouponsID

	len = p - buf;
	SendToClient(Client, 20052, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestPurchaseLimitCfg(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	bool IsFirst = Read8(p);

}

void ResponsePurchaseLimitCfg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultId
	Write32(p, 0); //Uin
	Write8(p, 0); //NeedUpdate
	Write32(p, 0); //CurVersion
	Write16(p, 0); //ItemNum
	for (size_t i = 0; i < n; i++)
	{ //PurchaseLimitCfgList
		BYTE* pPurchaseLimitCfgList = p;
		Write16(pPurchaseLimitCfgList, 0); //len

		Write32(pPurchaseLimitCfgList, 0); //ItemID
		Write32(pPurchaseLimitCfgList, 0); //LimitNum
		Write32(pPurchaseLimitCfgList, 0); //BeginTime
		Write32(pPurchaseLimitCfgList, 0); //EndTime
		Write8(pPurchaseLimitCfgList, 0); //Type

		len = pPurchaseLimitCfgList - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 21100, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyUpdatePurchaseLimitInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ItemNum
	for (size_t i = 0; i < n; i++)
	{ //PurchaseLimitInfoList
		BYTE* pPurchaseLimitInfoList = p;
		Write16(pPurchaseLimitInfoList, 0); //len

		Write32(pPurchaseLimitInfoList, 0); //ItemID
		Write32(pPurchaseLimitInfoList, 0); //PurchaseNum
		Write32(pPurchaseLimitInfoList, 0); //LastBuyTime

		len = pPurchaseLimitInfoList - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 21101, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestS2APrevUseNum(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int BuyCount = Read32(p);
	for (size_t i = 0; i < n; i++)
	{ //ShoppingCar
		BYTE* pShoppingCar = p;
		len = Read16(pShoppingCar);

		int CommodityID = Read32(pShoppingCar);
		int PriceIdx = Read32(pShoppingCar);
		int DiscountCardID = Read32(pShoppingCar);
		USHORT DisCount = Read16(pShoppingCar);
		UINT SpeedCoinNum = Read32(pShoppingCar);
		USHORT BuyActivityType = Read16(pShoppingCar);
		int BuyActivityPara = Read32(pShoppingCar);
		UCHAR ActivityNameLen = Read8(pShoppingCar);

		p += len;
	}
	int Discount = Read32(p);

}

void NotifyS2APostUseNum(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //Time
	Write32(p, 0); //BuyCount
	for (size_t i = 0; i < n; i++)
	{ //ShoppingCar
		BYTE* pShoppingCar = p;
		Write16(pShoppingCar, 0); //len

		Write32(pShoppingCar, 0); //CommodityID
		Write32(pShoppingCar, 0); //PriceIdx
		Write32(pShoppingCar, 0); //DiscountCardID
		Write16(pShoppingCar, 0); //DisCount
		Write32(pShoppingCar, 0); //SpeedCoinNum
		Write16(pShoppingCar, 0); //BuyActivityType
		Write32(pShoppingCar, 0); //BuyActivityPara
		Write8(pShoppingCar, 0); //ActivityNameLen

		len = pShoppingCar - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void ResponseS2APrevUseNum(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //Time
	Write32(p, 0); //BuyCount
	for (size_t i = 0; i < n; i++)
	{ //ShoppingCar
		BYTE* pShoppingCar = p;
		Write16(pShoppingCar, 0); //len

		Write32(pShoppingCar, 0); //CommodityID
		Write32(pShoppingCar, 0); //PriceIdx
		Write32(pShoppingCar, 0); //DiscountCardID
		Write16(pShoppingCar, 0); //DisCount
		Write32(pShoppingCar, 0); //SpeedCoinNum
		Write16(pShoppingCar, 0); //BuyActivityType
		Write32(pShoppingCar, 0); //BuyActivityPara
		Write8(pShoppingCar, 0); //ActivityNameLen

		len = pShoppingCar - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //ResultID
	Write32(p, 0); //Discount

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetWorldInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT ClientVersion = Read32(p);
	UINT MasterVersion = Read32(p);
	UINT SlaveVersion = Read32(p);
	BYTE WorldID = Read8(p);
	char[] FileHash[] = ReadString(p);
	BYTE ClientCnt = Read8(p);
	UCHAR IsSimplifyVersion = Read8(p);
	UINT PlayerFlag = Read32(p);
	UCHAR FileNum = Read8(p);
	UINT[] ClientFileCRC[] = Read32(p);

}

void ResponseGetWorldInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //LastClientVersion
	Write32(p, 0); //LastMasterVersion
	Write32(p, 0); //LastSlaveVersion
	Write8(p, 0); //OldDownloadServerNum
	Write8(p, 0); //RootDirectionLen
	Write32(p, 0); //MasterFullVersion
	Write32(p, 0); //SlaveFullVersion
	Write16(p, 0); //P2POption
	Write8(p, 0); //WorldCount
	for (size_t i = 0; i < n; i++)
	{ //WorldBaseInfo
		BYTE* pWorldBaseInfo = p;
		Write16(pWorldBaseInfo, 0); //len

		Write8(pWorldBaseInfo, 0); //WorldID
		Write8(pWorldBaseInfo, 0); //NameLen
		Write8(pWorldBaseInfo, 0); //DirNum
		for (size_t i = 0; i < n; i++)
		{ //DirServerInfo
			BYTE* pDirServerInfo = pWorldBaseInfo;
			Write16(pDirServerInfo, 0); //len

			Write32(pDirServerInfo, 0); //ServerID
			Write16(pDirServerInfo, 0); //LocationID
			Write32(pDirServerInfo, 0); //ServerIP
			Write16(pDirServerInfo, 0); //ServerPort[]
			Write8(pDirServerInfo, 0); //HasMultiIPInfo
			for (size_t i = 0; i < n; i++)
			{ //MultiIPInfo
				BYTE* pMultiIPInfo = pDirServerInfo;
				Write16(pMultiIPInfo, 0); //len

				Write8(pMultiIPInfo, 0); //IPCount
				Write32(pMultiIPInfo, 0); //ServerIP[]
				Write8(pMultiIPInfo, 0); //DomainLen

				len = pMultiIPInfo - pDirServerInfo;
				Set16(pDirServerInfo, (WORD)len);
				pDirServerInfo += len;
			}

			len = pDirServerInfo - pWorldBaseInfo;
			Set16(pWorldBaseInfo, (WORD)len);
			pWorldBaseInfo += len;
		}

		len = pWorldBaseInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //CountryCount
	for (size_t i = 0; i < n; i++)
	{ //CountryInfo
		BYTE* pCountryInfo = p;
		Write16(pCountryInfo, 0); //len

		Write8(pCountryInfo, 0); //CountryID
		Write8(pCountryInfo, 0); //ChannelNum
		for (size_t i = 0; i < n; i++)
		{ //ChannelInfo
			BYTE* pChannelInfo = pCountryInfo;
			Write16(pChannelInfo, 0); //len

			Write8(pChannelInfo, 0); //ChannelID
			Write8(pChannelInfo, 0); //IDCNum
			for (size_t i = 0; i < n; i++)
			{ //IDCServerInfo
				BYTE* pIDCServerInfo = pChannelInfo;
				Write16(pIDCServerInfo, 0); //len

				Write16(pIDCServerInfo, 0); //LocationID
				Write8(pIDCServerInfo, 0); //GameServerNum
				for (size_t i = 0; i < n; i++)
				{ //GameServerInfo
					BYTE* pGameServerInfo = pIDCServerInfo;
					Write16(pGameServerInfo, 0); //len

					Write32(pGameServerInfo, 0); //ServerID
					Write32(pGameServerInfo, 0); //ServerIP
					Write16(pGameServerInfo, 0); //TcpPort
					Write16(pGameServerInfo, 0); //UdpPort
					Write16(pGameServerInfo, 0); //MaxPlayerNum
					Write16(pGameServerInfo, 0); //CurrentPlayerNum
					Write32(pGameServerInfo, 0); //RandomKey
					Write8(pGameServerInfo, 0); //IsDisabledLogin
					Write8(pGameServerInfo, 0); //HasMultiIPInfo
					for (size_t i = 0; i < n; i++)
					{ //MultiIPInfo
						BYTE* pMultiIPInfo = pGameServerInfo;
						Write16(pMultiIPInfo, 0); //len

						Write8(pMultiIPInfo, 0); //IPCount
						Write32(pMultiIPInfo, 0); //ServerIP[]
						Write8(pMultiIPInfo, 0); //DomainLen

						len = pMultiIPInfo - pGameServerInfo;
						Set16(pGameServerInfo, (WORD)len);
						pGameServerInfo += len;
					}

					len = pGameServerInfo - pIDCServerInfo;
					Set16(pIDCServerInfo, (WORD)len);
					pIDCServerInfo += len;
				}

				len = pIDCServerInfo - pChannelInfo;
				Set16(pChannelInfo, (WORD)len);
				pChannelInfo += len;
			}

			len = pChannelInfo - pCountryInfo;
			Set16(pCountryInfo, (WORD)len);
			pCountryInfo += len;
		}

		len = pCountryInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ShopServerCount
	for (size_t i = 0; i < n; i++)
	{ //ShopServerInfo
		BYTE* pShopServerInfo = p;
		Write16(pShopServerInfo, 0); //len

		Write32(pShopServerInfo, 0); //ServerID
		Write16(pShopServerInfo, 0); //LocationID
		Write32(pShopServerInfo, 0); //ServerIP
		Write16(pShopServerInfo, 0); //ServerPort
		Write8(pShopServerInfo, 0); //HasMultiIPInfo
		for (size_t i = 0; i < n; i++)
		{ //MultiIPInfo
			BYTE* pMultiIPInfo = pShopServerInfo;
			Write16(pMultiIPInfo, 0); //len

			Write8(pMultiIPInfo, 0); //IPCount
			Write32(pMultiIPInfo, 0); //ServerIP[]
			Write8(pMultiIPInfo, 0); //DomainLen

			len = pMultiIPInfo - pShopServerInfo;
			Set16(pShopServerInfo, (WORD)len);
			pShopServerInfo += len;
		}

		len = pShopServerInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //BorderServerCount
	for (size_t i = 0; i < n; i++)
	{ //BorderServerInfo
		BYTE* pBorderServerInfo = p;
		Write16(pBorderServerInfo, 0); //len

		{ //ServerInfo
			BYTE* pServerInfo = pBorderServerInfo;
			Write16(pServerInfo, 0); //len

			Write32(pServerInfo, 0); //ServerID
			Write32(pServerInfo, 0); //ServerIP
			Write16(pServerInfo, 0); //TcpPort
			Write16(pServerInfo, 0); //UdpPort
			Write16(pServerInfo, 0); //MaxPlayerNum
			Write16(pServerInfo, 0); //CurrentPlayerNum
			Write32(pServerInfo, 0); //RandomKey
			Write8(pServerInfo, 0); //IsDisabledLogin
			Write8(pServerInfo, 0); //HasMultiIPInfo
			for (size_t i = 0; i < n; i++)
			{ //MultiIPInfo
				BYTE* pMultiIPInfo = pServerInfo;
				Write16(pMultiIPInfo, 0); //len

				Write8(pMultiIPInfo, 0); //IPCount
				Write32(pMultiIPInfo, 0); //ServerIP[]
				Write8(pMultiIPInfo, 0); //DomainLen

				len = pMultiIPInfo - pServerInfo;
				Set16(pServerInfo, (WORD)len);
				pServerInfo += len;
			}

			len = pServerInfo - pBorderServerInfo;
			Set16(pBorderServerInfo, (WORD)len);
			pBorderServerInfo += len;
		}
		Write16(pBorderServerInfo, 0); //LocationID
		Write32(pBorderServerInfo, 0); //ServerRoomType

		len = pBorderServerInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //MatchServerCount
	for (size_t i = 0; i < n; i++)
	{ //MatchServerInfo
		BYTE* pMatchServerInfo = p;
		Write16(pMatchServerInfo, 0); //len

		{ //ServerInfo
			BYTE* pServerInfo = pMatchServerInfo;
			Write16(pServerInfo, 0); //len

			Write32(pServerInfo, 0); //ServerID
			Write32(pServerInfo, 0); //ServerIP
			Write16(pServerInfo, 0); //TcpPort
			Write16(pServerInfo, 0); //UdpPort
			Write16(pServerInfo, 0); //MaxPlayerNum
			Write16(pServerInfo, 0); //CurrentPlayerNum
			Write32(pServerInfo, 0); //RandomKey
			Write8(pServerInfo, 0); //IsDisabledLogin
			Write8(pServerInfo, 0); //HasMultiIPInfo
			for (size_t i = 0; i < n; i++)
			{ //MultiIPInfo
				BYTE* pMultiIPInfo = pServerInfo;
				Write16(pMultiIPInfo, 0); //len

				Write8(pMultiIPInfo, 0); //IPCount
				Write32(pMultiIPInfo, 0); //ServerIP[]
				Write8(pMultiIPInfo, 0); //DomainLen

				len = pMultiIPInfo - pServerInfo;
				Set16(pServerInfo, (WORD)len);
				pServerInfo += len;
			}

			len = pServerInfo - pMatchServerInfo;
			Set16(pMatchServerInfo, (WORD)len);
			pMatchServerInfo += len;
		}
		Write16(pMatchServerInfo, 0); //LocationID
		Write32(pMatchServerInfo, 0); //ServerRoomType

		len = pMatchServerInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //RelaxServerCount
	for (size_t i = 0; i < n; i++)
	{ //RelaxServerInfo
		BYTE* pRelaxServerInfo = p;
		Write16(pRelaxServerInfo, 0); //len

		{ //ServerInfo
			BYTE* pServerInfo = pRelaxServerInfo;
			Write16(pServerInfo, 0); //len

			Write32(pServerInfo, 0); //ServerID
			Write32(pServerInfo, 0); //ServerIP
			Write16(pServerInfo, 0); //TcpPort
			Write16(pServerInfo, 0); //UdpPort
			Write16(pServerInfo, 0); //MaxPlayerNum
			Write16(pServerInfo, 0); //CurrentPlayerNum
			Write32(pServerInfo, 0); //RandomKey
			Write8(pServerInfo, 0); //IsDisabledLogin
			Write8(pServerInfo, 0); //HasMultiIPInfo
			for (size_t i = 0; i < n; i++)
			{ //MultiIPInfo
				BYTE* pMultiIPInfo = pServerInfo;
				Write16(pMultiIPInfo, 0); //len

				Write8(pMultiIPInfo, 0); //IPCount
				Write32(pMultiIPInfo, 0); //ServerIP[]
				Write8(pMultiIPInfo, 0); //DomainLen

				len = pMultiIPInfo - pServerInfo;
				Set16(pServerInfo, (WORD)len);
				pServerInfo += len;
			}

			len = pServerInfo - pRelaxServerInfo;
			Set16(pRelaxServerInfo, (WORD)len);
			pRelaxServerInfo += len;
		}
		Write16(pRelaxServerInfo, 0); //LocationID
		Write32(pRelaxServerInfo, 0); //ServerRoomType

		len = pRelaxServerInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //NetAdminServerCount
	for (size_t i = 0; i < n; i++)
	{ //NetAdminServerInfo
		BYTE* pNetAdminServerInfo = p;
		Write16(pNetAdminServerInfo, 0); //len

		Write32(pNetAdminServerInfo, 0); //ServerID
		Write16(pNetAdminServerInfo, 0); //LocationID
		Write32(pNetAdminServerInfo, 0); //ServerIP
		Write16(pNetAdminServerInfo, 0); //ServerPort
		Write8(pNetAdminServerInfo, 0); //HasMultiIPInfo
		for (size_t i = 0; i < n; i++)
		{ //MultiIPInfo
			BYTE* pMultiIPInfo = pNetAdminServerInfo;
			Write16(pMultiIPInfo, 0); //len

			Write8(pMultiIPInfo, 0); //IPCount
			Write32(pMultiIPInfo, 0); //ServerIP[]
			Write8(pMultiIPInfo, 0); //DomainLen

			len = pMultiIPInfo - pNetAdminServerInfo;
			Set16(pNetAdminServerInfo, (WORD)len);
			pNetAdminServerInfo += len;
		}

		len = pNetAdminServerInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //ReasonLen
	Write8(p, 0); //DownloadServerNum
	for (size_t i = 0; i < n; i++)
	{ //DownloadServerInfo
		BYTE* pDownloadServerInfo = p;
		Write16(pDownloadServerInfo, 0); //len

		Write16(pDownloadServerInfo, 0); //IPOrCDNLen
		Write16(pDownloadServerInfo, 0); //Port
		Write16(pDownloadServerInfo, 0); //LocationID

		len = pDownloadServerInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //TeamServerCount
	for (size_t i = 0; i < n; i++)
	{ //TeamServerInfo
		BYTE* pTeamServerInfo = p;
		Write16(pTeamServerInfo, 0); //len

		{ //ServerInfo
			BYTE* pServerInfo = pTeamServerInfo;
			Write16(pServerInfo, 0); //len

			Write32(pServerInfo, 0); //ServerID
			Write32(pServerInfo, 0); //ServerIP
			Write16(pServerInfo, 0); //TcpPort
			Write16(pServerInfo, 0); //UdpPort
			Write16(pServerInfo, 0); //MaxPlayerNum
			Write16(pServerInfo, 0); //CurrentPlayerNum
			Write32(pServerInfo, 0); //RandomKey
			Write8(pServerInfo, 0); //IsDisabledLogin
			Write8(pServerInfo, 0); //HasMultiIPInfo
			for (size_t i = 0; i < n; i++)
			{ //MultiIPInfo
				BYTE* pMultiIPInfo = pServerInfo;
				Write16(pMultiIPInfo, 0); //len

				Write8(pMultiIPInfo, 0); //IPCount
				Write32(pMultiIPInfo, 0); //ServerIP[]
				Write8(pMultiIPInfo, 0); //DomainLen

				len = pMultiIPInfo - pServerInfo;
				Set16(pServerInfo, (WORD)len);
				pServerInfo += len;
			}

			len = pServerInfo - pTeamServerInfo;
			Set16(pTeamServerInfo, (WORD)len);
			pTeamServerInfo += len;
		}
		Write16(pTeamServerInfo, 0); //LocationID
		Write32(pTeamServerInfo, 0); //ServerRoomType

		len = pTeamServerInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //DanceServerCount
	for (size_t i = 0; i < n; i++)
	{ //DanceServerInfo
		BYTE* pDanceServerInfo = p;
		Write16(pDanceServerInfo, 0); //len

		{ //ServerInfo
			BYTE* pServerInfo = pDanceServerInfo;
			Write16(pServerInfo, 0); //len

			Write32(pServerInfo, 0); //ServerID
			Write32(pServerInfo, 0); //ServerIP
			Write16(pServerInfo, 0); //TcpPort
			Write16(pServerInfo, 0); //UdpPort
			Write16(pServerInfo, 0); //MaxPlayerNum
			Write16(pServerInfo, 0); //CurrentPlayerNum
			Write32(pServerInfo, 0); //RandomKey
			Write8(pServerInfo, 0); //IsDisabledLogin
			Write8(pServerInfo, 0); //HasMultiIPInfo
			for (size_t i = 0; i < n; i++)
			{ //MultiIPInfo
				BYTE* pMultiIPInfo = pServerInfo;
				Write16(pMultiIPInfo, 0); //len

				Write8(pMultiIPInfo, 0); //IPCount
				Write32(pMultiIPInfo, 0); //ServerIP[]
				Write8(pMultiIPInfo, 0); //DomainLen

				len = pMultiIPInfo - pServerInfo;
				Set16(pServerInfo, (WORD)len);
				pServerInfo += len;
			}

			len = pServerInfo - pDanceServerInfo;
			Set16(pDanceServerInfo, (WORD)len);
			pDanceServerInfo += len;
		}
		Write16(pDanceServerInfo, 0); //LocationID
		Write32(pDanceServerInfo, 0); //ServerRoomType

		len = pDanceServerInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //SlideServerCount
	for (size_t i = 0; i < n; i++)
	{ //SlideServerInfo
		BYTE* pSlideServerInfo = p;
		Write16(pSlideServerInfo, 0); //len

		{ //ServerInfo
			BYTE* pServerInfo = pSlideServerInfo;
			Write16(pServerInfo, 0); //len

			Write32(pServerInfo, 0); //ServerID
			Write32(pServerInfo, 0); //ServerIP
			Write16(pServerInfo, 0); //TcpPort
			Write16(pServerInfo, 0); //UdpPort
			Write16(pServerInfo, 0); //MaxPlayerNum
			Write16(pServerInfo, 0); //CurrentPlayerNum
			Write32(pServerInfo, 0); //RandomKey
			Write8(pServerInfo, 0); //IsDisabledLogin
			Write8(pServerInfo, 0); //HasMultiIPInfo
			for (size_t i = 0; i < n; i++)
			{ //MultiIPInfo
				BYTE* pMultiIPInfo = pServerInfo;
				Write16(pMultiIPInfo, 0); //len

				Write8(pMultiIPInfo, 0); //IPCount
				Write32(pMultiIPInfo, 0); //ServerIP[]
				Write8(pMultiIPInfo, 0); //DomainLen

				len = pMultiIPInfo - pServerInfo;
				Set16(pServerInfo, (WORD)len);
				pServerInfo += len;
			}

			len = pServerInfo - pSlideServerInfo;
			Set16(pSlideServerInfo, (WORD)len);
			pSlideServerInfo += len;
		}
		Write16(pSlideServerInfo, 0); //LocationID
		Write32(pSlideServerInfo, 0); //ServerRoomType

		len = pSlideServerInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //UpdateType
	Write8(p, 0); //OpenOtherIDCFlag
	Write16(p, 0); //OtherIDCID
	Write8(p, 0); //BugReportServerCount
	for (size_t i = 0; i < n; i++)
	{ //BugReportServerInfo
		BYTE* pBugReportServerInfo = p;
		Write16(pBugReportServerInfo, 0); //len

		Write32(pBugReportServerInfo, 0); //ServerID
		Write16(pBugReportServerInfo, 0); //LocationID
		Write32(pBugReportServerInfo, 0); //ServerIP
		Write16(pBugReportServerInfo, 0); //ServerPort
		Write8(pBugReportServerInfo, 0); //HasMultiIPInfo
		for (size_t i = 0; i < n; i++)
		{ //MultiIPInfo
			BYTE* pMultiIPInfo = pBugReportServerInfo;
			Write16(pMultiIPInfo, 0); //len

			Write8(pMultiIPInfo, 0); //IPCount
			Write32(pMultiIPInfo, 0); //ServerIP[]
			Write8(pMultiIPInfo, 0); //DomainLen

			len = pMultiIPInfo - pBugReportServerInfo;
			Set16(pBugReportServerInfo, (WORD)len);
			pBugReportServerInfo += len;
		}

		len = pBugReportServerInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //IsDynamicDownloadPermitted
	Write8(p, 0); //DynamicDownloadResourceIdNum
	Write32(p, 0); //DynamicDownloadResourceIds[]
	Write8(p, 0); //EnableRandMapMusicPreKnown
	Write16(p, 0); //MinPlayerNumForRand
	Write16(p, 0); //PlayerNumDeltaForRand
	Write8(p, 0); //FBServerCount
	for (size_t i = 0; i < n; i++)
	{ //FBServerInfo
		BYTE* pFBServerInfo = p;
		Write16(pFBServerInfo, 0); //len

		{ //ServerInfo
			BYTE* pServerInfo = pFBServerInfo;
			Write16(pServerInfo, 0); //len

			Write32(pServerInfo, 0); //ServerID
			Write32(pServerInfo, 0); //ServerIP
			Write16(pServerInfo, 0); //TcpPort
			Write16(pServerInfo, 0); //UdpPort
			Write16(pServerInfo, 0); //MaxPlayerNum
			Write16(pServerInfo, 0); //CurrentPlayerNum
			Write32(pServerInfo, 0); //RandomKey
			Write8(pServerInfo, 0); //IsDisabledLogin
			Write8(pServerInfo, 0); //HasMultiIPInfo
			for (size_t i = 0; i < n; i++)
			{ //MultiIPInfo
				BYTE* pMultiIPInfo = pServerInfo;
				Write16(pMultiIPInfo, 0); //len

				Write8(pMultiIPInfo, 0); //IPCount
				Write32(pMultiIPInfo, 0); //ServerIP[]
				Write8(pMultiIPInfo, 0); //DomainLen

				len = pMultiIPInfo - pServerInfo;
				Set16(pServerInfo, (WORD)len);
				pServerInfo += len;
			}

			len = pServerInfo - pFBServerInfo;
			Set16(pFBServerInfo, (WORD)len);
			pFBServerInfo += len;
		}
		Write16(pFBServerInfo, 0); //LocationID
		Write32(pFBServerInfo, 0); //ServerRoomType

		len = pFBServerInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //WebCGIDomainLen
	Write16(p, 0); //WebCGIServerPort
	Write8(p, 0); //WlMatchSvrCount
	for (size_t i = 0; i < n; i++)
	{ //WlMatchSvrInfo
		BYTE* pWlMatchSvrInfo = p;
		Write16(pWlMatchSvrInfo, 0); //len

		{ //ServerInfo
			BYTE* pServerInfo = pWlMatchSvrInfo;
			Write16(pServerInfo, 0); //len

			Write32(pServerInfo, 0); //ServerID
			Write32(pServerInfo, 0); //ServerIP
			Write16(pServerInfo, 0); //TcpPort
			Write16(pServerInfo, 0); //UdpPort
			Write16(pServerInfo, 0); //MaxPlayerNum
			Write16(pServerInfo, 0); //CurrentPlayerNum
			Write32(pServerInfo, 0); //RandomKey
			Write8(pServerInfo, 0); //IsDisabledLogin
			Write8(pServerInfo, 0); //HasMultiIPInfo
			for (size_t i = 0; i < n; i++)
			{ //MultiIPInfo
				BYTE* pMultiIPInfo = pServerInfo;
				Write16(pMultiIPInfo, 0); //len

				Write8(pMultiIPInfo, 0); //IPCount
				Write32(pMultiIPInfo, 0); //ServerIP[]
				Write8(pMultiIPInfo, 0); //DomainLen

				len = pMultiIPInfo - pServerInfo;
				Set16(pServerInfo, (WORD)len);
				pServerInfo += len;
			}

			len = pServerInfo - pWlMatchSvrInfo;
			Set16(pWlMatchSvrInfo, (WORD)len);
			pWlMatchSvrInfo += len;
		}
		Write16(pWlMatchSvrInfo, 0); //LocationID
		Write32(pWlMatchSvrInfo, 0); //ServerRoomType

		len = pWlMatchSvrInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //SkateServerCount
	for (size_t i = 0; i < n; i++)
	{ //SkateServerInfo
		BYTE* pSkateServerInfo = p;
		Write16(pSkateServerInfo, 0); //len

		{ //CommServerInfo
			BYTE* pCommServerInfo = pSkateServerInfo;
			Write16(pCommServerInfo, 0); //len

			{ //ServerInfo
				BYTE* pServerInfo = pCommServerInfo;
				Write16(pServerInfo, 0); //len

				Write32(pServerInfo, 0); //ServerID
				Write32(pServerInfo, 0); //ServerIP
				Write16(pServerInfo, 0); //TcpPort
				Write16(pServerInfo, 0); //UdpPort
				Write16(pServerInfo, 0); //MaxPlayerNum
				Write16(pServerInfo, 0); //CurrentPlayerNum
				Write32(pServerInfo, 0); //RandomKey
				Write8(pServerInfo, 0); //IsDisabledLogin
				Write8(pServerInfo, 0); //HasMultiIPInfo
				for (size_t i = 0; i < n; i++)
				{ //MultiIPInfo
					BYTE* pMultiIPInfo = pServerInfo;
					Write16(pMultiIPInfo, 0); //len

					Write8(pMultiIPInfo, 0); //IPCount
					Write32(pMultiIPInfo, 0); //ServerIP[]
					Write8(pMultiIPInfo, 0); //DomainLen

					len = pMultiIPInfo - pServerInfo;
					Set16(pServerInfo, (WORD)len);
					pServerInfo += len;
				}

				len = pServerInfo - pCommServerInfo;
				Set16(pCommServerInfo, (WORD)len);
				pCommServerInfo += len;
			}
			Write16(pCommServerInfo, 0); //LocationID
			Write32(pCommServerInfo, 0); //ServerRoomType

			len = pCommServerInfo - pSkateServerInfo;
			Set16(pSkateServerInfo, (WORD)len);
			pSkateServerInfo += len;
		}
		Write32(pSkateServerInfo, 0); //ChannelId

		len = pSkateServerInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //VersionCount
	Write32(p, 0); //VersionList[]
	WriteU(p, 0); //IsEnableBETA
	Write32(p, 0); //AreaID
	Write8(p, 0); //PreVersionCount
	Write32(p, 0); //PreVersionList[]
	Write8(p, 0); //IsEnableMapTester
	Write8(p, 0); //DisableRandomDanceSvr
	Write8(p, 0); //DisableRandomSkateSvr
	Write8(p, 0); //ClientSwitch[]
	Write16(p, 0); //PreResoveDomainNum
	for (size_t i = 0; i < n; i++)
	{ //DomainList
		BYTE* pDomainList = p;
		Write16(pDomainList, 0); //len

		Write8(pDomainList, 0); //IPCount
		Write32(pDomainList, 0); //ServerIP[]
		Write8(pDomainList, 0); //DomainLen

		len = pDomainList - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //MRServerCount
	for (size_t i = 0; i < n; i++)
	{ //MRServerInfo
		BYTE* pMRServerInfo = p;
		Write16(pMRServerInfo, 0); //len

		{ //ServerInfo
			BYTE* pServerInfo = pMRServerInfo;
			Write16(pServerInfo, 0); //len

			Write32(pServerInfo, 0); //ServerID
			Write32(pServerInfo, 0); //ServerIP
			Write16(pServerInfo, 0); //TcpPort
			Write16(pServerInfo, 0); //UdpPort
			Write16(pServerInfo, 0); //MaxPlayerNum
			Write16(pServerInfo, 0); //CurrentPlayerNum
			Write32(pServerInfo, 0); //RandomKey
			Write8(pServerInfo, 0); //IsDisabledLogin
			Write8(pServerInfo, 0); //HasMultiIPInfo
			for (size_t i = 0; i < n; i++)
			{ //MultiIPInfo
				BYTE* pMultiIPInfo = pServerInfo;
				Write16(pMultiIPInfo, 0); //len

				Write8(pMultiIPInfo, 0); //IPCount
				Write32(pMultiIPInfo, 0); //ServerIP[]
				Write8(pMultiIPInfo, 0); //DomainLen

				len = pMultiIPInfo - pServerInfo;
				Set16(pServerInfo, (WORD)len);
				pServerInfo += len;
			}

			len = pServerInfo - pMRServerInfo;
			Set16(pMRServerInfo, (WORD)len);
			pMRServerInfo += len;
		}
		Write16(pMRServerInfo, 0); //LocationID
		Write32(pMRServerInfo, 0); //ServerRoomType

		len = pMRServerInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //MinPlayerNumForRandForGsvrd6
	Write8(p, 0); //NpcServerCount
	for (size_t i = 0; i < n; i++)
	{ //NpcServerInfo
		BYTE* pNpcServerInfo = p;
		Write16(pNpcServerInfo, 0); //len

		{ //ServerInfo
			BYTE* pServerInfo = pNpcServerInfo;
			Write16(pServerInfo, 0); //len

			Write32(pServerInfo, 0); //ServerID
			Write32(pServerInfo, 0); //ServerIP
			Write16(pServerInfo, 0); //TcpPort
			Write16(pServerInfo, 0); //UdpPort
			Write16(pServerInfo, 0); //MaxPlayerNum
			Write16(pServerInfo, 0); //CurrentPlayerNum
			Write32(pServerInfo, 0); //RandomKey
			Write8(pServerInfo, 0); //IsDisabledLogin
			Write8(pServerInfo, 0); //HasMultiIPInfo
			for (size_t i = 0; i < n; i++)
			{ //MultiIPInfo
				BYTE* pMultiIPInfo = pServerInfo;
				Write16(pMultiIPInfo, 0); //len

				Write8(pMultiIPInfo, 0); //IPCount
				Write32(pMultiIPInfo, 0); //ServerIP[]
				Write8(pMultiIPInfo, 0); //DomainLen

				len = pMultiIPInfo - pServerInfo;
				Set16(pServerInfo, (WORD)len);
				pServerInfo += len;
			}

			len = pServerInfo - pNpcServerInfo;
			Set16(pNpcServerInfo, (WORD)len);
			pNpcServerInfo += len;
		}
		Write16(pNpcServerInfo, 0); //LocationID
		Write32(pNpcServerInfo, 0); //ServerRoomType

		len = pNpcServerInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //PatchCount
	for (size_t i = 0; i < n; i++)
	{ //PatchMD5List
		BYTE* pPatchMD5List = p;
		Write16(pPatchMD5List, 0); //len

		Write16(pPatchMD5List, 0); //BeginVer
		Write16(pPatchMD5List, 0); //EndVer
		Write8(pPatchMD5List, 0); //MD5Len

		len = pPatchMD5List - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //UrlCount
	for (size_t i = 0; i < n; i++)
	{ //PreLoadList
		BYTE* pPreLoadList = p;
		Write16(pPreLoadList, 0); //len

		Write16(pPreLoadList, 0); //Width
		Write16(pPreLoadList, 0); //Height
		Write8(pPreLoadList, 0); //WithSig
		Write8(pPreLoadList, 0); //URLLen

		len = pPreLoadList - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //LoginBuffLen
	Write16(p, 0); //WebURLLen

	len = p - buf;
	SendToClient(Client, 90, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetChatAreaList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	short GetRoomType = Read16(p);

}

void ResponseGetChatAreaList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	{ //ChatAreaIdRoomIndexList
		BYTE* pChatAreaIdRoomIndexList = p;
		Write16(pChatAreaIdRoomIndexList, 0); //len

		Write8(pChatAreaIdRoomIndexList, 0); //ChatAreaNum
		for (size_t i = 0; i < n; i++)
		{ //ChatAreaIdRoomIndexInfo
			BYTE* pChatAreaIdRoomIndexInfo = pChatAreaIdRoomIndexList;
			Write16(pChatAreaIdRoomIndexInfo, 0); //len

			Write32(pChatAreaIdRoomIndexInfo, 0); //ChatAreaId
			Write16(pChatAreaIdRoomIndexInfo, 0); //StartRoomIdx
			Write16(pChatAreaIdRoomIndexInfo, 0); //RoomNum

			len = pChatAreaIdRoomIndexInfo - pChatAreaIdRoomIndexList;
			Set16(pChatAreaIdRoomIndexList, (WORD)len);
			pChatAreaIdRoomIndexList += len;
		}

		len = pChatAreaIdRoomIndexList - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //GetRoomType

	len = p - buf;
	SendToClient(Client, 85, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetChatRoomList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	short StartRoomIdx = Read16(p);
	short GetRoomNum = Read16(p);
	short GetRoomType = Read16(p);

}

void ResponseGetChatRoomList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen
	Write16(p, 0); //CurTotalRoomNum
	Write16(p, 0); //StartRoomIdx
	Write16(p, 0); //ChatRoomNum
	for (size_t i = 0; i < n; i++)
	{ //ChatRoomInfo
		BYTE* pChatRoomInfo = p;
		Write16(pChatRoomInfo, 0); //len

		Write32(pChatRoomInfo, 0); //ServerID
		Write32(pChatRoomInfo, 0); //ChatRoomID
		Write8(pChatRoomInfo, 0); //RoomNameLen
		Write16(pChatRoomInfo, 0); //CurrPlayerNum
		Write16(pChatRoomInfo, 0); //MaxPlayerNum
		Write32(pChatRoomInfo, 0); //RoomType
		Write16(pChatRoomInfo, 0); //SceneID
		Write16(pChatRoomInfo, 0); //CurrMaleNum
		Write32(pChatRoomInfo, 0); //ChatAreaId

		len = pChatRoomInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //GetRoomType

	len = p - buf;
	SendToClient(Client, 91, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2FUpLoad(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	U Time = ReadU(p);
	UCHAR Cmd = Read8(p);
	USHORT UuidLen = Read16(p);
	USHORT AuthInfoLen = Read16(p);
	UINT TotalLen = Read32(p);
	UINT CurOffSet = Read32(p);
	USHORT DataLen = Read16(p);
	char[] FileMd5[] = Read8(p);
	USHORT EncrptedLen = Read16(p);
	USHORT EncrptedSegLen = Read16(p);

}

void ResponseC2FUpLoad(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //Cmd
	Write32(p, 0); //AckLen
	Write32(p, 0); //TotalLen

	len = p - buf;
	SendToClient(Client, 11200, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyRankedMatchBanMapInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	{ //BanMapCfg
		BYTE* pBanMapCfg = p;
		Write16(pBanMapCfg, 0); //len

		Write32(pBanMapCfg, 0); //GradeLevelLimit
		Write32(pBanMapCfg, 0); //ChooseTime
		Write32(pBanMapCfg, 0); //ShowTime
		Write32(pBanMapCfg, 0); //TotalMapNum
		Write32(pBanMapCfg, 0); //ChooseMapNum
		Write32(pBanMapCfg, 0); //BonusScore
		Write32(pBanMapCfg, 0); //PinnacleBattleTotalMapNum
		Write32(pBanMapCfg, 0); //PinnacleBattleChooseMapNum

		len = pBanMapCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //MapNum
	for (size_t i = 0; i < n; i++)
	{ //MapInfo
		BYTE* pMapInfo = p;
		Write16(pMapInfo, 0); //len

		Write32(pMapInfo, 0); //MapID
		Write32(pMapInfo, 0); //Status
		Write8(pMapInfo, 0); //ThemeMapOrNot
		Write8(pMapInfo, 0); //SeasonNewMapOrNot
		Write8(pMapInfo, 0); //PinnacleBattleMapOrNot
		Write16(pMapInfo, 0); //TotalBeBannedNums
		Write16(pMapInfo, 0); //FinalRandBanMapType

		len = pMapInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //Type

	len = p - buf;
	SendToClient(Client, 25009, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestRankedMatchDoBanMap(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT MapID = Read32(p);
	UCHAR Type = Read8(p);
	UCHAR CurrentRound = Read8(p);

}

void ResponseRankedMatchDoBanMap(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write8(p, 0); //Type
	Write8(p, 0); //BuffNum
	for (size_t i = 0; i < n; i++)
	{ //BuffIDListInfo
		BYTE* pBuffIDListInfo = p;
		Write16(pBuffIDListInfo, 0); //len

		Write32(pBuffIDListInfo, 0); //BuffID
		Write8(pBuffIDListInfo, 0); //Lev

		len = pBuffIDListInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 25010, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyRankedMatchBanMapResult(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //MapNum
	for (size_t i = 0; i < n; i++)
	{ //MapInfo
		BYTE* pMapInfo = p;
		Write16(pMapInfo, 0); //len

		Write32(pMapInfo, 0); //MapID
		Write32(pMapInfo, 0); //Status
		Write8(pMapInfo, 0); //ThemeMapOrNot
		Write8(pMapInfo, 0); //SeasonNewMapOrNot
		Write8(pMapInfo, 0); //PinnacleBattleMapOrNot
		Write16(pMapInfo, 0); //TotalBeBannedNums
		Write16(pMapInfo, 0); //FinalRandBanMapType

		len = pMapInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 25011, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestUseBattleCard(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR CardType = Read8(p);

}

void ResponseUseBattleCard(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //CardType
	Write8(p, 0); //NPCCardType
	Write8(p, 0); //BattleResult
	Write8(p, 0); //PreLvl
	Write8(p, 0); //CurLvl
	Write8(p, 0); //HasAward
	for (size_t i = 0; i < n; i++)
	{ //Award
		BYTE* pAward = p;
		Write16(pAward, 0); //len

		Write32(pAward, 0); //Exp
		Write32(pAward, 0); //Money
		Write32(pAward, 0); //SuperMoney
		Write16(pAward, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAward;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write32(pAward, 0); //Coupons
		Write32(pAward, 0); //GuildPoint
		Write32(pAward, 0); //LuckMoney
		Write8(pAward, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAward;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write32(pAward, 0); //SpeedCoin

		len = pAward - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetBattleCardLevel(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetBattleCardLevel(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //BattleCardItemID[]
	Write8(p, 0); //BossCardFlag[]
	for (size_t i = 0; i < n; i++)
	{ //AwardInfo
		BYTE* pAwardInfo = p;
		Write16(pAwardInfo, 0); //len

		Write8(pAwardInfo, 0); //Len
		Write8(pAwardInfo, 0); //ItemNum
		Write32(pAwardInfo, 0); //ItemID[]

		len = pAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //CurLvl

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetLottoryCommodityInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetLottoryCommodityInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	{ //Info
		BYTE* pInfo = p;
		Write16(pInfo, 0); //len

		Write8(pInfo, 0); //Type
		{ //Award
			BYTE* pAward = pInfo;
			Write16(pAward, 0); //len

			Write32(pAward, 0); //Exp
			Write32(pAward, 0); //Money
			Write32(pAward, 0); //SuperMoney
			Write16(pAward, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAward;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAward;
				Set16(pAward, (WORD)len);
				pAward += len;
			}
			Write32(pAward, 0); //Coupons
			Write32(pAward, 0); //GuildPoint
			Write32(pAward, 0); //LuckMoney
			Write8(pAward, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAward;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAward;
				Set16(pAward, (WORD)len);
				pAward += len;
			}
			Write32(pAward, 0); //SpeedCoin

			len = pAward - pInfo;
			Set16(pInfo, (WORD)len);
			pInfo += len;
		}
		Write16(pInfo, 0); //RemainTime

		len = pInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //BCNum
	for (size_t i = 0; i < n; i++)
	{ //BC
		BYTE* pBC = p;
		Write16(pBC, 0); //len

		Write16(pBC, 0); //ContentLen

		len = pBC - p;
		Set16(p, (WORD)len);
		p += len;
	}
	for (size_t i = 0; i < n; i++)
	{ //AwardInfo
		BYTE* pAwardInfo = p;
		Write16(pAwardInfo, 0); //len

		Write32(pAwardInfo, 0); //Exp
		Write32(pAwardInfo, 0); //Money
		Write32(pAwardInfo, 0); //SuperMoney
		Write16(pAwardInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAwardInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAwardInfo;
			Set16(pAwardInfo, (WORD)len);
			pAwardInfo += len;
		}
		Write32(pAwardInfo, 0); //Coupons
		Write32(pAwardInfo, 0); //GuildPoint
		Write32(pAwardInfo, 0); //LuckMoney
		Write8(pAwardInfo, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAwardInfo;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAwardInfo;
			Set16(pAwardInfo, (WORD)len);
			pAwardInfo += len;
		}
		Write32(pAwardInfo, 0); //SpeedCoin

		len = pAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestRandLottoryCommodity(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR Type = Read8(p);

}

void ResponseRandLottoryCommodity(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	{ //Info
		BYTE* pInfo = p;
		Write16(pInfo, 0); //len

		Write8(pInfo, 0); //Type
		{ //Award
			BYTE* pAward = pInfo;
			Write16(pAward, 0); //len

			Write32(pAward, 0); //Exp
			Write32(pAward, 0); //Money
			Write32(pAward, 0); //SuperMoney
			Write16(pAward, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAward;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAward;
				Set16(pAward, (WORD)len);
				pAward += len;
			}
			Write32(pAward, 0); //Coupons
			Write32(pAward, 0); //GuildPoint
			Write32(pAward, 0); //LuckMoney
			Write8(pAward, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAward;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAward;
				Set16(pAward, (WORD)len);
				pAward += len;
			}
			Write32(pAward, 0); //SpeedCoin

			len = pAward - pInfo;
			Set16(pInfo, (WORD)len);
			pInfo += len;
		}
		Write16(pInfo, 0); //RemainTime

		len = pInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestBuyLottoryCommodity(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseBuyLottoryCommodity(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //HasAward
	for (size_t i = 0; i < n; i++)
	{ //AwardInfo
		BYTE* pAwardInfo = p;
		Write16(pAwardInfo, 0); //len

		Write32(pAwardInfo, 0); //Exp
		Write32(pAwardInfo, 0); //Money
		Write32(pAwardInfo, 0); //SuperMoney
		Write16(pAwardInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAwardInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAwardInfo;
			Set16(pAwardInfo, (WORD)len);
			pAwardInfo += len;
		}
		Write32(pAwardInfo, 0); //Coupons
		Write32(pAwardInfo, 0); //GuildPoint
		Write32(pAwardInfo, 0); //LuckMoney
		Write8(pAwardInfo, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAwardInfo;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAwardInfo;
			Set16(pAwardInfo, (WORD)len);
			pAwardInfo += len;
		}
		Write32(pAwardInfo, 0); //SpeedCoin

		len = pAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //Type

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyCrashModeBeginRoll(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //EggNum
	Write8(p, 0); //OpenFlag
	for (size_t i = 0; i < n; i++)
	{ //AwardInfo
		BYTE* pAwardInfo = p;
		Write16(pAwardInfo, 0); //len

		Write32(pAwardInfo, 0); //Exp
		Write32(pAwardInfo, 0); //Money
		Write32(pAwardInfo, 0); //SuperMoney
		Write16(pAwardInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAwardInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAwardInfo;
			Set16(pAwardInfo, (WORD)len);
			pAwardInfo += len;
		}
		Write32(pAwardInfo, 0); //Coupons
		Write32(pAwardInfo, 0); //GuildPoint
		Write32(pAwardInfo, 0); //LuckMoney
		Write8(pAwardInfo, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAwardInfo;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAwardInfo;
			Set16(pAwardInfo, (WORD)len);
			pAwardInfo += len;
		}
		Write32(pAwardInfo, 0); //SpeedCoin

		len = pAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyCrashModeEndRoll(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	for (size_t i = 0; i < n; i++)
	{ //DisplayAward
		BYTE* pDisplayAward = p;
		Write16(pDisplayAward, 0); //len

		for (size_t i = 0; i < n; i++)
		{ //AwardItem
			BYTE* pAwardItem = pDisplayAward;
			Write16(pAwardItem, 0); //len

			Write32(pAwardItem, 0); //Exp
			Write32(pAwardItem, 0); //Money
			Write32(pAwardItem, 0); //SuperMoney
			Write16(pAwardItem, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAwardItem;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAwardItem;
				Set16(pAwardItem, (WORD)len);
				pAwardItem += len;
			}
			Write32(pAwardItem, 0); //Coupons
			Write32(pAwardItem, 0); //GuildPoint
			Write32(pAwardItem, 0); //LuckMoney
			Write8(pAwardItem, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAwardItem;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAwardItem;
				Set16(pAwardItem, (WORD)len);
				pAwardItem += len;
			}
			Write32(pAwardItem, 0); //SpeedCoin

			len = pAwardItem - pDisplayAward;
			Set16(pDisplayAward, (WORD)len);
			pDisplayAward += len;
		}

		len = pDisplayAward - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestCrashModeRollAward(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR RollType = Read8(p);
	UCHAR RollPos = Read8(p);

}

void ResponseCrashModeRollAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //RollType
	Write8(p, 0); //RollPos
	Write8(p, 0); //HasAward
	for (size_t i = 0; i < n; i++)
	{ //Award
		BYTE* pAward = p;
		Write16(pAward, 0); //len

		Write32(pAward, 0); //Exp
		Write32(pAward, 0); //Money
		Write32(pAward, 0); //SuperMoney
		Write16(pAward, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAward;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write32(pAward, 0); //Coupons
		Write32(pAward, 0); //GuildPoint
		Write32(pAward, 0); //LuckMoney
		Write8(pAward, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAward;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write32(pAward, 0); //SpeedCoin

		len = pAward - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GGetPlayerLoverMatchInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR MatchType = Read8(p);

}

void ResponseC2GGetPlayerLoverMatchInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //LeftLotteryCount
	Write16(p, 0); //Score
	Write16(p, 0); //BoxNum
	for (size_t i = 0; i < n; i++)
	{ //Box
		BYTE* pBox = p;
		Write16(pBox, 0); //len

		{ //BoxBaseInfo
			BYTE* pBoxBaseInfo = pBox;
			Write16(pBoxBaseInfo, 0); //len

			Write8(pBoxBaseInfo, 0); //Index
			Write8(pBoxBaseInfo, 0); //Status

			len = pBoxBaseInfo - pBox;
			Set16(pBox, (WORD)len);
			pBox += len;
		}
		{ //Award
			BYTE* pAward = pBox;
			Write16(pAward, 0); //len

			Write32(pAward, 0); //Exp
			Write32(pAward, 0); //Money
			Write32(pAward, 0); //SuperMoney
			Write16(pAward, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAward;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAward;
				Set16(pAward, (WORD)len);
				pAward += len;
			}
			Write32(pAward, 0); //Coupons
			Write32(pAward, 0); //GuildPoint
			Write32(pAward, 0); //LuckMoney
			Write8(pAward, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAward;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAward;
				Set16(pAward, (WORD)len);
				pAward += len;
			}
			Write32(pAward, 0); //SpeedCoin

			len = pAward - pBox;
			Set16(pBox, (WORD)len);
			pBox += len;
		}
		Write32(pBox, 0); //BoxAppearanceID

		len = pBox - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //GiftAward
		BYTE* pGiftAward = p;
		Write16(pGiftAward, 0); //len

		Write32(pGiftAward, 0); //Exp
		Write32(pGiftAward, 0); //Money
		Write32(pGiftAward, 0); //SuperMoney
		Write16(pGiftAward, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pGiftAward;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pGiftAward;
			Set16(pGiftAward, (WORD)len);
			pGiftAward += len;
		}
		Write32(pGiftAward, 0); //Coupons
		Write32(pGiftAward, 0); //GuildPoint
		Write32(pGiftAward, 0); //LuckMoney
		Write8(pGiftAward, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pGiftAward;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pGiftAward;
			Set16(pGiftAward, (WORD)len);
			pGiftAward += len;
		}
		Write32(pGiftAward, 0); //SpeedCoin

		len = pGiftAward - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //MatchType
	Write8(p, 0); //HasYuLeJiaNianHuaInfo
	for (size_t i = 0; i < n; i++)
	{ //YuLeJiaNianHuaInfo
		BYTE* pYuLeJiaNianHuaInfo = p;
		Write16(pYuLeJiaNianHuaInfo, 0); //len

		Write32(pYuLeJiaNianHuaInfo, 0); //Mode
		Write32(pYuLeJiaNianHuaInfo, 0); //Score
		Write8(pYuLeJiaNianHuaInfo, 0); //RankRangNum
		Write32(pYuLeJiaNianHuaInfo, 0); //RankRange[]
		Write8(pYuLeJiaNianHuaInfo, 0); //RankScoreNum
		Write32(pYuLeJiaNianHuaInfo, 0); //RankScore[]
		Write8(pYuLeJiaNianHuaInfo, 0); //InRecommend
		Write8(pYuLeJiaNianHuaInfo, 0); //InDoubleScore

		len = pYuLeJiaNianHuaInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11310, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyG2CLoverMatchRoomPlayerInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //MaxSendGiftNum
	Write32(p, 0); //SendGiftNum
	Write32(p, 0); //CanSendGiftNum
	Write32(p, 0); //MaxRecvGiftNum
	Write32(p, 0); //RecvGiftNum
	Write32(p, 0); //GetGiftTime
	Write32(p, 0); //CanChangeSuitTime

	len = p - buf;
	SendToClient(Client, 21222, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestC2GInviteTeamMate(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT DstUin = Read32(p);
	bool InviteType = Read8(p);
	UCHAR GameType = Read8(p);

}

void ResponseC2GInviteTeamMate(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //DstUin
	Write8(p, 0); //ReasonLen
	Write8(p, 0); //InviteType

	len = p - buf;
	SendToClient(Client, 11312, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyG2CInviteTeamMateResult(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen
	Write8(p, 0); //InviteType

	len = p - buf;
	SendToClient(Client, 11313, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyG2CBeInviteTeamMate(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //SrcUin
	WriteString(p, 0); //SrcNickName[]
	Write8(p, 0); //InviteType
	Write8(p, 0); //GameType

	len = p - buf;
	SendToClient(Client, 11314, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void AckG2CBeInviteTeamMate(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	short ResultID = Read16(p);
	UINT SrcUin = Read32(p);
	UINT DstUin = Read32(p);
	bool InviteType = Read8(p);

}

void NotifyG2CTimeOutAckBeInviteTeamMate(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //InviteType

	len = p - buf;
	SendToClient(Client, 11315, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyG2CAllocLoveMatchServer(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //TeamMateUin
	Write8(p, 0); //HasLMServer
	for (size_t i = 0; i < n; i++)
	{ //LMServer
		BYTE* pLMServer = p;
		Write16(pLMServer, 0); //len

		Write16(pLMServer, 0); //SvrID
		WriteU(pLMServer, 0); //ExtenalIP
		Write8(pLMServer, 0); //ExtTcpPortNum
		Write16(pLMServer, 0); //ExternalTcpPort[]
		Write8(pLMServer, 0); //ExtUdpPortNum
		Write16(pLMServer, 0); //ExternalUdpPort[]

		len = pLMServer - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //TeamMateType
	Write8(p, 0); //GameType

	len = p - buf;
	SendToClient(Client, 11319, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestC2GMatchTeamMate(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT DressPoint = Read16(p);
	UCHAR GameType = Read8(p);

}

void ResponseC2GMatchTeamMate(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //ExpectedTime[]
	Write8(p, 0); //GameType

	len = p - buf;
	SendToClient(Client, 11316, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyG2CMatchTeamMateResult(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //GameType

	len = p - buf;
	SendToClient(Client, 11317, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestC2GCancelMatchTeamMate(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void RequestGetLoverMatchInviteList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	bool DestGender = Read8(p);

}

void ResponseGetLoverMatchInviteList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //PlayerNum
	for (size_t i = 0; i < n; i++)
	{ //InvitePlayerBaseInfo
		BYTE* pInvitePlayerBaseInfo = p;
		Write16(pInvitePlayerBaseInfo, 0); //len

		WriteUn(pInvitePlayerBaseInfo, 0); //Uin
		WriteString(pInvitePlayerBaseInfo, 0); //NickName[]
		Write8(pInvitePlayerBaseInfo, 0); //Gender
		WriteUn(pInvitePlayerBaseInfo, 0); //Identity
		WriteUn(pInvitePlayerBaseInfo, 0); //Experience
		Write32(pInvitePlayerBaseInfo, 0); //License
		Write32(pInvitePlayerBaseInfo, 0); //TotalHonor
		Write32(pInvitePlayerBaseInfo, 0); //Charm
		Write32(pInvitePlayerBaseInfo, 0); //DanceExp
		Write32(pInvitePlayerBaseInfo, 0); //Admiration
		Write32(pInvitePlayerBaseInfo, 0); //TeamWorkExp

		len = pInvitePlayerBaseInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 11320, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2LMEnterLoveMatchServer(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT TeamMateUin = Read32(p);
	UCHAR TeamMateType = Read8(p);
	UCHAR GameType = Read8(p);

}

void ResponseC2LMEnterLoveMatchServer(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //TeamMateType
	Write8(p, 0); //GameType

	len = p - buf;
	SendToClient(Client, 11326, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2LMMatchRival(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseC2LMMatchRival(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //ExpectedTime

	len = p - buf;
	SendToClient(Client, 11327, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyLM2CMatchRival(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //ExpectedTime

	len = p - buf;
	SendToClient(Client, 11328, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestC2LMCancelMatchRival(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseC2LMCancelMatchRival(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 11329, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyLM2CCancelMatchRival(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 11330, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyLM2CMatchRivalResult(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 11331, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyLM2CLoveMatchPlayerInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //PlayerCount
	for (size_t i = 0; i < n; i++)
	{ //PlayerRoomVisibleInfo
		BYTE* pPlayerRoomVisibleInfo = p;
		Write16(pPlayerRoomVisibleInfo, 0); //len

		WriteUn(pPlayerRoomVisibleInfo, 0); //Uin
		WriteUn(pPlayerRoomVisibleInfo, 0); //Identity
		Write8(pPlayerRoomVisibleInfo, 0); //SeatID
		Write8(pPlayerRoomVisibleInfo, 0); //TeamID
		Write16(pPlayerRoomVisibleInfo, 0); //PlayerID
		Write8(pPlayerRoomVisibleInfo, 0); //Status
		{ //PlayerDBBaseInfo
			BYTE* pPlayerDBBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerDBBaseInfo, 0); //len

			WriteString(pPlayerDBBaseInfo, 0); //NickName[]
			Write8(pPlayerDBBaseInfo, 0); //Gender
			Write8(pPlayerDBBaseInfo, 0); //Country
			Write32(pPlayerDBBaseInfo, 0); //License
			WriteUn(pPlayerDBBaseInfo, 0); //Experience
			Write32(pPlayerDBBaseInfo, 0); //SuperMoney
			Write32(pPlayerDBBaseInfo, 0); //Money
			WriteUn(pPlayerDBBaseInfo, 0); //WinNum
			Write32(pPlayerDBBaseInfo, 0); //SecondNum
			Write32(pPlayerDBBaseInfo, 0); //ThirdNum
			WriteUn(pPlayerDBBaseInfo, 0); //TotalNum
			Write32(pPlayerDBBaseInfo, 0); //CurHonor
			Write32(pPlayerDBBaseInfo, 0); //TotalHonor
			Write32(pPlayerDBBaseInfo, 0); //TodayHonor
			Write32(pPlayerDBBaseInfo, 0); //RelaxTime
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationBefore
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationCur
			Write32(pPlayerDBBaseInfo, 0); //Charm
			Write32(pPlayerDBBaseInfo, 0); //DurationGame
			Write32(pPlayerDBBaseInfo, 0); //DanceExp
			Write32(pPlayerDBBaseInfo, 0); //Coupons
			Write32(pPlayerDBBaseInfo, 0); //Admiration
			Write32(pPlayerDBBaseInfo, 0); //LuckMoney
			Write32(pPlayerDBBaseInfo, 0); //TeamWorkExp
			Write32(pPlayerDBBaseInfo, 0); //AchievePoint
			Write32(pPlayerDBBaseInfo, 0); //RegTime
			WriteString(pPlayerDBBaseInfo, 0); //Signature[]
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchPoint
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchNum
			Write16(pPlayerDBBaseInfo, 0); //LuckyMatchFirstNum
			Write8(pPlayerDBBaseInfo, 0); //LuckyMatchBestRand
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchWinNum
			Write32(pPlayerDBBaseInfo, 0); //FizzPointTotal
			Write16(pPlayerDBBaseInfo, 0); //FizzPointDaily
			Write16(pPlayerDBBaseInfo, 0); //FizzPointWeekly
			Write16(pPlayerDBBaseInfo, 0); //FizzPointLastWeek
			Write8(pPlayerDBBaseInfo, 0); //FizzLotteryStatus
			Write32(pPlayerDBBaseInfo, 0); //FizzLastUpdateTime
			Write32(pPlayerDBBaseInfo, 0); //SNSLocaleCode
			Write32(pPlayerDBBaseInfo, 0); //AuctionRightUnlockTime
			Write8(pPlayerDBBaseInfo, 0); //ReserveFlag
			Write32(pPlayerDBBaseInfo, 0); //CurConsumeScore
			Write32(pPlayerDBBaseInfo, 0); //HistoryConsumeScore
			Write8(pPlayerDBBaseInfo, 0); //CrashModeSponsorID
			Write32(pPlayerDBBaseInfo, 0); //Popularity
			Write32(pPlayerDBBaseInfo, 0); //LadderMatchAchievePoint
			Write32(pPlayerDBBaseInfo, 0); //Cash
			Write32(pPlayerDBBaseInfo, 0); //PlayerGPMIdentity
			Write32(pPlayerDBBaseInfo, 0); //PointTotalScore
			WriteUn(pPlayerDBBaseInfo, 0); //totalMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //lastMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalSeasonId
			WriteUn(pPlayerDBBaseInfo, 0); //lastClearMapMedalTime
			WriteUn(pPlayerDBBaseInfo, 0); //max2048Score
			WriteUn(pPlayerDBBaseInfo, 0); //curPlay2048LeftNum
			Write32(pPlayerDBBaseInfo, 0); //CheerValue
			Write16(pPlayerDBBaseInfo, 0); //SeasonID
			Write32(pPlayerDBBaseInfo, 0); //LastCheerValue
			Write32(pPlayerDBBaseInfo, 0); //SpeedBean
			Write32(pPlayerDBBaseInfo, 0); //SpeedCoin

			len = pPlayerDBBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //PlayerGuildInfo
			BYTE* pPlayerGuildInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerGuildInfo, 0); //len

			WriteString(pPlayerGuildInfo, 0); //GuildName[]
			Write16(pPlayerGuildInfo, 0); //Duty
			Write32(pPlayerGuildInfo, 0); //GuildID
			Write32(pPlayerGuildInfo, 0); //Right
			Write32(pPlayerGuildInfo, 0); //Medal
			Write32(pPlayerGuildInfo, 0); //Contribute
			WriteString(pPlayerGuildInfo, 0); //DutyTitle[]

			len = pPlayerGuildInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write16(pPlayerRoomVisibleInfo, 0); //EquipedItemNum
		for (size_t i = 0; i < n; i++)
		{ //PlayerItemInfo
			BYTE* pPlayerItemInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerItemInfo, 0); //len

			Write32(pPlayerItemInfo, 0); //ItemID
			Write32(pPlayerItemInfo, 0); //ItemNum
			Write32(pPlayerItemInfo, 0); //AvailPeriod
			Write8(pPlayerItemInfo, 0); //Status
			WriteUn(pPlayerItemInfo, 0); //ObtainTime
			Write32(pPlayerItemInfo, 0); //OtherAttribute
			Write16(pPlayerItemInfo, 0); //ItemType

			len = pPlayerItemInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write16(pPlayerRoomVisibleInfo, 0); //PetNum
		for (size_t i = 0; i < n; i++)
		{ //PetInfo
			BYTE* pPetInfo = pPlayerRoomVisibleInfo;
			Write16(pPetInfo, 0); //len

			Write32(pPetInfo, 0); //Uin
			Write32(pPetInfo, 0); //PetId
			WriteString(pPetInfo, 0); //PetName[]
			Write8(pPetInfo, 0); //IsProper
			Write16(pPetInfo, 0); //Level
			Write8(pPetInfo, 0); //Status
			Write16(pPetInfo, 0); //PetSkillNum
			for (size_t i = 0; i < n; i++)
			{ //PetSkillList
				BYTE* pPetSkillList = pPetInfo;
				Write16(pPetSkillList, 0); //len

				Write16(pPetSkillList, 0); //SkillID
				Write8(pPetSkillList, 0); //Status
				Write8(pPetSkillList, 0); //Active
				Write32(pPetSkillList, 0); //Value

				len = pPetSkillList - pPetInfo;
				Set16(pPetInfo, (WORD)len);
				pPetInfo += len;
			}
			Write32(pPetInfo, 0); //StrengLevel
			Write8(pPetInfo, 0); //TopStatus
			{ //CommonInfo
				BYTE* pCommonInfo = pPetInfo;
				Write16(pCommonInfo, 0); //len

				Write32(pCommonInfo, 0); //HuanHuaLevel
				Write8(pCommonInfo, 0); //CanHuanHua

				len = pCommonInfo - pPetInfo;
				Set16(pPetInfo, (WORD)len);
				pPetInfo += len;
			}
			Write16(pPetInfo, 0); //PKStar
			Write32(pPetInfo, 0); //PetSkinID

			len = pPetInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //PlayerGuildMatchInfo
			BYTE* pPlayerGuildMatchInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerGuildMatchInfo, 0); //len

			Write32(pPlayerGuildMatchInfo, 0); //SelfPoint
			Write32(pPlayerGuildMatchInfo, 0); //WinNum
			Write32(pPlayerGuildMatchInfo, 0); //TotalNum

			len = pPlayerGuildMatchInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //IsInTopList
		Write8(pPlayerRoomVisibleInfo, 0); //LoverRaceOrPro
		Write8(pPlayerRoomVisibleInfo, 0); //TmpEffectNum
		Write32(pPlayerRoomVisibleInfo, 0); //TmpEffectItems[]
		Write8(pPlayerRoomVisibleInfo, 0); //OBState
		Write8(pPlayerRoomVisibleInfo, 0); //DebutOrX5
		Write8(pPlayerRoomVisibleInfo, 0); //RandKeyFlag
		WriteUn(pPlayerRoomVisibleInfo, 0); //VipFlag
		Write8(pPlayerRoomVisibleInfo, 0); //HaveAppellation
		for (size_t i = 0; i < n; i++)
		{ //CurAppellation
			BYTE* pCurAppellation = pPlayerRoomVisibleInfo;
			Write16(pCurAppellation, 0); //len

			Write8(pCurAppellation, 0); //Type
			Write8(pCurAppellation, 0); //Level
			Write8(pCurAppellation, 0); //Status
			Write8(pCurAppellation, 0); //Difficulty
			Write32(pCurAppellation, 0); //MapId
			Write32(pCurAppellation, 0); //Value

			len = pCurAppellation - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //NobleInfo
			BYTE* pNobleInfo = pPlayerRoomVisibleInfo;
			Write16(pNobleInfo, 0); //len

			Write32(pNobleInfo, 0); //NobleID
			Write8(pNobleInfo, 0); //NobleLevel
			Write32(pNobleInfo, 0); //NoblePoint
			Write32(pNobleInfo, 0); //NobleLeftDays

			len = pNobleInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasCarryWizard
		for (size_t i = 0; i < n; i++)
		{ //CarryWizardInfo
			BYTE* pCarryWizardInfo = pPlayerRoomVisibleInfo;
			Write16(pCarryWizardInfo, 0); //len

			Write16(pCarryWizardInfo, 0); //WizardID
			WriteString(pCarryWizardInfo, 0); //NickName[]
			Write16(pCarryWizardInfo, 0); //WizardType
			Write8(pCarryWizardInfo, 0); //Order
			Write8(pCarryWizardInfo, 0); //EvolutionBranch
			Write8(pCarryWizardInfo, 0); //IsHuanHua

			len = pCarryWizardInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //GuildVipBaseInfo
			BYTE* pGuildVipBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pGuildVipBaseInfo, 0); //len

			Write8(pGuildVipBaseInfo, 0); //GuildVipLevel
			Write32(pGuildVipBaseInfo, 0); //GuildVipPoint

			len = pGuildVipBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write32(pPlayerRoomVisibleInfo, 0); //ExFlag
		Write8(pPlayerRoomVisibleInfo, 0); //HaveLDMBaseInfo
		for (size_t i = 0; i < n; i++)
		{ //PlayerLDMBaseInfo
			BYTE* pPlayerLDMBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerLDMBaseInfo, 0); //len

			Write8(pPlayerLDMBaseInfo, 0); //Grade
			Write32(pPlayerLDMBaseInfo, 0); //Score
			Write32(pPlayerLDMBaseInfo, 0); //MaxScore
			Write32(pPlayerLDMBaseInfo, 0); //MaxGrade

			len = pPlayerLDMBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasWl
		for (size_t i = 0; i < n; i++)
		{ //PlayerWlVisibleInfo
			BYTE* pPlayerWlVisibleInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerWlVisibleInfo, 0); //len

			Write32(pPlayerWlVisibleInfo, 0); //WonderLandID
			WriteString(pPlayerWlVisibleInfo, 0); //WonderLandName[]
			Write16(pPlayerWlVisibleInfo, 0); //WonderLandDuty
			Write8(pPlayerWlVisibleInfo, 0); //SubType
			Write8(pPlayerWlVisibleInfo, 0); //GuildGrade

			len = pPlayerWlVisibleInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasLoverVip
		for (size_t i = 0; i < n; i++)
		{ //LoverVipInfo
			BYTE* pLoverVipInfo = pPlayerRoomVisibleInfo;
			Write16(pLoverVipInfo, 0); //len

			Write8(pLoverVipInfo, 0); //LoverVipLevel
			Write32(pLoverVipInfo, 0); //LoverVipPoint
			Write8(pLoverVipInfo, 0); //GrowRate

			len = pLoverVipInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasBattleModeSkillInfoList
		for (size_t i = 0; i < n; i++)
		{ //BattleModeSkillInfoList
			BYTE* pBattleModeSkillInfoList = pPlayerRoomVisibleInfo;
			Write16(pBattleModeSkillInfoList, 0); //len

			Write8(pBattleModeSkillInfoList, 0); //SkillNum
			for (size_t i = 0; i < n; i++)
			{ //SkillInfo
				BYTE* pSkillInfo = pBattleModeSkillInfoList;
				Write16(pSkillInfo, 0); //len

				Write16(pSkillInfo, 0); //SkillId
				Write8(pSkillInfo, 0); //SkillLevel

				len = pSkillInfo - pBattleModeSkillInfoList;
				Set16(pBattleModeSkillInfoList, (WORD)len);
				pBattleModeSkillInfoList += len;
			}

			len = pBattleModeSkillInfoList - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasGarden
		for (size_t i = 0; i < n; i++)
		{ //PersonalGardenBaseInfo
			BYTE* pPersonalGardenBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pPersonalGardenBaseInfo, 0); //len

			Write8(pPersonalGardenBaseInfo, 0); //GardenLevel
			Write32(pPersonalGardenBaseInfo, 0); //GardenPoint
			Write8(pPersonalGardenBaseInfo, 0); //GrowRate
			Write32(pPersonalGardenBaseInfo, 0); //GardenExpireTime
			{ //SimpleInfo
				BYTE* pSimpleInfo = pPersonalGardenBaseInfo;
				Write16(pSimpleInfo, 0); //len

				Write32(pSimpleInfo, 0); //WeekPopularity
				Write32(pSimpleInfo, 0); //TotalPopularity
				Write32(pSimpleInfo, 0); //LastUpdatePopularityTime
				Write8(pSimpleInfo, 0); //PrivateType

				len = pSimpleInfo - pPersonalGardenBaseInfo;
				Set16(pPersonalGardenBaseInfo, (WORD)len);
				pPersonalGardenBaseInfo += len;
			}

			len = pPersonalGardenBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //ConsumeVipInfo
			BYTE* pConsumeVipInfo = pPlayerRoomVisibleInfo;
			Write16(pConsumeVipInfo, 0); //len

			WriteUn(pConsumeVipInfo, 0); //VipLevel
			WriteUn(pConsumeVipInfo, 0); //CharmValueOfMonth
			WriteUn(pConsumeVipInfo, 0); //SearchTreasureNums
			WriteUn(pConsumeVipInfo, 0); //GetTreasureNums

			len = pConsumeVipInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HaveBaby
		{ //LoverBabyInfo
			BYTE* pLoverBabyInfo = pPlayerRoomVisibleInfo;
			Write16(pLoverBabyInfo, 0); //len

			Write32(pLoverBabyInfo, 0); //LoverBabyID
			Write32(pLoverBabyInfo, 0); //ItemID
			Write32(pLoverBabyInfo, 0); //GrowValue
			Write32(pLoverBabyInfo, 0); //MentalValue
			Write32(pLoverBabyInfo, 0); //BabyProfileLevel
			Write32(pLoverBabyInfo, 0); //StrengthLevel
			Write32(pLoverBabyInfo, 0); //GrowLevel
			WriteString(pLoverBabyInfo, 0); //LoveBabyNickName[]
			Write16(pLoverBabyInfo, 0); //LoverBabyStat
			Write16(pLoverBabyInfo, 0); //LoverBabyEquipStat
			Write16(pLoverBabyInfo, 0); //LoverBabyTransferdStatus

			len = pLoverBabyInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //EmperorInfo
			BYTE* pEmperorInfo = pPlayerRoomVisibleInfo;
			Write16(pEmperorInfo, 0); //len

			Write8(pEmperorInfo, 0); //EmperorLevel
			Write32(pEmperorInfo, 0); //EmperorPoint
			Write32(pEmperorInfo, 0); //EmperorLeftDays
			Write8(pEmperorInfo, 0); //EmperorGrowRate

			len = pEmperorInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write16(pPlayerRoomVisibleInfo, 0); //RaceCardNums
		for (size_t i = 0; i < n; i++)
		{ //RaceCardAddValueInfo
			BYTE* pRaceCardAddValueInfo = pPlayerRoomVisibleInfo;
			Write16(pRaceCardAddValueInfo, 0); //len

			Write32(pRaceCardAddValueInfo, 0); //RaceCardID
			Write32(pRaceCardAddValueInfo, 0); //AddValue

			len = pRaceCardAddValueInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //GansterScoreInfo
			BYTE* pGansterScoreInfo = pPlayerRoomVisibleInfo;
			Write16(pGansterScoreInfo, 0); //len

			Write32(pGansterScoreInfo, 0); //GansterSeasonID
			Write32(pGansterScoreInfo, 0); //GansterScore
			Write32(pGansterScoreInfo, 0); //PoliceScore
			Write32(pGansterScoreInfo, 0); //TotalGansterScore

			len = pGansterScoreInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write32(pPlayerRoomVisibleInfo, 0); //OlympicId
		Write32(pPlayerRoomVisibleInfo, 0); //NPCEliminateWinTimes
		Write8(pPlayerRoomVisibleInfo, 0); //OriginTeamID
		Write8(pPlayerRoomVisibleInfo, 0); //NxNpc
		Write16(pPlayerRoomVisibleInfo, 0); //NxNpcAILevel
		{ //EquippedActiveKartInfo
			BYTE* pEquippedActiveKartInfo = pPlayerRoomVisibleInfo;
			Write16(pEquippedActiveKartInfo, 0); //len

			Write8(pEquippedActiveKartInfo, 0); //HaveActiveInfo
			Write32(pEquippedActiveKartInfo, 0); //KartID
			Write32(pEquippedActiveKartInfo, 0); //ActiveLevel

			len = pEquippedActiveKartInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //SpecialActivityStatus
		Write8(pPlayerRoomVisibleInfo, 0); //AreaID
		Write8(pPlayerRoomVisibleInfo, 0); //HaveRaiseSecondBaby
		{ //SecondLoverBabyInfo
			BYTE* pSecondLoverBabyInfo = pPlayerRoomVisibleInfo;
			Write16(pSecondLoverBabyInfo, 0); //len

			Write32(pSecondLoverBabyInfo, 0); //LoverBabyID
			Write32(pSecondLoverBabyInfo, 0); //ItemID
			Write32(pSecondLoverBabyInfo, 0); //GrowValue
			Write32(pSecondLoverBabyInfo, 0); //MentalValue
			Write32(pSecondLoverBabyInfo, 0); //BabyProfileLevel
			Write32(pSecondLoverBabyInfo, 0); //StrengthLevel
			Write32(pSecondLoverBabyInfo, 0); //GrowLevel
			WriteString(pSecondLoverBabyInfo, 0); //LoveBabyNickName[]
			Write16(pSecondLoverBabyInfo, 0); //LoverBabyStat
			Write16(pSecondLoverBabyInfo, 0); //LoverBabyEquipStat
			Write16(pSecondLoverBabyInfo, 0); //LoverBabyTransferdStatus

			len = pSecondLoverBabyInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasRankedMatchInfo
		for (size_t i = 0; i < n; i++)
		{ //RankedMatchGradeInfo
			BYTE* pRankedMatchGradeInfo = pPlayerRoomVisibleInfo;
			Write16(pRankedMatchGradeInfo, 0); //len

			Write32(pRankedMatchGradeInfo, 0); //GradeLevel
			Write32(pRankedMatchGradeInfo, 0); //ChildLevel
			Write32(pRankedMatchGradeInfo, 0); //GradeScore
			Write32(pRankedMatchGradeInfo, 0); //MaxGradeScore
			Write32(pRankedMatchGradeInfo, 0); //TotalScore

			len = pRankedMatchGradeInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasHuanLingChangeInfo
		for (size_t i = 0; i < n; i++)
		{ //HuanLingSuitInfo
			BYTE* pHuanLingSuitInfo = pPlayerRoomVisibleInfo;
			Write16(pHuanLingSuitInfo, 0); //len

			Write32(pHuanLingSuitInfo, 0); //SuitID
			Write8(pHuanLingSuitInfo, 0); //ChangeLevel

			len = pHuanLingSuitInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //EquipSealType
		Write16(pPlayerRoomVisibleInfo, 0); //Role
		Write8(pPlayerRoomVisibleInfo, 0); //SpecialActivityIDNum
		Write8(pPlayerRoomVisibleInfo, 0); //CrewID
		Write8(pPlayerRoomVisibleInfo, 0); //SpecialActivityInfoNum
		for (size_t i = 0; i < n; i++)
		{ //SpecialActivityInfo
			BYTE* pSpecialActivityInfo = pPlayerRoomVisibleInfo;
			Write16(pSpecialActivityInfo, 0); //len

			Write8(pSpecialActivityInfo, 0); //ProfessionLicenseInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ProfessionLicenseInfo
				BYTE* pProfessionLicenseInfo = pSpecialActivityInfo;
				Write16(pProfessionLicenseInfo, 0); //len

				Write8(pProfessionLicenseInfo, 0); //BigLevel
				Write8(pProfessionLicenseInfo, 0); //SmallLevel

				len = pProfessionLicenseInfo - pSpecialActivityInfo;
				Set16(pSpecialActivityInfo, (WORD)len);
				pSpecialActivityInfo += len;
			}

			len = pSpecialActivityInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //ParaNum
		Write32(pPlayerRoomVisibleInfo, 0); //ParaList[]
		Write8(pPlayerRoomVisibleInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemOrder
			BYTE* pItemOrder = pPlayerRoomVisibleInfo;
			Write16(pItemOrder, 0); //len

			Write32(pItemOrder, 0); //KartID
			Write32(pItemOrder, 0); //Order
			Write32(pItemOrder, 0); //BackGroundID

			len = pItemOrder - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //TDCExcluItemNum
		Write32(pPlayerRoomVisibleInfo, 0); //TDCExclusiveItemID[]
		Write8(pPlayerRoomVisibleInfo, 0); //EquipNiChangItemNum
		for (size_t i = 0; i < n; i++)
		{ //NiChangPavilionEquipItemInfo
			BYTE* pNiChangPavilionEquipItemInfo = pPlayerRoomVisibleInfo;
			Write16(pNiChangPavilionEquipItemInfo, 0); //len

			Write32(pNiChangPavilionEquipItemInfo, 0); //ItemId
			Write16(pNiChangPavilionEquipItemInfo, 0); //CurrentEquipColorationPlanId

			len = pNiChangPavilionEquipItemInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //TestKartGameType
		Write32(pPlayerRoomVisibleInfo, 0); //GameTestKartID
		Write8(pPlayerRoomVisibleInfo, 0); //HasStarsFightingInfo
		for (size_t i = 0; i < n; i++)
		{ //StarsFightingInfo
			BYTE* pStarsFightingInfo = pPlayerRoomVisibleInfo;
			Write16(pStarsFightingInfo, 0); //len

			Write32(pStarsFightingInfo, 0); //Star
			Write32(pStarsFightingInfo, 0); //StarVal
			Write32(pStarsFightingInfo, 0); //StarsFightingStarLevel

			len = pStarsFightingInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //RoomBGSetting

		len = pPlayerRoomVisibleInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //KartNum
	for (size_t i = 0; i < n; i++)
	{ //KartRefitInfo
		BYTE* pKartRefitInfo = p;
		Write16(pKartRefitInfo, 0); //len

		Write32(pKartRefitInfo, 0); //Uin
		Write32(pKartRefitInfo, 0); //KartId
		Write32(pKartRefitInfo, 0); //RefitCout
		Write16(pKartRefitInfo, 0); //MaxFlags
		Write16(pKartRefitInfo, 0); //WWeight
		Write16(pKartRefitInfo, 0); //SpeedWeight
		Write16(pKartRefitInfo, 0); //JetWeight
		Write16(pKartRefitInfo, 0); //SJetWeight
		Write16(pKartRefitInfo, 0); //AccuWeight
		Write32(pKartRefitInfo, 0); //ShapeRefitCount
		Write32(pKartRefitInfo, 0); //KartHeadRefitItemID
		Write32(pKartRefitInfo, 0); //KartTailRefitItemID
		Write32(pKartRefitInfo, 0); //KartFlankRefitItemID
		Write32(pKartRefitInfo, 0); //KartTireRefitItemID
		Write32(pKartRefitInfo, 0); //SecondRefitCount
		Write16(pKartRefitInfo, 0); //Speed2Weight
		Write16(pKartRefitInfo, 0); //DriftVecWeight
		Write16(pKartRefitInfo, 0); //AdditionalZSpeedWeight
		Write16(pKartRefitInfo, 0); //AntiCollisionWeight
		Write16(pKartRefitInfo, 0); //LuckyValue
		Write16(pKartRefitInfo, 0); //RefitLuckyValueMaxWeight
		Write32(pKartRefitInfo, 0); //ShapeSuitID
		Write8(pKartRefitInfo, 0); //LegendSuitLevel
		Write32(pKartRefitInfo, 0); //LegendSuitLevelChoice
		Write32(pKartRefitInfo, 0); //ShapeLegendSuitID

		len = pKartRefitInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //NoCooperDistance

	len = p - buf;
	SendToClient(Client, 11332, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyLM2CCooperInc(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //Reason
	Write16(p, 0); //CooperInc
	Write16(p, 0); //CurAccuCooper
	Write32(p, 0); //TotalCooper
	Write8(p, 0); //BeTriggerSuperJet
	Write8(p, 0); //SuperJetTime
	Write8(p, 0); //TriggerLoveTimeLimit
	Write32(p, 0); //NoCooperDistance
	Write32(p, 0); //Uin

	len = p - buf;
	SendToClient(Client, 11338, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestC2LMTriggerSuperJet(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR TeamRank = Read8(p);
	UCHAR SkillID = Read8(p);

}

void ResponseC2LMTriggerSuperJet(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //SkillID
	Write8(p, 0); //SkillType

	len = p - buf;
	SendToClient(Client, 11339, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyLM2CSuperJet(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //SuperJetTeamMateUin
	Write8(p, 0); //SkillID
	Write8(p, 0); //SkillType
	Write8(p, 0); //IsAck

	len = p - buf;
	SendToClient(Client, 11340, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyLM2CLoveTime(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Time
	Write8(p, 0); //LoveTimeType
	Write32(p, 0); //LoverDistanceLimit
	Write16(p, 0); //MemberNum
	for (size_t i = 0; i < n; i++)
	{ //MemberInfo
		BYTE* pMemberInfo = p;
		Write16(pMemberInfo, 0); //len

		Write32(pMemberInfo, 0); //Uin
		Write8(pMemberInfo, 0); //SkillType
		Write16(pMemberInfo, 0); //CurRound
		Write32(pMemberInfo, 0); //CurrentPosition[]
		Write32(pMemberInfo, 0); //CurrentCheckPoint[]
		Write32(pMemberInfo, 0); //DistanceToEnd

		len = pMemberInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //CrossDistance

	len = p - buf;
	SendToClient(Client, 11341, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestC2LMOverSuperJet(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void NotifyLM2CLoveMatchRaceOver(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //CurrentPlayerNum
	for (size_t i = 0; i < n; i++)
	{ //RaceScore
		BYTE* pRaceScore = p;
		Write16(pRaceScore, 0); //len

		WriteUn(pRaceScore, 0); //Uin
		WriteUn(pRaceScore, 0); //FinTime
		Write32(pRaceScore, 0); //TP
		Write32(pRaceScore, 0); //MoneyInc
		Write32(pRaceScore, 0); //TotalMoney
		Write32(pRaceScore, 0); //ExpInc
		Write32(pRaceScore, 0); //TotalExp
		Write8(pRaceScore, 0); //AwardNum
		Write32(pRaceScore, 0); //SpecialAward[]
		Write32(pRaceScore, 0); //LotteryScoreInc
		Write32(pRaceScore, 0); //TotalLotteryScore
		Write32(pRaceScore, 0); //TotalCooper
		Write8(pRaceScore, 0); //EvaluteNum
		for (size_t i = 0; i < n; i++)
		{ //Evalute
			BYTE* pEvalute = pRaceScore;
			Write16(pEvalute, 0); //len

			Write8(pEvalute, 0); //Evaluate
			Write8(pEvalute, 0); //Cnt

			len = pEvalute - pRaceScore;
			Set16(pRaceScore, (WORD)len);
			pRaceScore += len;
		}
		Write8(pRaceScore, 0); //HasYuLeJiaNianHuaComputeData
		for (size_t i = 0; i < n; i++)
		{ //YuLeJiaNianHuaComputeData
			BYTE* pYuLeJiaNianHuaComputeData = pRaceScore;
			Write16(pYuLeJiaNianHuaComputeData, 0); //len

			Write32(pYuLeJiaNianHuaComputeData, 0); //AwardScore
			Write8(pYuLeJiaNianHuaComputeData, 0); //Recommend
			Write8(pYuLeJiaNianHuaComputeData, 0); //ScoreDouble
			Write8(pYuLeJiaNianHuaComputeData, 0); //GuaJi

			len = pYuLeJiaNianHuaComputeData - pRaceScore;
			Set16(pRaceScore, (WORD)len);
			pRaceScore += len;
		}

		len = pRaceScore - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //WinTeamID
	WriteUn(p, 0); //AwardTime
	{ //TeamResult
		BYTE* pTeamResult = p;
		Write16(pTeamResult, 0); //len

		Write32(pTeamResult, 0); //Accelerate
		Write32(pTeamResult, 0); //SucUseAngle
		Write32(pTeamResult, 0); //SucUseBlueSpeedUp
		Write32(pTeamResult, 0); //SucCooperMissile
		Write32(pTeamResult, 0); //PropPoint
		Write32(pTeamResult, 0); //ContinuousRace

		len = pTeamResult - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //KickOffPlayerNumber
	for (size_t i = 0; i < n; i++)
	{ //KickOffPlayer
		BYTE* pKickOffPlayer = p;
		Write16(pKickOffPlayer, 0); //len

		Write32(pKickOffPlayer, 0); //Uin
		WriteString(pKickOffPlayer, 0); //NickName[]
		Write8(pKickOffPlayer, 0); //Gender
		Write8(pKickOffPlayer, 0); //TeamID
		Write8(pKickOffPlayer, 0); //Country

		len = pKickOffPlayer - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //WinType

	len = p - buf;
	SendToClient(Client, 11333, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestC2LMReturnLoveMatchRoom(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseC2LMReturnLoveMatchRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 11334, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyLM2CReturnLoveMatchRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //TeamMatchUin
	Write32(p, 0); //RetTimer

	len = p - buf;
	SendToClient(Client, 11335, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestC2LMQuitLoveMatch(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseC2LMQuitLoveMatch(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 11336, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GLoveMatchLottery(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT Index = Read32(p);

}

void ResponseC2GLoveMatchLottery(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //HasAward
	for (size_t i = 0; i < n; i++)
	{ //Award
		BYTE* pAward = p;
		Write16(pAward, 0); //len

		Write32(pAward, 0); //Exp
		Write32(pAward, 0); //Money
		Write32(pAward, 0); //SuperMoney
		Write16(pAward, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAward;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write32(pAward, 0); //Coupons
		Write32(pAward, 0); //GuildPoint
		Write32(pAward, 0); //LuckMoney
		Write8(pAward, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAward;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write32(pAward, 0); //SpeedCoin

		len = pAward - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11337, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2LMGetOneTruthInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseC2LMGetOneTruthInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	{ //Truth
		BYTE* pTruth = p;
		Write16(pTruth, 0); //len

		Write32(pTruth, 0); //TruthID
		Write8(pTruth, 0); //QuestionLen
		Write8(pTruth, 0); //OptionNum
		for (size_t i = 0; i < n; i++)
		{ //Options
			BYTE* pOptions = pTruth;
			Write16(pOptions, 0); //len

			Write8(pOptions, 0); //OptionLen

			len = pOptions - pTruth;
			Set16(pTruth, (WORD)len);
			pTruth += len;
		}

		len = pTruth - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //CDTime

	len = p - buf;
	SendToClient(Client, 21221, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GGetLoveMatchLotteryBroad(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	U Time = ReadU(p);
	UCHAR MatchType = Read8(p);

}

void ResponseC2GGetLoveMatchLotteryBroad(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //MsgNum
	for (size_t i = 0; i < n; i++)
	{ //Msg
		BYTE* pMsg = p;
		Write16(pMsg, 0); //len

		WriteString(pMsg, 0); //NickName[]
		Write32(pMsg, 0); //ItemID

		len = pMsg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //MatchType

	len = p - buf;
	SendToClient(Client, 11343, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GGetLoverMatchCfg(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR MatchType = Read8(p);

}

void ResponseC2GGetLoverMatchCfg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //LotteryTimesLimit
	Write16(p, 0); //AwardNum
	Write(p, 0); //AwardId[]
	Write16(p, 0); //StarScore
	Write16(p, 0); //MapNum
	Write32(p, 0); //MapID[]
	Write8(p, 0); //MatchType

	len = p - buf;
	SendToClient(Client, 11311, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyG2CLoverMatchTopRaceStageInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //Stage
	for (size_t i = 0; i < n; i++)
	{ //StageInfo
		BYTE* pStageInfo = p;
		Write16(pStageInfo, 0); //len

		Write8(pStageInfo, 0); //TeamNum
		for (size_t i = 0; i < n; i++)
		{ //TeamList
			BYTE* pTeamList = pStageInfo;
			Write16(pTeamList, 0); //len

			for (size_t i = 0; i < n; i++)
			{ //MatcherInfo
				BYTE* pMatcherInfo = pTeamList;
				Write16(pMatcherInfo, 0); //len

				Write32(pMatcherInfo, 0); //Uin
				WriteString(pMatcherInfo, 0); //NickName[]

				len = pMatcherInfo - pTeamList;
				Set16(pTeamList, (WORD)len);
				pTeamList += len;
			}
			Write8(pTeamList, 0); //Status
			Write8(pTeamList, 0); //IsNew

			len = pTeamList - pStageInfo;
			Set16(pStageInfo, (WORD)len);
			pStageInfo += len;
		}

		len = pStageInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //LeftTimeForNextStage

	len = p - buf;
	SendToClient(Client, 11376, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyG2CLoverMatchTopRaceAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write8(p, 0); //Stage
	Write16(p, 0); //GetFateFuleCount
	Write16(p, 0); //UseFateFuleCount
	{ //Award
		BYTE* pAward = p;
		Write16(pAward, 0); //len

		Write32(pAward, 0); //Exp
		Write32(pAward, 0); //Money
		Write32(pAward, 0); //SuperMoney
		Write16(pAward, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAward;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write32(pAward, 0); //Coupons
		Write32(pAward, 0); //GuildPoint
		Write32(pAward, 0); //LuckMoney
		Write8(pAward, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAward;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write32(pAward, 0); //SpeedCoin

		len = pAward - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11377, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyG2CLoverMatchTopRaceNextStageShow(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //LeftTimeForGameBegin

	len = p - buf;
	SendToClient(Client, 11378, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestQueryIsInLoverMatchTime(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR MatchType = Read8(p);

}

void ResponseQueryIsInLoverMatchTime(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //MatchType

	len = p - buf;
	SendToClient(Client, 11321, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestChangeLMTeamMateMatchMode(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR GameType = Read8(p);
	UCHAR MatchMode = Read8(p);

}

void ResponseChangeLMTeamMateMatchMode(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write16(p, 0); //ExpectedTime[]
	Write8(p, 0); //GameType
	Write8(p, 0); //MatchMode

	len = p - buf;
	SendToClient(Client, 11359, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetAuctionCfg(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT ClientAuctionCfgVersion = Read32(p);
	UINT ClientBulletinVersion = Read32(p);
	UINT ClientAuctionId = Read32(p);

}

void ResponseGetAuctionCfg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //Result
	Write8(p, 0); //HasAuctionCfg
	for (size_t i = 0; i < n; i++)
	{ //AuctionCfg
		BYTE* pAuctionCfg = p;
		Write16(pAuctionCfg, 0); //len

		Write32(pAuctionCfg, 0); //Version
		Write32(pAuctionCfg, 0); //AuctionId
		Write32(pAuctionCfg, 0); //BeginTime
		Write32(pAuctionCfg, 0); //CalcTime
		Write32(pAuctionCfg, 0); //EndTime
		Write8(pAuctionCfg, 0); //CommodityNumber
		for (size_t i = 0; i < n; i++)
		{ //CommodityCfg
			BYTE* pCommodityCfg = pAuctionCfg;
			Write16(pCommodityCfg, 0); //len

			Write32(pCommodityCfg, 0); //ItemId
			Write32(pCommodityCfg, 0); //ItemAvailPeriod
			Write32(pCommodityCfg, 0); //ItemNumber
			Write32(pCommodityCfg, 0); //StartingPrice
			Write32(pCommodityCfg, 0); //IncreasePrice
			Write8(pCommodityCfg, 0); //CommodityId
			Write8(pCommodityCfg, 0); //DescLen

			len = pCommodityCfg - pAuctionCfg;
			Set16(pAuctionCfg, (WORD)len);
			pAuctionCfg += len;
		}
		Write32(pAuctionCfg, 0); //PreviewTime
		Write8(pAuctionCfg, 0); //AuctionType

		len = pAuctionCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasBulletin
	for (size_t i = 0; i < n; i++)
	{ //Bulletin
		BYTE* pBulletin = p;
		Write16(pBulletin, 0); //len

		Write32(pBulletin, 0); //Version
		Write8(pBulletin, 0); //ContentLen

		len = pBulletin - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //LeftTime
	WriteUn(p, 0); //hasBegan
	Write32(p, 0); //QBCouponsID
	Write8(p, 0); //LastAuctionType

	len = p - buf;
	SendToClient(Client, 11411, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetCurAuctionInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetCurAuctionInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //Result
	Write32(p, 0); //AuctionId
	Write8(p, 0); //AuctionNumber
	for (size_t i = 0; i < n; i++)
	{ //CurAuctionInfo
		BYTE* pCurAuctionInfo = p;
		Write16(pCurAuctionInfo, 0); //len

		Write32(pCurAuctionInfo, 0); //BidUin
		Write32(pCurAuctionInfo, 0); //BidPrice
		Write32(pCurAuctionInfo, 0); //BidNumber
		Write8(pCurAuctionInfo, 0); //CommodityId
		Write8(pCurAuctionInfo, 0); //NameLength

		len = pCurAuctionInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11413, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetParticipateAuction(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetParticipateAuction(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //Result
	Write8(p, 0); //UnPayNumber
	for (size_t i = 0; i < n; i++)
	{ //UnPayCommodity
		BYTE* pUnPayCommodity = p;
		Write16(pUnPayCommodity, 0); //len

		Write32(pUnPayCommodity, 0); //AuctionId
		Write8(pUnPayCommodity, 0); //CommodityId
		Write32(pUnPayCommodity, 0); //BidPrice
		Write32(pUnPayCommodity, 0); //BidTime
		Write32(pUnPayCommodity, 0); //ItemId
		Write32(pUnPayCommodity, 0); //ItemAvailPeriod
		Write32(pUnPayCommodity, 0); //ItemNumber
		Write8(pUnPayCommodity, 0); //AuctionType

		len = pUnPayCommodity - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //CurParticipateNumber
	for (size_t i = 0; i < n; i++)
	{ //CurParticipate
		BYTE* pCurParticipate = p;
		Write16(pCurParticipate, 0); //len

		Write32(pCurParticipate, 0); //AuctionId
		Write8(pCurParticipate, 0); //CommodityId

		len = pCurParticipate - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11412, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetAuctionList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT StartSeqId = Read32(p);

}

void ResponseGetAuctionList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //Result
	Write32(p, 0); //AuctionId
	Write16(p, 0); //ListSize
	for (size_t i = 0; i < n; i++)
	{ //HistoryList
		BYTE* pHistoryList = p;
		Write16(pHistoryList, 0); //len

		Write32(pHistoryList, 0); //BidUin
		Write32(pHistoryList, 0); //BidPrice
		Write8(pHistoryList, 0); //CommodityId
		Write8(pHistoryList, 0); //NameLength
		Write32(pHistoryList, 0); //SeqId

		len = pHistoryList - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11414, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestBidAuctionCommodity(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT AuctionId = Read32(p);
	UCHAR CommodityId = Read8(p);
	UINT BidPrice = Read32(p);

}

void ResponseBidAuctionCommodity(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //Result
	Write32(p, 0); //AuctionId
	{ //CurAunctionInfo
		BYTE* pCurAunctionInfo = p;
		Write16(pCurAunctionInfo, 0); //len

		Write32(pCurAunctionInfo, 0); //BidUin
		Write32(pCurAunctionInfo, 0); //BidPrice
		Write32(pCurAunctionInfo, 0); //BidNumber
		Write8(pCurAunctionInfo, 0); //CommodityId
		Write8(pCurAunctionInfo, 0); //NameLength

		len = pCurAunctionInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 11415, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyClientBidExceedByOther(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //AuctionId
	{ //AuctionInfo
		BYTE* pAuctionInfo = p;
		Write16(pAuctionInfo, 0); //len

		Write32(pAuctionInfo, 0); //BidUin
		Write32(pAuctionInfo, 0); //BidPrice
		Write32(pAuctionInfo, 0); //BidNumber
		Write8(pAuctionInfo, 0); //CommodityId
		Write8(pAuctionInfo, 0); //NameLength

		len = pAuctionInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11416, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyClientSucessAuction(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	{ //UnpayCommodity
		BYTE* pUnpayCommodity = p;
		Write16(pUnpayCommodity, 0); //len

		Write32(pUnpayCommodity, 0); //AuctionId
		Write8(pUnpayCommodity, 0); //CommodityId
		Write32(pUnpayCommodity, 0); //BidPrice
		Write32(pUnpayCommodity, 0); //BidTime
		Write32(pUnpayCommodity, 0); //ItemId
		Write32(pUnpayCommodity, 0); //ItemAvailPeriod
		Write32(pUnpayCommodity, 0); //ItemNumber
		Write8(pUnpayCommodity, 0); //AuctionType

		len = pUnpayCommodity - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11417, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestPayAuctionCommodity(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT AuctionId = Read32(p);
	UCHAR CommodityId = Read8(p);

}

void ResponsePayAuctionCommodity(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //Result
	Write32(p, 0); //AuctionId
	Write8(p, 0); //CommodityId
	Write8(p, 0); //AuctionType

	len = p - buf;
	SendToClient(Client, 11418, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetSingleAuctionInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT AuctionId = Read32(p);
	UCHAR CommodityId = Read8(p);

}

void ResponseGetSingleAuctionInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //Result
	Write32(p, 0); //AuctionId
	Write8(p, 0); //HasAuctionInfo
	for (size_t i = 0; i < n; i++)
	{ //CurAuctionInfo
		BYTE* pCurAuctionInfo = p;
		Write16(pCurAuctionInfo, 0); //len

		Write32(pCurAuctionInfo, 0); //BidUin
		Write32(pCurAuctionInfo, 0); //BidPrice
		Write32(pCurAuctionInfo, 0); //BidNumber
		Write8(pCurAuctionInfo, 0); //CommodityId
		Write8(pCurAuctionInfo, 0); //NameLength

		len = pCurAuctionInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11419, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyLockedAuctionMoney(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //LockedAuctionMoney

	len = p - buf;
	SendToClient(Client, 11420, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyAuctionEnd(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //AuctionId
	Write8(p, 0); //AuctionNumber
	for (size_t i = 0; i < n; i++)
	{ //CurAuctionInfo
		BYTE* pCurAuctionInfo = p;
		Write16(pCurAuctionInfo, 0); //len

		Write32(pCurAuctionInfo, 0); //BidUin
		Write32(pCurAuctionInfo, 0); //BidPrice
		Write8(pCurAuctionInfo, 0); //CommodityId
		Write32(pCurAuctionInfo, 0); //ItemId
		Write32(pCurAuctionInfo, 0); //ItemAvailPeriod
		Write32(pCurAuctionInfo, 0); //ItemNumber
		Write8(pCurAuctionInfo, 0); //NameLength

		len = pCurAuctionInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasParticipate

	len = p - buf;
	SendToClient(Client, 11446, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestFBChangeLev(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	bool NewLev = Read8(p);

}

void ResponseFBChangeLev(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	{ //FBInfo
		BYTE* pFBInfo = p;
		Write16(pFBInfo, 0); //len

		Write8(pFBInfo, 0); //AvailableLev
		Write8(pFBInfo, 0); //Lev
		Write8(pFBInfo, 0); //SubLev
		Write32(pFBInfo, 0); //BossID
		Write8(pFBInfo, 0); //FBSeason

		len = pFBInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11360, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyFBChangeLev(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	{ //FBInfo
		BYTE* pFBInfo = p;
		Write16(pFBInfo, 0); //len

		Write8(pFBInfo, 0); //AvailableLev
		Write8(pFBInfo, 0); //Lev
		Write8(pFBInfo, 0); //SubLev
		Write32(pFBInfo, 0); //BossID
		Write8(pFBInfo, 0); //FBSeason

		len = pFBInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11361, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyBroadcast(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	{ //BroadcastInfo
		BYTE* pBroadcastInfo = p;
		Write16(pBroadcastInfo, 0); //len

		Write8(pBroadcastInfo, 0); //BCFlag
		Write16(pBroadcastInfo, 0); //ConTime
		Write16(pBroadcastInfo, 0); //ContentLen
		Write32(pBroadcastInfo, 0); //BroadcastType
		Write8(pBroadcastInfo, 0); //DisplayFlag
		Write32(pBroadcastInfo, 0); //ID1
		Write32(pBroadcastInfo, 0); //ID2
		Write16(pBroadcastInfo, 0); //AttachLen

		len = pBroadcastInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 541, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestOpenBox(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	int TreasureBoxID = Read32(p);
	{ //Key
		BYTE* pKey = p;
		len = Read16(pKey);

		int KeyType = Read32(pKey);
		for (size_t i = 0; i < n; i++)
		{ //KeyEntry
			BYTE* pKeyEntry = pKey;
			len = Read16(pKeyEntry);

			int KeyID = Read32(pKeyEntry);
			int Num = Read32(pKeyEntry);

			pKey += len;
		}
		bool IsNotConsume = Read8(pKey);

		p += len;
	}
	bool SpecialIdx = Read8(p);
	USHORT MutiOpenNum = Read16(p);
	USHORT OpenBoxSrcType = Read16(p);
	UCHAR SelectAwardNum = Read8(p);
	for (size_t i = 0; i < n; i++)
	{ //AwardIndexInfo
		BYTE* pAwardIndexInfo = p;
		len = Read16(pAwardIndexInfo);

		UCHAR AwardIdx = Read8(pAwardIndexInfo);
		int ItemID = Read32(pAwardIndexInfo);

		p += len;
	}

}

void RequestSelOptBoxAward(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	int BoxID = Read32(p);
	int SelIdx = Read32(p);

}

void ResponseSelOptBoxAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 616, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifySelOptBoxAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //BoxID
	{ //DBItemInfo
		BYTE* pDBItemInfo = p;
		Write16(pDBItemInfo, 0); //len

		Write32(pDBItemInfo, 0); //ItemID
		Write32(pDBItemInfo, 0); //ItemNum
		Write32(pDBItemInfo, 0); //AvailPeriod
		Write8(pDBItemInfo, 0); //Status
		WriteUn(pDBItemInfo, 0); //ObtainTime
		Write32(pDBItemInfo, 0); //OtherAttribute
		Write16(pDBItemInfo, 0); //ItemType

		len = pDBItemInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //TimeOutSel

	len = p - buf;
	SendToClient(Client, 617, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetShortCutSet(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetShortCutSet(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ShortCutSet
	Write16(p, 0); //ShortCut[]
	Write8(p, 0); //SuitToServer
	Write8(p, 0); //FixedShortCutNum
	for (size_t i = 0; i < n; i++)
	{ //FixShortCut
		BYTE* pFixShortCut = p;
		Write16(pFixShortCut, 0); //len

		Write16(pFixShortCut, 0); //ID
		Write8(pFixShortCut, 0); //New

		len = pFixShortCut - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11356, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestSetShortCutSet(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT[] ShortCut[] = Read16(p);

}

void ResponseSetShortCutSet(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 11357, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetConsumeScoreConfUrl(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	int Time = Read32(p);
	UCHAR Md5StrLen = Read8(p);

}

void ResponseGetConsumeScoreConfUrl(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //Md5StrLen
	Write16(p, 0); //BroadcastLen
	Write16(p, 0); //ExchangeNumber
	for (size_t i = 0; i < n; i++)
	{ //Exchange
		BYTE* pExchange = p;
		Write16(pExchange, 0); //len

		Write32(pExchange, 0); //PackId
		Write32(pExchange, 0); //ItemId
		Write32(pExchange, 0); //ItemAvailPeriod
		Write32(pExchange, 0); //ItemNumber
		Write32(pExchange, 0); //Score
		Write8(pExchange, 0); //HasTimeLimit
		for (size_t i = 0; i < n; i++)
		{ //TimeLimit
			BYTE* pTimeLimit = pExchange;
			Write16(pTimeLimit, 0); //len

			Write32(pTimeLimit, 0); //StartTime
			Write32(pTimeLimit, 0); //EndTime

			len = pTimeLimit - pExchange;
			Set16(pExchange, (WORD)len);
			pExchange += len;
		}
		Write8(pExchange, 0); //HasDiscount
		for (size_t i = 0; i < n; i++)
		{ //Discount
			BYTE* pDiscount = pExchange;
			Write16(pDiscount, 0); //len

			Write32(pDiscount, 0); //OrigScore
			Write32(pDiscount, 0); //DiscountValue

			len = pDiscount - pExchange;
			Set16(pExchange, (WORD)len);
			pExchange += len;
		}

		len = pExchange - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11471, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestConsumeScoreExchange(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	int Time = Read32(p);
	UINT PackId = Read32(p);

}

void ResponseConsumeScoreExchange(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultId
	Write32(p, 0); //PackId

	len = p - buf;
	SendToClient(Client, 11472, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyG2CWizardSimpleInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //HasCarryWizard
	for (size_t i = 0; i < n; i++)
	{ //CarryWizardInfo
		BYTE* pCarryWizardInfo = p;
		Write16(pCarryWizardInfo, 0); //len

		Write16(pCarryWizardInfo, 0); //WizardID
		WriteString(pCarryWizardInfo, 0); //NickName[]
		Write16(pCarryWizardInfo, 0); //WizardType
		Write8(pCarryWizardInfo, 0); //Order
		Write8(pCarryWizardInfo, 0); //EvolutionBranch
		Write8(pCarryWizardInfo, 0); //IsHuanHua

		len = pCarryWizardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //SimpleBaseInfo
		BYTE* pSimpleBaseInfo = p;
		Write16(pSimpleBaseInfo, 0); //len

		Write32(pSimpleBaseInfo, 0); //LastAdventureEndTime
		Write32(pSimpleBaseInfo, 0); //LastJobEndTime
		Write32(pSimpleBaseInfo, 0); //LastFarmUpgradeEndTime
		Write32(pSimpleBaseInfo, 0); //LastCollegeUpgradeEndTime
		Write32(pSimpleBaseInfo, 0); //LastWorkShopUpgradeEndTime
		Write32(pSimpleBaseInfo, 0); //LastLoginOutTime
		Write8(pSimpleBaseInfo, 0); //WizardNum

		len = pSimpleBaseInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11473, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetWizardHomeBaseInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetWizardHomeBaseInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	{ //PlayerDBWizardHomeInfo
		BYTE* pPlayerDBWizardHomeInfo = p;
		Write16(pPlayerDBWizardHomeInfo, 0); //len

		{ //WizardHomeInfo
			BYTE* pWizardHomeInfo = pPlayerDBWizardHomeInfo;
			Write16(pWizardHomeInfo, 0); //len

			Write32(pWizardHomeInfo, 0); //ProsperityDegree
			Write8(pWizardHomeInfo, 0); //FarmLevel
			Write8(pWizardHomeInfo, 0); //CollegeLevel
			Write8(pWizardHomeInfo, 0); //WorkShopLevel
			Write32(pWizardHomeInfo, 0); //PrayerTreeExp
			Write8(pWizardHomeInfo, 0); //PrayerTreeLevel

			len = pWizardHomeInfo - pPlayerDBWizardHomeInfo;
			Set16(pPlayerDBWizardHomeInfo, (WORD)len);
			pPlayerDBWizardHomeInfo += len;
		}
		{ //FriendWateringInfoList
			BYTE* pFriendWateringInfoList = pPlayerDBWizardHomeInfo;
			Write16(pFriendWateringInfoList, 0); //len

			Write8(pFriendWateringInfoList, 0); //FriendNum
			for (size_t i = 0; i < n; i++)
			{ //FriendWateringInfo
				BYTE* pFriendWateringInfo = pFriendWateringInfoList;
				Write16(pFriendWateringInfo, 0); //len

				Write32(pFriendWateringInfo, 0); //Uin
				Write32(pFriendWateringInfo, 0); //LastFriendWateringTime
				Write8(pFriendWateringInfo, 0); //FriendWateringCountOneDay

				len = pFriendWateringInfo - pFriendWateringInfoList;
				Set16(pFriendWateringInfoList, (WORD)len);
				pFriendWateringInfoList += len;
			}

			len = pFriendWateringInfoList - pPlayerDBWizardHomeInfo;
			Set16(pPlayerDBWizardHomeInfo, (WORD)len);
			pPlayerDBWizardHomeInfo += len;
		}
		Write8(pPlayerDBWizardHomeInfo, 0); //JobCount
		Write32(pPlayerDBWizardHomeInfo, 0); //LastJobTime
		Write16(pPlayerDBWizardHomeInfo, 0); //PrayerTreeWateringCount
		Write32(pPlayerDBWizardHomeInfo, 0); //LastPrayerTreeWateringTime
		Write8(pPlayerDBWizardHomeInfo, 0); //PrayerTreeFriendWateringCount
		Write32(pPlayerDBWizardHomeInfo, 0); //LastPrayerTreeFriendWateringTime
		Write16(pPlayerDBWizardHomeInfo, 0); //CliffordCount
		Write32(pPlayerDBWizardHomeInfo, 0); //LastCliffordTime
		Write16(pPlayerDBWizardHomeInfo, 0); //FeedCount
		Write32(pPlayerDBWizardHomeInfo, 0); //LastFeedTime
		Write16(pPlayerDBWizardHomeInfo, 0); //AdventureCount
		Write32(pPlayerDBWizardHomeInfo, 0); //LastAdventureTime
		Write16(pPlayerDBWizardHomeInfo, 0); //ChallengeCount
		Write32(pPlayerDBWizardHomeInfo, 0); //LastChallengeTime
		Write8(pPlayerDBWizardHomeInfo, 0); //FarmStatus
		Write32(pPlayerDBWizardHomeInfo, 0); //FarmUpgradeEndTime
		Write8(pPlayerDBWizardHomeInfo, 0); //CollegeStatus
		Write32(pPlayerDBWizardHomeInfo, 0); //CollegeUpgradeEndTime
		Write8(pPlayerDBWizardHomeInfo, 0); //WorkShopStatus
		Write32(pPlayerDBWizardHomeInfo, 0); //WorkShopUpgradeEndTime
		Write16(pPlayerDBWizardHomeInfo, 0); //PrayerTreeBeWateredByFriendCount
		Write32(pPlayerDBWizardHomeInfo, 0); //LastPrayerTreeBeWateredByFriendTime
		Write8(pPlayerDBWizardHomeInfo, 0); //LuckyFruitLevel
		Write32(pPlayerDBWizardHomeInfo, 0); //JobProsperityScore
		{ //DressInfo
			BYTE* pDressInfo = pPlayerDBWizardHomeInfo;
			Write16(pDressInfo, 0); //len

			Write8(pDressInfo, 0); //ColorSetLen
			Write8(pDressInfo, 0); //DoorPlateLen

			len = pDressInfo - pPlayerDBWizardHomeInfo;
			Set16(pPlayerDBWizardHomeInfo, (WORD)len);
			pPlayerDBWizardHomeInfo += len;
		}

		len = pPlayerDBWizardHomeInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //WizardNum
	for (size_t i = 0; i < n; i++)
	{ //PlayerDBWizardBaseInfo
		BYTE* pPlayerDBWizardBaseInfo = p;
		Write16(pPlayerDBWizardBaseInfo, 0); //len

		{ //WizardBaseInfo
			BYTE* pWizardBaseInfo = pPlayerDBWizardBaseInfo;
			Write16(pWizardBaseInfo, 0); //len

			Write16(pWizardBaseInfo, 0); //WizardID
			Write16(pWizardBaseInfo, 0); //WizardType
			WriteString(pWizardBaseInfo, 0); //NickName[]
			Write32(pWizardBaseInfo, 0); //Experience
			Write8(pWizardBaseInfo, 0); //Level
			Write8(pWizardBaseInfo, 0); //Order
			Write32(pWizardBaseInfo, 0); //Health
			Write8(pWizardBaseInfo, 0); //IsRare
			Write8(pWizardBaseInfo, 0); //Intimacy
			Write8(pWizardBaseInfo, 0); //IsHuanHua
			Write8(pWizardBaseInfo, 0); //IsShow
			Write8(pWizardBaseInfo, 0); //IsCarry
			Write8(pWizardBaseInfo, 0); //MaxSkillNum
			{ //WizardSkillInfoList
				BYTE* pWizardSkillInfoList = pWizardBaseInfo;
				Write16(pWizardSkillInfoList, 0); //len

				Write8(pWizardSkillInfoList, 0); //SkillNum
				for (size_t i = 0; i < n; i++)
				{ //SkillInfo
					BYTE* pSkillInfo = pWizardSkillInfoList;
					Write16(pSkillInfo, 0); //len

					Write8(pSkillInfo, 0); //SkillId
					Write8(pSkillInfo, 0); //SkillLevel

					len = pSkillInfo - pWizardSkillInfoList;
					Set16(pWizardSkillInfoList, (WORD)len);
					pWizardSkillInfoList += len;
				}

				len = pWizardSkillInfoList - pWizardBaseInfo;
				Set16(pWizardBaseInfo, (WORD)len);
				pWizardBaseInfo += len;
			}
			Write8(pWizardBaseInfo, 0); //Status
			Write32(pWizardBaseInfo, 0); //EndTime
			Write32(pWizardBaseInfo, 0); //LeftTime
			Write8(pWizardBaseInfo, 0); //EvolutionBranch
			Write16(pWizardBaseInfo, 0); //CurAdventureMapID
			Write8(pWizardBaseInfo, 0); //LastunLockMapWizardLev
			Write16(pWizardBaseInfo, 0); //Flag
			Write8(pWizardBaseInfo, 0); //JobType

			len = pWizardBaseInfo - pPlayerDBWizardBaseInfo;
			Set16(pPlayerDBWizardBaseInfo, (WORD)len);
			pPlayerDBWizardBaseInfo += len;
		}
		Write32(pPlayerDBWizardBaseInfo, 0); //LastActionTime
		Write32(pPlayerDBWizardBaseInfo, 0); //LastCareTime
		Write16(pPlayerDBWizardBaseInfo, 0); //CareCount
		Write32(pPlayerDBWizardBaseInfo, 0); //LastFeedTime
		Write8(pPlayerDBWizardBaseInfo, 0); //FeedCount
		Write32(pPlayerDBWizardBaseInfo, 0); //LastFeedFruitTime
		Write16(pPlayerDBWizardBaseInfo, 0); //FeedFruitCount
		Write8(pPlayerDBWizardBaseInfo, 0); //ComputeType

		len = pPlayerDBWizardBaseInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //FarmStatus
	Write32(p, 0); //FarmUpgradeLeftTime
	Write8(p, 0); //CollegeStatus
	Write32(p, 0); //CollegeUpgradeLeftTime
	Write8(p, 0); //WorkShopStatus
	Write32(p, 0); //WorkShopUpgradeLeftTime
	Write8(p, 0); //HasLuckyFruitToReceive
	Write32(p, 0); //CurServerTime

	len = p - buf;
	SendToClient(Client, 11474, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestLogoutWizardHome(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseLogoutWizardHome(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 11519, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestCollegeUpgradeWizard(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseCollegeUpgradeWizard(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 11476, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyCollegeUpgradeResultWizard(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //CollegeLevel
	Write32(p, 0); //ProsperityDegree

	len = p - buf;
	SendToClient(Client, 11515, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestSkillStrengthenWizard(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	USHORT WizardID = Read16(p);
	bool SkillId = Read8(p);
	UINT Time = Read32(p);

}

void ResponseSkillStrengthenWizard(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //WizardID
	{ //SkillInfo
		BYTE* pSkillInfo = p;
		Write16(pSkillInfo, 0); //len

		Write8(pSkillInfo, 0); //SkillId
		Write8(pSkillInfo, 0); //SkillLevel

		len = pSkillInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11477, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestSkillStudyWizard(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	USHORT WizardID = Read16(p);
	bool SkillId = Read8(p);
	UINT Time = Read32(p);

}

void ResponseSkillStudyWizard(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //WizardID
	{ //SkillInfo
		BYTE* pSkillInfo = p;
		Write16(pSkillInfo, 0); //len

		Write8(pSkillInfo, 0); //SkillId
		Write8(pSkillInfo, 0); //SkillLevel

		len = pSkillInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11478, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestSkillForgetWizard(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	USHORT WizardID = Read16(p);
	bool SkillId = Read8(p);
	UINT Time = Read32(p);

}

void ResponseSkillForgetWizard(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //WizardID
	Write8(p, 0); //SkillId

	len = p - buf;
	SendToClient(Client, 11479, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestCollegeUpgradeImmediatelyWizard(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseCollegeUpgradeImmediatelyWizard(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 11481, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestWorkShopUpgradeWizard(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseWorkShopUpgradeWizard(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 11484, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyWorkShopUpgradeResultWizard(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //WorkShopLevel
	Write32(p, 0); //ProsperityDegree

	len = p - buf;
	SendToClient(Client, 11516, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestWorkShopUpgradeImmediatelyWizard(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseWorkShopUpgradeImmediatelyWizard(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 11485, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestJobWizard(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT WizardID = Read16(p);
	bool JobType = Read8(p);

}

void ResponseJobWizard(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //WizardID
	Write8(p, 0); //JobType

	len = p - buf;
	SendToClient(Client, 11486, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyJobResult(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //WizardID
	Write8(p, 0); //JobType

	len = p - buf;
	SendToClient(Client, 11517, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestCancelJobWizard(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT WizardID = Read16(p);

}

void ResponseCancelJobWizard(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //WizardID

	len = p - buf;
	SendToClient(Client, 11487, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestJobImmediatelyWizard(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT WizardID = Read16(p);
	bool JobType = Read8(p);

}

void ResponseJobImmediatelyWizard(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //WizardID
	Write8(p, 0); //JobType

	len = p - buf;
	SendToClient(Client, 11488, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestReceiveJobAwardWizard(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT WizardID = Read16(p);

}

void ResponseReceiveJobAwardWizard(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //WizardID
	Write8(p, 0); //JobType
	Write8(p, 0); //HasWizardAward
	for (size_t i = 0; i < n; i++)
	{ //WizardAward
		BYTE* pWizardAward = p;
		Write16(pWizardAward, 0); //len

		Write32(pWizardAward, 0); //AwardSuperMoney
		Write32(pWizardAward, 0); //TotalSuperMoney
		Write32(pWizardAward, 0); //AwardCoupons
		Write32(pWizardAward, 0); //TotalCoupons
		Write32(pWizardAward, 0); //AwardWizardExp
		Write32(pWizardAward, 0); //TotalWizardExp
		Write32(pWizardAward, 0); //AwardHealth
		Write32(pWizardAward, 0); //TotalHealth
		Write32(pWizardAward, 0); //AwardItemNum
		for (size_t i = 0; i < n; i++)
		{ //AwardItemInfo
			BYTE* pAwardItemInfo = pWizardAward;
			Write16(pAwardItemInfo, 0); //len

			Write32(pAwardItemInfo, 0); //ItemID
			Write32(pAwardItemInfo, 0); //ItemNum
			Write32(pAwardItemInfo, 0); //AvailPeriod
			Write8(pAwardItemInfo, 0); //Status
			WriteUn(pAwardItemInfo, 0); //ObtainTime
			Write32(pAwardItemInfo, 0); //OtherAttribute
			Write16(pAwardItemInfo, 0); //ItemType

			len = pAwardItemInfo - pWizardAward;
			Set16(pWizardAward, (WORD)len);
			pWizardAward += len;
		}

		len = pWizardAward - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //WizardLevel
	Write32(p, 0); //ProsperityDegree

	len = p - buf;
	SendToClient(Client, 11489, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestAdventureWizard(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT WizardID = Read16(p);
	USHORT MapID = Read16(p);
	bool Assist = Read8(p);

}

void ResponseAdventureWizard(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //WizardID
	Write16(p, 0); //MapID

	len = p - buf;
	SendToClient(Client, 11491, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestCancelAdventureWizard(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT WizardID = Read16(p);

}

void ResponseCancelAdventureWizard(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //WizardID

	len = p - buf;
	SendToClient(Client, 11492, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestAdventureImmediatelyWizard(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT WizardID = Read16(p);

}

void ResponseAdventureImmediatelyWizard(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //WizardID
	Write16(p, 0); //MapID

	len = p - buf;
	SendToClient(Client, 11493, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestReceiveAdventureAwardWizard(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT WizardID = Read16(p);

}

void ResponseReceiveAdventureAwardWizard(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //WizardID
	Write16(p, 0); //RandEventID
	Write8(p, 0); //HasWizardAward
	for (size_t i = 0; i < n; i++)
	{ //WizardAward
		BYTE* pWizardAward = p;
		Write16(pWizardAward, 0); //len

		Write32(pWizardAward, 0); //AwardSuperMoney
		Write32(pWizardAward, 0); //TotalSuperMoney
		Write32(pWizardAward, 0); //AwardCoupons
		Write32(pWizardAward, 0); //TotalCoupons
		Write32(pWizardAward, 0); //AwardWizardExp
		Write32(pWizardAward, 0); //TotalWizardExp
		Write32(pWizardAward, 0); //AwardHealth
		Write32(pWizardAward, 0); //TotalHealth
		Write32(pWizardAward, 0); //AwardItemNum
		for (size_t i = 0; i < n; i++)
		{ //AwardItemInfo
			BYTE* pAwardItemInfo = pWizardAward;
			Write16(pAwardItemInfo, 0); //len

			Write32(pAwardItemInfo, 0); //ItemID
			Write32(pAwardItemInfo, 0); //ItemNum
			Write32(pAwardItemInfo, 0); //AvailPeriod
			Write8(pAwardItemInfo, 0); //Status
			WriteUn(pAwardItemInfo, 0); //ObtainTime
			Write32(pAwardItemInfo, 0); //OtherAttribute
			Write16(pAwardItemInfo, 0); //ItemType

			len = pAwardItemInfo - pWizardAward;
			Set16(pWizardAward, (WORD)len);
			pWizardAward += len;
		}

		len = pWizardAward - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //MapID
	Write8(p, 0); //AssistAward
	for (size_t i = 0; i < n; i++)
	{ //Award
		BYTE* pAward = p;
		Write16(pAward, 0); //len

		Write32(pAward, 0); //Exp
		Write32(pAward, 0); //Money
		Write32(pAward, 0); //SuperMoney
		Write16(pAward, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAward;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write32(pAward, 0); //Coupons
		Write32(pAward, 0); //GuildPoint
		Write32(pAward, 0); //LuckMoney
		Write8(pAward, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAward;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write32(pAward, 0); //SpeedCoin

		len = pAward - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //WizardLevel
	Write32(p, 0); //ProsperityDegree

	len = p - buf;
	SendToClient(Client, 11510, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyAdventureResult(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //WizardID
	Write16(p, 0); //MapID

	len = p - buf;
	SendToClient(Client, 11518, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetWizardFriendList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetWizardFriendList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //WizardFriendNum
	for (size_t i = 0; i < n; i++)
	{ //WizardFriendBaseInfo
		BYTE* pWizardFriendBaseInfo = p;
		Write16(pWizardFriendBaseInfo, 0); //len

		Write32(pWizardFriendBaseInfo, 0); //Uin
		{ //WizardBaseInfo
			BYTE* pWizardBaseInfo = pWizardFriendBaseInfo;
			Write16(pWizardBaseInfo, 0); //len

			Write16(pWizardBaseInfo, 0); //WizardID
			Write16(pWizardBaseInfo, 0); //WizardType
			WriteString(pWizardBaseInfo, 0); //NickName[]
			Write32(pWizardBaseInfo, 0); //Experience
			Write8(pWizardBaseInfo, 0); //Level
			Write8(pWizardBaseInfo, 0); //Order
			Write32(pWizardBaseInfo, 0); //Health
			Write8(pWizardBaseInfo, 0); //IsRare
			Write8(pWizardBaseInfo, 0); //Intimacy
			Write8(pWizardBaseInfo, 0); //IsHuanHua
			Write8(pWizardBaseInfo, 0); //IsShow
			Write8(pWizardBaseInfo, 0); //IsCarry
			Write8(pWizardBaseInfo, 0); //MaxSkillNum
			{ //WizardSkillInfoList
				BYTE* pWizardSkillInfoList = pWizardBaseInfo;
				Write16(pWizardSkillInfoList, 0); //len

				Write8(pWizardSkillInfoList, 0); //SkillNum
				for (size_t i = 0; i < n; i++)
				{ //SkillInfo
					BYTE* pSkillInfo = pWizardSkillInfoList;
					Write16(pSkillInfo, 0); //len

					Write8(pSkillInfo, 0); //SkillId
					Write8(pSkillInfo, 0); //SkillLevel

					len = pSkillInfo - pWizardSkillInfoList;
					Set16(pWizardSkillInfoList, (WORD)len);
					pWizardSkillInfoList += len;
				}

				len = pWizardSkillInfoList - pWizardBaseInfo;
				Set16(pWizardBaseInfo, (WORD)len);
				pWizardBaseInfo += len;
			}
			Write8(pWizardBaseInfo, 0); //Status
			Write32(pWizardBaseInfo, 0); //EndTime
			Write32(pWizardBaseInfo, 0); //LeftTime
			Write8(pWizardBaseInfo, 0); //EvolutionBranch
			Write16(pWizardBaseInfo, 0); //CurAdventureMapID
			Write8(pWizardBaseInfo, 0); //LastunLockMapWizardLev
			Write16(pWizardBaseInfo, 0); //Flag
			Write8(pWizardBaseInfo, 0); //JobType

			len = pWizardBaseInfo - pWizardFriendBaseInfo;
			Set16(pWizardFriendBaseInfo, (WORD)len);
			pWizardFriendBaseInfo += len;
		}

		len = pWizardFriendBaseInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11494, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestChallengeWizard(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	USHORT WizardID = Read16(p);
	UINT RivalUin = Read32(p);
	USHORT RivalWizardID = Read16(p);
	UINT Time = Read32(p);

}

void ResponseChallengeWizard(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //MatchResultID
	Write8(p, 0); //IsRandomHit[]
	Write32(p, 0); //Uin
	Write16(p, 0); //WizardID
	Write32(p, 0); //RivalUin
	Write16(p, 0); //RivalWizardID
	Write32(p, 0); //WizardExperience

	len = p - buf;
	SendToClient(Client, 11495, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestFarmUpgradeWizard(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseFarmUpgradeWizard(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 11496, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestFarmUpgradeImmediatelyWizard(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseFarmUpgradeImmediatelyWizard(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 11497, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyFarmUpgradeResultWizard(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //FarmLevel
	Write16(p, 0); //MaxWizardShowNum
	Write32(p, 0); //ProsperityDegree

	len = p - buf;
	SendToClient(Client, 11524, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestWakeWizard(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT WizardID = Read16(p);

}

void ResponseWakeWizard(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Time
	Write16(p, 0); //WizardID
	Write8(p, 0); //NewIntimacy

	len = p - buf;
	SendToClient(Client, 11502, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestCareWizard(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT WizardID = Read16(p);

}

void ResponseCareWizard(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //WizardID
	Write8(p, 0); //OutputLevel
	{ //CareOutput
		BYTE* pCareOutput = p;
		Write16(pCareOutput, 0); //len

		Write32(pCareOutput, 0); //WizardExperience
		Write32(pCareOutput, 0); //TotalWizardExperience
		Write32(pCareOutput, 0); //WizardIntimacy
		Write32(pCareOutput, 0); //TotalWizardIntimacy

		len = pCareOutput - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11499, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestFeedWizard(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT WizardID = Read16(p);
	UINT FoodItemID = Read32(p);

}

void ResponseFeedWizard(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //WizardID
	Write8(p, 0); //OutputLevel
	{ //FeedOutput
		BYTE* pFeedOutput = p;
		Write16(pFeedOutput, 0); //len

		Write32(pFeedOutput, 0); //WizardExperience
		Write32(pFeedOutput, 0); //TotalWizardExperience
		Write32(pFeedOutput, 0); //WizardIntimacy
		Write32(pFeedOutput, 0); //TotalWizardIntimacy

		len = pFeedOutput - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //WizardLevel
	Write32(p, 0); //ProsperityDegree

	len = p - buf;
	SendToClient(Client, 11500, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetFriendWizardBaseInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT DstUin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetFriendWizardBaseInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	{ //WizardFriendBaseInfo
		BYTE* pWizardFriendBaseInfo = p;
		Write16(pWizardFriendBaseInfo, 0); //len

		Write32(pWizardFriendBaseInfo, 0); //Uin
		{ //WizardBaseInfo
			BYTE* pWizardBaseInfo = pWizardFriendBaseInfo;
			Write16(pWizardBaseInfo, 0); //len

			Write16(pWizardBaseInfo, 0); //WizardID
			Write16(pWizardBaseInfo, 0); //WizardType
			WriteString(pWizardBaseInfo, 0); //NickName[]
			Write32(pWizardBaseInfo, 0); //Experience
			Write8(pWizardBaseInfo, 0); //Level
			Write8(pWizardBaseInfo, 0); //Order
			Write32(pWizardBaseInfo, 0); //Health
			Write8(pWizardBaseInfo, 0); //IsRare
			Write8(pWizardBaseInfo, 0); //Intimacy
			Write8(pWizardBaseInfo, 0); //IsHuanHua
			Write8(pWizardBaseInfo, 0); //IsShow
			Write8(pWizardBaseInfo, 0); //IsCarry
			Write8(pWizardBaseInfo, 0); //MaxSkillNum
			{ //WizardSkillInfoList
				BYTE* pWizardSkillInfoList = pWizardBaseInfo;
				Write16(pWizardSkillInfoList, 0); //len

				Write8(pWizardSkillInfoList, 0); //SkillNum
				for (size_t i = 0; i < n; i++)
				{ //SkillInfo
					BYTE* pSkillInfo = pWizardSkillInfoList;
					Write16(pSkillInfo, 0); //len

					Write8(pSkillInfo, 0); //SkillId
					Write8(pSkillInfo, 0); //SkillLevel

					len = pSkillInfo - pWizardSkillInfoList;
					Set16(pWizardSkillInfoList, (WORD)len);
					pWizardSkillInfoList += len;
				}

				len = pWizardSkillInfoList - pWizardBaseInfo;
				Set16(pWizardBaseInfo, (WORD)len);
				pWizardBaseInfo += len;
			}
			Write8(pWizardBaseInfo, 0); //Status
			Write32(pWizardBaseInfo, 0); //EndTime
			Write32(pWizardBaseInfo, 0); //LeftTime
			Write8(pWizardBaseInfo, 0); //EvolutionBranch
			Write16(pWizardBaseInfo, 0); //CurAdventureMapID
			Write8(pWizardBaseInfo, 0); //LastunLockMapWizardLev
			Write16(pWizardBaseInfo, 0); //Flag
			Write8(pWizardBaseInfo, 0); //JobType

			len = pWizardBaseInfo - pWizardFriendBaseInfo;
			Set16(pWizardFriendBaseInfo, (WORD)len);
			pWizardFriendBaseInfo += len;
		}

		len = pWizardFriendBaseInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11501, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestReleaseWizard(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	USHORT WizardID = Read16(p);
	UINT Time = Read32(p);

}

void ResponseReleaseWizard(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //WizardID

	len = p - buf;
	SendToClient(Client, 11503, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestSetWizardVisible(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT WizardID = Read16(p);
	bool VisibleFlag = Read8(p);

}

void ResponseSetWizardVisible(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //WizardID
	Write8(p, 0); //VisibleFlag

	len = p - buf;
	SendToClient(Client, 11504, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestEvoluteWizard(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT WizardID = Read16(p);
	bool DstEvolutionBranch = Read8(p);

}

void ResponseEvoluteWizard(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //WizardID
	Write8(p, 0); //Order
	Write8(p, 0); //DstEvolutionBranch
	Write8(p, 0); //IsRare

	len = p - buf;
	SendToClient(Client, 11505, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestCliffordWizard(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseCliffordWizard(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //LeftTimes
	Write8(p, 0); //HasWizardAward
	for (size_t i = 0; i < n; i++)
	{ //WizardAward
		BYTE* pWizardAward = p;
		Write16(pWizardAward, 0); //len

		Write32(pWizardAward, 0); //AwardSuperMoney
		Write32(pWizardAward, 0); //TotalSuperMoney
		Write32(pWizardAward, 0); //AwardCoupons
		Write32(pWizardAward, 0); //TotalCoupons
		Write32(pWizardAward, 0); //AwardWizardExp
		Write32(pWizardAward, 0); //TotalWizardExp
		Write32(pWizardAward, 0); //AwardHealth
		Write32(pWizardAward, 0); //TotalHealth
		Write32(pWizardAward, 0); //AwardItemNum
		for (size_t i = 0; i < n; i++)
		{ //AwardItemInfo
			BYTE* pAwardItemInfo = pWizardAward;
			Write16(pAwardItemInfo, 0); //len

			Write32(pAwardItemInfo, 0); //ItemID
			Write32(pAwardItemInfo, 0); //ItemNum
			Write32(pAwardItemInfo, 0); //AvailPeriod
			Write8(pAwardItemInfo, 0); //Status
			WriteUn(pAwardItemInfo, 0); //ObtainTime
			Write32(pAwardItemInfo, 0); //OtherAttribute
			Write16(pAwardItemInfo, 0); //ItemType

			len = pAwardItemInfo - pWizardAward;
			Set16(pWizardAward, (WORD)len);
			pWizardAward += len;
		}

		len = pWizardAward - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //LeftTime

	len = p - buf;
	SendToClient(Client, 11511, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestWateringOneselfWizard(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseWateringOneselfWizard(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //PrayerTreeLevel
	Write32(p, 0); //LeftTimes
	Write32(p, 0); //ProsperityDegree
	Write32(p, 0); //LeftTime
	Write32(p, 0); //PrayerTreeExp

	len = p - buf;
	SendToClient(Client, 11512, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestWateringFriendWizard(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT SrcUin = Read32(p);
	UINT DstUin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseWateringFriendWizard(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //DstUin
	Write8(p, 0); //HasWizardAward
	for (size_t i = 0; i < n; i++)
	{ //WizardAward
		BYTE* pWizardAward = p;
		Write16(pWizardAward, 0); //len

		Write32(pWizardAward, 0); //AwardSuperMoney
		Write32(pWizardAward, 0); //TotalSuperMoney
		Write32(pWizardAward, 0); //AwardCoupons
		Write32(pWizardAward, 0); //TotalCoupons
		Write32(pWizardAward, 0); //AwardWizardExp
		Write32(pWizardAward, 0); //TotalWizardExp
		Write32(pWizardAward, 0); //AwardHealth
		Write32(pWizardAward, 0); //TotalHealth
		Write32(pWizardAward, 0); //AwardItemNum
		for (size_t i = 0; i < n; i++)
		{ //AwardItemInfo
			BYTE* pAwardItemInfo = pWizardAward;
			Write16(pAwardItemInfo, 0); //len

			Write32(pAwardItemInfo, 0); //ItemID
			Write32(pAwardItemInfo, 0); //ItemNum
			Write32(pAwardItemInfo, 0); //AvailPeriod
			Write8(pAwardItemInfo, 0); //Status
			WriteUn(pAwardItemInfo, 0); //ObtainTime
			Write32(pAwardItemInfo, 0); //OtherAttribute
			Write16(pAwardItemInfo, 0); //ItemType

			len = pAwardItemInfo - pWizardAward;
			Set16(pWizardAward, (WORD)len);
			pWizardAward += len;
		}

		len = pWizardAward - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //PrayerTreeLevel
	Write32(p, 0); //LeftTimes

	len = p - buf;
	SendToClient(Client, 11513, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestReceiveLuckyFruitAwardWizard(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseReceiveLuckyFruitAwardWizard(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //HasWizardAward
	for (size_t i = 0; i < n; i++)
	{ //WizardAward
		BYTE* pWizardAward = p;
		Write16(pWizardAward, 0); //len

		Write32(pWizardAward, 0); //AwardSuperMoney
		Write32(pWizardAward, 0); //TotalSuperMoney
		Write32(pWizardAward, 0); //AwardCoupons
		Write32(pWizardAward, 0); //TotalCoupons
		Write32(pWizardAward, 0); //AwardWizardExp
		Write32(pWizardAward, 0); //TotalWizardExp
		Write32(pWizardAward, 0); //AwardHealth
		Write32(pWizardAward, 0); //TotalHealth
		Write32(pWizardAward, 0); //AwardItemNum
		for (size_t i = 0; i < n; i++)
		{ //AwardItemInfo
			BYTE* pAwardItemInfo = pWizardAward;
			Write16(pAwardItemInfo, 0); //len

			Write32(pAwardItemInfo, 0); //ItemID
			Write32(pAwardItemInfo, 0); //ItemNum
			Write32(pAwardItemInfo, 0); //AvailPeriod
			Write8(pAwardItemInfo, 0); //Status
			WriteUn(pAwardItemInfo, 0); //ObtainTime
			Write32(pAwardItemInfo, 0); //OtherAttribute
			Write16(pAwardItemInfo, 0); //ItemType

			len = pAwardItemInfo - pWizardAward;
			Set16(pWizardAward, (WORD)len);
			pWizardAward += len;
		}

		len = pWizardAward - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11514, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestModifyWizardNickname(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	USHORT WizardID = Read16(p);
	char[] NewNickName[] = ReadString(p);
	UINT Time = Read32(p);

}

void ResponseModifyWizardNickname(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //WizardID
	WriteString(p, 0); //NewNickName[]
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 11498, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyG2CBeWateredWizard(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //SrcUin
	Write8(p, 0); //PrayerTreeLevel
	Write32(p, 0); //LeftTimes
	Write32(p, 0); //ProsperityDegree
	Write32(p, 0); //PrayerTreeExp

	len = p - buf;
	SendToClient(Client, 11521, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetOtherWizardHomeBaseInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT DstUin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetOtherWizardHomeBaseInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //DstUin
	{ //WizardHomeInfo
		BYTE* pWizardHomeInfo = p;
		Write16(pWizardHomeInfo, 0); //len

		Write32(pWizardHomeInfo, 0); //ProsperityDegree
		Write8(pWizardHomeInfo, 0); //FarmLevel
		Write8(pWizardHomeInfo, 0); //CollegeLevel
		Write8(pWizardHomeInfo, 0); //WorkShopLevel
		Write32(pWizardHomeInfo, 0); //PrayerTreeExp
		Write8(pWizardHomeInfo, 0); //PrayerTreeLevel

		len = pWizardHomeInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //WizardNum
	for (size_t i = 0; i < n; i++)
	{ //WizardBaseInfo
		BYTE* pWizardBaseInfo = p;
		Write16(pWizardBaseInfo, 0); //len

		Write16(pWizardBaseInfo, 0); //WizardID
		Write16(pWizardBaseInfo, 0); //WizardType
		WriteString(pWizardBaseInfo, 0); //NickName[]
		Write32(pWizardBaseInfo, 0); //Experience
		Write8(pWizardBaseInfo, 0); //Level
		Write8(pWizardBaseInfo, 0); //Order
		Write32(pWizardBaseInfo, 0); //Health
		Write8(pWizardBaseInfo, 0); //IsRare
		Write8(pWizardBaseInfo, 0); //Intimacy
		Write8(pWizardBaseInfo, 0); //IsHuanHua
		Write8(pWizardBaseInfo, 0); //IsShow
		Write8(pWizardBaseInfo, 0); //IsCarry
		Write8(pWizardBaseInfo, 0); //MaxSkillNum
		{ //WizardSkillInfoList
			BYTE* pWizardSkillInfoList = pWizardBaseInfo;
			Write16(pWizardSkillInfoList, 0); //len

			Write8(pWizardSkillInfoList, 0); //SkillNum
			for (size_t i = 0; i < n; i++)
			{ //SkillInfo
				BYTE* pSkillInfo = pWizardSkillInfoList;
				Write16(pSkillInfo, 0); //len

				Write8(pSkillInfo, 0); //SkillId
				Write8(pSkillInfo, 0); //SkillLevel

				len = pSkillInfo - pWizardSkillInfoList;
				Set16(pWizardSkillInfoList, (WORD)len);
				pWizardSkillInfoList += len;
			}

			len = pWizardSkillInfoList - pWizardBaseInfo;
			Set16(pWizardBaseInfo, (WORD)len);
			pWizardBaseInfo += len;
		}
		Write8(pWizardBaseInfo, 0); //Status
		Write32(pWizardBaseInfo, 0); //EndTime
		Write32(pWizardBaseInfo, 0); //LeftTime
		Write8(pWizardBaseInfo, 0); //EvolutionBranch
		Write16(pWizardBaseInfo, 0); //CurAdventureMapID
		Write8(pWizardBaseInfo, 0); //LastunLockMapWizardLev
		Write16(pWizardBaseInfo, 0); //Flag
		Write8(pWizardBaseInfo, 0); //JobType

		len = pWizardBaseInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //DressInfo
		BYTE* pDressInfo = p;
		Write16(pDressInfo, 0); //len

		Write8(pDressInfo, 0); //ColorSetLen
		Write8(pDressInfo, 0); //DoorPlateLen

		len = pDressInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11522, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetWizardRecommendList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR Type = Read8(p);

}

void ResponseGetWizardRecommendList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //Type
	Write16(p, 0); //WizardNum
	for (size_t i = 0; i < n; i++)
	{ //WizardRecommendInfo
		BYTE* pWizardRecommendInfo = p;
		Write16(pWizardRecommendInfo, 0); //len

		Write32(pWizardRecommendInfo, 0); //Uin
		WriteString(pWizardRecommendInfo, 0); //NickName[]
		Write16(pWizardRecommendInfo, 0); //WizardID
		WriteString(pWizardRecommendInfo, 0); //WizardNickName[]
		Write16(pWizardRecommendInfo, 0); //WizardType
		Write8(pWizardRecommendInfo, 0); //Order
		Write8(pWizardRecommendInfo, 0); //EvolutionBranch
		Write8(pWizardRecommendInfo, 0); //Level
		Write32(pWizardRecommendInfo, 0); //Health
		Write8(pWizardRecommendInfo, 0); //Flag

		len = pWizardRecommendInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //PlayerNum
	for (size_t i = 0; i < n; i++)
	{ //PlayerRecommendInfo
		BYTE* pPlayerRecommendInfo = p;
		Write16(pPlayerRecommendInfo, 0); //len

		Write32(pPlayerRecommendInfo, 0); //Uin
		WriteString(pPlayerRecommendInfo, 0); //NickName[]
		Write8(pPlayerRecommendInfo, 0); //Gender

		len = pPlayerRecommendInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11523, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetWizardEvolutionHistoryInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT DstUin = Read32(p);

}

void ResponseGetWizardEvolutionHistoryInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //DstUin
	Write16(p, 0); //WizardEvolutionHistoryInfoNum
	for (size_t i = 0; i < n; i++)
	{ //WizardEvolutionHistoryInfo
		BYTE* pWizardEvolutionHistoryInfo = p;
		Write16(pWizardEvolutionHistoryInfo, 0); //len

		Write16(pWizardEvolutionHistoryInfo, 0); //WizardType
		Write8(pWizardEvolutionHistoryInfo, 0); //Order
		Write8(pWizardEvolutionHistoryInfo, 0); //EvolutionBranch

		len = pWizardEvolutionHistoryInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11525, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestChangeCarryWizard(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT Num = Read16(p);
	for (size_t i = 0; i < n; i++)
	{ //WizardCarry
		BYTE* pWizardCarry = p;
		len = Read16(pWizardCarry);

		USHORT WizardID = Read16(pWizardCarry);
		bool Carry = Read8(pWizardCarry);

		p += len;
	}

}

void ResponseChangeCarryWizard(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //Num
	for (size_t i = 0; i < n; i++)
	{ //WizardCarry
		BYTE* pWizardCarry = p;
		Write16(pWizardCarry, 0); //len

		Write16(pWizardCarry, 0); //WizardID
		Write8(pWizardCarry, 0); //Carry

		len = pWizardCarry - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11506, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestHuanHuaWizard(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT WizardID = Read16(p);

}

void ResponseHuanHuaWizard(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //WizardID

	len = p - buf;
	SendToClient(Client, 11507, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestCancelHuanHuaWizard(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT WizardID = Read16(p);

}

void ResponseCancelHuanHuaWizard(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //WizardID

	len = p - buf;
	SendToClient(Client, 11508, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyG2CChangeHuanHuaWizard(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //DstUin
	Write16(p, 0); //WizardID
	Write8(p, 0); //HuanHua

	len = p - buf;
	SendToClient(Client, 11509, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyG2CChangeCarryWizard(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //DstUin
	Write8(p, 0); //Carry
	{ //CarryWizardInfo
		BYTE* pCarryWizardInfo = p;
		Write16(pCarryWizardInfo, 0); //len

		Write16(pCarryWizardInfo, 0); //WizardID
		WriteString(pCarryWizardInfo, 0); //NickName[]
		Write16(pCarryWizardInfo, 0); //WizardType
		Write8(pCarryWizardInfo, 0); //Order
		Write8(pCarryWizardInfo, 0); //EvolutionBranch
		Write8(pCarryWizardInfo, 0); //IsHuanHua

		len = pCarryWizardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11490, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestC2GGetWizardBaseInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT DstUin = Read32(p);
	USHORT DstWizardID = Read16(p);
	bool Reason = Read8(p);

}

void ResponseC2GGetWizardBaseInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write32(p, 0); //DstUin
	Write16(p, 0); //DstWizardID
	Write16(p, 0); //Num
	for (size_t i = 0; i < n; i++)
	{ //PlayerDBWizardBaseInfo
		BYTE* pPlayerDBWizardBaseInfo = p;
		Write16(pPlayerDBWizardBaseInfo, 0); //len

		{ //WizardBaseInfo
			BYTE* pWizardBaseInfo = pPlayerDBWizardBaseInfo;
			Write16(pWizardBaseInfo, 0); //len

			Write16(pWizardBaseInfo, 0); //WizardID
			Write16(pWizardBaseInfo, 0); //WizardType
			WriteString(pWizardBaseInfo, 0); //NickName[]
			Write32(pWizardBaseInfo, 0); //Experience
			Write8(pWizardBaseInfo, 0); //Level
			Write8(pWizardBaseInfo, 0); //Order
			Write32(pWizardBaseInfo, 0); //Health
			Write8(pWizardBaseInfo, 0); //IsRare
			Write8(pWizardBaseInfo, 0); //Intimacy
			Write8(pWizardBaseInfo, 0); //IsHuanHua
			Write8(pWizardBaseInfo, 0); //IsShow
			Write8(pWizardBaseInfo, 0); //IsCarry
			Write8(pWizardBaseInfo, 0); //MaxSkillNum
			{ //WizardSkillInfoList
				BYTE* pWizardSkillInfoList = pWizardBaseInfo;
				Write16(pWizardSkillInfoList, 0); //len

				Write8(pWizardSkillInfoList, 0); //SkillNum
				for (size_t i = 0; i < n; i++)
				{ //SkillInfo
					BYTE* pSkillInfo = pWizardSkillInfoList;
					Write16(pSkillInfo, 0); //len

					Write8(pSkillInfo, 0); //SkillId
					Write8(pSkillInfo, 0); //SkillLevel

					len = pSkillInfo - pWizardSkillInfoList;
					Set16(pWizardSkillInfoList, (WORD)len);
					pWizardSkillInfoList += len;
				}

				len = pWizardSkillInfoList - pWizardBaseInfo;
				Set16(pWizardBaseInfo, (WORD)len);
				pWizardBaseInfo += len;
			}
			Write8(pWizardBaseInfo, 0); //Status
			Write32(pWizardBaseInfo, 0); //EndTime
			Write32(pWizardBaseInfo, 0); //LeftTime
			Write8(pWizardBaseInfo, 0); //EvolutionBranch
			Write16(pWizardBaseInfo, 0); //CurAdventureMapID
			Write8(pWizardBaseInfo, 0); //LastunLockMapWizardLev
			Write16(pWizardBaseInfo, 0); //Flag
			Write8(pWizardBaseInfo, 0); //JobType

			len = pWizardBaseInfo - pPlayerDBWizardBaseInfo;
			Set16(pPlayerDBWizardBaseInfo, (WORD)len);
			pPlayerDBWizardBaseInfo += len;
		}
		Write32(pPlayerDBWizardBaseInfo, 0); //LastActionTime
		Write32(pPlayerDBWizardBaseInfo, 0); //LastCareTime
		Write16(pPlayerDBWizardBaseInfo, 0); //CareCount
		Write32(pPlayerDBWizardBaseInfo, 0); //LastFeedTime
		Write8(pPlayerDBWizardBaseInfo, 0); //FeedCount
		Write32(pPlayerDBWizardBaseInfo, 0); //LastFeedFruitTime
		Write16(pPlayerDBWizardBaseInfo, 0); //FeedFruitCount
		Write8(pPlayerDBWizardBaseInfo, 0); //ComputeType

		len = pPlayerDBWizardBaseInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //Reason

	len = p - buf;
	SendToClient(Client, 11526, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetWizardHomeCommodityInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetWizardHomeCommodityInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	{ //Info
		BYTE* pInfo = p;
		Write16(pInfo, 0); //len

		Write8(pInfo, 0); //Type
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pInfo;
			Set16(pInfo, (WORD)len);
			pInfo += len;
		}
		for (size_t i = 0; i < n; i++)
		{ //ItemCost
			BYTE* pItemCost = pInfo;
			Write16(pItemCost, 0); //len

			Write16(pItemCost, 0); //MoonStone
			Write16(pItemCost, 0); //WizardMoney

			len = pItemCost - pInfo;
			Set16(pInfo, (WORD)len);
			pInfo += len;
		}
		Write32(pInfo, 0); //RemainTime

		len = pInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //BCNum
	for (size_t i = 0; i < n; i++)
	{ //BC
		BYTE* pBC = p;
		Write16(pBC, 0); //len

		Write16(pBC, 0); //ContentLen

		len = pBC - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //ItemNum
	for (size_t i = 0; i < n; i++)
	{ //ItemInfo
		BYTE* pItemInfo = p;
		Write16(pItemInfo, 0); //len

		Write32(pItemInfo, 0); //ItemID
		Write32(pItemInfo, 0); //ItemNum
		Write32(pItemInfo, 0); //AvailPeriod
		Write8(pItemInfo, 0); //Status
		WriteUn(pItemInfo, 0); //ObtainTime
		Write32(pItemInfo, 0); //OtherAttribute
		Write16(pItemInfo, 0); //ItemType

		len = pItemInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //RandCost
		BYTE* pRandCost = p;
		Write16(pRandCost, 0); //len

		Write16(pRandCost, 0); //MoonStone
		Write16(pRandCost, 0); //WizardMoney

		len = pRandCost - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11527, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestRandWizardHomeCommodity(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR Type = Read8(p);

}

void ResponseRandWizardHomeCommodity(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	{ //Info
		BYTE* pInfo = p;
		Write16(pInfo, 0); //len

		Write8(pInfo, 0); //Type
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pInfo;
			Set16(pInfo, (WORD)len);
			pInfo += len;
		}
		for (size_t i = 0; i < n; i++)
		{ //ItemCost
			BYTE* pItemCost = pInfo;
			Write16(pItemCost, 0); //len

			Write16(pItemCost, 0); //MoonStone
			Write16(pItemCost, 0); //WizardMoney

			len = pItemCost - pInfo;
			Set16(pInfo, (WORD)len);
			pInfo += len;
		}
		Write32(pInfo, 0); //RemainTime

		len = pInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11528, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestBuyWizardHomeCommodity(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR Type = Read8(p);
	UCHAR BuyIdx = Read8(p);

}

void ResponsetBuyWizardHomeCommodity(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //HasItem
	for (size_t i = 0; i < n; i++)
	{ //ItemInfo
		BYTE* pItemInfo = p;
		Write16(pItemInfo, 0); //len

		Write32(pItemInfo, 0); //ItemID
		Write32(pItemInfo, 0); //ItemNum
		Write32(pItemInfo, 0); //AvailPeriod
		Write8(pItemInfo, 0); //Status
		WriteUn(pItemInfo, 0); //ObtainTime
		Write32(pItemInfo, 0); //OtherAttribute
		Write16(pItemInfo, 0); //ItemType

		len = pItemInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasCost
	for (size_t i = 0; i < n; i++)
	{ //RandCost
		BYTE* pRandCost = p;
		Write16(pRandCost, 0); //len

		Write16(pRandCost, 0); //MoonStone
		Write16(pRandCost, 0); //WizardMoney

		len = pRandCost - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11529, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GGetWizardActivityInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT DstUin = Read32(p);
	bool GetWizardActivityType = Read8(p);

}

void ResponseC2GGetWizardActivityInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //DstUin
	Write8(p, 0); //GetWizardActivityType
	Write16(p, 0); //Num
	for (size_t i = 0; i < n; i++)
	{ //WizardActivityInfo
		BYTE* pWizardActivityInfo = p;
		Write16(pWizardActivityInfo, 0); //len

		Write32(pWizardActivityInfo, 0); //BillID
		Write32(pWizardActivityInfo, 0); //Uin
		Write16(pWizardActivityInfo, 0); //WizardID
		Write16(pWizardActivityInfo, 0); //WizardType
		WriteString(pWizardActivityInfo, 0); //WizardName[]
		WriteString(pWizardActivityInfo, 0); //PlayerName[]
		Write16(pWizardActivityInfo, 0); //ActivityType
		Write32(pWizardActivityInfo, 0); //ActivityTime
		Write32(pWizardActivityInfo, 0); //ActivityResult
		Write32(pWizardActivityInfo, 0); //OtherUin
		Write16(pWizardActivityInfo, 0); //OtherWizardID
		Write16(pWizardActivityInfo, 0); //OtherWizardType
		WriteString(pWizardActivityInfo, 0); //OtherWizardName[]
		WriteString(pWizardActivityInfo, 0); //OtherPlayerName[]

		len = pWizardActivityInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11482, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestSetWizardHomeDressInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	{ //DressInfo
		BYTE* pDressInfo = p;
		len = Read16(pDressInfo);

		bool ColorSetLen = Read8(pDressInfo);
		bool DoorPlateLen = Read8(pDressInfo);

		p += len;
	}

}

void ResponseSetWizardHomeDressInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	{ //DressInfo
		BYTE* pDressInfo = p;
		Write16(pDressInfo, 0); //len

		Write8(pDressInfo, 0); //ColorSetLen
		Write8(pDressInfo, 0); //DoorPlateLen

		len = pDressInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11530, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyG2CCreateNewWizard(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	{ //WizardBaseInfo
		BYTE* pWizardBaseInfo = p;
		Write16(pWizardBaseInfo, 0); //len

		Write16(pWizardBaseInfo, 0); //WizardID
		Write16(pWizardBaseInfo, 0); //WizardType
		WriteString(pWizardBaseInfo, 0); //NickName[]
		Write32(pWizardBaseInfo, 0); //Experience
		Write8(pWizardBaseInfo, 0); //Level
		Write8(pWizardBaseInfo, 0); //Order
		Write32(pWizardBaseInfo, 0); //Health
		Write8(pWizardBaseInfo, 0); //IsRare
		Write8(pWizardBaseInfo, 0); //Intimacy
		Write8(pWizardBaseInfo, 0); //IsHuanHua
		Write8(pWizardBaseInfo, 0); //IsShow
		Write8(pWizardBaseInfo, 0); //IsCarry
		Write8(pWizardBaseInfo, 0); //MaxSkillNum
		{ //WizardSkillInfoList
			BYTE* pWizardSkillInfoList = pWizardBaseInfo;
			Write16(pWizardSkillInfoList, 0); //len

			Write8(pWizardSkillInfoList, 0); //SkillNum
			for (size_t i = 0; i < n; i++)
			{ //SkillInfo
				BYTE* pSkillInfo = pWizardSkillInfoList;
				Write16(pSkillInfo, 0); //len

				Write8(pSkillInfo, 0); //SkillId
				Write8(pSkillInfo, 0); //SkillLevel

				len = pSkillInfo - pWizardSkillInfoList;
				Set16(pWizardSkillInfoList, (WORD)len);
				pWizardSkillInfoList += len;
			}

			len = pWizardSkillInfoList - pWizardBaseInfo;
			Set16(pWizardBaseInfo, (WORD)len);
			pWizardBaseInfo += len;
		}
		Write8(pWizardBaseInfo, 0); //Status
		Write32(pWizardBaseInfo, 0); //EndTime
		Write32(pWizardBaseInfo, 0); //LeftTime
		Write8(pWizardBaseInfo, 0); //EvolutionBranch
		Write16(pWizardBaseInfo, 0); //CurAdventureMapID
		Write8(pWizardBaseInfo, 0); //LastunLockMapWizardLev
		Write16(pWizardBaseInfo, 0); //Flag
		Write8(pWizardBaseInfo, 0); //JobType

		len = pWizardBaseInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11520, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetAdventureDisplayInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetAdventureDisplayInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //BCNum
	for (size_t i = 0; i < n; i++)
	{ //BC
		BYTE* pBC = p;
		Write16(pBC, 0); //len

		Write16(pBC, 0); //ContentLen

		len = pBC - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //MapNum
	for (size_t i = 0; i < n; i++)
	{ //AdventureShowItem
		BYTE* pAdventureShowItem = p;
		Write16(pAdventureShowItem, 0); //len

		Write16(pAdventureShowItem, 0); //MapID
		Write8(pAdventureShowItem, 0); //ItemNum
		Write(pAdventureShowItem, 0); //ItemID[]

		len = pAdventureShowItem - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11531, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestNewGetFriendList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);

}

void ResponseNewGetFriendList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	WriteUn(p, 0); //Uin
	Write16(p, 0); //MaxFriendNum
	Write16(p, 0); //TotalFriendNum
	Write16(p, 0); //FriendGroupNum
	for (size_t i = 0; i < n; i++)
	{ //FriendGroupInfo
		BYTE* pFriendGroupInfo = p;
		Write16(pFriendGroupInfo, 0); //len

		Write16(pFriendGroupInfo, 0); //GroupID
		WriteString(pFriendGroupInfo, 0); //GroupName[]
		Write16(pFriendGroupInfo, 0); //FriendNum
		for (size_t i = 0; i < n; i++)
		{ //Friend
			BYTE* pFriend = pFriendGroupInfo;
			Write16(pFriend, 0); //len

			Write32(pFriend, 0); //FriendUin
			Write32(pFriend, 0); //RelationFlag
			Write32(pFriend, 0); //Degree
			Write8(pFriend, 0); //Flag
			Write32(pFriend, 0); //ReadedEventID

			len = pFriend - pFriendGroupInfo;
			Set16(pFriendGroupInfo, (WORD)len);
			pFriendGroupInfo += len;
		}

		len = pFriendGroupInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 163, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GGetSignInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseC2GGetSignInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	{ //BaseInfo
		BYTE* pBaseInfo = p;
		Write16(pBaseInfo, 0); //len

		Write8(pBaseInfo, 0); //CurrentWeekSeq
		Write8(pBaseInfo, 0); //CurrentWeekDaySeq
		Write32(pBaseInfo, 0); //LeftTime
		Write8(pBaseInfo, 0); //CurrentSignNum
		Write8(pBaseInfo, 0); //CurrentMatchNum
		Write8(pBaseInfo, 0); //TotalMatchNum

		len = pBaseInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //TipsInfo
		BYTE* pTipsInfo = p;
		Write16(pTipsInfo, 0); //len

		Write16(pTipsInfo, 0); //TipsLen

		len = pTipsInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //StatusEntityNum
	for (size_t i = 0; i < n; i++)
	{ //StatusEntities
		BYTE* pStatusEntities = p;
		Write16(pStatusEntities, 0); //len

		Write8(pStatusEntities, 0); //WeekDaySeq
		Write8(pStatusEntities, 0); //SignStatus

		len = pStatusEntities - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //AwardEntityNum
	for (size_t i = 0; i < n; i++)
	{ //AwardEntities
		BYTE* pAwardEntities = p;
		Write16(pAwardEntities, 0); //len

		Write8(pAwardEntities, 0); //AwardSeq
		Write8(pAwardEntities, 0); //AwardStatus
		Write8(pAwardEntities, 0); //TotalNum
		{ //Award
			BYTE* pAward = pAwardEntities;
			Write16(pAward, 0); //len

			Write32(pAward, 0); //Exp
			Write32(pAward, 0); //Money
			Write32(pAward, 0); //SuperMoney
			Write16(pAward, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAward;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAward;
				Set16(pAward, (WORD)len);
				pAward += len;
			}
			Write32(pAward, 0); //Coupons
			Write32(pAward, 0); //GuildPoint
			Write32(pAward, 0); //LuckMoney
			Write8(pAward, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAward;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAward;
				Set16(pAward, (WORD)len);
				pAward += len;
			}
			Write32(pAward, 0); //SpeedCoin

			len = pAward - pAwardEntities;
			Set16(pAwardEntities, (WORD)len);
			pAwardEntities += len;
		}

		len = pAwardEntities - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ControlAwardNum
	for (size_t i = 0; i < n; i++)
	{ //ControlAwardEntities
		BYTE* pControlAwardEntities = p;
		Write16(pControlAwardEntities, 0); //len

		Write8(pControlAwardEntities, 0); //WeekSeq
		Write32(pControlAwardEntities, 0); //ItemID

		len = pControlAwardEntities - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 233, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GSign(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR WeekDaySeq = Read8(p);
	UCHAR Type = Read8(p);

}

void ResponseC2GSign(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //Result
	Write8(p, 0); //WeekDaySeq
	Write8(p, 0); //Type
	{ //BaseInfo
		BYTE* pBaseInfo = p;
		Write16(pBaseInfo, 0); //len

		Write8(pBaseInfo, 0); //CurrentWeekSeq
		Write8(pBaseInfo, 0); //CurrentWeekDaySeq
		Write32(pBaseInfo, 0); //LeftTime
		Write8(pBaseInfo, 0); //CurrentSignNum
		Write8(pBaseInfo, 0); //CurrentMatchNum
		Write8(pBaseInfo, 0); //TotalMatchNum

		len = pBaseInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasStatusEntity
	for (size_t i = 0; i < n; i++)
	{ //StatusEntity
		BYTE* pStatusEntity = p;
		Write16(pStatusEntity, 0); //len

		Write8(pStatusEntity, 0); //WeekDaySeq
		Write8(pStatusEntity, 0); //SignStatus

		len = pStatusEntity - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 234, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GGetSignAward(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR AwardSeq = Read8(p);

}

void ResponseC2GGetSignAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //Result
	Write8(p, 0); //AwardSeq
	Write8(p, 0); //HasAward
	for (size_t i = 0; i < n; i++)
	{ //Award
		BYTE* pAward = p;
		Write16(pAward, 0); //len

		Write32(pAward, 0); //Exp
		Write32(pAward, 0); //Money
		Write32(pAward, 0); //SuperMoney
		Write16(pAward, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAward;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write32(pAward, 0); //Coupons
		Write32(pAward, 0); //GuildPoint
		Write32(pAward, 0); //LuckMoney
		Write8(pAward, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAward;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write32(pAward, 0); //SpeedCoin

		len = pAward - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //NewAwardStatus

	len = p - buf;
	SendToClient(Client, 235, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyG2CUpdateSignInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //HasBaseInfo
	for (size_t i = 0; i < n; i++)
	{ //BaseInfo
		BYTE* pBaseInfo = p;
		Write16(pBaseInfo, 0); //len

		Write8(pBaseInfo, 0); //CurrentWeekSeq
		Write8(pBaseInfo, 0); //CurrentWeekDaySeq
		Write32(pBaseInfo, 0); //LeftTime
		Write8(pBaseInfo, 0); //CurrentSignNum
		Write8(pBaseInfo, 0); //CurrentMatchNum
		Write8(pBaseInfo, 0); //TotalMatchNum

		len = pBaseInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasTipsInfo
	for (size_t i = 0; i < n; i++)
	{ //TipsInfo
		BYTE* pTipsInfo = p;
		Write16(pTipsInfo, 0); //len

		Write16(pTipsInfo, 0); //TipsLen

		len = pTipsInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //StatusEntityNum
	for (size_t i = 0; i < n; i++)
	{ //StatusEntities
		BYTE* pStatusEntities = p;
		Write16(pStatusEntities, 0); //len

		Write8(pStatusEntities, 0); //WeekDaySeq
		Write8(pStatusEntities, 0); //SignStatus

		len = pStatusEntities - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //AwardEntityNum
	for (size_t i = 0; i < n; i++)
	{ //AwardEntities
		BYTE* pAwardEntities = p;
		Write16(pAwardEntities, 0); //len

		Write8(pAwardEntities, 0); //AwardSeq
		Write8(pAwardEntities, 0); //AwardStatus
		Write8(pAwardEntities, 0); //TotalNum
		{ //Award
			BYTE* pAward = pAwardEntities;
			Write16(pAward, 0); //len

			Write32(pAward, 0); //Exp
			Write32(pAward, 0); //Money
			Write32(pAward, 0); //SuperMoney
			Write16(pAward, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAward;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAward;
				Set16(pAward, (WORD)len);
				pAward += len;
			}
			Write32(pAward, 0); //Coupons
			Write32(pAward, 0); //GuildPoint
			Write32(pAward, 0); //LuckMoney
			Write8(pAward, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAward;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAward;
				Set16(pAward, (WORD)len);
				pAward += len;
			}
			Write32(pAward, 0); //SpeedCoin

			len = pAward - pAwardEntities;
			Set16(pAwardEntities, (WORD)len);
			pAwardEntities += len;
		}

		len = pAwardEntities - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ControlAwardNum
	for (size_t i = 0; i < n; i++)
	{ //ControlAwardEntities
		BYTE* pControlAwardEntities = p;
		Write16(pControlAwardEntities, 0); //len

		Write8(pControlAwardEntities, 0); //WeekSeq
		Write32(pControlAwardEntities, 0); //ItemID

		len = pControlAwardEntities - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 236, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestOpenSignBox(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	U Time = ReadU(p);
	UINT BoxLevel = Read32(p);

}

void ResponseOpenSignBox(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen
	Write32(p, 0); //Uin
	Write32(p, 0); //BoxLevel
	Write8(p, 0); //HasAward
	for (size_t i = 0; i < n; i++)
	{ //AwardInfo
		BYTE* pAwardInfo = p;
		Write16(pAwardInfo, 0); //len

		Write32(pAwardInfo, 0); //Exp
		Write32(pAwardInfo, 0); //Money
		Write32(pAwardInfo, 0); //SuperMoney
		Write16(pAwardInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAwardInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAwardInfo;
			Set16(pAwardInfo, (WORD)len);
			pAwardInfo += len;
		}
		Write32(pAwardInfo, 0); //Coupons
		Write32(pAwardInfo, 0); //GuildPoint
		Write32(pAwardInfo, 0); //LuckMoney
		Write8(pAwardInfo, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAwardInfo;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAwardInfo;
			Set16(pAwardInfo, (WORD)len);
			pAwardInfo += len;
		}
		Write32(pAwardInfo, 0); //SpeedCoin

		len = pAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24041, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GGetSign2Info(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseC2GGetSign2Info(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //Month
	Write8(p, 0); //SignNum
	Write8(p, 0); //CanSign
	Write8(p, 0); //AwardNum
	for (size_t i = 0; i < n; i++)
	{ //Sign2Award
		BYTE* pSign2Award = p;
		Write16(pSign2Award, 0); //len

		{ //Award
			BYTE* pAward = pSign2Award;
			Write16(pAward, 0); //len

			Write32(pAward, 0); //Exp
			Write32(pAward, 0); //Money
			Write32(pAward, 0); //SuperMoney
			Write16(pAward, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAward;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAward;
				Set16(pAward, (WORD)len);
				pAward += len;
			}
			Write32(pAward, 0); //Coupons
			Write32(pAward, 0); //GuildPoint
			Write32(pAward, 0); //LuckMoney
			Write8(pAward, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAward;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAward;
				Set16(pAward, (WORD)len);
				pAward += len;
			}
			Write32(pAward, 0); //SpeedCoin

			len = pAward - pSign2Award;
			Set16(pSign2Award, (WORD)len);
			pSign2Award += len;
		}
		Write16(pSign2Award, 0); //AwardTimes
		Write8(pSign2Award, 0); //HighGrade
		Write8(pSign2Award, 0); //FuncDes

		len = pSign2Award - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //BoxNum
	for (size_t i = 0; i < n; i++)
	{ //SignBox
		BYTE* pSignBox = p;
		Write16(pSignBox, 0); //len

		Write8(pSignBox, 0); //BoxLevel
		Write8(pSignBox, 0); //SignNum
		Write8(pSignBox, 0); //BoxStatus
		{ //Award
			BYTE* pAward = pSignBox;
			Write16(pAward, 0); //len

			Write32(pAward, 0); //Exp
			Write32(pAward, 0); //Money
			Write32(pAward, 0); //SuperMoney
			Write16(pAward, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAward;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAward;
				Set16(pAward, (WORD)len);
				pAward += len;
			}
			Write32(pAward, 0); //Coupons
			Write32(pAward, 0); //GuildPoint
			Write32(pAward, 0); //LuckMoney
			Write8(pAward, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAward;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAward;
				Set16(pAward, (WORD)len);
				pAward += len;
			}
			Write32(pAward, 0); //SpeedCoin

			len = pAward - pSignBox;
			Set16(pSignBox, (WORD)len);
			pSignBox += len;
		}

		len = pSignBox - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 1100, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GSign2(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR SignNum = Read8(p);

}

void ResponseC2GSign2(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //Result
	Write8(p, 0); //CurMonthSignNum
	Write8(p, 0); //HasAward
	for (size_t i = 0; i < n; i++)
	{ //Award
		BYTE* pAward = p;
		Write16(pAward, 0); //len

		Write32(pAward, 0); //Exp
		Write32(pAward, 0); //Money
		Write32(pAward, 0); //SuperMoney
		Write16(pAward, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAward;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write32(pAward, 0); //Coupons
		Write32(pAward, 0); //GuildPoint
		Write32(pAward, 0); //LuckMoney
		Write8(pAward, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAward;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write32(pAward, 0); //SpeedCoin

		len = pAward - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 1101, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GSign3Operate(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR OperateType = Read8(p);

}

void ResponseC2GSign3Operate(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen
	Write8(p, 0); //OperateType
	Write8(p, 0); //HasSign3Info
	for (size_t i = 0; i < n; i++)
	{ //Sign3Info
		BYTE* pSign3Info = p;
		Write16(pSign3Info, 0); //len

		Write32(pSign3Info, 0); //BeginDate
		Write32(pSign3Info, 0); //EndDate
		Write8(pSign3Info, 0); //SignNum
		Write8(pSign3Info, 0); //CanSign
		Write8(pSign3Info, 0); //AwardNum
		for (size_t i = 0; i < n; i++)
		{ //Sign2Award
			BYTE* pSign2Award = pSign3Info;
			Write16(pSign2Award, 0); //len

			{ //Award
				BYTE* pAward = pSign2Award;
				Write16(pAward, 0); //len

				Write32(pAward, 0); //Exp
				Write32(pAward, 0); //Money
				Write32(pAward, 0); //SuperMoney
				Write16(pAward, 0); //ItemNum
				for (size_t i = 0; i < n; i++)
				{ //ItemInfo
					BYTE* pItemInfo = pAward;
					Write16(pItemInfo, 0); //len

					Write32(pItemInfo, 0); //ItemID
					Write32(pItemInfo, 0); //ItemNum
					Write32(pItemInfo, 0); //AvailPeriod
					Write8(pItemInfo, 0); //Status
					WriteUn(pItemInfo, 0); //ObtainTime
					Write32(pItemInfo, 0); //OtherAttribute
					Write16(pItemInfo, 0); //ItemType

					len = pItemInfo - pAward;
					Set16(pAward, (WORD)len);
					pAward += len;
				}
				Write32(pAward, 0); //Coupons
				Write32(pAward, 0); //GuildPoint
				Write32(pAward, 0); //LuckMoney
				Write8(pAward, 0); //ExtendInfoNum
				for (size_t i = 0; i < n; i++)
				{ //ExtendInfoAward
					BYTE* pExtendInfoAward = pAward;
					Write16(pExtendInfoAward, 0); //len

					Write16(pExtendInfoAward, 0); //Key
					Write32(pExtendInfoAward, 0); //AddValue
					Write32(pExtendInfoAward, 0); //TotalValue
					Write8(pExtendInfoAward, 0); //ShowPriority
					Write16(pExtendInfoAward, 0); //BuyNeedScore
					Write8(pExtendInfoAward, 0); //OneMatchMaxNum

					len = pExtendInfoAward - pAward;
					Set16(pAward, (WORD)len);
					pAward += len;
				}
				Write32(pAward, 0); //SpeedCoin

				len = pAward - pSign2Award;
				Set16(pSign2Award, (WORD)len);
				pSign2Award += len;
			}
			Write16(pSign2Award, 0); //AwardTimes
			Write8(pSign2Award, 0); //HighGrade
			Write8(pSign2Award, 0); //FuncDes

			len = pSign2Award - pSign3Info;
			Set16(pSign3Info, (WORD)len);
			pSign3Info += len;
		}
		Write32(pSign3Info, 0); //SpecailAwardBeginDate
		Write32(pSign3Info, 0); //SpecailAwardEndDate
		{ //SpecialAward
			BYTE* pSpecialAward = pSign3Info;
			Write16(pSpecialAward, 0); //len

			Write32(pSpecialAward, 0); //Exp
			Write32(pSpecialAward, 0); //Money
			Write32(pSpecialAward, 0); //SuperMoney
			Write16(pSpecialAward, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pSpecialAward;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pSpecialAward;
				Set16(pSpecialAward, (WORD)len);
				pSpecialAward += len;
			}
			Write32(pSpecialAward, 0); //Coupons
			Write32(pSpecialAward, 0); //GuildPoint
			Write32(pSpecialAward, 0); //LuckMoney
			Write8(pSpecialAward, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pSpecialAward;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pSpecialAward;
				Set16(pSpecialAward, (WORD)len);
				pSpecialAward += len;
			}
			Write32(pSpecialAward, 0); //SpeedCoin

			len = pSpecialAward - pSign3Info;
			Set16(pSign3Info, (WORD)len);
			pSign3Info += len;
		}
		Write8(pSign3Info, 0); //SpecialAwardState
		Write8(pSign3Info, 0); //IsSpecailAwardRemind
		Write8(pSign3Info, 0); //TipsLen
		Write32(pSign3Info, 0); //SpecialAwardID
		Write8(pSign3Info, 0); //LabelNum
		Write8(pSign3Info, 0); //GotLabelNum
		Write8(pSign3Info, 0); //FinalAwardState
		{ //FinalAward
			BYTE* pFinalAward = pSign3Info;
			Write16(pFinalAward, 0); //len

			Write32(pFinalAward, 0); //Exp
			Write32(pFinalAward, 0); //Money
			Write32(pFinalAward, 0); //SuperMoney
			Write16(pFinalAward, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pFinalAward;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pFinalAward;
				Set16(pFinalAward, (WORD)len);
				pFinalAward += len;
			}
			Write32(pFinalAward, 0); //Coupons
			Write32(pFinalAward, 0); //GuildPoint
			Write32(pFinalAward, 0); //LuckMoney
			Write8(pFinalAward, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pFinalAward;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pFinalAward;
				Set16(pFinalAward, (WORD)len);
				pFinalAward += len;
			}
			Write32(pFinalAward, 0); //SpeedCoin

			len = pFinalAward - pSign3Info;
			Set16(pSign3Info, (WORD)len);
			pSign3Info += len;
		}
		Write32(pSign3Info, 0); //SeasonBeginDate
		Write32(pSign3Info, 0); //SeasonEndDate

		len = pSign3Info - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //SignNum
	Write8(p, 0); //HasAward
	for (size_t i = 0; i < n; i++)
	{ //Award
		BYTE* pAward = p;
		Write16(pAward, 0); //len

		Write32(pAward, 0); //Exp
		Write32(pAward, 0); //Money
		Write32(pAward, 0); //SuperMoney
		Write16(pAward, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAward;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write32(pAward, 0); //Coupons
		Write32(pAward, 0); //GuildPoint
		Write32(pAward, 0); //LuckMoney
		Write8(pAward, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAward;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write32(pAward, 0); //SpeedCoin

		len = pAward - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //LabelNum

	len = p - buf;
	SendToClient(Client, 1401, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestPlayerTestMsg(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int Para1 = Read32(p);
	UCHAR MsgType = Read8(p);

}

void ResponsePlayerTestMsg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Para1
	Write8(p, 0); //MsgType
	Write8(p, 0); //ConLen

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestRankedMatchArenaOperate(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR OperateType = Read8(p);
	UCHAR SelectIndex = Read8(p);

}

void ResponseRankedMatchArenaOperate(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen
	Write8(p, 0); //OperateType
	Write8(p, 0); //SelectIndex
	Write8(p, 0); //HasArenaInfo
	for (size_t i = 0; i < n; i++)
	{ //ArenaInfo
		BYTE* pArenaInfo = p;
		Write16(pArenaInfo, 0); //len

		Write32(pArenaInfo, 0); //BeginTime
		Write32(pArenaInfo, 0); //EndTime
		Write8(pArenaInfo, 0); //CurrentRound
		Write8(pArenaInfo, 0); //FailMinusScore
		Write8(pArenaInfo, 0); //WinNum
		Write16(pArenaInfo, 0); //CurrentScore
		Write16(pArenaInfo, 0); //TodayGainedScore
		Write16(pArenaInfo, 0); //TodayMaxScore
		Write16(pArenaInfo, 0); //RaceWinScore
		Write32(pArenaInfo, 0); //SelectedCarID
		{ //RefitInfo
			BYTE* pRefitInfo = pArenaInfo;
			Write16(pRefitInfo, 0); //len

			Write8(pRefitInfo, 0); //SpeedRefitStar
			Write8(pRefitInfo, 0); //JetRefitStar
			Write8(pRefitInfo, 0); //SJetRefitStar
			Write8(pRefitInfo, 0); //AccuRefitStar

			len = pRefitInfo - pArenaInfo;
			Set16(pArenaInfo, (WORD)len);
			pArenaInfo += len;
		}
		Write8(pArenaInfo, 0); //CanSelectRefit
		Write8(pArenaInfo, 0); //MaxWinNum
		Write8(pArenaInfo, 0); //MaxWinScore
		Write16(pArenaInfo, 0); //LeftScore

		len = pArenaInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //SelectCarNum
	Write32(p, 0); //SelectCarList[]
	Write8(p, 0); //HasRefitInfo
	for (size_t i = 0; i < n; i++)
	{ //RefitInfo
		BYTE* pRefitInfo = p;
		Write16(pRefitInfo, 0); //len

		Write8(pRefitInfo, 0); //SpeedRefitStar
		Write8(pRefitInfo, 0); //JetRefitStar
		Write8(pRefitInfo, 0); //SJetRefitStar
		Write8(pRefitInfo, 0); //AccuRefitStar

		len = pRefitInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //SelectRefitNum
	for (size_t i = 0; i < n; i++)
	{ //SelectRefitInfo
		BYTE* pSelectRefitInfo = p;
		Write16(pSelectRefitInfo, 0); //len

		Write8(pSelectRefitInfo, 0); //SpeedRefitStar
		Write8(pSelectRefitInfo, 0); //JetRefitStar
		Write8(pSelectRefitInfo, 0); //SJetRefitStar
		Write8(pSelectRefitInfo, 0); //AccuRefitStar

		len = pSelectRefitInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //SelectedCarID
	Write8(p, 0); //HasSettleInfo
	for (size_t i = 0; i < n; i++)
	{ //SettleInfo
		BYTE* pSettleInfo = p;
		Write16(pSettleInfo, 0); //len

		Write8(pSettleInfo, 0); //SettleType
		{ //RankedMatchLastGradeInfo
			BYTE* pRankedMatchLastGradeInfo = pSettleInfo;
			Write16(pRankedMatchLastGradeInfo, 0); //len

			Write32(pRankedMatchLastGradeInfo, 0); //GradeLevel
			Write32(pRankedMatchLastGradeInfo, 0); //ChildLevel
			Write32(pRankedMatchLastGradeInfo, 0); //GradeScore
			Write32(pRankedMatchLastGradeInfo, 0); //MaxGradeScore
			Write32(pRankedMatchLastGradeInfo, 0); //TotalScore

			len = pRankedMatchLastGradeInfo - pSettleInfo;
			Set16(pSettleInfo, (WORD)len);
			pSettleInfo += len;
		}
		{ //RankedMatchGradeInfo
			BYTE* pRankedMatchGradeInfo = pSettleInfo;
			Write16(pRankedMatchGradeInfo, 0); //len

			Write32(pRankedMatchGradeInfo, 0); //GradeLevel
			Write32(pRankedMatchGradeInfo, 0); //ChildLevel
			Write32(pRankedMatchGradeInfo, 0); //GradeScore
			Write32(pRankedMatchGradeInfo, 0); //MaxGradeScore
			Write32(pRankedMatchGradeInfo, 0); //TotalScore

			len = pRankedMatchGradeInfo - pSettleInfo;
			Set16(pSettleInfo, (WORD)len);
			pSettleInfo += len;
		}
		Write16(pSettleInfo, 0); //SettleScore
		Write8(pSettleInfo, 0); //WinNum
		{ //RankedMatchPromoInfo
			BYTE* pRankedMatchPromoInfo = pSettleInfo;
			Write16(pRankedMatchPromoInfo, 0); //len

			Write8(pRankedMatchPromoInfo, 0); //PromotionMatch
			Write32(pRankedMatchPromoInfo, 0); //PromotionRoundNums
			Write32(pRankedMatchPromoInfo, 0); //PromotionSuccessRoundNums
			Write32(pRankedMatchPromoInfo, 0); //PromotionAlreadySuccessRoundNums
			Write32(pRankedMatchPromoInfo, 0); //PromotionRecordTag
			Write32(pRankedMatchPromoInfo, 0); //CurrentPromotionRoundNums
			Write32(pRankedMatchPromoInfo, 0); //PromoFailedMinusScore
			Write32(pRankedMatchPromoInfo, 0); //PromoSuccAddScore
			Write8(pRankedMatchPromoInfo, 0); //PromoDirectly
			Write8(pRankedMatchPromoInfo, 0); //GradeNoNeedPromo
			Write8(pRankedMatchPromoInfo, 0); //RankedMemoryNoNeedPromo
			Write8(pRankedMatchPromoInfo, 0); //PromotionExtraScore
			Write8(pRankedMatchPromoInfo, 0); //PromtRaceFailedDefendFlag

			len = pRankedMatchPromoInfo - pSettleInfo;
			Set16(pSettleInfo, (WORD)len);
			pSettleInfo += len;
		}
		Write8(pSettleInfo, 0); //SkipGradeNum
		Write16(pSettleInfo, 0); //SkipedGrade[]
		Write16(pSettleInfo, 0); //LeftScore
		Write16(pSettleInfo, 0); //GradeProtectScore

		len = pSettleInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //RefitStateNum
	Write16(p, 0); //RefitState[]
	Write8(p, 0); //UseSelfCar

	len = p - buf;
	SendToClient(Client, 1403, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GMagicCardGetNews(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int Ver = Read32(p);

}

void ResponseC2GMagicCardGetNews(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	{ //MagicCardNews
		BYTE* pMagicCardNews = p;
		Write16(pMagicCardNews, 0); //len

		Write32(pMagicCardNews, 0); //Ver
		Write16(pMagicCardNews, 0); //CardNum
		Write32(pMagicCardNews, 0); //CardList[]
		Write16(pMagicCardNews, 0); //TimeDescLen
		Write16(pMagicCardNews, 0); //MapNum
		Write32(pMagicCardNews, 0); //MapList[]
		Write16(pMagicCardNews, 0); //OtherDescLen

		len = pMagicCardNews - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 12000, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyC2GMagicCardNotifyCardsEverHad(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //CardNum
	for (size_t i = 0; i < n; i++)
	{ //CardInfo
		BYTE* pCardInfo = p;
		Write16(pCardInfo, 0); //len

		Write32(pCardInfo, 0); //CardID
		Write32(pCardInfo, 0); //LastGetTime

		len = pCardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //LeftFreeRandTransformNum

	len = p - buf;
	SendToClient(Client, 12001, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestC2GMagicCardGetExchangeInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT Version = Read16(p);

}

void ResponseC2GMagicCardGetExchangeInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //Version
	Write16(p, 0); //ExchangeNum
	for (size_t i = 0; i < n; i++)
	{ //ExchangeList
		BYTE* pExchangeList = p;
		Write16(pExchangeList, 0); //len

		Write32(pExchangeList, 0); //ConsumeCardID
		Write32(pExchangeList, 0); //ProduceCarID
		Write32(pExchangeList, 0); //ExchangeCardID
		Write8(pExchangeList, 0); //RuleNum
		for (size_t i = 0; i < n; i++)
		{ //Rules
			BYTE* pRules = pExchangeList;
			Write16(pRules, 0); //len

			Write32(pRules, 0); //AvailPeriod
			Write16(pRules, 0); //NeedCardNum
			Write16(pRules, 0); //NeedExchangeCardNum

			len = pRules - pExchangeList;
			Set16(pExchangeList, (WORD)len);
			pExchangeList += len;
		}
		Write32(pExchangeList, 0); //StartTime
		Write32(pExchangeList, 0); //EndTime

		len = pExchangeList - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 12002, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GMagicCardCompound(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR ElementNum = Read8(p);
	for (size_t i = 0; i < n; i++)
	{ //Element
		BYTE* pElement = p;
		len = Read16(pElement);

		int CardID = Read32(pElement);
		UCHAR CardNum = Read8(pElement);

		p += len;
	}

}

void ResponseC2GMagicCardCompound(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //ProduceCardID
	Write32(p, 0); //ExpInc
	Write8(p, 0); //ElementNum
	for (size_t i = 0; i < n; i++)
	{ //Element
		BYTE* pElement = p;
		Write16(pElement, 0); //len

		Write32(pElement, 0); //CardID
		Write8(pElement, 0); //CardNum

		len = pElement - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 12003, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GMagicCardExchange(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT Version = Read16(p);
	int CardID = Read32(p);
	int AvailPeriod = Read32(p);

}

void ResponseC2GMagicCardExchange(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //ProduceCarID
	Write32(p, 0); //AvailPeriod
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 12004, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GMagicCardTransform(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR TransType = Read8(p);
	int CardID = Read32(p);
	int AppointCardID = Read32(p);

}

void ResponseC2GMagicCardTransform(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //ProduceCardID
	Write32(p, 0); //ExpInc
	Write32(p, 0); //LeftFreeRandTransformNum
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 12005, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyC2GMagicCardNotifyGenCardAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //CardID
	Write32(p, 0); //OtherCards[]

	len = p - buf;
	SendToClient(Client, 12006, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestG2DMagicCardGetCardAward(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int CardID = Read32(p);

}

void ResponseG2DMagicCardGetCardAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //CardID

	len = p - buf;
	SendToClient(Client, 12007, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GSandglassInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseC2GSandglassInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //CurAccumulateTime
	{ //NotifyInfo
		BYTE* pNotifyInfo = p;
		Write16(pNotifyInfo, 0); //len

		Write8(pNotifyInfo, 0); //NotifyInGame
		Write32(pNotifyInfo, 0); //NotifyInGameTime
		Write8(pNotifyInfo, 0); //NotifyInQQ
		Write32(pNotifyInfo, 0); //NotifyInQQTime

		len = pNotifyInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //SandglassNum
	for (size_t i = 0; i < n; i++)
	{ //SandglassCfgList
		BYTE* pSandglassCfgList = p;
		Write16(pSandglassCfgList, 0); //len

		Write32(pSandglassCfgList, 0); //Time
		Write32(pSandglassCfgList, 0); //AwardExp

		len = pSandglassCfgList - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 237, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GStartSandglass(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	bool ChangeNotify = Read8(p);
	for (size_t i = 0; i < n; i++)
	{ //NotifyInfo
		BYTE* pNotifyInfo = p;
		len = Read16(pNotifyInfo);

		bool NotifyInGame = Read8(pNotifyInfo);
		UINT NotifyInGameTime = Read32(pNotifyInfo);
		bool NotifyInQQ = Read8(pNotifyInfo);
		UINT NotifyInQQTime = Read32(pNotifyInfo);

		p += len;
	}

}

void ResponseC2GStartSandglass(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 238, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GGetSandglassExp(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR GetType = Read8(p);

}

void ResponseC2GGetSandglassExp(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //GetType
	Write32(p, 0); //AwardExp

	len = p - buf;
	SendToClient(Client, 239, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyG2CSandglassExpReady(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //Time

	len = p - buf;
	SendToClient(Client, 240, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestC2GGetPlayerFizzStarBaseInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseC2GGetPlayerFizzStarBaseInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //FizzStarTaskID
	Write16(p, 0); //OneSelfFizzStarTaskAward
	Write16(p, 0); //FriendFizzStarTaskAward
	Write8(p, 0); //IsCompleted
	Write8(p, 0); //AwardDttitionMultiple
	Write16(p, 0); //FizzSource
	Write16(p, 0); //FizzStarDaily
	Write16(p, 0); //FizzStarPeriod
	Write8(p, 0); //FizzStarLotteryStatusDaily
	Write32(p, 0); //FizzSourceRecoverLeftTime
	Write8(p, 0); //IsFizzSourceFull
	Write32(p, 0); //PeriodLeftTime
	Write16(p, 0); //FizzStarRank
	Write16(p, 0); //FizzStarDecalrationFriendCount
	Write8(p, 0); //ExpectLotteryType
	Write8(p, 0); //PastLotteryType
	Write8(p, 0); //PastStatus
	Write32(p, 0); //LeftTaskAwardMultipleCount
	Write32(p, 0); //FizzStarUpdateTime

	len = p - buf;
	SendToClient(Client, 11591, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyG2CFizzStarCfg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //MaxFizzSourceTotalCount
	Write16(p, 0); //MaxFizzSourceByTimeOneDay
	Write16(p, 0); //MaxFizzSourceByRequestandBeDonatedOneDay
	Write16(p, 0); //MaxDonateFizzSourceCountOneDay
	Write32(p, 0); //FizzSourceeDonatedCoolTimeGap
	Write32(p, 0); //FizzSourceadditionTimeGap
	Write32(p, 0); //FizzStarNumUpRank
	Write8(p, 0); //DailyFizzLotteryNum
	for (size_t i = 0; i < n; i++)
	{ //DailyFizzLotteryInfo
		BYTE* pDailyFizzLotteryInfo = p;
		Write16(pDailyFizzLotteryInfo, 0); //len

		Write8(pDailyFizzLotteryInfo, 0); //LotteryType
		Write16(pDailyFizzLotteryInfo, 0); //FizzStarNum
		Write8(pDailyFizzLotteryInfo, 0); //ControlledItemNum
		Write32(pDailyFizzLotteryInfo, 0); //ControlledItem[]

		len = pDailyFizzLotteryInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //PeriodFizzLotteryNum
	for (size_t i = 0; i < n; i++)
	{ //PeriodFizzLotteryInfo
		BYTE* pPeriodFizzLotteryInfo = p;
		Write16(pPeriodFizzLotteryInfo, 0); //len

		Write8(pPeriodFizzLotteryInfo, 0); //LotteryType
		Write16(pPeriodFizzLotteryInfo, 0); //FizzStarNum
		Write16(pPeriodFizzLotteryInfo, 0); //FizzStarRank
		Write8(pPeriodFizzLotteryInfo, 0); //ControlledItemNum
		Write32(pPeriodFizzLotteryInfo, 0); //ControlledItem[]
		Write32(pPeriodFizzLotteryInfo, 0); //ExpIncRate

		len = pPeriodFizzLotteryInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11595, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestC2GGetFizzStarActivityInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseC2GFizzStarActivityInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //Num
	for (size_t i = 0; i < n; i++)
	{ //FizzStarActivityInfo
		BYTE* pFizzStarActivityInfo = p;
		Write16(pFizzStarActivityInfo, 0); //len

		Write32(pFizzStarActivityInfo, 0); //BillID
		Write32(pFizzStarActivityInfo, 0); //Uin
		WriteString(pFizzStarActivityInfo, 0); //PlayerName[]
		Write16(pFizzStarActivityInfo, 0); //ActivityType
		Write32(pFizzStarActivityInfo, 0); //ActivityTime
		Write32(pFizzStarActivityInfo, 0); //ActivityValue1
		Write32(pFizzStarActivityInfo, 0); //ActivityValue2
		Write32(pFizzStarActivityInfo, 0); //ActivityValue3
		Write32(pFizzStarActivityInfo, 0); //OtherUin
		WriteString(pFizzStarActivityInfo, 0); //OtherPlayerName[]

		len = pFizzStarActivityInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11596, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyG2CAddFizzStarActivityInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	{ //FizzStarActivityInfo
		BYTE* pFizzStarActivityInfo = p;
		Write16(pFizzStarActivityInfo, 0); //len

		Write32(pFizzStarActivityInfo, 0); //BillID
		Write32(pFizzStarActivityInfo, 0); //Uin
		WriteString(pFizzStarActivityInfo, 0); //PlayerName[]
		Write16(pFizzStarActivityInfo, 0); //ActivityType
		Write32(pFizzStarActivityInfo, 0); //ActivityTime
		Write32(pFizzStarActivityInfo, 0); //ActivityValue1
		Write32(pFizzStarActivityInfo, 0); //ActivityValue2
		Write32(pFizzStarActivityInfo, 0); //ActivityValue3
		Write32(pFizzStarActivityInfo, 0); //OtherUin
		WriteString(pFizzStarActivityInfo, 0); //OtherPlayerName[]

		len = pFizzStarActivityInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11600, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestC2GGetFizzStarFriendInfoList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	Un Time = ReadUn(p);

}

void ResponseC2GGetFizzStarFriendInfoList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //FriendNum
	for (size_t i = 0; i < n; i++)
	{ //FriendFizzStarInfo
		BYTE* pFriendFizzStarInfo = p;
		Write16(pFriendFizzStarInfo, 0); //len

		WriteUn(pFriendFizzStarInfo, 0); //Uin
		Write16(pFriendFizzStarInfo, 0); //FizzStarPeriod
		Write32(pFriendFizzStarInfo, 0); //FizzStarUpdateTime

		len = pFriendFizzStarInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11597, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GGetFizzStarTask(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseC2GGetFizzStarTask(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //TaskID
	Write16(p, 0); //OneSelfFizzStarTaskAward
	Write16(p, 0); //FriendFizzStarTaskAward
	Write8(p, 0); //AwardAdditionMultiple
	Write16(p, 0); //DstFizzSourceDec
	Write16(p, 0); //FizzSource
	Write32(p, 0); //FizzSourceRecoverLeftTime
	Write8(p, 0); //TaskType

	len = p - buf;
	SendToClient(Client, 11592, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GDonateFriendFizzSource(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT DstUin = Read32(p);

}

void ResponseC2GDonateFriendFizzSource(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 11593, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyG2CFizzSourceAddition(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	WriteString(p, 0); //SrcNickName[]
	Write16(p, 0); //FizzSourceInc
	Write16(p, 0); //FizzSourceTotal
	Write8(p, 0); //FizzSourceAdditionType

	len = p - buf;
	SendToClient(Client, 11594, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyG2CUpdateSkateTaskLevel(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //SkateTaskLevel

	len = p - buf;
	SendToClient(Client, 778, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestSkateSkillUpgrade(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	bool SkillId = Read8(p);

}

void ResponseSkateSkillUpgrade(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //SkillId
	Write8(p, 0); //SkillLevel
	Write32(p, 0); //SkateCoin

	len = p - buf;
	SendToClient(Client, 10927, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyG2CSkateCfg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //SkateSkillCfgNum
	for (size_t i = 0; i < n; i++)
	{ //SkateSkillCfg
		BYTE* pSkateSkillCfg = p;
		Write16(pSkateSkillCfg, 0); //len

		Write32(pSkateSkillCfg, 0); //SkilllLevel
		Write32(pSkateSkillCfg, 0); //UpgradeCostCoin
		Write32(pSkateSkillCfg, 0); //ExpAward

		len = pSkateSkillCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //ComboAwardCoinCfg[]
	Write32(p, 0); //SkateChannelCoinThreshold
	Write8(p, 0); //SkateChannelNum
	for (size_t i = 0; i < n; i++)
	{ //SkateChannelInfo
		BYTE* pSkateChannelInfo = p;
		Write16(pSkateChannelInfo, 0); //len

		Write32(pSkateChannelInfo, 0); //ChannelId
		Write32(pSkateChannelInfo, 0); //LowerLevel
		Write32(pSkateChannelInfo, 0); //HigerLevel
		Write32(pSkateChannelInfo, 0); //LowerCoin
		Write32(pSkateChannelInfo, 0); //HigerCoin

		len = pSkateChannelInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //MaxSkateCoinCountDaily

	len = p - buf;
	SendToClient(Client, 10928, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestC2GFizzStarLottery(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	bool LotteryFlag = Read8(p);
	bool LotteryType = Read8(p);

}

void ResponseC2GFizzStarLottery(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //LotteryFlag
	Write8(p, 0); //LotteryType
	{ //AwardMoneyExp
		BYTE* pAwardMoneyExp = p;
		Write16(pAwardMoneyExp, 0); //len

		Write32(pAwardMoneyExp, 0); //Money
		Write32(pAwardMoneyExp, 0); //SuperMoney
		Write32(pAwardMoneyExp, 0); //Exp
		Write32(pAwardMoneyExp, 0); //Charm
		Write32(pAwardMoneyExp, 0); //DanceExp
		Write32(pAwardMoneyExp, 0); //Coupons
		Write32(pAwardMoneyExp, 0); //Admiration
		Write32(pAwardMoneyExp, 0); //LuckMoney
		Write32(pAwardMoneyExp, 0); //TeamWorkExp
		Write32(pAwardMoneyExp, 0); //AchievePoint
		Write32(pAwardMoneyExp, 0); //ConsumeScore
		Write32(pAwardMoneyExp, 0); //HistoryConsumeScore
		Write32(pAwardMoneyExp, 0); //LadderMatchAchievePoint
		Write32(pAwardMoneyExp, 0); //SpeedBean
		Write32(pAwardMoneyExp, 0); //SpeedCoin

		len = pAwardMoneyExp - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //AwardItemNum
	for (size_t i = 0; i < n; i++)
	{ //AwardItemInfo
		BYTE* pAwardItemInfo = p;
		Write16(pAwardItemInfo, 0); //len

		Write32(pAwardItemInfo, 0); //ItemID
		Write32(pAwardItemInfo, 0); //ItemNum
		Write32(pAwardItemInfo, 0); //AvailPeriod
		Write8(pAwardItemInfo, 0); //Status
		WriteUn(pAwardItemInfo, 0); //ObtainTime
		Write32(pAwardItemInfo, 0); //OtherAttribute
		Write16(pAwardItemInfo, 0); //ItemType

		len = pAwardItemInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11599, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GGetFizzStarRecommendList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseC2GGetFizzStarRecommendList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //PlayerNum
	for (size_t i = 0; i < n; i++)
	{ //PlayerFizzStarRecommendInfo
		BYTE* pPlayerFizzStarRecommendInfo = p;
		Write16(pPlayerFizzStarRecommendInfo, 0); //len

		Write32(pPlayerFizzStarRecommendInfo, 0); //Uin
		WriteString(pPlayerFizzStarRecommendInfo, 0); //NickName[]
		Write32(pPlayerFizzStarRecommendInfo, 0); //Experience

		len = pPlayerFizzStarRecommendInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11601, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyG2CFizzStarSpecialTaskAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //FizzStarTaskAward
	Write8(p, 0); //HasAward
	for (size_t i = 0; i < n; i++)
	{ //AwardMoneyExp
		BYTE* pAwardMoneyExp = p;
		Write16(pAwardMoneyExp, 0); //len

		Write32(pAwardMoneyExp, 0); //Money
		Write32(pAwardMoneyExp, 0); //SuperMoney
		Write32(pAwardMoneyExp, 0); //Exp
		Write32(pAwardMoneyExp, 0); //Charm
		Write32(pAwardMoneyExp, 0); //DanceExp
		Write32(pAwardMoneyExp, 0); //Coupons
		Write32(pAwardMoneyExp, 0); //Admiration
		Write32(pAwardMoneyExp, 0); //LuckMoney
		Write32(pAwardMoneyExp, 0); //TeamWorkExp
		Write32(pAwardMoneyExp, 0); //AchievePoint
		Write32(pAwardMoneyExp, 0); //ConsumeScore
		Write32(pAwardMoneyExp, 0); //HistoryConsumeScore
		Write32(pAwardMoneyExp, 0); //LadderMatchAchievePoint
		Write32(pAwardMoneyExp, 0); //SpeedBean
		Write32(pAwardMoneyExp, 0); //SpeedCoin

		len = pAwardMoneyExp - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11602, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestReceiveGuildVipGift(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseReceiveGuildVipGift(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //GiftID

	len = p - buf;
	SendToClient(Client, 12032, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetGVLottoryCommodityInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetGVLottoryCommodityInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	{ //Info
		BYTE* pInfo = p;
		Write16(pInfo, 0); //len

		Write8(pInfo, 0); //Type
		{ //Award
			BYTE* pAward = pInfo;
			Write16(pAward, 0); //len

			Write32(pAward, 0); //Exp
			Write32(pAward, 0); //Money
			Write32(pAward, 0); //SuperMoney
			Write16(pAward, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAward;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAward;
				Set16(pAward, (WORD)len);
				pAward += len;
			}
			Write32(pAward, 0); //Coupons
			Write32(pAward, 0); //GuildPoint
			Write32(pAward, 0); //LuckMoney
			Write8(pAward, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAward;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAward;
				Set16(pAward, (WORD)len);
				pAward += len;
			}
			Write32(pAward, 0); //SpeedCoin

			len = pAward - pInfo;
			Set16(pInfo, (WORD)len);
			pInfo += len;
		}
		Write16(pInfo, 0); //RemainTime

		len = pInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //BCNum
	for (size_t i = 0; i < n; i++)
	{ //BC
		BYTE* pBC = p;
		Write16(pBC, 0); //len

		Write16(pBC, 0); //ContentLen

		len = pBC - p;
		Set16(p, (WORD)len);
		p += len;
	}
	for (size_t i = 0; i < n; i++)
	{ //AwardInfo
		BYTE* pAwardInfo = p;
		Write16(pAwardInfo, 0); //len

		Write32(pAwardInfo, 0); //Exp
		Write32(pAwardInfo, 0); //Money
		Write32(pAwardInfo, 0); //SuperMoney
		Write16(pAwardInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAwardInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAwardInfo;
			Set16(pAwardInfo, (WORD)len);
			pAwardInfo += len;
		}
		Write32(pAwardInfo, 0); //Coupons
		Write32(pAwardInfo, 0); //GuildPoint
		Write32(pAwardInfo, 0); //LuckMoney
		Write8(pAwardInfo, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAwardInfo;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAwardInfo;
			Set16(pAwardInfo, (WORD)len);
			pAwardInfo += len;
		}
		Write32(pAwardInfo, 0); //SpeedCoin

		len = pAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 12037, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestRandGVLottoryCommodity(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR Type = Read8(p);

}

void ResponseRandGVLottoryCommodity(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	{ //Info
		BYTE* pInfo = p;
		Write16(pInfo, 0); //len

		Write8(pInfo, 0); //Type
		{ //Award
			BYTE* pAward = pInfo;
			Write16(pAward, 0); //len

			Write32(pAward, 0); //Exp
			Write32(pAward, 0); //Money
			Write32(pAward, 0); //SuperMoney
			Write16(pAward, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAward;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAward;
				Set16(pAward, (WORD)len);
				pAward += len;
			}
			Write32(pAward, 0); //Coupons
			Write32(pAward, 0); //GuildPoint
			Write32(pAward, 0); //LuckMoney
			Write8(pAward, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAward;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAward;
				Set16(pAward, (WORD)len);
				pAward += len;
			}
			Write32(pAward, 0); //SpeedCoin

			len = pAward - pInfo;
			Set16(pInfo, (WORD)len);
			pInfo += len;
		}
		Write16(pInfo, 0); //RemainTime

		len = pInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 12038, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestBuyGVLottoryCommodity(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseBuyGVLottoryCommodity(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //HasAward
	for (size_t i = 0; i < n; i++)
	{ //AwardInfo
		BYTE* pAwardInfo = p;
		Write16(pAwardInfo, 0); //len

		Write32(pAwardInfo, 0); //Exp
		Write32(pAwardInfo, 0); //Money
		Write32(pAwardInfo, 0); //SuperMoney
		Write16(pAwardInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAwardInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAwardInfo;
			Set16(pAwardInfo, (WORD)len);
			pAwardInfo += len;
		}
		Write32(pAwardInfo, 0); //Coupons
		Write32(pAwardInfo, 0); //GuildPoint
		Write32(pAwardInfo, 0); //LuckMoney
		Write8(pAwardInfo, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAwardInfo;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAwardInfo;
			Set16(pAwardInfo, (WORD)len);
			pAwardInfo += len;
		}
		Write32(pAwardInfo, 0); //SpeedCoin

		len = pAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //Type

	len = p - buf;
	SendToClient(Client, 12039, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestPopularity(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT SrcUin = Read32(p);
	UINT DstUin = Read32(p);
	UINT Time = Read32(p);
	short WordLength = Read16(p);
	short RoseNum = Read16(p);

}

void ResponsePopularity(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //SrcUin
	Write32(p, 0); //DstUin
	Write16(p, 0); //ResultID
	Write16(p, 0); //RoseNum

	len = p - buf;
	SendToClient(Client, 1700, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetLadderMatchInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetLadderMatchInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	{ //PlayerLDMDetailInfo
		BYTE* pPlayerLDMDetailInfo = p;
		Write16(pPlayerLDMDetailInfo, 0); //len

		Write8(pPlayerLDMDetailInfo, 0); //NextGrade
		Write32(pPlayerLDMDetailInfo, 0); //NextGradeLeftScore
		{ //RankInfo
			BYTE* pRankInfo = pPlayerLDMDetailInfo;
			Write16(pRankInfo, 0); //len

			Write8(pRankInfo, 0); //RankType
			Write8(pRankInfo, 0); //RankValue

			len = pRankInfo - pPlayerLDMDetailInfo;
			Set16(pPlayerLDMDetailInfo, (WORD)len);
			pPlayerLDMDetailInfo += len;
		}
		Write8(pPlayerLDMDetailInfo, 0); //BadgeType
		Write32(pPlayerLDMDetailInfo, 0); //MatchCount
		Write32(pPlayerLDMDetailInfo, 0); //WinCount
		Write32(pPlayerLDMDetailInfo, 0); //WinStreakCount
		Write32(pPlayerLDMDetailInfo, 0); //MaxWinStreakCount
		Write32(pPlayerLDMDetailInfo, 0); //CollisionCount
		Write32(pPlayerLDMDetailInfo, 0); //BeatCount

		len = pPlayerLDMDetailInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen
	Write16(p, 0); //LeftDayCurSeason

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetLadderMatchRecord(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetLadderMatchRecord(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	{ //Record
		BYTE* pRecord = p;
		Write16(pRecord, 0); //len

		Write16(pRecord, 0); //RecordNum
		for (size_t i = 0; i < n; i++)
		{ //Record
			BYTE* pRecord = pRecord;
			Write16(pRecord, 0); //len

			Write32(pRecord, 0); //GameTime
			Write32(pRecord, 0); //FinTime
			Write32(pRecord, 0); //Rank
			Write32(pRecord, 0); //MapID
			Write32(pRecord, 0); //RecordID
			Write8(pRecord, 0); //MatchFlag
			Write32(pRecord, 0); //ScoreInc

			len = pRecord - pRecord;
			Set16(pRecord, (WORD)len);
			pRecord += len;
		}

		len = pRecord - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestParticipateLadderMatch(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseParticipateLadderMatch(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen
	Write16(p, 0); //TimeoutSec

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestCancelParticipateLadderMatch(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseCancelParticipateLadderMatch(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyPlayerParticipateLadderMatchReady(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ServerID
	WriteU(p, 0); //ExtenalIP
	Write8(p, 0); //ExtTcpPortNum
	Write16(p, 0); //ExternalTcpPort[]
	Write8(p, 0); //ExtUdpPortNum
	Write16(p, 0); //ExternalUdpPort[]
	Write32(p, 0); //RoomID
	Write32(p, 0); //WaitGameBeginTime

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyPlayerParticipateLadderMatchTimeout(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyPlayerLadderMatchBeginCountDown(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //CountDownTime

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetLadderMatchPlayerToplist(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetLadderMatchPlayerToplist(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	{ //ToplistInfo
		BYTE* pToplistInfo = p;
		Write16(pToplistInfo, 0); //len

		Write32(pToplistInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //Item
			BYTE* pItem = pToplistInfo;
			Write16(pItem, 0); //len

			Write32(pItem, 0); //Uin
			WriteString(pItem, 0); //NickName[]
			Write32(pItem, 0); //Score
			Write8(pItem, 0); //Grade

			len = pItem - pToplistInfo;
			Set16(pToplistInfo, (WORD)len);
			pToplistInfo += len;
		}

		len = pToplistInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetLadderMatchGuildToplist(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetLadderMatchGuildToplist(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	{ //ToplistInfo
		BYTE* pToplistInfo = p;
		Write16(pToplistInfo, 0); //len

		Write32(pToplistInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //Item
			BYTE* pItem = pToplistInfo;
			Write16(pItem, 0); //len

			Write32(pItem, 0); //GuildID
			Write32(pItem, 0); //GuildScore
			WriteString(pItem, 0); //Name[]
			Write16(pItem, 0); //Attribute

			len = pItem - pToplistInfo;
			Set16(pToplistInfo, (WORD)len);
			pToplistInfo += len;
		}

		len = pToplistInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestReceiveLadderMatchAward(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseReceiveLadderMatchAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //Grade
	{ //Award
		BYTE* pAward = p;
		Write16(pAward, 0); //len

		Write32(pAward, 0); //Exp
		Write32(pAward, 0); //Money
		Write32(pAward, 0); //SuperMoney
		Write16(pAward, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAward;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write32(pAward, 0); //Coupons
		Write32(pAward, 0); //GuildPoint
		Write32(pAward, 0); //LuckMoney
		Write8(pAward, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAward;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write32(pAward, 0); //SpeedCoin

		len = pAward - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyPlayerLadderMatchAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //SeasonID
	Write8(p, 0); //Grade
	{ //Award
		BYTE* pAward = p;
		Write16(pAward, 0); //len

		Write32(pAward, 0); //Exp
		Write32(pAward, 0); //Money
		Write32(pAward, 0); //SuperMoney
		Write16(pAward, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAward;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write32(pAward, 0); //Coupons
		Write32(pAward, 0); //GuildPoint
		Write32(pAward, 0); //LuckMoney
		Write8(pAward, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAward;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write32(pAward, 0); //SpeedCoin

		len = pAward - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetLadderMatchAwardCfg(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetLadderMatchAwardCfg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	for (size_t i = 0; i < n; i++)
	{ //GradeAward
		BYTE* pGradeAward = p;
		Write16(pGradeAward, 0); //len

		Write32(pGradeAward, 0); //Exp
		Write32(pGradeAward, 0); //Money
		Write32(pGradeAward, 0); //SuperMoney
		Write16(pGradeAward, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pGradeAward;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pGradeAward;
			Set16(pGradeAward, (WORD)len);
			pGradeAward += len;
		}
		Write32(pGradeAward, 0); //Coupons
		Write32(pGradeAward, 0); //GuildPoint
		Write32(pGradeAward, 0); //LuckMoney
		Write8(pGradeAward, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pGradeAward;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pGradeAward;
			Set16(pGradeAward, (WORD)len);
			pGradeAward += len;
		}
		Write32(pGradeAward, 0); //SpeedCoin

		len = pGradeAward - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetLadderMatchAchieveList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetLadderMatchAchieveList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //Result
	Write16(p, 0); //AchieveNum
	for (size_t i = 0; i < n; i++)
	{ //Achieves
		BYTE* pAchieves = p;
		Write16(pAchieves, 0); //len

		Write16(pAchieves, 0); //ID
		Write8(pAchieves, 0); //ShowType
		Write8(pAchieves, 0); //LogicType
		Write8(pAchieves, 0); //Status
		Write16(pAchieves, 0); //Progress
		Write16(pAchieves, 0); //TotalProgress
		Write32(pAchieves, 0); //FinTime
		Write16(pAchieves, 0); //AchieveValue
		Write32(pAchieves, 0); //AchieveFlagType

		len = pAchieves - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //UnLockLadderMatchLogicType

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestQueryLadderMatchAchieveAwardCfg(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseQueryLadderMatchAchieveAwardCfg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //Result
	Write16(p, 0); //AchieveNum
	for (size_t i = 0; i < n; i++)
	{ //AchieveAwardCfg
		BYTE* pAchieveAwardCfg = p;
		Write16(pAchieveAwardCfg, 0); //len

		Write16(pAchieveAwardCfg, 0); //AchieveID
		{ //AwardMoneyExp
			BYTE* pAwardMoneyExp = pAchieveAwardCfg;
			Write16(pAwardMoneyExp, 0); //len

			Write32(pAwardMoneyExp, 0); //Money
			Write32(pAwardMoneyExp, 0); //SuperMoney
			Write32(pAwardMoneyExp, 0); //Exp
			Write32(pAwardMoneyExp, 0); //Charm
			Write32(pAwardMoneyExp, 0); //DanceExp
			Write32(pAwardMoneyExp, 0); //Coupons
			Write32(pAwardMoneyExp, 0); //Admiration
			Write32(pAwardMoneyExp, 0); //LuckMoney
			Write32(pAwardMoneyExp, 0); //TeamWorkExp
			Write32(pAwardMoneyExp, 0); //AchievePoint
			Write32(pAwardMoneyExp, 0); //ConsumeScore
			Write32(pAwardMoneyExp, 0); //HistoryConsumeScore
			Write32(pAwardMoneyExp, 0); //LadderMatchAchievePoint
			Write32(pAwardMoneyExp, 0); //SpeedBean
			Write32(pAwardMoneyExp, 0); //SpeedCoin

			len = pAwardMoneyExp - pAchieveAwardCfg;
			Set16(pAchieveAwardCfg, (WORD)len);
			pAchieveAwardCfg += len;
		}
		Write16(pAchieveAwardCfg, 0); //AwardItemNum
		for (size_t i = 0; i < n; i++)
		{ //AwardItem
			BYTE* pAwardItem = pAchieveAwardCfg;
			Write16(pAwardItem, 0); //len

			Write32(pAwardItem, 0); //ItemID
			Write32(pAwardItem, 0); //ItemNum
			Write32(pAwardItem, 0); //AvailPeriod
			Write8(pAwardItem, 0); //Status
			WriteUn(pAwardItem, 0); //ObtainTime
			Write32(pAwardItem, 0); //OtherAttribute
			Write16(pAwardItem, 0); //ItemType

			len = pAwardItem - pAchieveAwardCfg;
			Set16(pAchieveAwardCfg, (WORD)len);
			pAchieveAwardCfg += len;
		}

		len = pAchieveAwardCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyDeductLadderMatchScore(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //AttachInfoLen

	len = p - buf;
	SendToClient(Client, 13059, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyForbiddenMode(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //LeftTime
	Write16(p, 0); //AttachInfoLen

	len = p - buf;
	SendToClient(Client, 13063, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyForbiddenModeAnti(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //LeftTime
	Write16(p, 0); //AttachInfoLen

	len = p - buf;
	SendToClient(Client, 24757, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyMatchLiveInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	{ //Info
		BYTE* pInfo = p;
		Write16(pInfo, 0); //len

		Write8(pInfo, 0); //Status
		Write16(pInfo, 0); //TipsLen
		Write16(pInfo, 0); //URLLen

		len = pInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 242, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestWishTreeInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void RequestWishTreeWater(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void RequestWishTreeBuyCommodity(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR BuyIdx = Read8(p);
	UCHAR BuyType = Read8(p);
	UINT ItemID = Read32(p);

}

void NotifySGS2CWlActivityStatus(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //TimeNow
	Write32(p, 0); //ActivityID
	Write32(p, 0); //WlActivityType
	Write32(p, 0); //WlActivityStatus

	len = p - buf;
	SendToClient(Client, 13101, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestC2GActivityDetailInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT ClientActivityCfgVersion = Read32(p);

}

void NotifySGS2CWlActivityInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //TimeNow
	Write32(p, 0); //ActivityNum
	for (size_t i = 0; i < n; i++)
	{ //ActivityInfo
		BYTE* pActivityInfo = p;
		Write16(pActivityInfo, 0); //len

		Write32(pActivityInfo, 0); //ActivityID
		Write32(pActivityInfo, 0); //WlactivityType
		Write32(pActivityInfo, 0); //WlActivityStatus
		Write32(pActivityInfo, 0); //WlActivityiTime
		Write32(pActivityInfo, 0); //WlactivityPeriod

		len = pActivityInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //TimeTableWebCfg
		BYTE* pTimeTableWebCfg = p;
		Write16(pTimeTableWebCfg, 0); //len

		Write8(pTimeTableWebCfg, 0); //IsHasWeb
		WriteString(pTimeTableWebCfg, 0); //WebSiteContent[]

		len = pTimeTableWebCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 13102, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void ResponseC2GActivityDetailInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //Result
	Write32(p, 0); //ClientActivityCfgVersion
	Write8(p, 0); //ActivityNum
	for (size_t i = 0; i < n; i++)
	{ //ActivityCfg
		BYTE* pActivityCfg = p;
		Write16(pActivityCfg, 0); //len

		Write32(pActivityCfg, 0); //WlactivityType
		WriteU(pActivityCfg, 0); //WlActNameLen
		WriteU(pActivityCfg, 0); //WlActDescLen
		WriteU(pActivityCfg, 0); //WlActAwardLen
		WriteUn(pActivityCfg, 0); //WlActLabel
		WriteUn(pActivityCfg, 0); //WlActTab
		Write32(pActivityCfg, 0); //WlActivityNpcId

		len = pActivityCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 13103, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyPlayerInActivity(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //ActivityID
	Write32(p, 0); //WlActivityType
	Write32(p, 0); //WlPlayerActStatus

	len = p - buf;
	SendToClient(Client, 13104, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyWL2CHorseLight(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //HorseLightType
	Write32(p, 0); //HorseLightPri
	Write16(p, 0); //ContentLen

	len = p - buf;
	SendToClient(Client, 13105, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyWlLoginTips(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //TipsNum
	for (size_t i = 0; i < n; i++)
	{ //LoginTipsList
		BYTE* pLoginTipsList = p;
		Write16(pLoginTipsList, 0); //len

		Write8(pLoginTipsList, 0); //TipsType
		Write16(pLoginTipsList, 0); //UrlLen
		Write16(pLoginTipsList, 0); //MsgLen

		len = pLoginTipsList - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 995, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestBroadCastWlQTRoom(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseBroadCastWlQTRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteU(p, 0); //ResultID
	Write16(p, 0); //ReasonLen
	Write16(p, 0); //Msg

	len = p - buf;
	SendToClient(Client, 996, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestMatchingGame(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT BaseID = Read16(p);
	USHORT SubID = Read16(p);
	UCHAR MatchingType = Read8(p);

}

void ResponseMatchingGame(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen
	Write16(p, 0); //TimeoutSec
	Write8(p, 0); //MatchingType

	len = p - buf;
	SendToClient(Client, 13110, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestCancelMatchingGame(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseCancelMatchingGame(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 13111, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyPlayerMatchingGameResult(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //RoomID
	Write8(p, 0); //MatchingType

	len = p - buf;
	SendToClient(Client, 13112, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyClientUpdateGuildVipInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	{ //BaseInfo
		BYTE* pBaseInfo = p;
		Write16(pBaseInfo, 0); //len

		Write8(pBaseInfo, 0); //GuildVipLevel
		Write32(pBaseInfo, 0); //GuildVipPoint

		len = pBaseInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //OtherInfo
		BYTE* pOtherInfo = p;
		Write16(pOtherInfo, 0); //len

		Write32(pOtherInfo, 0); //GuildVipLeftDays
		Write8(pOtherInfo, 0); //CanReceiveGift

		len = pOtherInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 12031, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestRandomOneNobleID(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR RandType = Read8(p);

}

void ResponseRandomOneNobleID(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //RandType
	Write32(p, 0); //NobleID
	Write8(p, 0); //CanBroadcast

	len = p - buf;
	SendToClient(Client, 1652, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestDropRandomNobleID(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT NobleID = Read32(p);

}

void RequestReplaceNobleID(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT NobleID = Read32(p);
	UCHAR NeedBroadcast = Read8(p);

}

void ResponseReplaceNobleID(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //NobleID

	len = p - buf;
	SendToClient(Client, 1654, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestRegister(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	char[] NickName[] = ReadString(p);
	bool Gender = Read8(p);
	bool Country = Read8(p);
	int RoleID = Read32(p);
	int HairID = Read32(p);
	int FaceID = Read32(p);
	int CoatID = Read32(p);
	int GloveID = Read32(p);
	int TrousersID = Read32(p);
	int KartID = Read32(p);
	int ColorID = Read32(p);

}

void RequestRegister2(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	char[] NickName[] = ReadString(p);
	bool Gender = Read8(p);
	bool Country = Read8(p);
	int RoleID = Read32(p);
	int HairID = Read32(p);
	int FaceID = Read32(p);
	int CoatID = Read32(p);
	int GloveID = Read32(p);
	int TrousersID = Read32(p);
	int KartID = Read32(p);
	int ColorID = Read32(p);
	bool WriteQQzoneLog = Read8(p);
	int Dummy = Read32(p);

}

void ResponseRegister(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	WriteUn(p, 0); //Uin
	WriteString(p, 0); //NickName[]
	Write8(p, 0); //Gender
	Write8(p, 0); //Country
	Write16(p, 0); //AddItemNum
	for (size_t i = 0; i < n; i++)
	{ //AddItemInfo
		BYTE* pAddItemInfo = p;
		Write16(pAddItemInfo, 0); //len

		Write32(pAddItemInfo, 0); //ItemID
		Write32(pAddItemInfo, 0); //ItemNum
		Write32(pAddItemInfo, 0); //AvailPeriod
		Write8(pAddItemInfo, 0); //Status
		WriteUn(pAddItemInfo, 0); //ObtainTime
		Write32(pAddItemInfo, 0); //OtherAttribute
		Write16(pAddItemInfo, 0); //ItemType

		len = pAddItemInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //AddTaskNum
	for (size_t i = 0; i < n; i++)
	{ //AddTaskInfo
		BYTE* pAddTaskInfo = p;
		Write16(pAddTaskInfo, 0); //len

		Write32(pAddTaskInfo, 0); //TaskID
		Write16(pAddTaskInfo, 0); //OptionID
		Write8(pAddTaskInfo, 0); //Status
		Write8(pAddTaskInfo, 0); //PrevStatus
		Write32(pAddTaskInfo, 0); //ProgressRate
		Write32(pAddTaskInfo, 0); //Other
		Write32(pAddTaskInfo, 0); //TakeTime
		Write32(pAddTaskInfo, 0); //LastUpdateTime

		len = pAddTaskInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 129, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestLogin(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	Un ClientVersion = ReadUn(p);
	char[] QQNickName[] = ReadString(p);
	bool Gender = Read8(p);
	bool IconID = Read8(p);
	Un AttachIdentify = ReadUn(p);
	UINT LoginType = Read32(p);
	UINT LoaderTipVersion = Read32(p);
	UINT ClientStatusContex = Read32(p);
	UCHAR IsSimplifyVersion = Read8(p);
	UINT CurTopMapRecordVersion = Read32(p);
	UINT CurKartRoomPushInfoVersion = Read32(p);
	short PreSvrID = Read16(p);
	UCHAR TGPSignatureLen = Read8(p);
	UINT RandomKey = Read32(p);
	{ //ClientFingerprint
		BYTE* pClientFingerprint = p;
		len = Read16(pClientFingerprint);

		UINT PID = Read32(pClientFingerprint);
		UINT MacAddrHigh = Read32(pClientFingerprint);
		UINT MacAddrLow = Read32(pClientFingerprint);
		UINT CPUID = Read32(pClientFingerprint);
		UINT BiosID = Read32(pClientFingerprint);

		p += len;
	}
	UINT ConnID = Read32(p);
	bool UseTGP = Read8(p);
	USHORT BarPriviSignatureLen = Read16(p);
	int NetBarLev = Read32(p);
	bool Reconnect = Read8(p);
	short LoginBuffLen = Read16(p);
	USHORT ClientKeyLen = Read16(p);
	UINT PlayerFlag = Read32(p);
	UCHAR LoginSrcType = Read8(p);
	UCHAR RequestLoginType = Read8(p);
	USHORT NetBarTokenLen = Read16(p);

}

void ResponseLogin(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //KeyGameDataLength
	WriteUn(p, 0); //Uin
	WriteUn(p, 0); //Identity
	Write16(p, 0); //PlayerID
	Write32(p, 0); //LoginType
	WriteUn(p, 0); //GameSvrdIdentity
	{ //PlayerDBBaseInfo
		BYTE* pPlayerDBBaseInfo = p;
		Write16(pPlayerDBBaseInfo, 0); //len

		WriteString(pPlayerDBBaseInfo, 0); //NickName[]
		Write8(pPlayerDBBaseInfo, 0); //Gender
		Write8(pPlayerDBBaseInfo, 0); //Country
		Write32(pPlayerDBBaseInfo, 0); //License
		WriteUn(pPlayerDBBaseInfo, 0); //Experience
		Write32(pPlayerDBBaseInfo, 0); //SuperMoney
		Write32(pPlayerDBBaseInfo, 0); //Money
		WriteUn(pPlayerDBBaseInfo, 0); //WinNum
		Write32(pPlayerDBBaseInfo, 0); //SecondNum
		Write32(pPlayerDBBaseInfo, 0); //ThirdNum
		WriteUn(pPlayerDBBaseInfo, 0); //TotalNum
		Write32(pPlayerDBBaseInfo, 0); //CurHonor
		Write32(pPlayerDBBaseInfo, 0); //TotalHonor
		Write32(pPlayerDBBaseInfo, 0); //TodayHonor
		Write32(pPlayerDBBaseInfo, 0); //RelaxTime
		Write32(pPlayerDBBaseInfo, 0); //MonthDurationBefore
		Write32(pPlayerDBBaseInfo, 0); //MonthDurationCur
		Write32(pPlayerDBBaseInfo, 0); //Charm
		Write32(pPlayerDBBaseInfo, 0); //DurationGame
		Write32(pPlayerDBBaseInfo, 0); //DanceExp
		Write32(pPlayerDBBaseInfo, 0); //Coupons
		Write32(pPlayerDBBaseInfo, 0); //Admiration
		Write32(pPlayerDBBaseInfo, 0); //LuckMoney
		Write32(pPlayerDBBaseInfo, 0); //TeamWorkExp
		Write32(pPlayerDBBaseInfo, 0); //AchievePoint
		Write32(pPlayerDBBaseInfo, 0); //RegTime
		WriteString(pPlayerDBBaseInfo, 0); //Signature[]
		Write32(pPlayerDBBaseInfo, 0); //LuckyMatchPoint
		Write32(pPlayerDBBaseInfo, 0); //LuckyMatchNum
		Write16(pPlayerDBBaseInfo, 0); //LuckyMatchFirstNum
		Write8(pPlayerDBBaseInfo, 0); //LuckyMatchBestRand
		Write32(pPlayerDBBaseInfo, 0); //LuckyMatchWinNum
		Write32(pPlayerDBBaseInfo, 0); //FizzPointTotal
		Write16(pPlayerDBBaseInfo, 0); //FizzPointDaily
		Write16(pPlayerDBBaseInfo, 0); //FizzPointWeekly
		Write16(pPlayerDBBaseInfo, 0); //FizzPointLastWeek
		Write8(pPlayerDBBaseInfo, 0); //FizzLotteryStatus
		Write32(pPlayerDBBaseInfo, 0); //FizzLastUpdateTime
		Write32(pPlayerDBBaseInfo, 0); //SNSLocaleCode
		Write32(pPlayerDBBaseInfo, 0); //AuctionRightUnlockTime
		Write8(pPlayerDBBaseInfo, 0); //ReserveFlag
		Write32(pPlayerDBBaseInfo, 0); //CurConsumeScore
		Write32(pPlayerDBBaseInfo, 0); //HistoryConsumeScore
		Write8(pPlayerDBBaseInfo, 0); //CrashModeSponsorID
		Write32(pPlayerDBBaseInfo, 0); //Popularity
		Write32(pPlayerDBBaseInfo, 0); //LadderMatchAchievePoint
		Write32(pPlayerDBBaseInfo, 0); //Cash
		Write32(pPlayerDBBaseInfo, 0); //PlayerGPMIdentity
		Write32(pPlayerDBBaseInfo, 0); //PointTotalScore
		WriteUn(pPlayerDBBaseInfo, 0); //totalMapMedalNum
		WriteUn(pPlayerDBBaseInfo, 0); //lastMapMedalNum
		WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalNum
		WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalSeasonId
		WriteUn(pPlayerDBBaseInfo, 0); //lastClearMapMedalTime
		WriteUn(pPlayerDBBaseInfo, 0); //max2048Score
		WriteUn(pPlayerDBBaseInfo, 0); //curPlay2048LeftNum
		Write32(pPlayerDBBaseInfo, 0); //CheerValue
		Write16(pPlayerDBBaseInfo, 0); //SeasonID
		Write32(pPlayerDBBaseInfo, 0); //LastCheerValue
		Write32(pPlayerDBBaseInfo, 0); //SpeedBean
		Write32(pPlayerDBBaseInfo, 0); //SpeedCoin

		len = pPlayerDBBaseInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //ItemNum
	for (size_t i = 0; i < n; i++)
	{ //PlayerDBItemInfo
		BYTE* pPlayerDBItemInfo = p;
		Write16(pPlayerDBItemInfo, 0); //len

		Write32(pPlayerDBItemInfo, 0); //ItemID
		Write32(pPlayerDBItemInfo, 0); //ItemNum
		Write32(pPlayerDBItemInfo, 0); //AvailPeriod
		Write8(pPlayerDBItemInfo, 0); //Status
		WriteUn(pPlayerDBItemInfo, 0); //ObtainTime
		Write32(pPlayerDBItemInfo, 0); //OtherAttribute
		Write16(pPlayerDBItemInfo, 0); //ItemType

		len = pPlayerDBItemInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //TaskNum
	for (size_t i = 0; i < n; i++)
	{ //PlayerDBTaskInfo
		BYTE* pPlayerDBTaskInfo = p;
		Write16(pPlayerDBTaskInfo, 0); //len

		Write32(pPlayerDBTaskInfo, 0); //TaskID
		Write16(pPlayerDBTaskInfo, 0); //OptionID
		Write8(pPlayerDBTaskInfo, 0); //Status
		Write8(pPlayerDBTaskInfo, 0); //PrevStatus
		Write32(pPlayerDBTaskInfo, 0); //ProgressRate
		Write32(pPlayerDBTaskInfo, 0); //Other
		Write32(pPlayerDBTaskInfo, 0); //TakeTime
		Write32(pPlayerDBTaskInfo, 0); //LastUpdateTime

		len = pPlayerDBTaskInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //RecomCountry
	WriteUn(p, 0); //ServerTime
	Write8(p, 0); //ReasonLen
	{ //PlayerRelationInfo
		BYTE* pPlayerRelationInfo = p;
		Write16(pPlayerRelationInfo, 0); //len

		Write32(pPlayerRelationInfo, 0); //SrcUin
		Write32(pPlayerRelationInfo, 0); //RelationFlag
		Write32(pPlayerRelationInfo, 0); //RelationUin
		WriteString(pPlayerRelationInfo, 0); //RelationNickName[]
		Write32(pPlayerRelationInfo, 0); //EngageTime
		Write32(pPlayerRelationInfo, 0); //NextCanBookingTimeLimit
		Write32(pPlayerRelationInfo, 0); //BeginHoneyMoonTime
		Write32(pPlayerRelationInfo, 0); //EndHoneyMoonTime
		Write8(pPlayerRelationInfo, 0); //EngageFlag

		len = pPlayerRelationInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //MapNum
	for (size_t i = 0; i < n; i++)
	{ //Record
		BYTE* pRecord = p;
		Write16(pRecord, 0); //len

		Write32(pRecord, 0); //MapID
		Write32(pRecord, 0); //Record
		Write32(pRecord, 0); //LastUpdateTime

		len = pRecord - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //PetNum
	for (size_t i = 0; i < n; i++)
	{ //PetInfo
		BYTE* pPetInfo = p;
		Write16(pPetInfo, 0); //len

		Write32(pPetInfo, 0); //Uin
		Write32(pPetInfo, 0); //PetId
		WriteString(pPetInfo, 0); //PetName[]
		Write8(pPetInfo, 0); //IsProper
		Write16(pPetInfo, 0); //LevelLimit
		Write16(pPetInfo, 0); //Level
		Write32(pPetInfo, 0); //CurLevelExp
		Write32(pPetInfo, 0); //CurLevelMaxExp
		Write8(pPetInfo, 0); //Status
		Write16(pPetInfo, 0); //PL
		Write16(pPetInfo, 0); //TotalPL
		Write16(pPetInfo, 0); //PetSkillNum
		for (size_t i = 0; i < n; i++)
		{ //PetSkillList
			BYTE* pPetSkillList = pPetInfo;
			Write16(pPetSkillList, 0); //len

			Write16(pPetSkillList, 0); //SkillID
			Write8(pPetSkillList, 0); //Status
			Write8(pPetSkillList, 0); //Active
			Write32(pPetSkillList, 0); //Value

			len = pPetSkillList - pPetInfo;
			Set16(pPetInfo, (WORD)len);
			pPetInfo += len;
		}
		Write32(pPetInfo, 0); //StrengLevel
		Write8(pPetInfo, 0); //TopStatus
		{ //CommonInfo
			BYTE* pCommonInfo = pPetInfo;
			Write16(pCommonInfo, 0); //len

			Write32(pCommonInfo, 0); //HuanHuaLevel
			Write8(pCommonInfo, 0); //CanHuanHua

			len = pCommonInfo - pPetInfo;
			Set16(pPetInfo, (WORD)len);
			pPetInfo += len;
		}

		len = pPetInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //IsInTopList
	Write32(p, 0); //LastLoginTime
	Write32(p, 0); //MasterPoint
	Write8(p, 0); //LoginRealNameFlag
	Write8(p, 0); //ExRightFlag[]
	Write8(p, 0); //OverdueItemNum
	for (size_t i = 0; i < n; i++)
	{ //OverdueItem
		BYTE* pOverdueItem = p;
		Write16(pOverdueItem, 0); //len

		Write32(pOverdueItem, 0); //ItemID
		Write32(pOverdueItem, 0); //OverdueTime
		Write32(pOverdueItem, 0); //OtherAttr

		len = pOverdueItem - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //StoneKartNum
	for (size_t i = 0; i < n; i++)
	{ //KartStoneGrooveInfo
		BYTE* pKartStoneGrooveInfo = p;
		Write16(pKartStoneGrooveInfo, 0); //len

		Write32(pKartStoneGrooveInfo, 0); //KartID
		Write32(pKartStoneGrooveInfo, 0); //StoneGrooveNum
		for (size_t i = 0; i < n; i++)
		{ //StoneGrooveInfo
			BYTE* pStoneGrooveInfo = pKartStoneGrooveInfo;
			Write16(pStoneGrooveInfo, 0); //len

			Write32(pStoneGrooveInfo, 0); //StoneUseOccaType
			Write32(pStoneGrooveInfo, 0); //SkillStoneID

			len = pStoneGrooveInfo - pKartStoneGrooveInfo;
			Set16(pKartStoneGrooveInfo, (WORD)len);
			pKartStoneGrooveInfo += len;
		}

		len = pKartStoneGrooveInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //LockedMapID
	Write32(p, 0); //TotalGuildProsperity
	Write32(p, 0); //ClientStatusContex
	Write8(p, 0); //IsHoneyMoon
	Write8(p, 0); //HasMoreInfo
	Write16(p, 0); //CurSvrID
	{ //NobleInfo
		BYTE* pNobleInfo = p;
		Write16(pNobleInfo, 0); //len

		Write32(pNobleInfo, 0); //NobleID
		Write8(pNobleInfo, 0); //NobleLevel
		Write32(pNobleInfo, 0); //NoblePoint
		Write32(pNobleInfo, 0); //NobleLeftDays

		len = pNobleInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //ExtendItemNum
	Write8(p, 0); //UpdateOnlineInfoInterval
	{ //GuildVipBaseInfo
		BYTE* pGuildVipBaseInfo = p;
		Write16(pGuildVipBaseInfo, 0); //len

		Write8(pGuildVipBaseInfo, 0); //GuildVipLevel
		Write32(pGuildVipBaseInfo, 0); //GuildVipPoint

		len = pGuildVipBaseInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //GuildVipOtherInfo
		BYTE* pGuildVipOtherInfo = p;
		Write16(pGuildVipOtherInfo, 0); //len

		Write32(pGuildVipOtherInfo, 0); //GuildVipLeftDays
		Write8(pGuildVipOtherInfo, 0); //CanReceiveGift

		len = pGuildVipOtherInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasLDMInfo
	for (size_t i = 0; i < n; i++)
	{ //PlayerLDMBaseInfo
		BYTE* pPlayerLDMBaseInfo = p;
		Write16(pPlayerLDMBaseInfo, 0); //len

		Write8(pPlayerLDMBaseInfo, 0); //Grade
		Write32(pPlayerLDMBaseInfo, 0); //Score
		Write32(pPlayerLDMBaseInfo, 0); //MaxScore
		Write32(pPlayerLDMBaseInfo, 0); //MaxGrade

		len = pPlayerLDMBaseInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //ForbiddenModeFreeTime
	Write32(p, 0); //ForbiddenModeBitSet
	{ //LoverVipBaseInfo
		BYTE* pLoverVipBaseInfo = p;
		Write16(pLoverVipBaseInfo, 0); //len

		Write8(pLoverVipBaseInfo, 0); //LoverVipLevel
		Write32(pLoverVipBaseInfo, 0); //LoverVipPoint
		Write8(pLoverVipBaseInfo, 0); //GrowRate

		len = pLoverVipBaseInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //LoverVipOtherInfo
		BYTE* pLoverVipOtherInfo = p;
		Write16(pLoverVipOtherInfo, 0); //len

		Write32(pLoverVipOtherInfo, 0); //LoverVipLeftDays
		Write8(pLoverVipOtherInfo, 0); //CanReceiveGift
		Write8(pLoverVipOtherInfo, 0); //ShowExpireTips

		len = pLoverVipOtherInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //SkateTaskLevel
	Write32(p, 0); //SkateCoin
	Write8(p, 0); //SkateExpSkillLevel
	Write16(p, 0); //SkateCoinCountDaily
	Write32(p, 0); //SkateCoinHistoryTotal
	Write32(p, 0); //MaxDayPveScore
	Write32(p, 0); //MaxHistoryPveScore
	Write32(p, 0); //LoveValue
	Write8(p, 0); //HasCheerAddition
	for (size_t i = 0; i < n; i++)
	{ //CheerAdditon
		BYTE* pCheerAdditon = p;
		Write16(pCheerAdditon, 0); //len

		Write16(pCheerAdditon, 0); //ExpAddition
		Write16(pCheerAdditon, 0); //WageAddition

		len = pCheerAdditon - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //PersonalGardenBaseInfo
		BYTE* pPersonalGardenBaseInfo = p;
		Write16(pPersonalGardenBaseInfo, 0); //len

		Write8(pPersonalGardenBaseInfo, 0); //GardenLevel
		Write32(pPersonalGardenBaseInfo, 0); //GardenPoint
		Write8(pPersonalGardenBaseInfo, 0); //GrowRate
		Write32(pPersonalGardenBaseInfo, 0); //GardenExpireTime
		{ //SimpleInfo
			BYTE* pSimpleInfo = pPersonalGardenBaseInfo;
			Write16(pSimpleInfo, 0); //len

			Write32(pSimpleInfo, 0); //WeekPopularity
			Write32(pSimpleInfo, 0); //TotalPopularity
			Write32(pSimpleInfo, 0); //LastUpdatePopularityTime
			Write8(pSimpleInfo, 0); //PrivateType

			len = pSimpleInfo - pPersonalGardenBaseInfo;
			Set16(pPersonalGardenBaseInfo, (WORD)len);
			pPersonalGardenBaseInfo += len;
		}

		len = pPersonalGardenBaseInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //ConsumeVipInfo
		BYTE* pConsumeVipInfo = p;
		Write16(pConsumeVipInfo, 0); //len

		WriteUn(pConsumeVipInfo, 0); //VipLevel
		WriteUn(pConsumeVipInfo, 0); //CharmValueOfMonth
		WriteUn(pConsumeVipInfo, 0); //SearchTreasureNums
		WriteUn(pConsumeVipInfo, 0); //GetTreasureNums

		len = pConsumeVipInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //EmperorInfo
		BYTE* pEmperorInfo = p;
		Write16(pEmperorInfo, 0); //len

		Write8(pEmperorInfo, 0); //EmperorLevel
		Write32(pEmperorInfo, 0); //EmperorPoint
		Write32(pEmperorInfo, 0); //EmperorLeftDays
		Write8(pEmperorInfo, 0); //EmperorGrowRate

		len = pEmperorInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //EmperorOtherInfo
		BYTE* pEmperorOtherInfo = p;
		Write16(pEmperorOtherInfo, 0); //len

		Write32(pEmperorOtherInfo, 0); //ExpiredTime
		Write8(pEmperorOtherInfo, 0); //ShowExpireTips

		len = pEmperorOtherInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //ShuttleScoreWeek
	{ //ActivityInfo
		BYTE* pActivityInfo = p;
		Write16(pActivityInfo, 0); //len

		Write32(pActivityInfo, 0); //TotalActivity
		Write32(pActivityInfo, 0); //ActivityLevel

		len = pActivityInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //GansterScoreInfo
		BYTE* pGansterScoreInfo = p;
		Write16(pGansterScoreInfo, 0); //len

		Write32(pGansterScoreInfo, 0); //GansterSeasonID
		Write32(pGansterScoreInfo, 0); //GansterScore
		Write32(pGansterScoreInfo, 0); //PoliceScore
		Write32(pGansterScoreInfo, 0); //TotalGansterScore

		len = pGansterScoreInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //OlympicId
	Write32(p, 0); //NPCEliminateWinTimes
	{ //BorderInfo
		BYTE* pBorderInfo = p;
		Write16(pBorderInfo, 0); //len

		Write32(pBorderInfo, 0); //SeasonID
		Write32(pBorderInfo, 0); //Zhanxun
		Write32(pBorderInfo, 0); //SeasonZhanxun

		len = pBorderInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //ReduceReturnRate
	Write32(p, 0); //ReduceReturnAvailPeriod
	Write8(p, 0); //SpecialActivityStatus
	Write32(p, 0); //ThemeHouseDressDegreeValue
	WriteUn(p, 0); //c3DRoomEnabled
	WriteUn(p, 0); //c3DRoomEnabled_OB
	Write8(p, 0); //BuyZizuanPopupOpen
	Write32(p, 0); //BuyZizuanPopupLimit
	Write8(p, 0); //EnableReconnectOpt
	Write8(p, 0); //HasRankedMatchInfo
	for (size_t i = 0; i < n; i++)
	{ //RankedMatchGradeInfo
		BYTE* pRankedMatchGradeInfo = p;
		Write16(pRankedMatchGradeInfo, 0); //len

		Write32(pRankedMatchGradeInfo, 0); //GradeLevel
		Write32(pRankedMatchGradeInfo, 0); //ChildLevel
		Write32(pRankedMatchGradeInfo, 0); //GradeScore
		Write32(pRankedMatchGradeInfo, 0); //MaxGradeScore
		Write32(pRankedMatchGradeInfo, 0); //TotalScore

		len = pRankedMatchGradeInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasHuanLingChangeInfo
	for (size_t i = 0; i < n; i++)
	{ //HuanLingSuitInfo
		BYTE* pHuanLingSuitInfo = p;
		Write16(pHuanLingSuitInfo, 0); //len

		Write32(pHuanLingSuitInfo, 0); //SuitID
		Write8(pHuanLingSuitInfo, 0); //ChangeLevel

		len = pHuanLingSuitInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //EquipSealType
	Write8(p, 0); //CreditStarFlag
	Write8(p, 0); //PersonalPanelSelectRankedMatchFrameTag
	Write8(p, 0); //VersionURLLen
	Write8(p, 0); //PrivacyURLLen
	Write8(p, 0); //PersonalRankedMatchLevelShowTag
	Write16(p, 0); //LeftDeletingRoleDays
	Write8(p, 0); //OnlyRspEquippedItem
	Write32(p, 0); //LoginSwitchFlag1
	Write16(p, 0); //LeftUploadPLogNum

	len = p - buf;
	SendToClient(Client, 82, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetPlayerItem(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetPlayerItem(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ItemNum
	for (size_t i = 0; i < n; i++)
	{ //PlayerDBItemInfo
		BYTE* pPlayerDBItemInfo = p;
		Write16(pPlayerDBItemInfo, 0); //len

		Write32(pPlayerDBItemInfo, 0); //ItemID
		Write32(pPlayerDBItemInfo, 0); //ItemNum
		Write32(pPlayerDBItemInfo, 0); //AvailPeriod
		Write8(pPlayerDBItemInfo, 0); //Status
		WriteUn(pPlayerDBItemInfo, 0); //ObtainTime
		Write32(pPlayerDBItemInfo, 0); //OtherAttribute
		Write16(pPlayerDBItemInfo, 0); //ItemType

		len = pPlayerDBItemInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasMoreInfo
	Write16(p, 0); //TotalItemNum

	len = p - buf;
	SendToClient(Client, 437, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyLoginMoreItemInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ItemNum
	for (size_t i = 0; i < n; i++)
	{ //PlayerDBItemInfo
		BYTE* pPlayerDBItemInfo = p;
		Write16(pPlayerDBItemInfo, 0); //len

		Write32(pPlayerDBItemInfo, 0); //ItemID
		Write32(pPlayerDBItemInfo, 0); //ItemNum
		Write32(pPlayerDBItemInfo, 0); //AvailPeriod
		Write8(pPlayerDBItemInfo, 0); //Status
		WriteUn(pPlayerDBItemInfo, 0); //ObtainTime
		Write32(pPlayerDBItemInfo, 0); //OtherAttribute
		Write16(pPlayerDBItemInfo, 0); //ItemType

		len = pPlayerDBItemInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasNext

	len = p - buf;
	SendToClient(Client, 438, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetLoginNotifyMsg(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR MsgNum = Read8(p);
	for (size_t i = 0; i < n; i++)
	{ //MsgInfo
		BYTE* pMsgInfo = p;
		len = Read16(pMsgInfo);

		USHORT MsgType = Read16(pMsgInfo);
		UINT MdyTime = Read32(pMsgInfo);

		p += len;
	}

}

void ResponseGetLoginNotifyMsg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write8(p, 0); //MsgNum
	for (size_t i = 0; i < n; i++)
	{ //MsgInfo
		BYTE* pMsgInfo = p;
		Write16(pMsgInfo, 0); //len

		Write16(pMsgInfo, 0); //MsgType
		Write32(pMsgInfo, 0); //MdyTime

		len = pMsgInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 439, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestReportConnectLog(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT LogNum = Read16(p);
	for (size_t i = 0; i < n; i++)
	{ //Log
		BYTE* pLog = p;
		len = Read16(pLog);

		UINT ConnID = Read32(pLog);
		UINT EventSeq = Read32(pLog);
		UINT TimeSec = Read32(pLog);
		UINT TimeUSec = Read32(pLog);
		UCHAR EventID = Read8(pLog);
		UCHAR ParaNum = Read8(pLog);
		UINT EventPara[] = Read32(pLog);
		UCHAR AreaID = Read8(pLog);

		p += len;
	}

}

void ResponseReportConnectLog(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //ConnID
	Write32(p, 0); //EventSeq

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyReportConnectLog(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //ReportFlag

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyMaxItemNumExtended(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ExtendItemNum
	Write8(p, 0); //ExtendType

	len = p - buf;
	SendToClient(Client, 11475, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyLoginMoreInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ItemNum
	for (size_t i = 0; i < n; i++)
	{ //PlayerDBItemInfo
		BYTE* pPlayerDBItemInfo = p;
		Write16(pPlayerDBItemInfo, 0); //len

		Write32(pPlayerDBItemInfo, 0); //ItemID
		Write32(pPlayerDBItemInfo, 0); //ItemNum
		Write32(pPlayerDBItemInfo, 0); //AvailPeriod
		Write8(pPlayerDBItemInfo, 0); //Status
		WriteUn(pPlayerDBItemInfo, 0); //ObtainTime
		Write32(pPlayerDBItemInfo, 0); //OtherAttribute
		Write16(pPlayerDBItemInfo, 0); //ItemType

		len = pPlayerDBItemInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //TaskNum
	for (size_t i = 0; i < n; i++)
	{ //PlayerDBTaskInfo
		BYTE* pPlayerDBTaskInfo = p;
		Write16(pPlayerDBTaskInfo, 0); //len

		Write32(pPlayerDBTaskInfo, 0); //TaskID
		Write16(pPlayerDBTaskInfo, 0); //OptionID
		Write8(pPlayerDBTaskInfo, 0); //Status
		Write8(pPlayerDBTaskInfo, 0); //PrevStatus
		Write32(pPlayerDBTaskInfo, 0); //ProgressRate
		Write32(pPlayerDBTaskInfo, 0); //Other
		Write32(pPlayerDBTaskInfo, 0); //TakeTime
		Write32(pPlayerDBTaskInfo, 0); //LastUpdateTime

		len = pPlayerDBTaskInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //PetNum
	for (size_t i = 0; i < n; i++)
	{ //PetInfo
		BYTE* pPetInfo = p;
		Write16(pPetInfo, 0); //len

		Write32(pPetInfo, 0); //Uin
		Write32(pPetInfo, 0); //PetId
		WriteString(pPetInfo, 0); //PetName[]
		Write8(pPetInfo, 0); //IsProper
		Write16(pPetInfo, 0); //LevelLimit
		Write16(pPetInfo, 0); //Level
		Write32(pPetInfo, 0); //CurLevelExp
		Write32(pPetInfo, 0); //CurLevelMaxExp
		Write8(pPetInfo, 0); //Status
		Write16(pPetInfo, 0); //PL
		Write16(pPetInfo, 0); //TotalPL
		Write16(pPetInfo, 0); //PetSkillNum
		for (size_t i = 0; i < n; i++)
		{ //PetSkillList
			BYTE* pPetSkillList = pPetInfo;
			Write16(pPetSkillList, 0); //len

			Write16(pPetSkillList, 0); //SkillID
			Write8(pPetSkillList, 0); //Status
			Write8(pPetSkillList, 0); //Active
			Write32(pPetSkillList, 0); //Value

			len = pPetSkillList - pPetInfo;
			Set16(pPetInfo, (WORD)len);
			pPetInfo += len;
		}
		Write32(pPetInfo, 0); //StrengLevel
		Write8(pPetInfo, 0); //TopStatus
		{ //CommonInfo
			BYTE* pCommonInfo = pPetInfo;
			Write16(pCommonInfo, 0); //len

			Write32(pCommonInfo, 0); //HuanHuaLevel
			Write8(pCommonInfo, 0); //CanHuanHua

			len = pCommonInfo - pPetInfo;
			Set16(pPetInfo, (WORD)len);
			pPetInfo += len;
		}

		len = pPetInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //MapNum
	for (size_t i = 0; i < n; i++)
	{ //Record
		BYTE* pRecord = p;
		Write16(pRecord, 0); //len

		Write32(pRecord, 0); //MapID
		Write32(pRecord, 0); //Record
		Write32(pRecord, 0); //LastUpdateTime

		len = pRecord - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //OverdueItemNum
	for (size_t i = 0; i < n; i++)
	{ //OverdueItem
		BYTE* pOverdueItem = p;
		Write16(pOverdueItem, 0); //len

		Write32(pOverdueItem, 0); //ItemID
		Write32(pOverdueItem, 0); //OverdueTime
		Write32(pOverdueItem, 0); //OtherAttr

		len = pOverdueItem - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //StoneKartNum
	for (size_t i = 0; i < n; i++)
	{ //KartStoneGrooveInfo
		BYTE* pKartStoneGrooveInfo = p;
		Write16(pKartStoneGrooveInfo, 0); //len

		Write32(pKartStoneGrooveInfo, 0); //KartID
		Write32(pKartStoneGrooveInfo, 0); //StoneGrooveNum
		for (size_t i = 0; i < n; i++)
		{ //StoneGrooveInfo
			BYTE* pStoneGrooveInfo = pKartStoneGrooveInfo;
			Write16(pStoneGrooveInfo, 0); //len

			Write32(pStoneGrooveInfo, 0); //StoneUseOccaType
			Write32(pStoneGrooveInfo, 0); //SkillStoneID

			len = pStoneGrooveInfo - pKartStoneGrooveInfo;
			Set16(pKartStoneGrooveInfo, (WORD)len);
			pKartStoneGrooveInfo += len;
		}

		len = pKartStoneGrooveInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasNext

	len = p - buf;
	SendToClient(Client, 223, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestLogout(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	UINT LogOutFlag = Read32(p);
	int ServerKickReason = Read32(p);

}

void ResponseLogout(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 101, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetRoomList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	short StartRoomIdx = Read16(p);
	short GetRoomNum = Read16(p);
	short BaseGameMode = Read16(p);
	short SubGameMode = Read16(p);
	bool FBLev = Read8(p);
	bool FBSeason = Read8(p);
	bool RoomFlag = Read8(p);

}

void NotifyClientUpdateGuildScoreInRoomInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //GuildScoreInNextGame
	Write16(p, 0); //GuildScoreAlreadyAward
	Write16(p, 0); //GuildScoreTotalAward

	len = p - buf;
	SendToClient(Client, 12033, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void ResponseGetRoomList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //CurTotalRoomNum
	Write16(p, 0); //StartIdx
	Write16(p, 0); //RoomNum
	for (size_t i = 0; i < n; i++)
	{ //Rooms
		BYTE* pRooms = p;
		Write16(pRooms, 0); //len

		Write16(pRooms, 0); //RoomID
		Write16(pRooms, 0); //BaseGameMode
		Write16(pRooms, 0); //SubGameMode
		Write8(pRooms, 0); //CurrentPlayerNum
		Write8(pRooms, 0); //TotalSeatNum
		Write8(pRooms, 0); //Status
		Write32(pRooms, 0); //MapID
		Write8(pRooms, 0); //Flag
		WriteString(pRooms, 0); //RoomName[]
		Write8(pRooms, 0); //HasFBInfo
		for (size_t i = 0; i < n; i++)
		{ //FBInfo
			BYTE* pFBInfo = pRooms;
			Write16(pFBInfo, 0); //len

			Write8(pFBInfo, 0); //AvailableLev
			Write8(pFBInfo, 0); //Lev
			Write8(pFBInfo, 0); //SubLev
			Write32(pFBInfo, 0); //BossID
			Write8(pFBInfo, 0); //FBSeason

			len = pFBInfo - pRooms;
			Set16(pRooms, (WORD)len);
			pRooms += len;
		}
		Write8(pRooms, 0); //SpeFlag
		Write32(pRooms, 0); //RoomNo
		Write16(pRooms, 0); //SvrId
		Write16(pRooms, 0); //SceneID
		Write8(pRooms, 0); //CurrentOBNum
		Write8(pRooms, 0); //TotalOBNum
		Write8(pRooms, 0); //SpecialActivityStatus
		Write8(pRooms, 0); //AllowAutoStart
		Write32(pRooms, 0); //Gender
		Write32(pRooms, 0); //LocaleCode
		Write8(pRooms, 0); //TalkRoomBGID
		Write8(pRooms, 0); //SpecialActivityIDNum
		Write8(pRooms, 0); //SpecialActivityInfoNum
		for (size_t i = 0; i < n; i++)
		{ //SpecialActivityInfo
			BYTE* pSpecialActivityInfo = pRooms;
			Write16(pSpecialActivityInfo, 0); //len

			Write8(pSpecialActivityInfo, 0); //ProfessionLicenseInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ProfessionLicenseInfo
				BYTE* pProfessionLicenseInfo = pSpecialActivityInfo;
				Write16(pProfessionLicenseInfo, 0); //len

				Write8(pProfessionLicenseInfo, 0); //BigLevel
				Write8(pProfessionLicenseInfo, 0); //SmallLevel

				len = pProfessionLicenseInfo - pSpecialActivityInfo;
				Set16(pSpecialActivityInfo, (WORD)len);
				pSpecialActivityInfo += len;
			}

			len = pSpecialActivityInfo - pRooms;
			Set16(pRooms, (WORD)len);
			pRooms += len;
		}
		Write8(pRooms, 0); //ValueNum
		Write32(pRooms, 0); //EnterRoomValue[]
		Write8(pRooms, 0); //ParaNum
		Write32(pRooms, 0); //ParaList[]
		Write32(pRooms, 0); //GSvrRoomNo
		WriteString(pRooms, 0); //OwnerName[]

		len = pRooms - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen
	Write16(p, 0); //BaseGameMode
	Write16(p, 0); //SubGameMode
	Write8(p, 0); //FBAvailableLev
	Write8(p, 0); //FBLev
	Write8(p, 0); //FBSeason
	Write16(p, 0); //ChannelStatus
	Write8(p, 0); //RoomFlag

	len = p - buf;
	SendToClient(Client, 102, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestAddToTeamMatchQueue(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT MatchQueueType = Read16(p);
	UINT Para1 = Read32(p);
	UCHAR IsAllArea = Read8(p);

}

void ResponsetAddToTeamMatchQueue(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultId
	Write8(p, 0); //ReasonLen
	Write16(p, 0); //MatchQueueType
	Write8(p, 0); //IsAllArea

	len = p - buf;
	SendToClient(Client, 20210, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestCancelTeamMatchQueue(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT MatchQueueType = Read16(p);
	UCHAR IsAllArea = Read8(p);

}

void ResponseCancelTeamMatchQueue(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //Time
	Write16(p, 0); //MatchQueueType
	Write16(p, 0); //ResultId
	Write8(p, 0); //ReasonLen
	Write8(p, 0); //IsAllArea

	len = p - buf;
	SendToClient(Client, 20211, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyCancelTeamMatchQueue(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //RoomID
	Write16(p, 0); //MatchQueueType
	Write32(p, 0); //OwenerUin

	len = p - buf;
	SendToClient(Client, 20212, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyAddToTeamMatchQueue(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //RoomID
	Write16(p, 0); //MatchQueueType
	Write32(p, 0); //OwenerUin

	len = p - buf;
	SendToClient(Client, 20213, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestChangeTeamMatchMode(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR NewMode = Read8(p);

}

void ResponseChangeTeamMatchMode(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultId
	Write8(p, 0); //ReasonLen
	Write8(p, 0); //NewMode

	len = p - buf;
	SendToClient(Client, 20214, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestCreateRoom(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	short BaseGameMode = Read16(p);
	short SubGameMode = Read16(p);
	bool Flag = Read8(p);
	char[] RoomName[] = ReadString(p);
	bool SeatNum = Read8(p);
	char[] Password[] = ReadString(p);
	bool IsNewerOpen = Read8(p);
	bool FBSeason = Read8(p);
	UCHAR Contex = Read8(p);
	bool FBLev = Read8(p);
	UCHAR SpeFlag = Read8(p);
	UCHAR MoreInfoNum = Read8(p);
	for (size_t i = 0; i < n; i++)
	{ //MoreInfos
		BYTE* pMoreInfos = p;
		len = Read16(pMoreInfos);

		int TaskID = Read32(pMoreInfos);

		p += len;
	}
	short CreateRoomType = Read16(p);
	short ServerMatchType = Read16(p);
	short TeamMatchType = Read16(p);
	UCHAR ChatRoomType = Read8(p);
	short SceneID = Read16(p);
	UCHAR PresetOBNum = Read8(p);
	UCHAR AllowAutoStart = Read8(p);
	UCHAR TalkRoomBGID = Read8(p);
	UCHAR ValueNum = Read8(p);
	int[] EnterRoomValue[] = Read32(p);

}

void ResponseCreateRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //RoomID
	Write16(p, 0); //BaseGameMode
	Write16(p, 0); //SubGameMode
	Write8(p, 0); //Flag
	WriteString(p, 0); //RoomName[]
	Write8(p, 0); //SeatNum
	Write8(p, 0); //SeatID
	Write8(p, 0); //TeamID
	Write8(p, 0); //ReasonLen
	Write8(p, 0); //LoverRaceOrPro
	Write32(p, 0); //MapID
	Write8(p, 0); //DebutOrX5
	WriteUn(p, 0); //ServerTime
	Write32(p, 0); //PreKnowMapID
	Write32(p, 0); //PreKnownMusicID
	Write8(p, 0); //HasFBInfo
	for (size_t i = 0; i < n; i++)
	{ //FBInfo
		BYTE* pFBInfo = p;
		Write16(pFBInfo, 0); //len

		Write8(pFBInfo, 0); //AvailableLev
		Write8(pFBInfo, 0); //Lev
		Write8(pFBInfo, 0); //SubLev
		Write32(pFBInfo, 0); //BossID
		Write8(pFBInfo, 0); //FBSeason

		len = pFBInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //GuildScoreInNextGame
	Write8(p, 0); //Contex
	Write16(p, 0); //GuildScoreAlreadyAward
	Write16(p, 0); //GuildScoreTotalAward
	Write8(p, 0); //SpeFlag
	Write32(p, 0); //RoomNo
	Write8(p, 0); //MoreInfoNum
	for (size_t i = 0; i < n; i++)
	{ //MoreInfos
		BYTE* pMoreInfos = p;
		Write16(pMoreInfos, 0); //len

		Write32(pMoreInfos, 0); //TaskID

		len = pMoreInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //RaceCardNums
	for (size_t i = 0; i < n; i++)
	{ //RaceCardAddValueInfo
		BYTE* pRaceCardAddValueInfo = p;
		Write16(pRaceCardAddValueInfo, 0); //len

		Write32(pRaceCardAddValueInfo, 0); //RaceCardID
		Write32(pRaceCardAddValueInfo, 0); //AddValue

		len = pRaceCardAddValueInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //CreateRoomType
	Write16(p, 0); //ServerMatchType
	Write16(p, 0); //TeamMatchType
	Write8(p, 0); //ChatRoomType
	Write16(p, 0); //SceneID
	Write8(p, 0); //PresetOBNum
	Write8(p, 0); //AllowAutoStart
	Write8(p, 0); //TalkRoomBGID
	Write16(p, 0); //Role
	Write8(p, 0); //ParaNum
	Write32(p, 0); //ParaList[]
	Write8(p, 0); //ValueNum
	Write32(p, 0); //EnterRoomValue[]
	Write32(p, 0); //PlayerEquipKartID
	Write32(p, 0); //RankedMatchTestDriveKartID
	Write8(p, 0); //GVoiceRoomNameLen
	Write8(p, 0); //GVoiceReasonLen
	Write8(p, 0); //TDCExcluItemNum
	Write32(p, 0); //TDCExclusiveItemID[]
	Write8(p, 0); //TestKartGameType
	Write32(p, 0); //GameTestKartID
	Write8(p, 0); //HasStarsFightingInfo
	for (size_t i = 0; i < n; i++)
	{ //StarsFightingInfo
		BYTE* pStarsFightingInfo = p;
		Write16(pStarsFightingInfo, 0); //len

		Write32(pStarsFightingInfo, 0); //Star
		Write32(pStarsFightingInfo, 0); //StarVal
		Write32(pStarsFightingInfo, 0); //StarsFightingStarLevel

		len = pStarsFightingInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasYuLeJiaNianHuaInfo
	for (size_t i = 0; i < n; i++)
	{ //YuLeJiaNianHuaInfo
		BYTE* pYuLeJiaNianHuaInfo = p;
		Write16(pYuLeJiaNianHuaInfo, 0); //len

		Write32(pYuLeJiaNianHuaInfo, 0); //Mode
		Write32(pYuLeJiaNianHuaInfo, 0); //Score
		Write8(pYuLeJiaNianHuaInfo, 0); //RankRangNum
		Write32(pYuLeJiaNianHuaInfo, 0); //RankRange[]
		Write8(pYuLeJiaNianHuaInfo, 0); //RankScoreNum
		Write32(pYuLeJiaNianHuaInfo, 0); //RankScore[]
		Write8(pYuLeJiaNianHuaInfo, 0); //InRecommend
		Write8(pYuLeJiaNianHuaInfo, 0); //InDoubleScore

		len = pYuLeJiaNianHuaInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 103, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestEnterRoom(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	short RoomID = Read16(p);
	char[] Password[] = ReadString(p);
	BYTE InviteType = Read8(p);
	Un InviterUin = ReadUn(p);
	bool RoomFlag = Read8(p);
	UINT RoomNo = Read32(p);
	bool Flag = Read8(p);
	short BaseGameMode = Read16(p);
	short SubGameMode = Read16(p);
	UCHAR EnterRoomType = Read8(p);

}

void NotifyEnterRoomMoreInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //PlayerCount
	for (size_t i = 0; i < n; i++)
	{ //PlayerRoomVisibleInfo
		BYTE* pPlayerRoomVisibleInfo = p;
		Write16(pPlayerRoomVisibleInfo, 0); //len

		WriteUn(pPlayerRoomVisibleInfo, 0); //Uin
		WriteUn(pPlayerRoomVisibleInfo, 0); //Identity
		Write8(pPlayerRoomVisibleInfo, 0); //SeatID
		Write8(pPlayerRoomVisibleInfo, 0); //TeamID
		Write16(pPlayerRoomVisibleInfo, 0); //PlayerID
		Write8(pPlayerRoomVisibleInfo, 0); //Status
		{ //PlayerDBBaseInfo
			BYTE* pPlayerDBBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerDBBaseInfo, 0); //len

			WriteString(pPlayerDBBaseInfo, 0); //NickName[]
			Write8(pPlayerDBBaseInfo, 0); //Gender
			Write8(pPlayerDBBaseInfo, 0); //Country
			Write32(pPlayerDBBaseInfo, 0); //License
			WriteUn(pPlayerDBBaseInfo, 0); //Experience
			Write32(pPlayerDBBaseInfo, 0); //SuperMoney
			Write32(pPlayerDBBaseInfo, 0); //Money
			WriteUn(pPlayerDBBaseInfo, 0); //WinNum
			Write32(pPlayerDBBaseInfo, 0); //SecondNum
			Write32(pPlayerDBBaseInfo, 0); //ThirdNum
			WriteUn(pPlayerDBBaseInfo, 0); //TotalNum
			Write32(pPlayerDBBaseInfo, 0); //CurHonor
			Write32(pPlayerDBBaseInfo, 0); //TotalHonor
			Write32(pPlayerDBBaseInfo, 0); //TodayHonor
			Write32(pPlayerDBBaseInfo, 0); //RelaxTime
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationBefore
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationCur
			Write32(pPlayerDBBaseInfo, 0); //Charm
			Write32(pPlayerDBBaseInfo, 0); //DurationGame
			Write32(pPlayerDBBaseInfo, 0); //DanceExp
			Write32(pPlayerDBBaseInfo, 0); //Coupons
			Write32(pPlayerDBBaseInfo, 0); //Admiration
			Write32(pPlayerDBBaseInfo, 0); //LuckMoney
			Write32(pPlayerDBBaseInfo, 0); //TeamWorkExp
			Write32(pPlayerDBBaseInfo, 0); //AchievePoint
			Write32(pPlayerDBBaseInfo, 0); //RegTime
			WriteString(pPlayerDBBaseInfo, 0); //Signature[]
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchPoint
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchNum
			Write16(pPlayerDBBaseInfo, 0); //LuckyMatchFirstNum
			Write8(pPlayerDBBaseInfo, 0); //LuckyMatchBestRand
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchWinNum
			Write32(pPlayerDBBaseInfo, 0); //FizzPointTotal
			Write16(pPlayerDBBaseInfo, 0); //FizzPointDaily
			Write16(pPlayerDBBaseInfo, 0); //FizzPointWeekly
			Write16(pPlayerDBBaseInfo, 0); //FizzPointLastWeek
			Write8(pPlayerDBBaseInfo, 0); //FizzLotteryStatus
			Write32(pPlayerDBBaseInfo, 0); //FizzLastUpdateTime
			Write32(pPlayerDBBaseInfo, 0); //SNSLocaleCode
			Write32(pPlayerDBBaseInfo, 0); //AuctionRightUnlockTime
			Write8(pPlayerDBBaseInfo, 0); //ReserveFlag
			Write32(pPlayerDBBaseInfo, 0); //CurConsumeScore
			Write32(pPlayerDBBaseInfo, 0); //HistoryConsumeScore
			Write8(pPlayerDBBaseInfo, 0); //CrashModeSponsorID
			Write32(pPlayerDBBaseInfo, 0); //Popularity
			Write32(pPlayerDBBaseInfo, 0); //LadderMatchAchievePoint
			Write32(pPlayerDBBaseInfo, 0); //Cash
			Write32(pPlayerDBBaseInfo, 0); //PlayerGPMIdentity
			Write32(pPlayerDBBaseInfo, 0); //PointTotalScore
			WriteUn(pPlayerDBBaseInfo, 0); //totalMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //lastMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalSeasonId
			WriteUn(pPlayerDBBaseInfo, 0); //lastClearMapMedalTime
			WriteUn(pPlayerDBBaseInfo, 0); //max2048Score
			WriteUn(pPlayerDBBaseInfo, 0); //curPlay2048LeftNum
			Write32(pPlayerDBBaseInfo, 0); //CheerValue
			Write16(pPlayerDBBaseInfo, 0); //SeasonID
			Write32(pPlayerDBBaseInfo, 0); //LastCheerValue
			Write32(pPlayerDBBaseInfo, 0); //SpeedBean
			Write32(pPlayerDBBaseInfo, 0); //SpeedCoin

			len = pPlayerDBBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //PlayerGuildInfo
			BYTE* pPlayerGuildInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerGuildInfo, 0); //len

			WriteString(pPlayerGuildInfo, 0); //GuildName[]
			Write16(pPlayerGuildInfo, 0); //Duty
			Write32(pPlayerGuildInfo, 0); //GuildID
			Write32(pPlayerGuildInfo, 0); //Right
			Write32(pPlayerGuildInfo, 0); //Medal
			Write32(pPlayerGuildInfo, 0); //Contribute
			WriteString(pPlayerGuildInfo, 0); //DutyTitle[]

			len = pPlayerGuildInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write16(pPlayerRoomVisibleInfo, 0); //EquipedItemNum
		for (size_t i = 0; i < n; i++)
		{ //PlayerItemInfo
			BYTE* pPlayerItemInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerItemInfo, 0); //len

			Write32(pPlayerItemInfo, 0); //ItemID
			Write32(pPlayerItemInfo, 0); //ItemNum
			Write32(pPlayerItemInfo, 0); //AvailPeriod
			Write8(pPlayerItemInfo, 0); //Status
			WriteUn(pPlayerItemInfo, 0); //ObtainTime
			Write32(pPlayerItemInfo, 0); //OtherAttribute
			Write16(pPlayerItemInfo, 0); //ItemType

			len = pPlayerItemInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write16(pPlayerRoomVisibleInfo, 0); //PetNum
		for (size_t i = 0; i < n; i++)
		{ //PetInfo
			BYTE* pPetInfo = pPlayerRoomVisibleInfo;
			Write16(pPetInfo, 0); //len

			Write32(pPetInfo, 0); //Uin
			Write32(pPetInfo, 0); //PetId
			WriteString(pPetInfo, 0); //PetName[]
			Write8(pPetInfo, 0); //IsProper
			Write16(pPetInfo, 0); //Level
			Write8(pPetInfo, 0); //Status
			Write16(pPetInfo, 0); //PetSkillNum
			for (size_t i = 0; i < n; i++)
			{ //PetSkillList
				BYTE* pPetSkillList = pPetInfo;
				Write16(pPetSkillList, 0); //len

				Write16(pPetSkillList, 0); //SkillID
				Write8(pPetSkillList, 0); //Status
				Write8(pPetSkillList, 0); //Active
				Write32(pPetSkillList, 0); //Value

				len = pPetSkillList - pPetInfo;
				Set16(pPetInfo, (WORD)len);
				pPetInfo += len;
			}
			Write32(pPetInfo, 0); //StrengLevel
			Write8(pPetInfo, 0); //TopStatus
			{ //CommonInfo
				BYTE* pCommonInfo = pPetInfo;
				Write16(pCommonInfo, 0); //len

				Write32(pCommonInfo, 0); //HuanHuaLevel
				Write8(pCommonInfo, 0); //CanHuanHua

				len = pCommonInfo - pPetInfo;
				Set16(pPetInfo, (WORD)len);
				pPetInfo += len;
			}
			Write16(pPetInfo, 0); //PKStar
			Write32(pPetInfo, 0); //PetSkinID

			len = pPetInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //PlayerGuildMatchInfo
			BYTE* pPlayerGuildMatchInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerGuildMatchInfo, 0); //len

			Write32(pPlayerGuildMatchInfo, 0); //SelfPoint
			Write32(pPlayerGuildMatchInfo, 0); //WinNum
			Write32(pPlayerGuildMatchInfo, 0); //TotalNum

			len = pPlayerGuildMatchInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //IsInTopList
		Write8(pPlayerRoomVisibleInfo, 0); //LoverRaceOrPro
		Write8(pPlayerRoomVisibleInfo, 0); //TmpEffectNum
		Write32(pPlayerRoomVisibleInfo, 0); //TmpEffectItems[]
		Write8(pPlayerRoomVisibleInfo, 0); //OBState
		Write8(pPlayerRoomVisibleInfo, 0); //DebutOrX5
		Write8(pPlayerRoomVisibleInfo, 0); //RandKeyFlag
		WriteUn(pPlayerRoomVisibleInfo, 0); //VipFlag
		Write8(pPlayerRoomVisibleInfo, 0); //HaveAppellation
		for (size_t i = 0; i < n; i++)
		{ //CurAppellation
			BYTE* pCurAppellation = pPlayerRoomVisibleInfo;
			Write16(pCurAppellation, 0); //len

			Write8(pCurAppellation, 0); //Type
			Write8(pCurAppellation, 0); //Level
			Write8(pCurAppellation, 0); //Status
			Write8(pCurAppellation, 0); //Difficulty
			Write32(pCurAppellation, 0); //MapId
			Write32(pCurAppellation, 0); //Value

			len = pCurAppellation - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //NobleInfo
			BYTE* pNobleInfo = pPlayerRoomVisibleInfo;
			Write16(pNobleInfo, 0); //len

			Write32(pNobleInfo, 0); //NobleID
			Write8(pNobleInfo, 0); //NobleLevel
			Write32(pNobleInfo, 0); //NoblePoint
			Write32(pNobleInfo, 0); //NobleLeftDays

			len = pNobleInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasCarryWizard
		for (size_t i = 0; i < n; i++)
		{ //CarryWizardInfo
			BYTE* pCarryWizardInfo = pPlayerRoomVisibleInfo;
			Write16(pCarryWizardInfo, 0); //len

			Write16(pCarryWizardInfo, 0); //WizardID
			WriteString(pCarryWizardInfo, 0); //NickName[]
			Write16(pCarryWizardInfo, 0); //WizardType
			Write8(pCarryWizardInfo, 0); //Order
			Write8(pCarryWizardInfo, 0); //EvolutionBranch
			Write8(pCarryWizardInfo, 0); //IsHuanHua

			len = pCarryWizardInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //GuildVipBaseInfo
			BYTE* pGuildVipBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pGuildVipBaseInfo, 0); //len

			Write8(pGuildVipBaseInfo, 0); //GuildVipLevel
			Write32(pGuildVipBaseInfo, 0); //GuildVipPoint

			len = pGuildVipBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write32(pPlayerRoomVisibleInfo, 0); //ExFlag
		Write8(pPlayerRoomVisibleInfo, 0); //HaveLDMBaseInfo
		for (size_t i = 0; i < n; i++)
		{ //PlayerLDMBaseInfo
			BYTE* pPlayerLDMBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerLDMBaseInfo, 0); //len

			Write8(pPlayerLDMBaseInfo, 0); //Grade
			Write32(pPlayerLDMBaseInfo, 0); //Score
			Write32(pPlayerLDMBaseInfo, 0); //MaxScore
			Write32(pPlayerLDMBaseInfo, 0); //MaxGrade

			len = pPlayerLDMBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasWl
		for (size_t i = 0; i < n; i++)
		{ //PlayerWlVisibleInfo
			BYTE* pPlayerWlVisibleInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerWlVisibleInfo, 0); //len

			Write32(pPlayerWlVisibleInfo, 0); //WonderLandID
			WriteString(pPlayerWlVisibleInfo, 0); //WonderLandName[]
			Write16(pPlayerWlVisibleInfo, 0); //WonderLandDuty
			Write8(pPlayerWlVisibleInfo, 0); //SubType
			Write8(pPlayerWlVisibleInfo, 0); //GuildGrade

			len = pPlayerWlVisibleInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasLoverVip
		for (size_t i = 0; i < n; i++)
		{ //LoverVipInfo
			BYTE* pLoverVipInfo = pPlayerRoomVisibleInfo;
			Write16(pLoverVipInfo, 0); //len

			Write8(pLoverVipInfo, 0); //LoverVipLevel
			Write32(pLoverVipInfo, 0); //LoverVipPoint
			Write8(pLoverVipInfo, 0); //GrowRate

			len = pLoverVipInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasBattleModeSkillInfoList
		for (size_t i = 0; i < n; i++)
		{ //BattleModeSkillInfoList
			BYTE* pBattleModeSkillInfoList = pPlayerRoomVisibleInfo;
			Write16(pBattleModeSkillInfoList, 0); //len

			Write8(pBattleModeSkillInfoList, 0); //SkillNum
			for (size_t i = 0; i < n; i++)
			{ //SkillInfo
				BYTE* pSkillInfo = pBattleModeSkillInfoList;
				Write16(pSkillInfo, 0); //len

				Write16(pSkillInfo, 0); //SkillId
				Write8(pSkillInfo, 0); //SkillLevel

				len = pSkillInfo - pBattleModeSkillInfoList;
				Set16(pBattleModeSkillInfoList, (WORD)len);
				pBattleModeSkillInfoList += len;
			}

			len = pBattleModeSkillInfoList - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasGarden
		for (size_t i = 0; i < n; i++)
		{ //PersonalGardenBaseInfo
			BYTE* pPersonalGardenBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pPersonalGardenBaseInfo, 0); //len

			Write8(pPersonalGardenBaseInfo, 0); //GardenLevel
			Write32(pPersonalGardenBaseInfo, 0); //GardenPoint
			Write8(pPersonalGardenBaseInfo, 0); //GrowRate
			Write32(pPersonalGardenBaseInfo, 0); //GardenExpireTime
			{ //SimpleInfo
				BYTE* pSimpleInfo = pPersonalGardenBaseInfo;
				Write16(pSimpleInfo, 0); //len

				Write32(pSimpleInfo, 0); //WeekPopularity
				Write32(pSimpleInfo, 0); //TotalPopularity
				Write32(pSimpleInfo, 0); //LastUpdatePopularityTime
				Write8(pSimpleInfo, 0); //PrivateType

				len = pSimpleInfo - pPersonalGardenBaseInfo;
				Set16(pPersonalGardenBaseInfo, (WORD)len);
				pPersonalGardenBaseInfo += len;
			}

			len = pPersonalGardenBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //ConsumeVipInfo
			BYTE* pConsumeVipInfo = pPlayerRoomVisibleInfo;
			Write16(pConsumeVipInfo, 0); //len

			WriteUn(pConsumeVipInfo, 0); //VipLevel
			WriteUn(pConsumeVipInfo, 0); //CharmValueOfMonth
			WriteUn(pConsumeVipInfo, 0); //SearchTreasureNums
			WriteUn(pConsumeVipInfo, 0); //GetTreasureNums

			len = pConsumeVipInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HaveBaby
		{ //LoverBabyInfo
			BYTE* pLoverBabyInfo = pPlayerRoomVisibleInfo;
			Write16(pLoverBabyInfo, 0); //len

			Write32(pLoverBabyInfo, 0); //LoverBabyID
			Write32(pLoverBabyInfo, 0); //ItemID
			Write32(pLoverBabyInfo, 0); //GrowValue
			Write32(pLoverBabyInfo, 0); //MentalValue
			Write32(pLoverBabyInfo, 0); //BabyProfileLevel
			Write32(pLoverBabyInfo, 0); //StrengthLevel
			Write32(pLoverBabyInfo, 0); //GrowLevel
			WriteString(pLoverBabyInfo, 0); //LoveBabyNickName[]
			Write16(pLoverBabyInfo, 0); //LoverBabyStat
			Write16(pLoverBabyInfo, 0); //LoverBabyEquipStat
			Write16(pLoverBabyInfo, 0); //LoverBabyTransferdStatus

			len = pLoverBabyInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //EmperorInfo
			BYTE* pEmperorInfo = pPlayerRoomVisibleInfo;
			Write16(pEmperorInfo, 0); //len

			Write8(pEmperorInfo, 0); //EmperorLevel
			Write32(pEmperorInfo, 0); //EmperorPoint
			Write32(pEmperorInfo, 0); //EmperorLeftDays
			Write8(pEmperorInfo, 0); //EmperorGrowRate

			len = pEmperorInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write16(pPlayerRoomVisibleInfo, 0); //RaceCardNums
		for (size_t i = 0; i < n; i++)
		{ //RaceCardAddValueInfo
			BYTE* pRaceCardAddValueInfo = pPlayerRoomVisibleInfo;
			Write16(pRaceCardAddValueInfo, 0); //len

			Write32(pRaceCardAddValueInfo, 0); //RaceCardID
			Write32(pRaceCardAddValueInfo, 0); //AddValue

			len = pRaceCardAddValueInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //GansterScoreInfo
			BYTE* pGansterScoreInfo = pPlayerRoomVisibleInfo;
			Write16(pGansterScoreInfo, 0); //len

			Write32(pGansterScoreInfo, 0); //GansterSeasonID
			Write32(pGansterScoreInfo, 0); //GansterScore
			Write32(pGansterScoreInfo, 0); //PoliceScore
			Write32(pGansterScoreInfo, 0); //TotalGansterScore

			len = pGansterScoreInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write32(pPlayerRoomVisibleInfo, 0); //OlympicId
		Write32(pPlayerRoomVisibleInfo, 0); //NPCEliminateWinTimes
		Write8(pPlayerRoomVisibleInfo, 0); //OriginTeamID
		Write8(pPlayerRoomVisibleInfo, 0); //NxNpc
		Write16(pPlayerRoomVisibleInfo, 0); //NxNpcAILevel
		{ //EquippedActiveKartInfo
			BYTE* pEquippedActiveKartInfo = pPlayerRoomVisibleInfo;
			Write16(pEquippedActiveKartInfo, 0); //len

			Write8(pEquippedActiveKartInfo, 0); //HaveActiveInfo
			Write32(pEquippedActiveKartInfo, 0); //KartID
			Write32(pEquippedActiveKartInfo, 0); //ActiveLevel

			len = pEquippedActiveKartInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //SpecialActivityStatus
		Write8(pPlayerRoomVisibleInfo, 0); //AreaID
		Write8(pPlayerRoomVisibleInfo, 0); //HaveRaiseSecondBaby
		{ //SecondLoverBabyInfo
			BYTE* pSecondLoverBabyInfo = pPlayerRoomVisibleInfo;
			Write16(pSecondLoverBabyInfo, 0); //len

			Write32(pSecondLoverBabyInfo, 0); //LoverBabyID
			Write32(pSecondLoverBabyInfo, 0); //ItemID
			Write32(pSecondLoverBabyInfo, 0); //GrowValue
			Write32(pSecondLoverBabyInfo, 0); //MentalValue
			Write32(pSecondLoverBabyInfo, 0); //BabyProfileLevel
			Write32(pSecondLoverBabyInfo, 0); //StrengthLevel
			Write32(pSecondLoverBabyInfo, 0); //GrowLevel
			WriteString(pSecondLoverBabyInfo, 0); //LoveBabyNickName[]
			Write16(pSecondLoverBabyInfo, 0); //LoverBabyStat
			Write16(pSecondLoverBabyInfo, 0); //LoverBabyEquipStat
			Write16(pSecondLoverBabyInfo, 0); //LoverBabyTransferdStatus

			len = pSecondLoverBabyInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasRankedMatchInfo
		for (size_t i = 0; i < n; i++)
		{ //RankedMatchGradeInfo
			BYTE* pRankedMatchGradeInfo = pPlayerRoomVisibleInfo;
			Write16(pRankedMatchGradeInfo, 0); //len

			Write32(pRankedMatchGradeInfo, 0); //GradeLevel
			Write32(pRankedMatchGradeInfo, 0); //ChildLevel
			Write32(pRankedMatchGradeInfo, 0); //GradeScore
			Write32(pRankedMatchGradeInfo, 0); //MaxGradeScore
			Write32(pRankedMatchGradeInfo, 0); //TotalScore

			len = pRankedMatchGradeInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasHuanLingChangeInfo
		for (size_t i = 0; i < n; i++)
		{ //HuanLingSuitInfo
			BYTE* pHuanLingSuitInfo = pPlayerRoomVisibleInfo;
			Write16(pHuanLingSuitInfo, 0); //len

			Write32(pHuanLingSuitInfo, 0); //SuitID
			Write8(pHuanLingSuitInfo, 0); //ChangeLevel

			len = pHuanLingSuitInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //EquipSealType
		Write16(pPlayerRoomVisibleInfo, 0); //Role
		Write8(pPlayerRoomVisibleInfo, 0); //SpecialActivityIDNum
		Write8(pPlayerRoomVisibleInfo, 0); //CrewID
		Write8(pPlayerRoomVisibleInfo, 0); //SpecialActivityInfoNum
		for (size_t i = 0; i < n; i++)
		{ //SpecialActivityInfo
			BYTE* pSpecialActivityInfo = pPlayerRoomVisibleInfo;
			Write16(pSpecialActivityInfo, 0); //len

			Write8(pSpecialActivityInfo, 0); //ProfessionLicenseInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ProfessionLicenseInfo
				BYTE* pProfessionLicenseInfo = pSpecialActivityInfo;
				Write16(pProfessionLicenseInfo, 0); //len

				Write8(pProfessionLicenseInfo, 0); //BigLevel
				Write8(pProfessionLicenseInfo, 0); //SmallLevel

				len = pProfessionLicenseInfo - pSpecialActivityInfo;
				Set16(pSpecialActivityInfo, (WORD)len);
				pSpecialActivityInfo += len;
			}

			len = pSpecialActivityInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //ParaNum
		Write32(pPlayerRoomVisibleInfo, 0); //ParaList[]
		Write8(pPlayerRoomVisibleInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemOrder
			BYTE* pItemOrder = pPlayerRoomVisibleInfo;
			Write16(pItemOrder, 0); //len

			Write32(pItemOrder, 0); //KartID
			Write32(pItemOrder, 0); //Order
			Write32(pItemOrder, 0); //BackGroundID

			len = pItemOrder - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //TDCExcluItemNum
		Write32(pPlayerRoomVisibleInfo, 0); //TDCExclusiveItemID[]
		Write8(pPlayerRoomVisibleInfo, 0); //EquipNiChangItemNum
		for (size_t i = 0; i < n; i++)
		{ //NiChangPavilionEquipItemInfo
			BYTE* pNiChangPavilionEquipItemInfo = pPlayerRoomVisibleInfo;
			Write16(pNiChangPavilionEquipItemInfo, 0); //len

			Write32(pNiChangPavilionEquipItemInfo, 0); //ItemId
			Write16(pNiChangPavilionEquipItemInfo, 0); //CurrentEquipColorationPlanId

			len = pNiChangPavilionEquipItemInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //TestKartGameType
		Write32(pPlayerRoomVisibleInfo, 0); //GameTestKartID
		Write8(pPlayerRoomVisibleInfo, 0); //HasStarsFightingInfo
		for (size_t i = 0; i < n; i++)
		{ //StarsFightingInfo
			BYTE* pStarsFightingInfo = pPlayerRoomVisibleInfo;
			Write16(pStarsFightingInfo, 0); //len

			Write32(pStarsFightingInfo, 0); //Star
			Write32(pStarsFightingInfo, 0); //StarVal
			Write32(pStarsFightingInfo, 0); //StarsFightingStarLevel

			len = pStarsFightingInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //RoomBGSetting

		len = pPlayerRoomVisibleInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //PlayerCount2
	for (size_t i = 0; i < n; i++)
	{ //PlayerRelationInfo
		BYTE* pPlayerRelationInfo = p;
		Write16(pPlayerRelationInfo, 0); //len

		Write32(pPlayerRelationInfo, 0); //SrcUin
		Write32(pPlayerRelationInfo, 0); //RelationFlag
		Write32(pPlayerRelationInfo, 0); //RelationUin
		WriteString(pPlayerRelationInfo, 0); //RelationNickName[]
		Write32(pPlayerRelationInfo, 0); //EngageTime
		Write32(pPlayerRelationInfo, 0); //NextCanBookingTimeLimit
		Write32(pPlayerRelationInfo, 0); //BeginHoneyMoonTime
		Write32(pPlayerRelationInfo, 0); //EndHoneyMoonTime
		Write8(pPlayerRelationInfo, 0); //EngageFlag

		len = pPlayerRelationInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //KartNum
	for (size_t i = 0; i < n; i++)
	{ //KartRefitInfo
		BYTE* pKartRefitInfo = p;
		Write16(pKartRefitInfo, 0); //len

		Write32(pKartRefitInfo, 0); //Uin
		Write32(pKartRefitInfo, 0); //KartId
		Write32(pKartRefitInfo, 0); //RefitCout
		Write16(pKartRefitInfo, 0); //MaxFlags
		Write16(pKartRefitInfo, 0); //WWeight
		Write16(pKartRefitInfo, 0); //SpeedWeight
		Write16(pKartRefitInfo, 0); //JetWeight
		Write16(pKartRefitInfo, 0); //SJetWeight
		Write16(pKartRefitInfo, 0); //AccuWeight
		Write32(pKartRefitInfo, 0); //ShapeRefitCount
		Write32(pKartRefitInfo, 0); //KartHeadRefitItemID
		Write32(pKartRefitInfo, 0); //KartTailRefitItemID
		Write32(pKartRefitInfo, 0); //KartFlankRefitItemID
		Write32(pKartRefitInfo, 0); //KartTireRefitItemID
		Write32(pKartRefitInfo, 0); //SecondRefitCount
		Write16(pKartRefitInfo, 0); //Speed2Weight
		Write16(pKartRefitInfo, 0); //DriftVecWeight
		Write16(pKartRefitInfo, 0); //AdditionalZSpeedWeight
		Write16(pKartRefitInfo, 0); //AntiCollisionWeight
		Write16(pKartRefitInfo, 0); //LuckyValue
		Write16(pKartRefitInfo, 0); //RefitLuckyValueMaxWeight
		Write32(pKartRefitInfo, 0); //ShapeSuitID
		Write8(pKartRefitInfo, 0); //LegendSuitLevel
		Write32(pKartRefitInfo, 0); //LegendSuitLevelChoice
		Write32(pKartRefitInfo, 0); //ShapeLegendSuitID

		len = pKartRefitInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasNext

	len = p - buf;
	SendToClient(Client, 224, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyEnterRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //RoomID
	{ //NewPlayerInfo
		BYTE* pNewPlayerInfo = p;
		Write16(pNewPlayerInfo, 0); //len

		WriteUn(pNewPlayerInfo, 0); //Uin
		WriteUn(pNewPlayerInfo, 0); //Identity
		Write8(pNewPlayerInfo, 0); //SeatID
		Write8(pNewPlayerInfo, 0); //TeamID
		Write16(pNewPlayerInfo, 0); //PlayerID
		Write8(pNewPlayerInfo, 0); //Status
		{ //PlayerDBBaseInfo
			BYTE* pPlayerDBBaseInfo = pNewPlayerInfo;
			Write16(pPlayerDBBaseInfo, 0); //len

			WriteString(pPlayerDBBaseInfo, 0); //NickName[]
			Write8(pPlayerDBBaseInfo, 0); //Gender
			Write8(pPlayerDBBaseInfo, 0); //Country
			Write32(pPlayerDBBaseInfo, 0); //License
			WriteUn(pPlayerDBBaseInfo, 0); //Experience
			Write32(pPlayerDBBaseInfo, 0); //SuperMoney
			Write32(pPlayerDBBaseInfo, 0); //Money
			WriteUn(pPlayerDBBaseInfo, 0); //WinNum
			Write32(pPlayerDBBaseInfo, 0); //SecondNum
			Write32(pPlayerDBBaseInfo, 0); //ThirdNum
			WriteUn(pPlayerDBBaseInfo, 0); //TotalNum
			Write32(pPlayerDBBaseInfo, 0); //CurHonor
			Write32(pPlayerDBBaseInfo, 0); //TotalHonor
			Write32(pPlayerDBBaseInfo, 0); //TodayHonor
			Write32(pPlayerDBBaseInfo, 0); //RelaxTime
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationBefore
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationCur
			Write32(pPlayerDBBaseInfo, 0); //Charm
			Write32(pPlayerDBBaseInfo, 0); //DurationGame
			Write32(pPlayerDBBaseInfo, 0); //DanceExp
			Write32(pPlayerDBBaseInfo, 0); //Coupons
			Write32(pPlayerDBBaseInfo, 0); //Admiration
			Write32(pPlayerDBBaseInfo, 0); //LuckMoney
			Write32(pPlayerDBBaseInfo, 0); //TeamWorkExp
			Write32(pPlayerDBBaseInfo, 0); //AchievePoint
			Write32(pPlayerDBBaseInfo, 0); //RegTime
			WriteString(pPlayerDBBaseInfo, 0); //Signature[]
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchPoint
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchNum
			Write16(pPlayerDBBaseInfo, 0); //LuckyMatchFirstNum
			Write8(pPlayerDBBaseInfo, 0); //LuckyMatchBestRand
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchWinNum
			Write32(pPlayerDBBaseInfo, 0); //FizzPointTotal
			Write16(pPlayerDBBaseInfo, 0); //FizzPointDaily
			Write16(pPlayerDBBaseInfo, 0); //FizzPointWeekly
			Write16(pPlayerDBBaseInfo, 0); //FizzPointLastWeek
			Write8(pPlayerDBBaseInfo, 0); //FizzLotteryStatus
			Write32(pPlayerDBBaseInfo, 0); //FizzLastUpdateTime
			Write32(pPlayerDBBaseInfo, 0); //SNSLocaleCode
			Write32(pPlayerDBBaseInfo, 0); //AuctionRightUnlockTime
			Write8(pPlayerDBBaseInfo, 0); //ReserveFlag
			Write32(pPlayerDBBaseInfo, 0); //CurConsumeScore
			Write32(pPlayerDBBaseInfo, 0); //HistoryConsumeScore
			Write8(pPlayerDBBaseInfo, 0); //CrashModeSponsorID
			Write32(pPlayerDBBaseInfo, 0); //Popularity
			Write32(pPlayerDBBaseInfo, 0); //LadderMatchAchievePoint
			Write32(pPlayerDBBaseInfo, 0); //Cash
			Write32(pPlayerDBBaseInfo, 0); //PlayerGPMIdentity
			Write32(pPlayerDBBaseInfo, 0); //PointTotalScore
			WriteUn(pPlayerDBBaseInfo, 0); //totalMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //lastMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalSeasonId
			WriteUn(pPlayerDBBaseInfo, 0); //lastClearMapMedalTime
			WriteUn(pPlayerDBBaseInfo, 0); //max2048Score
			WriteUn(pPlayerDBBaseInfo, 0); //curPlay2048LeftNum
			Write32(pPlayerDBBaseInfo, 0); //CheerValue
			Write16(pPlayerDBBaseInfo, 0); //SeasonID
			Write32(pPlayerDBBaseInfo, 0); //LastCheerValue
			Write32(pPlayerDBBaseInfo, 0); //SpeedBean
			Write32(pPlayerDBBaseInfo, 0); //SpeedCoin

			len = pPlayerDBBaseInfo - pNewPlayerInfo;
			Set16(pNewPlayerInfo, (WORD)len);
			pNewPlayerInfo += len;
		}
		{ //PlayerGuildInfo
			BYTE* pPlayerGuildInfo = pNewPlayerInfo;
			Write16(pPlayerGuildInfo, 0); //len

			WriteString(pPlayerGuildInfo, 0); //GuildName[]
			Write16(pPlayerGuildInfo, 0); //Duty
			Write32(pPlayerGuildInfo, 0); //GuildID
			Write32(pPlayerGuildInfo, 0); //Right
			Write32(pPlayerGuildInfo, 0); //Medal
			Write32(pPlayerGuildInfo, 0); //Contribute
			WriteString(pPlayerGuildInfo, 0); //DutyTitle[]

			len = pPlayerGuildInfo - pNewPlayerInfo;
			Set16(pNewPlayerInfo, (WORD)len);
			pNewPlayerInfo += len;
		}
		Write16(pNewPlayerInfo, 0); //EquipedItemNum
		for (size_t i = 0; i < n; i++)
		{ //PlayerItemInfo
			BYTE* pPlayerItemInfo = pNewPlayerInfo;
			Write16(pPlayerItemInfo, 0); //len

			Write32(pPlayerItemInfo, 0); //ItemID
			Write32(pPlayerItemInfo, 0); //ItemNum
			Write32(pPlayerItemInfo, 0); //AvailPeriod
			Write8(pPlayerItemInfo, 0); //Status
			WriteUn(pPlayerItemInfo, 0); //ObtainTime
			Write32(pPlayerItemInfo, 0); //OtherAttribute
			Write16(pPlayerItemInfo, 0); //ItemType

			len = pPlayerItemInfo - pNewPlayerInfo;
			Set16(pNewPlayerInfo, (WORD)len);
			pNewPlayerInfo += len;
		}
		Write16(pNewPlayerInfo, 0); //PetNum
		for (size_t i = 0; i < n; i++)
		{ //PetInfo
			BYTE* pPetInfo = pNewPlayerInfo;
			Write16(pPetInfo, 0); //len

			Write32(pPetInfo, 0); //Uin
			Write32(pPetInfo, 0); //PetId
			WriteString(pPetInfo, 0); //PetName[]
			Write8(pPetInfo, 0); //IsProper
			Write16(pPetInfo, 0); //Level
			Write8(pPetInfo, 0); //Status
			Write16(pPetInfo, 0); //PetSkillNum
			for (size_t i = 0; i < n; i++)
			{ //PetSkillList
				BYTE* pPetSkillList = pPetInfo;
				Write16(pPetSkillList, 0); //len

				Write16(pPetSkillList, 0); //SkillID
				Write8(pPetSkillList, 0); //Status
				Write8(pPetSkillList, 0); //Active
				Write32(pPetSkillList, 0); //Value

				len = pPetSkillList - pPetInfo;
				Set16(pPetInfo, (WORD)len);
				pPetInfo += len;
			}
			Write32(pPetInfo, 0); //StrengLevel
			Write8(pPetInfo, 0); //TopStatus
			{ //CommonInfo
				BYTE* pCommonInfo = pPetInfo;
				Write16(pCommonInfo, 0); //len

				Write32(pCommonInfo, 0); //HuanHuaLevel
				Write8(pCommonInfo, 0); //CanHuanHua

				len = pCommonInfo - pPetInfo;
				Set16(pPetInfo, (WORD)len);
				pPetInfo += len;
			}
			Write16(pPetInfo, 0); //PKStar
			Write32(pPetInfo, 0); //PetSkinID

			len = pPetInfo - pNewPlayerInfo;
			Set16(pNewPlayerInfo, (WORD)len);
			pNewPlayerInfo += len;
		}
		{ //PlayerGuildMatchInfo
			BYTE* pPlayerGuildMatchInfo = pNewPlayerInfo;
			Write16(pPlayerGuildMatchInfo, 0); //len

			Write32(pPlayerGuildMatchInfo, 0); //SelfPoint
			Write32(pPlayerGuildMatchInfo, 0); //WinNum
			Write32(pPlayerGuildMatchInfo, 0); //TotalNum

			len = pPlayerGuildMatchInfo - pNewPlayerInfo;
			Set16(pNewPlayerInfo, (WORD)len);
			pNewPlayerInfo += len;
		}
		Write8(pNewPlayerInfo, 0); //IsInTopList
		Write8(pNewPlayerInfo, 0); //LoverRaceOrPro
		Write8(pNewPlayerInfo, 0); //TmpEffectNum
		Write32(pNewPlayerInfo, 0); //TmpEffectItems[]
		Write8(pNewPlayerInfo, 0); //OBState
		Write8(pNewPlayerInfo, 0); //DebutOrX5
		Write8(pNewPlayerInfo, 0); //RandKeyFlag
		WriteUn(pNewPlayerInfo, 0); //VipFlag
		Write8(pNewPlayerInfo, 0); //HaveAppellation
		for (size_t i = 0; i < n; i++)
		{ //CurAppellation
			BYTE* pCurAppellation = pNewPlayerInfo;
			Write16(pCurAppellation, 0); //len

			Write8(pCurAppellation, 0); //Type
			Write8(pCurAppellation, 0); //Level
			Write8(pCurAppellation, 0); //Status
			Write8(pCurAppellation, 0); //Difficulty
			Write32(pCurAppellation, 0); //MapId
			Write32(pCurAppellation, 0); //Value

			len = pCurAppellation - pNewPlayerInfo;
			Set16(pNewPlayerInfo, (WORD)len);
			pNewPlayerInfo += len;
		}
		{ //NobleInfo
			BYTE* pNobleInfo = pNewPlayerInfo;
			Write16(pNobleInfo, 0); //len

			Write32(pNobleInfo, 0); //NobleID
			Write8(pNobleInfo, 0); //NobleLevel
			Write32(pNobleInfo, 0); //NoblePoint
			Write32(pNobleInfo, 0); //NobleLeftDays

			len = pNobleInfo - pNewPlayerInfo;
			Set16(pNewPlayerInfo, (WORD)len);
			pNewPlayerInfo += len;
		}
		Write8(pNewPlayerInfo, 0); //HasCarryWizard
		for (size_t i = 0; i < n; i++)
		{ //CarryWizardInfo
			BYTE* pCarryWizardInfo = pNewPlayerInfo;
			Write16(pCarryWizardInfo, 0); //len

			Write16(pCarryWizardInfo, 0); //WizardID
			WriteString(pCarryWizardInfo, 0); //NickName[]
			Write16(pCarryWizardInfo, 0); //WizardType
			Write8(pCarryWizardInfo, 0); //Order
			Write8(pCarryWizardInfo, 0); //EvolutionBranch
			Write8(pCarryWizardInfo, 0); //IsHuanHua

			len = pCarryWizardInfo - pNewPlayerInfo;
			Set16(pNewPlayerInfo, (WORD)len);
			pNewPlayerInfo += len;
		}
		{ //GuildVipBaseInfo
			BYTE* pGuildVipBaseInfo = pNewPlayerInfo;
			Write16(pGuildVipBaseInfo, 0); //len

			Write8(pGuildVipBaseInfo, 0); //GuildVipLevel
			Write32(pGuildVipBaseInfo, 0); //GuildVipPoint

			len = pGuildVipBaseInfo - pNewPlayerInfo;
			Set16(pNewPlayerInfo, (WORD)len);
			pNewPlayerInfo += len;
		}
		Write32(pNewPlayerInfo, 0); //ExFlag
		Write8(pNewPlayerInfo, 0); //HaveLDMBaseInfo
		for (size_t i = 0; i < n; i++)
		{ //PlayerLDMBaseInfo
			BYTE* pPlayerLDMBaseInfo = pNewPlayerInfo;
			Write16(pPlayerLDMBaseInfo, 0); //len

			Write8(pPlayerLDMBaseInfo, 0); //Grade
			Write32(pPlayerLDMBaseInfo, 0); //Score
			Write32(pPlayerLDMBaseInfo, 0); //MaxScore
			Write32(pPlayerLDMBaseInfo, 0); //MaxGrade

			len = pPlayerLDMBaseInfo - pNewPlayerInfo;
			Set16(pNewPlayerInfo, (WORD)len);
			pNewPlayerInfo += len;
		}
		Write8(pNewPlayerInfo, 0); //HasWl
		for (size_t i = 0; i < n; i++)
		{ //PlayerWlVisibleInfo
			BYTE* pPlayerWlVisibleInfo = pNewPlayerInfo;
			Write16(pPlayerWlVisibleInfo, 0); //len

			Write32(pPlayerWlVisibleInfo, 0); //WonderLandID
			WriteString(pPlayerWlVisibleInfo, 0); //WonderLandName[]
			Write16(pPlayerWlVisibleInfo, 0); //WonderLandDuty
			Write8(pPlayerWlVisibleInfo, 0); //SubType
			Write8(pPlayerWlVisibleInfo, 0); //GuildGrade

			len = pPlayerWlVisibleInfo - pNewPlayerInfo;
			Set16(pNewPlayerInfo, (WORD)len);
			pNewPlayerInfo += len;
		}
		Write8(pNewPlayerInfo, 0); //HasLoverVip
		for (size_t i = 0; i < n; i++)
		{ //LoverVipInfo
			BYTE* pLoverVipInfo = pNewPlayerInfo;
			Write16(pLoverVipInfo, 0); //len

			Write8(pLoverVipInfo, 0); //LoverVipLevel
			Write32(pLoverVipInfo, 0); //LoverVipPoint
			Write8(pLoverVipInfo, 0); //GrowRate

			len = pLoverVipInfo - pNewPlayerInfo;
			Set16(pNewPlayerInfo, (WORD)len);
			pNewPlayerInfo += len;
		}
		Write8(pNewPlayerInfo, 0); //HasBattleModeSkillInfoList
		for (size_t i = 0; i < n; i++)
		{ //BattleModeSkillInfoList
			BYTE* pBattleModeSkillInfoList = pNewPlayerInfo;
			Write16(pBattleModeSkillInfoList, 0); //len

			Write8(pBattleModeSkillInfoList, 0); //SkillNum
			for (size_t i = 0; i < n; i++)
			{ //SkillInfo
				BYTE* pSkillInfo = pBattleModeSkillInfoList;
				Write16(pSkillInfo, 0); //len

				Write16(pSkillInfo, 0); //SkillId
				Write8(pSkillInfo, 0); //SkillLevel

				len = pSkillInfo - pBattleModeSkillInfoList;
				Set16(pBattleModeSkillInfoList, (WORD)len);
				pBattleModeSkillInfoList += len;
			}

			len = pBattleModeSkillInfoList - pNewPlayerInfo;
			Set16(pNewPlayerInfo, (WORD)len);
			pNewPlayerInfo += len;
		}
		Write8(pNewPlayerInfo, 0); //HasGarden
		for (size_t i = 0; i < n; i++)
		{ //PersonalGardenBaseInfo
			BYTE* pPersonalGardenBaseInfo = pNewPlayerInfo;
			Write16(pPersonalGardenBaseInfo, 0); //len

			Write8(pPersonalGardenBaseInfo, 0); //GardenLevel
			Write32(pPersonalGardenBaseInfo, 0); //GardenPoint
			Write8(pPersonalGardenBaseInfo, 0); //GrowRate
			Write32(pPersonalGardenBaseInfo, 0); //GardenExpireTime
			{ //SimpleInfo
				BYTE* pSimpleInfo = pPersonalGardenBaseInfo;
				Write16(pSimpleInfo, 0); //len

				Write32(pSimpleInfo, 0); //WeekPopularity
				Write32(pSimpleInfo, 0); //TotalPopularity
				Write32(pSimpleInfo, 0); //LastUpdatePopularityTime
				Write8(pSimpleInfo, 0); //PrivateType

				len = pSimpleInfo - pPersonalGardenBaseInfo;
				Set16(pPersonalGardenBaseInfo, (WORD)len);
				pPersonalGardenBaseInfo += len;
			}

			len = pPersonalGardenBaseInfo - pNewPlayerInfo;
			Set16(pNewPlayerInfo, (WORD)len);
			pNewPlayerInfo += len;
		}
		{ //ConsumeVipInfo
			BYTE* pConsumeVipInfo = pNewPlayerInfo;
			Write16(pConsumeVipInfo, 0); //len

			WriteUn(pConsumeVipInfo, 0); //VipLevel
			WriteUn(pConsumeVipInfo, 0); //CharmValueOfMonth
			WriteUn(pConsumeVipInfo, 0); //SearchTreasureNums
			WriteUn(pConsumeVipInfo, 0); //GetTreasureNums

			len = pConsumeVipInfo - pNewPlayerInfo;
			Set16(pNewPlayerInfo, (WORD)len);
			pNewPlayerInfo += len;
		}
		Write8(pNewPlayerInfo, 0); //HaveBaby
		{ //LoverBabyInfo
			BYTE* pLoverBabyInfo = pNewPlayerInfo;
			Write16(pLoverBabyInfo, 0); //len

			Write32(pLoverBabyInfo, 0); //LoverBabyID
			Write32(pLoverBabyInfo, 0); //ItemID
			Write32(pLoverBabyInfo, 0); //GrowValue
			Write32(pLoverBabyInfo, 0); //MentalValue
			Write32(pLoverBabyInfo, 0); //BabyProfileLevel
			Write32(pLoverBabyInfo, 0); //StrengthLevel
			Write32(pLoverBabyInfo, 0); //GrowLevel
			WriteString(pLoverBabyInfo, 0); //LoveBabyNickName[]
			Write16(pLoverBabyInfo, 0); //LoverBabyStat
			Write16(pLoverBabyInfo, 0); //LoverBabyEquipStat
			Write16(pLoverBabyInfo, 0); //LoverBabyTransferdStatus

			len = pLoverBabyInfo - pNewPlayerInfo;
			Set16(pNewPlayerInfo, (WORD)len);
			pNewPlayerInfo += len;
		}
		{ //EmperorInfo
			BYTE* pEmperorInfo = pNewPlayerInfo;
			Write16(pEmperorInfo, 0); //len

			Write8(pEmperorInfo, 0); //EmperorLevel
			Write32(pEmperorInfo, 0); //EmperorPoint
			Write32(pEmperorInfo, 0); //EmperorLeftDays
			Write8(pEmperorInfo, 0); //EmperorGrowRate

			len = pEmperorInfo - pNewPlayerInfo;
			Set16(pNewPlayerInfo, (WORD)len);
			pNewPlayerInfo += len;
		}
		Write16(pNewPlayerInfo, 0); //RaceCardNums
		for (size_t i = 0; i < n; i++)
		{ //RaceCardAddValueInfo
			BYTE* pRaceCardAddValueInfo = pNewPlayerInfo;
			Write16(pRaceCardAddValueInfo, 0); //len

			Write32(pRaceCardAddValueInfo, 0); //RaceCardID
			Write32(pRaceCardAddValueInfo, 0); //AddValue

			len = pRaceCardAddValueInfo - pNewPlayerInfo;
			Set16(pNewPlayerInfo, (WORD)len);
			pNewPlayerInfo += len;
		}
		{ //GansterScoreInfo
			BYTE* pGansterScoreInfo = pNewPlayerInfo;
			Write16(pGansterScoreInfo, 0); //len

			Write32(pGansterScoreInfo, 0); //GansterSeasonID
			Write32(pGansterScoreInfo, 0); //GansterScore
			Write32(pGansterScoreInfo, 0); //PoliceScore
			Write32(pGansterScoreInfo, 0); //TotalGansterScore

			len = pGansterScoreInfo - pNewPlayerInfo;
			Set16(pNewPlayerInfo, (WORD)len);
			pNewPlayerInfo += len;
		}
		Write32(pNewPlayerInfo, 0); //OlympicId
		Write32(pNewPlayerInfo, 0); //NPCEliminateWinTimes
		Write8(pNewPlayerInfo, 0); //OriginTeamID
		Write8(pNewPlayerInfo, 0); //NxNpc
		Write16(pNewPlayerInfo, 0); //NxNpcAILevel
		{ //EquippedActiveKartInfo
			BYTE* pEquippedActiveKartInfo = pNewPlayerInfo;
			Write16(pEquippedActiveKartInfo, 0); //len

			Write8(pEquippedActiveKartInfo, 0); //HaveActiveInfo
			Write32(pEquippedActiveKartInfo, 0); //KartID
			Write32(pEquippedActiveKartInfo, 0); //ActiveLevel

			len = pEquippedActiveKartInfo - pNewPlayerInfo;
			Set16(pNewPlayerInfo, (WORD)len);
			pNewPlayerInfo += len;
		}
		Write8(pNewPlayerInfo, 0); //SpecialActivityStatus
		Write8(pNewPlayerInfo, 0); //AreaID
		Write8(pNewPlayerInfo, 0); //HaveRaiseSecondBaby
		{ //SecondLoverBabyInfo
			BYTE* pSecondLoverBabyInfo = pNewPlayerInfo;
			Write16(pSecondLoverBabyInfo, 0); //len

			Write32(pSecondLoverBabyInfo, 0); //LoverBabyID
			Write32(pSecondLoverBabyInfo, 0); //ItemID
			Write32(pSecondLoverBabyInfo, 0); //GrowValue
			Write32(pSecondLoverBabyInfo, 0); //MentalValue
			Write32(pSecondLoverBabyInfo, 0); //BabyProfileLevel
			Write32(pSecondLoverBabyInfo, 0); //StrengthLevel
			Write32(pSecondLoverBabyInfo, 0); //GrowLevel
			WriteString(pSecondLoverBabyInfo, 0); //LoveBabyNickName[]
			Write16(pSecondLoverBabyInfo, 0); //LoverBabyStat
			Write16(pSecondLoverBabyInfo, 0); //LoverBabyEquipStat
			Write16(pSecondLoverBabyInfo, 0); //LoverBabyTransferdStatus

			len = pSecondLoverBabyInfo - pNewPlayerInfo;
			Set16(pNewPlayerInfo, (WORD)len);
			pNewPlayerInfo += len;
		}
		Write8(pNewPlayerInfo, 0); //HasRankedMatchInfo
		for (size_t i = 0; i < n; i++)
		{ //RankedMatchGradeInfo
			BYTE* pRankedMatchGradeInfo = pNewPlayerInfo;
			Write16(pRankedMatchGradeInfo, 0); //len

			Write32(pRankedMatchGradeInfo, 0); //GradeLevel
			Write32(pRankedMatchGradeInfo, 0); //ChildLevel
			Write32(pRankedMatchGradeInfo, 0); //GradeScore
			Write32(pRankedMatchGradeInfo, 0); //MaxGradeScore
			Write32(pRankedMatchGradeInfo, 0); //TotalScore

			len = pRankedMatchGradeInfo - pNewPlayerInfo;
			Set16(pNewPlayerInfo, (WORD)len);
			pNewPlayerInfo += len;
		}
		Write8(pNewPlayerInfo, 0); //HasHuanLingChangeInfo
		for (size_t i = 0; i < n; i++)
		{ //HuanLingSuitInfo
			BYTE* pHuanLingSuitInfo = pNewPlayerInfo;
			Write16(pHuanLingSuitInfo, 0); //len

			Write32(pHuanLingSuitInfo, 0); //SuitID
			Write8(pHuanLingSuitInfo, 0); //ChangeLevel

			len = pHuanLingSuitInfo - pNewPlayerInfo;
			Set16(pNewPlayerInfo, (WORD)len);
			pNewPlayerInfo += len;
		}
		Write8(pNewPlayerInfo, 0); //EquipSealType
		Write16(pNewPlayerInfo, 0); //Role
		Write8(pNewPlayerInfo, 0); //SpecialActivityIDNum
		Write8(pNewPlayerInfo, 0); //CrewID
		Write8(pNewPlayerInfo, 0); //SpecialActivityInfoNum
		for (size_t i = 0; i < n; i++)
		{ //SpecialActivityInfo
			BYTE* pSpecialActivityInfo = pNewPlayerInfo;
			Write16(pSpecialActivityInfo, 0); //len

			Write8(pSpecialActivityInfo, 0); //ProfessionLicenseInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ProfessionLicenseInfo
				BYTE* pProfessionLicenseInfo = pSpecialActivityInfo;
				Write16(pProfessionLicenseInfo, 0); //len

				Write8(pProfessionLicenseInfo, 0); //BigLevel
				Write8(pProfessionLicenseInfo, 0); //SmallLevel

				len = pProfessionLicenseInfo - pSpecialActivityInfo;
				Set16(pSpecialActivityInfo, (WORD)len);
				pSpecialActivityInfo += len;
			}

			len = pSpecialActivityInfo - pNewPlayerInfo;
			Set16(pNewPlayerInfo, (WORD)len);
			pNewPlayerInfo += len;
		}
		Write8(pNewPlayerInfo, 0); //ParaNum
		Write32(pNewPlayerInfo, 0); //ParaList[]
		Write8(pNewPlayerInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemOrder
			BYTE* pItemOrder = pNewPlayerInfo;
			Write16(pItemOrder, 0); //len

			Write32(pItemOrder, 0); //KartID
			Write32(pItemOrder, 0); //Order
			Write32(pItemOrder, 0); //BackGroundID

			len = pItemOrder - pNewPlayerInfo;
			Set16(pNewPlayerInfo, (WORD)len);
			pNewPlayerInfo += len;
		}
		Write8(pNewPlayerInfo, 0); //TDCExcluItemNum
		Write32(pNewPlayerInfo, 0); //TDCExclusiveItemID[]
		Write8(pNewPlayerInfo, 0); //EquipNiChangItemNum
		for (size_t i = 0; i < n; i++)
		{ //NiChangPavilionEquipItemInfo
			BYTE* pNiChangPavilionEquipItemInfo = pNewPlayerInfo;
			Write16(pNiChangPavilionEquipItemInfo, 0); //len

			Write32(pNiChangPavilionEquipItemInfo, 0); //ItemId
			Write16(pNiChangPavilionEquipItemInfo, 0); //CurrentEquipColorationPlanId

			len = pNiChangPavilionEquipItemInfo - pNewPlayerInfo;
			Set16(pNewPlayerInfo, (WORD)len);
			pNewPlayerInfo += len;
		}
		Write8(pNewPlayerInfo, 0); //TestKartGameType
		Write32(pNewPlayerInfo, 0); //GameTestKartID
		Write8(pNewPlayerInfo, 0); //HasStarsFightingInfo
		for (size_t i = 0; i < n; i++)
		{ //StarsFightingInfo
			BYTE* pStarsFightingInfo = pNewPlayerInfo;
			Write16(pStarsFightingInfo, 0); //len

			Write32(pStarsFightingInfo, 0); //Star
			Write32(pStarsFightingInfo, 0); //StarVal
			Write32(pStarsFightingInfo, 0); //StarsFightingStarLevel

			len = pStarsFightingInfo - pNewPlayerInfo;
			Set16(pNewPlayerInfo, (WORD)len);
			pNewPlayerInfo += len;
		}
		Write8(pNewPlayerInfo, 0); //RoomBGSetting

		len = pNewPlayerInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //PlayerRelationInfo
		BYTE* pPlayerRelationInfo = p;
		Write16(pPlayerRelationInfo, 0); //len

		Write32(pPlayerRelationInfo, 0); //SrcUin
		Write32(pPlayerRelationInfo, 0); //RelationFlag
		Write32(pPlayerRelationInfo, 0); //RelationUin
		WriteString(pPlayerRelationInfo, 0); //RelationNickName[]
		Write32(pPlayerRelationInfo, 0); //EngageTime
		Write32(pPlayerRelationInfo, 0); //NextCanBookingTimeLimit
		Write32(pPlayerRelationInfo, 0); //BeginHoneyMoonTime
		Write32(pPlayerRelationInfo, 0); //EndHoneyMoonTime
		Write8(pPlayerRelationInfo, 0); //EngageFlag

		len = pPlayerRelationInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //KartNum
	for (size_t i = 0; i < n; i++)
	{ //KartRefitInfo
		BYTE* pKartRefitInfo = p;
		Write16(pKartRefitInfo, 0); //len

		Write32(pKartRefitInfo, 0); //Uin
		Write32(pKartRefitInfo, 0); //KartId
		Write32(pKartRefitInfo, 0); //RefitCout
		Write16(pKartRefitInfo, 0); //MaxFlags
		Write16(pKartRefitInfo, 0); //WWeight
		Write16(pKartRefitInfo, 0); //SpeedWeight
		Write16(pKartRefitInfo, 0); //JetWeight
		Write16(pKartRefitInfo, 0); //SJetWeight
		Write16(pKartRefitInfo, 0); //AccuWeight
		Write32(pKartRefitInfo, 0); //ShapeRefitCount
		Write32(pKartRefitInfo, 0); //KartHeadRefitItemID
		Write32(pKartRefitInfo, 0); //KartTailRefitItemID
		Write32(pKartRefitInfo, 0); //KartFlankRefitItemID
		Write32(pKartRefitInfo, 0); //KartTireRefitItemID
		Write32(pKartRefitInfo, 0); //SecondRefitCount
		Write16(pKartRefitInfo, 0); //Speed2Weight
		Write16(pKartRefitInfo, 0); //DriftVecWeight
		Write16(pKartRefitInfo, 0); //AdditionalZSpeedWeight
		Write16(pKartRefitInfo, 0); //AntiCollisionWeight
		Write16(pKartRefitInfo, 0); //LuckyValue
		Write16(pKartRefitInfo, 0); //RefitLuckyValueMaxWeight
		Write32(pKartRefitInfo, 0); //ShapeSuitID
		Write8(pKartRefitInfo, 0); //LegendSuitLevel
		Write32(pKartRefitInfo, 0); //LegendSuitLevelChoice
		Write32(pKartRefitInfo, 0); //ShapeLegendSuitID

		len = pKartRefitInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //RoomInfoChange
		BYTE* pRoomInfoChange = p;
		Write16(pRoomInfoChange, 0); //len

		Write32(pRoomInfoChange, 0); //TeamJumpLevel
		Write32(pRoomInfoChange, 0); //RoomBGID

		len = pRoomInfoChange - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 500, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestLeaveRoom(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	short LeaveType = Read16(p);
	UCHAR LeaveRoomReason = Read8(p);

}

void ResponseLeaveRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen
	Write16(p, 0); //LeaveType
	Write16(p, 0); //BaseGameMode
	Write16(p, 0); //SubGameMode
	Write8(p, 0); //IsLeaveGVoice

	len = p - buf;
	SendToClient(Client, 105, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyLeaveRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //RoomID
	WriteUn(p, 0); //Uin
	Write8(p, 0); //SeatID
	Write8(p, 0); //IsChangeRoomOwner
	Write16(p, 0); //NewRoomOwnerID
	Write8(p, 0); //Flag
	Write8(p, 0); //HasFBInfo
	for (size_t i = 0; i < n; i++)
	{ //FBInfo
		BYTE* pFBInfo = p;
		Write16(pFBInfo, 0); //len

		Write8(pFBInfo, 0); //AvailableLev
		Write8(pFBInfo, 0); //Lev
		Write8(pFBInfo, 0); //SubLev
		Write32(pFBInfo, 0); //BossID
		Write8(pFBInfo, 0); //FBSeason

		len = pFBInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //LeaveType
	{ //RoomInfoChange
		BYTE* pRoomInfoChange = p;
		Write16(pRoomInfoChange, 0); //len

		Write32(pRoomInfoChange, 0); //TeamJumpLevel
		Write32(pRoomInfoChange, 0); //RoomBGID

		len = pRoomInfoChange - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 501, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestLeaveGame(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	UINT GameSeqIDHigh = Read32(p);
	UINT GameSeqIDLow = Read32(p);
	USHORT LeaveGameType = Read16(p);
	UCHAR ParaNum = Read8(p);
	int[] ParaList[] = Read32(p);

}

void ResponseLeaveGame(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //Uin
	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 424, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestDeleteRole(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	UCHAR DeleteOperation = Read8(p);
	UCHAR ConLen1 = Read8(p);
	UCHAR ConLen2 = Read8(p);

}

void ResponseDeleteRole(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //Uin
	Write8(p, 0); //DeleteOperation
	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen
	Write16(p, 0); //LeftDeletingRoleDays

	len = p - buf;
	SendToClient(Client, 425, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyChangeRoomOwner(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //RoomID
	Write16(p, 0); //NewRoomOwnerID
	Write8(p, 0); //HasFBInfo
	for (size_t i = 0; i < n; i++)
	{ //FBInfo
		BYTE* pFBInfo = p;
		Write16(pFBInfo, 0); //len

		Write8(pFBInfo, 0); //AvailableLev
		Write8(pFBInfo, 0); //Lev
		Write8(pFBInfo, 0); //SubLev
		Write32(pFBInfo, 0); //BossID
		Write8(pFBInfo, 0); //FBSeason

		len = pFBInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //OriRoomOwnerID
	Write8(p, 0); //ChangeType
	Write16(p, 0); //RoomType

	len = p - buf;
	SendToClient(Client, 524, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestChangeRoomOwner(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT NewOwner = Read32(p);

}

void ResponseChangeRoomOwner(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //NewOwner
	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 713, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestChangeTeam(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	bool NewTeamID = Read8(p);

}

void ResponseChangeTeam(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //NewTeamID
	Write8(p, 0); //ReasonLen
	Write8(p, 0); //LoverRaceOrPro

	len = p - buf;
	SendToClient(Client, 128, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyPlayerChangeTeam(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //Uin
	Write8(p, 0); //NewTeamID
	Write8(p, 0); //LoverRaceOrPro

	len = p - buf;
	SendToClient(Client, 523, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestTransferUDPOK(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	short DstDlg = Read16(p);
	Un DstUin = ReadUn(p);
	short InfoLength = Read16(p);

}

void ResponseTransferUDPOK(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 499, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyUDPOK(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //Uin
	WriteUn(p, 0); //Time
	Write16(p, 0); //SrcDlg
	WriteUn(p, 0); //SrcUin
	Write16(p, 0); //InfoLength

	len = p - buf;
	SendToClient(Client, 999, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestQuickEnterRoom(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	short BaseGameMode = Read16(p);
	short SubGameMode = Read16(p);
	bool IsNewerOpen = Read8(p);
	bool FBSeason = Read8(p);
	bool FBLev = Read8(p);
	char HasChangedChannel = Read8(p);
	bool RoomFlag = Read8(p);

}

void ResponseQuickEnterRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //RoomID
	Write16(p, 0); //BaseGameMode
	Write16(p, 0); //SubGameMode
	WriteString(p, 0); //RoomName[]
	Write8(p, 0); //SeatNum
	Write8(p, 0); //Flag
	Write8(p, 0); //SeatID
	Write8(p, 0); //TeamID
	Write32(p, 0); //MapID
	Write16(p, 0); //RoomOwnerID
	Write8(p, 0); //SeatStatus[]
	Write8(p, 0); //PlayerCount
	for (size_t i = 0; i < n; i++)
	{ //PlayerRoomVisibleInfo
		BYTE* pPlayerRoomVisibleInfo = p;
		Write16(pPlayerRoomVisibleInfo, 0); //len

		WriteUn(pPlayerRoomVisibleInfo, 0); //Uin
		WriteUn(pPlayerRoomVisibleInfo, 0); //Identity
		Write8(pPlayerRoomVisibleInfo, 0); //SeatID
		Write8(pPlayerRoomVisibleInfo, 0); //TeamID
		Write16(pPlayerRoomVisibleInfo, 0); //PlayerID
		Write8(pPlayerRoomVisibleInfo, 0); //Status
		{ //PlayerDBBaseInfo
			BYTE* pPlayerDBBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerDBBaseInfo, 0); //len

			WriteString(pPlayerDBBaseInfo, 0); //NickName[]
			Write8(pPlayerDBBaseInfo, 0); //Gender
			Write8(pPlayerDBBaseInfo, 0); //Country
			Write32(pPlayerDBBaseInfo, 0); //License
			WriteUn(pPlayerDBBaseInfo, 0); //Experience
			Write32(pPlayerDBBaseInfo, 0); //SuperMoney
			Write32(pPlayerDBBaseInfo, 0); //Money
			WriteUn(pPlayerDBBaseInfo, 0); //WinNum
			Write32(pPlayerDBBaseInfo, 0); //SecondNum
			Write32(pPlayerDBBaseInfo, 0); //ThirdNum
			WriteUn(pPlayerDBBaseInfo, 0); //TotalNum
			Write32(pPlayerDBBaseInfo, 0); //CurHonor
			Write32(pPlayerDBBaseInfo, 0); //TotalHonor
			Write32(pPlayerDBBaseInfo, 0); //TodayHonor
			Write32(pPlayerDBBaseInfo, 0); //RelaxTime
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationBefore
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationCur
			Write32(pPlayerDBBaseInfo, 0); //Charm
			Write32(pPlayerDBBaseInfo, 0); //DurationGame
			Write32(pPlayerDBBaseInfo, 0); //DanceExp
			Write32(pPlayerDBBaseInfo, 0); //Coupons
			Write32(pPlayerDBBaseInfo, 0); //Admiration
			Write32(pPlayerDBBaseInfo, 0); //LuckMoney
			Write32(pPlayerDBBaseInfo, 0); //TeamWorkExp
			Write32(pPlayerDBBaseInfo, 0); //AchievePoint
			Write32(pPlayerDBBaseInfo, 0); //RegTime
			WriteString(pPlayerDBBaseInfo, 0); //Signature[]
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchPoint
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchNum
			Write16(pPlayerDBBaseInfo, 0); //LuckyMatchFirstNum
			Write8(pPlayerDBBaseInfo, 0); //LuckyMatchBestRand
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchWinNum
			Write32(pPlayerDBBaseInfo, 0); //FizzPointTotal
			Write16(pPlayerDBBaseInfo, 0); //FizzPointDaily
			Write16(pPlayerDBBaseInfo, 0); //FizzPointWeekly
			Write16(pPlayerDBBaseInfo, 0); //FizzPointLastWeek
			Write8(pPlayerDBBaseInfo, 0); //FizzLotteryStatus
			Write32(pPlayerDBBaseInfo, 0); //FizzLastUpdateTime
			Write32(pPlayerDBBaseInfo, 0); //SNSLocaleCode
			Write32(pPlayerDBBaseInfo, 0); //AuctionRightUnlockTime
			Write8(pPlayerDBBaseInfo, 0); //ReserveFlag
			Write32(pPlayerDBBaseInfo, 0); //CurConsumeScore
			Write32(pPlayerDBBaseInfo, 0); //HistoryConsumeScore
			Write8(pPlayerDBBaseInfo, 0); //CrashModeSponsorID
			Write32(pPlayerDBBaseInfo, 0); //Popularity
			Write32(pPlayerDBBaseInfo, 0); //LadderMatchAchievePoint
			Write32(pPlayerDBBaseInfo, 0); //Cash
			Write32(pPlayerDBBaseInfo, 0); //PlayerGPMIdentity
			Write32(pPlayerDBBaseInfo, 0); //PointTotalScore
			WriteUn(pPlayerDBBaseInfo, 0); //totalMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //lastMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalSeasonId
			WriteUn(pPlayerDBBaseInfo, 0); //lastClearMapMedalTime
			WriteUn(pPlayerDBBaseInfo, 0); //max2048Score
			WriteUn(pPlayerDBBaseInfo, 0); //curPlay2048LeftNum
			Write32(pPlayerDBBaseInfo, 0); //CheerValue
			Write16(pPlayerDBBaseInfo, 0); //SeasonID
			Write32(pPlayerDBBaseInfo, 0); //LastCheerValue
			Write32(pPlayerDBBaseInfo, 0); //SpeedBean
			Write32(pPlayerDBBaseInfo, 0); //SpeedCoin

			len = pPlayerDBBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //PlayerGuildInfo
			BYTE* pPlayerGuildInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerGuildInfo, 0); //len

			WriteString(pPlayerGuildInfo, 0); //GuildName[]
			Write16(pPlayerGuildInfo, 0); //Duty
			Write32(pPlayerGuildInfo, 0); //GuildID
			Write32(pPlayerGuildInfo, 0); //Right
			Write32(pPlayerGuildInfo, 0); //Medal
			Write32(pPlayerGuildInfo, 0); //Contribute
			WriteString(pPlayerGuildInfo, 0); //DutyTitle[]

			len = pPlayerGuildInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write16(pPlayerRoomVisibleInfo, 0); //EquipedItemNum
		for (size_t i = 0; i < n; i++)
		{ //PlayerItemInfo
			BYTE* pPlayerItemInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerItemInfo, 0); //len

			Write32(pPlayerItemInfo, 0); //ItemID
			Write32(pPlayerItemInfo, 0); //ItemNum
			Write32(pPlayerItemInfo, 0); //AvailPeriod
			Write8(pPlayerItemInfo, 0); //Status
			WriteUn(pPlayerItemInfo, 0); //ObtainTime
			Write32(pPlayerItemInfo, 0); //OtherAttribute
			Write16(pPlayerItemInfo, 0); //ItemType

			len = pPlayerItemInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write16(pPlayerRoomVisibleInfo, 0); //PetNum
		for (size_t i = 0; i < n; i++)
		{ //PetInfo
			BYTE* pPetInfo = pPlayerRoomVisibleInfo;
			Write16(pPetInfo, 0); //len

			Write32(pPetInfo, 0); //Uin
			Write32(pPetInfo, 0); //PetId
			WriteString(pPetInfo, 0); //PetName[]
			Write8(pPetInfo, 0); //IsProper
			Write16(pPetInfo, 0); //Level
			Write8(pPetInfo, 0); //Status
			Write16(pPetInfo, 0); //PetSkillNum
			for (size_t i = 0; i < n; i++)
			{ //PetSkillList
				BYTE* pPetSkillList = pPetInfo;
				Write16(pPetSkillList, 0); //len

				Write16(pPetSkillList, 0); //SkillID
				Write8(pPetSkillList, 0); //Status
				Write8(pPetSkillList, 0); //Active
				Write32(pPetSkillList, 0); //Value

				len = pPetSkillList - pPetInfo;
				Set16(pPetInfo, (WORD)len);
				pPetInfo += len;
			}
			Write32(pPetInfo, 0); //StrengLevel
			Write8(pPetInfo, 0); //TopStatus
			{ //CommonInfo
				BYTE* pCommonInfo = pPetInfo;
				Write16(pCommonInfo, 0); //len

				Write32(pCommonInfo, 0); //HuanHuaLevel
				Write8(pCommonInfo, 0); //CanHuanHua

				len = pCommonInfo - pPetInfo;
				Set16(pPetInfo, (WORD)len);
				pPetInfo += len;
			}
			Write16(pPetInfo, 0); //PKStar
			Write32(pPetInfo, 0); //PetSkinID

			len = pPetInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //PlayerGuildMatchInfo
			BYTE* pPlayerGuildMatchInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerGuildMatchInfo, 0); //len

			Write32(pPlayerGuildMatchInfo, 0); //SelfPoint
			Write32(pPlayerGuildMatchInfo, 0); //WinNum
			Write32(pPlayerGuildMatchInfo, 0); //TotalNum

			len = pPlayerGuildMatchInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //IsInTopList
		Write8(pPlayerRoomVisibleInfo, 0); //LoverRaceOrPro
		Write8(pPlayerRoomVisibleInfo, 0); //TmpEffectNum
		Write32(pPlayerRoomVisibleInfo, 0); //TmpEffectItems[]
		Write8(pPlayerRoomVisibleInfo, 0); //OBState
		Write8(pPlayerRoomVisibleInfo, 0); //DebutOrX5
		Write8(pPlayerRoomVisibleInfo, 0); //RandKeyFlag
		WriteUn(pPlayerRoomVisibleInfo, 0); //VipFlag
		Write8(pPlayerRoomVisibleInfo, 0); //HaveAppellation
		for (size_t i = 0; i < n; i++)
		{ //CurAppellation
			BYTE* pCurAppellation = pPlayerRoomVisibleInfo;
			Write16(pCurAppellation, 0); //len

			Write8(pCurAppellation, 0); //Type
			Write8(pCurAppellation, 0); //Level
			Write8(pCurAppellation, 0); //Status
			Write8(pCurAppellation, 0); //Difficulty
			Write32(pCurAppellation, 0); //MapId
			Write32(pCurAppellation, 0); //Value

			len = pCurAppellation - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //NobleInfo
			BYTE* pNobleInfo = pPlayerRoomVisibleInfo;
			Write16(pNobleInfo, 0); //len

			Write32(pNobleInfo, 0); //NobleID
			Write8(pNobleInfo, 0); //NobleLevel
			Write32(pNobleInfo, 0); //NoblePoint
			Write32(pNobleInfo, 0); //NobleLeftDays

			len = pNobleInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasCarryWizard
		for (size_t i = 0; i < n; i++)
		{ //CarryWizardInfo
			BYTE* pCarryWizardInfo = pPlayerRoomVisibleInfo;
			Write16(pCarryWizardInfo, 0); //len

			Write16(pCarryWizardInfo, 0); //WizardID
			WriteString(pCarryWizardInfo, 0); //NickName[]
			Write16(pCarryWizardInfo, 0); //WizardType
			Write8(pCarryWizardInfo, 0); //Order
			Write8(pCarryWizardInfo, 0); //EvolutionBranch
			Write8(pCarryWizardInfo, 0); //IsHuanHua

			len = pCarryWizardInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //GuildVipBaseInfo
			BYTE* pGuildVipBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pGuildVipBaseInfo, 0); //len

			Write8(pGuildVipBaseInfo, 0); //GuildVipLevel
			Write32(pGuildVipBaseInfo, 0); //GuildVipPoint

			len = pGuildVipBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write32(pPlayerRoomVisibleInfo, 0); //ExFlag
		Write8(pPlayerRoomVisibleInfo, 0); //HaveLDMBaseInfo
		for (size_t i = 0; i < n; i++)
		{ //PlayerLDMBaseInfo
			BYTE* pPlayerLDMBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerLDMBaseInfo, 0); //len

			Write8(pPlayerLDMBaseInfo, 0); //Grade
			Write32(pPlayerLDMBaseInfo, 0); //Score
			Write32(pPlayerLDMBaseInfo, 0); //MaxScore
			Write32(pPlayerLDMBaseInfo, 0); //MaxGrade

			len = pPlayerLDMBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasWl
		for (size_t i = 0; i < n; i++)
		{ //PlayerWlVisibleInfo
			BYTE* pPlayerWlVisibleInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerWlVisibleInfo, 0); //len

			Write32(pPlayerWlVisibleInfo, 0); //WonderLandID
			WriteString(pPlayerWlVisibleInfo, 0); //WonderLandName[]
			Write16(pPlayerWlVisibleInfo, 0); //WonderLandDuty
			Write8(pPlayerWlVisibleInfo, 0); //SubType
			Write8(pPlayerWlVisibleInfo, 0); //GuildGrade

			len = pPlayerWlVisibleInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasLoverVip
		for (size_t i = 0; i < n; i++)
		{ //LoverVipInfo
			BYTE* pLoverVipInfo = pPlayerRoomVisibleInfo;
			Write16(pLoverVipInfo, 0); //len

			Write8(pLoverVipInfo, 0); //LoverVipLevel
			Write32(pLoverVipInfo, 0); //LoverVipPoint
			Write8(pLoverVipInfo, 0); //GrowRate

			len = pLoverVipInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasBattleModeSkillInfoList
		for (size_t i = 0; i < n; i++)
		{ //BattleModeSkillInfoList
			BYTE* pBattleModeSkillInfoList = pPlayerRoomVisibleInfo;
			Write16(pBattleModeSkillInfoList, 0); //len

			Write8(pBattleModeSkillInfoList, 0); //SkillNum
			for (size_t i = 0; i < n; i++)
			{ //SkillInfo
				BYTE* pSkillInfo = pBattleModeSkillInfoList;
				Write16(pSkillInfo, 0); //len

				Write16(pSkillInfo, 0); //SkillId
				Write8(pSkillInfo, 0); //SkillLevel

				len = pSkillInfo - pBattleModeSkillInfoList;
				Set16(pBattleModeSkillInfoList, (WORD)len);
				pBattleModeSkillInfoList += len;
			}

			len = pBattleModeSkillInfoList - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasGarden
		for (size_t i = 0; i < n; i++)
		{ //PersonalGardenBaseInfo
			BYTE* pPersonalGardenBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pPersonalGardenBaseInfo, 0); //len

			Write8(pPersonalGardenBaseInfo, 0); //GardenLevel
			Write32(pPersonalGardenBaseInfo, 0); //GardenPoint
			Write8(pPersonalGardenBaseInfo, 0); //GrowRate
			Write32(pPersonalGardenBaseInfo, 0); //GardenExpireTime
			{ //SimpleInfo
				BYTE* pSimpleInfo = pPersonalGardenBaseInfo;
				Write16(pSimpleInfo, 0); //len

				Write32(pSimpleInfo, 0); //WeekPopularity
				Write32(pSimpleInfo, 0); //TotalPopularity
				Write32(pSimpleInfo, 0); //LastUpdatePopularityTime
				Write8(pSimpleInfo, 0); //PrivateType

				len = pSimpleInfo - pPersonalGardenBaseInfo;
				Set16(pPersonalGardenBaseInfo, (WORD)len);
				pPersonalGardenBaseInfo += len;
			}

			len = pPersonalGardenBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //ConsumeVipInfo
			BYTE* pConsumeVipInfo = pPlayerRoomVisibleInfo;
			Write16(pConsumeVipInfo, 0); //len

			WriteUn(pConsumeVipInfo, 0); //VipLevel
			WriteUn(pConsumeVipInfo, 0); //CharmValueOfMonth
			WriteUn(pConsumeVipInfo, 0); //SearchTreasureNums
			WriteUn(pConsumeVipInfo, 0); //GetTreasureNums

			len = pConsumeVipInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HaveBaby
		{ //LoverBabyInfo
			BYTE* pLoverBabyInfo = pPlayerRoomVisibleInfo;
			Write16(pLoverBabyInfo, 0); //len

			Write32(pLoverBabyInfo, 0); //LoverBabyID
			Write32(pLoverBabyInfo, 0); //ItemID
			Write32(pLoverBabyInfo, 0); //GrowValue
			Write32(pLoverBabyInfo, 0); //MentalValue
			Write32(pLoverBabyInfo, 0); //BabyProfileLevel
			Write32(pLoverBabyInfo, 0); //StrengthLevel
			Write32(pLoverBabyInfo, 0); //GrowLevel
			WriteString(pLoverBabyInfo, 0); //LoveBabyNickName[]
			Write16(pLoverBabyInfo, 0); //LoverBabyStat
			Write16(pLoverBabyInfo, 0); //LoverBabyEquipStat
			Write16(pLoverBabyInfo, 0); //LoverBabyTransferdStatus

			len = pLoverBabyInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //EmperorInfo
			BYTE* pEmperorInfo = pPlayerRoomVisibleInfo;
			Write16(pEmperorInfo, 0); //len

			Write8(pEmperorInfo, 0); //EmperorLevel
			Write32(pEmperorInfo, 0); //EmperorPoint
			Write32(pEmperorInfo, 0); //EmperorLeftDays
			Write8(pEmperorInfo, 0); //EmperorGrowRate

			len = pEmperorInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write16(pPlayerRoomVisibleInfo, 0); //RaceCardNums
		for (size_t i = 0; i < n; i++)
		{ //RaceCardAddValueInfo
			BYTE* pRaceCardAddValueInfo = pPlayerRoomVisibleInfo;
			Write16(pRaceCardAddValueInfo, 0); //len

			Write32(pRaceCardAddValueInfo, 0); //RaceCardID
			Write32(pRaceCardAddValueInfo, 0); //AddValue

			len = pRaceCardAddValueInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //GansterScoreInfo
			BYTE* pGansterScoreInfo = pPlayerRoomVisibleInfo;
			Write16(pGansterScoreInfo, 0); //len

			Write32(pGansterScoreInfo, 0); //GansterSeasonID
			Write32(pGansterScoreInfo, 0); //GansterScore
			Write32(pGansterScoreInfo, 0); //PoliceScore
			Write32(pGansterScoreInfo, 0); //TotalGansterScore

			len = pGansterScoreInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write32(pPlayerRoomVisibleInfo, 0); //OlympicId
		Write32(pPlayerRoomVisibleInfo, 0); //NPCEliminateWinTimes
		Write8(pPlayerRoomVisibleInfo, 0); //OriginTeamID
		Write8(pPlayerRoomVisibleInfo, 0); //NxNpc
		Write16(pPlayerRoomVisibleInfo, 0); //NxNpcAILevel
		{ //EquippedActiveKartInfo
			BYTE* pEquippedActiveKartInfo = pPlayerRoomVisibleInfo;
			Write16(pEquippedActiveKartInfo, 0); //len

			Write8(pEquippedActiveKartInfo, 0); //HaveActiveInfo
			Write32(pEquippedActiveKartInfo, 0); //KartID
			Write32(pEquippedActiveKartInfo, 0); //ActiveLevel

			len = pEquippedActiveKartInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //SpecialActivityStatus
		Write8(pPlayerRoomVisibleInfo, 0); //AreaID
		Write8(pPlayerRoomVisibleInfo, 0); //HaveRaiseSecondBaby
		{ //SecondLoverBabyInfo
			BYTE* pSecondLoverBabyInfo = pPlayerRoomVisibleInfo;
			Write16(pSecondLoverBabyInfo, 0); //len

			Write32(pSecondLoverBabyInfo, 0); //LoverBabyID
			Write32(pSecondLoverBabyInfo, 0); //ItemID
			Write32(pSecondLoverBabyInfo, 0); //GrowValue
			Write32(pSecondLoverBabyInfo, 0); //MentalValue
			Write32(pSecondLoverBabyInfo, 0); //BabyProfileLevel
			Write32(pSecondLoverBabyInfo, 0); //StrengthLevel
			Write32(pSecondLoverBabyInfo, 0); //GrowLevel
			WriteString(pSecondLoverBabyInfo, 0); //LoveBabyNickName[]
			Write16(pSecondLoverBabyInfo, 0); //LoverBabyStat
			Write16(pSecondLoverBabyInfo, 0); //LoverBabyEquipStat
			Write16(pSecondLoverBabyInfo, 0); //LoverBabyTransferdStatus

			len = pSecondLoverBabyInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasRankedMatchInfo
		for (size_t i = 0; i < n; i++)
		{ //RankedMatchGradeInfo
			BYTE* pRankedMatchGradeInfo = pPlayerRoomVisibleInfo;
			Write16(pRankedMatchGradeInfo, 0); //len

			Write32(pRankedMatchGradeInfo, 0); //GradeLevel
			Write32(pRankedMatchGradeInfo, 0); //ChildLevel
			Write32(pRankedMatchGradeInfo, 0); //GradeScore
			Write32(pRankedMatchGradeInfo, 0); //MaxGradeScore
			Write32(pRankedMatchGradeInfo, 0); //TotalScore

			len = pRankedMatchGradeInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasHuanLingChangeInfo
		for (size_t i = 0; i < n; i++)
		{ //HuanLingSuitInfo
			BYTE* pHuanLingSuitInfo = pPlayerRoomVisibleInfo;
			Write16(pHuanLingSuitInfo, 0); //len

			Write32(pHuanLingSuitInfo, 0); //SuitID
			Write8(pHuanLingSuitInfo, 0); //ChangeLevel

			len = pHuanLingSuitInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //EquipSealType
		Write16(pPlayerRoomVisibleInfo, 0); //Role
		Write8(pPlayerRoomVisibleInfo, 0); //SpecialActivityIDNum
		Write8(pPlayerRoomVisibleInfo, 0); //CrewID
		Write8(pPlayerRoomVisibleInfo, 0); //SpecialActivityInfoNum
		for (size_t i = 0; i < n; i++)
		{ //SpecialActivityInfo
			BYTE* pSpecialActivityInfo = pPlayerRoomVisibleInfo;
			Write16(pSpecialActivityInfo, 0); //len

			Write8(pSpecialActivityInfo, 0); //ProfessionLicenseInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ProfessionLicenseInfo
				BYTE* pProfessionLicenseInfo = pSpecialActivityInfo;
				Write16(pProfessionLicenseInfo, 0); //len

				Write8(pProfessionLicenseInfo, 0); //BigLevel
				Write8(pProfessionLicenseInfo, 0); //SmallLevel

				len = pProfessionLicenseInfo - pSpecialActivityInfo;
				Set16(pSpecialActivityInfo, (WORD)len);
				pSpecialActivityInfo += len;
			}

			len = pSpecialActivityInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //ParaNum
		Write32(pPlayerRoomVisibleInfo, 0); //ParaList[]
		Write8(pPlayerRoomVisibleInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemOrder
			BYTE* pItemOrder = pPlayerRoomVisibleInfo;
			Write16(pItemOrder, 0); //len

			Write32(pItemOrder, 0); //KartID
			Write32(pItemOrder, 0); //Order
			Write32(pItemOrder, 0); //BackGroundID

			len = pItemOrder - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //TDCExcluItemNum
		Write32(pPlayerRoomVisibleInfo, 0); //TDCExclusiveItemID[]
		Write8(pPlayerRoomVisibleInfo, 0); //EquipNiChangItemNum
		for (size_t i = 0; i < n; i++)
		{ //NiChangPavilionEquipItemInfo
			BYTE* pNiChangPavilionEquipItemInfo = pPlayerRoomVisibleInfo;
			Write16(pNiChangPavilionEquipItemInfo, 0); //len

			Write32(pNiChangPavilionEquipItemInfo, 0); //ItemId
			Write16(pNiChangPavilionEquipItemInfo, 0); //CurrentEquipColorationPlanId

			len = pNiChangPavilionEquipItemInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //TestKartGameType
		Write32(pPlayerRoomVisibleInfo, 0); //GameTestKartID
		Write8(pPlayerRoomVisibleInfo, 0); //HasStarsFightingInfo
		for (size_t i = 0; i < n; i++)
		{ //StarsFightingInfo
			BYTE* pStarsFightingInfo = pPlayerRoomVisibleInfo;
			Write16(pStarsFightingInfo, 0); //len

			Write32(pStarsFightingInfo, 0); //Star
			Write32(pStarsFightingInfo, 0); //StarVal
			Write32(pStarsFightingInfo, 0); //StarsFightingStarLevel

			len = pStarsFightingInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //RoomBGSetting

		len = pPlayerRoomVisibleInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen
	Write8(p, 0); //PlayerCount2
	for (size_t i = 0; i < n; i++)
	{ //PlayerRelationInfo
		BYTE* pPlayerRelationInfo = p;
		Write16(pPlayerRelationInfo, 0); //len

		Write32(pPlayerRelationInfo, 0); //SrcUin
		Write32(pPlayerRelationInfo, 0); //RelationFlag
		Write32(pPlayerRelationInfo, 0); //RelationUin
		WriteString(pPlayerRelationInfo, 0); //RelationNickName[]
		Write32(pPlayerRelationInfo, 0); //EngageTime
		Write32(pPlayerRelationInfo, 0); //NextCanBookingTimeLimit
		Write32(pPlayerRelationInfo, 0); //BeginHoneyMoonTime
		Write32(pPlayerRelationInfo, 0); //EndHoneyMoonTime
		Write8(pPlayerRelationInfo, 0); //EngageFlag

		len = pPlayerRelationInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //KartNum
	for (size_t i = 0; i < n; i++)
	{ //KartRefitInfo
		BYTE* pKartRefitInfo = p;
		Write16(pKartRefitInfo, 0); //len

		Write32(pKartRefitInfo, 0); //Uin
		Write32(pKartRefitInfo, 0); //KartId
		Write32(pKartRefitInfo, 0); //RefitCout
		Write16(pKartRefitInfo, 0); //MaxFlags
		Write16(pKartRefitInfo, 0); //WWeight
		Write16(pKartRefitInfo, 0); //SpeedWeight
		Write16(pKartRefitInfo, 0); //JetWeight
		Write16(pKartRefitInfo, 0); //SJetWeight
		Write16(pKartRefitInfo, 0); //AccuWeight
		Write32(pKartRefitInfo, 0); //ShapeRefitCount
		Write32(pKartRefitInfo, 0); //KartHeadRefitItemID
		Write32(pKartRefitInfo, 0); //KartTailRefitItemID
		Write32(pKartRefitInfo, 0); //KartFlankRefitItemID
		Write32(pKartRefitInfo, 0); //KartTireRefitItemID
		Write32(pKartRefitInfo, 0); //SecondRefitCount
		Write16(pKartRefitInfo, 0); //Speed2Weight
		Write16(pKartRefitInfo, 0); //DriftVecWeight
		Write16(pKartRefitInfo, 0); //AdditionalZSpeedWeight
		Write16(pKartRefitInfo, 0); //AntiCollisionWeight
		Write16(pKartRefitInfo, 0); //LuckyValue
		Write16(pKartRefitInfo, 0); //RefitLuckyValueMaxWeight
		Write32(pKartRefitInfo, 0); //ShapeSuitID
		Write8(pKartRefitInfo, 0); //LegendSuitLevel
		Write32(pKartRefitInfo, 0); //LegendSuitLevelChoice
		Write32(pKartRefitInfo, 0); //ShapeLegendSuitID

		len = pKartRefitInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //LoverRaceOrPro
	{ //STDynamicInfo
		BYTE* pSTDynamicInfo = p;
		Write16(pSTDynamicInfo, 0); //len

		Write8(pSTDynamicInfo, 0); //Season
		Write8(pSTDynamicInfo, 0); //Timeslot
		Write8(pSTDynamicInfo, 0); //Weather

		len = pSTDynamicInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //PreKnowMapID
	Write8(p, 0); //HasMoreInfo
	Write32(p, 0); //MapSubID
	Write8(p, 0); //HasFBInfo
	for (size_t i = 0; i < n; i++)
	{ //FBInfo
		BYTE* pFBInfo = p;
		Write16(pFBInfo, 0); //len

		Write8(pFBInfo, 0); //AvailableLev
		Write8(pFBInfo, 0); //Lev
		Write8(pFBInfo, 0); //SubLev
		Write32(pFBInfo, 0); //BossID
		Write8(pFBInfo, 0); //FBSeason

		len = pFBInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //GuildScoreInNextGame
	Write16(p, 0); //GuildScoreAlreadyAward
	Write16(p, 0); //GuildScoreTotalAward
	Write8(p, 0); //SpeFlag
	Write32(p, 0); //RoomNo
	Write16(p, 0); //SvrId
	Write8(p, 0); //RoomFlag
	Write8(p, 0); //MaxOBNum
	Write8(p, 0); //AllowAutoStart
	Write8(p, 0); //TalkRoomBGID

	len = p - buf;
	SendToClient(Client, 106, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyQuickEnterRoomMoreInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //PlayerCount
	for (size_t i = 0; i < n; i++)
	{ //PlayerRoomVisibleInfo
		BYTE* pPlayerRoomVisibleInfo = p;
		Write16(pPlayerRoomVisibleInfo, 0); //len

		WriteUn(pPlayerRoomVisibleInfo, 0); //Uin
		WriteUn(pPlayerRoomVisibleInfo, 0); //Identity
		Write8(pPlayerRoomVisibleInfo, 0); //SeatID
		Write8(pPlayerRoomVisibleInfo, 0); //TeamID
		Write16(pPlayerRoomVisibleInfo, 0); //PlayerID
		Write8(pPlayerRoomVisibleInfo, 0); //Status
		{ //PlayerDBBaseInfo
			BYTE* pPlayerDBBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerDBBaseInfo, 0); //len

			WriteString(pPlayerDBBaseInfo, 0); //NickName[]
			Write8(pPlayerDBBaseInfo, 0); //Gender
			Write8(pPlayerDBBaseInfo, 0); //Country
			Write32(pPlayerDBBaseInfo, 0); //License
			WriteUn(pPlayerDBBaseInfo, 0); //Experience
			Write32(pPlayerDBBaseInfo, 0); //SuperMoney
			Write32(pPlayerDBBaseInfo, 0); //Money
			WriteUn(pPlayerDBBaseInfo, 0); //WinNum
			Write32(pPlayerDBBaseInfo, 0); //SecondNum
			Write32(pPlayerDBBaseInfo, 0); //ThirdNum
			WriteUn(pPlayerDBBaseInfo, 0); //TotalNum
			Write32(pPlayerDBBaseInfo, 0); //CurHonor
			Write32(pPlayerDBBaseInfo, 0); //TotalHonor
			Write32(pPlayerDBBaseInfo, 0); //TodayHonor
			Write32(pPlayerDBBaseInfo, 0); //RelaxTime
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationBefore
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationCur
			Write32(pPlayerDBBaseInfo, 0); //Charm
			Write32(pPlayerDBBaseInfo, 0); //DurationGame
			Write32(pPlayerDBBaseInfo, 0); //DanceExp
			Write32(pPlayerDBBaseInfo, 0); //Coupons
			Write32(pPlayerDBBaseInfo, 0); //Admiration
			Write32(pPlayerDBBaseInfo, 0); //LuckMoney
			Write32(pPlayerDBBaseInfo, 0); //TeamWorkExp
			Write32(pPlayerDBBaseInfo, 0); //AchievePoint
			Write32(pPlayerDBBaseInfo, 0); //RegTime
			WriteString(pPlayerDBBaseInfo, 0); //Signature[]
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchPoint
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchNum
			Write16(pPlayerDBBaseInfo, 0); //LuckyMatchFirstNum
			Write8(pPlayerDBBaseInfo, 0); //LuckyMatchBestRand
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchWinNum
			Write32(pPlayerDBBaseInfo, 0); //FizzPointTotal
			Write16(pPlayerDBBaseInfo, 0); //FizzPointDaily
			Write16(pPlayerDBBaseInfo, 0); //FizzPointWeekly
			Write16(pPlayerDBBaseInfo, 0); //FizzPointLastWeek
			Write8(pPlayerDBBaseInfo, 0); //FizzLotteryStatus
			Write32(pPlayerDBBaseInfo, 0); //FizzLastUpdateTime
			Write32(pPlayerDBBaseInfo, 0); //SNSLocaleCode
			Write32(pPlayerDBBaseInfo, 0); //AuctionRightUnlockTime
			Write8(pPlayerDBBaseInfo, 0); //ReserveFlag
			Write32(pPlayerDBBaseInfo, 0); //CurConsumeScore
			Write32(pPlayerDBBaseInfo, 0); //HistoryConsumeScore
			Write8(pPlayerDBBaseInfo, 0); //CrashModeSponsorID
			Write32(pPlayerDBBaseInfo, 0); //Popularity
			Write32(pPlayerDBBaseInfo, 0); //LadderMatchAchievePoint
			Write32(pPlayerDBBaseInfo, 0); //Cash
			Write32(pPlayerDBBaseInfo, 0); //PlayerGPMIdentity
			Write32(pPlayerDBBaseInfo, 0); //PointTotalScore
			WriteUn(pPlayerDBBaseInfo, 0); //totalMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //lastMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalSeasonId
			WriteUn(pPlayerDBBaseInfo, 0); //lastClearMapMedalTime
			WriteUn(pPlayerDBBaseInfo, 0); //max2048Score
			WriteUn(pPlayerDBBaseInfo, 0); //curPlay2048LeftNum
			Write32(pPlayerDBBaseInfo, 0); //CheerValue
			Write16(pPlayerDBBaseInfo, 0); //SeasonID
			Write32(pPlayerDBBaseInfo, 0); //LastCheerValue
			Write32(pPlayerDBBaseInfo, 0); //SpeedBean
			Write32(pPlayerDBBaseInfo, 0); //SpeedCoin

			len = pPlayerDBBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //PlayerGuildInfo
			BYTE* pPlayerGuildInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerGuildInfo, 0); //len

			WriteString(pPlayerGuildInfo, 0); //GuildName[]
			Write16(pPlayerGuildInfo, 0); //Duty
			Write32(pPlayerGuildInfo, 0); //GuildID
			Write32(pPlayerGuildInfo, 0); //Right
			Write32(pPlayerGuildInfo, 0); //Medal
			Write32(pPlayerGuildInfo, 0); //Contribute
			WriteString(pPlayerGuildInfo, 0); //DutyTitle[]

			len = pPlayerGuildInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write16(pPlayerRoomVisibleInfo, 0); //EquipedItemNum
		for (size_t i = 0; i < n; i++)
		{ //PlayerItemInfo
			BYTE* pPlayerItemInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerItemInfo, 0); //len

			Write32(pPlayerItemInfo, 0); //ItemID
			Write32(pPlayerItemInfo, 0); //ItemNum
			Write32(pPlayerItemInfo, 0); //AvailPeriod
			Write8(pPlayerItemInfo, 0); //Status
			WriteUn(pPlayerItemInfo, 0); //ObtainTime
			Write32(pPlayerItemInfo, 0); //OtherAttribute
			Write16(pPlayerItemInfo, 0); //ItemType

			len = pPlayerItemInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write16(pPlayerRoomVisibleInfo, 0); //PetNum
		for (size_t i = 0; i < n; i++)
		{ //PetInfo
			BYTE* pPetInfo = pPlayerRoomVisibleInfo;
			Write16(pPetInfo, 0); //len

			Write32(pPetInfo, 0); //Uin
			Write32(pPetInfo, 0); //PetId
			WriteString(pPetInfo, 0); //PetName[]
			Write8(pPetInfo, 0); //IsProper
			Write16(pPetInfo, 0); //Level
			Write8(pPetInfo, 0); //Status
			Write16(pPetInfo, 0); //PetSkillNum
			for (size_t i = 0; i < n; i++)
			{ //PetSkillList
				BYTE* pPetSkillList = pPetInfo;
				Write16(pPetSkillList, 0); //len

				Write16(pPetSkillList, 0); //SkillID
				Write8(pPetSkillList, 0); //Status
				Write8(pPetSkillList, 0); //Active
				Write32(pPetSkillList, 0); //Value

				len = pPetSkillList - pPetInfo;
				Set16(pPetInfo, (WORD)len);
				pPetInfo += len;
			}
			Write32(pPetInfo, 0); //StrengLevel
			Write8(pPetInfo, 0); //TopStatus
			{ //CommonInfo
				BYTE* pCommonInfo = pPetInfo;
				Write16(pCommonInfo, 0); //len

				Write32(pCommonInfo, 0); //HuanHuaLevel
				Write8(pCommonInfo, 0); //CanHuanHua

				len = pCommonInfo - pPetInfo;
				Set16(pPetInfo, (WORD)len);
				pPetInfo += len;
			}
			Write16(pPetInfo, 0); //PKStar
			Write32(pPetInfo, 0); //PetSkinID

			len = pPetInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //PlayerGuildMatchInfo
			BYTE* pPlayerGuildMatchInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerGuildMatchInfo, 0); //len

			Write32(pPlayerGuildMatchInfo, 0); //SelfPoint
			Write32(pPlayerGuildMatchInfo, 0); //WinNum
			Write32(pPlayerGuildMatchInfo, 0); //TotalNum

			len = pPlayerGuildMatchInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //IsInTopList
		Write8(pPlayerRoomVisibleInfo, 0); //LoverRaceOrPro
		Write8(pPlayerRoomVisibleInfo, 0); //TmpEffectNum
		Write32(pPlayerRoomVisibleInfo, 0); //TmpEffectItems[]
		Write8(pPlayerRoomVisibleInfo, 0); //OBState
		Write8(pPlayerRoomVisibleInfo, 0); //DebutOrX5
		Write8(pPlayerRoomVisibleInfo, 0); //RandKeyFlag
		WriteUn(pPlayerRoomVisibleInfo, 0); //VipFlag
		Write8(pPlayerRoomVisibleInfo, 0); //HaveAppellation
		for (size_t i = 0; i < n; i++)
		{ //CurAppellation
			BYTE* pCurAppellation = pPlayerRoomVisibleInfo;
			Write16(pCurAppellation, 0); //len

			Write8(pCurAppellation, 0); //Type
			Write8(pCurAppellation, 0); //Level
			Write8(pCurAppellation, 0); //Status
			Write8(pCurAppellation, 0); //Difficulty
			Write32(pCurAppellation, 0); //MapId
			Write32(pCurAppellation, 0); //Value

			len = pCurAppellation - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //NobleInfo
			BYTE* pNobleInfo = pPlayerRoomVisibleInfo;
			Write16(pNobleInfo, 0); //len

			Write32(pNobleInfo, 0); //NobleID
			Write8(pNobleInfo, 0); //NobleLevel
			Write32(pNobleInfo, 0); //NoblePoint
			Write32(pNobleInfo, 0); //NobleLeftDays

			len = pNobleInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasCarryWizard
		for (size_t i = 0; i < n; i++)
		{ //CarryWizardInfo
			BYTE* pCarryWizardInfo = pPlayerRoomVisibleInfo;
			Write16(pCarryWizardInfo, 0); //len

			Write16(pCarryWizardInfo, 0); //WizardID
			WriteString(pCarryWizardInfo, 0); //NickName[]
			Write16(pCarryWizardInfo, 0); //WizardType
			Write8(pCarryWizardInfo, 0); //Order
			Write8(pCarryWizardInfo, 0); //EvolutionBranch
			Write8(pCarryWizardInfo, 0); //IsHuanHua

			len = pCarryWizardInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //GuildVipBaseInfo
			BYTE* pGuildVipBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pGuildVipBaseInfo, 0); //len

			Write8(pGuildVipBaseInfo, 0); //GuildVipLevel
			Write32(pGuildVipBaseInfo, 0); //GuildVipPoint

			len = pGuildVipBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write32(pPlayerRoomVisibleInfo, 0); //ExFlag
		Write8(pPlayerRoomVisibleInfo, 0); //HaveLDMBaseInfo
		for (size_t i = 0; i < n; i++)
		{ //PlayerLDMBaseInfo
			BYTE* pPlayerLDMBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerLDMBaseInfo, 0); //len

			Write8(pPlayerLDMBaseInfo, 0); //Grade
			Write32(pPlayerLDMBaseInfo, 0); //Score
			Write32(pPlayerLDMBaseInfo, 0); //MaxScore
			Write32(pPlayerLDMBaseInfo, 0); //MaxGrade

			len = pPlayerLDMBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasWl
		for (size_t i = 0; i < n; i++)
		{ //PlayerWlVisibleInfo
			BYTE* pPlayerWlVisibleInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerWlVisibleInfo, 0); //len

			Write32(pPlayerWlVisibleInfo, 0); //WonderLandID
			WriteString(pPlayerWlVisibleInfo, 0); //WonderLandName[]
			Write16(pPlayerWlVisibleInfo, 0); //WonderLandDuty
			Write8(pPlayerWlVisibleInfo, 0); //SubType
			Write8(pPlayerWlVisibleInfo, 0); //GuildGrade

			len = pPlayerWlVisibleInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasLoverVip
		for (size_t i = 0; i < n; i++)
		{ //LoverVipInfo
			BYTE* pLoverVipInfo = pPlayerRoomVisibleInfo;
			Write16(pLoverVipInfo, 0); //len

			Write8(pLoverVipInfo, 0); //LoverVipLevel
			Write32(pLoverVipInfo, 0); //LoverVipPoint
			Write8(pLoverVipInfo, 0); //GrowRate

			len = pLoverVipInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasBattleModeSkillInfoList
		for (size_t i = 0; i < n; i++)
		{ //BattleModeSkillInfoList
			BYTE* pBattleModeSkillInfoList = pPlayerRoomVisibleInfo;
			Write16(pBattleModeSkillInfoList, 0); //len

			Write8(pBattleModeSkillInfoList, 0); //SkillNum
			for (size_t i = 0; i < n; i++)
			{ //SkillInfo
				BYTE* pSkillInfo = pBattleModeSkillInfoList;
				Write16(pSkillInfo, 0); //len

				Write16(pSkillInfo, 0); //SkillId
				Write8(pSkillInfo, 0); //SkillLevel

				len = pSkillInfo - pBattleModeSkillInfoList;
				Set16(pBattleModeSkillInfoList, (WORD)len);
				pBattleModeSkillInfoList += len;
			}

			len = pBattleModeSkillInfoList - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasGarden
		for (size_t i = 0; i < n; i++)
		{ //PersonalGardenBaseInfo
			BYTE* pPersonalGardenBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pPersonalGardenBaseInfo, 0); //len

			Write8(pPersonalGardenBaseInfo, 0); //GardenLevel
			Write32(pPersonalGardenBaseInfo, 0); //GardenPoint
			Write8(pPersonalGardenBaseInfo, 0); //GrowRate
			Write32(pPersonalGardenBaseInfo, 0); //GardenExpireTime
			{ //SimpleInfo
				BYTE* pSimpleInfo = pPersonalGardenBaseInfo;
				Write16(pSimpleInfo, 0); //len

				Write32(pSimpleInfo, 0); //WeekPopularity
				Write32(pSimpleInfo, 0); //TotalPopularity
				Write32(pSimpleInfo, 0); //LastUpdatePopularityTime
				Write8(pSimpleInfo, 0); //PrivateType

				len = pSimpleInfo - pPersonalGardenBaseInfo;
				Set16(pPersonalGardenBaseInfo, (WORD)len);
				pPersonalGardenBaseInfo += len;
			}

			len = pPersonalGardenBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //ConsumeVipInfo
			BYTE* pConsumeVipInfo = pPlayerRoomVisibleInfo;
			Write16(pConsumeVipInfo, 0); //len

			WriteUn(pConsumeVipInfo, 0); //VipLevel
			WriteUn(pConsumeVipInfo, 0); //CharmValueOfMonth
			WriteUn(pConsumeVipInfo, 0); //SearchTreasureNums
			WriteUn(pConsumeVipInfo, 0); //GetTreasureNums

			len = pConsumeVipInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HaveBaby
		{ //LoverBabyInfo
			BYTE* pLoverBabyInfo = pPlayerRoomVisibleInfo;
			Write16(pLoverBabyInfo, 0); //len

			Write32(pLoverBabyInfo, 0); //LoverBabyID
			Write32(pLoverBabyInfo, 0); //ItemID
			Write32(pLoverBabyInfo, 0); //GrowValue
			Write32(pLoverBabyInfo, 0); //MentalValue
			Write32(pLoverBabyInfo, 0); //BabyProfileLevel
			Write32(pLoverBabyInfo, 0); //StrengthLevel
			Write32(pLoverBabyInfo, 0); //GrowLevel
			WriteString(pLoverBabyInfo, 0); //LoveBabyNickName[]
			Write16(pLoverBabyInfo, 0); //LoverBabyStat
			Write16(pLoverBabyInfo, 0); //LoverBabyEquipStat
			Write16(pLoverBabyInfo, 0); //LoverBabyTransferdStatus

			len = pLoverBabyInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //EmperorInfo
			BYTE* pEmperorInfo = pPlayerRoomVisibleInfo;
			Write16(pEmperorInfo, 0); //len

			Write8(pEmperorInfo, 0); //EmperorLevel
			Write32(pEmperorInfo, 0); //EmperorPoint
			Write32(pEmperorInfo, 0); //EmperorLeftDays
			Write8(pEmperorInfo, 0); //EmperorGrowRate

			len = pEmperorInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write16(pPlayerRoomVisibleInfo, 0); //RaceCardNums
		for (size_t i = 0; i < n; i++)
		{ //RaceCardAddValueInfo
			BYTE* pRaceCardAddValueInfo = pPlayerRoomVisibleInfo;
			Write16(pRaceCardAddValueInfo, 0); //len

			Write32(pRaceCardAddValueInfo, 0); //RaceCardID
			Write32(pRaceCardAddValueInfo, 0); //AddValue

			len = pRaceCardAddValueInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //GansterScoreInfo
			BYTE* pGansterScoreInfo = pPlayerRoomVisibleInfo;
			Write16(pGansterScoreInfo, 0); //len

			Write32(pGansterScoreInfo, 0); //GansterSeasonID
			Write32(pGansterScoreInfo, 0); //GansterScore
			Write32(pGansterScoreInfo, 0); //PoliceScore
			Write32(pGansterScoreInfo, 0); //TotalGansterScore

			len = pGansterScoreInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write32(pPlayerRoomVisibleInfo, 0); //OlympicId
		Write32(pPlayerRoomVisibleInfo, 0); //NPCEliminateWinTimes
		Write8(pPlayerRoomVisibleInfo, 0); //OriginTeamID
		Write8(pPlayerRoomVisibleInfo, 0); //NxNpc
		Write16(pPlayerRoomVisibleInfo, 0); //NxNpcAILevel
		{ //EquippedActiveKartInfo
			BYTE* pEquippedActiveKartInfo = pPlayerRoomVisibleInfo;
			Write16(pEquippedActiveKartInfo, 0); //len

			Write8(pEquippedActiveKartInfo, 0); //HaveActiveInfo
			Write32(pEquippedActiveKartInfo, 0); //KartID
			Write32(pEquippedActiveKartInfo, 0); //ActiveLevel

			len = pEquippedActiveKartInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //SpecialActivityStatus
		Write8(pPlayerRoomVisibleInfo, 0); //AreaID
		Write8(pPlayerRoomVisibleInfo, 0); //HaveRaiseSecondBaby
		{ //SecondLoverBabyInfo
			BYTE* pSecondLoverBabyInfo = pPlayerRoomVisibleInfo;
			Write16(pSecondLoverBabyInfo, 0); //len

			Write32(pSecondLoverBabyInfo, 0); //LoverBabyID
			Write32(pSecondLoverBabyInfo, 0); //ItemID
			Write32(pSecondLoverBabyInfo, 0); //GrowValue
			Write32(pSecondLoverBabyInfo, 0); //MentalValue
			Write32(pSecondLoverBabyInfo, 0); //BabyProfileLevel
			Write32(pSecondLoverBabyInfo, 0); //StrengthLevel
			Write32(pSecondLoverBabyInfo, 0); //GrowLevel
			WriteString(pSecondLoverBabyInfo, 0); //LoveBabyNickName[]
			Write16(pSecondLoverBabyInfo, 0); //LoverBabyStat
			Write16(pSecondLoverBabyInfo, 0); //LoverBabyEquipStat
			Write16(pSecondLoverBabyInfo, 0); //LoverBabyTransferdStatus

			len = pSecondLoverBabyInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasRankedMatchInfo
		for (size_t i = 0; i < n; i++)
		{ //RankedMatchGradeInfo
			BYTE* pRankedMatchGradeInfo = pPlayerRoomVisibleInfo;
			Write16(pRankedMatchGradeInfo, 0); //len

			Write32(pRankedMatchGradeInfo, 0); //GradeLevel
			Write32(pRankedMatchGradeInfo, 0); //ChildLevel
			Write32(pRankedMatchGradeInfo, 0); //GradeScore
			Write32(pRankedMatchGradeInfo, 0); //MaxGradeScore
			Write32(pRankedMatchGradeInfo, 0); //TotalScore

			len = pRankedMatchGradeInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasHuanLingChangeInfo
		for (size_t i = 0; i < n; i++)
		{ //HuanLingSuitInfo
			BYTE* pHuanLingSuitInfo = pPlayerRoomVisibleInfo;
			Write16(pHuanLingSuitInfo, 0); //len

			Write32(pHuanLingSuitInfo, 0); //SuitID
			Write8(pHuanLingSuitInfo, 0); //ChangeLevel

			len = pHuanLingSuitInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //EquipSealType
		Write16(pPlayerRoomVisibleInfo, 0); //Role
		Write8(pPlayerRoomVisibleInfo, 0); //SpecialActivityIDNum
		Write8(pPlayerRoomVisibleInfo, 0); //CrewID
		Write8(pPlayerRoomVisibleInfo, 0); //SpecialActivityInfoNum
		for (size_t i = 0; i < n; i++)
		{ //SpecialActivityInfo
			BYTE* pSpecialActivityInfo = pPlayerRoomVisibleInfo;
			Write16(pSpecialActivityInfo, 0); //len

			Write8(pSpecialActivityInfo, 0); //ProfessionLicenseInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ProfessionLicenseInfo
				BYTE* pProfessionLicenseInfo = pSpecialActivityInfo;
				Write16(pProfessionLicenseInfo, 0); //len

				Write8(pProfessionLicenseInfo, 0); //BigLevel
				Write8(pProfessionLicenseInfo, 0); //SmallLevel

				len = pProfessionLicenseInfo - pSpecialActivityInfo;
				Set16(pSpecialActivityInfo, (WORD)len);
				pSpecialActivityInfo += len;
			}

			len = pSpecialActivityInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //ParaNum
		Write32(pPlayerRoomVisibleInfo, 0); //ParaList[]
		Write8(pPlayerRoomVisibleInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemOrder
			BYTE* pItemOrder = pPlayerRoomVisibleInfo;
			Write16(pItemOrder, 0); //len

			Write32(pItemOrder, 0); //KartID
			Write32(pItemOrder, 0); //Order
			Write32(pItemOrder, 0); //BackGroundID

			len = pItemOrder - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //TDCExcluItemNum
		Write32(pPlayerRoomVisibleInfo, 0); //TDCExclusiveItemID[]
		Write8(pPlayerRoomVisibleInfo, 0); //EquipNiChangItemNum
		for (size_t i = 0; i < n; i++)
		{ //NiChangPavilionEquipItemInfo
			BYTE* pNiChangPavilionEquipItemInfo = pPlayerRoomVisibleInfo;
			Write16(pNiChangPavilionEquipItemInfo, 0); //len

			Write32(pNiChangPavilionEquipItemInfo, 0); //ItemId
			Write16(pNiChangPavilionEquipItemInfo, 0); //CurrentEquipColorationPlanId

			len = pNiChangPavilionEquipItemInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //TestKartGameType
		Write32(pPlayerRoomVisibleInfo, 0); //GameTestKartID
		Write8(pPlayerRoomVisibleInfo, 0); //HasStarsFightingInfo
		for (size_t i = 0; i < n; i++)
		{ //StarsFightingInfo
			BYTE* pStarsFightingInfo = pPlayerRoomVisibleInfo;
			Write16(pStarsFightingInfo, 0); //len

			Write32(pStarsFightingInfo, 0); //Star
			Write32(pStarsFightingInfo, 0); //StarVal
			Write32(pStarsFightingInfo, 0); //StarsFightingStarLevel

			len = pStarsFightingInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //RoomBGSetting

		len = pPlayerRoomVisibleInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //PlayerCount2
	for (size_t i = 0; i < n; i++)
	{ //PlayerRelationInfo
		BYTE* pPlayerRelationInfo = p;
		Write16(pPlayerRelationInfo, 0); //len

		Write32(pPlayerRelationInfo, 0); //SrcUin
		Write32(pPlayerRelationInfo, 0); //RelationFlag
		Write32(pPlayerRelationInfo, 0); //RelationUin
		WriteString(pPlayerRelationInfo, 0); //RelationNickName[]
		Write32(pPlayerRelationInfo, 0); //EngageTime
		Write32(pPlayerRelationInfo, 0); //NextCanBookingTimeLimit
		Write32(pPlayerRelationInfo, 0); //BeginHoneyMoonTime
		Write32(pPlayerRelationInfo, 0); //EndHoneyMoonTime
		Write8(pPlayerRelationInfo, 0); //EngageFlag

		len = pPlayerRelationInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //KartNum
	for (size_t i = 0; i < n; i++)
	{ //KartRefitInfo
		BYTE* pKartRefitInfo = p;
		Write16(pKartRefitInfo, 0); //len

		Write32(pKartRefitInfo, 0); //Uin
		Write32(pKartRefitInfo, 0); //KartId
		Write32(pKartRefitInfo, 0); //RefitCout
		Write16(pKartRefitInfo, 0); //MaxFlags
		Write16(pKartRefitInfo, 0); //WWeight
		Write16(pKartRefitInfo, 0); //SpeedWeight
		Write16(pKartRefitInfo, 0); //JetWeight
		Write16(pKartRefitInfo, 0); //SJetWeight
		Write16(pKartRefitInfo, 0); //AccuWeight
		Write32(pKartRefitInfo, 0); //ShapeRefitCount
		Write32(pKartRefitInfo, 0); //KartHeadRefitItemID
		Write32(pKartRefitInfo, 0); //KartTailRefitItemID
		Write32(pKartRefitInfo, 0); //KartFlankRefitItemID
		Write32(pKartRefitInfo, 0); //KartTireRefitItemID
		Write32(pKartRefitInfo, 0); //SecondRefitCount
		Write16(pKartRefitInfo, 0); //Speed2Weight
		Write16(pKartRefitInfo, 0); //DriftVecWeight
		Write16(pKartRefitInfo, 0); //AdditionalZSpeedWeight
		Write16(pKartRefitInfo, 0); //AntiCollisionWeight
		Write16(pKartRefitInfo, 0); //LuckyValue
		Write16(pKartRefitInfo, 0); //RefitLuckyValueMaxWeight
		Write32(pKartRefitInfo, 0); //ShapeSuitID
		Write8(pKartRefitInfo, 0); //LegendSuitLevel
		Write32(pKartRefitInfo, 0); //LegendSuitLevelChoice
		Write32(pKartRefitInfo, 0); //ShapeLegendSuitID

		len = pKartRefitInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasNext

	len = p - buf;
	SendToClient(Client, 225, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestChangeSeatState(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	short RoomID = Read16(p);
	bool SeatID = Read8(p);
	bool SeatState = Read8(p);

}

void ResponseChangeSeatState(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //SeatID
	Write8(p, 0); //SeatState
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 107, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyChangeSeatState(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //SeatID
	Write8(p, 0); //SeatState

	len = p - buf;
	SendToClient(Client, 502, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestKickFromRoom(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	Un DstUin = ReadUn(p);
	bool KickReason = Read8(p);
	bool KickActionType = Read8(p);

}

void ResponseKickFromRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	WriteUn(p, 0); //DstUin
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 108, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyKickFromRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //RoomID
	WriteUn(p, 0); //DstUin
	Write16(p, 0); //ReasonID
	Write8(p, 0); //ReasonLen
	Write16(p, 0); //BaseGameMode

	len = p - buf;
	SendToClient(Client, 503, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestForbidFromRoom(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	Un DstUin = ReadUn(p);
	char[] NickName[] = ReadString(p);

}

void ResponseForbidFromRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	WriteUn(p, 0); //DstUin
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 243, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyForbidFromRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //RoomID
	WriteUn(p, 0); //DstUin
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 632, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyUnLockMap(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //MapID
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 821, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestChangeReadyState(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	bool ReadyState = Read8(p);

}

void ResponseChangeReadyState(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReadyState
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 109, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyChangeReadyState(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //Uin
	Write8(p, 0); //ReadyState

	len = p - buf;
	SendToClient(Client, 504, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestStartGame(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);

}

void ResponseStartGame(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 110, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestTalk(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	bool Type = Read8(p);
	bool ClientUseFlag = Read8(p);
	Un DestPlayerUin = ReadUn(p);
	short ContentLength = Read16(p);
	bool BugletType = Read8(p);
	bool ReserveFlag = Read8(p);
	Un reqChatTime[] = ReadUn(p);
	short DstNickNameLength = Read16(p);
	UCHAR TalkSpecialType = Read8(p);
	UCHAR HasTalkInfo = Read8(p);
	for (size_t i = 0; i < n; i++)
	{ //TalkerInfo
		BYTE* pTalkerInfo = p;
		len = Read16(pTalkerInfo);

		UINT Exp = Read32(pTalkerInfo);
		{ //NobleInfo
			BYTE* pNobleInfo = pTalkerInfo;
			len = Read16(pNobleInfo);

			UINT NobleID = Read32(pNobleInfo);
			UCHAR NobleLevel = Read8(pNobleInfo);
			UINT NoblePoint = Read32(pNobleInfo);
			UINT NobleLeftDays = Read32(pNobleInfo);

			pTalkerInfo += len;
		}
		{ //GuildVipBaseInfo
			BYTE* pGuildVipBaseInfo = pTalkerInfo;
			len = Read16(pGuildVipBaseInfo);

			UCHAR GuildVipLevel = Read8(pGuildVipBaseInfo);
			UINT GuildVipPoint = Read32(pGuildVipBaseInfo);

			pTalkerInfo += len;
		}
		U GuildId = ReadU(pTalkerInfo);
		UCHAR HasLoverVip = Read8(pTalkerInfo);
		for (size_t i = 0; i < n; i++)
		{ //LoverVipInfo
			BYTE* pLoverVipInfo = pTalkerInfo;
			len = Read16(pLoverVipInfo);

			UCHAR LoverVipLevel = Read8(pLoverVipInfo);
			UINT LoverVipPoint = Read32(pLoverVipInfo);
			UCHAR GrowRate = Read8(pLoverVipInfo);

			pTalkerInfo += len;
		}
		UCHAR GardenLevel = Read8(pTalkerInfo);
		U ConsumeVipLevel = ReadU(pTalkerInfo);
		{ //EmperorInfo
			BYTE* pEmperorInfo = pTalkerInfo;
			len = Read16(pEmperorInfo);

			UCHAR EmperorLevel = Read8(pEmperorInfo);
			UINT EmperorPoint = Read32(pEmperorInfo);
			UINT EmperorLeftDays = Read32(pEmperorInfo);
			UCHAR EmperorGrowRate = Read8(pEmperorInfo);

			pTalkerInfo += len;
		}
		UINT HelperLev = Read32(pTalkerInfo);

		p += len;
	}
	UINT Seq = Read32(p);
	USHORT TalkSourceType = Read16(p);

}

void ResponseTalk(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //Type
	Write8(p, 0); //ClientUseFlag
	WriteUn(p, 0); //DestPlayerUin
	Write8(p, 0); //ReasonLen
	Write8(p, 0); //BugletType
	Write8(p, 0); //ReserveFlag
	Write8(p, 0); //ReserveData
	Write8(p, 0); //TalkSpecialType
	Write32(p, 0); //Seq

	len = p - buf;
	SendToClient(Client, 111, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyTalk(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //SrcUin
	WriteString(p, 0); //SrcNickName[]
	Write8(p, 0); //Gender
	Write8(p, 0); //Type
	Write8(p, 0); //ClientUseFlag
	WriteUn(p, 0); //DestPlayerUin
	Write16(p, 0); //ContentLength
	Write8(p, 0); //BugletType
	Write32(p, 0); //Identify
	WriteUn(p, 0); //VipFlag
	Write8(p, 0); //CanReport
	{ //TalkerInfo
		BYTE* pTalkerInfo = p;
		Write16(pTalkerInfo, 0); //len

		Write32(pTalkerInfo, 0); //Exp
		{ //NobleInfo
			BYTE* pNobleInfo = pTalkerInfo;
			Write16(pNobleInfo, 0); //len

			Write32(pNobleInfo, 0); //NobleID
			Write8(pNobleInfo, 0); //NobleLevel
			Write32(pNobleInfo, 0); //NoblePoint
			Write32(pNobleInfo, 0); //NobleLeftDays

			len = pNobleInfo - pTalkerInfo;
			Set16(pTalkerInfo, (WORD)len);
			pTalkerInfo += len;
		}
		{ //GuildVipBaseInfo
			BYTE* pGuildVipBaseInfo = pTalkerInfo;
			Write16(pGuildVipBaseInfo, 0); //len

			Write8(pGuildVipBaseInfo, 0); //GuildVipLevel
			Write32(pGuildVipBaseInfo, 0); //GuildVipPoint

			len = pGuildVipBaseInfo - pTalkerInfo;
			Set16(pTalkerInfo, (WORD)len);
			pTalkerInfo += len;
		}
		WriteU(pTalkerInfo, 0); //GuildId
		Write8(pTalkerInfo, 0); //HasLoverVip
		for (size_t i = 0; i < n; i++)
		{ //LoverVipInfo
			BYTE* pLoverVipInfo = pTalkerInfo;
			Write16(pLoverVipInfo, 0); //len

			Write8(pLoverVipInfo, 0); //LoverVipLevel
			Write32(pLoverVipInfo, 0); //LoverVipPoint
			Write8(pLoverVipInfo, 0); //GrowRate

			len = pLoverVipInfo - pTalkerInfo;
			Set16(pTalkerInfo, (WORD)len);
			pTalkerInfo += len;
		}
		Write8(pTalkerInfo, 0); //GardenLevel
		WriteU(pTalkerInfo, 0); //ConsumeVipLevel
		{ //EmperorInfo
			BYTE* pEmperorInfo = pTalkerInfo;
			Write16(pEmperorInfo, 0); //len

			Write8(pEmperorInfo, 0); //EmperorLevel
			Write32(pEmperorInfo, 0); //EmperorPoint
			Write32(pEmperorInfo, 0); //EmperorLeftDays
			Write8(pEmperorInfo, 0); //EmperorGrowRate

			len = pEmperorInfo - pTalkerInfo;
			Set16(pTalkerInfo, (WORD)len);
			pTalkerInfo += len;
		}
		Write32(pTalkerInfo, 0); //HelperLev

		len = pTalkerInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReserveFlag
	Write32(p, 0); //ReserveData
	WriteU(p, 0); //Contentid[]
	WriteUn(p, 0); //transBufType
	WriteUn(p, 0); //transBufLen
	Write8(p, 0); //MsgSource
	Write16(p, 0); //DstNickNameLength
	Write32(p, 0); //Seq

	len = p - buf;
	SendToClient(Client, 505, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestHello(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	bool InfoLength = Read8(p);
	int LastHelloRoundtripTime = Read32(p);
	short LastPingRTT = Read16(p);
	short LastPingLossRate = Read16(p);
	short LastUDPPingRTT = Read16(p);
	short LastUDPPingNetRTT = Read16(p);
	short LastUDPPingLossRate = Read16(p);
	short SendUDPRegCnt = Read16(p);
	char UDPRegStatus = Read8(p);
	U IsEnableBETA = ReadU(p);

}

void ResponseHello(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen
	WriteUn(p, 0); //Time
	WriteUn(p, 0); //Uin
	Write32(p, 0); //ServerTime
	Write32(p, 0); //ServerMicroSecond

	len = p - buf;
	SendToClient(Client, 112, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyTestNetSpeed(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //StartSec
	WriteUn(p, 0); //USec

	len = p - buf;
	SendToClient(Client, 506, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void AckTestNetSpeed(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un StartSec = ReadUn(p);
	Un USec = ReadUn(p);

}

void NotifyKickFromGame(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ReasonID
	WriteUn(p, 0); //SrcUin
	Write8(p, 0); //ReasonLen
	Write8(p, 0); //KickType

	len = p - buf;
	SendToClient(Client, 460, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyKickFromServer(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ReasonID
	WriteUn(p, 0); //SrcUin
	Write8(p, 0); //ReasonLen
	Write8(p, 0); //AntiCheatMode
	Write8(p, 0); //KickType

	len = p - buf;
	SendToClient(Client, 900, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetFriendList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);

}

void ResponseGetFriendList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	WriteUn(p, 0); //Uin
	Write16(p, 0); //MaxFriendNum
	Write16(p, 0); //TotalFriendNum
	Write16(p, 0); //FriendGroupNum
	for (size_t i = 0; i < n; i++)
	{ //FriendGroupInfo
		BYTE* pFriendGroupInfo = p;
		Write16(pFriendGroupInfo, 0); //len

		Write16(pFriendGroupInfo, 0); //FriendGroupID
		WriteString(pFriendGroupInfo, 0); //FriendGroupName[]
		Write16(pFriendGroupInfo, 0); //CurrentFriendNum
		Write16(pFriendGroupInfo, 0); //FriendUin[]

		len = pFriendGroupInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetGroupFriendBaseInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	short GroupID = Read16(p);

}

void ResponseGetGroupFriendBaseInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //GroupID
	{ //GroupFriendBaseInfo
		BYTE* pGroupFriendBaseInfo = p;
		Write16(pGroupFriendBaseInfo, 0); //len

		WriteUn(pGroupFriendBaseInfo, 0); //Uin
		WriteString(pGroupFriendBaseInfo, 0); //NickName[]
		Write8(pGroupFriendBaseInfo, 0); //Gender
		WriteUn(pGroupFriendBaseInfo, 0); //Identity
		Write8(pGroupFriendBaseInfo, 0); //IsOnLine
		WriteUn(pGroupFriendBaseInfo, 0); //Experience
		Write32(pGroupFriendBaseInfo, 0); //License
		Write32(pGroupFriendBaseInfo, 0); //TotalHonor
		Write32(pGroupFriendBaseInfo, 0); //Charm
		Write32(pGroupFriendBaseInfo, 0); //DanceExp
		Write32(pGroupFriendBaseInfo, 0); //Admiration
		Write32(pGroupFriendBaseInfo, 0); //TeamWorkExp
		WriteString(pGroupFriendBaseInfo, 0); //Signature[]
		WriteUn(pGroupFriendBaseInfo, 0); //VipFlag
		Write32(pGroupFriendBaseInfo, 0); //LocaleCode
		Write8(pGroupFriendBaseInfo, 0); //HaveAppellation
		for (size_t i = 0; i < n; i++)
		{ //CurAppellation
			BYTE* pCurAppellation = pGroupFriendBaseInfo;
			Write16(pCurAppellation, 0); //len

			Write8(pCurAppellation, 0); //Type
			Write8(pCurAppellation, 0); //Level
			Write8(pCurAppellation, 0); //Status
			Write8(pCurAppellation, 0); //Difficulty
			Write32(pCurAppellation, 0); //MapId
			Write32(pCurAppellation, 0); //Value

			len = pCurAppellation - pGroupFriendBaseInfo;
			Set16(pGroupFriendBaseInfo, (WORD)len);
			pGroupFriendBaseInfo += len;
		}
		{ //NobleInfo
			BYTE* pNobleInfo = pGroupFriendBaseInfo;
			Write16(pNobleInfo, 0); //len

			Write32(pNobleInfo, 0); //NobleID
			Write8(pNobleInfo, 0); //NobleLevel
			Write32(pNobleInfo, 0); //NoblePoint
			Write32(pNobleInfo, 0); //NobleLeftDays

			len = pNobleInfo - pGroupFriendBaseInfo;
			Set16(pGroupFriendBaseInfo, (WORD)len);
			pGroupFriendBaseInfo += len;
		}
		Write8(pGroupFriendBaseInfo, 0); //HasWizard
		{ //GuildVipBaseInfo
			BYTE* pGuildVipBaseInfo = pGroupFriendBaseInfo;
			Write16(pGuildVipBaseInfo, 0); //len

			Write8(pGuildVipBaseInfo, 0); //GuildVipLevel
			Write32(pGuildVipBaseInfo, 0); //GuildVipPoint

			len = pGuildVipBaseInfo - pGroupFriendBaseInfo;
			Set16(pGroupFriendBaseInfo, (WORD)len);
			pGroupFriendBaseInfo += len;
		}
		Write8(pGroupFriendBaseInfo, 0); //HasLDMInfo
		for (size_t i = 0; i < n; i++)
		{ //LDMInfo
			BYTE* pLDMInfo = pGroupFriendBaseInfo;
			Write16(pLDMInfo, 0); //len

			Write8(pLDMInfo, 0); //Grade
			Write32(pLDMInfo, 0); //Score
			Write32(pLDMInfo, 0); //MaxScore
			Write32(pLDMInfo, 0); //MaxGrade

			len = pLDMInfo - pGroupFriendBaseInfo;
			Set16(pGroupFriendBaseInfo, (WORD)len);
			pGroupFriendBaseInfo += len;
		}
		Write8(pGroupFriendBaseInfo, 0); //HasLoverVip
		for (size_t i = 0; i < n; i++)
		{ //LoverVipInfo
			BYTE* pLoverVipInfo = pGroupFriendBaseInfo;
			Write16(pLoverVipInfo, 0); //len

			Write8(pLoverVipInfo, 0); //LoverVipLevel
			Write32(pLoverVipInfo, 0); //LoverVipPoint
			Write8(pLoverVipInfo, 0); //GrowRate

			len = pLoverVipInfo - pGroupFriendBaseInfo;
			Set16(pGroupFriendBaseInfo, (WORD)len);
			pGroupFriendBaseInfo += len;
		}
		Write32(pGroupFriendBaseInfo, 0); //MaxDayPveScore
		Write32(pGroupFriendBaseInfo, 0); //MaxHistoryPveScore
		WriteUn(pGroupFriendBaseInfo, 0); //totalMapMedalNum
		Write32(pGroupFriendBaseInfo, 0); //ChumCircleID
		Write8(pGroupFriendBaseInfo, 0); //GardenLevel
		{ //EmperorInfo
			BYTE* pEmperorInfo = pGroupFriendBaseInfo;
			Write16(pEmperorInfo, 0); //len

			Write8(pEmperorInfo, 0); //EmperorLevel
			Write32(pEmperorInfo, 0); //EmperorPoint
			Write32(pEmperorInfo, 0); //EmperorLeftDays
			Write8(pEmperorInfo, 0); //EmperorGrowRate

			len = pEmperorInfo - pGroupFriendBaseInfo;
			Set16(pGroupFriendBaseInfo, (WORD)len);
			pGroupFriendBaseInfo += len;
		}
		Write8(pGroupFriendBaseInfo, 0); //GardenPrivateType
		{ //ConsumeVipInfo
			BYTE* pConsumeVipInfo = pGroupFriendBaseInfo;
			Write16(pConsumeVipInfo, 0); //len

			WriteUn(pConsumeVipInfo, 0); //VipLevel
			WriteUn(pConsumeVipInfo, 0); //CharmValueOfMonth
			WriteUn(pConsumeVipInfo, 0); //SearchTreasureNums
			WriteUn(pConsumeVipInfo, 0); //GetTreasureNums

			len = pConsumeVipInfo - pGroupFriendBaseInfo;
			Set16(pGroupFriendBaseInfo, (WORD)len);
			pGroupFriendBaseInfo += len;
		}
		Write8(pGroupFriendBaseInfo, 0); //IsHelperAppOnline
		Write8(pGroupFriendBaseInfo, 0); //AreaID
		Write8(pGroupFriendBaseInfo, 0); //HasRankedMatchInfo
		for (size_t i = 0; i < n; i++)
		{ //RankedMatchGradeInfo
			BYTE* pRankedMatchGradeInfo = pGroupFriendBaseInfo;
			Write16(pRankedMatchGradeInfo, 0); //len

			Write32(pRankedMatchGradeInfo, 0); //GradeLevel
			Write32(pRankedMatchGradeInfo, 0); //ChildLevel
			Write32(pRankedMatchGradeInfo, 0); //GradeScore
			Write32(pRankedMatchGradeInfo, 0); //MaxGradeScore
			Write32(pRankedMatchGradeInfo, 0); //TotalScore

			len = pRankedMatchGradeInfo - pGroupFriendBaseInfo;
			Set16(pGroupFriendBaseInfo, (WORD)len);
			pGroupFriendBaseInfo += len;
		}
		Write8(pGroupFriendBaseInfo, 0); //ActiveStatus
		Write32(pGroupFriendBaseInfo, 0); //HelperLev

		len = pGroupFriendBaseInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 148, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestModifyPlayerSignature(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	char[] Signature[] = ReadString(p);

}

void ResponseModifyPlayerSignature(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen
	WriteString(p, 0); //Signature[]

	len = p - buf;
	SendToClient(Client, 376, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestAddFriend(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	Un DstUin = ReadUn(p);
	Un WordLength = ReadUn(p);
	UCHAR Type = Read8(p);
	USHORT Src = Read16(p);

}

void ResponseAddFriend(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	WriteUn(p, 0); //Uin
	WriteUn(p, 0); //DstUin
	Write8(p, 0); //ReasonLen
	Write8(p, 0); //Type
	Write16(p, 0); //Src

	len = p - buf;
	SendToClient(Client, 114, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestDeleteFriend(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	Un FriendUin = ReadUn(p);
	short FriendGroupID = Read16(p);

}

void ResponseDeleteFriend(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	WriteUn(p, 0); //Uin
	WriteUn(p, 0); //FriendUin
	Write16(p, 0); //FriendGroupID
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 115, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestAddFriendGroup(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	bool GroupNameLen = Read8(p);

}

void ResponseAddFriendGroup(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	WriteUn(p, 0); //Uin
	Write8(p, 0); //GroupNameLen
	Write16(p, 0); //FriendGroupID
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 116, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestDeleteFriendGroup(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	short FriendGroupID = Read16(p);

}

void ResponseDeleteFriendGroup(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	WriteUn(p, 0); //Uin
	Write16(p, 0); //FriendGroupID
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 117, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestChangeFriendGroupName(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	short FriendGroupID = Read16(p);
	bool GroupNewNameLen = Read8(p);

}

void ResponseChangeFriendGroupName(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	WriteUn(p, 0); //Uin
	Write16(p, 0); //FriendGroupID
	Write8(p, 0); //GroupNewNameLen
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 149, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestMoveFriendToSomeGroup(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	Un FriendUin = ReadUn(p);
	short SrcGroupID = Read16(p);
	short DstGroupID = Read16(p);

}

void ResponseMoveFriendToSomeGroup(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	WriteUn(p, 0); //Uin
	WriteUn(p, 0); //FriendUin
	Write16(p, 0); //SrcGroupID
	Write16(p, 0); //DstGroupID
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 118, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyBeAddedAsFriend(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //SrcUin
	WriteUn(p, 0); //DstUin
	{ //SrcPlayerInfo
		BYTE* pSrcPlayerInfo = p;
		Write16(pSrcPlayerInfo, 0); //len

		Write8(pSrcPlayerInfo, 0); //Gender
		Write8(pSrcPlayerInfo, 0); //Country
		WriteString(pSrcPlayerInfo, 0); //NickName[]

		len = pSrcPlayerInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //WordLength
	Write8(p, 0); //Type
	Write16(p, 0); //Src

	len = p - buf;
	SendToClient(Client, 507, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void AckBeAddedAsFriend(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	short ResultID = Read16(p);
	Un SrcUin = ReadUn(p);
	Un DstUin = ReadUn(p);
	short WordLength = Read16(p);
	UCHAR Type = Read8(p);
	USHORT Src = Read16(p);

}

void NotifyAddFriendResult(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	WriteUn(p, 0); //SrcUin
	WriteUn(p, 0); //DstUin
	Write16(p, 0); //WordLength
	Write8(p, 0); //ReasonLen
	Write8(p, 0); //Type
	Write16(p, 0); //Src

	len = p - buf;
	SendToClient(Client, 508, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyBeDeletedByFriend(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //GroupID
	WriteUn(p, 0); //FriendUin
	{ //FriendPlayerInfo
		BYTE* pFriendPlayerInfo = p;
		Write16(pFriendPlayerInfo, 0); //len

		Write8(pFriendPlayerInfo, 0); //Gender
		Write8(pFriendPlayerInfo, 0); //Country
		WriteString(pFriendPlayerInfo, 0); //NickName[]

		len = pFriendPlayerInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 553, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyCheckPointTimeDiff(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //Leading
	Write32(p, 0); //TgtUin
	Write32(p, 0); //TimeDiff

	len = p - buf;
	SendToClient(Client, 274, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestPrepareReady(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	int MapID = Read32(p);
	char[] MapHash[] = ReadString(p);
	UCHAR SingleGameRestartFlag = Read8(p);

}

void NotifyWaitUnReadyPlayers(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //WaitLoadTime

	len = p - buf;
	SendToClient(Client, 510, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyGameNPCInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //HostUin
	Write8(p, 0); //NPCNum
	for (size_t i = 0; i < n; i++)
	{ //NPCPos
		BYTE* pNPCPos = p;
		Write16(pNPCPos, 0); //len

		Write32(pNPCPos, 0); //NpcID
		Write16(pNPCPos, 0); //StartPos
		Write16(pNPCPos, 0); //NPCAILevel

		len = pNPCPos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //StageIndex

	len = p - buf;
	SendToClient(Client, 784, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyRaceBegin(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //CountDownTime
	Write16(p, 0); //DelayTime
	Write8(p, 0); //StageIndex
	WriteUn(p, 0); //RaceCountDownTime
	WriteUn(p, 0); //RaceCountDownDis
	Write8(p, 0); //UseNewCountDownTime
	Write32(p, 0); //NewCountDownTime
	Write32(p, 0); //ServerSecond
	Write32(p, 0); //ServerMicroSecond

	len = p - buf;
	SendToClient(Client, 511, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyCountDown(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //CountDownTime
	WriteUn(p, 0); //WinnerUin
	Write8(p, 0); //WinnerNewRecord
	WriteUn(p, 0); //FinTime

	len = p - buf;
	SendToClient(Client, 512, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyGameStatus(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //GameStatus
	Write32(p, 0); //LeftTime
	Write8(p, 0); //StageIndex
	Write32(p, 0); //Para0
	Write32(p, 0); //Para1
	Write16(p, 0); //ParaNum
	Write32(p, 0); //ParaList[]
	Write16(p, 0); //ParaNum1
	Write32(p, 0); //ParaList1[]
	Write16(p, 0); //ParaNum2
	Write32(p, 0); //ParaList2[]

	len = p - buf;
	SendToClient(Client, 786, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyStageOver(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //CurrentPlayerNum
	for (size_t i = 0; i < n; i++)
	{ //StageScore
		BYTE* pStageScore = p;
		Write16(pStageScore, 0); //len

		Write32(pStageScore, 0); //Uin
		Write32(pStageScore, 0); //BaseExperience
		Write32(pStageScore, 0); //ExtraExperience
		Write8(pStageScore, 0); //IsEliminated
		WriteString(pStageScore, 0); //NickName[]
		Write8(pStageScore, 0); //HasWeRelayStageInfo
		for (size_t i = 0; i < n; i++)
		{ //WeRelayStageInfo
			BYTE* pWeRelayStageInfo = pStageScore;
			Write16(pWeRelayStageInfo, 0); //len

			Write32(pWeRelayStageInfo, 0); //Score
			Write32(pWeRelayStageInfo, 0); //ScoreInc
			Write32(pWeRelayStageInfo, 0); //Supermoney
			Write32(pWeRelayStageInfo, 0); //Coupons
			Write32(pWeRelayStageInfo, 0); //SuperN2O

			len = pWeRelayStageInfo - pStageScore;
			Set16(pStageScore, (WORD)len);
			pStageScore += len;
		}
		Write32(pStageScore, 0); //FinishTime

		len = pStageScore - p;
		Set16(p, (WORD)len);
		p += len;
	}
	WriteUn(p, 0); //AwardTime
	Write8(p, 0); //StageIndex

	len = p - buf;
	SendToClient(Client, 785, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyRaceOver(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //CurrentPlayerNum
	for (size_t i = 0; i < n; i++)
	{ //RaceScore
		BYTE* pRaceScore = p;
		Write16(pRaceScore, 0); //len

		WriteUn(pRaceScore, 0); //Uin
		WriteUn(pRaceScore, 0); //FinTime
		Write32(pRaceScore, 0); //TP
		Write32(pRaceScore, 0); //MoneyInc
		Write32(pRaceScore, 0); //TotalMoney
		Write32(pRaceScore, 0); //ExpInc
		Write32(pRaceScore, 0); //TotalExp
		Write8(pRaceScore, 0); //AwardNum
		Write32(pRaceScore, 0); //SpecialAward[]
		Write32(pRaceScore, 0); //TeamWorkExpInc
		Write32(pRaceScore, 0); //PropPoint
		Write32(pRaceScore, 0); //PropPointAddExp
		Write32(pRaceScore, 0); //LuckyMatchPointInc
		Write32(pRaceScore, 0); //LuckyMatchPointTotal
		Write32(pRaceScore, 0); //LuckyMatchScoreInc
		Write32(pRaceScore, 0); //LuckyMatchScoreTotal
		Write32(pRaceScore, 0); //LuckMoneyInc
		Write32(pRaceScore, 0); //LuckMoneyTotal
		Write32(pRaceScore, 0); //GuildScoreInc
		Write8(pRaceScore, 0); //CrazyPropAchieveNum
		Write32(pRaceScore, 0); //CrazyPropAchieve[]
		WriteU(pRaceScore, 0); //IncWlMatchScore
		WriteU(pRaceScore, 0); //IncWlDegree
		WriteU(pRaceScore, 0); //IncItemNumByWl
		for (size_t i = 0; i < n; i++)
		{ //IncItemInfoByWl
			BYTE* pIncItemInfoByWl = pRaceScore;
			Write16(pIncItemInfoByWl, 0); //len

			Write16(pIncItemInfoByWl, 0); //GenderItemNum
			Write32(pIncItemInfoByWl, 0); //ItemID[]
			Write16(pIncItemInfoByWl, 0); //ItemNum
			Write32(pIncItemInfoByWl, 0); //AvailPeriod
			Write16(pIncItemInfoByWl, 0); //BroadcastType
			Write16(pIncItemInfoByWl, 0); //BroadcastFlag
			Write8(pIncItemInfoByWl, 0); //ShowPriority
			Write8(pIncItemInfoByWl, 0); //ItemType
			Write8(pIncItemInfoByWl, 0); //IgnoreItem
			Write32(pIncItemInfoByWl, 0); //LimitPara
			Write8(pIncItemInfoByWl, 0); //SpecialAwardCtrlType
			Write8(pIncItemInfoByWl, 0); //AwardCtrlType

			len = pIncItemInfoByWl - pRaceScore;
			Set16(pRaceScore, (WORD)len);
			pRaceScore += len;
		}
		Write32(pRaceScore, 0); //WlMutiplyCard
		Write32(pRaceScore, 0); //SkateCoinInc
		Write32(pRaceScore, 0); //SkateCoinTotal
		Write32(pRaceScore, 0); //SkateCoinHistoryTotal
		Write32(pRaceScore, 0); //TotalCoupons
		Write8(pRaceScore, 0); //ChallengeCheer
		for (size_t i = 0; i < n; i++)
		{ //ChallengeCheer
			BYTE* pChallengeCheer = pRaceScore;
			Write16(pChallengeCheer, 0); //len

			Write16(pChallengeCheer, 0); //GuildCheerValueInc
			Write16(pChallengeCheer, 0); //CheerValueInc
			Write32(pChallengeCheer, 0); //TotalCheerValue
			Write16(pChallengeCheer, 0); //CouponsInc
			Write32(pChallengeCheer, 0); //GuildScoreInc
			Write32(pChallengeCheer, 0); //SuperMoneyInc

			len = pChallengeCheer - pRaceScore;
			Set16(pRaceScore, (WORD)len);
			pRaceScore += len;
		}
		Write32(pRaceScore, 0); //LoveValue
		Write32(pRaceScore, 0); //SkateCoinEmperorBonus
		Write32(pRaceScore, 0); //DetailRecordID
		Write8(pRaceScore, 0); //HasGangsterResult
		for (size_t i = 0; i < n; i++)
		{ //GangsterResult
			BYTE* pGangsterResult = pRaceScore;
			Write16(pGangsterResult, 0); //len

			Write8(pGangsterResult, 0); //AbnormalFalg
			Write32(pGangsterResult, 0); //GangsterBlood
			Write32(pGangsterResult, 0); //GangsterTotalScore
			Write32(pGangsterResult, 0); //GangsterIndentity
			Write32(pGangsterResult, 0); //FragmentInc
			Write32(pGangsterResult, 0); //KillTimes
			Write32(pGangsterResult, 0); //DeadTimes
			Write8(pGangsterResult, 0); //IsMultiple
			Write8(pGangsterResult, 0); //IsLimited
			Write32(pGangsterResult, 0); //ScoreInc
			Write32(pGangsterResult, 0); //TotalScore
			Write32(pGangsterResult, 0); //LoseStreakCount

			len = pGangsterResult - pRaceScore;
			Set16(pRaceScore, (WORD)len);
			pRaceScore += len;
		}
		{ //EquippedActiveKartInfo
			BYTE* pEquippedActiveKartInfo = pRaceScore;
			Write16(pEquippedActiveKartInfo, 0); //len

			Write8(pEquippedActiveKartInfo, 0); //HaveActiveInfo
			Write32(pEquippedActiveKartInfo, 0); //KartID
			Write32(pEquippedActiveKartInfo, 0); //ActiveLevel

			len = pEquippedActiveKartInfo - pRaceScore;
			Set16(pRaceScore, (WORD)len);
			pRaceScore += len;
		}
		Write8(pRaceScore, 0); //HasWeRelayRaceOverInfo
		for (size_t i = 0; i < n; i++)
		{ //WeRelayRaceOverInfo
			BYTE* pWeRelayRaceOverInfo = pRaceScore;
			Write16(pWeRelayRaceOverInfo, 0); //len

			{ //SumStageInfo
				BYTE* pSumStageInfo = pWeRelayRaceOverInfo;
				Write16(pSumStageInfo, 0); //len

				Write32(pSumStageInfo, 0); //Score
				Write32(pSumStageInfo, 0); //ScoreInc
				Write32(pSumStageInfo, 0); //Supermoney
				Write32(pSumStageInfo, 0); //Coupons
				Write32(pSumStageInfo, 0); //SuperN2O

				len = pSumStageInfo - pWeRelayRaceOverInfo;
				Set16(pWeRelayRaceOverInfo, (WORD)len);
				pWeRelayRaceOverInfo += len;
			}
			Write32(pWeRelayRaceOverInfo, 0); //WeRelayScoreInc
			Write32(pWeRelayRaceOverInfo, 0); //WeRelayScoreNow
			Write32(pWeRelayRaceOverInfo, 0); //WeRelayScoreLevelNow
			Write32(pWeRelayRaceOverInfo, 0); //WeRelayScoreLevelLimit
			Write32(pWeRelayRaceOverInfo, 0); //SupermoneyLimit
			Write32(pWeRelayRaceOverInfo, 0); //SupermoneyNow
			Write32(pWeRelayRaceOverInfo, 0); //CouponsLimit
			Write32(pWeRelayRaceOverInfo, 0); //CouponsNow
			Write32(pWeRelayRaceOverInfo, 0); //LuckAwardMul

			len = pWeRelayRaceOverInfo - pRaceScore;
			Set16(pRaceScore, (WORD)len);
			pRaceScore += len;
		}
		Write8(pRaceScore, 0); //HaveSkatePropRaceInfo
		for (size_t i = 0; i < n; i++)
		{ //SkatePropRaceInfo
			BYTE* pSkatePropRaceInfo = pRaceScore;
			Write16(pSkatePropRaceInfo, 0); //len

			Write32(pSkatePropRaceInfo, 0); //ScoreAdd
			Write32(pSkatePropRaceInfo, 0); //ScoreTotal

			len = pSkatePropRaceInfo - pRaceScore;
			Set16(pRaceScore, (WORD)len);
			pRaceScore += len;
		}
		Write8(pRaceScore, 0); //IsNewBox
		Write8(pRaceScore, 0); //HaveArrestScoreInfo
		for (size_t i = 0; i < n; i++)
		{ //ArrestScoreInfo
			BYTE* pArrestScoreInfo = pRaceScore;
			Write16(pArrestScoreInfo, 0); //len

			Write32(pArrestScoreInfo, 0); //ScoreInGame
			Write32(pArrestScoreInfo, 0); //ScoreByGold
			Write32(pArrestScoreInfo, 0); //GoldMoney
			Write32(pArrestScoreInfo, 0); //ArrestNum
			Write8(pArrestScoreInfo, 0); //ResultType
			Write8(pArrestScoreInfo, 0); //TeamID

			len = pArrestScoreInfo - pRaceScore;
			Set16(pRaceScore, (WORD)len);
			pRaceScore += len;
		}
		Write8(pRaceScore, 0); //HasRankedMatchInfo
		for (size_t i = 0; i < n; i++)
		{ //RankedMatchScore
			BYTE* pRankedMatchScore = pRaceScore;
			Write16(pRankedMatchScore, 0); //len

			{ //RankedMatchLastGradeInfo
				BYTE* pRankedMatchLastGradeInfo = pRankedMatchScore;
				Write16(pRankedMatchLastGradeInfo, 0); //len

				Write32(pRankedMatchLastGradeInfo, 0); //GradeLevel
				Write32(pRankedMatchLastGradeInfo, 0); //ChildLevel
				Write32(pRankedMatchLastGradeInfo, 0); //GradeScore
				Write32(pRankedMatchLastGradeInfo, 0); //MaxGradeScore
				Write32(pRankedMatchLastGradeInfo, 0); //TotalScore

				len = pRankedMatchLastGradeInfo - pRankedMatchScore;
				Set16(pRankedMatchScore, (WORD)len);
				pRankedMatchScore += len;
			}
			{ //RankedMatchGradeInfo
				BYTE* pRankedMatchGradeInfo = pRankedMatchScore;
				Write16(pRankedMatchGradeInfo, 0); //len

				Write32(pRankedMatchGradeInfo, 0); //GradeLevel
				Write32(pRankedMatchGradeInfo, 0); //ChildLevel
				Write32(pRankedMatchGradeInfo, 0); //GradeScore
				Write32(pRankedMatchGradeInfo, 0); //MaxGradeScore
				Write32(pRankedMatchGradeInfo, 0); //TotalScore

				len = pRankedMatchGradeInfo - pRankedMatchScore;
				Set16(pRankedMatchScore, (WORD)len);
				pRankedMatchScore += len;
			}
			{ //RankedMatchPromoInfo
				BYTE* pRankedMatchPromoInfo = pRankedMatchScore;
				Write16(pRankedMatchPromoInfo, 0); //len

				Write8(pRankedMatchPromoInfo, 0); //PromotionMatch
				Write32(pRankedMatchPromoInfo, 0); //PromotionRoundNums
				Write32(pRankedMatchPromoInfo, 0); //PromotionSuccessRoundNums
				Write32(pRankedMatchPromoInfo, 0); //PromotionAlreadySuccessRoundNums
				Write32(pRankedMatchPromoInfo, 0); //PromotionRecordTag
				Write32(pRankedMatchPromoInfo, 0); //CurrentPromotionRoundNums
				Write32(pRankedMatchPromoInfo, 0); //PromoFailedMinusScore
				Write32(pRankedMatchPromoInfo, 0); //PromoSuccAddScore
				Write8(pRankedMatchPromoInfo, 0); //PromoDirectly
				Write8(pRankedMatchPromoInfo, 0); //GradeNoNeedPromo
				Write8(pRankedMatchPromoInfo, 0); //RankedMemoryNoNeedPromo
				Write8(pRankedMatchPromoInfo, 0); //PromotionExtraScore
				Write8(pRankedMatchPromoInfo, 0); //PromtRaceFailedDefendFlag

				len = pRankedMatchPromoInfo - pRankedMatchScore;
				Set16(pRankedMatchScore, (WORD)len);
				pRankedMatchScore += len;
			}
			{ //RankedMatchComputeInfo
				BYTE* pRankedMatchComputeInfo = pRankedMatchScore;
				Write16(pRankedMatchComputeInfo, 0); //len

				Write32(pRankedMatchComputeInfo, 0); //RankAddScore
				Write32(pRankedMatchComputeInfo, 0); //FinishAddScore
				Write32(pRankedMatchComputeInfo, 0); //KillAllAddScore
				Write32(pRankedMatchComputeInfo, 0); //GradeProtectAddScore
				Write32(pRankedMatchComputeInfo, 0); //GradeAddScore
				Write32(pRankedMatchComputeInfo, 0); //ProtectAddScoreGradeLimit
				Write32(pRankedMatchComputeInfo, 0); //DailyExtraAddScore
				Write32(pRankedMatchComputeInfo, 0); //AwardRankCoinNums
				Write32(pRankedMatchComputeInfo, 0); //WeeklyAwardRankCoinNums
				Write32(pRankedMatchComputeInfo, 0); //WeeklyAwardRankCoinLimit
				Write32(pRankedMatchComputeInfo, 0); //AwardRankCoinNumsByRank
				Write32(pRankedMatchComputeInfo, 0); //AwardRankCoinNumsByFinish
				Write32(pRankedMatchComputeInfo, 0); //BanMapExtraAddScore
				Write32(pRankedMatchComputeInfo, 0); //TeamRankAddScore
				Write32(pRankedMatchComputeInfo, 0); //AwardRankCoinNumsByTeamRank
				Write32(pRankedMatchComputeInfo, 0); //AwardRankCoinNumsByTask
				Write8(pRankedMatchComputeInfo, 0); //UseDoubleScoreItem
				Write8(pRankedMatchComputeInfo, 0); //UserNotDecreaseItem
				Write8(pRankedMatchComputeInfo, 0); //FinishSeasonChallengeTaskOrNot
				Write32(pRankedMatchComputeInfo, 0); //FinishedSeasonChallengeTaskIndex
				Write32(pRankedMatchComputeInfo, 0); //SeasonChallengeTaskProtectAddScore
				Write8(pRankedMatchComputeInfo, 0); //NotDecreaseReason
				Write8(pRankedMatchComputeInfo, 0); //HaveSpeedKingInfo
				for (size_t i = 0; i < n; i++)
				{ //RankedMatchSpeedKingInfos
					BYTE* pRankedMatchSpeedKingInfos = pRankedMatchComputeInfo;
					Write16(pRankedMatchSpeedKingInfos, 0); //len

					Write8(pRankedMatchSpeedKingInfos, 0); //WinOrNot
					WriteUn(pRankedMatchSpeedKingInfos, 0); //UiAwardSpeedKingEnergyItemNums
					Write32(pRankedMatchSpeedKingInfos, 0); //WeeklyAwardSpeedKingEnergyItemNums
					Write32(pRankedMatchSpeedKingInfos, 0); //WeeklyAwardSpeedKingEnergyItemLimitNums

					len = pRankedMatchSpeedKingInfos - pRankedMatchComputeInfo;
					Set16(pRankedMatchComputeInfo, (WORD)len);
					pRankedMatchComputeInfo += len;
				}
				Write8(pRankedMatchComputeInfo, 0); //HaveExtraComputeInfo
				for (size_t i = 0; i < n; i++)
				{ //RankedMatchExtracComputeInfos
					BYTE* pRankedMatchExtracComputeInfos = pRankedMatchComputeInfo;
					Write16(pRankedMatchExtracComputeInfos, 0); //len

					Write32(pRankedMatchExtracComputeInfos, 0); //ExtraComputeType
					Write32(pRankedMatchExtracComputeInfos, 0); //AwardItemNums
					Write32(pRankedMatchExtracComputeInfos, 0); //WeekylyAwardItemNums
					Write32(pRankedMatchExtracComputeInfos, 0); //WeeklyAwardItemLimitNums
					Write8(pRankedMatchExtracComputeInfos, 0); //HaveGameLogicTask
					for (size_t i = 0; i < n; i++)
					{ //RakedMatchGamelogicTaskInfo
						BYTE* pRakedMatchGamelogicTaskInfo = pRankedMatchExtracComputeInfos;
						Write16(pRakedMatchGamelogicTaskInfo, 0); //len

						Write32(pRakedMatchGamelogicTaskInfo, 0); //GameLogicTaskType
						Write32(pRakedMatchGamelogicTaskInfo, 0); //TaskFinishCondValue
						Write8(pRakedMatchGamelogicTaskInfo, 0); //JudgeRule
						Write32(pRakedMatchGamelogicTaskInfo, 0); //TaskAddGradeScore
						Write8(pRakedMatchGamelogicTaskInfo, 0); //GradeScoreRangeNum
						Write32(pRakedMatchGamelogicTaskInfo, 0); //GradeScoreRange[]
						Write8(pRakedMatchGamelogicTaskInfo, 0); //TaskFinishCondValueNum
						Write32(pRakedMatchGamelogicTaskInfo, 0); //TaskFinishCondValueRange[]
						Write8(pRakedMatchGamelogicTaskInfo, 0); //TaskAddGradeScoreNum
						Write32(pRakedMatchGamelogicTaskInfo, 0); //TaskAddGradeScoreRange[]
						Write8(pRakedMatchGamelogicTaskInfo, 0); //FailedAddGradeScoreNum
						Write32(pRakedMatchGamelogicTaskInfo, 0); //FailedAddGradeScoreRange[]
						Write8(pRakedMatchGamelogicTaskInfo, 0); //FinishTask
						Write32(pRakedMatchGamelogicTaskInfo, 0); //ExtraFinishTaskAddScore

						len = pRakedMatchGamelogicTaskInfo - pRankedMatchExtracComputeInfos;
						Set16(pRankedMatchExtracComputeInfos, (WORD)len);
						pRankedMatchExtracComputeInfos += len;
					}
					Write8(pRankedMatchExtracComputeInfos, 0); //Win
					Write8(pRankedMatchExtracComputeInfos, 0); //NormalPlayerOrNot
					Write8(pRankedMatchExtracComputeInfos, 0); //LeadRolePlayerNums

					len = pRankedMatchExtracComputeInfos - pRankedMatchComputeInfo;
					Set16(pRankedMatchComputeInfo, (WORD)len);
					pRankedMatchComputeInfo += len;
				}
				Write32(pRankedMatchComputeInfo, 0); //SeasonNewMapAddScore
				Write8(pRankedMatchComputeInfo, 0); //SeasonChallengeBaseScore
				Write8(pRankedMatchComputeInfo, 0); //SeasonChallengeContiWinExtrScore
				Write8(pRankedMatchComputeInfo, 0); //SeasonChallengeRegretDefeatScore
				Write8(pRankedMatchComputeInfo, 0); //SeasonChallengeRespectableOpponentScore
				Write8(pRankedMatchComputeInfo, 0); //SpeedGodChallengeAddScore
				Write8(pRankedMatchComputeInfo, 0); //SpeedGodChallengeAddCoin
				Write8(pRankedMatchComputeInfo, 0); //SpeedFlashAddFactoryCoin
				Write8(pRankedMatchComputeInfo, 0); //PinnacleBattleAddScore
				Write8(pRankedMatchComputeInfo, 0); //PromotionExtraScore
				Write32(pRankedMatchComputeInfo, 0); //SavedExtraScore
				Write32(pRankedMatchComputeInfo, 0); //DailyExtraTaskID
				Write8(pRankedMatchComputeInfo, 0); //SuitActiveAddScore
				Write8(pRankedMatchComputeInfo, 0); //SpeedGodChallengeType
				Write8(pRankedMatchComputeInfo, 0); //SuitActiveEffectID

				len = pRankedMatchComputeInfo - pRankedMatchScore;
				Set16(pRankedMatchScore, (WORD)len);
				pRankedMatchScore += len;
			}
			Write8(pRankedMatchScore, 0); //HavePromotionExtraScoreInfo
			for (size_t i = 0; i < n; i++)
			{ //PromotionExtraScoreInfo
				BYTE* pPromotionExtraScoreInfo = pRankedMatchScore;
				Write16(pPromotionExtraScoreInfo, 0); //len

				Write8(pPromotionExtraScoreInfo, 0); //PromotionMatch
				Write32(pPromotionExtraScoreInfo, 0); //PromotionRoundNums
				Write32(pPromotionExtraScoreInfo, 0); //PromotionSuccessRoundNums
				Write32(pPromotionExtraScoreInfo, 0); //PromotionAlreadySuccessRoundNums
				Write32(pPromotionExtraScoreInfo, 0); //PromotionRecordTag
				Write32(pPromotionExtraScoreInfo, 0); //CurrentPromotionRoundNums
				Write32(pPromotionExtraScoreInfo, 0); //PromoFailedMinusScore
				Write32(pPromotionExtraScoreInfo, 0); //PromoSuccAddScore
				Write8(pPromotionExtraScoreInfo, 0); //PromoDirectly
				Write8(pPromotionExtraScoreInfo, 0); //GradeNoNeedPromo
				Write8(pPromotionExtraScoreInfo, 0); //RankedMemoryNoNeedPromo
				Write8(pPromotionExtraScoreInfo, 0); //PromotionExtraScore
				Write8(pPromotionExtraScoreInfo, 0); //PromtRaceFailedDefendFlag

				len = pPromotionExtraScoreInfo - pRankedMatchScore;
				Set16(pRankedMatchScore, (WORD)len);
				pRankedMatchScore += len;
			}

			len = pRankedMatchScore - pRaceScore;
			Set16(pRaceScore, (WORD)len);
			pRaceScore += len;
		}
		Write8(pRaceScore, 0); //HaveCrazyChaseScoreInfo
		for (size_t i = 0; i < n; i++)
		{ //CrazyChaseScoreInfo
			BYTE* pCrazyChaseScoreInfo = pRaceScore;
			Write16(pCrazyChaseScoreInfo, 0); //len

			Write32(pCrazyChaseScoreInfo, 0); //Uin
			Write16(pCrazyChaseScoreInfo, 0); //Role
			Write32(pCrazyChaseScoreInfo, 0); //Score
			Write8(pCrazyChaseScoreInfo, 0); //ScoreNum
			for (size_t i = 0; i < n; i++)
			{ //ScoreInfo
				BYTE* pScoreInfo = pCrazyChaseScoreInfo;
				Write16(pScoreInfo, 0); //len

				Write8(pScoreInfo, 0); //ScoreType
				Write32(pScoreInfo, 0); //Value
				Write32(pScoreInfo, 0); //Score

				len = pScoreInfo - pCrazyChaseScoreInfo;
				Set16(pCrazyChaseScoreInfo, (WORD)len);
				pCrazyChaseScoreInfo += len;
			}

			len = pCrazyChaseScoreInfo - pRaceScore;
			Set16(pRaceScore, (WORD)len);
			pRaceScore += len;
		}
		Write8(pRaceScore, 0); //TeamID
		Write8(pRaceScore, 0); //HasRankedMatchArenaInfo
		for (size_t i = 0; i < n; i++)
		{ //RankedMatchArenaScore
			BYTE* pRankedMatchArenaScore = pRaceScore;
			Write16(pRankedMatchArenaScore, 0); //len

			Write8(pRankedMatchArenaScore, 0); //Win
			Write8(pRankedMatchArenaScore, 0); //Rank
			Write8(pRankedMatchArenaScore, 0); //TaskScore
			Write32(pRankedMatchArenaScore, 0); //AwardRankCoinNums
			{ //RankedMatchLastGradeInfo
				BYTE* pRankedMatchLastGradeInfo = pRankedMatchArenaScore;
				Write16(pRankedMatchLastGradeInfo, 0); //len

				Write32(pRankedMatchLastGradeInfo, 0); //GradeLevel
				Write32(pRankedMatchLastGradeInfo, 0); //ChildLevel
				Write32(pRankedMatchLastGradeInfo, 0); //GradeScore
				Write32(pRankedMatchLastGradeInfo, 0); //MaxGradeScore
				Write32(pRankedMatchLastGradeInfo, 0); //TotalScore

				len = pRankedMatchLastGradeInfo - pRankedMatchArenaScore;
				Set16(pRankedMatchArenaScore, (WORD)len);
				pRankedMatchArenaScore += len;
			}
			{ //RankedMatchGradeInfo
				BYTE* pRankedMatchGradeInfo = pRankedMatchArenaScore;
				Write16(pRankedMatchGradeInfo, 0); //len

				Write32(pRankedMatchGradeInfo, 0); //GradeLevel
				Write32(pRankedMatchGradeInfo, 0); //ChildLevel
				Write32(pRankedMatchGradeInfo, 0); //GradeScore
				Write32(pRankedMatchGradeInfo, 0); //MaxGradeScore
				Write32(pRankedMatchGradeInfo, 0); //TotalScore

				len = pRankedMatchGradeInfo - pRankedMatchArenaScore;
				Set16(pRankedMatchArenaScore, (WORD)len);
				pRankedMatchArenaScore += len;
			}
			{ //RankedMatchPromoInfo
				BYTE* pRankedMatchPromoInfo = pRankedMatchArenaScore;
				Write16(pRankedMatchPromoInfo, 0); //len

				Write8(pRankedMatchPromoInfo, 0); //PromotionMatch
				Write32(pRankedMatchPromoInfo, 0); //PromotionRoundNums
				Write32(pRankedMatchPromoInfo, 0); //PromotionSuccessRoundNums
				Write32(pRankedMatchPromoInfo, 0); //PromotionAlreadySuccessRoundNums
				Write32(pRankedMatchPromoInfo, 0); //PromotionRecordTag
				Write32(pRankedMatchPromoInfo, 0); //CurrentPromotionRoundNums
				Write32(pRankedMatchPromoInfo, 0); //PromoFailedMinusScore
				Write32(pRankedMatchPromoInfo, 0); //PromoSuccAddScore
				Write8(pRankedMatchPromoInfo, 0); //PromoDirectly
				Write8(pRankedMatchPromoInfo, 0); //GradeNoNeedPromo
				Write8(pRankedMatchPromoInfo, 0); //RankedMemoryNoNeedPromo
				Write8(pRankedMatchPromoInfo, 0); //PromotionExtraScore
				Write8(pRankedMatchPromoInfo, 0); //PromtRaceFailedDefendFlag

				len = pRankedMatchPromoInfo - pRankedMatchArenaScore;
				Set16(pRankedMatchArenaScore, (WORD)len);
				pRankedMatchArenaScore += len;
			}
			Write8(pRankedMatchArenaScore, 0); //WinNum
			Write16(pRankedMatchArenaScore, 0); //CurrentScore
			Write8(pRankedMatchArenaScore, 0); //FinishScore
			Write16(pRankedMatchArenaScore, 0); //AwardRankScore
			Write8(pRankedMatchArenaScore, 0); //AwardRankCoinNumsByRank
			Write8(pRankedMatchArenaScore, 0); //AwardRankCoinNumsByFinish
			Write32(pRankedMatchArenaScore, 0); //WeeklyAwardRankCoinNums
			Write32(pRankedMatchArenaScore, 0); //WeeklyAwardRankCoinLimit
			Write32(pRankedMatchArenaScore, 0); //AwardRankCoinNumsByTask

			len = pRankedMatchArenaScore - pRaceScore;
			Set16(pRaceScore, (WORD)len);
			pRaceScore += len;
		}
		Write32(pRaceScore, 0); //DistanceToEnd
		Write8(pRaceScore, 0); //ShortDistancWinPoint
		Write8(pRaceScore, 0); //Status
		Write8(pRaceScore, 0); //HaveRankedMatchSpeedKingInfo
		for (size_t i = 0; i < n; i++)
		{ //RankedMatchSpeedKingScoreInfo
			BYTE* pRankedMatchSpeedKingScoreInfo = pRaceScore;
			Write16(pRankedMatchSpeedKingScoreInfo, 0); //len

			Write32(pRankedMatchSpeedKingScoreInfo, 0); //AwardSpeedKingEnergyNums
			Write8(pRankedMatchSpeedKingScoreInfo, 0); //Win

			len = pRankedMatchSpeedKingScoreInfo - pRaceScore;
			Set16(pRaceScore, (WORD)len);
			pRaceScore += len;
		}
		Write8(pRaceScore, 0); //ProfessionLicenseAwardNum
		for (size_t i = 0; i < n; i++)
		{ //ProfessionLicenseAward
			BYTE* pProfessionLicenseAward = pRaceScore;
			Write16(pProfessionLicenseAward, 0); //len

			Write32(pProfessionLicenseAward, 0); //PointInc
			Write32(pProfessionLicenseAward, 0); //PointLevelCur
			Write32(pProfessionLicenseAward, 0); //PointLevelMax
			Write16(pProfessionLicenseAward, 0); //IncResultID
			Write8(pProfessionLicenseAward, 0); //ShowQiPao
			Write32(pProfessionLicenseAward, 0); //PointWeekTotal
			Write32(pProfessionLicenseAward, 0); //PointWeekCur
			{ //ProfessionLicenseInfo
				BYTE* pProfessionLicenseInfo = pProfessionLicenseAward;
				Write16(pProfessionLicenseInfo, 0); //len

				Write8(pProfessionLicenseInfo, 0); //BigLevel
				Write8(pProfessionLicenseInfo, 0); //SmallLevel

				len = pProfessionLicenseInfo - pProfessionLicenseAward;
				Set16(pProfessionLicenseAward, (WORD)len);
				pProfessionLicenseAward += len;
			}
			Write8(pProfessionLicenseAward, 0); //SwitchShowExtraAddPoint
			Write16(pProfessionLicenseAward, 0); //BeginOffsetSeconds

			len = pProfessionLicenseAward - pRaceScore;
			Set16(pRaceScore, (WORD)len);
			pRaceScore += len;
		}
		{ //RaceResult
			BYTE* pRaceResult = pRaceScore;
			Write16(pRaceResult, 0); //len

			Write8(pRaceResult, 0); //PLExpPowerValid
			Write8(pRaceResult, 0); //PLHonorPowerValid
			Write8(pRaceResult, 0); //ExpMultiNum
			Write8(pRaceResult, 0); //HonorMultiNum

			len = pRaceResult - pRaceScore;
			Set16(pRaceScore, (WORD)len);
			pRaceScore += len;
		}
		Write8(pRaceScore, 0); //HaveRankedMatchExtraInfo
		for (size_t i = 0; i < n; i++)
		{ //RankedMatchExtraScoreInfo
			BYTE* pRankedMatchExtraScoreInfo = pRaceScore;
			Write16(pRankedMatchExtraScoreInfo, 0); //len

			Write32(pRankedMatchExtraScoreInfo, 0); //AwardItemNums
			Write8(pRankedMatchExtraScoreInfo, 0); //Win

			len = pRankedMatchExtraScoreInfo - pRaceScore;
			Set16(pRaceScore, (WORD)len);
			pRaceScore += len;
		}
		Write8(pRaceScore, 0); //HasYuLeJiaNianHuaComputeData
		for (size_t i = 0; i < n; i++)
		{ //YuLeJiaNianHuaComputeData
			BYTE* pYuLeJiaNianHuaComputeData = pRaceScore;
			Write16(pYuLeJiaNianHuaComputeData, 0); //len

			Write32(pYuLeJiaNianHuaComputeData, 0); //AwardScore
			Write8(pYuLeJiaNianHuaComputeData, 0); //Recommend
			Write8(pYuLeJiaNianHuaComputeData, 0); //ScoreDouble
			Write8(pYuLeJiaNianHuaComputeData, 0); //GuaJi

			len = pYuLeJiaNianHuaComputeData - pRaceScore;
			Set16(pRaceScore, (WORD)len);
			pRaceScore += len;
		}

		len = pRaceScore - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //WinTeamID
	Write32(p, 0); //WinType
	WriteUn(p, 0); //AwardTime
	Write8(p, 0); //LuckyMatchResult
	Write8(p, 0); //LuckyMatchType
	Write8(p, 0); //PlayerNumber
	for (size_t i = 0; i < n; i++)
	{ //HideTaskResult
		BYTE* pHideTaskResult = p;
		Write16(pHideTaskResult, 0); //len

		Write32(pHideTaskResult, 0); //Uin
		Write32(pHideTaskResult, 0); //TaskId
		Write8(pHideTaskResult, 0); //HideTaskFinishResult

		len = pHideTaskResult - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasLadderMatchResult
	for (size_t i = 0; i < n; i++)
	{ //LDMRaceResult
		BYTE* pLDMRaceResult = p;
		Write16(pLDMRaceResult, 0); //len

		Write8(pLDMRaceResult, 0); //PlayerNum
		for (size_t i = 0; i < n; i++)
		{ //Result
			BYTE* pResult = pLDMRaceResult;
			Write16(pResult, 0); //len

			Write32(pResult, 0); //Uin
			Write32(pResult, 0); //Score
			Write32(pResult, 0); //ScoreInc
			Write32(pResult, 0); //NextGradeScore
			Write8(pResult, 0); //Grade
			Write8(pResult, 0); //BeforeGrade
			{ //Rank
				BYTE* pRank = pResult;
				Write16(pRank, 0); //len

				Write8(pRank, 0); //RankType
				Write8(pRank, 0); //RankValue

				len = pRank - pResult;
				Set16(pResult, (WORD)len);
				pResult += len;
			}
			{ //EstimateRank
				BYTE* pEstimateRank = pResult;
				Write16(pEstimateRank, 0); //len

				Write8(pEstimateRank, 0); //RankType
				Write8(pEstimateRank, 0); //RankValue

				len = pEstimateRank - pResult;
				Set16(pResult, (WORD)len);
				pResult += len;
			}

			len = pResult - pLDMRaceResult;
			Set16(pLDMRaceResult, (WORD)len);
			pLDMRaceResult += len;
		}

		len = pLDMRaceResult - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //NeedFreshTutor
	WriteUn(p, 0); //hasMedalGameInfo
	for (size_t i = 0; i < n; i++)
	{ //medalGameInfo
		BYTE* pmedalGameInfo = p;
		Write16(pmedalGameInfo, 0); //len

		WriteUn(pmedalGameInfo, 0); //curMedal

		len = pmedalGameInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //KickOffPlayerNumber
	for (size_t i = 0; i < n; i++)
	{ //KickOffPlayer
		BYTE* pKickOffPlayer = p;
		Write16(pKickOffPlayer, 0); //len

		Write32(pKickOffPlayer, 0); //Uin
		WriteString(pKickOffPlayer, 0); //NickName[]
		Write8(pKickOffPlayer, 0); //Gender
		Write8(pKickOffPlayer, 0); //TeamID
		Write8(pKickOffPlayer, 0); //Country

		len = pKickOffPlayer - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //EliminatedRacerNum
	for (size_t i = 0; i < n; i++)
	{ //EliminatedRacer
		BYTE* pEliminatedRacer = p;
		Write16(pEliminatedRacer, 0); //len

		WriteUn(pEliminatedRacer, 0); //Uin
		WriteString(pEliminatedRacer, 0); //RacerName[]

		len = pEliminatedRacer - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //TeamNum
	for (size_t i = 0; i < n; i++)
	{ //TeamScore
		BYTE* pTeamScore = p;
		Write16(pTeamScore, 0); //len

		Write8(pTeamScore, 0); //TeamID
		Write32(pTeamScore, 0); //TeamScore
		Write8(pTeamScore, 0); //TeamMinRank
		Write8(pTeamScore, 0); //CooperNum
		Write8(pTeamScore, 0); //IncCooper
		Write8(pTeamScore, 0); //CurCooper

		len = pTeamScore - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //NPCRacerNum
	for (size_t i = 0; i < n; i++)
	{ //ArrestNPCResultInfo
		BYTE* pArrestNPCResultInfo = p;
		Write16(pArrestNPCResultInfo, 0); //len

		Write32(pArrestNPCResultInfo, 0); //NpcID
		WriteString(pArrestNPCResultInfo, 0); //NPCName[]
		Write8(pArrestNPCResultInfo, 0); //ResultType

		len = pArrestNPCResultInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	WriteUn(p, 0); //hasGameFrameInfo
	for (size_t i = 0; i < n; i++)
	{ //GameFrameInfo
		BYTE* pGameFrameInfo = p;
		Write16(pGameFrameInfo, 0); //len

		Write32(pGameFrameInfo, 0); //Uin
		Write32(pGameFrameInfo, 0); //MapID
		Write16(pGameFrameInfo, 0); //FrameNum
		for (size_t i = 0; i < n; i++)
		{ //FrameInfo
			BYTE* pFrameInfo = pGameFrameInfo;
			Write16(pFrameInfo, 0); //len

			Write16(pFrameInfo, 0); //CheckPointID
			Write32(pFrameInfo, 0); //Num
			for (size_t i = 0; i < n; i++)
			{ //FrameList
				BYTE* pFrameList = pFrameInfo;
				Write16(pFrameList, 0); //len

				WriteUn(pFrameList, 0); //TimeElaps
				WriteUn(pFrameList, 0); //fInPosX[]
				WriteUn(pFrameList, 0); //fInPosY[]
				WriteUn(pFrameList, 0); //fInPosZ[]
				WriteUn(pFrameList, 0); //fStepX[]
				WriteUn(pFrameList, 0); //fStepY[]
				WriteUn(pFrameList, 0); //fStepZ[]
				WriteUn(pFrameList, 0); //fCarMat[]
				WriteUn(pFrameList, 0); //fOutPosX[]
				WriteUn(pFrameList, 0); //fOutPosY[]
				WriteUn(pFrameList, 0); //fOutPosZ[]
				WriteUn(pFrameList, 0); //fAccTime[]
				WriteUn(pFrameList, 0); //fFrameTime[]
				Write8(pFrameList, 0); //SetPos
				Write8(pFrameList, 0); //Collision

				len = pFrameList - pFrameInfo;
				Set16(pFrameInfo, (WORD)len);
				pFrameInfo += len;
			}

			len = pFrameInfo - pGameFrameInfo;
			Set16(pGameFrameInfo, (WORD)len);
			pGameFrameInfo += len;
		}

		len = pGameFrameInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	WriteUn(p, 0); //hasDesperateEscapeTrophyInfo
	for (size_t i = 0; i < n; i++)
	{ //DesperateEscapeTrophyInfo
		BYTE* pDesperateEscapeTrophyInfo = p;
		Write16(pDesperateEscapeTrophyInfo, 0); //len

		Write8(pDesperateEscapeTrophyInfo, 0); //Num
		for (size_t i = 0; i < n; i++)
		{ //Info
			BYTE* pInfo = pDesperateEscapeTrophyInfo;
			Write16(pInfo, 0); //len

			Write32(pInfo, 0); //Uin
			Write32(pInfo, 0); //SrcUin
			Write8(pInfo, 0); //TrophyType
			Write32(pInfo, 0); //ID
			Write32(pInfo, 0); //RefitCount
			Write8(pInfo, 0); //Status
			Write8(pInfo, 0); //HasRefit
			for (size_t i = 0; i < n; i++)
			{ //KartRefitInfo
				BYTE* pKartRefitInfo = pInfo;
				Write16(pKartRefitInfo, 0); //len

				Write32(pKartRefitInfo, 0); //Uin
				Write32(pKartRefitInfo, 0); //KartId
				Write32(pKartRefitInfo, 0); //RefitCout
				Write16(pKartRefitInfo, 0); //MaxFlags
				Write16(pKartRefitInfo, 0); //WWeight
				Write16(pKartRefitInfo, 0); //SpeedWeight
				Write16(pKartRefitInfo, 0); //JetWeight
				Write16(pKartRefitInfo, 0); //SJetWeight
				Write16(pKartRefitInfo, 0); //AccuWeight
				Write32(pKartRefitInfo, 0); //ShapeRefitCount
				Write32(pKartRefitInfo, 0); //KartHeadRefitItemID
				Write32(pKartRefitInfo, 0); //KartTailRefitItemID
				Write32(pKartRefitInfo, 0); //KartFlankRefitItemID
				Write32(pKartRefitInfo, 0); //KartTireRefitItemID
				Write32(pKartRefitInfo, 0); //SecondRefitCount
				Write16(pKartRefitInfo, 0); //Speed2Weight
				Write16(pKartRefitInfo, 0); //DriftVecWeight
				Write16(pKartRefitInfo, 0); //AdditionalZSpeedWeight
				Write16(pKartRefitInfo, 0); //AntiCollisionWeight
				Write16(pKartRefitInfo, 0); //LuckyValue
				Write16(pKartRefitInfo, 0); //RefitLuckyValueMaxWeight
				Write32(pKartRefitInfo, 0); //ShapeSuitID
				Write8(pKartRefitInfo, 0); //LegendSuitLevel
				Write32(pKartRefitInfo, 0); //LegendSuitLevelChoice
				Write32(pKartRefitInfo, 0); //ShapeLegendSuitID

				len = pKartRefitInfo - pInfo;
				Set16(pInfo, (WORD)len);
				pInfo += len;
			}

			len = pInfo - pDesperateEscapeTrophyInfo;
			Set16(pDesperateEscapeTrophyInfo, (WORD)len);
			pDesperateEscapeTrophyInfo += len;
		}

		len = pDesperateEscapeTrophyInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasGameStageInfo
	for (size_t i = 0; i < n; i++)
	{ //GameStageInfo
		BYTE* pGameStageInfo = p;
		Write16(pGameStageInfo, 0); //len

		Write8(pGameStageInfo, 0); //StageIndex
		Write8(pGameStageInfo, 0); //TotalStageNum

		len = pGameStageInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 513, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyRaceShow(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //RaceShowTime
	Write8(p, 0); //HasFBInfo
	for (size_t i = 0; i < n; i++)
	{ //FBInfo
		BYTE* pFBInfo = p;
		Write16(pFBInfo, 0); //len

		Write8(pFBInfo, 0); //FBResult
		Write32(pFBInfo, 0); //Killer

		len = pFBInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //WinTeamID
	Write32(p, 0); //EventID
	Write32(p, 0); //ParaNum
	Write32(p, 0); //Para[]

	len = p - buf;
	SendToClient(Client, 515, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyGameOver(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //StageIndex
	Write8(p, 0); //ReturnHall
	Write8(p, 0); //WaitEnterRoom
	Write16(p, 0); //LeaveGameType
	Write8(p, 0); //ParaNum
	Write32(p, 0); //ParaList[]

	len = p - buf;
	SendToClient(Client, 514, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestReportCurrentInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	int CurrentState = Read32(p);
	int[] CurrentPosition[] = Read32(p);
	bool PassedCheckPointNum = Read8(p);
	short[] PassedCheckPointIDs[] = Read16(p);
	Un LapTime = ReadUn(p);
	UCHAR AccVerifyDataNum = Read8(p);
	for (size_t i = 0; i < n; i++)
	{ //AccelVerifyData
		BYTE* pAccelVerifyData = p;
		len = Read16(pAccelVerifyData);

		Un Type = ReadUn(pAccelVerifyData);
		USHORT TotalCount = Read16(pAccelVerifyData);
		Un MaxDurTime = ReadUn(pAccelVerifyData);
		USHORT OverlayCount = Read16(pAccelVerifyData);

		p += len;
	}
	UCHAR MsgSequence = Read8(p);
	UCHAR ExtraDataNum = Read8(p);
	for (size_t i = 0; i < n; i++)
	{ //ExtraData
		BYTE* pExtraData = p;
		len = Read16(pExtraData);

		{ //SkillStoneTriggerData
			BYTE* pSkillStoneTriggerData = pExtraData;
			len = Read16(pSkillStoneTriggerData);

			U TriggerTotalCount = ReadU(pSkillStoneTriggerData);
			U CheckData1 = ReadU(pSkillStoneTriggerData);
			U CheckData2 = ReadU(pSkillStoneTriggerData);

			pExtraData += len;
		}
		{ //ClientReportSelfErr
			BYTE* pClientReportSelfErr = pExtraData;
			len = Read16(pClientReportSelfErr);

			int RemoveFailedCount = Read32(pClientReportSelfErr);
			int No2CheckErrCount = Read32(pClientReportSelfErr);
			int FrictionCheckErrCount = Read32(pClientReportSelfErr);
			int GPTargetCheckErrCount = Read32(pClientReportSelfErr);
			int PowerCheckErrCount = Read32(pClientReportSelfErr);
			int StoneCheckErrCount = Read32(pClientReportSelfErr);
			int HashCheckErrCount = Read32(pClientReportSelfErr);
			int TencentCarCheckErrCount = Read32(pClientReportSelfErr);
			int UseIlleagleNo2Count = Read32(pClientReportSelfErr);
			int ListAffectGPsCheckErrCount = Read32(pClientReportSelfErr);
			int GPTargetInvalidErrCount = Read32(pClientReportSelfErr);
			int[] ErrData[] = Read32(pClientReportSelfErr);

			pExtraData += len;
		}
		{ //ClientReportSeflTag
			BYTE* pClientReportSeflTag = pExtraData;
			len = Read16(pClientReportSeflTag);

			int PowerCheckTag = Read32(pClientReportSeflTag);
			int No2CheckTag = Read32(pClientReportSeflTag);
			int TencentCarCheckTag = Read32(pClientReportSeflTag);
			int GPTargetInvalidCheckTag = Read32(pClientReportSeflTag);

			pExtraData += len;
		}
		UINT JetCombinationFlag = Read32(pExtraData);
		Un MaxSpeed = ReadUn(pExtraData);
		UINT CollisionNumOnLastCheckPoint = Read32(pExtraData);
		UINT TotalDrift = Read32(pExtraData);
		BYTE SpeedSectionNum = Read8(pExtraData);
		USHORT[] SpeedSectionAccTime[] = Read16(pExtraData);
		BYTE NormalSpeedSectionNum = Read8(pExtraData);
		USHORT[] NormalSpeedSectionAccTime[] = Read16(pExtraData);
		UCHAR MemCheckResultNum = Read8(pExtraData);
		UINT[] MemData[] = Read32(pExtraData);
		USHORT[] ClientCheckErr[] = Read16(pExtraData);
		USHORT[] ClientCheckErrTag[] = Read16(pExtraData);
		UCHAR UpdateCount = Read8(pExtraData);
		UCHAR OffsetOverThresholdCount = Read8(pExtraData);
		UINT OffsetOverThresholdSum = Read32(pExtraData);
		USHORT MaxOffsetSpeed = Read16(pExtraData);
		USHORT AvgOffsetSpeed = Read16(pExtraData);
		USHORT MaxRealSpeed = Read16(pExtraData);
		USHORT AvgRealSpeed = Read16(pExtraData);
		UINT MaxSpeedRatio = Read32(pExtraData);
		USHORT SpeedRatioOverThresholdCount = Read16(pExtraData);
		UINT MaxSpeedRatio2 = Read32(pExtraData);
		USHORT SpeedRatioOverThresholdCount2 = Read16(pExtraData);
		UINT FBSkillRebornTime = Read32(pExtraData);
		UINT FBSkillChargeTime = Read32(pExtraData);
		UINT TotalPerpetualNight = Read32(pExtraData);
		int RPCSFlag = Read32(pExtraData);
		UINT CollisionPlayerNum = Read32(pExtraData);
		UINT CollisionNumOnPlayer = Read32(pExtraData);
		int CodeItegrity = Read32(pExtraData);
		int SendLaPkg = Read32(pExtraData);
		int SendDataToSvr = Read32(pExtraData);
		int[] AbnormalData[] = Read32(pExtraData);
		{ //LevelInfo
			BYTE* pLevelInfo = pExtraData;
			len = Read16(pLevelInfo);

			char LowFPSRatio = Read8(pLevelInfo);
			char AveFPS = Read8(pLevelInfo);
			int MemUsed = Read32(pLevelInfo);
			int VMemUsed = Read32(pLevelInfo);
			int GameSetting = Read32(pLevelInfo);

			pExtraData += len;
		}
		UINT PositionErrorCount = Read32(pExtraData);
		UINT DropToDeathSurfaceNums = Read32(pExtraData);
		UINT CollideNumsInN2OStat = Read32(pExtraData);
		UINT BeyondPlayerNums = Read32(pExtraData);

		p += len;
	}
	UCHAR N2OChangeEventNum = Read8(p);
	for (size_t i = 0; i < n; i++)
	{ //N2OChangeEvent
		BYTE* pN2OChangeEvent = p;
		len = Read16(pN2OChangeEvent);

		USHORT EventID = Read16(pN2OChangeEvent);
		UINT BeginLapTime = Read32(pN2OChangeEvent);
		USHORT LastingTime = Read16(pN2OChangeEvent);
		UCHAR EventType = Read8(pN2OChangeEvent);
		short N2OChange = Read16(pN2OChangeEvent);

		p += len;
	}
	UINT Flag = Read32(p);
	UCHAR HasCrashModeData = Read8(p);
	for (size_t i = 0; i < n; i++)
	{ //CrashModeData
		BYTE* pCrashModeData = p;
		len = Read16(pCrashModeData);

		UCHAR CurEggNum = Read8(pCrashModeData);

		p += len;
	}
	UCHAR HasPointChallengeData = Read8(p);
	for (size_t i = 0; i < n; i++)
	{ //PointChallengeData
		BYTE* pPointChallengeData = p;
		len = Read16(pPointChallengeData);

		UINT EatCoin = Read32(pPointChallengeData);
		UINT BeforeTime = Read32(pPointChallengeData);
		UINT BeforeLong = Read32(pPointChallengeData);
		UINT CollectN2 = Read32(pPointChallengeData);
		UINT Shuangpen = Read32(pPointChallengeData);
		UINT Kongpen = Read32(pPointChallengeData);
		UINT Luodipen = Read32(pPointChallengeData);
		UINT NPCRunAfterTime = Read32(pPointChallengeData);
		UINT LeiYinCrazyJet = Read32(pPointChallengeData);

		p += len;
	}
	UINT SkateCoinNum = Read32(p);
	for (size_t i = 0; i < n; i++)
	{ //SkateCoinData
		BYTE* pSkateCoinData = p;
		len = Read16(pSkateCoinData);

		UINT CoinID = Read32(pSkateCoinData);
		UINT PlayerPosX = Read32(pSkateCoinData);
		UINT PlayerPosY = Read32(pSkateCoinData);
		UINT PlayerPosZ = Read32(pSkateCoinData);

		p += len;
	}
	UINT SkateComboAwardCoinNum = Read32(p);
	for (size_t i = 0; i < n; i++)
	{ //SkateComboAwardCoinData
		BYTE* pSkateComboAwardCoinData = p;
		len = Read16(pSkateComboAwardCoinData);

		USHORT ComboNum = Read16(pSkateComboAwardCoinData);
		USHORT CoinNum = Read16(pSkateComboAwardCoinData);

		p += len;
	}
	UINT SkateDoubleJumpCount = Read32(p);
	int CurrMapID = Read32(p);
	UCHAR HasGameDetailRecord = Read8(p);
	for (size_t i = 0; i < n; i++)
	{ //GameDetailRecord
		BYTE* pGameDetailRecord = p;
		len = Read16(pGameDetailRecord);

		UINT Uin = Read32(pGameDetailRecord);
		char[] NickName[] = ReadString(pGameDetailRecord);
		int KartId = Read32(pGameDetailRecord);
		Un FinTime = ReadUn(pGameDetailRecord);
		UINT HighestSpeed = Read32(pGameDetailRecord);
		UINT AverageSpeed = Read32(pGameDetailRecord);
		UINT CollisionCount = Read32(pGameDetailRecord);
		UINT N2OGatherCount = Read32(pGameDetailRecord);
		UINT JetTime = Read32(pGameDetailRecord);
		UINT ChaoJiQiBu = Read32(pGameDetailRecord);
		UINT ZhuangQiangDianPen = Read32(pGameDetailRecord);
		UINT DriftCount = Read32(pGameDetailRecord);
		UINT SmallJetCount = Read32(pGameDetailRecord);
		UINT DoubleJetCount = Read32(pGameDetailRecord);
		UINT FlyJetCount = Read32(pGameDetailRecord);
		UINT FallJetCount = Read32(pGameDetailRecord);
		UINT DuanWeiQiBu = Read32(pGameDetailRecord);
		UINT DuanWeiDoubleJetCount = Read32(pGameDetailRecord);
		UINT LinkJetCount = Read32(pGameDetailRecord);
		UINT WCJetCount = Read32(pGameDetailRecord);
		UINT CeShenDriftCount = Read32(pGameDetailRecord);
		UINT ShuaiWeiDriftCount = Read32(pGameDetailRecord);
		UINT CWWJetCount = Read32(pGameDetailRecord);
		UINT XiaoGuaCount = Read32(pGameDetailRecord);
		Un teamID = ReadUn(pGameDetailRecord);
		UINT FastCornersNum = Read32(pGameDetailRecord);
		USHORT DiffCornerNum = Read16(pGameDetailRecord);
		UINT FastCornerDetailInfo[] = Read32(pGameDetailRecord);
		USHORT WSingleJetCount = Read16(pGameDetailRecord);
		USHORT WCWJetCount = Read16(pGameDetailRecord);
		USHORT CWWJetCount = Read16(pGameDetailRecord);
		USHORT CeShenJetCount = Read16(pGameDetailRecord);
		USHORT ShuaiWeiJetCount = Read16(pGameDetailRecord);
		short RankedMatchGrade = Read16(pGameDetailRecord);
		USHORT DuanWeiPiaoYi = Read16(pGameDetailRecord);
		USHORT DuanWeiJet = Read16(pGameDetailRecord);
		USHORT OutOfTurnQuickly = Read16(pGameDetailRecord);
		USHORT Launch = Read16(pGameDetailRecord);
		USHORT HitWaterDrift = Read16(pGameDetailRecord);
		USHORT OutWaterJet = Read16(pGameDetailRecord);
		USHORT N2DriftContinue = Read16(pGameDetailRecord);
		USHORT WaveFlyJet = Read16(pGameDetailRecord);
		USHORT WorldID = Read16(pGameDetailRecord);
		UCHAR Npc = Read8(pGameDetailRecord);
		UINT GameSeq = Read32(pGameDetailRecord);
		UINT Time = Read32(pGameDetailRecord);

		p += len;
	}
	UCHAR CurrentInfoFlag = Read8(p);
	int TotalAccelerateFuel = Read32(p);
	UINT DstNPCID = Read32(p);
	UINT DistanceToEnd = Read32(p);
	int GansterProcess = Read32(p);
	int TotalGangsterPKCount = Read32(p);
	UCHAR HasTowerChallengeData = Read8(p);
	for (size_t i = 0; i < n; i++)
	{ //TowerChallengeData
		BYTE* pTowerChallengeData = p;
		len = Read16(pTowerChallengeData);

		UINT EatCoin = Read32(pTowerChallengeData);
		UINT CollisionCount = Read32(pTowerChallengeData);
		UINT DriftCount = Read32(pTowerChallengeData);
		char KartStatus = Read8(pTowerChallengeData);
		char TrackElementNum = Read8(pTowerChallengeData);
		for (size_t i = 0; i < n; i++)
		{ //TriggerInfo
			BYTE* pTriggerInfo = pTowerChallengeData;
			len = Read16(pTriggerInfo);

			char Type = Read8(pTriggerInfo);
			char InitCheckPoint = Read8(pTriggerInfo);
			char PlayerTriggerCheckPoint = Read8(pTriggerInfo);

			pTowerChallengeData += len;
		}

		p += len;
	}
	UCHAR CurrentSelfRank = Read8(p);
	UCHAR CurrentTeammateRank = Read8(p);
	UCHAR HasP2PStatusData = Read8(p);
	for (size_t i = 0; i < n; i++)
	{ //P2PStatusData
		BYTE* pP2PStatusData = p;
		len = Read16(pP2PStatusData);

		UINT Uin = Read32(pP2PStatusData);
		UCHAR ServerUDPLoginStaus = Read8(pP2PStatusData);
		UCHAR PlayerNum = Read8(pP2PStatusData);
		for (size_t i = 0; i < n; i++)
		{ //P2PStatus2Player
			BYTE* pP2PStatus2Player = pP2PStatusData;
			len = Read16(pP2PStatus2Player);

			UINT Uin = Read32(pP2PStatus2Player);
			UCHAR P2PConnectState = Read8(pP2PStatus2Player);
			UCHAR P2PCanPass = Read8(pP2PStatus2Player);
			UINT P2PNetSpeed = Read32(pP2PStatus2Player);
			UINT NetSpeed = Read32(pP2PStatus2Player);
			UINT NotPassStateCount = Read32(pP2PStatus2Player);
			UINT SendDataCount[] = Read32(pP2PStatus2Player);
			UINT RecvDataCount[] = Read32(pP2PStatus2Player);
			UINT ServerRecvDataCount[] = Read32(pP2PStatus2Player);
			USHORT RecvPkgCount = Read16(pP2PStatus2Player);
			for (size_t i = 0; i < n; i++)
			{ //RecvPkgInfo
				BYTE* pRecvPkgInfo = pP2PStatus2Player;
				len = Read16(pRecvPkgInfo);

				UINT PkgID = Read32(pRecvPkgInfo);
				UINT RecvTime = Read32(pRecvPkgInfo);
				UINT DistanceDiff = Read32(pRecvPkgInfo);

				pP2PStatus2Player += len;
			}
			UCHAR DetailCount = Read8(pP2PStatus2Player);
			for (size_t i = 0; i < n; i++)
			{ //DetailInfo
				BYTE* pDetailInfo = pP2PStatus2Player;
				len = Read16(pDetailInfo);

				UCHAR Type = Read8(pDetailInfo);
				UINT MsgID = Read32(pDetailInfo);
				UINT Count = Read32(pDetailInfo);

				pP2PStatus2Player += len;
			}

			pP2PStatusData += len;
		}
		USHORT SendPkgCount = Read16(pP2PStatusData);
		for (size_t i = 0; i < n; i++)
		{ //SendPkgInfo
			BYTE* pSendPkgInfo = pP2PStatusData;
			len = Read16(pSendPkgInfo);

			UINT PkgID = Read32(pSendPkgInfo);
			UINT SendTime = Read32(pSendPkgInfo);
			UCHAR UDPStatus = Read8(pSendPkgInfo);
			UCHAR SendDataMethod = Read8(pSendPkgInfo);

			pP2PStatusData += len;
		}
		UINT RaceBeginTime = Read32(pP2PStatusData);
		UINT LagCnt = Read32(pP2PStatusData);
		UINT LagCntGlobal = Read32(pP2PStatusData);
		UINT TickInLevel = Read32(pP2PStatusData);

		p += len;
	}
	UINT DistanceToFirstRacer = Read32(p);
	UINT TimerChallengeRecoverNum = Read32(p);
	UINT CoinNum = Read32(p);
	UCHAR ClientPlayerNum = Read8(p);
	for (size_t i = 0; i < n; i++)
	{ //ClientGameInfo
		BYTE* pClientGameInfo = p;
		len = Read16(pClientGameInfo);

		UINT Uin = Read32(pClientGameInfo);
		UCHAR DistanceNum = Read8(pClientGameInfo);
		for (size_t i = 0; i < n; i++)
		{ //DistanceToEndInfo
			BYTE* pDistanceToEndInfo = pClientGameInfo;
			len = Read16(pDistanceToEndInfo);

			UINT TimeFromRaceBegin = Read32(pDistanceToEndInfo);
			UINT DistanceToEnd = Read32(pDistanceToEndInfo);

			pClientGameInfo += len;
		}
		UCHAR CollisionNum = Read8(pClientGameInfo);
		for (size_t i = 0; i < n; i++)
		{ //ClientCollisionInfo
			BYTE* pClientCollisionInfo = pClientGameInfo;
			len = Read16(pClientCollisionInfo);

			UINT TimeFromRaceBegin = Read32(pClientCollisionInfo);

			pClientGameInfo += len;
		}

		p += len;
	}
	UCHAR RankedMatchSpeedKingBuffer = Read8(p);
	UINT DistanceTotal = Read32(p);
	UCHAR IsHitRecordContion = Read8(p);
	USHORT HangSpan = Read16(p);
	UCHAR CurRound = Read8(p);
	UCHAR IncRound = Read8(p);

}

void RequestFindPlayerByQQ(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	char[] NickName[] = ReadString(p);
	Un DstUin = ReadUn(p);
	Un DstNobleID = ReadUn(p);
	UCHAR Contex = Read8(p);
	UCHAR AreaIdDst = Read8(p);
	UCHAR IgnoreByQQ2Msg = Read8(p);
	UCHAR SimpleInfo = Read8(p);

}

void ResponseFindPlayerByQQ(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	{ //PlayerInfo
		BYTE* pPlayerInfo = p;
		Write16(pPlayerInfo, 0); //len

		WriteUn(pPlayerInfo, 0); //Uin
		WriteUn(pPlayerInfo, 0); //Identity
		Write16(pPlayerInfo, 0); //PlayerID
		{ //PlayerDBBaseInfo
			BYTE* pPlayerDBBaseInfo = pPlayerInfo;
			Write16(pPlayerDBBaseInfo, 0); //len

			WriteString(pPlayerDBBaseInfo, 0); //NickName[]
			Write8(pPlayerDBBaseInfo, 0); //Gender
			Write8(pPlayerDBBaseInfo, 0); //Country
			Write32(pPlayerDBBaseInfo, 0); //License
			WriteUn(pPlayerDBBaseInfo, 0); //Experience
			Write32(pPlayerDBBaseInfo, 0); //SuperMoney
			Write32(pPlayerDBBaseInfo, 0); //Money
			WriteUn(pPlayerDBBaseInfo, 0); //WinNum
			Write32(pPlayerDBBaseInfo, 0); //SecondNum
			Write32(pPlayerDBBaseInfo, 0); //ThirdNum
			WriteUn(pPlayerDBBaseInfo, 0); //TotalNum
			Write32(pPlayerDBBaseInfo, 0); //CurHonor
			Write32(pPlayerDBBaseInfo, 0); //TotalHonor
			Write32(pPlayerDBBaseInfo, 0); //TodayHonor
			Write32(pPlayerDBBaseInfo, 0); //RelaxTime
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationBefore
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationCur
			Write32(pPlayerDBBaseInfo, 0); //Charm
			Write32(pPlayerDBBaseInfo, 0); //DurationGame
			Write32(pPlayerDBBaseInfo, 0); //DanceExp
			Write32(pPlayerDBBaseInfo, 0); //Coupons
			Write32(pPlayerDBBaseInfo, 0); //Admiration
			Write32(pPlayerDBBaseInfo, 0); //LuckMoney
			Write32(pPlayerDBBaseInfo, 0); //TeamWorkExp
			Write32(pPlayerDBBaseInfo, 0); //AchievePoint
			Write32(pPlayerDBBaseInfo, 0); //RegTime
			WriteString(pPlayerDBBaseInfo, 0); //Signature[]
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchPoint
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchNum
			Write16(pPlayerDBBaseInfo, 0); //LuckyMatchFirstNum
			Write8(pPlayerDBBaseInfo, 0); //LuckyMatchBestRand
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchWinNum
			Write32(pPlayerDBBaseInfo, 0); //FizzPointTotal
			Write16(pPlayerDBBaseInfo, 0); //FizzPointDaily
			Write16(pPlayerDBBaseInfo, 0); //FizzPointWeekly
			Write16(pPlayerDBBaseInfo, 0); //FizzPointLastWeek
			Write8(pPlayerDBBaseInfo, 0); //FizzLotteryStatus
			Write32(pPlayerDBBaseInfo, 0); //FizzLastUpdateTime
			Write32(pPlayerDBBaseInfo, 0); //SNSLocaleCode
			Write32(pPlayerDBBaseInfo, 0); //AuctionRightUnlockTime
			Write8(pPlayerDBBaseInfo, 0); //ReserveFlag
			Write32(pPlayerDBBaseInfo, 0); //CurConsumeScore
			Write32(pPlayerDBBaseInfo, 0); //HistoryConsumeScore
			Write8(pPlayerDBBaseInfo, 0); //CrashModeSponsorID
			Write32(pPlayerDBBaseInfo, 0); //Popularity
			Write32(pPlayerDBBaseInfo, 0); //LadderMatchAchievePoint
			Write32(pPlayerDBBaseInfo, 0); //Cash
			Write32(pPlayerDBBaseInfo, 0); //PlayerGPMIdentity
			Write32(pPlayerDBBaseInfo, 0); //PointTotalScore
			WriteUn(pPlayerDBBaseInfo, 0); //totalMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //lastMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalSeasonId
			WriteUn(pPlayerDBBaseInfo, 0); //lastClearMapMedalTime
			WriteUn(pPlayerDBBaseInfo, 0); //max2048Score
			WriteUn(pPlayerDBBaseInfo, 0); //curPlay2048LeftNum
			Write32(pPlayerDBBaseInfo, 0); //CheerValue
			Write16(pPlayerDBBaseInfo, 0); //SeasonID
			Write32(pPlayerDBBaseInfo, 0); //LastCheerValue
			Write32(pPlayerDBBaseInfo, 0); //SpeedBean
			Write32(pPlayerDBBaseInfo, 0); //SpeedCoin

			len = pPlayerDBBaseInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		{ //PlayerGuildInfo
			BYTE* pPlayerGuildInfo = pPlayerInfo;
			Write16(pPlayerGuildInfo, 0); //len

			WriteString(pPlayerGuildInfo, 0); //GuildName[]
			Write16(pPlayerGuildInfo, 0); //Duty
			Write32(pPlayerGuildInfo, 0); //GuildID
			Write32(pPlayerGuildInfo, 0); //Right
			Write32(pPlayerGuildInfo, 0); //Medal
			Write32(pPlayerGuildInfo, 0); //Contribute
			WriteString(pPlayerGuildInfo, 0); //DutyTitle[]

			len = pPlayerGuildInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		Write16(pPlayerInfo, 0); //EquipedItemNum
		for (size_t i = 0; i < n; i++)
		{ //PlayerItemInfo
			BYTE* pPlayerItemInfo = pPlayerInfo;
			Write16(pPlayerItemInfo, 0); //len

			Write32(pPlayerItemInfo, 0); //ItemID
			Write32(pPlayerItemInfo, 0); //ItemNum
			Write32(pPlayerItemInfo, 0); //AvailPeriod
			Write8(pPlayerItemInfo, 0); //Status
			WriteUn(pPlayerItemInfo, 0); //ObtainTime
			Write32(pPlayerItemInfo, 0); //OtherAttribute
			Write16(pPlayerItemInfo, 0); //ItemType

			len = pPlayerItemInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		Write32(pPlayerInfo, 0); //MasterPoint
		Write32(pPlayerInfo, 0); //TotalGuildProsperity
		WriteUn(pPlayerInfo, 0); //VipFlag
		WriteUn(pPlayerInfo, 0); //VipGrowRate
		Write8(pPlayerInfo, 0); //AppellationNum
		for (size_t i = 0; i < n; i++)
		{ //Record
			BYTE* pRecord = pPlayerInfo;
			Write16(pRecord, 0); //len

			Write8(pRecord, 0); //Type
			Write8(pRecord, 0); //Level
			Write8(pRecord, 0); //Status
			Write8(pRecord, 0); //Difficulty
			Write32(pRecord, 0); //MapId
			Write32(pRecord, 0); //Value

			len = pRecord - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		{ //NobleInfo
			BYTE* pNobleInfo = pPlayerInfo;
			Write16(pNobleInfo, 0); //len

			Write32(pNobleInfo, 0); //NobleID
			Write8(pNobleInfo, 0); //NobleLevel
			Write32(pNobleInfo, 0); //NoblePoint
			Write32(pNobleInfo, 0); //NobleLeftDays

			len = pNobleInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		Write8(pPlayerInfo, 0); //HasCarryWizard
		for (size_t i = 0; i < n; i++)
		{ //CarryWizardInfo
			BYTE* pCarryWizardInfo = pPlayerInfo;
			Write16(pCarryWizardInfo, 0); //len

			Write16(pCarryWizardInfo, 0); //WizardID
			WriteString(pCarryWizardInfo, 0); //NickName[]
			Write16(pCarryWizardInfo, 0); //WizardType
			Write8(pCarryWizardInfo, 0); //Order
			Write8(pCarryWizardInfo, 0); //EvolutionBranch
			Write8(pCarryWizardInfo, 0); //IsHuanHua

			len = pCarryWizardInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		{ //GuildVipBaseInfo
			BYTE* pGuildVipBaseInfo = pPlayerInfo;
			Write16(pGuildVipBaseInfo, 0); //len

			Write8(pGuildVipBaseInfo, 0); //GuildVipLevel
			Write32(pGuildVipBaseInfo, 0); //GuildVipPoint

			len = pGuildVipBaseInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		Write8(pPlayerInfo, 0); //HasLDMInfo
		for (size_t i = 0; i < n; i++)
		{ //LDMInfo
			BYTE* pLDMInfo = pPlayerInfo;
			Write16(pLDMInfo, 0); //len

			Write8(pLDMInfo, 0); //IsInCurSeason
			Write32(pLDMInfo, 0); //Score
			Write32(pLDMInfo, 0); //MaxScore
			Write8(pLDMInfo, 0); //Grade
			Write8(pLDMInfo, 0); //MaxGrade
			Write32(pLDMInfo, 0); //WinStreakCount
			Write32(pLDMInfo, 0); //MatchCount
			Write32(pLDMInfo, 0); //CollisionCount
			Write32(pLDMInfo, 0); //BeatCount

			len = pLDMInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		Write8(pPlayerInfo, 0); //HasLoverVip
		for (size_t i = 0; i < n; i++)
		{ //LoverVipInfo
			BYTE* pLoverVipInfo = pPlayerInfo;
			Write16(pLoverVipInfo, 0); //len

			Write8(pLoverVipInfo, 0); //LoverVipLevel
			Write32(pLoverVipInfo, 0); //LoverVipPoint
			Write8(pLoverVipInfo, 0); //GrowRate

			len = pLoverVipInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		Write8(pPlayerInfo, 0); //IsShowMounts
		Write8(pPlayerInfo, 0); //HasGarden
		for (size_t i = 0; i < n; i++)
		{ //PersonalGardenBaseInfo
			BYTE* pPersonalGardenBaseInfo = pPlayerInfo;
			Write16(pPersonalGardenBaseInfo, 0); //len

			Write8(pPersonalGardenBaseInfo, 0); //GardenLevel
			Write32(pPersonalGardenBaseInfo, 0); //GardenPoint
			Write8(pPersonalGardenBaseInfo, 0); //GrowRate
			Write32(pPersonalGardenBaseInfo, 0); //GardenExpireTime
			{ //SimpleInfo
				BYTE* pSimpleInfo = pPersonalGardenBaseInfo;
				Write16(pSimpleInfo, 0); //len

				Write32(pSimpleInfo, 0); //WeekPopularity
				Write32(pSimpleInfo, 0); //TotalPopularity
				Write32(pSimpleInfo, 0); //LastUpdatePopularityTime
				Write8(pSimpleInfo, 0); //PrivateType

				len = pSimpleInfo - pPersonalGardenBaseInfo;
				Set16(pPersonalGardenBaseInfo, (WORD)len);
				pPersonalGardenBaseInfo += len;
			}

			len = pPersonalGardenBaseInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		WriteUn(pPlayerInfo, 0); //isConsumeVip
		WriteUn(pPlayerInfo, 0); //ConsumeVipLevel
		WriteUn(pPlayerInfo, 0); //SearchTreasureNums
		WriteUn(pPlayerInfo, 0); //GetTreasureNums
		WriteUn(pPlayerInfo, 0); //ConsumeVipCharmVlaueOfMonth
		{ //EmperorInfo
			BYTE* pEmperorInfo = pPlayerInfo;
			Write16(pEmperorInfo, 0); //len

			Write8(pEmperorInfo, 0); //EmperorLevel
			Write32(pEmperorInfo, 0); //EmperorPoint
			Write32(pEmperorInfo, 0); //EmperorLeftDays
			Write8(pEmperorInfo, 0); //EmperorGrowRate

			len = pEmperorInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		{ //EmperorOtherInfo
			BYTE* pEmperorOtherInfo = pPlayerInfo;
			Write16(pEmperorOtherInfo, 0); //len

			Write32(pEmperorOtherInfo, 0); //ExpiredTime
			Write8(pEmperorOtherInfo, 0); //ShowExpireTips

			len = pEmperorOtherInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		{ //ActivityInfo
			BYTE* pActivityInfo = pPlayerInfo;
			Write16(pActivityInfo, 0); //len

			Write32(pActivityInfo, 0); //TotalActivity
			Write32(pActivityInfo, 0); //ActivityLevel

			len = pActivityInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		Write8(pPlayerInfo, 0); //HaveWakedKartAttributeAddInfo
		{ //WakeKartAttributeAddInfo
			BYTE* pWakeKartAttributeAddInfo = pPlayerInfo;
			Write16(pWakeKartAttributeAddInfo, 0); //len

			Write16(pWakeKartAttributeAddInfo, 0); //AccAddValue
			Write16(pWakeKartAttributeAddInfo, 0); //SpeedAddValue
			Write16(pWakeKartAttributeAddInfo, 0); //JetAddValue
			Write16(pWakeKartAttributeAddInfo, 0); //SJetAddValue

			len = pWakeKartAttributeAddInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		Write8(pPlayerInfo, 0); //HaveLoverBabyInfo
		{ //FindLoverBabyInfo
			BYTE* pFindLoverBabyInfo = pPlayerInfo;
			Write16(pFindLoverBabyInfo, 0); //len

			Write32(pFindLoverBabyInfo, 0); //BabyStatus
			Write32(pFindLoverBabyInfo, 0); //LoverBabyItemID
			Write32(pFindLoverBabyInfo, 0); //LoverBabyID
			Write32(pFindLoverBabyInfo, 0); //BabyGrowLevel
			Write32(pFindLoverBabyInfo, 0); //BabyStrengthLevel
			Write16(pFindLoverBabyInfo, 0); //LoverBabyStat
			Write16(pFindLoverBabyInfo, 0); //LoverBabyEquipStat
			Write16(pFindLoverBabyInfo, 0); //LoverBabyTransferdStatus

			len = pFindLoverBabyInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		{ //GansterScoreInfo
			BYTE* pGansterScoreInfo = pPlayerInfo;
			Write16(pGansterScoreInfo, 0); //len

			Write32(pGansterScoreInfo, 0); //GansterSeasonID
			Write32(pGansterScoreInfo, 0); //GansterScore
			Write32(pGansterScoreInfo, 0); //PoliceScore
			Write32(pGansterScoreInfo, 0); //TotalGansterScore

			len = pGansterScoreInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		Write32(pPlayerInfo, 0); //OlympicId
		Write32(pPlayerInfo, 0); //LastOlympicUpdateTime
		Write32(pPlayerInfo, 0); //NPCEliminateWinTimes
		{ //BorderInfo
			BYTE* pBorderInfo = pPlayerInfo;
			Write16(pBorderInfo, 0); //len

			Write32(pBorderInfo, 0); //SeasonID
			Write32(pBorderInfo, 0); //Zhanxun
			Write32(pBorderInfo, 0); //SeasonZhanxun

			len = pBorderInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		Write8(pPlayerInfo, 0); //SpecialActivityID
		Write32(pPlayerInfo, 0); //ThemeHouseCollectValue
		Write8(pPlayerInfo, 0); //HaveSecondLoverBabyInfo
		{ //SecondLoverBabyInfo
			BYTE* pSecondLoverBabyInfo = pPlayerInfo;
			Write16(pSecondLoverBabyInfo, 0); //len

			Write32(pSecondLoverBabyInfo, 0); //BabyStatus
			Write32(pSecondLoverBabyInfo, 0); //LoverBabyItemID
			Write32(pSecondLoverBabyInfo, 0); //LoverBabyID
			Write32(pSecondLoverBabyInfo, 0); //BabyGrowLevel
			Write32(pSecondLoverBabyInfo, 0); //BabyStrengthLevel
			Write16(pSecondLoverBabyInfo, 0); //LoverBabyStat
			Write16(pSecondLoverBabyInfo, 0); //LoverBabyEquipStat
			Write16(pSecondLoverBabyInfo, 0); //LoverBabyTransferdStatus

			len = pSecondLoverBabyInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		Write8(pPlayerInfo, 0); //EquipBaby
		Write8(pPlayerInfo, 0); //ActiveStatus
		Write32(pPlayerInfo, 0); //HelperLev
		Write8(pPlayerInfo, 0); //HasRankedMatchInfo
		for (size_t i = 0; i < n; i++)
		{ //RankedMatchGradeInfo
			BYTE* pRankedMatchGradeInfo = pPlayerInfo;
			Write16(pRankedMatchGradeInfo, 0); //len

			Write32(pRankedMatchGradeInfo, 0); //GradeLevel
			Write32(pRankedMatchGradeInfo, 0); //ChildLevel
			Write32(pRankedMatchGradeInfo, 0); //GradeScore
			Write32(pRankedMatchGradeInfo, 0); //MaxGradeScore
			Write32(pRankedMatchGradeInfo, 0); //TotalScore

			len = pRankedMatchGradeInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		Write16(pPlayerInfo, 0); //PlayerSeasonInfoNums
		for (size_t i = 0; i < n; i++)
		{ //PlayerSeasonInfos
			BYTE* pPlayerSeasonInfos = pPlayerInfo;
			Write16(pPlayerSeasonInfos, 0); //len

			Write16(pPlayerSeasonInfos, 0); //SeasonID
			Write16(pPlayerSeasonInfos, 0); //GradeLevel
			Write8(pPlayerSeasonInfos, 0); //ChildLevel
			Write16(pPlayerSeasonInfos, 0); //HighGradeLevel
			Write8(pPlayerSeasonInfos, 0); //HighChildLevel
			Write8(pPlayerSeasonInfos, 0); //SeasonInfoProcesedTag
			Write8(pPlayerSeasonInfos, 0); //SeasonComputeInfoTipTag
			Write16(pPlayerSeasonInfos, 0); //SeasonInheritTag
			Write8(pPlayerSeasonInfos, 0); //SeasonInheritTipTag
			Write16(pPlayerSeasonInfos, 0); //SpeedGodNums
			Write32(pPlayerSeasonInfos, 0); //SpeedRoundNums
			Write32(pPlayerSeasonInfos, 0); //SpeedFinishRoundNums
			Write32(pPlayerSeasonInfos, 0); //TotalRankIndex
			Write32(pPlayerSeasonInfos, 0); //ContiFinishRoundNums
			Write32(pPlayerSeasonInfos, 0); //SpeedKillAllRoundNums
			Write32(pPlayerSeasonInfos, 0); //PropRoundNums
			Write32(pPlayerSeasonInfos, 0); //PropFinishRoundNums
			Write32(pPlayerSeasonInfos, 0); //ContiFinishPropRoundNums
			Write32(pPlayerSeasonInfos, 0); //PropKillAllRoundNums
			Write8(pPlayerSeasonInfos, 0); //LastRoundIndex
			Write32(pPlayerSeasonInfos, 0); //OpenDate
			Write32(pPlayerSeasonInfos, 0); //CloseDate
			Write32(pPlayerSeasonInfos, 0); //HistroyContFinishRoundNums

			len = pPlayerSeasonInfos - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		Write8(pPlayerInfo, 0); //IsHelperAppOnline
		Write32(pPlayerInfo, 0); //RankedMatchSpeedGodNums
		Write8(pPlayerInfo, 0); //EquipSealType
		Write8(pPlayerInfo, 0); //HasHuanLingChangeInfo
		for (size_t i = 0; i < n; i++)
		{ //HuanLingSuitInfo
			BYTE* pHuanLingSuitInfo = pPlayerInfo;
			Write16(pHuanLingSuitInfo, 0); //len

			Write32(pHuanLingSuitInfo, 0); //SuitID
			Write8(pHuanLingSuitInfo, 0); //ChangeLevel

			len = pHuanLingSuitInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		Write8(pPlayerInfo, 0); //SpecialActivityIDNum
		Write8(pPlayerInfo, 0); //PersonalPanelSelectRankedMatchFrameTag
		Write8(pPlayerInfo, 0); //SpecialActivityInfoNum
		for (size_t i = 0; i < n; i++)
		{ //SpecialActivityInfo
			BYTE* pSpecialActivityInfo = pPlayerInfo;
			Write16(pSpecialActivityInfo, 0); //len

			Write8(pSpecialActivityInfo, 0); //ProfessionLicenseInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ProfessionLicenseInfo
				BYTE* pProfessionLicenseInfo = pSpecialActivityInfo;
				Write16(pProfessionLicenseInfo, 0); //len

				Write8(pProfessionLicenseInfo, 0); //BigLevel
				Write8(pProfessionLicenseInfo, 0); //SmallLevel

				len = pProfessionLicenseInfo - pSpecialActivityInfo;
				Set16(pSpecialActivityInfo, (WORD)len);
				pSpecialActivityInfo += len;
			}

			len = pSpecialActivityInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		Write8(pPlayerInfo, 0); //PersonalRankedMatchLevelShowTag
		Write8(pPlayerInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemOrder
			BYTE* pItemOrder = pPlayerInfo;
			Write16(pItemOrder, 0); //len

			Write32(pItemOrder, 0); //KartID
			Write32(pItemOrder, 0); //Order
			Write32(pItemOrder, 0); //BackGroundID

			len = pItemOrder - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		Write8(pPlayerInfo, 0); //ExRightFlagLen
		Write8(pPlayerInfo, 0); //EquipNiChangItemNum
		for (size_t i = 0; i < n; i++)
		{ //NiChangPavilionEquipItemInfo
			BYTE* pNiChangPavilionEquipItemInfo = pPlayerInfo;
			Write16(pNiChangPavilionEquipItemInfo, 0); //len

			Write32(pNiChangPavilionEquipItemInfo, 0); //ItemId
			Write16(pNiChangPavilionEquipItemInfo, 0); //CurrentEquipColorationPlanId

			len = pNiChangPavilionEquipItemInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}

		len = pPlayerInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //IsOnLine
	{ //PositionInfo
		BYTE* pPositionInfo = p;
		Write16(pPositionInfo, 0); //len

		Write8(pPositionInfo, 0); //ServerType
		Write16(pPositionInfo, 0); //Status
		Write32(pPositionInfo, 0); //ServerID
		{ //RoomInfo
			BYTE* pRoomInfo = pPositionInfo;
			Write16(pRoomInfo, 0); //len

			Write16(pRoomInfo, 0); //RoomID
			Write16(pRoomInfo, 0); //BaseGameMode
			Write16(pRoomInfo, 0); //SubGameMode
			Write8(pRoomInfo, 0); //CurrentPlayerNum
			Write8(pRoomInfo, 0); //TotalSeatNum
			Write8(pRoomInfo, 0); //Status
			Write32(pRoomInfo, 0); //MapID
			Write8(pRoomInfo, 0); //Flag
			WriteString(pRoomInfo, 0); //RoomName[]
			Write8(pRoomInfo, 0); //HasFBInfo
			for (size_t i = 0; i < n; i++)
			{ //FBInfo
				BYTE* pFBInfo = pRoomInfo;
				Write16(pFBInfo, 0); //len

				Write8(pFBInfo, 0); //AvailableLev
				Write8(pFBInfo, 0); //Lev
				Write8(pFBInfo, 0); //SubLev
				Write32(pFBInfo, 0); //BossID
				Write8(pFBInfo, 0); //FBSeason

				len = pFBInfo - pRoomInfo;
				Set16(pRoomInfo, (WORD)len);
				pRoomInfo += len;
			}
			Write8(pRoomInfo, 0); //SpeFlag
			Write32(pRoomInfo, 0); //RoomNo
			Write16(pRoomInfo, 0); //SvrId
			Write16(pRoomInfo, 0); //SceneID
			Write8(pRoomInfo, 0); //CurrentOBNum
			Write8(pRoomInfo, 0); //TotalOBNum
			Write8(pRoomInfo, 0); //SpecialActivityStatus
			Write8(pRoomInfo, 0); //AllowAutoStart
			Write32(pRoomInfo, 0); //Gender
			Write32(pRoomInfo, 0); //LocaleCode
			Write8(pRoomInfo, 0); //TalkRoomBGID
			Write8(pRoomInfo, 0); //SpecialActivityIDNum
			Write8(pRoomInfo, 0); //SpecialActivityInfoNum
			for (size_t i = 0; i < n; i++)
			{ //SpecialActivityInfo
				BYTE* pSpecialActivityInfo = pRoomInfo;
				Write16(pSpecialActivityInfo, 0); //len

				Write8(pSpecialActivityInfo, 0); //ProfessionLicenseInfoNum
				for (size_t i = 0; i < n; i++)
				{ //ProfessionLicenseInfo
					BYTE* pProfessionLicenseInfo = pSpecialActivityInfo;
					Write16(pProfessionLicenseInfo, 0); //len

					Write8(pProfessionLicenseInfo, 0); //BigLevel
					Write8(pProfessionLicenseInfo, 0); //SmallLevel

					len = pProfessionLicenseInfo - pSpecialActivityInfo;
					Set16(pSpecialActivityInfo, (WORD)len);
					pSpecialActivityInfo += len;
				}

				len = pSpecialActivityInfo - pRoomInfo;
				Set16(pRoomInfo, (WORD)len);
				pRoomInfo += len;
			}
			Write8(pRoomInfo, 0); //ValueNum
			Write32(pRoomInfo, 0); //EnterRoomValue[]
			Write8(pRoomInfo, 0); //ParaNum
			Write32(pRoomInfo, 0); //ParaList[]
			Write32(pRoomInfo, 0); //GSvrRoomNo
			WriteString(pRoomInfo, 0); //OwnerName[]

			len = pRoomInfo - pPositionInfo;
			Set16(pPositionInfo, (WORD)len);
			pPositionInfo += len;
		}
		Write8(pPositionInfo, 0); //StatusLen
		Write8(pPositionInfo, 0); //CanJoin

		len = pPositionInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen
	{ //PlayerRelationInfo
		BYTE* pPlayerRelationInfo = p;
		Write16(pPlayerRelationInfo, 0); //len

		Write32(pPlayerRelationInfo, 0); //SrcUin
		Write32(pPlayerRelationInfo, 0); //RelationFlag
		Write32(pPlayerRelationInfo, 0); //RelationUin
		WriteString(pPlayerRelationInfo, 0); //RelationNickName[]
		Write32(pPlayerRelationInfo, 0); //EngageTime
		Write32(pPlayerRelationInfo, 0); //NextCanBookingTimeLimit
		Write32(pPlayerRelationInfo, 0); //BeginHoneyMoonTime
		Write32(pPlayerRelationInfo, 0); //EndHoneyMoonTime
		Write8(pPlayerRelationInfo, 0); //EngageFlag

		len = pPlayerRelationInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //CurKartAttr
		BYTE* pCurKartAttr = p;
		Write16(pCurKartAttr, 0); //len

		Write32(pCurKartAttr, 0); //Uin
		Write32(pCurKartAttr, 0); //KartId
		Write32(pCurKartAttr, 0); //RefitCout
		Write16(pCurKartAttr, 0); //MaxFlags
		Write16(pCurKartAttr, 0); //WWeight
		Write16(pCurKartAttr, 0); //SpeedWeight
		Write16(pCurKartAttr, 0); //JetWeight
		Write16(pCurKartAttr, 0); //SJetWeight
		Write16(pCurKartAttr, 0); //AccuWeight
		Write32(pCurKartAttr, 0); //ShapeRefitCount
		Write32(pCurKartAttr, 0); //KartHeadRefitItemID
		Write32(pCurKartAttr, 0); //KartTailRefitItemID
		Write32(pCurKartAttr, 0); //KartFlankRefitItemID
		Write32(pCurKartAttr, 0); //KartTireRefitItemID
		{ //KartRefitExInfo
			BYTE* pKartRefitExInfo = pCurKartAttr;
			Write16(pKartRefitExInfo, 0); //len

			Write8(pKartRefitExInfo, 0); //SpeedRefitStar
			Write8(pKartRefitExInfo, 0); //JetRefitStar
			Write8(pKartRefitExInfo, 0); //SJetRefitStar
			Write8(pKartRefitExInfo, 0); //AccuRefitStar
			Write8(pKartRefitExInfo, 0); //SpeedAddRatio
			Write8(pKartRefitExInfo, 0); //JetAddRatio
			Write8(pKartRefitExInfo, 0); //SJetAddRatio
			Write8(pKartRefitExInfo, 0); //AccuAddRatio

			len = pKartRefitExInfo - pCurKartAttr;
			Set16(pCurKartAttr, (WORD)len);
			pCurKartAttr += len;
		}
		Write32(pCurKartAttr, 0); //SecondRefitCount
		Write16(pCurKartAttr, 0); //Speed2Weight
		Write16(pCurKartAttr, 0); //DriftVecWeight
		Write16(pCurKartAttr, 0); //AdditionalZSpeedWeight
		Write16(pCurKartAttr, 0); //AntiCollisionWeight
		Write16(pCurKartAttr, 0); //LuckyValue
		Write16(pCurKartAttr, 0); //RefitLuckyValueMaxWeight
		Write32(pCurKartAttr, 0); //ShapeSuitID
		Write8(pCurKartAttr, 0); //LegendSuitLevel
		Write32(pCurKartAttr, 0); //LegendSuitLevelChoice
		Write32(pCurKartAttr, 0); //ShapeLegendSuitID

		len = pCurKartAttr - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //PetNum
	for (size_t i = 0; i < n; i++)
	{ //PetInfo
		BYTE* pPetInfo = p;
		Write16(pPetInfo, 0); //len

		Write32(pPetInfo, 0); //Uin
		Write32(pPetInfo, 0); //PetId
		WriteString(pPetInfo, 0); //PetName[]
		Write8(pPetInfo, 0); //IsProper
		Write16(pPetInfo, 0); //Level
		Write8(pPetInfo, 0); //Status
		Write16(pPetInfo, 0); //PetSkillNum
		for (size_t i = 0; i < n; i++)
		{ //PetSkillList
			BYTE* pPetSkillList = pPetInfo;
			Write16(pPetSkillList, 0); //len

			Write16(pPetSkillList, 0); //SkillID
			Write8(pPetSkillList, 0); //Status
			Write8(pPetSkillList, 0); //Active
			Write32(pPetSkillList, 0); //Value

			len = pPetSkillList - pPetInfo;
			Set16(pPetInfo, (WORD)len);
			pPetInfo += len;
		}
		Write32(pPetInfo, 0); //StrengLevel
		Write8(pPetInfo, 0); //TopStatus
		{ //CommonInfo
			BYTE* pCommonInfo = pPetInfo;
			Write16(pCommonInfo, 0); //len

			Write32(pCommonInfo, 0); //HuanHuaLevel
			Write8(pCommonInfo, 0); //CanHuanHua

			len = pCommonInfo - pPetInfo;
			Set16(pPetInfo, (WORD)len);
			pPetInfo += len;
		}
		Write16(pPetInfo, 0); //PKStar
		Write32(pPetInfo, 0); //PetSkinID

		len = pPetInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //IsInTopList
	{ //KartStoneGrooveInfo
		BYTE* pKartStoneGrooveInfo = p;
		Write16(pKartStoneGrooveInfo, 0); //len

		Write32(pKartStoneGrooveInfo, 0); //KartID
		Write32(pKartStoneGrooveInfo, 0); //StoneGrooveNum
		for (size_t i = 0; i < n; i++)
		{ //StoneGrooveInfo
			BYTE* pStoneGrooveInfo = pKartStoneGrooveInfo;
			Write16(pStoneGrooveInfo, 0); //len

			Write32(pStoneGrooveInfo, 0); //StoneUseOccaType
			Write32(pStoneGrooveInfo, 0); //SkillStoneID

			len = pStoneGrooveInfo - pKartStoneGrooveInfo;
			Set16(pKartStoneGrooveInfo, (WORD)len);
			pKartStoneGrooveInfo += len;
		}

		len = pKartStoneGrooveInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //Contex
	{ //PlayerWlVisibleInfo
		BYTE* pPlayerWlVisibleInfo = p;
		Write16(pPlayerWlVisibleInfo, 0); //len

		Write32(pPlayerWlVisibleInfo, 0); //WonderLandID
		WriteString(pPlayerWlVisibleInfo, 0); //WonderLandName[]
		Write16(pPlayerWlVisibleInfo, 0); //WonderLandDuty
		Write8(pPlayerWlVisibleInfo, 0); //SubType
		Write8(pPlayerWlVisibleInfo, 0); //GuildGrade

		len = pPlayerWlVisibleInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //SkateCoin
	Write32(p, 0); //MaxDayPveScore
	Write32(p, 0); //MaxHistoryPveScore
	{ //EquipedCarBattleModeSkillInfoList
		BYTE* pEquipedCarBattleModeSkillInfoList = p;
		Write16(pEquipedCarBattleModeSkillInfoList, 0); //len

		Write8(pEquipedCarBattleModeSkillInfoList, 0); //SkillNum
		for (size_t i = 0; i < n; i++)
		{ //SkillInfo
			BYTE* pSkillInfo = pEquipedCarBattleModeSkillInfoList;
			Write16(pSkillInfo, 0); //len

			Write16(pSkillInfo, 0); //SkillId
			Write8(pSkillInfo, 0); //SkillLevel

			len = pSkillInfo - pEquipedCarBattleModeSkillInfoList;
			Set16(pEquipedCarBattleModeSkillInfoList, (WORD)len);
			pEquipedCarBattleModeSkillInfoList += len;
		}

		len = pEquipedCarBattleModeSkillInfoList - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasCCVisibleInfo
	for (size_t i = 0; i < n; i++)
	{ //ChumCircleInfo
		BYTE* pChumCircleInfo = p;
		Write16(pChumCircleInfo, 0); //len

		Write32(pChumCircleInfo, 0); //ChumCircleID

		len = pChumCircleInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasCheerAddition
	for (size_t i = 0; i < n; i++)
	{ //CheerAdditon
		BYTE* pCheerAdditon = p;
		Write16(pCheerAdditon, 0); //len

		Write16(pCheerAdditon, 0); //ExpAddition
		Write16(pCheerAdditon, 0); //WageAddition

		len = pCheerAdditon - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //LoveValue
	Write16(p, 0); //CanEnterChannelFalg[]
	Write8(p, 0); //SpecialActivityID
	Write32(p, 0); //ThemeHouseDressDegreeValue
	Write8(p, 0); //AreaIdDst
	Write8(p, 0); //SpecialActivityIDNum
	Write8(p, 0); //SimpleInfo

	len = p - buf;
	SendToClient(Client, 122, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetProp(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	short PropPositionNO = Read16(p);
	bool CurrentRank = Read8(p);
	int[] CurrentPosition[] = Read32(p);
	int PreviousInterval = Read32(p);
	char GetPropType = Read8(p);
	bool TeammateRank = Read8(p);
	char PointArrayIdx = Read8(p);
	UINT LapTime = Read32(p);
	char GetPropSecType = Read8(p);
	UCHAR PropPosIdx = Read8(p);
	UINT NPCUin = Read32(p);
	UCHAR ParaNum = Read8(p);
	UINT ParaList[] = Read32(p);

}

void ResponseGetProp(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	WriteUn(p, 0); //Uin
	Write16(p, 0); //PropID
	Write32(p, 0); //PropIndex
	Write8(p, 0); //GetPropType
	Write32(p, 0); //AwardItemID
	Write8(p, 0); //ReasonLen
	Write16(p, 0); //PropPositionNO
	Write32(p, 0); //ActIDForClient
	Write8(p, 0); //GetPropSecType
	Write8(p, 0); //PropPosIdx
	Write32(p, 0); //NPCUin
	Write8(p, 0); //ParaNum
	Write32(p, 0); //ParaList[]

	len = p - buf;
	SendToClient(Client, 124, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyDraftAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //AwardID

	len = p - buf;
	SendToClient(Client, 582, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyGetProp(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //Uin
	Write16(p, 0); //PropID
	Write32(p, 0); //PropIndex
	Write16(p, 0); //PropPositionNO
	Write8(p, 0); //GetPropType
	Write8(p, 0); //PointArrayIdx
	Write32(p, 0); //LapTime
	Write8(p, 0); //GetPropSecType
	WriteUn(p, 0); //SrcUin
	Write8(p, 0); //ParaNum
	Write32(p, 0); //ParaList[]

	len = p - buf;
	SendToClient(Client, 516, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestUseProp(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	short PropID = Read16(p);
	Un DstUin = ReadUn(p);
	int[] CurrentPosition[] = Read32(p);
	int PropIndex = Read32(p);
	short NewID = Read16(p);
	char IsClearProp = Read8(p);
	bool DstType = Read8(p);
	UCHAR CurrentSelfRank = Read8(p);
	UCHAR CurrentTeammateRank = Read8(p);
	UCHAR Position = Read8(p);

}

void ResponseUseProp(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	WriteUn(p, 0); //Uin
	Write16(p, 0); //PropID
	WriteUn(p, 0); //DstUin
	Write32(p, 0); //PropPosition[]
	Write32(p, 0); //PropIndex
	Write8(p, 0); //DstType
	Write8(p, 0); //Position
	Write8(p, 0); //ParaNum
	Write32(p, 0); //ParaList[]
	Write8(p, 0); //PropSecType
	Write8(p, 0); //PropPosIdx
	Write8(p, 0); //Status
	Write32(p, 0); //NPCUin
	Write8(p, 0); //UsePropProtoMode
	Write8(p, 0); //SubPropNum
	for (size_t i = 0; i < n; i++)
	{ //SubProp
		BYTE* pSubProp = p;
		Write16(pSubProp, 0); //len

		Write16(pSubProp, 0); //SubPropID
		Write32(pSubProp, 0); //Duration
		Write32(pSubProp, 0); //UseInterval

		len = pSubProp - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //SubPropID
	Write8(p, 0); //OtherPropPosNum
	for (size_t i = 0; i < n; i++)
	{ //OtherPropPos
		BYTE* pOtherPropPos = p;
		Write16(pOtherPropPos, 0); //len

		Write32(pOtherPropPos, 0); //Idx
		Write32(pOtherPropPos, 0); //Postion[]

		len = pOtherPropPos - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 125, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyUseProp(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //Uin
	Write16(p, 0); //PropID
	WriteUn(p, 0); //DstUin
	Write32(p, 0); //PropPosition[]
	Write32(p, 0); //PropIndex
	Write16(p, 0); //NewID
	Write32(p, 0); //ItemID
	Write32(p, 0); //StoneSkillType
	Write32(p, 0); //LapTime
	Write8(p, 0); //DstUinNum
	Write32(p, 0); //DstUin[]
	Write8(p, 0); //PropUseMode
	Write8(p, 0); //QueryUinNum
	Write32(p, 0); //QueryUin[]
	Write8(p, 0); //DstType
	Write8(p, 0); //Position
	Write8(p, 0); //ParaNum
	Write32(p, 0); //ParaList[]
	Write8(p, 0); //Status
	Write8(p, 0); //PropPosIdx
	Write8(p, 0); //PropSecType
	Write8(p, 0); //PassedCheckPointNum
	Write16(p, 0); //PassedCheckPointIDs[]
	Write16(p, 0); //SubPropID
	Write8(p, 0); //OtherPropPosNum
	for (size_t i = 0; i < n; i++)
	{ //OtherPropPos
		BYTE* pOtherPropPos = p;
		Write16(pOtherPropPos, 0); //len

		Write32(pOtherPropPos, 0); //Idx
		Write32(pOtherPropPos, 0); //Postion[]

		len = pOtherPropPos - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 517, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestPropEffectResult(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	short PropID = Read16(p);
	int PropIndex = Read32(p);
	short EffectResult = Read16(p);
	int ItemID = Read32(p);
	Un SrcUin = ReadUn(p);
	int StoneSkillType = Read32(p);
	UINT LapTime = Read32(p);
	UCHAR RemoveOwnPropNum = Read8(p);
	int[] RemoveOwnPropIdx[] = Read32(p);
	bool DstType = Read8(p);
	UCHAR SrcUinRank = Read8(p);
	UCHAR SrcUinTeammateRank = Read8(p);
	UINT NPCUin = Read32(p);

}

void NotifyPropEffectResult(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //Uin
	Write16(p, 0); //PropID
	Write32(p, 0); //PropIndex
	Write32(p, 0); //StoneSkillType
	Write32(p, 0); //LapTime
	Write8(p, 0); //RemoveOwnPropNum
	Write32(p, 0); //RemoveOwnPropIdx[]
	Write32(p, 0); //SrcUin
	Write16(p, 0); //EffectResult

	len = p - buf;
	SendToClient(Client, 518, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestChangeAimState(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	Un DstUin = ReadUn(p);
	bool AimState = Read8(p);
	bool DstType = Read8(p);

}

void NotifyChangeAimState(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //Uin
	WriteUn(p, 0); //DstUin
	Write8(p, 0); //AimState
	Write8(p, 0); //DstType

	len = p - buf;
	SendToClient(Client, 519, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestReportDrift(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	int DriftFlag = Read32(p);
	int AccelerateFuelInc = Read32(p);
	bool OnlyAccelSelfFue = Read8(p);
	UINT StartLapTime = Read32(p);
	UINT CurLapTime = Read32(p);

}

void ResponseReportDrift(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //PropID
	Write32(p, 0); //PropIndex
	Write32(p, 0); //CurrentAccelerateFuel
	Write8(p, 0); //ReasonLen
	Write32(p, 0); //SuperJetKartFuelInc

	len = p - buf;
	SendToClient(Client, 119, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyReportDrift(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //TeamAccelerateFule
	Write32(p, 0); //DriftPlayerUin
	Write16(p, 0); //PropID
	Write32(p, 0); //PropIndex

	len = p - buf;
	SendToClient(Client, 521, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestChangeMap(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	int NewMapID = Read32(p);
	{ //STDynamicInfo
		BYTE* pSTDynamicInfo = p;
		len = Read16(pSTDynamicInfo);

		char Season = Read8(pSTDynamicInfo);
		char Timeslot = Read8(pSTDynamicInfo);
		char Weather = Read8(pSTDynamicInfo);

		p += len;
	}
	int MapSubID = Read32(p);

}

void ResponseChangeMap(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //NewMapID
	Write8(p, 0); //ReasonLen
	Write8(p, 0); //UnLockMapCondDescNum
	for (size_t i = 0; i < n; i++)
	{ //UnLockMapCondDesc
		BYTE* pUnLockMapCondDesc = p;
		Write16(pUnLockMapCondDesc, 0); //len

		Write8(pUnLockMapCondDesc, 0); //DescLen

		len = pUnLockMapCondDesc - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //STDynamicInfo
		BYTE* pSTDynamicInfo = p;
		Write16(pSTDynamicInfo, 0); //len

		Write8(pSTDynamicInfo, 0); //Season
		Write8(pSTDynamicInfo, 0); //Timeslot
		Write8(pSTDynamicInfo, 0); //Weather

		len = pSTDynamicInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //PreKnowMapID
	Write32(p, 0); //MapSubID
	Write8(p, 0); //FirstlyTipMap

	len = p - buf;
	SendToClient(Client, 121, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyChangeMap(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //Uin
	Write32(p, 0); //NewMapID
	{ //STDynamicInfo
		BYTE* pSTDynamicInfo = p;
		Write16(pSTDynamicInfo, 0); //len

		Write8(pSTDynamicInfo, 0); //Season
		Write8(pSTDynamicInfo, 0); //Timeslot
		Write8(pSTDynamicInfo, 0); //Weather

		len = pSTDynamicInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //PreKnowMapID
	Write32(p, 0); //MapSubID
	Write8(p, 0); //FirstlyTipMap

	len = p - buf;
	SendToClient(Client, 520, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyPlayerFinishRace(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //Uin
	Write8(p, 0); //NewRecord
	WriteUn(p, 0); //FinTime

	len = p - buf;
	SendToClient(Client, 522, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyReplaceProp(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //PlayerNum
	for (size_t i = 0; i < n; i++)
	{ //RacerReplacePropInfo
		BYTE* pRacerReplacePropInfo = p;
		Write16(pRacerReplacePropInfo, 0); //len

		WriteUn(pRacerReplacePropInfo, 0); //Uin
		for (size_t i = 0; i < n; i++)
		{ //ReplaceProp
			BYTE* pReplaceProp = pRacerReplacePropInfo;
			Write16(pReplaceProp, 0); //len

			Write32(pReplaceProp, 0); //ReplaceFlag
			Write32(pReplaceProp, 0); //PropIndex
			Write16(pReplaceProp, 0); //PropID

			len = pReplaceProp - pRacerReplacePropInfo;
			Set16(pRacerReplacePropInfo, (WORD)len);
			pRacerReplacePropInfo += len;
		}

		len = pRacerReplacePropInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //ItemID

	len = p - buf;
	SendToClient(Client, 525, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyAddProp(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //Uin
	Write16(p, 0); //PropID
	Write32(p, 0); //PropIdx
	Write32(p, 0); //ItemID
	Write32(p, 0); //StoneSkillType

	len = p - buf;
	SendToClient(Client, 526, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyClientUpdateMoney(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	{ //CurrentMoney
		BYTE* pCurrentMoney = p;
		Write16(pCurrentMoney, 0); //len

		Write32(pCurrentMoney, 0); //Money
		Write32(pCurrentMoney, 0); //SuperMoney
		Write32(pCurrentMoney, 0); //Coupons
		Write32(pCurrentMoney, 0); //LuckMoney
		Write32(pCurrentMoney, 0); //ConsumeScore
		Write32(pCurrentMoney, 0); //HistoryConsumeScore
		Write32(pCurrentMoney, 0); //SpeedCoin

		len = pCurrentMoney - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //IncMoney
		BYTE* pIncMoney = p;
		Write16(pIncMoney, 0); //len

		Write32(pIncMoney, 0); //Money
		Write32(pIncMoney, 0); //SuperMoney
		Write32(pIncMoney, 0); //Coupons
		Write32(pIncMoney, 0); //LuckMoney
		Write32(pIncMoney, 0); //ConsumeScore
		Write32(pIncMoney, 0); //HistoryConsumeScore
		Write32(pIncMoney, 0); //SpeedCoin

		len = pIncMoney - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //Flag

	len = p - buf;
	SendToClient(Client, 528, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyClientAddItem(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //Uin
	WriteUn(p, 0); //SrcUin
	Write16(p, 0); //ItemNum
	for (size_t i = 0; i < n; i++)
	{ //ItemInfo
		BYTE* pItemInfo = p;
		Write16(pItemInfo, 0); //len

		Write32(pItemInfo, 0); //ItemID
		Write32(pItemInfo, 0); //ItemNum
		Write32(pItemInfo, 0); //AvailPeriod
		Write8(pItemInfo, 0); //Status
		WriteUn(pItemInfo, 0); //ObtainTime
		Write32(pItemInfo, 0); //OtherAttribute
		Write16(pItemInfo, 0); //ItemType

		len = pItemInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //AttachLen
	Write16(p, 0); //AddKartNum
	for (size_t i = 0; i < n; i++)
	{ //AddKartRefitInfo
		BYTE* pAddKartRefitInfo = p;
		Write16(pAddKartRefitInfo, 0); //len

		Write32(pAddKartRefitInfo, 0); //Uin
		Write32(pAddKartRefitInfo, 0); //KartId
		Write32(pAddKartRefitInfo, 0); //RefitCout
		Write16(pAddKartRefitInfo, 0); //MaxFlags
		Write16(pAddKartRefitInfo, 0); //WWeight
		Write16(pAddKartRefitInfo, 0); //SpeedWeight
		Write16(pAddKartRefitInfo, 0); //JetWeight
		Write16(pAddKartRefitInfo, 0); //SJetWeight
		Write16(pAddKartRefitInfo, 0); //AccuWeight
		Write32(pAddKartRefitInfo, 0); //ShapeRefitCount
		Write32(pAddKartRefitInfo, 0); //KartHeadRefitItemID
		Write32(pAddKartRefitInfo, 0); //KartTailRefitItemID
		Write32(pAddKartRefitInfo, 0); //KartFlankRefitItemID
		Write32(pAddKartRefitInfo, 0); //KartTireRefitItemID
		Write32(pAddKartRefitInfo, 0); //SecondRefitCount
		Write16(pAddKartRefitInfo, 0); //Speed2Weight
		Write16(pAddKartRefitInfo, 0); //DriftVecWeight
		Write16(pAddKartRefitInfo, 0); //AdditionalZSpeedWeight
		Write16(pAddKartRefitInfo, 0); //AntiCollisionWeight
		Write16(pAddKartRefitInfo, 0); //LuckyValue
		Write16(pAddKartRefitInfo, 0); //RefitLuckyValueMaxWeight
		Write32(pAddKartRefitInfo, 0); //ShapeSuitID
		Write8(pAddKartRefitInfo, 0); //LegendSuitLevel
		Write32(pAddKartRefitInfo, 0); //LegendSuitLevelChoice
		Write32(pAddKartRefitInfo, 0); //ShapeLegendSuitID

		len = pAddKartRefitInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //IncRedPacketNum

	len = p - buf;
	SendToClient(Client, 529, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyClientUpdateMoneyExp(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	{ //CurMoneyExp
		BYTE* pCurMoneyExp = p;
		Write16(pCurMoneyExp, 0); //len

		Write32(pCurMoneyExp, 0); //Money
		Write32(pCurMoneyExp, 0); //SuperMoney
		Write32(pCurMoneyExp, 0); //Exp
		Write32(pCurMoneyExp, 0); //Charm
		Write32(pCurMoneyExp, 0); //DanceExp
		Write32(pCurMoneyExp, 0); //Coupons
		Write32(pCurMoneyExp, 0); //Admiration
		Write32(pCurMoneyExp, 0); //LuckMoney
		Write32(pCurMoneyExp, 0); //TeamWorkExp
		Write32(pCurMoneyExp, 0); //AchievePoint
		Write32(pCurMoneyExp, 0); //ConsumeScore
		Write32(pCurMoneyExp, 0); //HistoryConsumeScore
		Write32(pCurMoneyExp, 0); //LadderMatchAchievePoint
		Write32(pCurMoneyExp, 0); //SpeedBean
		Write32(pCurMoneyExp, 0); //SpeedCoin

		len = pCurMoneyExp - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //Reason

	len = p - buf;
	SendToClient(Client, 559, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestChangeItemStatus(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	short ItemNum = Read16(p);
	for (size_t i = 0; i < n; i++)
	{ //ItemStatus
		BYTE* pItemStatus = p;
		len = Read16(pItemStatus);

		int ItemID = Read32(pItemStatus);
		bool NewStatus = Read8(pItemStatus);

		p += len;
	}
	UCHAR SpecFlag = Read8(p);
	UCHAR ChangeType = Read8(p);
	USHORT ItemNum = Read16(p);
	[] EquipedItem[] = Read(p);
	int NewKartID = Read32(p);

}

void ResponseChangeItemStatus(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //ItemNum
	for (size_t i = 0; i < n; i++)
	{ //ItemStatus
		BYTE* pItemStatus = p;
		Write16(pItemStatus, 0); //len

		Write32(pItemStatus, 0); //ItemID
		Write8(pItemStatus, 0); //NewStatus

		len = pItemStatus - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen
	Write8(p, 0); //SpecFlag
	Write8(p, 0); //ChangeType

	len = p - buf;
	SendToClient(Client, 130, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyChangeItemStatus(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //Uin
	Write16(p, 0); //ItemNum
	for (size_t i = 0; i < n; i++)
	{ //ItemStatus
		BYTE* pItemStatus = p;
		Write16(pItemStatus, 0); //len

		Write32(pItemStatus, 0); //ItemID
		Write32(pItemStatus, 0); //ItemNum
		Write32(pItemStatus, 0); //AvailPeriod
		Write8(pItemStatus, 0); //Status
		WriteUn(pItemStatus, 0); //ObtainTime
		Write32(pItemStatus, 0); //OtherAttribute
		Write16(pItemStatus, 0); //ItemType

		len = pItemStatus - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //SpecFlag
	Write16(p, 0); //KartNum
	for (size_t i = 0; i < n; i++)
	{ //KartRefitInfo
		BYTE* pKartRefitInfo = p;
		Write16(pKartRefitInfo, 0); //len

		Write32(pKartRefitInfo, 0); //Uin
		Write32(pKartRefitInfo, 0); //KartId
		Write32(pKartRefitInfo, 0); //RefitCout
		Write16(pKartRefitInfo, 0); //MaxFlags
		Write16(pKartRefitInfo, 0); //WWeight
		Write16(pKartRefitInfo, 0); //SpeedWeight
		Write16(pKartRefitInfo, 0); //JetWeight
		Write16(pKartRefitInfo, 0); //SJetWeight
		Write16(pKartRefitInfo, 0); //AccuWeight
		Write32(pKartRefitInfo, 0); //ShapeRefitCount
		Write32(pKartRefitInfo, 0); //KartHeadRefitItemID
		Write32(pKartRefitInfo, 0); //KartTailRefitItemID
		Write32(pKartRefitInfo, 0); //KartFlankRefitItemID
		Write32(pKartRefitInfo, 0); //KartTireRefitItemID
		Write32(pKartRefitInfo, 0); //SecondRefitCount
		Write16(pKartRefitInfo, 0); //Speed2Weight
		Write16(pKartRefitInfo, 0); //DriftVecWeight
		Write16(pKartRefitInfo, 0); //AdditionalZSpeedWeight
		Write16(pKartRefitInfo, 0); //AntiCollisionWeight
		Write16(pKartRefitInfo, 0); //LuckyValue
		Write16(pKartRefitInfo, 0); //RefitLuckyValueMaxWeight
		Write32(pKartRefitInfo, 0); //ShapeSuitID
		Write8(pKartRefitInfo, 0); //LegendSuitLevel
		Write32(pKartRefitInfo, 0); //LegendSuitLevelChoice
		Write32(pKartRefitInfo, 0); //ShapeLegendSuitID

		len = pKartRefitInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ChangeType
	Write8(p, 0); //EquipNiChangItemNum
	for (size_t i = 0; i < n; i++)
	{ //NiChangPavilionEquipItemInfo
		BYTE* pNiChangPavilionEquipItemInfo = p;
		Write16(pNiChangPavilionEquipItemInfo, 0); //len

		Write32(pNiChangPavilionEquipItemInfo, 0); //ItemId
		Write16(pNiChangPavilionEquipItemInfo, 0); //CurrentEquipColorationPlanId

		len = pNiChangPavilionEquipItemInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 527, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyChangeCarBattleModeSkillInfoList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //CarID
	{ //BattleModeSkillInfoList
		BYTE* pBattleModeSkillInfoList = p;
		Write16(pBattleModeSkillInfoList, 0); //len

		Write8(pBattleModeSkillInfoList, 0); //SkillNum
		for (size_t i = 0; i < n; i++)
		{ //SkillInfo
			BYTE* pSkillInfo = pBattleModeSkillInfoList;
			Write16(pSkillInfo, 0); //len

			Write16(pSkillInfo, 0); //SkillId
			Write8(pSkillInfo, 0); //SkillLevel

			len = pSkillInfo - pBattleModeSkillInfoList;
			Set16(pBattleModeSkillInfoList, (WORD)len);
			pBattleModeSkillInfoList += len;
		}

		len = pBattleModeSkillInfoList - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11675, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestCheckName(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	char[] NickName[] = ReadString(p);

}

void ResponseCheckName(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	WriteString(p, 0); //NickName[]
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 133, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifySingleGameBegin(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //NormalLoadTime
	Write32(p, 0); //TaskID
	Write32(p, 0); //MapID
	WriteString(p, 0); //MapHash[]
	Write32(p, 0); //GameID
	Write32(p, 0); //Seed
	Write16(p, 0); //TotalMapRound
	Write32(p, 0); //TimeLimit
	Write32(p, 0); //MaxNPCDistance
	Write16(p, 0); //InitPropNum
	for (size_t i = 0; i < n; i++)
	{ //PropInfo
		BYTE* pPropInfo = p;
		Write16(pPropInfo, 0); //len

		Write32(pPropInfo, 0); //PropIndex
		Write16(pPropInfo, 0); //PropID

		len = pPropInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //NpcNum
	for (size_t i = 0; i < n; i++)
	{ //NpcInfo
		BYTE* pNpcInfo = p;
		Write16(pNpcInfo, 0); //len

		Write32(pNpcInfo, 0); //NpcID 00 00 00 01
		WriteString(pNpcInfo, 0); //NPCName[17] 
		WriteString(pNpcInfo, 0); //GuildName[17]
		{ //NpcItemInfo
			BYTE* pNpcItemInfo = pNpcInfo;
			Write16(pNpcItemInfo, 0); //len

			Write32(pNpcItemInfo, 0); //RoleID 00 00 27 26
			Write32(pNpcItemInfo, 0); //HairID 00 00 2c 77
			Write32(pNpcItemInfo, 0); //FaceID
			Write32(pNpcItemInfo, 0); //GlassID
			Write32(pNpcItemInfo, 0); //CoatID
			Write32(pNpcItemInfo, 0); //GloveID
			Write32(pNpcItemInfo, 0); //TrousersID
			Write32(pNpcItemInfo, 0); //PersonarID
			Write32(pNpcItemInfo, 0); //TattooID
			Write32(pNpcItemInfo, 0); //WingID
			Write32(pNpcItemInfo, 0); //DecoratorID
			Write32(pNpcItemInfo, 0); //KartID
			Write32(pNpcItemInfo, 0); //ColorID
			Write32(pNpcItemInfo, 0); //TrackID
			Write32(pNpcItemInfo, 0); //EffectID
			Write32(pNpcItemInfo, 0); //BrandID
			Write32(pNpcItemInfo, 0); //TailID

			len = pNpcItemInfo - pNpcInfo;
			Set16(pNpcInfo, (WORD)len);
			pNpcInfo += len;
		}
		Write32(pNpcInfo, 0); //GpSkillPeriod 00 00 00 04
		Write32(pNpcInfo, 0); //BaseValue 00 00 27 10
		{ //DefaultSpeedPara
			BYTE* pDefaultSpeedPara = pNpcInfo;
			Write16(pDefaultSpeedPara, 0); //len

			Write32(pDefaultSpeedPara, 0); //MaxSpeed
			Write32(pDefaultSpeedPara, 0); //MinSpeed
			Write32(pDefaultSpeedPara, 0); //MaxPlusForce
			Write32(pDefaultSpeedPara, 0); //MinPlusForce
			Write32(pDefaultSpeedPara, 0); //MaxTurnSpeed
			Write32(pDefaultSpeedPara, 0); //MinTurnSpeed
			Write32(pDefaultSpeedPara, 0); //MaxDist
			Write32(pDefaultSpeedPara, 0); //MinDist

			len = pDefaultSpeedPara - pNpcInfo;
			Set16(pNpcInfo, (WORD)len);
			pNpcInfo += len;
		}
		Write8(pNpcInfo, 0); //NormalSpeedNum 04
		for (size_t i = 0; i < n; i++)
		{ //NormalSpeedPara
			BYTE* pNormalSpeedPara = pNpcInfo;
			Write16(pNormalSpeedPara, 0); //len

			Write32(pNormalSpeedPara, 0); //MaxSpeed
			Write32(pNormalSpeedPara, 0); //MinSpeed
			Write32(pNormalSpeedPara, 0); //MaxPlusForce
			Write32(pNormalSpeedPara, 0); //MinPlusForce
			Write32(pNormalSpeedPara, 0); //MaxTurnSpeed
			Write32(pNormalSpeedPara, 0); //MinTurnSpeed
			Write32(pNormalSpeedPara, 0); //MaxDist
			Write32(pNormalSpeedPara, 0); //MinDist

			len = pNormalSpeedPara - pNpcInfo;
			Set16(pNpcInfo, (WORD)len);
			pNpcInfo += len;
		}
		Write8(pNpcInfo, 0); //GpNum 04
		for (size_t i = 0; i < n; i++)
		{ //GpPara
			BYTE* pGpPara = pNpcInfo;
			Write16(pGpPara, 0); //len

			Write32(pGpPara, 0); //GpID
			Write32(pGpPara, 0); //Probability
			Write32(pGpPara, 0); //MaxDist
			Write32(pGpPara, 0); //MinDist

			len = pGpPara - pNpcInfo;
			Set16(pNpcInfo, (WORD)len);
			pNpcInfo += len;
		}
		Write16(pNpcInfo, 0); //NPCAILevel 00 00
		Write16(pNpcInfo, 0); //TeamID 00 00

		len = pNpcInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //PlayerItemNum
	for (size_t i = 0; i < n; i++)
	{ //PlayerInfo
		BYTE* pPlayerInfo = p;
		Write16(pPlayerInfo, 0); //len

		Write32(pPlayerInfo, 0); //NpcID
		WriteString(pPlayerInfo, 0); //NPCName[]
		WriteString(pPlayerInfo, 0); //GuildName[]
		{ //NpcItemInfo
			BYTE* pNpcItemInfo = pPlayerInfo;
			Write16(pNpcItemInfo, 0); //len

			Write32(pNpcItemInfo, 0); //RoleID
			Write32(pNpcItemInfo, 0); //HairID
			Write32(pNpcItemInfo, 0); //FaceID
			Write32(pNpcItemInfo, 0); //GlassID
			Write32(pNpcItemInfo, 0); //CoatID
			Write32(pNpcItemInfo, 0); //GloveID
			Write32(pNpcItemInfo, 0); //TrousersID
			Write32(pNpcItemInfo, 0); //PersonarID
			Write32(pNpcItemInfo, 0); //TattooID
			Write32(pNpcItemInfo, 0); //WingID
			Write32(pNpcItemInfo, 0); //DecoratorID
			Write32(pNpcItemInfo, 0); //KartID
			Write32(pNpcItemInfo, 0); //ColorID
			Write32(pNpcItemInfo, 0); //TrackID
			Write32(pNpcItemInfo, 0); //EffectID
			Write32(pNpcItemInfo, 0); //BrandID
			Write32(pNpcItemInfo, 0); //TailID

			len = pNpcItemInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		Write32(pPlayerInfo, 0); //GpSkillPeriod
		Write32(pPlayerInfo, 0); //BaseValue
		{ //DefaultSpeedPara
			BYTE* pDefaultSpeedPara = pPlayerInfo;
			Write16(pDefaultSpeedPara, 0); //len

			Write32(pDefaultSpeedPara, 0); //MaxSpeed
			Write32(pDefaultSpeedPara, 0); //MinSpeed
			Write32(pDefaultSpeedPara, 0); //MaxPlusForce
			Write32(pDefaultSpeedPara, 0); //MinPlusForce
			Write32(pDefaultSpeedPara, 0); //MaxTurnSpeed
			Write32(pDefaultSpeedPara, 0); //MinTurnSpeed
			Write32(pDefaultSpeedPara, 0); //MaxDist
			Write32(pDefaultSpeedPara, 0); //MinDist

			len = pDefaultSpeedPara - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		Write8(pPlayerInfo, 0); //NormalSpeedNum
		for (size_t i = 0; i < n; i++)
		{ //NormalSpeedPara
			BYTE* pNormalSpeedPara = pPlayerInfo;
			Write16(pNormalSpeedPara, 0); //len

			Write32(pNormalSpeedPara, 0); //MaxSpeed
			Write32(pNormalSpeedPara, 0); //MinSpeed
			Write32(pNormalSpeedPara, 0); //MaxPlusForce
			Write32(pNormalSpeedPara, 0); //MinPlusForce
			Write32(pNormalSpeedPara, 0); //MaxTurnSpeed
			Write32(pNormalSpeedPara, 0); //MinTurnSpeed
			Write32(pNormalSpeedPara, 0); //MaxDist
			Write32(pNormalSpeedPara, 0); //MinDist

			len = pNormalSpeedPara - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		Write8(pPlayerInfo, 0); //GpNum
		for (size_t i = 0; i < n; i++)
		{ //GpPara
			BYTE* pGpPara = pPlayerInfo;
			Write16(pGpPara, 0); //len

			Write32(pGpPara, 0); //GpID
			Write32(pGpPara, 0); //Probability
			Write32(pGpPara, 0); //MaxDist
			Write32(pGpPara, 0); //MinDist

			len = pGpPara - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		Write16(pPlayerInfo, 0); //NPCAILevel
		Write16(pPlayerInfo, 0); //TeamID

		len = pPlayerInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //SyncCarNum
	for (size_t i = 0; i < n; i++)
	{ //SyncCar
		BYTE* pSyncCar = p;
		Write16(pSyncCar, 0); //len

		WriteUn(pSyncCar, 0); //PlayerUin
		Write16(pSyncCar, 0); //CurCarID
		Write8(pSyncCar, 0); //HasStoneInfo
		for (size_t i = 0; i < n; i++)
		{ //STKartStoneGrooveInfo
			BYTE* pSTKartStoneGrooveInfo = pSyncCar;
			Write16(pSTKartStoneGrooveInfo, 0); //len

			Write32(pSTKartStoneGrooveInfo, 0); //KartID
			Write32(pSTKartStoneGrooveInfo, 0); //StoneGrooveNum
			for (size_t i = 0; i < n; i++)
			{ //StoneGrooveInfo
				BYTE* pStoneGrooveInfo = pSTKartStoneGrooveInfo;
				Write16(pStoneGrooveInfo, 0); //len

				Write32(pStoneGrooveInfo, 0); //StoneUseOccaType
				Write32(pStoneGrooveInfo, 0); //SkillStoneID

				len = pStoneGrooveInfo - pSTKartStoneGrooveInfo;
				Set16(pSTKartStoneGrooveInfo, (WORD)len);
				pSTKartStoneGrooveInfo += len;
			}

			len = pSTKartStoneGrooveInfo - pSyncCar;
			Set16(pSyncCar, (WORD)len);
			pSyncCar += len;
		}

		len = pSyncCar - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //PlayerNum
	for (size_t i = 0; i < n; i++)
	{ //AvatarChangeInfo
		BYTE* pAvatarChangeInfo = p;
		Write16(pAvatarChangeInfo, 0); //len

		Write32(pAvatarChangeInfo, 0); //PlayerUin
		Write32(pAvatarChangeInfo, 0); //HairID
		Write32(pAvatarChangeInfo, 0); //CoatID
		Write32(pAvatarChangeInfo, 0); //TrousersID
		Write32(pAvatarChangeInfo, 0); //SuitID
		Write32(pAvatarChangeInfo, 0); //KartID
		Write8(pAvatarChangeInfo, 0); //HasItemInfo
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAvatarChangeInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //RoleID
			Write32(pItemInfo, 0); //HairID
			Write32(pItemInfo, 0); //FaceID
			Write32(pItemInfo, 0); //GlassID
			Write32(pItemInfo, 0); //CoatID
			Write32(pItemInfo, 0); //GloveID
			Write32(pItemInfo, 0); //TrousersID
			Write32(pItemInfo, 0); //PersonarID
			Write32(pItemInfo, 0); //TattooID
			Write32(pItemInfo, 0); //WingID
			Write32(pItemInfo, 0); //DecoratorID
			Write32(pItemInfo, 0); //KartID
			Write32(pItemInfo, 0); //ColorID
			Write32(pItemInfo, 0); //TrackID
			Write32(pItemInfo, 0); //EffectID
			Write32(pItemInfo, 0); //BrandID
			Write32(pItemInfo, 0); //TailID

			len = pItemInfo - pAvatarChangeInfo;
			Set16(pAvatarChangeInfo, (WORD)len);
			pAvatarChangeInfo += len;
		}

		len = pAvatarChangeInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //FeedBackEnabled
	Write16(p, 0); //PropID
	Write32(p, 0); //PropIndex
	Write16(p, 0); //PropNum
	Write16(p, 0); //LogicType
	Write8(p, 0); //MapCheckpointFileIndex
	Write32(p, 0); //Duration
	Write32(p, 0); //BeginCDTime
	Write32(p, 0); //PropInteval

	len = p - buf;
	SendToClient(Client, 530, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifySingleRaceBegin(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //CountDownTime

	len = p - buf;
	SendToClient(Client, 531, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifySingleRaceFinish(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	
	len = p - buf;
	SendToClient(Client, 532, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifySingleRaceOver(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	{ //TaskStatusInfo
		BYTE* pTaskStatusInfo = p;
		Write16(pTaskStatusInfo, 0); //len

		Write32(pTaskStatusInfo, 0); //TaskID
		Write8(pTaskStatusInfo, 0); //Status
		Write32(pTaskStatusInfo, 0); //ProgressRate
		Write32(pTaskStatusInfo, 0); //Other
		Write32(pTaskStatusInfo, 0); //LastUpdateTime

		len = pTaskStatusInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //FinTime
	{ //TaskAward
		BYTE* pTaskAward = p;
		Write16(pTaskAward, 0); //len

		Write32(pTaskAward, 0); //AwardMoney
		Write32(pTaskAward, 0); //TotalMoney
		Write32(pTaskAward, 0); //AwardSuperMoney
		Write32(pTaskAward, 0); //TotalSuperMoney
		Write32(pTaskAward, 0); //AwardExp
		Write32(pTaskAward, 0); //TotalExp
		Write32(pTaskAward, 0); //AwardItemNum
		for (size_t i = 0; i < n; i++)
		{ //AwardItemInfo
			BYTE* pAwardItemInfo = pTaskAward;
			Write16(pAwardItemInfo, 0); //len

			Write32(pAwardItemInfo, 0); //ItemID
			Write32(pAwardItemInfo, 0); //ItemNum
			Write32(pAwardItemInfo, 0); //AvailPeriod
			Write8(pAwardItemInfo, 0); //Status
			WriteUn(pAwardItemInfo, 0); //ObtainTime
			Write32(pAwardItemInfo, 0); //OtherAttribute
			Write16(pAwardItemInfo, 0); //ItemType

			len = pAwardItemInfo - pTaskAward;
			Set16(pTaskAward, (WORD)len);
			pTaskAward += len;
		}
		Write32(pTaskAward, 0); //AwardCoupons
		Write32(pTaskAward, 0); //TotalCoupons
		Write32(pTaskAward, 0); //AwardLuckMoney
		Write32(pTaskAward, 0); //TotalLuckMoney
		Write32(pTaskAward, 0); //AwardTeamWorkExp
		Write32(pTaskAward, 0); //TotalTeamWorkExp
		Write32(pTaskAward, 0); //AwardWlCash
		Write32(pTaskAward, 0); //AwardWlCrystal
		Write32(pTaskAward, 0); //AwardWlDegree
		Write32(pTaskAward, 0); //ChumCircleActivity
		Write32(pTaskAward, 0); //GuildScore
		Write16(pTaskAward, 0); //AppellcationID
		Write16(pTaskAward, 0); //ScoreJingJi
		Write8(pTaskAward, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pTaskAward;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pTaskAward;
			Set16(pTaskAward, (WORD)len);
			pTaskAward += len;
		}
		Write32(pTaskAward, 0); //LiveExp
		Write32(pTaskAward, 0); //AwardSpeedCoin
		Write32(pTaskAward, 0); //TotalSpeedCoin

		len = pTaskAward - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //ProfessionTime
	Write8(p, 0); //ProfessionIDStrLen
	Write8(p, 0); //HaveRankedMatchSeasonMapChallengeInfo
	for (size_t i = 0; i < n; i++)
	{ //RankedMatchSeasonMapChallengeInfo
		BYTE* pRankedMatchSeasonMapChallengeInfo = p;
		Write16(pRankedMatchSeasonMapChallengeInfo, 0); //len

		Write32(pRankedMatchSeasonMapChallengeInfo, 0); //MapID
		Write32(pRankedMatchSeasonMapChallengeInfo, 0); //MapIndex
		Write32(pRankedMatchSeasonMapChallengeInfo, 0); //MaxFinishiTime
		Write16(pRankedMatchSeasonMapChallengeInfo, 0); //ChallengeLevelNums
		for (size_t i = 0; i < n; i++)
		{ //ChallengeInfos
			BYTE* pChallengeInfos = pRankedMatchSeasonMapChallengeInfo;
			Write16(pChallengeInfos, 0); //len

			Write16(pChallengeInfos, 0); //ChallengeLevel
			Write32(pChallengeInfos, 0); //FinishTime
			Write8(pChallengeInfos, 0); //FinishOrNot
			Write32(pChallengeInfos, 0); //AddRankedScore
			Write32(pChallengeInfos, 0); //AddRankedCoinNums

			len = pChallengeInfos - pRankedMatchSeasonMapChallengeInfo;
			Set16(pRankedMatchSeasonMapChallengeInfo, (WORD)len);
			pRankedMatchSeasonMapChallengeInfo += len;
		}
		Write8(pRankedMatchSeasonMapChallengeInfo, 0); //PromotionExtraScore

		len = pRankedMatchSeasonMapChallengeInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //TriigerRankedMatchPromotion

	len = p - buf;
	SendToClient(Client, 533, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifySingleGameOver(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 534, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyTaskProgressRate(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	{ //TaskStatusInfo
		BYTE* pTaskStatusInfo = p;
		Write16(pTaskStatusInfo, 0); //len

		Write32(pTaskStatusInfo, 0); //TaskID
		Write8(pTaskStatusInfo, 0); //Status
		Write32(pTaskStatusInfo, 0); //ProgressRate
		Write32(pTaskStatusInfo, 0); //Other
		Write32(pTaskStatusInfo, 0); //LastUpdateTime

		len = pTaskStatusInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //RandTaskUpdateFlag

	len = p - buf;
	SendToClient(Client, 536, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyTaskAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //TaskID
	{ //TaskAward
		BYTE* pTaskAward = p;
		Write16(pTaskAward, 0); //len

		Write32(pTaskAward, 0); //AwardMoney
		Write32(pTaskAward, 0); //TotalMoney
		Write32(pTaskAward, 0); //AwardSuperMoney
		Write32(pTaskAward, 0); //TotalSuperMoney
		Write32(pTaskAward, 0); //AwardExp
		Write32(pTaskAward, 0); //TotalExp
		Write32(pTaskAward, 0); //AwardItemNum
		for (size_t i = 0; i < n; i++)
		{ //AwardItemInfo
			BYTE* pAwardItemInfo = pTaskAward;
			Write16(pAwardItemInfo, 0); //len

			Write32(pAwardItemInfo, 0); //ItemID
			Write32(pAwardItemInfo, 0); //ItemNum
			Write32(pAwardItemInfo, 0); //AvailPeriod
			Write8(pAwardItemInfo, 0); //Status
			WriteUn(pAwardItemInfo, 0); //ObtainTime
			Write32(pAwardItemInfo, 0); //OtherAttribute
			Write16(pAwardItemInfo, 0); //ItemType

			len = pAwardItemInfo - pTaskAward;
			Set16(pTaskAward, (WORD)len);
			pTaskAward += len;
		}
		Write32(pTaskAward, 0); //AwardCoupons
		Write32(pTaskAward, 0); //TotalCoupons
		Write32(pTaskAward, 0); //AwardLuckMoney
		Write32(pTaskAward, 0); //TotalLuckMoney
		Write32(pTaskAward, 0); //AwardTeamWorkExp
		Write32(pTaskAward, 0); //TotalTeamWorkExp
		Write32(pTaskAward, 0); //AwardWlCash
		Write32(pTaskAward, 0); //AwardWlCrystal
		Write32(pTaskAward, 0); //AwardWlDegree
		Write32(pTaskAward, 0); //ChumCircleActivity
		Write32(pTaskAward, 0); //GuildScore
		Write16(pTaskAward, 0); //AppellcationID
		Write16(pTaskAward, 0); //ScoreJingJi
		Write8(pTaskAward, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pTaskAward;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pTaskAward;
			Set16(pTaskAward, (WORD)len);
			pTaskAward += len;
		}
		Write32(pTaskAward, 0); //LiveExp
		Write32(pTaskAward, 0); //AwardSpeedCoin
		Write32(pTaskAward, 0); //TotalSpeedCoin

		len = pTaskAward - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //NextTaskID
	Write16(p, 0); //Type
	Write32(p, 0); //TaskWindowType
	Write8(p, 0); //TaskTipsLen
	Write8(p, 0); //ParaNum
	Write32(p, 0); //ParaList[]

	len = p - buf;
	SendToClient(Client, 537, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestStartSingleTask(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int TaskID = Read32(p);
	int MapID = Read32(p);
	U Level = ReadU(p);

}

void ResponseStartSingleTask(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write32(p, 0); //TaskID
	Write32(p, 0); //MapID
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 138, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestReportCurrentOpt(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	short OptType = Read16(p);
	int OptID = Read32(p);
	int SpecialValue = Read32(p);
}

void ResponseReportCurrentOpt(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write16(p, 0); //OptType
	Write32(p, 0); //OptNum

	len = p - buf;
	SendToClient(Client, 139, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetTaskList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetTaskList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write16(p, 0); //TaskNum
	for (size_t i = 0; i < n; i++)
	{ //PlayerTaskInfo
		BYTE* pPlayerTaskInfo = p;
		Write16(pPlayerTaskInfo, 0); //len

		{ //PlayerDBTaskInfo
			BYTE* pPlayerDBTaskInfo = pPlayerTaskInfo;
			Write16(pPlayerDBTaskInfo, 0); //len

			Write32(pPlayerDBTaskInfo, 0); //TaskID
			Write16(pPlayerDBTaskInfo, 0); //OptionID
			Write8(pPlayerDBTaskInfo, 0); //Status
			Write8(pPlayerDBTaskInfo, 0); //PrevStatus
			Write32(pPlayerDBTaskInfo, 0); //ProgressRate
			Write32(pPlayerDBTaskInfo, 0); //Other
			Write32(pPlayerDBTaskInfo, 0); //TakeTime
			Write32(pPlayerDBTaskInfo, 0); //LastUpdateTime

			len = pPlayerDBTaskInfo - pPlayerTaskInfo;
			Set16(pPlayerTaskInfo, (WORD)len);
			pPlayerTaskInfo += len;
		}
		Write16(pPlayerTaskInfo, 0); //MapID
		Write8(pPlayerTaskInfo, 0); //IsRecommandTask

		len = pPlayerTaskInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen
	Write16(p, 0); //RecommendLen
	Write32(p, 0); //SpecialTaskID
	Write8(p, 0); //RecomTaskPackNum
	for (size_t i = 0; i < n; i++)
	{ //RecomTaskPack
		BYTE* pRecomTaskPack = p;
		Write16(pRecomTaskPack, 0); //len

		Write32(pRecomTaskPack, 0); //TaskPackID
		Write32(pRecomTaskPack, 0); //SpecialFlag

		len = pRecomTaskPack - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //BlackListNum
	for (size_t i = 0; i < n; i++)
	{ //TaskBlackList
		BYTE* pTaskBlackList = p;
		Write16(pTaskBlackList, 0); //len

		Write8(pTaskBlackList, 0); //EntityType
		Write32(pTaskBlackList, 0); //EntityID

		len = pTaskBlackList - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 135, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestTakeTask(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int TaskID = Read32(p);
	short TakeOptionID = Read16(p);
	UINT Type = Read32(p);

}

void ResponseTakeTask(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	{ //PlayerDBTaskInfo
		BYTE* pPlayerDBTaskInfo = p;
		Write16(pPlayerDBTaskInfo, 0); //len

		Write32(pPlayerDBTaskInfo, 0); //TaskID
		Write16(pPlayerDBTaskInfo, 0); //OptionID
		Write8(pPlayerDBTaskInfo, 0); //Status
		Write8(pPlayerDBTaskInfo, 0); //PrevStatus
		Write32(pPlayerDBTaskInfo, 0); //ProgressRate
		Write32(pPlayerDBTaskInfo, 0); //Other
		Write32(pPlayerDBTaskInfo, 0); //TakeTime
		Write32(pPlayerDBTaskInfo, 0); //LastUpdateTime

		len = pPlayerDBTaskInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 136, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestDeleteTask(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int TaskID = Read32(p);

}

void ResponseDeleteTask(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write32(p, 0); //TaskID
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 137, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestSkipTask(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int TaskID = Read32(p);

}

void ResponseSkipTask(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write32(p, 0); //TaskID
	{ //TaskAward
		BYTE* pTaskAward = p;
		Write16(pTaskAward, 0); //len

		Write32(pTaskAward, 0); //AwardMoney
		Write32(pTaskAward, 0); //TotalMoney
		Write32(pTaskAward, 0); //AwardSuperMoney
		Write32(pTaskAward, 0); //TotalSuperMoney
		Write32(pTaskAward, 0); //AwardExp
		Write32(pTaskAward, 0); //TotalExp
		Write32(pTaskAward, 0); //AwardItemNum
		for (size_t i = 0; i < n; i++)
		{ //AwardItemInfo
			BYTE* pAwardItemInfo = pTaskAward;
			Write16(pAwardItemInfo, 0); //len

			Write32(pAwardItemInfo, 0); //ItemID
			Write32(pAwardItemInfo, 0); //ItemNum
			Write32(pAwardItemInfo, 0); //AvailPeriod
			Write8(pAwardItemInfo, 0); //Status
			WriteUn(pAwardItemInfo, 0); //ObtainTime
			Write32(pAwardItemInfo, 0); //OtherAttribute
			Write16(pAwardItemInfo, 0); //ItemType

			len = pAwardItemInfo - pTaskAward;
			Set16(pTaskAward, (WORD)len);
			pTaskAward += len;
		}
		Write32(pTaskAward, 0); //AwardCoupons
		Write32(pTaskAward, 0); //TotalCoupons
		Write32(pTaskAward, 0); //AwardLuckMoney
		Write32(pTaskAward, 0); //TotalLuckMoney
		Write32(pTaskAward, 0); //AwardTeamWorkExp
		Write32(pTaskAward, 0); //TotalTeamWorkExp
		Write32(pTaskAward, 0); //AwardWlCash
		Write32(pTaskAward, 0); //AwardWlCrystal
		Write32(pTaskAward, 0); //AwardWlDegree
		Write32(pTaskAward, 0); //ChumCircleActivity
		Write32(pTaskAward, 0); //GuildScore
		Write16(pTaskAward, 0); //AppellcationID
		Write16(pTaskAward, 0); //ScoreJingJi
		Write8(pTaskAward, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pTaskAward;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pTaskAward;
			Set16(pTaskAward, (WORD)len);
			pTaskAward += len;
		}
		Write32(pTaskAward, 0); //LiveExp
		Write32(pTaskAward, 0); //AwardSpeedCoin
		Write32(pTaskAward, 0); //TotalSpeedCoin

		len = pTaskAward - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 140, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestSkipFreshTask(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseSkipFreshTask(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin

	len = p - buf;
	SendToClient(Client, 183, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyAntiBot(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //Type
	Write16(p, 0); //BuffLen

	len = p - buf;
	SendToClient(Client, 538, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void AckAntiBot(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	short BuffLen = Read16(p);

}

void AckDpData(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	short BuffLen = Read16(p);

}

void RequestGMKickOff(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int KickKind = Read32(p);
	UINT DstUin = Read32(p);
	short AttachInfoLen = Read16(p);

}

void ResponseGMKickOff(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //AttachInfoLen

	len = p - buf;
	SendToClient(Client, 141, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyGMKickOff(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //GMUin
	Write32(p, 0); //KickKind
	Write16(p, 0); //AttachInfoLen

	len = p - buf;
	SendToClient(Client, 539, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGMForbidden(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int ForbiddenKind = Read32(p);
	int ForbiddenPeriod = Read32(p);
	UINT DstUin = Read32(p);
	short AttachInfoLen = Read16(p);
	int ForbiddenDealType = Read32(p);

}

void ResponseGMForbidden(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //AttachInfoLen

	len = p - buf;
	SendToClient(Client, 142, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyGMForbidden(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //GMUin
	Write32(p, 0); //ForbiddenKind
	Write32(p, 0); //ForbiddenPeriod
	Write16(p, 0); //AttachInfoLen

	len = p - buf;
	SendToClient(Client, 540, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyAcquaintanceLogin(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	{ //Data
		BYTE* pData = p;
		Write16(pData, 0); //len

		WriteUn(pData, 0); //AcquatntanceUin
		WriteString(pData, 0); //AcquatntanceName[]
		Write8(pData, 0); //RelationType
		WriteUn(pData, 0); //DstUin

		len = pData - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 599, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyFriendInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	{ //Data
		BYTE* pData = p;
		Write16(pData, 0); //len

		WriteUn(pData, 0); //FriendUin
		WriteString(pData, 0); //FriendName[]
		Write8(pData, 0); //InfoLen
		WriteUn(pData, 0); //DstUin

		len = pData - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 633, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyAdvertisement(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //ADFlag
	Write32(p, 0); //ContinuanceTime
	Write16(p, 0); //ContentLen

	len = p - buf;
	SendToClient(Client, 549, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyUpdateExperience(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //ExpInc
	Write32(p, 0); //ExpTotal
	Write16(p, 0); //PrefixStringLen

	len = p - buf;
	SendToClient(Client, 546, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetLicenseInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetLicenseInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write16(p, 0); //LicenseNum
	for (size_t i = 0; i < n; i++)
	{ //PlayerDBLicenseInfo
		BYTE* pPlayerDBLicenseInfo = p;
		Write16(pPlayerDBLicenseInfo, 0); //len

		Write16(pPlayerDBLicenseInfo, 0); //TaskNum
		for (size_t i = 0; i < n; i++)
		{ //LicenseTaskInfo
			BYTE* pLicenseTaskInfo = pPlayerDBLicenseInfo;
			Write16(pLicenseTaskInfo, 0); //len

			Write32(pLicenseTaskInfo, 0); //TaskID
			Write8(pLicenseTaskInfo, 0); //Status
			Write8(pLicenseTaskInfo, 0); //PrevStatus

			len = pLicenseTaskInfo - pPlayerDBLicenseInfo;
			Set16(pPlayerDBLicenseInfo, (WORD)len);
			pPlayerDBLicenseInfo += len;
		}
		Write32(pPlayerDBLicenseInfo, 0); //TakeTime

		len = pPlayerDBLicenseInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 145, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyUpdateLicense(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //NewLicense
	{ //LicenseAward
		BYTE* pLicenseAward = p;
		Write16(pLicenseAward, 0); //len

		Write32(pLicenseAward, 0); //AwardMoney
		Write32(pLicenseAward, 0); //TotalMoney
		Write32(pLicenseAward, 0); //AwardSuperMoney
		Write32(pLicenseAward, 0); //TotalSuperMoney
		Write32(pLicenseAward, 0); //AwardExp
		Write32(pLicenseAward, 0); //TotalExp
		Write32(pLicenseAward, 0); //AwardItemNum
		for (size_t i = 0; i < n; i++)
		{ //AwardItemInfo
			BYTE* pAwardItemInfo = pLicenseAward;
			Write16(pAwardItemInfo, 0); //len

			Write32(pAwardItemInfo, 0); //ItemID
			Write32(pAwardItemInfo, 0); //ItemNum
			Write32(pAwardItemInfo, 0); //AvailPeriod
			Write8(pAwardItemInfo, 0); //Status
			WriteUn(pAwardItemInfo, 0); //ObtainTime
			Write32(pAwardItemInfo, 0); //OtherAttribute
			Write16(pAwardItemInfo, 0); //ItemType

			len = pAwardItemInfo - pLicenseAward;
			Set16(pLicenseAward, (WORD)len);
			pLicenseAward += len;
		}
		Write32(pLicenseAward, 0); //AwardCoupons
		Write32(pLicenseAward, 0); //TotalCoupons
		Write32(pLicenseAward, 0); //AwardLuckMoney
		Write32(pLicenseAward, 0); //TotalLuckMoney
		Write32(pLicenseAward, 0); //AwardTeamWorkExp
		Write32(pLicenseAward, 0); //TotalTeamWorkExp
		Write32(pLicenseAward, 0); //AwardWlCash
		Write32(pLicenseAward, 0); //AwardWlCrystal
		Write32(pLicenseAward, 0); //AwardWlDegree
		Write32(pLicenseAward, 0); //ChumCircleActivity
		Write32(pLicenseAward, 0); //GuildScore
		Write16(pLicenseAward, 0); //AppellcationID
		Write16(pLicenseAward, 0); //ScoreJingJi
		Write8(pLicenseAward, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pLicenseAward;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pLicenseAward;
			Set16(pLicenseAward, (WORD)len);
			pLicenseAward += len;
		}
		Write32(pLicenseAward, 0); //LiveExp
		Write32(pLicenseAward, 0); //AwardSpeedCoin
		Write32(pLicenseAward, 0); //TotalSpeedCoin

		len = pLicenseAward - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 547, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyAddLicenseInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //License
	{ //PlayerDBLicenseInfo
		BYTE* pPlayerDBLicenseInfo = p;
		Write16(pPlayerDBLicenseInfo, 0); //len

		Write16(pPlayerDBLicenseInfo, 0); //TaskNum
		for (size_t i = 0; i < n; i++)
		{ //LicenseTaskInfo
			BYTE* pLicenseTaskInfo = pPlayerDBLicenseInfo;
			Write16(pLicenseTaskInfo, 0); //len

			Write32(pLicenseTaskInfo, 0); //TaskID
			Write8(pLicenseTaskInfo, 0); //Status
			Write8(pLicenseTaskInfo, 0); //PrevStatus

			len = pLicenseTaskInfo - pPlayerDBLicenseInfo;
			Set16(pPlayerDBLicenseInfo, (WORD)len);
			pPlayerDBLicenseInfo += len;
		}
		Write32(pPlayerDBLicenseInfo, 0); //TakeTime

		len = pPlayerDBLicenseInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 552, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyWordList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write8(p, 0); //LeaveWordNum
	for (size_t i = 0; i < n; i++)
	{ //WordList
		BYTE* pWordList = p;
		Write16(pWordList, 0); //len

		Write16(pWordList, 0); //WordID
		Write8(pWordList, 0); //WordType
		Write32(pWordList, 0); //WordTime
		Write32(pWordList, 0); //SrcUin
		Write8(pWordList, 0); //WordLen

		len = pWordList - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 554, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestDeleteWord(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	bool DeleteWordNum = Read8(p);
	short[] WordID[] = Read16(p);

}

void ResponseDeleteWord(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin

	len = p - buf;
	SendToClient(Client, 150, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestSwitchInterface(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	bool InterfaceType = Read8(p);

}

void ResponseSwitchInterface(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetSystemTaskList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int TaskVersion = Read32(p);

}

void ResponseGetSystemTaskList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write32(p, 0); //LatestTaskVersion
	Write32(p, 0); //TaskNum
	for (size_t i = 0; i < n; i++)
	{ //SystemTaskInfo
		BYTE* pSystemTaskInfo = p;
		Write16(pSystemTaskInfo, 0); //len

		Write32(pSystemTaskInfo, 0); //TaskID
		Write32(pSystemTaskInfo, 0); //PackID
		WriteString(pSystemTaskInfo, 0); //TaskName[]
		Write16(pSystemTaskInfo, 0); //TaskIntroLen
		Write8(pSystemTaskInfo, 0); //SuccDialogLen
		Write8(pSystemTaskInfo, 0); //FailDialogLen
		Write8(pSystemTaskInfo, 0); //AwardInfoLen
		Write8(pSystemTaskInfo, 0); //AwardOtherInfoLen
		Write8(pSystemTaskInfo, 0); //ProgressLen
		Write16(pSystemTaskInfo, 0); //ExecuteNum
		Write8(pSystemTaskInfo, 0); //PrevTaskNum
		Write32(pSystemTaskInfo, 0); //PrevTaskID[]
		Write16(pSystemTaskInfo, 0); //LogicType
		Write16(pSystemTaskInfo, 0); //TaskType
		Write8(pSystemTaskInfo, 0); //OperatorType
		Write32(pSystemTaskInfo, 0); //OperatorParam
		Write32(pSystemTaskInfo, 0); //Option
		Write32(pSystemTaskInfo, 0); //Identity
		Write32(pSystemTaskInfo, 0); //NeedNum
		Write16(pSystemTaskInfo, 0); //ShowType
		Write32(pSystemTaskInfo, 0); //TotalTime
		Write8(pSystemTaskInfo, 0); //DiffInfoLen
		Write16(pSystemTaskInfo, 0); //TaskShortIntroLen
		Write16(pSystemTaskInfo, 0); //JumpFuncNameLen

		len = pSystemTaskInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //TaskPackNum
	for (size_t i = 0; i < n; i++)
	{ //SystemTaskPackInfo
		BYTE* pSystemTaskPackInfo = p;
		Write16(pSystemTaskPackInfo, 0); //len

		Write32(pSystemTaskPackInfo, 0); //PackID
		WriteString(pSystemTaskPackInfo, 0); //PackName[]
		Write16(pSystemTaskPackInfo, 0); //PackType
		Write16(pSystemTaskPackInfo, 0); //TaskNum
		Write32(pSystemTaskPackInfo, 0); //TaskID[]
		Write16(pSystemTaskPackInfo, 0); //Priority
		Write16(pSystemTaskPackInfo, 0); //PackMode

		len = pSystemTaskPackInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 152, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyAddTaskInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //TaskNum
	for (size_t i = 0; i < n; i++)
	{ //PlayerDBTaskInfo
		BYTE* pPlayerDBTaskInfo = p;
		Write16(pPlayerDBTaskInfo, 0); //len

		Write32(pPlayerDBTaskInfo, 0); //TaskID
		Write16(pPlayerDBTaskInfo, 0); //OptionID
		Write8(pPlayerDBTaskInfo, 0); //Status
		Write8(pPlayerDBTaskInfo, 0); //PrevStatus
		Write32(pPlayerDBTaskInfo, 0); //ProgressRate
		Write32(pPlayerDBTaskInfo, 0); //Other
		Write32(pPlayerDBTaskInfo, 0); //TakeTime
		Write32(pPlayerDBTaskInfo, 0); //LastUpdateTime

		len = pPlayerDBTaskInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 557, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyActivityAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write8(p, 0); //ActivityAwardLen
	Write32(p, 0); //ActiveID
	Write8(p, 0); //Flag

	len = p - buf;
	SendToClient(Client, 558, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyKartPhysParam(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //KartNum
	for (size_t i = 0; i < n; i++)
	{ //KartPhysParam
		BYTE* pKartPhysParam = p;
		Write16(pKartPhysParam, 0); //len

		Write32(pKartPhysParam, 0); //KartID
		Write8(pKartPhysParam, 0); //PhysInfoCount
		for (size_t i = 0; i < n; i++)
		{ //PhysInfo
			BYTE* pPhysInfo = pKartPhysParam;
			Write16(pPhysInfo, 0); //len

			Write32(pPhysInfo, 0); //PID
			Write32(pPhysInfo, 0); //AffectID
			Write32(pPhysInfo, 0); //Param
			Write32(pPhysInfo, 0); //LifeTime

			len = pPhysInfo - pKartPhysParam;
			Set16(pKartPhysParam, (WORD)len);
			pKartPhysParam += len;
		}
		Write8(pKartPhysParam, 0); //CompensateParamCount
		for (size_t i = 0; i < n; i++)
		{ //CompensateParam
			BYTE* pCompensateParam = pKartPhysParam;
			Write16(pCompensateParam, 0); //len

			Write32(pCompensateParam, 0); //Percent
			Write32(pCompensateParam, 0); //Value

			len = pCompensateParam - pKartPhysParam;
			Set16(pKartPhysParam, (WORD)len);
			pKartPhysParam += len;
		}
		{ //CollisionBoxParam
			BYTE* pCollisionBoxParam = pKartPhysParam;
			Write16(pCollisionBoxParam, 0); //len

			Write32(pCollisionBoxParam, 0); //BoxLength
			Write32(pCollisionBoxParam, 0); //BoxWidth
			Write32(pCollisionBoxParam, 0); //BoxHeight
			Write32(pCollisionBoxParam, 0); //AdjustOffset
			Write32(pCollisionBoxParam, 0); //AdjustPickGap
			Write32(pCollisionBoxParam, 0); //AdjustRemoteOffset
			Write32(pCollisionBoxParam, 0); //AdjustBevelOffset
			Write32(pCollisionBoxParam, 0); //ControllerOffset

			len = pCollisionBoxParam - pKartPhysParam;
			Set16(pKartPhysParam, (WORD)len);
			pKartPhysParam += len;
		}
		{ //CarToCarCollisionParam
			BYTE* pCarToCarCollisionParam = pKartPhysParam;
			Write16(pCarToCarCollisionParam, 0); //len

			Write32(pCarToCarCollisionParam, 0); //CollisionRadius
			Write32(pCarToCarCollisionParam, 0); //CollisionLength
			Write32(pCarToCarCollisionParam, 0); //CollisionWidth
			Write32(pCarToCarCollisionParam, 0); //CollisionHeight
			Write32(pCarToCarCollisionParam, 0); //CollisionLostCtrlTime

			len = pCarToCarCollisionParam - pKartPhysParam;
			Set16(pKartPhysParam, (WORD)len);
			pKartPhysParam += len;
		}
		Write32(pKartPhysParam, 0); //BaseTurnRate
		Write32(pKartPhysParam, 0); //VolatileTurnRate
		Write32(pKartPhysParam, 0); //MaxTurnSpeed
		Write32(pKartPhysParam, 0); //MinTurnSpeed
		Write32(pKartPhysParam, 0); //MaxAccuTime
		Write32(pKartPhysParam, 0); //BaseAccuRate
		Write32(pKartPhysParam, 0); //MaxAffectSpeed
		Write32(pKartPhysParam, 0); //Gravity
		Write32(pKartPhysParam, 0); //AdditionalLocalZSpeed
		Write32(pKartPhysParam, 0); //StartVec
		Write32(pKartPhysParam, 0); //EndVecFist
		Write32(pKartPhysParam, 0); //EndVecSecon
		Write32(pKartPhysParam, 0); //DirKeyForce
		Write32(pKartPhysParam, 0); //DirKeyTwist
		Write32(pKartPhysParam, 0); //BannerTwist
		Write32(pKartPhysParam, 0); //BannerKeyTwist
		Write32(pKartPhysParam, 0); //BannerVecForce
		Write32(pKartPhysParam, 0); //BannerHeadForce
		Write32(pKartPhysParam, 0); //SlidFricForce
		Write32(pKartPhysParam, 0); //RollFricForce
		Write32(pKartPhysParam, 0); //StartWec
		Write32(pKartPhysParam, 0); //MaxWec
		Write32(pKartPhysParam, 0); //SuaiJianTwist
		Write32(pKartPhysParam, 0); //DirUpKeyForce
		Write8(pKartPhysParam, 0); //AccelStatusCount
		Write32(pKartPhysParam, 0); //AccelStatus[]
		Write8(pKartPhysParam, 0); //ForwardAccelNum
		for (size_t i = 0; i < n; i++)
		{ //ForwardAccel
			BYTE* pForwardAccel = pKartPhysParam;
			Write16(pForwardAccel, 0); //len

			Write32(pForwardAccel, 0); //Key
			Write32(pForwardAccel, 0); //Value

			len = pForwardAccel - pKartPhysParam;
			Set16(pKartPhysParam, (WORD)len);
			pKartPhysParam += len;
		}
		Write8(pKartPhysParam, 0); //ForwardDecelNum
		for (size_t i = 0; i < n; i++)
		{ //ForwardDecel
			BYTE* pForwardDecel = pKartPhysParam;
			Write16(pForwardDecel, 0); //len

			Write32(pForwardDecel, 0); //Key
			Write32(pForwardDecel, 0); //Value

			len = pForwardDecel - pKartPhysParam;
			Set16(pKartPhysParam, (WORD)len);
			pKartPhysParam += len;
		}
		Write8(pKartPhysParam, 0); //BackwardAccelNum
		for (size_t i = 0; i < n; i++)
		{ //BackwardAccel
			BYTE* pBackwardAccel = pKartPhysParam;
			Write16(pBackwardAccel, 0); //len

			Write32(pBackwardAccel, 0); //Key
			Write32(pBackwardAccel, 0); //Value

			len = pBackwardAccel - pKartPhysParam;
			Set16(pKartPhysParam, (WORD)len);
			pKartPhysParam += len;
		}
		Write8(pKartPhysParam, 0); //BackwardDecelNum
		for (size_t i = 0; i < n; i++)
		{ //BackwardDecel
			BYTE* pBackwardDecel = pKartPhysParam;
			Write16(pBackwardDecel, 0); //len

			Write32(pBackwardDecel, 0); //Key
			Write32(pBackwardDecel, 0); //Value

			len = pBackwardDecel - pKartPhysParam;
			Set16(pKartPhysParam, (WORD)len);
			pKartPhysParam += len;
		}
		Write32(pKartPhysParam, 0); //CrashCompensatePower
		Write32(pKartPhysParam, 0); //DefenseRate
		Write32(pKartPhysParam, 0); //Uin
		Write32(pKartPhysParam, 0); //SpeedupCardGenRate
		Write32(pKartPhysParam, 0); //ExtraFuncFlag
		Write8(pKartPhysParam, 0); //SkatePara
		for (size_t i = 0; i < n; i++)
		{ //hasSkatePara
			BYTE* phasSkatePara = pKartPhysParam;
			Write16(phasSkatePara, 0); //len

			Write32(phasSkatePara, 0); //TrackSpeed
			Write32(phasSkatePara, 0); //SkateSpeedCoef_AirBigJet
			Write32(phasSkatePara, 0); //SkateSpeedCoef_Jump
			Write32(phasSkatePara, 0); //SkateSpeedCoef_AirJetPoint
			Write32(phasSkatePara, 0); //SkateSpeedCoef_MaxForce
			Write32(phasSkatePara, 0); //OntrackAccRef
			Write32(phasSkatePara, 0); //TrackAccRef
			Write32(phasSkatePara, 0); //DashSkill

			len = phasSkatePara - pKartPhysParam;
			Set16(pKartPhysParam, (WORD)len);
			pKartPhysParam += len;
		}
		Write8(pKartPhysParam, 0); //HasBattleModeSkillInfoList
		for (size_t i = 0; i < n; i++)
		{ //BattleModeSkillInfoList
			BYTE* pBattleModeSkillInfoList = pKartPhysParam;
			Write16(pBattleModeSkillInfoList, 0); //len

			Write8(pBattleModeSkillInfoList, 0); //SkillNum
			for (size_t i = 0; i < n; i++)
			{ //SkillInfo
				BYTE* pSkillInfo = pBattleModeSkillInfoList;
				Write16(pSkillInfo, 0); //len

				Write16(pSkillInfo, 0); //SkillId
				Write8(pSkillInfo, 0); //SkillLevel

				len = pSkillInfo - pBattleModeSkillInfoList;
				Set16(pBattleModeSkillInfoList, (WORD)len);
				pBattleModeSkillInfoList += len;
			}

			len = pBattleModeSkillInfoList - pKartPhysParam;
			Set16(pKartPhysParam, (WORD)len);
			pKartPhysParam += len;
		}
		Write32(pKartPhysParam, 0); //EnergyConvert
		Write16(pKartPhysParam, 0); //SuperN2ORate
		Write16(pKartPhysParam, 0); //CollisionLoseRate
		Write8(pKartPhysParam, 0); //NotInterruptDrift
		Write8(pKartPhysParam, 0); //AddWeightNum
		Write8(pKartPhysParam, 0); //WeightNum
		Write8(pKartPhysParam, 0); //HasAntiCollisionCfg
		for (size_t i = 0; i < n; i++)
		{ //AntiCollistionCfg
			BYTE* pAntiCollistionCfg = pKartPhysParam;
			Write16(pAntiCollistionCfg, 0); //len

			Write8(pAntiCollistionCfg, 0); //Num
			Write32(pAntiCollistionCfg, 0); //Position[]

			len = pAntiCollistionCfg - pKartPhysParam;
			Set16(pKartPhysParam, (WORD)len);
			pKartPhysParam += len;
		}
		Write8(pKartPhysParam, 0); //HasBoatParam
		for (size_t i = 0; i < n; i++)
		{ //BoatParam
			BYTE* pBoatParam = pKartPhysParam;
			Write16(pBoatParam, 0); //len

			Write32(pBoatParam, 0); //DirKeyForceParamC
			Write32(pBoatParam, 0); //DirKeyForceParamD
			Write32(pBoatParam, 0); //DTFLimitAngle
			Write32(pBoatParam, 0); //DTFRatio
			Write32(pBoatParam, 0); //UpKeyVecForce
			Write32(pBoatParam, 0); //UpKeyVecForceParamA
			Write32(pBoatParam, 0); //UpKeyVecForceParamB
			Write32(pBoatParam, 0); //LRKeyVecForce
			Write32(pBoatParam, 0); //LRKeyVecForceParamA
			Write32(pBoatParam, 0); //LRKeyVecForceParamB
			Write32(pBoatParam, 0); //VecForce
			Write32(pBoatParam, 0); //VecForceParamA
			Write32(pBoatParam, 0); //VecForceParamB
			Write32(pBoatParam, 0); //BoatShape[]
			Write32(pBoatParam, 0); //WecEffect
			Write32(pBoatParam, 0); //BannerKeyTwist
			Write32(pBoatParam, 0); //BannerKeyTwistParamA
			Write32(pBoatParam, 0); //BannerKeyTwistParamB
			Write32(pBoatParam, 0); //SuaiJianTwist
			Write32(pBoatParam, 0); //BoatHeighRatio
			Write32(pBoatParam, 0); //BannerTwist
			Write32(pBoatParam, 0); //BannerTwistParamA
			Write32(pBoatParam, 0); //DirUpKeyForce
			Write32(pBoatParam, 0); //DirUpKeyForceParamA
			Write32(pBoatParam, 0); //DirUpKeyForceParamB
			Write32(pBoatParam, 0); //DirKeyForce
			Write32(pBoatParam, 0); //DirKeyForceParamA
			Write32(pBoatParam, 0); //DirKeyForceParamB
			Write32(pBoatParam, 0); //AddNO2PerSec
			Write32(pBoatParam, 0); //BoatAirValue
			WriteUn(pBoatParam, 0); //ifSlidFricForce

			len = pBoatParam - pKartPhysParam;
			Set16(pKartPhysParam, (WORD)len);
			pKartPhysParam += len;
		}
		Write8(pKartPhysParam, 0); //BoatForwardAccelNum
		for (size_t i = 0; i < n; i++)
		{ //BoatForwardAccel
			BYTE* pBoatForwardAccel = pKartPhysParam;
			Write16(pBoatForwardAccel, 0); //len

			Write32(pBoatForwardAccel, 0); //Key
			Write32(pBoatForwardAccel, 0); //Value

			len = pBoatForwardAccel - pKartPhysParam;
			Set16(pKartPhysParam, (WORD)len);
			pKartPhysParam += len;
		}
		Write32(pKartPhysParam, 0); //DirUpKeyForceParamA
		Write32(pKartPhysParam, 0); //DirUpKeyForceParamB

		len = pKartPhysParam - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //SuperN2ORate

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyBugletTalk(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //BugletNum
	for (size_t i = 0; i < n; i++)
	{ //BugletInfo
		BYTE* pBugletInfo = p;
		Write16(pBugletInfo, 0); //len

		WriteUn(pBugletInfo, 0); //SrcUin
		WriteString(pBugletInfo, 0); //SrcNickName[]
		WriteString(pBugletInfo, 0); //SrcGuildName[]
		Write8(pBugletInfo, 0); //Gender
		Write16(pBugletInfo, 0); //ContentLength
		Write8(pBugletInfo, 0); //BugletType
		Write32(pBugletInfo, 0); //Identify
		WriteUn(pBugletInfo, 0); //VipFlag
		WriteU(pBugletInfo, 0); //Contentid[]
		{ //NobleInfo
			BYTE* pNobleInfo = pBugletInfo;
			Write16(pNobleInfo, 0); //len

			Write32(pNobleInfo, 0); //NobleID
			Write8(pNobleInfo, 0); //NobleLevel
			Write32(pNobleInfo, 0); //NoblePoint
			Write32(pNobleInfo, 0); //NobleLeftDays

			len = pNobleInfo - pBugletInfo;
			Set16(pBugletInfo, (WORD)len);
			pBugletInfo += len;
		}
		{ //GuildVipBaseInfo
			BYTE* pGuildVipBaseInfo = pBugletInfo;
			Write16(pGuildVipBaseInfo, 0); //len

			Write8(pGuildVipBaseInfo, 0); //GuildVipLevel
			Write32(pGuildVipBaseInfo, 0); //GuildVipPoint

			len = pGuildVipBaseInfo - pBugletInfo;
			Set16(pBugletInfo, (WORD)len);
			pBugletInfo += len;
		}
		Write8(pBugletInfo, 0); //HasLoverVip
		for (size_t i = 0; i < n; i++)
		{ //LoverVipInfo
			BYTE* pLoverVipInfo = pBugletInfo;
			Write16(pLoverVipInfo, 0); //len

			Write8(pLoverVipInfo, 0); //LoverVipLevel
			Write32(pLoverVipInfo, 0); //LoverVipPoint
			Write8(pLoverVipInfo, 0); //GrowRate

			len = pLoverVipInfo - pBugletInfo;
			Set16(pBugletInfo, (WORD)len);
			pBugletInfo += len;
		}
		Write8(pBugletInfo, 0); //GardenLevel
		WriteUn(pBugletInfo, 0); //ConsumeVipLevel
		{ //EmperorInfo
			BYTE* pEmperorInfo = pBugletInfo;
			Write16(pEmperorInfo, 0); //len

			Write8(pEmperorInfo, 0); //EmperorLevel
			Write32(pEmperorInfo, 0); //EmperorPoint
			Write32(pEmperorInfo, 0); //EmperorLeftDays
			Write8(pEmperorInfo, 0); //EmperorGrowRate

			len = pEmperorInfo - pBugletInfo;
			Set16(pBugletInfo, (WORD)len);
			pBugletInfo += len;
		}
		Write8(pBugletInfo, 0); //HasCarLottoryRecord
		for (size_t i = 0; i < n; i++)
		{ //CarLottoryRecord
			BYTE* pCarLottoryRecord = pBugletInfo;
			Write16(pCarLottoryRecord, 0); //len

			Write32(pCarLottoryRecord, 0); //AwardTime
			Write32(pCarLottoryRecord, 0); //ItemID
			Write32(pCarLottoryRecord, 0); //ItemNum
			Write32(pCarLottoryRecord, 0); //AvailPeriod

			len = pCarLottoryRecord - pBugletInfo;
			Set16(pBugletInfo, (WORD)len);
			pBugletInfo += len;
		}

		len = pBugletInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 555, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyUseItemResult(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //ItemID
	Write32(p, 0); //UseItemNum
	Write32(p, 0); //CurrentItemNum

	len = p - buf;
	SendToClient(Client, 556, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestUseItem(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int ItemID = Read32(p);
	UINT DstUin = Read32(p);
	bool AttachDataLen = Read8(p);
	UCHAR OpType = Read8(p);
	UINT Para = Read32(p);
	UCHAR MultiUseFlag = Read8(p);
	int MultiUseNum = Read32(p);

}

void ResponseUseItem(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //ItemID
	Write32(p, 0); //DstUin
	Write8(p, 0); //AttachDataLen
	Write8(p, 0); //ReasonLen
	Write8(p, 0); //OpType
	Write32(p, 0); //Para
	Write8(p, 0); //MultiUseFlag
	Write32(p, 0); //MultiUseNum
	Write32(p, 0); //PetExpCardUsedNum
	Write32(p, 0); //PetExpCardOverflow

	len = p - buf;
	SendToClient(Client, 158, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyUseItem(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //SrcUin
	Write32(p, 0); //DstUin
	Write32(p, 0); //ItemID
	Write8(p, 0); //AttachDataLen
	Write8(p, 0); //DstType
	Write8(p, 0); //HasPKAbilityInfo
	for (size_t i = 0; i < n; i++)
	{ //PKAbilityInfo
		BYTE* pPKAbilityInfo = p;
		Write16(pPKAbilityInfo, 0); //len

		Write16(pPKAbilityInfo, 0); //SrcPKAbility
		Write8(pPKAbilityInfo, 0); //IsSrcPKStrong
		Write16(pPKAbilityInfo, 0); //DstPKAbility
		Write8(pPKAbilityInfo, 0); //IsDstPKStrong

		len = pPKAbilityInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //Para
	Write8(p, 0); //OpType

	len = p - buf;
	SendToClient(Client, 567, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestInvitePlayer(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT DstUin = Read32(p);
	bool Type = Read8(p);

}

void ResponseInvitePlayer(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //DstUin
	Write8(p, 0); //ReasonLen
	Write8(p, 0); //Type
	Write8(p, 0); //GVoiceRoomNameLen
	WriteUn(p, 0); //EquipedItemNum
	for (size_t i = 0; i < n; i++)
	{ //PlayerItemInfo
		BYTE* pPlayerItemInfo = p;
		Write16(pPlayerItemInfo, 0); //len

		Write32(pPlayerItemInfo, 0); //ItemID
		Write32(pPlayerItemInfo, 0); //ItemNum
		Write32(pPlayerItemInfo, 0); //AvailPeriod
		Write8(pPlayerItemInfo, 0); //Status
		WriteUn(pPlayerItemInfo, 0); //ObtainTime
		Write32(pPlayerItemInfo, 0); //OtherAttribute
		Write16(pPlayerItemInfo, 0); //ItemType

		len = pPlayerItemInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReserveFlag
	Write8(p, 0); //Gender

	len = p - buf;
	SendToClient(Client, 159, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyInviteResult(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //DstUin
	Write8(p, 0); //ReasonLen
	Write8(p, 0); //Type

	len = p - buf;
	SendToClient(Client, 568, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyBeInvited(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //SrcUin
	WriteString(p, 0); //SrcNickName[]
	Write32(p, 0); //DstUin
	{ //PositionInfo
		BYTE* pPositionInfo = p;
		Write16(pPositionInfo, 0); //len

		Write8(pPositionInfo, 0); //ServerType
		Write16(pPositionInfo, 0); //Status
		Write32(pPositionInfo, 0); //ServerID
		{ //RoomInfo
			BYTE* pRoomInfo = pPositionInfo;
			Write16(pRoomInfo, 0); //len

			Write16(pRoomInfo, 0); //RoomID
			Write16(pRoomInfo, 0); //BaseGameMode
			Write16(pRoomInfo, 0); //SubGameMode
			Write8(pRoomInfo, 0); //CurrentPlayerNum
			Write8(pRoomInfo, 0); //TotalSeatNum
			Write8(pRoomInfo, 0); //Status
			Write32(pRoomInfo, 0); //MapID
			Write8(pRoomInfo, 0); //Flag
			WriteString(pRoomInfo, 0); //RoomName[]
			Write8(pRoomInfo, 0); //HasFBInfo
			for (size_t i = 0; i < n; i++)
			{ //FBInfo
				BYTE* pFBInfo = pRoomInfo;
				Write16(pFBInfo, 0); //len

				Write8(pFBInfo, 0); //AvailableLev
				Write8(pFBInfo, 0); //Lev
				Write8(pFBInfo, 0); //SubLev
				Write32(pFBInfo, 0); //BossID
				Write8(pFBInfo, 0); //FBSeason

				len = pFBInfo - pRoomInfo;
				Set16(pRoomInfo, (WORD)len);
				pRoomInfo += len;
			}
			Write8(pRoomInfo, 0); //SpeFlag
			Write32(pRoomInfo, 0); //RoomNo
			Write16(pRoomInfo, 0); //SvrId
			Write16(pRoomInfo, 0); //SceneID
			Write8(pRoomInfo, 0); //CurrentOBNum
			Write8(pRoomInfo, 0); //TotalOBNum
			Write8(pRoomInfo, 0); //SpecialActivityStatus
			Write8(pRoomInfo, 0); //AllowAutoStart
			Write32(pRoomInfo, 0); //Gender
			Write32(pRoomInfo, 0); //LocaleCode
			Write8(pRoomInfo, 0); //TalkRoomBGID
			Write8(pRoomInfo, 0); //SpecialActivityIDNum
			Write8(pRoomInfo, 0); //SpecialActivityInfoNum
			for (size_t i = 0; i < n; i++)
			{ //SpecialActivityInfo
				BYTE* pSpecialActivityInfo = pRoomInfo;
				Write16(pSpecialActivityInfo, 0); //len

				Write8(pSpecialActivityInfo, 0); //ProfessionLicenseInfoNum
				for (size_t i = 0; i < n; i++)
				{ //ProfessionLicenseInfo
					BYTE* pProfessionLicenseInfo = pSpecialActivityInfo;
					Write16(pProfessionLicenseInfo, 0); //len

					Write8(pProfessionLicenseInfo, 0); //BigLevel
					Write8(pProfessionLicenseInfo, 0); //SmallLevel

					len = pProfessionLicenseInfo - pSpecialActivityInfo;
					Set16(pSpecialActivityInfo, (WORD)len);
					pSpecialActivityInfo += len;
				}

				len = pSpecialActivityInfo - pRoomInfo;
				Set16(pRoomInfo, (WORD)len);
				pRoomInfo += len;
			}
			Write8(pRoomInfo, 0); //ValueNum
			Write32(pRoomInfo, 0); //EnterRoomValue[]
			Write8(pRoomInfo, 0); //ParaNum
			Write32(pRoomInfo, 0); //ParaList[]
			Write32(pRoomInfo, 0); //GSvrRoomNo
			WriteString(pRoomInfo, 0); //OwnerName[]

			len = pRoomInfo - pPositionInfo;
			Set16(pPositionInfo, (WORD)len);
			pPositionInfo += len;
		}
		Write8(pPositionInfo, 0); //StatusLen
		Write8(pPositionInfo, 0); //CanJoin

		len = pPositionInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //Type
	Write32(p, 0); //Para0
	Write32(p, 0); //Para1
	Write8(p, 0); //GVoiceRoomNameLen
	WriteUn(p, 0); //EquipedItemNum
	for (size_t i = 0; i < n; i++)
	{ //PlayerItemInfo
		BYTE* pPlayerItemInfo = p;
		Write16(pPlayerItemInfo, 0); //len

		Write32(pPlayerItemInfo, 0); //ItemID
		Write32(pPlayerItemInfo, 0); //ItemNum
		Write32(pPlayerItemInfo, 0); //AvailPeriod
		Write8(pPlayerItemInfo, 0); //Status
		WriteUn(pPlayerItemInfo, 0); //ObtainTime
		Write32(pPlayerItemInfo, 0); //OtherAttribute
		Write16(pPlayerItemInfo, 0); //ItemType

		len = pPlayerItemInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReserveFlag
	Write8(p, 0); //Gender

	len = p - buf;
	SendToClient(Client, 569, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void AckBeInvited(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	short ResultID = Read16(p);
	UINT SrcUin = Read32(p);
	UINT DstUin = Read32(p);
	bool Type = Read8(p);

}

void RequestExchange(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int ExchangeID = Read32(p);

}

void ResponseExchange(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen
	Write8(p, 0); //LuckAwardNum
	for (size_t i = 0; i < n; i++)
	{ //LuckAwardList
		BYTE* pLuckAwardList = p;
		Write16(pLuckAwardList, 0); //len

		Write8(pLuckAwardList, 0); //AwardType
		Write32(pLuckAwardList, 0); //AwardPara
		Write8(pLuckAwardList, 0); //AwardPostion
		Write8(pLuckAwardList, 0); //AwardDesLen
		Write32(pLuckAwardList, 0); //ItemNum
		Write32(pLuckAwardList, 0); //AvailPeriod

		len = pLuckAwardList - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 160, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestNPCComplete(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int NPCID = Read32(p);
	int CompleteTime = Read32(p);

}

void RequestChangeGender(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	BYTE NewGender = Read8(p);
	UCHAR UseType = Read8(p);

}

void ResponseChangeGender(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //Gender
	Write8(p, 0); //ReasonLen
	Write8(p, 0); //UseType

	len = p - buf;
	SendToClient(Client, 162, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyItemInvalid(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //InvalidNum
	Write32(p, 0); //InvalidItemID[]

	len = p - buf;
	SendToClient(Client, 570, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyFriendDegree(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //Friend
	Write32(p, 0); //Degree

	len = p - buf;
	SendToClient(Client, 571, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestStartTask(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int TaskID = Read32(p);

}

void ResponseStartTask(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write32(p, 0); //TaskID
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 164, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestUseProp2(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	short PropID = Read16(p);
	Un DstUin = ReadUn(p);
	int[] CurrentPosition[] = Read32(p);
	int PropIndex = Read32(p);
	short NewID = Read16(p);
	char IsClearProp = Read8(p);
	bool DstType = Read8(p);
	int MyUseItemID = Read32(p);
	int DstUseItemID = Read32(p);
	bool IsConvertMode = Read8(p);
	int StoneSkillType = Read32(p);
	UINT LapTime = Read32(p);
	UCHAR DstUinNum = Read8(p);
	UINT[] DstUin[] = Read32(p);
	UCHAR PropUseMode = Read8(p);
	UCHAR QueryUinNum = Read8(p);
	UINT[] QueryUin[] = Read32(p);
	UCHAR CurrentSelfRank = Read8(p);
	UCHAR CurrentTeammateRank = Read8(p);
	UCHAR Position = Read8(p);
	char PropSecType = Read8(p);
	UCHAR PropPosIdx = Read8(p);
	UINT NPCUin = Read32(p);
	UCHAR UsePropProtoMode = Read8(p);
	short SubPropID = Read16(p);
	UCHAR OtherPropPosNum = Read8(p);
	for (size_t i = 0; i < n; i++)
	{ //OtherPropPos
		BYTE* pOtherPropPos = p;
		len = Read16(pOtherPropPos);

		UINT Idx = Read32(pOtherPropPos);
		int[] Postion[] = Read32(pOtherPropPos);

		p += len;
	}

}

void RequestEngage(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT SrcUin = Read32(p);
	UINT Time = Read32(p);
	int EngageType = Read32(p);
	int RingID = Read32(p);
	UINT DstUin = Read32(p);
	char[] NickName[] = ReadString(p);
	short WordLength = Read16(p);

}

void ResponseEngage(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write32(p, 0); //EngageType
	Write32(p, 0); //DstUin
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 166, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyBeEngaged(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //SrcUin
	Write32(p, 0); //DstUin
	Write32(p, 0); //EngageType
	{ //SrcPlayerInfo
		BYTE* pSrcPlayerInfo = p;
		Write16(pSrcPlayerInfo, 0); //len

		Write8(pSrcPlayerInfo, 0); //Gender
		Write8(pSrcPlayerInfo, 0); //Country
		WriteString(pSrcPlayerInfo, 0); //NickName[]

		len = pSrcPlayerInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //WordLength
	Write32(p, 0); //RingId

	len = p - buf;
	SendToClient(Client, 572, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void AckBeEngaged(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	short ResultID = Read16(p);
	UINT SrcUin = Read32(p);
	UINT DstUin = Read32(p);
	int EngageType = Read32(p);
	short WordLength = Read16(p);

}

void NotifyEngageResult(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write32(p, 0); //DstUin
	WriteString(p, 0); //RelNickName[]
	Write32(p, 0); //EngageType
	Write16(p, 0); //WordLength
	Write8(p, 0); //ReasonLen
	Write32(p, 0); //RingId
	Write32(p, 0); //EngageTime
	Write8(p, 0); //EngageFlag

	len = p - buf;
	SendToClient(Client, 573, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestCancelEngage(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT DstUin = Read32(p);
	int EngageType = Read32(p);
	short WordLength = Read16(p);
	int UseItemId = Read32(p);

}

void ResponseCancelEngage(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write32(p, 0); //DstUin
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 167, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyCancelEngage(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //SrcUin
	WriteString(p, 0); //NickName[]
	Write32(p, 0); //DstUin
	Write32(p, 0); //EngageType
	Write16(p, 0); //WordLength

	len = p - buf;
	SendToClient(Client, 574, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyModifyHoneyNickName(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //RelUin
	WriteString(p, 0); //NewNickName[]

	len = p - buf;
	SendToClient(Client, 576, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyDeleteItem(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //Flag
	Write32(p, 0); //DelNum
	Write32(p, 0); //DelItemID[]
	Write16(p, 0); //ItemNum
	for (size_t i = 0; i < n; i++)
	{ //ItemStatus
		BYTE* pItemStatus = p;
		Write16(pItemStatus, 0); //len

		Write32(pItemStatus, 0); //ItemID
		Write8(pItemStatus, 0); //NewStatus

		len = pItemStatus - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 577, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyGetLottery(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //Uin
	Write32(p, 0); //TypeID
	Write16(p, 0); //ItemNum
	for (size_t i = 0; i < n; i++)
	{ //ItemInfo
		BYTE* pItemInfo = p;
		Write16(pItemInfo, 0); //len

		Write32(pItemInfo, 0); //ItemID
		Write32(pItemInfo, 0); //ItemNum
		Write32(pItemInfo, 0); //AvailPeriod
		Write8(pItemInfo, 0); //Status
		WriteUn(pItemInfo, 0); //ObtainTime
		Write32(pItemInfo, 0); //OtherAttribute
		Write16(pItemInfo, 0); //ItemType

		len = pItemInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //ItemNum2
	for (size_t i = 0; i < n; i++)
	{ //ItemContrledInfo
		BYTE* pItemContrledInfo = p;
		Write16(pItemContrledInfo, 0); //len

		Write16(pItemContrledInfo, 0); //ContrledNum
		Write32(pItemContrledInfo, 0); //ContrledItemID[]

		len = pItemContrledInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 578, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetKeyOfBox(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	char Type = Read8(p);
	int ID = Read32(p);

}

void ResponseGetKeyOfBox(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	WriteUn(p, 0); //Uin
	Write8(p, 0); //Type
	Write32(p, 0); //ID
	Write8(p, 0); //OpenNum
	for (size_t i = 0; i < n; i++)
	{ //OpenEntry
		BYTE* pOpenEntry = p;
		Write16(pOpenEntry, 0); //len

		Write32(pOpenEntry, 0); //Num
		for (size_t i = 0; i < n; i++)
		{ //IDNum
			BYTE* pIDNum = pOpenEntry;
			Write16(pIDNum, 0); //len

			Write32(pIDNum, 0); //ID
			Write32(pIDNum, 0); //Num

			len = pIDNum - pOpenEntry;
			Set16(pOpenEntry, (WORD)len);
			pOpenEntry += len;
		}

		len = pOpenEntry - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 189, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetBoxItems(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	int TreasureBoxID = Read32(p);
	UCHAR Contex = Read8(p);

}

void ResponseGetBoxItems(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	WriteUn(p, 0); //Uin
	{ //TreasureBoxToClient
		BYTE* pTreasureBoxToClient = p;
		Write16(pTreasureBoxToClient, 0); //len

		Write32(pTreasureBoxToClient, 0); //BoxID
		Write32(pTreasureBoxToClient, 0); //BoxType
		{ //Key
			BYTE* pKey = pTreasureBoxToClient;
			Write16(pKey, 0); //len

			Write32(pKey, 0); //KeyType
			for (size_t i = 0; i < n; i++)
			{ //KeyEntry
				BYTE* pKeyEntry = pKey;
				Write16(pKeyEntry, 0); //len

				Write32(pKeyEntry, 0); //KeyID
				Write32(pKeyEntry, 0); //Num

				len = pKeyEntry - pKey;
				Set16(pKey, (WORD)len);
				pKey += len;
			}
			Write8(pKey, 0); //IsNotConsume

			len = pKey - pTreasureBoxToClient;
			Set16(pTreasureBoxToClient, (WORD)len);
			pTreasureBoxToClient += len;
		}
		{ //AwardEntry
			BYTE* pAwardEntry = pTreasureBoxToClient;
			Write16(pAwardEntry, 0); //len

			Write32(pAwardEntry, 0); //Exp
			Write32(pAwardEntry, 0); //Money
			Write32(pAwardEntry, 0); //SuperMoney
			Write16(pAwardEntry, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAwardEntry;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAwardEntry;
				Set16(pAwardEntry, (WORD)len);
				pAwardEntry += len;
			}
			Write32(pAwardEntry, 0); //Coupons
			Write32(pAwardEntry, 0); //GuildPoint
			Write32(pAwardEntry, 0); //LuckMoney
			Write8(pAwardEntry, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAwardEntry;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAwardEntry;
				Set16(pAwardEntry, (WORD)len);
				pAwardEntry += len;
			}
			Write32(pAwardEntry, 0); //SpeedCoin

			len = pAwardEntry - pTreasureBoxToClient;
			Set16(pTreasureBoxToClient, (WORD)len);
			pTreasureBoxToClient += len;
		}

		len = pTreasureBoxToClient - p;
		Set16(p, (WORD)len);
		p += len;
	}
	WriteUn(p, 0); //maxSelectNum
	Write8(p, 0); //Contex
	Write32(p, 0); //OpenDate
	Write32(p, 0); //CloseDate
	Write32(p, 0); //OpenTime
	Write32(p, 0); //CloseTime

	len = p - buf;
	SendToClient(Client, 190, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetBoxCfg(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	int TreasureBoxID = Read32(p);
	UCHAR Idx = Read8(p);

}

void ResponseGetBoxCfg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	WriteUn(p, 0); //Uin
	Write32(p, 0); //TreasureBoxID
	Write8(p, 0); //Idx
	{ //BestAward
		BYTE* pBestAward = p;
		Write16(pBestAward, 0); //len

		Write32(pBestAward, 0); //Exp
		Write32(pBestAward, 0); //Money
		Write32(pBestAward, 0); //SuperMoney
		Write16(pBestAward, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pBestAward;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pBestAward;
			Set16(pBestAward, (WORD)len);
			pBestAward += len;
		}
		Write32(pBestAward, 0); //Coupons
		Write32(pBestAward, 0); //GuildPoint
		Write32(pBestAward, 0); //LuckMoney
		Write8(pBestAward, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pBestAward;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pBestAward;
			Set16(pBestAward, (WORD)len);
			pBestAward += len;
		}
		Write32(pBestAward, 0); //SpeedCoin

		len = pBestAward - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //MustAward
		BYTE* pMustAward = p;
		Write16(pMustAward, 0); //len

		Write32(pMustAward, 0); //Exp
		Write32(pMustAward, 0); //Money
		Write32(pMustAward, 0); //SuperMoney
		Write16(pMustAward, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pMustAward;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pMustAward;
			Set16(pMustAward, (WORD)len);
			pMustAward += len;
		}
		Write32(pMustAward, 0); //Coupons
		Write32(pMustAward, 0); //GuildPoint
		Write32(pMustAward, 0); //LuckMoney
		Write8(pMustAward, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pMustAward;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pMustAward;
			Set16(pMustAward, (WORD)len);
			pMustAward += len;
		}
		Write32(pMustAward, 0); //SpeedCoin

		len = pMustAward - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //AwardEntryNum
	for (size_t i = 0; i < n; i++)
	{ //OptionalAward
		BYTE* pOptionalAward = p;
		Write16(pOptionalAward, 0); //len

		Write32(pOptionalAward, 0); //Exp
		Write32(pOptionalAward, 0); //Money
		Write32(pOptionalAward, 0); //SuperMoney
		Write16(pOptionalAward, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pOptionalAward;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pOptionalAward;
			Set16(pOptionalAward, (WORD)len);
			pOptionalAward += len;
		}
		Write32(pOptionalAward, 0); //Coupons
		Write32(pOptionalAward, 0); //GuildPoint
		Write32(pOptionalAward, 0); //LuckMoney
		Write8(pOptionalAward, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pOptionalAward;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pOptionalAward;
			Set16(pOptionalAward, (WORD)len);
			pOptionalAward += len;
		}
		Write32(pOptionalAward, 0); //SpeedCoin

		len = pOptionalAward - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 299, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void ResponseOpenBox(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	WriteUn(p, 0); //Uin
	{ //TreasureBoxToClient
		BYTE* pTreasureBoxToClient = p;
		Write16(pTreasureBoxToClient, 0); //len

		Write32(pTreasureBoxToClient, 0); //BoxID
		Write32(pTreasureBoxToClient, 0); //BoxType
		{ //Key
			BYTE* pKey = pTreasureBoxToClient;
			Write16(pKey, 0); //len

			Write32(pKey, 0); //KeyType
			for (size_t i = 0; i < n; i++)
			{ //KeyEntry
				BYTE* pKeyEntry = pKey;
				Write16(pKeyEntry, 0); //len

				Write32(pKeyEntry, 0); //KeyID
				Write32(pKeyEntry, 0); //Num

				len = pKeyEntry - pKey;
				Set16(pKey, (WORD)len);
				pKey += len;
			}
			Write8(pKey, 0); //IsNotConsume

			len = pKey - pTreasureBoxToClient;
			Set16(pTreasureBoxToClient, (WORD)len);
			pTreasureBoxToClient += len;
		}
		{ //AwardEntry
			BYTE* pAwardEntry = pTreasureBoxToClient;
			Write16(pAwardEntry, 0); //len

			Write32(pAwardEntry, 0); //Exp
			Write32(pAwardEntry, 0); //Money
			Write32(pAwardEntry, 0); //SuperMoney
			Write16(pAwardEntry, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAwardEntry;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAwardEntry;
				Set16(pAwardEntry, (WORD)len);
				pAwardEntry += len;
			}
			Write32(pAwardEntry, 0); //Coupons
			Write32(pAwardEntry, 0); //GuildPoint
			Write32(pAwardEntry, 0); //LuckMoney
			Write8(pAwardEntry, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAwardEntry;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAwardEntry;
				Set16(pAwardEntry, (WORD)len);
				pAwardEntry += len;
			}
			Write32(pAwardEntry, 0); //SpeedCoin

			len = pAwardEntry - pTreasureBoxToClient;
			Set16(pTreasureBoxToClient, (WORD)len);
			pTreasureBoxToClient += len;
		}

		len = pTreasureBoxToClient - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen
	Write32(p, 0); //Reserve
	Write32(p, 0); //MaxLuckVaue
	Write32(p, 0); //LuckValue
	Write32(p, 0); //TotalLuckValue
	Write32(p, 0); //OpenDate
	Write32(p, 0); //CloseDate
	Write32(p, 0); //OpenTime
	Write32(p, 0); //CloseTime

	len = p - buf;
	SendToClient(Client, 168, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestOutDoorEggInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);

}

void ResponseOutDoorEggInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	WriteUn(p, 0); //Uin
	Write8(p, 0); //ReasonLen
	WriteUn(p, 0); //EggNumber
	for (size_t i = 0; i < n; i++)
	{ //EggInfo
		BYTE* pEggInfo = p;
		Write16(pEggInfo, 0); //len

		WriteUn(pEggInfo, 0); //EggPosition
		Write32(pEggInfo, 0); //EggTypeID

		len = pEggInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 169, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestOutDoorSmashEgg(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	{ //EggInfo
		BYTE* pEggInfo = p;
		len = Read16(pEggInfo);

		Un EggPosition = ReadUn(pEggInfo);
		int EggTypeID = Read32(pEggInfo);

		p += len;
	}

}

void ResponseOutDoorSmashEgg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	WriteUn(p, 0); //Uin
	{ //EggInfo
		BYTE* pEggInfo = p;
		Write16(pEggInfo, 0); //len

		WriteUn(pEggInfo, 0); //EggPosition
		Write32(pEggInfo, 0); //EggTypeID

		len = pEggInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //UseItemID
	Write32(p, 0); //UseItemNum
	Write32(p, 0); //AddExperience
	Write32(p, 0); //AddMoney
	Write32(p, 0); //AddSuperMoney
	Write16(p, 0); //ItemNum
	for (size_t i = 0; i < n; i++)
	{ //AddItemInfo
		BYTE* pAddItemInfo = p;
		Write16(pAddItemInfo, 0); //len

		Write32(pAddItemInfo, 0); //ItemID
		Write32(pAddItemInfo, 0); //ItemNum
		Write32(pAddItemInfo, 0); //AvailPeriod
		Write8(pAddItemInfo, 0); //Status
		WriteUn(pAddItemInfo, 0); //ObtainTime
		Write32(pAddItemInfo, 0); //OtherAttribute
		Write16(pAddItemInfo, 0); //ItemType

		len = pAddItemInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen
	Write32(p, 0); //AddCoupons

	len = p - buf;
	SendToClient(Client, 170, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyOutDoorSmashEgg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //Uin
	{ //EggInfo
		BYTE* pEggInfo = p;
		Write16(pEggInfo, 0); //len

		WriteUn(pEggInfo, 0); //EggPosition
		Write32(pEggInfo, 0); //EggTypeID

		len = pEggInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 579, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyOutDoorEggInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //EggNumber
	for (size_t i = 0; i < n; i++)
	{ //EggInfo
		BYTE* pEggInfo = p;
		Write16(pEggInfo, 0); //len

		WriteUn(pEggInfo, 0); //EggPosition
		Write32(pEggInfo, 0); //EggTypeID

		len = pEggInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //Type

	len = p - buf;
	SendToClient(Client, 580, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyBorderGameCondition(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	for (size_t i = 0; i < n; i++)
	{ //Condition
		BYTE* pCondition = p;
		Write16(pCondition, 0); //len

		Write32(pCondition, 0); //BorderGameType
		Write16(pCondition, 0); //NeededMoney
		Write16(pCondition, 0); //NeededLevel
		{ //TimeLimit
			BYTE* pTimeLimit = pCondition;
			Write16(pTimeLimit, 0); //len

			Write32(pTimeLimit, 0); //OpenTime
			Write32(pTimeLimit, 0); //CloseTime

			len = pTimeLimit - pCondition;
			Set16(pCondition, (WORD)len);
			pCondition += len;
		}
		Write32(pCondition, 0); //NeedHonor

		len = pCondition - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //NeedMapNum
	Write32(p, 0); //MapID[]
	Write8(p, 0); //LeftVipFreeTime[]
	for (size_t i = 0; i < n; i++)
	{ //TeamCondition
		BYTE* pTeamCondition = p;
		Write16(pTeamCondition, 0); //len

		Write32(pTeamCondition, 0); //BorderGameType
		Write16(pTeamCondition, 0); //NeededMoney
		Write16(pTeamCondition, 0); //NeededLevel
		Write32(pTeamCondition, 0); //NeedHonor

		len = pTeamCondition - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //SeasonTime
		BYTE* pSeasonTime = p;
		Write16(pSeasonTime, 0); //len

		Write32(pSeasonTime, 0); //OpenTime
		Write32(pSeasonTime, 0); //CloseTime

		len = pSeasonTime - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //TimeNum
	for (size_t i = 0; i < n; i++)
	{ //TimeLimit
		BYTE* pTimeLimit = p;
		Write16(pTimeLimit, 0); //len

		Write32(pTimeLimit, 0); //OpenTime
		Write32(pTimeLimit, 0); //CloseTime

		len = pTimeLimit - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //IsBorderTeamAwardMultiple
	Write32(p, 0); //WaitPrimaryRaceMatchTimeout
	Write32(p, 0); //WaitHighRaceMatchTimeout
	Write32(p, 0); //WaitHigherRaceMatchTimeout
	Write32(p, 0); //WaitPrimaryPropMatchTimeout
	Write32(p, 0); //WaitHighPropMatchTimeout
	Write32(p, 0); //WaitHigherPropMatchTimeout
	Write32(p, 0); //WaitPrimaryRaceTeamMatchTimeout
	Write32(p, 0); //WaitHighRaceTeamMatchTimeout
	Write32(p, 0); //WaitHigherRaceTeamMatchTimeout
	Write16(p, 0); //PropTimeNum
	for (size_t i = 0; i < n; i++)
	{ //PropTimeLimit
		BYTE* pPropTimeLimit = p;
		Write16(pPropTimeLimit, 0); //len

		Write32(pPropTimeLimit, 0); //OpenTime
		Write32(pPropTimeLimit, 0); //CloseTime

		len = pPropTimeLimit - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //AllAreaBorderCfg
		BYTE* pAllAreaBorderCfg = p;
		Write16(pAllAreaBorderCfg, 0); //len

		Write32(pAllAreaBorderCfg, 0); //Open
		{ //AllAreaNormalBorderCfg
			BYTE* pAllAreaNormalBorderCfg = pAllAreaBorderCfg;
			Write16(pAllAreaNormalBorderCfg, 0); //len

			for (size_t i = 0; i < n; i++)
			{ //TypeList
				BYTE* pTypeList = pAllAreaNormalBorderCfg;
				Write16(pTypeList, 0); //len

				Write16(pTypeList, 0); //TimeNum
				for (size_t i = 0; i < n; i++)
				{ //TimeLimit
					BYTE* pTimeLimit = pTypeList;
					Write16(pTimeLimit, 0); //len

					Write32(pTimeLimit, 0); //OpenTime
					Write32(pTimeLimit, 0); //CloseTime

					len = pTimeLimit - pTypeList;
					Set16(pTypeList, (WORD)len);
					pTypeList += len;
				}
				Write8(pTypeList, 0); //IsModeOpen

				len = pTypeList - pAllAreaNormalBorderCfg;
				Set16(pAllAreaNormalBorderCfg, (WORD)len);
				pAllAreaNormalBorderCfg += len;
			}

			len = pAllAreaNormalBorderCfg - pAllAreaBorderCfg;
			Set16(pAllAreaBorderCfg, (WORD)len);
			pAllAreaBorderCfg += len;
		}
		{ //AllAreaTeamBorderCfg
			BYTE* pAllAreaTeamBorderCfg = pAllAreaBorderCfg;
			Write16(pAllAreaTeamBorderCfg, 0); //len

			for (size_t i = 0; i < n; i++)
			{ //TypeList
				BYTE* pTypeList = pAllAreaTeamBorderCfg;
				Write16(pTypeList, 0); //len

				Write16(pTypeList, 0); //TimeNum
				for (size_t i = 0; i < n; i++)
				{ //TimeLimit
					BYTE* pTimeLimit = pTypeList;
					Write16(pTimeLimit, 0); //len

					Write32(pTimeLimit, 0); //OpenTime
					Write32(pTimeLimit, 0); //CloseTime

					len = pTimeLimit - pTypeList;
					Set16(pTypeList, (WORD)len);
					pTypeList += len;
				}
				Write8(pTypeList, 0); //IsModeOpen

				len = pTypeList - pAllAreaTeamBorderCfg;
				Set16(pAllAreaTeamBorderCfg, (WORD)len);
				pAllAreaTeamBorderCfg += len;
			}

			len = pAllAreaTeamBorderCfg - pAllAreaBorderCfg;
			Set16(pAllAreaBorderCfg, (WORD)len);
			pAllAreaBorderCfg += len;
		}

		len = pAllAreaBorderCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	for (size_t i = 0; i < n; i++)
	{ //BorderTimeLimit
		BYTE* pBorderTimeLimit = p;
		Write16(pBorderTimeLimit, 0); //len

		Write16(pBorderTimeLimit, 0); //TimeNum
		for (size_t i = 0; i < n; i++)
		{ //TimeLimit
			BYTE* pTimeLimit = pBorderTimeLimit;
			Write16(pTimeLimit, 0); //len

			Write32(pTimeLimit, 0); //OpenTime
			Write32(pTimeLimit, 0); //CloseTime

			len = pTimeLimit - pBorderTimeLimit;
			Set16(pBorderTimeLimit, (WORD)len);
			pBorderTimeLimit += len;
		}

		len = pBorderTimeLimit - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //MultiHonorInfo
		BYTE* pMultiHonorInfo = p;
		Write16(pMultiHonorInfo, 0); //len

		{ //OpenDateTime
			BYTE* pOpenDateTime = pMultiHonorInfo;
			Write16(pOpenDateTime, 0); //len

			Write32(pOpenDateTime, 0); //OpenDate
			Write32(pOpenDateTime, 0); //OpenTime
			Write32(pOpenDateTime, 0); //CloseDate
			Write32(pOpenDateTime, 0); //CloseTime
			Write32(pOpenDateTime, 0); //Open
			Write32(pOpenDateTime, 0); //Close

			len = pOpenDateTime - pMultiHonorInfo;
			Set16(pMultiHonorInfo, (WORD)len);
			pMultiHonorInfo += len;
		}
		Write8(pMultiHonorInfo, 0); //BeforeOpenLen
		Write8(pMultiHonorInfo, 0); //OpenLen

		len = pMultiHonorInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ForbidCarNum
	Write32(p, 0); //ForbidCar[]

	len = p - buf;
	SendToClient(Client, 544, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestEnterBorderGame(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int BorderGameType = Read32(p);

}

void ResponseEnterBorderGame(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 143, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyMatchFailed(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 545, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestCancelBorderMatch(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseCancelborderMatch(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 147, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyPlayerLeaveBorderGame(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write8(p, 0); //GameType
	Write32(p, 0); //ServerKickReason
	Write8(p, 0); //KeepPlayer

	len = p - buf;
	SendToClient(Client, 550, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyBorderRaceOver(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	for (size_t i = 0; i < n; i++)
	{ //RaceScore
		BYTE* pRaceScore = p;
		Write16(pRaceScore, 0); //len

		Write32(pRaceScore, 0); //Uin
		Write32(pRaceScore, 0); //FinTime
		Write32(pRaceScore, 0); //BorderGameType
		Write32(pRaceScore, 0); //ExpInc
		Write32(pRaceScore, 0); //TotalExp
		Write32(pRaceScore, 0); //SuperMoneyInc
		Write32(pRaceScore, 0); //TotalSuperMoney
		Write32(pRaceScore, 0); //PersonalHonor
		Write32(pRaceScore, 0); //TotalPersonalHonor
		Write32(pRaceScore, 0); //NationalHonor
		Write32(pRaceScore, 0); //TotalNationalHonor
		Write32(pRaceScore, 0); //GuildPointInc
		Write32(pRaceScore, 0); //GuildPointSpecialInc
		Write8(pRaceScore, 0); //TeamID
		Write8(pRaceScore, 0); //AwardNum
		Write32(pRaceScore, 0); //SpecialAward[]
		Write8(pRaceScore, 0); //VipMemberFreeFlag
		Write8(pRaceScore, 0); //IsTeamMatch
		Write32(pRaceScore, 0); //ZhanXunInc
		Write32(pRaceScore, 0); //ZhanXunTotal
		Write32(pRaceScore, 0); //TeamHonourInc
		Write32(pRaceScore, 0); //MedalInc
		Write32(pRaceScore, 0); //SeasonZhanXunTotal
		Write32(pRaceScore, 0); //ReduceReturnRate
		Write32(pRaceScore, 0); //ReduceReturnAvailPeriod
		Write32(pRaceScore, 0); //DetailRecordID
		Write32(pRaceScore, 0); //GuildID
		WriteString(pRaceScore, 0); //GuildName[]
		Write32(pRaceScore, 0); //GMMScoreInc
		Write8(pRaceScore, 0); //HasRankedMatchInfo
		for (size_t i = 0; i < n; i++)
		{ //RankedMatchScore
			BYTE* pRankedMatchScore = pRaceScore;
			Write16(pRankedMatchScore, 0); //len

			{ //RankedMatchLastGradeInfo
				BYTE* pRankedMatchLastGradeInfo = pRankedMatchScore;
				Write16(pRankedMatchLastGradeInfo, 0); //len

				Write32(pRankedMatchLastGradeInfo, 0); //GradeLevel
				Write32(pRankedMatchLastGradeInfo, 0); //ChildLevel
				Write32(pRankedMatchLastGradeInfo, 0); //GradeScore
				Write32(pRankedMatchLastGradeInfo, 0); //MaxGradeScore
				Write32(pRankedMatchLastGradeInfo, 0); //TotalScore

				len = pRankedMatchLastGradeInfo - pRankedMatchScore;
				Set16(pRankedMatchScore, (WORD)len);
				pRankedMatchScore += len;
			}
			{ //RankedMatchGradeInfo
				BYTE* pRankedMatchGradeInfo = pRankedMatchScore;
				Write16(pRankedMatchGradeInfo, 0); //len

				Write32(pRankedMatchGradeInfo, 0); //GradeLevel
				Write32(pRankedMatchGradeInfo, 0); //ChildLevel
				Write32(pRankedMatchGradeInfo, 0); //GradeScore
				Write32(pRankedMatchGradeInfo, 0); //MaxGradeScore
				Write32(pRankedMatchGradeInfo, 0); //TotalScore

				len = pRankedMatchGradeInfo - pRankedMatchScore;
				Set16(pRankedMatchScore, (WORD)len);
				pRankedMatchScore += len;
			}
			{ //RankedMatchPromoInfo
				BYTE* pRankedMatchPromoInfo = pRankedMatchScore;
				Write16(pRankedMatchPromoInfo, 0); //len

				Write8(pRankedMatchPromoInfo, 0); //PromotionMatch
				Write32(pRankedMatchPromoInfo, 0); //PromotionRoundNums
				Write32(pRankedMatchPromoInfo, 0); //PromotionSuccessRoundNums
				Write32(pRankedMatchPromoInfo, 0); //PromotionAlreadySuccessRoundNums
				Write32(pRankedMatchPromoInfo, 0); //PromotionRecordTag
				Write32(pRankedMatchPromoInfo, 0); //CurrentPromotionRoundNums
				Write32(pRankedMatchPromoInfo, 0); //PromoFailedMinusScore
				Write32(pRankedMatchPromoInfo, 0); //PromoSuccAddScore
				Write8(pRankedMatchPromoInfo, 0); //PromoDirectly
				Write8(pRankedMatchPromoInfo, 0); //GradeNoNeedPromo
				Write8(pRankedMatchPromoInfo, 0); //RankedMemoryNoNeedPromo
				Write8(pRankedMatchPromoInfo, 0); //PromotionExtraScore
				Write8(pRankedMatchPromoInfo, 0); //PromtRaceFailedDefendFlag

				len = pRankedMatchPromoInfo - pRankedMatchScore;
				Set16(pRankedMatchScore, (WORD)len);
				pRankedMatchScore += len;
			}
			{ //RankedMatchComputeInfo
				BYTE* pRankedMatchComputeInfo = pRankedMatchScore;
				Write16(pRankedMatchComputeInfo, 0); //len

				Write32(pRankedMatchComputeInfo, 0); //RankAddScore
				Write32(pRankedMatchComputeInfo, 0); //FinishAddScore
				Write32(pRankedMatchComputeInfo, 0); //KillAllAddScore
				Write32(pRankedMatchComputeInfo, 0); //GradeProtectAddScore
				Write32(pRankedMatchComputeInfo, 0); //GradeAddScore
				Write32(pRankedMatchComputeInfo, 0); //ProtectAddScoreGradeLimit
				Write32(pRankedMatchComputeInfo, 0); //DailyExtraAddScore
				Write32(pRankedMatchComputeInfo, 0); //AwardRankCoinNums
				Write32(pRankedMatchComputeInfo, 0); //WeeklyAwardRankCoinNums
				Write32(pRankedMatchComputeInfo, 0); //WeeklyAwardRankCoinLimit
				Write32(pRankedMatchComputeInfo, 0); //AwardRankCoinNumsByRank
				Write32(pRankedMatchComputeInfo, 0); //AwardRankCoinNumsByFinish
				Write32(pRankedMatchComputeInfo, 0); //BanMapExtraAddScore
				Write32(pRankedMatchComputeInfo, 0); //TeamRankAddScore
				Write32(pRankedMatchComputeInfo, 0); //AwardRankCoinNumsByTeamRank
				Write32(pRankedMatchComputeInfo, 0); //AwardRankCoinNumsByTask
				Write8(pRankedMatchComputeInfo, 0); //UseDoubleScoreItem
				Write8(pRankedMatchComputeInfo, 0); //UserNotDecreaseItem
				Write8(pRankedMatchComputeInfo, 0); //FinishSeasonChallengeTaskOrNot
				Write32(pRankedMatchComputeInfo, 0); //FinishedSeasonChallengeTaskIndex
				Write32(pRankedMatchComputeInfo, 0); //SeasonChallengeTaskProtectAddScore
				Write8(pRankedMatchComputeInfo, 0); //NotDecreaseReason
				Write8(pRankedMatchComputeInfo, 0); //HaveSpeedKingInfo
				for (size_t i = 0; i < n; i++)
				{ //RankedMatchSpeedKingInfos
					BYTE* pRankedMatchSpeedKingInfos = pRankedMatchComputeInfo;
					Write16(pRankedMatchSpeedKingInfos, 0); //len

					Write8(pRankedMatchSpeedKingInfos, 0); //WinOrNot
					WriteUn(pRankedMatchSpeedKingInfos, 0); //UiAwardSpeedKingEnergyItemNums
					Write32(pRankedMatchSpeedKingInfos, 0); //WeeklyAwardSpeedKingEnergyItemNums
					Write32(pRankedMatchSpeedKingInfos, 0); //WeeklyAwardSpeedKingEnergyItemLimitNums

					len = pRankedMatchSpeedKingInfos - pRankedMatchComputeInfo;
					Set16(pRankedMatchComputeInfo, (WORD)len);
					pRankedMatchComputeInfo += len;
				}
				Write8(pRankedMatchComputeInfo, 0); //HaveExtraComputeInfo
				for (size_t i = 0; i < n; i++)
				{ //RankedMatchExtracComputeInfos
					BYTE* pRankedMatchExtracComputeInfos = pRankedMatchComputeInfo;
					Write16(pRankedMatchExtracComputeInfos, 0); //len

					Write32(pRankedMatchExtracComputeInfos, 0); //ExtraComputeType
					Write32(pRankedMatchExtracComputeInfos, 0); //AwardItemNums
					Write32(pRankedMatchExtracComputeInfos, 0); //WeekylyAwardItemNums
					Write32(pRankedMatchExtracComputeInfos, 0); //WeeklyAwardItemLimitNums
					Write8(pRankedMatchExtracComputeInfos, 0); //HaveGameLogicTask
					for (size_t i = 0; i < n; i++)
					{ //RakedMatchGamelogicTaskInfo
						BYTE* pRakedMatchGamelogicTaskInfo = pRankedMatchExtracComputeInfos;
						Write16(pRakedMatchGamelogicTaskInfo, 0); //len

						Write32(pRakedMatchGamelogicTaskInfo, 0); //GameLogicTaskType
						Write32(pRakedMatchGamelogicTaskInfo, 0); //TaskFinishCondValue
						Write8(pRakedMatchGamelogicTaskInfo, 0); //JudgeRule
						Write32(pRakedMatchGamelogicTaskInfo, 0); //TaskAddGradeScore
						Write8(pRakedMatchGamelogicTaskInfo, 0); //GradeScoreRangeNum
						Write32(pRakedMatchGamelogicTaskInfo, 0); //GradeScoreRange[]
						Write8(pRakedMatchGamelogicTaskInfo, 0); //TaskFinishCondValueNum
						Write32(pRakedMatchGamelogicTaskInfo, 0); //TaskFinishCondValueRange[]
						Write8(pRakedMatchGamelogicTaskInfo, 0); //TaskAddGradeScoreNum
						Write32(pRakedMatchGamelogicTaskInfo, 0); //TaskAddGradeScoreRange[]
						Write8(pRakedMatchGamelogicTaskInfo, 0); //FailedAddGradeScoreNum
						Write32(pRakedMatchGamelogicTaskInfo, 0); //FailedAddGradeScoreRange[]
						Write8(pRakedMatchGamelogicTaskInfo, 0); //FinishTask
						Write32(pRakedMatchGamelogicTaskInfo, 0); //ExtraFinishTaskAddScore

						len = pRakedMatchGamelogicTaskInfo - pRankedMatchExtracComputeInfos;
						Set16(pRankedMatchExtracComputeInfos, (WORD)len);
						pRankedMatchExtracComputeInfos += len;
					}
					Write8(pRankedMatchExtracComputeInfos, 0); //Win
					Write8(pRankedMatchExtracComputeInfos, 0); //NormalPlayerOrNot
					Write8(pRankedMatchExtracComputeInfos, 0); //LeadRolePlayerNums

					len = pRankedMatchExtracComputeInfos - pRankedMatchComputeInfo;
					Set16(pRankedMatchComputeInfo, (WORD)len);
					pRankedMatchComputeInfo += len;
				}
				Write32(pRankedMatchComputeInfo, 0); //SeasonNewMapAddScore
				Write8(pRankedMatchComputeInfo, 0); //SeasonChallengeBaseScore
				Write8(pRankedMatchComputeInfo, 0); //SeasonChallengeContiWinExtrScore
				Write8(pRankedMatchComputeInfo, 0); //SeasonChallengeRegretDefeatScore
				Write8(pRankedMatchComputeInfo, 0); //SeasonChallengeRespectableOpponentScore
				Write8(pRankedMatchComputeInfo, 0); //SpeedGodChallengeAddScore
				Write8(pRankedMatchComputeInfo, 0); //SpeedGodChallengeAddCoin
				Write8(pRankedMatchComputeInfo, 0); //SpeedFlashAddFactoryCoin
				Write8(pRankedMatchComputeInfo, 0); //PinnacleBattleAddScore
				Write8(pRankedMatchComputeInfo, 0); //PromotionExtraScore
				Write32(pRankedMatchComputeInfo, 0); //SavedExtraScore
				Write32(pRankedMatchComputeInfo, 0); //DailyExtraTaskID
				Write8(pRankedMatchComputeInfo, 0); //SuitActiveAddScore
				Write8(pRankedMatchComputeInfo, 0); //SpeedGodChallengeType
				Write8(pRankedMatchComputeInfo, 0); //SuitActiveEffectID

				len = pRankedMatchComputeInfo - pRankedMatchScore;
				Set16(pRankedMatchScore, (WORD)len);
				pRankedMatchScore += len;
			}
			Write8(pRankedMatchScore, 0); //HavePromotionExtraScoreInfo
			for (size_t i = 0; i < n; i++)
			{ //PromotionExtraScoreInfo
				BYTE* pPromotionExtraScoreInfo = pRankedMatchScore;
				Write16(pPromotionExtraScoreInfo, 0); //len

				Write8(pPromotionExtraScoreInfo, 0); //PromotionMatch
				Write32(pPromotionExtraScoreInfo, 0); //PromotionRoundNums
				Write32(pPromotionExtraScoreInfo, 0); //PromotionSuccessRoundNums
				Write32(pPromotionExtraScoreInfo, 0); //PromotionAlreadySuccessRoundNums
				Write32(pPromotionExtraScoreInfo, 0); //PromotionRecordTag
				Write32(pPromotionExtraScoreInfo, 0); //CurrentPromotionRoundNums
				Write32(pPromotionExtraScoreInfo, 0); //PromoFailedMinusScore
				Write32(pPromotionExtraScoreInfo, 0); //PromoSuccAddScore
				Write8(pPromotionExtraScoreInfo, 0); //PromoDirectly
				Write8(pPromotionExtraScoreInfo, 0); //GradeNoNeedPromo
				Write8(pPromotionExtraScoreInfo, 0); //RankedMemoryNoNeedPromo
				Write8(pPromotionExtraScoreInfo, 0); //PromotionExtraScore
				Write8(pPromotionExtraScoreInfo, 0); //PromtRaceFailedDefendFlag

				len = pPromotionExtraScoreInfo - pRankedMatchScore;
				Set16(pRankedMatchScore, (WORD)len);
				pRankedMatchScore += len;
			}

			len = pRankedMatchScore - pRaceScore;
			Set16(pRaceScore, (WORD)len);
			pRaceScore += len;
		}
		Write32(pRaceScore, 0); //MoneyInc
		Write32(pRaceScore, 0); //TotalMoney
		Write32(pRaceScore, 0); //DistanceToEnd
		Write16(pRaceScore, 0); //Score
		Write8(pRaceScore, 0); //ParaNum
		Write32(pRaceScore, 0); //ParaList[]
		Write8(pRaceScore, 0); //HasRankedMatchArenaInfo
		for (size_t i = 0; i < n; i++)
		{ //RankedMatchArenaScore
			BYTE* pRankedMatchArenaScore = pRaceScore;
			Write16(pRankedMatchArenaScore, 0); //len

			Write8(pRankedMatchArenaScore, 0); //Win
			Write8(pRankedMatchArenaScore, 0); //Rank
			Write8(pRankedMatchArenaScore, 0); //TaskScore
			Write32(pRankedMatchArenaScore, 0); //AwardRankCoinNums
			{ //RankedMatchLastGradeInfo
				BYTE* pRankedMatchLastGradeInfo = pRankedMatchArenaScore;
				Write16(pRankedMatchLastGradeInfo, 0); //len

				Write32(pRankedMatchLastGradeInfo, 0); //GradeLevel
				Write32(pRankedMatchLastGradeInfo, 0); //ChildLevel
				Write32(pRankedMatchLastGradeInfo, 0); //GradeScore
				Write32(pRankedMatchLastGradeInfo, 0); //MaxGradeScore
				Write32(pRankedMatchLastGradeInfo, 0); //TotalScore

				len = pRankedMatchLastGradeInfo - pRankedMatchArenaScore;
				Set16(pRankedMatchArenaScore, (WORD)len);
				pRankedMatchArenaScore += len;
			}
			{ //RankedMatchGradeInfo
				BYTE* pRankedMatchGradeInfo = pRankedMatchArenaScore;
				Write16(pRankedMatchGradeInfo, 0); //len

				Write32(pRankedMatchGradeInfo, 0); //GradeLevel
				Write32(pRankedMatchGradeInfo, 0); //ChildLevel
				Write32(pRankedMatchGradeInfo, 0); //GradeScore
				Write32(pRankedMatchGradeInfo, 0); //MaxGradeScore
				Write32(pRankedMatchGradeInfo, 0); //TotalScore

				len = pRankedMatchGradeInfo - pRankedMatchArenaScore;
				Set16(pRankedMatchArenaScore, (WORD)len);
				pRankedMatchArenaScore += len;
			}
			{ //RankedMatchPromoInfo
				BYTE* pRankedMatchPromoInfo = pRankedMatchArenaScore;
				Write16(pRankedMatchPromoInfo, 0); //len

				Write8(pRankedMatchPromoInfo, 0); //PromotionMatch
				Write32(pRankedMatchPromoInfo, 0); //PromotionRoundNums
				Write32(pRankedMatchPromoInfo, 0); //PromotionSuccessRoundNums
				Write32(pRankedMatchPromoInfo, 0); //PromotionAlreadySuccessRoundNums
				Write32(pRankedMatchPromoInfo, 0); //PromotionRecordTag
				Write32(pRankedMatchPromoInfo, 0); //CurrentPromotionRoundNums
				Write32(pRankedMatchPromoInfo, 0); //PromoFailedMinusScore
				Write32(pRankedMatchPromoInfo, 0); //PromoSuccAddScore
				Write8(pRankedMatchPromoInfo, 0); //PromoDirectly
				Write8(pRankedMatchPromoInfo, 0); //GradeNoNeedPromo
				Write8(pRankedMatchPromoInfo, 0); //RankedMemoryNoNeedPromo
				Write8(pRankedMatchPromoInfo, 0); //PromotionExtraScore
				Write8(pRankedMatchPromoInfo, 0); //PromtRaceFailedDefendFlag

				len = pRankedMatchPromoInfo - pRankedMatchArenaScore;
				Set16(pRankedMatchArenaScore, (WORD)len);
				pRankedMatchArenaScore += len;
			}
			Write8(pRankedMatchArenaScore, 0); //WinNum
			Write16(pRankedMatchArenaScore, 0); //CurrentScore
			Write8(pRankedMatchArenaScore, 0); //FinishScore
			Write16(pRankedMatchArenaScore, 0); //AwardRankScore
			Write8(pRankedMatchArenaScore, 0); //AwardRankCoinNumsByRank
			Write8(pRankedMatchArenaScore, 0); //AwardRankCoinNumsByFinish
			Write32(pRankedMatchArenaScore, 0); //WeeklyAwardRankCoinNums
			Write32(pRankedMatchArenaScore, 0); //WeeklyAwardRankCoinLimit
			Write32(pRankedMatchArenaScore, 0); //AwardRankCoinNumsByTask

			len = pRankedMatchArenaScore - pRaceScore;
			Set16(pRaceScore, (WORD)len);
			pRaceScore += len;
		}
		Write8(pRaceScore, 0); //ProfessionLicenseAwardNum
		for (size_t i = 0; i < n; i++)
		{ //ProfessionLicenseAward
			BYTE* pProfessionLicenseAward = pRaceScore;
			Write16(pProfessionLicenseAward, 0); //len

			Write32(pProfessionLicenseAward, 0); //PointInc
			Write32(pProfessionLicenseAward, 0); //PointLevelCur
			Write32(pProfessionLicenseAward, 0); //PointLevelMax
			Write16(pProfessionLicenseAward, 0); //IncResultID
			Write8(pProfessionLicenseAward, 0); //ShowQiPao
			Write32(pProfessionLicenseAward, 0); //PointWeekTotal
			Write32(pProfessionLicenseAward, 0); //PointWeekCur
			{ //ProfessionLicenseInfo
				BYTE* pProfessionLicenseInfo = pProfessionLicenseAward;
				Write16(pProfessionLicenseInfo, 0); //len

				Write8(pProfessionLicenseInfo, 0); //BigLevel
				Write8(pProfessionLicenseInfo, 0); //SmallLevel

				len = pProfessionLicenseInfo - pProfessionLicenseAward;
				Set16(pProfessionLicenseAward, (WORD)len);
				pProfessionLicenseAward += len;
			}
			Write8(pProfessionLicenseAward, 0); //SwitchShowExtraAddPoint
			Write16(pProfessionLicenseAward, 0); //BeginOffsetSeconds

			len = pProfessionLicenseAward - pRaceScore;
			Set16(pRaceScore, (WORD)len);
			pRaceScore += len;
		}
		Write8(pRaceScore, 0); //HaveRankedMatchSpeedKingInfo
		for (size_t i = 0; i < n; i++)
		{ //RankedMatchSpeedKingScoreInfo
			BYTE* pRankedMatchSpeedKingScoreInfo = pRaceScore;
			Write16(pRankedMatchSpeedKingScoreInfo, 0); //len

			Write32(pRankedMatchSpeedKingScoreInfo, 0); //AwardSpeedKingEnergyNums
			Write8(pRankedMatchSpeedKingScoreInfo, 0); //Win

			len = pRankedMatchSpeedKingScoreInfo - pRaceScore;
			Set16(pRaceScore, (WORD)len);
			pRaceScore += len;
		}
		{ //RaceResult
			BYTE* pRaceResult = pRaceScore;
			Write16(pRaceResult, 0); //len

			Write8(pRaceResult, 0); //PLExpPowerValid
			Write8(pRaceResult, 0); //PLHonorPowerValid
			Write8(pRaceResult, 0); //ExpMultiNum
			Write8(pRaceResult, 0); //HonorMultiNum

			len = pRaceResult - pRaceScore;
			Set16(pRaceScore, (WORD)len);
			pRaceScore += len;
		}
		Write8(pRaceScore, 0); //HaveRankedMatchExtraInfo
		for (size_t i = 0; i < n; i++)
		{ //RankedMatchExtraScoreInfo
			BYTE* pRankedMatchExtraScoreInfo = pRaceScore;
			Write16(pRankedMatchExtraScoreInfo, 0); //len

			Write32(pRankedMatchExtraScoreInfo, 0); //AwardItemNums
			Write8(pRankedMatchExtraScoreInfo, 0); //Win

			len = pRankedMatchExtraScoreInfo - pRaceScore;
			Set16(pRaceScore, (WORD)len);
			pRaceScore += len;
		}
		Write16(pRaceScore, 0); //Status
		Write8(pRaceScore, 0); //HasAward
		for (size_t i = 0; i < n; i++)
		{ //Award
			BYTE* pAward = pRaceScore;
			Write16(pAward, 0); //len

			Write32(pAward, 0); //Exp
			Write32(pAward, 0); //Money
			Write32(pAward, 0); //SuperMoney
			Write16(pAward, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAward;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAward;
				Set16(pAward, (WORD)len);
				pAward += len;
			}
			Write32(pAward, 0); //Coupons
			Write32(pAward, 0); //GuildPoint
			Write32(pAward, 0); //LuckMoney
			Write8(pAward, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAward;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAward;
				Set16(pAward, (WORD)len);
				pAward += len;
			}
			Write32(pAward, 0); //SpeedCoin

			len = pAward - pRaceScore;
			Set16(pRaceScore, (WORD)len);
			pRaceScore += len;
		}
		Write8(pRaceScore, 0); //HasYuLeJiaNianHuaComputeData
		for (size_t i = 0; i < n; i++)
		{ //YuLeJiaNianHuaComputeData
			BYTE* pYuLeJiaNianHuaComputeData = pRaceScore;
			Write16(pYuLeJiaNianHuaComputeData, 0); //len

			Write32(pYuLeJiaNianHuaComputeData, 0); //AwardScore
			Write8(pYuLeJiaNianHuaComputeData, 0); //Recommend
			Write8(pYuLeJiaNianHuaComputeData, 0); //ScoreDouble
			Write8(pYuLeJiaNianHuaComputeData, 0); //GuaJi

			len = pYuLeJiaNianHuaComputeData - pRaceScore;
			Set16(pRaceScore, (WORD)len);
			pRaceScore += len;
		}

		len = pRaceScore - p;
		Set16(p, (WORD)len);
		p += len;
	}
	WriteUn(p, 0); //AwardTime
	Write8(p, 0); //KickOffPlayerNumber
	for (size_t i = 0; i < n; i++)
	{ //KickOffPlayer
		BYTE* pKickOffPlayer = p;
		Write16(pKickOffPlayer, 0); //len

		Write32(pKickOffPlayer, 0); //Uin
		WriteString(pKickOffPlayer, 0); //NickName[]
		Write8(pKickOffPlayer, 0); //Gender
		Write8(pKickOffPlayer, 0); //TeamID
		Write8(pKickOffPlayer, 0); //Country

		len = pKickOffPlayer - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //BorderRaceType
	WriteUn(p, 0); //hasGameFrameInfo
	for (size_t i = 0; i < n; i++)
	{ //GameFrameInfo
		BYTE* pGameFrameInfo = p;
		Write16(pGameFrameInfo, 0); //len

		Write32(pGameFrameInfo, 0); //Uin
		Write32(pGameFrameInfo, 0); //MapID
		Write16(pGameFrameInfo, 0); //FrameNum
		for (size_t i = 0; i < n; i++)
		{ //FrameInfo
			BYTE* pFrameInfo = pGameFrameInfo;
			Write16(pFrameInfo, 0); //len

			Write16(pFrameInfo, 0); //CheckPointID
			Write32(pFrameInfo, 0); //Num
			for (size_t i = 0; i < n; i++)
			{ //FrameList
				BYTE* pFrameList = pFrameInfo;
				Write16(pFrameList, 0); //len

				WriteUn(pFrameList, 0); //TimeElaps
				WriteUn(pFrameList, 0); //fInPosX[]
				WriteUn(pFrameList, 0); //fInPosY[]
				WriteUn(pFrameList, 0); //fInPosZ[]
				WriteUn(pFrameList, 0); //fStepX[]
				WriteUn(pFrameList, 0); //fStepY[]
				WriteUn(pFrameList, 0); //fStepZ[]
				WriteUn(pFrameList, 0); //fCarMat[]
				WriteUn(pFrameList, 0); //fOutPosX[]
				WriteUn(pFrameList, 0); //fOutPosY[]
				WriteUn(pFrameList, 0); //fOutPosZ[]
				WriteUn(pFrameList, 0); //fAccTime[]
				WriteUn(pFrameList, 0); //fFrameTime[]
				Write8(pFrameList, 0); //SetPos
				Write8(pFrameList, 0); //Collision

				len = pFrameList - pFrameInfo;
				Set16(pFrameInfo, (WORD)len);
				pFrameInfo += len;
			}

			len = pFrameInfo - pGameFrameInfo;
			Set16(pGameFrameInfo, (WORD)len);
			pGameFrameInfo += len;
		}

		len = pGameFrameInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //TeamNum
	for (size_t i = 0; i < n; i++)
	{ //TeamScore
		BYTE* pTeamScore = p;
		Write16(pTeamScore, 0); //len

		Write8(pTeamScore, 0); //TeamID
		Write32(pTeamScore, 0); //TeamScore
		Write8(pTeamScore, 0); //TeamMinRank
		Write8(pTeamScore, 0); //CooperNum
		Write8(pTeamScore, 0); //IncCooper
		Write8(pTeamScore, 0); //CurCooper

		len = pTeamScore - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 542, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyHero(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //CountryID
	WriteString(p, 0); //NickName[]
	Write32(p, 0); //SuperMoney

	len = p - buf;
	SendToClient(Client, 543, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestCheatingReport(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT DstUin = Read32(p);

}

void RequestGetNationHonorList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	BYTE CountryID = Read8(p);

}

void ResponseGetNationHonorList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	{ //NationHonorList
		BYTE* pNationHonorList = p;
		Write16(pNationHonorList, 0); //len

		Write16(pNationHonorList, 0); //YesterdayNum
		for (size_t i = 0; i < n; i++)
		{ //YesterdayNationHonor
			BYTE* pYesterdayNationHonor = pNationHonorList;
			Write16(pYesterdayNationHonor, 0); //len

			Write32(pYesterdayNationHonor, 0); //Uin
			WriteString(pYesterdayNationHonor, 0); //NickName[]
			Write32(pYesterdayNationHonor, 0); //PersonalHonor
			WriteUn(pYesterdayNationHonor, 0); //Identity

			len = pYesterdayNationHonor - pNationHonorList;
			Set16(pNationHonorList, (WORD)len);
			pNationHonorList += len;
		}
		Write16(pNationHonorList, 0); //TodayNum
		for (size_t i = 0; i < n; i++)
		{ //TodayNationHonor
			BYTE* pTodayNationHonor = pNationHonorList;
			Write16(pTodayNationHonor, 0); //len

			Write32(pTodayNationHonor, 0); //Uin
			WriteString(pTodayNationHonor, 0); //NickName[]
			Write32(pTodayNationHonor, 0); //PersonalHonor
			WriteUn(pTodayNationHonor, 0); //Identity

			len = pTodayNationHonor - pNationHonorList;
			Set16(pNationHonorList, (WORD)len);
			pNationHonorList += len;
		}
		Write16(pNationHonorList, 0); //TotalNum
		for (size_t i = 0; i < n; i++)
		{ //TotalNationHonor
			BYTE* pTotalNationHonor = pNationHonorList;
			Write16(pTotalNationHonor, 0); //len

			Write32(pTotalNationHonor, 0); //Uin
			WriteString(pTotalNationHonor, 0); //NickName[]
			Write32(pTotalNationHonor, 0); //PersonalHonor
			WriteUn(pTotalNationHonor, 0); //Identity

			len = pTotalNationHonor - pNationHonorList;
			Set16(pNationHonorList, (WORD)len);
			pNationHonorList += len;
		}

		len = pNationHonorList - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 144, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyBorderPlayerInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //BaseMode
	Write32(p, 0); //SubMode
	Write8(p, 0); //PlayerCount
	for (size_t i = 0; i < n; i++)
	{ //PlayerRoomVisibleInfo
		BYTE* pPlayerRoomVisibleInfo = p;
		Write16(pPlayerRoomVisibleInfo, 0); //len

		WriteUn(pPlayerRoomVisibleInfo, 0); //Uin
		WriteUn(pPlayerRoomVisibleInfo, 0); //Identity
		Write8(pPlayerRoomVisibleInfo, 0); //SeatID
		Write8(pPlayerRoomVisibleInfo, 0); //TeamID
		Write16(pPlayerRoomVisibleInfo, 0); //PlayerID
		Write8(pPlayerRoomVisibleInfo, 0); //Status
		{ //PlayerDBBaseInfo
			BYTE* pPlayerDBBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerDBBaseInfo, 0); //len

			WriteString(pPlayerDBBaseInfo, 0); //NickName[]
			Write8(pPlayerDBBaseInfo, 0); //Gender
			Write8(pPlayerDBBaseInfo, 0); //Country
			Write32(pPlayerDBBaseInfo, 0); //License
			WriteUn(pPlayerDBBaseInfo, 0); //Experience
			Write32(pPlayerDBBaseInfo, 0); //SuperMoney
			Write32(pPlayerDBBaseInfo, 0); //Money
			WriteUn(pPlayerDBBaseInfo, 0); //WinNum
			Write32(pPlayerDBBaseInfo, 0); //SecondNum
			Write32(pPlayerDBBaseInfo, 0); //ThirdNum
			WriteUn(pPlayerDBBaseInfo, 0); //TotalNum
			Write32(pPlayerDBBaseInfo, 0); //CurHonor
			Write32(pPlayerDBBaseInfo, 0); //TotalHonor
			Write32(pPlayerDBBaseInfo, 0); //TodayHonor
			Write32(pPlayerDBBaseInfo, 0); //RelaxTime
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationBefore
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationCur
			Write32(pPlayerDBBaseInfo, 0); //Charm
			Write32(pPlayerDBBaseInfo, 0); //DurationGame
			Write32(pPlayerDBBaseInfo, 0); //DanceExp
			Write32(pPlayerDBBaseInfo, 0); //Coupons
			Write32(pPlayerDBBaseInfo, 0); //Admiration
			Write32(pPlayerDBBaseInfo, 0); //LuckMoney
			Write32(pPlayerDBBaseInfo, 0); //TeamWorkExp
			Write32(pPlayerDBBaseInfo, 0); //AchievePoint
			Write32(pPlayerDBBaseInfo, 0); //RegTime
			WriteString(pPlayerDBBaseInfo, 0); //Signature[]
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchPoint
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchNum
			Write16(pPlayerDBBaseInfo, 0); //LuckyMatchFirstNum
			Write8(pPlayerDBBaseInfo, 0); //LuckyMatchBestRand
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchWinNum
			Write32(pPlayerDBBaseInfo, 0); //FizzPointTotal
			Write16(pPlayerDBBaseInfo, 0); //FizzPointDaily
			Write16(pPlayerDBBaseInfo, 0); //FizzPointWeekly
			Write16(pPlayerDBBaseInfo, 0); //FizzPointLastWeek
			Write8(pPlayerDBBaseInfo, 0); //FizzLotteryStatus
			Write32(pPlayerDBBaseInfo, 0); //FizzLastUpdateTime
			Write32(pPlayerDBBaseInfo, 0); //SNSLocaleCode
			Write32(pPlayerDBBaseInfo, 0); //AuctionRightUnlockTime
			Write8(pPlayerDBBaseInfo, 0); //ReserveFlag
			Write32(pPlayerDBBaseInfo, 0); //CurConsumeScore
			Write32(pPlayerDBBaseInfo, 0); //HistoryConsumeScore
			Write8(pPlayerDBBaseInfo, 0); //CrashModeSponsorID
			Write32(pPlayerDBBaseInfo, 0); //Popularity
			Write32(pPlayerDBBaseInfo, 0); //LadderMatchAchievePoint
			Write32(pPlayerDBBaseInfo, 0); //Cash
			Write32(pPlayerDBBaseInfo, 0); //PlayerGPMIdentity
			Write32(pPlayerDBBaseInfo, 0); //PointTotalScore
			WriteUn(pPlayerDBBaseInfo, 0); //totalMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //lastMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalSeasonId
			WriteUn(pPlayerDBBaseInfo, 0); //lastClearMapMedalTime
			WriteUn(pPlayerDBBaseInfo, 0); //max2048Score
			WriteUn(pPlayerDBBaseInfo, 0); //curPlay2048LeftNum
			Write32(pPlayerDBBaseInfo, 0); //CheerValue
			Write16(pPlayerDBBaseInfo, 0); //SeasonID
			Write32(pPlayerDBBaseInfo, 0); //LastCheerValue
			Write32(pPlayerDBBaseInfo, 0); //SpeedBean
			Write32(pPlayerDBBaseInfo, 0); //SpeedCoin

			len = pPlayerDBBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //PlayerGuildInfo
			BYTE* pPlayerGuildInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerGuildInfo, 0); //len

			WriteString(pPlayerGuildInfo, 0); //GuildName[]
			Write16(pPlayerGuildInfo, 0); //Duty
			Write32(pPlayerGuildInfo, 0); //GuildID
			Write32(pPlayerGuildInfo, 0); //Right
			Write32(pPlayerGuildInfo, 0); //Medal
			Write32(pPlayerGuildInfo, 0); //Contribute
			WriteString(pPlayerGuildInfo, 0); //DutyTitle[]

			len = pPlayerGuildInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write16(pPlayerRoomVisibleInfo, 0); //EquipedItemNum
		for (size_t i = 0; i < n; i++)
		{ //PlayerItemInfo
			BYTE* pPlayerItemInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerItemInfo, 0); //len

			Write32(pPlayerItemInfo, 0); //ItemID
			Write32(pPlayerItemInfo, 0); //ItemNum
			Write32(pPlayerItemInfo, 0); //AvailPeriod
			Write8(pPlayerItemInfo, 0); //Status
			WriteUn(pPlayerItemInfo, 0); //ObtainTime
			Write32(pPlayerItemInfo, 0); //OtherAttribute
			Write16(pPlayerItemInfo, 0); //ItemType

			len = pPlayerItemInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write16(pPlayerRoomVisibleInfo, 0); //PetNum
		for (size_t i = 0; i < n; i++)
		{ //PetInfo
			BYTE* pPetInfo = pPlayerRoomVisibleInfo;
			Write16(pPetInfo, 0); //len

			Write32(pPetInfo, 0); //Uin
			Write32(pPetInfo, 0); //PetId
			WriteString(pPetInfo, 0); //PetName[]
			Write8(pPetInfo, 0); //IsProper
			Write16(pPetInfo, 0); //Level
			Write8(pPetInfo, 0); //Status
			Write16(pPetInfo, 0); //PetSkillNum
			for (size_t i = 0; i < n; i++)
			{ //PetSkillList
				BYTE* pPetSkillList = pPetInfo;
				Write16(pPetSkillList, 0); //len

				Write16(pPetSkillList, 0); //SkillID
				Write8(pPetSkillList, 0); //Status
				Write8(pPetSkillList, 0); //Active
				Write32(pPetSkillList, 0); //Value

				len = pPetSkillList - pPetInfo;
				Set16(pPetInfo, (WORD)len);
				pPetInfo += len;
			}
			Write32(pPetInfo, 0); //StrengLevel
			Write8(pPetInfo, 0); //TopStatus
			{ //CommonInfo
				BYTE* pCommonInfo = pPetInfo;
				Write16(pCommonInfo, 0); //len

				Write32(pCommonInfo, 0); //HuanHuaLevel
				Write8(pCommonInfo, 0); //CanHuanHua

				len = pCommonInfo - pPetInfo;
				Set16(pPetInfo, (WORD)len);
				pPetInfo += len;
			}
			Write16(pPetInfo, 0); //PKStar
			Write32(pPetInfo, 0); //PetSkinID

			len = pPetInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //PlayerGuildMatchInfo
			BYTE* pPlayerGuildMatchInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerGuildMatchInfo, 0); //len

			Write32(pPlayerGuildMatchInfo, 0); //SelfPoint
			Write32(pPlayerGuildMatchInfo, 0); //WinNum
			Write32(pPlayerGuildMatchInfo, 0); //TotalNum

			len = pPlayerGuildMatchInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //IsInTopList
		Write8(pPlayerRoomVisibleInfo, 0); //LoverRaceOrPro
		Write8(pPlayerRoomVisibleInfo, 0); //TmpEffectNum
		Write32(pPlayerRoomVisibleInfo, 0); //TmpEffectItems[]
		Write8(pPlayerRoomVisibleInfo, 0); //OBState
		Write8(pPlayerRoomVisibleInfo, 0); //DebutOrX5
		Write8(pPlayerRoomVisibleInfo, 0); //RandKeyFlag
		WriteUn(pPlayerRoomVisibleInfo, 0); //VipFlag
		Write8(pPlayerRoomVisibleInfo, 0); //HaveAppellation
		for (size_t i = 0; i < n; i++)
		{ //CurAppellation
			BYTE* pCurAppellation = pPlayerRoomVisibleInfo;
			Write16(pCurAppellation, 0); //len

			Write8(pCurAppellation, 0); //Type
			Write8(pCurAppellation, 0); //Level
			Write8(pCurAppellation, 0); //Status
			Write8(pCurAppellation, 0); //Difficulty
			Write32(pCurAppellation, 0); //MapId
			Write32(pCurAppellation, 0); //Value

			len = pCurAppellation - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //NobleInfo
			BYTE* pNobleInfo = pPlayerRoomVisibleInfo;
			Write16(pNobleInfo, 0); //len

			Write32(pNobleInfo, 0); //NobleID
			Write8(pNobleInfo, 0); //NobleLevel
			Write32(pNobleInfo, 0); //NoblePoint
			Write32(pNobleInfo, 0); //NobleLeftDays

			len = pNobleInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasCarryWizard
		for (size_t i = 0; i < n; i++)
		{ //CarryWizardInfo
			BYTE* pCarryWizardInfo = pPlayerRoomVisibleInfo;
			Write16(pCarryWizardInfo, 0); //len

			Write16(pCarryWizardInfo, 0); //WizardID
			WriteString(pCarryWizardInfo, 0); //NickName[]
			Write16(pCarryWizardInfo, 0); //WizardType
			Write8(pCarryWizardInfo, 0); //Order
			Write8(pCarryWizardInfo, 0); //EvolutionBranch
			Write8(pCarryWizardInfo, 0); //IsHuanHua

			len = pCarryWizardInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //GuildVipBaseInfo
			BYTE* pGuildVipBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pGuildVipBaseInfo, 0); //len

			Write8(pGuildVipBaseInfo, 0); //GuildVipLevel
			Write32(pGuildVipBaseInfo, 0); //GuildVipPoint

			len = pGuildVipBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write32(pPlayerRoomVisibleInfo, 0); //ExFlag
		Write8(pPlayerRoomVisibleInfo, 0); //HaveLDMBaseInfo
		for (size_t i = 0; i < n; i++)
		{ //PlayerLDMBaseInfo
			BYTE* pPlayerLDMBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerLDMBaseInfo, 0); //len

			Write8(pPlayerLDMBaseInfo, 0); //Grade
			Write32(pPlayerLDMBaseInfo, 0); //Score
			Write32(pPlayerLDMBaseInfo, 0); //MaxScore
			Write32(pPlayerLDMBaseInfo, 0); //MaxGrade

			len = pPlayerLDMBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasWl
		for (size_t i = 0; i < n; i++)
		{ //PlayerWlVisibleInfo
			BYTE* pPlayerWlVisibleInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerWlVisibleInfo, 0); //len

			Write32(pPlayerWlVisibleInfo, 0); //WonderLandID
			WriteString(pPlayerWlVisibleInfo, 0); //WonderLandName[]
			Write16(pPlayerWlVisibleInfo, 0); //WonderLandDuty
			Write8(pPlayerWlVisibleInfo, 0); //SubType
			Write8(pPlayerWlVisibleInfo, 0); //GuildGrade

			len = pPlayerWlVisibleInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasLoverVip
		for (size_t i = 0; i < n; i++)
		{ //LoverVipInfo
			BYTE* pLoverVipInfo = pPlayerRoomVisibleInfo;
			Write16(pLoverVipInfo, 0); //len

			Write8(pLoverVipInfo, 0); //LoverVipLevel
			Write32(pLoverVipInfo, 0); //LoverVipPoint
			Write8(pLoverVipInfo, 0); //GrowRate

			len = pLoverVipInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasBattleModeSkillInfoList
		for (size_t i = 0; i < n; i++)
		{ //BattleModeSkillInfoList
			BYTE* pBattleModeSkillInfoList = pPlayerRoomVisibleInfo;
			Write16(pBattleModeSkillInfoList, 0); //len

			Write8(pBattleModeSkillInfoList, 0); //SkillNum
			for (size_t i = 0; i < n; i++)
			{ //SkillInfo
				BYTE* pSkillInfo = pBattleModeSkillInfoList;
				Write16(pSkillInfo, 0); //len

				Write16(pSkillInfo, 0); //SkillId
				Write8(pSkillInfo, 0); //SkillLevel

				len = pSkillInfo - pBattleModeSkillInfoList;
				Set16(pBattleModeSkillInfoList, (WORD)len);
				pBattleModeSkillInfoList += len;
			}

			len = pBattleModeSkillInfoList - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasGarden
		for (size_t i = 0; i < n; i++)
		{ //PersonalGardenBaseInfo
			BYTE* pPersonalGardenBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pPersonalGardenBaseInfo, 0); //len

			Write8(pPersonalGardenBaseInfo, 0); //GardenLevel
			Write32(pPersonalGardenBaseInfo, 0); //GardenPoint
			Write8(pPersonalGardenBaseInfo, 0); //GrowRate
			Write32(pPersonalGardenBaseInfo, 0); //GardenExpireTime
			{ //SimpleInfo
				BYTE* pSimpleInfo = pPersonalGardenBaseInfo;
				Write16(pSimpleInfo, 0); //len

				Write32(pSimpleInfo, 0); //WeekPopularity
				Write32(pSimpleInfo, 0); //TotalPopularity
				Write32(pSimpleInfo, 0); //LastUpdatePopularityTime
				Write8(pSimpleInfo, 0); //PrivateType

				len = pSimpleInfo - pPersonalGardenBaseInfo;
				Set16(pPersonalGardenBaseInfo, (WORD)len);
				pPersonalGardenBaseInfo += len;
			}

			len = pPersonalGardenBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //ConsumeVipInfo
			BYTE* pConsumeVipInfo = pPlayerRoomVisibleInfo;
			Write16(pConsumeVipInfo, 0); //len

			WriteUn(pConsumeVipInfo, 0); //VipLevel
			WriteUn(pConsumeVipInfo, 0); //CharmValueOfMonth
			WriteUn(pConsumeVipInfo, 0); //SearchTreasureNums
			WriteUn(pConsumeVipInfo, 0); //GetTreasureNums

			len = pConsumeVipInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HaveBaby
		{ //LoverBabyInfo
			BYTE* pLoverBabyInfo = pPlayerRoomVisibleInfo;
			Write16(pLoverBabyInfo, 0); //len

			Write32(pLoverBabyInfo, 0); //LoverBabyID
			Write32(pLoverBabyInfo, 0); //ItemID
			Write32(pLoverBabyInfo, 0); //GrowValue
			Write32(pLoverBabyInfo, 0); //MentalValue
			Write32(pLoverBabyInfo, 0); //BabyProfileLevel
			Write32(pLoverBabyInfo, 0); //StrengthLevel
			Write32(pLoverBabyInfo, 0); //GrowLevel
			WriteString(pLoverBabyInfo, 0); //LoveBabyNickName[]
			Write16(pLoverBabyInfo, 0); //LoverBabyStat
			Write16(pLoverBabyInfo, 0); //LoverBabyEquipStat
			Write16(pLoverBabyInfo, 0); //LoverBabyTransferdStatus

			len = pLoverBabyInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //EmperorInfo
			BYTE* pEmperorInfo = pPlayerRoomVisibleInfo;
			Write16(pEmperorInfo, 0); //len

			Write8(pEmperorInfo, 0); //EmperorLevel
			Write32(pEmperorInfo, 0); //EmperorPoint
			Write32(pEmperorInfo, 0); //EmperorLeftDays
			Write8(pEmperorInfo, 0); //EmperorGrowRate

			len = pEmperorInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write16(pPlayerRoomVisibleInfo, 0); //RaceCardNums
		for (size_t i = 0; i < n; i++)
		{ //RaceCardAddValueInfo
			BYTE* pRaceCardAddValueInfo = pPlayerRoomVisibleInfo;
			Write16(pRaceCardAddValueInfo, 0); //len

			Write32(pRaceCardAddValueInfo, 0); //RaceCardID
			Write32(pRaceCardAddValueInfo, 0); //AddValue

			len = pRaceCardAddValueInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //GansterScoreInfo
			BYTE* pGansterScoreInfo = pPlayerRoomVisibleInfo;
			Write16(pGansterScoreInfo, 0); //len

			Write32(pGansterScoreInfo, 0); //GansterSeasonID
			Write32(pGansterScoreInfo, 0); //GansterScore
			Write32(pGansterScoreInfo, 0); //PoliceScore
			Write32(pGansterScoreInfo, 0); //TotalGansterScore

			len = pGansterScoreInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write32(pPlayerRoomVisibleInfo, 0); //OlympicId
		Write32(pPlayerRoomVisibleInfo, 0); //NPCEliminateWinTimes
		Write8(pPlayerRoomVisibleInfo, 0); //OriginTeamID
		Write8(pPlayerRoomVisibleInfo, 0); //NxNpc
		Write16(pPlayerRoomVisibleInfo, 0); //NxNpcAILevel
		{ //EquippedActiveKartInfo
			BYTE* pEquippedActiveKartInfo = pPlayerRoomVisibleInfo;
			Write16(pEquippedActiveKartInfo, 0); //len

			Write8(pEquippedActiveKartInfo, 0); //HaveActiveInfo
			Write32(pEquippedActiveKartInfo, 0); //KartID
			Write32(pEquippedActiveKartInfo, 0); //ActiveLevel

			len = pEquippedActiveKartInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //SpecialActivityStatus
		Write8(pPlayerRoomVisibleInfo, 0); //AreaID
		Write8(pPlayerRoomVisibleInfo, 0); //HaveRaiseSecondBaby
		{ //SecondLoverBabyInfo
			BYTE* pSecondLoverBabyInfo = pPlayerRoomVisibleInfo;
			Write16(pSecondLoverBabyInfo, 0); //len

			Write32(pSecondLoverBabyInfo, 0); //LoverBabyID
			Write32(pSecondLoverBabyInfo, 0); //ItemID
			Write32(pSecondLoverBabyInfo, 0); //GrowValue
			Write32(pSecondLoverBabyInfo, 0); //MentalValue
			Write32(pSecondLoverBabyInfo, 0); //BabyProfileLevel
			Write32(pSecondLoverBabyInfo, 0); //StrengthLevel
			Write32(pSecondLoverBabyInfo, 0); //GrowLevel
			WriteString(pSecondLoverBabyInfo, 0); //LoveBabyNickName[]
			Write16(pSecondLoverBabyInfo, 0); //LoverBabyStat
			Write16(pSecondLoverBabyInfo, 0); //LoverBabyEquipStat
			Write16(pSecondLoverBabyInfo, 0); //LoverBabyTransferdStatus

			len = pSecondLoverBabyInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasRankedMatchInfo
		for (size_t i = 0; i < n; i++)
		{ //RankedMatchGradeInfo
			BYTE* pRankedMatchGradeInfo = pPlayerRoomVisibleInfo;
			Write16(pRankedMatchGradeInfo, 0); //len

			Write32(pRankedMatchGradeInfo, 0); //GradeLevel
			Write32(pRankedMatchGradeInfo, 0); //ChildLevel
			Write32(pRankedMatchGradeInfo, 0); //GradeScore
			Write32(pRankedMatchGradeInfo, 0); //MaxGradeScore
			Write32(pRankedMatchGradeInfo, 0); //TotalScore

			len = pRankedMatchGradeInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasHuanLingChangeInfo
		for (size_t i = 0; i < n; i++)
		{ //HuanLingSuitInfo
			BYTE* pHuanLingSuitInfo = pPlayerRoomVisibleInfo;
			Write16(pHuanLingSuitInfo, 0); //len

			Write32(pHuanLingSuitInfo, 0); //SuitID
			Write8(pHuanLingSuitInfo, 0); //ChangeLevel

			len = pHuanLingSuitInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //EquipSealType
		Write16(pPlayerRoomVisibleInfo, 0); //Role
		Write8(pPlayerRoomVisibleInfo, 0); //SpecialActivityIDNum
		Write8(pPlayerRoomVisibleInfo, 0); //CrewID
		Write8(pPlayerRoomVisibleInfo, 0); //SpecialActivityInfoNum
		for (size_t i = 0; i < n; i++)
		{ //SpecialActivityInfo
			BYTE* pSpecialActivityInfo = pPlayerRoomVisibleInfo;
			Write16(pSpecialActivityInfo, 0); //len

			Write8(pSpecialActivityInfo, 0); //ProfessionLicenseInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ProfessionLicenseInfo
				BYTE* pProfessionLicenseInfo = pSpecialActivityInfo;
				Write16(pProfessionLicenseInfo, 0); //len

				Write8(pProfessionLicenseInfo, 0); //BigLevel
				Write8(pProfessionLicenseInfo, 0); //SmallLevel

				len = pProfessionLicenseInfo - pSpecialActivityInfo;
				Set16(pSpecialActivityInfo, (WORD)len);
				pSpecialActivityInfo += len;
			}

			len = pSpecialActivityInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //ParaNum
		Write32(pPlayerRoomVisibleInfo, 0); //ParaList[]
		Write8(pPlayerRoomVisibleInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemOrder
			BYTE* pItemOrder = pPlayerRoomVisibleInfo;
			Write16(pItemOrder, 0); //len

			Write32(pItemOrder, 0); //KartID
			Write32(pItemOrder, 0); //Order
			Write32(pItemOrder, 0); //BackGroundID

			len = pItemOrder - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //TDCExcluItemNum
		Write32(pPlayerRoomVisibleInfo, 0); //TDCExclusiveItemID[]
		Write8(pPlayerRoomVisibleInfo, 0); //EquipNiChangItemNum
		for (size_t i = 0; i < n; i++)
		{ //NiChangPavilionEquipItemInfo
			BYTE* pNiChangPavilionEquipItemInfo = pPlayerRoomVisibleInfo;
			Write16(pNiChangPavilionEquipItemInfo, 0); //len

			Write32(pNiChangPavilionEquipItemInfo, 0); //ItemId
			Write16(pNiChangPavilionEquipItemInfo, 0); //CurrentEquipColorationPlanId

			len = pNiChangPavilionEquipItemInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //TestKartGameType
		Write32(pPlayerRoomVisibleInfo, 0); //GameTestKartID
		Write8(pPlayerRoomVisibleInfo, 0); //HasStarsFightingInfo
		for (size_t i = 0; i < n; i++)
		{ //StarsFightingInfo
			BYTE* pStarsFightingInfo = pPlayerRoomVisibleInfo;
			Write16(pStarsFightingInfo, 0); //len

			Write32(pStarsFightingInfo, 0); //Star
			Write32(pStarsFightingInfo, 0); //StarVal
			Write32(pStarsFightingInfo, 0); //StarsFightingStarLevel

			len = pStarsFightingInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //RoomBGSetting

		len = pPlayerRoomVisibleInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //KartNum
	for (size_t i = 0; i < n; i++)
	{ //KartRefitInfo
		BYTE* pKartRefitInfo = p;
		Write16(pKartRefitInfo, 0); //len

		Write32(pKartRefitInfo, 0); //Uin
		Write32(pKartRefitInfo, 0); //KartId
		Write32(pKartRefitInfo, 0); //RefitCout
		Write16(pKartRefitInfo, 0); //MaxFlags
		Write16(pKartRefitInfo, 0); //WWeight
		Write16(pKartRefitInfo, 0); //SpeedWeight
		Write16(pKartRefitInfo, 0); //JetWeight
		Write16(pKartRefitInfo, 0); //SJetWeight
		Write16(pKartRefitInfo, 0); //AccuWeight
		Write32(pKartRefitInfo, 0); //ShapeRefitCount
		Write32(pKartRefitInfo, 0); //KartHeadRefitItemID
		Write32(pKartRefitInfo, 0); //KartTailRefitItemID
		Write32(pKartRefitInfo, 0); //KartFlankRefitItemID
		Write32(pKartRefitInfo, 0); //KartTireRefitItemID
		Write32(pKartRefitInfo, 0); //SecondRefitCount
		Write16(pKartRefitInfo, 0); //Speed2Weight
		Write16(pKartRefitInfo, 0); //DriftVecWeight
		Write16(pKartRefitInfo, 0); //AdditionalZSpeedWeight
		Write16(pKartRefitInfo, 0); //AntiCollisionWeight
		Write16(pKartRefitInfo, 0); //LuckyValue
		Write16(pKartRefitInfo, 0); //RefitLuckyValueMaxWeight
		Write32(pKartRefitInfo, 0); //ShapeSuitID
		Write8(pKartRefitInfo, 0); //LegendSuitLevel
		Write32(pKartRefitInfo, 0); //LegendSuitLevelChoice
		Write32(pKartRefitInfo, 0); //ShapeLegendSuitID

		len = pKartRefitInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasMoreInfo
	Write8(p, 0); //HasGMMInfo
	for (size_t i = 0; i < n; i++)
	{ //GMMSuit
		BYTE* pGMMSuit = p;
		Write16(pGMMSuit, 0); //len

		Write32(pGMMSuit, 0); //SuitMale1
		Write32(pGMMSuit, 0); //SuitFemale1
		Write32(pGMMSuit, 0); //SuitMale2
		Write32(pGMMSuit, 0); //SuitFemale2
		Write32(pGMMSuit, 0); //Head

		len = pGMMSuit - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasRankedMatchSuitInfo
	for (size_t i = 0; i < n; i++)
	{ //RankedMatchSuitInfo
		BYTE* pRankedMatchSuitInfo = p;
		Write16(pRankedMatchSuitInfo, 0); //len

		Write32(pRankedMatchSuitInfo, 0); //SuitItemForMale1
		Write32(pRankedMatchSuitInfo, 0); //SuitItemForFemale1
		Write32(pRankedMatchSuitInfo, 0); //SuitItemForMale2
		Write32(pRankedMatchSuitInfo, 0); //SuitItemForFemale2
		Write32(pRankedMatchSuitInfo, 0); //HeadItem
		Write32(pRankedMatchSuitInfo, 0); //GloveItemMale
		Write32(pRankedMatchSuitInfo, 0); //GloveItemFemale

		len = pRankedMatchSuitInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 548, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);

}

void NotifyBorderPlayerMoreInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //PlayerCount
	for (size_t i = 0; i < n; i++)
	{ //PlayerRoomVisibleInfo
		BYTE* pPlayerRoomVisibleInfo = p;
		Write16(pPlayerRoomVisibleInfo, 0); //len

		WriteUn(pPlayerRoomVisibleInfo, 0); //Uin
		WriteUn(pPlayerRoomVisibleInfo, 0); //Identity
		Write8(pPlayerRoomVisibleInfo, 0); //SeatID
		Write8(pPlayerRoomVisibleInfo, 0); //TeamID
		Write16(pPlayerRoomVisibleInfo, 0); //PlayerID
		Write8(pPlayerRoomVisibleInfo, 0); //Status
		{ //PlayerDBBaseInfo
			BYTE* pPlayerDBBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerDBBaseInfo, 0); //len

			WriteString(pPlayerDBBaseInfo, 0); //NickName[]
			Write8(pPlayerDBBaseInfo, 0); //Gender
			Write8(pPlayerDBBaseInfo, 0); //Country
			Write32(pPlayerDBBaseInfo, 0); //License
			WriteUn(pPlayerDBBaseInfo, 0); //Experience
			Write32(pPlayerDBBaseInfo, 0); //SuperMoney
			Write32(pPlayerDBBaseInfo, 0); //Money
			WriteUn(pPlayerDBBaseInfo, 0); //WinNum
			Write32(pPlayerDBBaseInfo, 0); //SecondNum
			Write32(pPlayerDBBaseInfo, 0); //ThirdNum
			WriteUn(pPlayerDBBaseInfo, 0); //TotalNum
			Write32(pPlayerDBBaseInfo, 0); //CurHonor
			Write32(pPlayerDBBaseInfo, 0); //TotalHonor
			Write32(pPlayerDBBaseInfo, 0); //TodayHonor
			Write32(pPlayerDBBaseInfo, 0); //RelaxTime
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationBefore
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationCur
			Write32(pPlayerDBBaseInfo, 0); //Charm
			Write32(pPlayerDBBaseInfo, 0); //DurationGame
			Write32(pPlayerDBBaseInfo, 0); //DanceExp
			Write32(pPlayerDBBaseInfo, 0); //Coupons
			Write32(pPlayerDBBaseInfo, 0); //Admiration
			Write32(pPlayerDBBaseInfo, 0); //LuckMoney
			Write32(pPlayerDBBaseInfo, 0); //TeamWorkExp
			Write32(pPlayerDBBaseInfo, 0); //AchievePoint
			Write32(pPlayerDBBaseInfo, 0); //RegTime
			WriteString(pPlayerDBBaseInfo, 0); //Signature[]
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchPoint
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchNum
			Write16(pPlayerDBBaseInfo, 0); //LuckyMatchFirstNum
			Write8(pPlayerDBBaseInfo, 0); //LuckyMatchBestRand
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchWinNum
			Write32(pPlayerDBBaseInfo, 0); //FizzPointTotal
			Write16(pPlayerDBBaseInfo, 0); //FizzPointDaily
			Write16(pPlayerDBBaseInfo, 0); //FizzPointWeekly
			Write16(pPlayerDBBaseInfo, 0); //FizzPointLastWeek
			Write8(pPlayerDBBaseInfo, 0); //FizzLotteryStatus
			Write32(pPlayerDBBaseInfo, 0); //FizzLastUpdateTime
			Write32(pPlayerDBBaseInfo, 0); //SNSLocaleCode
			Write32(pPlayerDBBaseInfo, 0); //AuctionRightUnlockTime
			Write8(pPlayerDBBaseInfo, 0); //ReserveFlag
			Write32(pPlayerDBBaseInfo, 0); //CurConsumeScore
			Write32(pPlayerDBBaseInfo, 0); //HistoryConsumeScore
			Write8(pPlayerDBBaseInfo, 0); //CrashModeSponsorID
			Write32(pPlayerDBBaseInfo, 0); //Popularity
			Write32(pPlayerDBBaseInfo, 0); //LadderMatchAchievePoint
			Write32(pPlayerDBBaseInfo, 0); //Cash
			Write32(pPlayerDBBaseInfo, 0); //PlayerGPMIdentity
			Write32(pPlayerDBBaseInfo, 0); //PointTotalScore
			WriteUn(pPlayerDBBaseInfo, 0); //totalMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //lastMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalSeasonId
			WriteUn(pPlayerDBBaseInfo, 0); //lastClearMapMedalTime
			WriteUn(pPlayerDBBaseInfo, 0); //max2048Score
			WriteUn(pPlayerDBBaseInfo, 0); //curPlay2048LeftNum
			Write32(pPlayerDBBaseInfo, 0); //CheerValue
			Write16(pPlayerDBBaseInfo, 0); //SeasonID
			Write32(pPlayerDBBaseInfo, 0); //LastCheerValue
			Write32(pPlayerDBBaseInfo, 0); //SpeedBean
			Write32(pPlayerDBBaseInfo, 0); //SpeedCoin

			len = pPlayerDBBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //PlayerGuildInfo
			BYTE* pPlayerGuildInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerGuildInfo, 0); //len

			WriteString(pPlayerGuildInfo, 0); //GuildName[]
			Write16(pPlayerGuildInfo, 0); //Duty
			Write32(pPlayerGuildInfo, 0); //GuildID
			Write32(pPlayerGuildInfo, 0); //Right
			Write32(pPlayerGuildInfo, 0); //Medal
			Write32(pPlayerGuildInfo, 0); //Contribute
			WriteString(pPlayerGuildInfo, 0); //DutyTitle[]

			len = pPlayerGuildInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write16(pPlayerRoomVisibleInfo, 0); //EquipedItemNum
		for (size_t i = 0; i < n; i++)
		{ //PlayerItemInfo
			BYTE* pPlayerItemInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerItemInfo, 0); //len

			Write32(pPlayerItemInfo, 0); //ItemID
			Write32(pPlayerItemInfo, 0); //ItemNum
			Write32(pPlayerItemInfo, 0); //AvailPeriod
			Write8(pPlayerItemInfo, 0); //Status
			WriteUn(pPlayerItemInfo, 0); //ObtainTime
			Write32(pPlayerItemInfo, 0); //OtherAttribute
			Write16(pPlayerItemInfo, 0); //ItemType

			len = pPlayerItemInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write16(pPlayerRoomVisibleInfo, 0); //PetNum
		for (size_t i = 0; i < n; i++)
		{ //PetInfo
			BYTE* pPetInfo = pPlayerRoomVisibleInfo;
			Write16(pPetInfo, 0); //len

			Write32(pPetInfo, 0); //Uin
			Write32(pPetInfo, 0); //PetId
			WriteString(pPetInfo, 0); //PetName[]
			Write8(pPetInfo, 0); //IsProper
			Write16(pPetInfo, 0); //Level
			Write8(pPetInfo, 0); //Status
			Write16(pPetInfo, 0); //PetSkillNum
			for (size_t i = 0; i < n; i++)
			{ //PetSkillList
				BYTE* pPetSkillList = pPetInfo;
				Write16(pPetSkillList, 0); //len

				Write16(pPetSkillList, 0); //SkillID
				Write8(pPetSkillList, 0); //Status
				Write8(pPetSkillList, 0); //Active
				Write32(pPetSkillList, 0); //Value

				len = pPetSkillList - pPetInfo;
				Set16(pPetInfo, (WORD)len);
				pPetInfo += len;
			}
			Write32(pPetInfo, 0); //StrengLevel
			Write8(pPetInfo, 0); //TopStatus
			{ //CommonInfo
				BYTE* pCommonInfo = pPetInfo;
				Write16(pCommonInfo, 0); //len

				Write32(pCommonInfo, 0); //HuanHuaLevel
				Write8(pCommonInfo, 0); //CanHuanHua

				len = pCommonInfo - pPetInfo;
				Set16(pPetInfo, (WORD)len);
				pPetInfo += len;
			}
			Write16(pPetInfo, 0); //PKStar
			Write32(pPetInfo, 0); //PetSkinID

			len = pPetInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //PlayerGuildMatchInfo
			BYTE* pPlayerGuildMatchInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerGuildMatchInfo, 0); //len

			Write32(pPlayerGuildMatchInfo, 0); //SelfPoint
			Write32(pPlayerGuildMatchInfo, 0); //WinNum
			Write32(pPlayerGuildMatchInfo, 0); //TotalNum

			len = pPlayerGuildMatchInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //IsInTopList
		Write8(pPlayerRoomVisibleInfo, 0); //LoverRaceOrPro
		Write8(pPlayerRoomVisibleInfo, 0); //TmpEffectNum
		Write32(pPlayerRoomVisibleInfo, 0); //TmpEffectItems[]
		Write8(pPlayerRoomVisibleInfo, 0); //OBState
		Write8(pPlayerRoomVisibleInfo, 0); //DebutOrX5
		Write8(pPlayerRoomVisibleInfo, 0); //RandKeyFlag
		WriteUn(pPlayerRoomVisibleInfo, 0); //VipFlag
		Write8(pPlayerRoomVisibleInfo, 0); //HaveAppellation
		for (size_t i = 0; i < n; i++)
		{ //CurAppellation
			BYTE* pCurAppellation = pPlayerRoomVisibleInfo;
			Write16(pCurAppellation, 0); //len

			Write8(pCurAppellation, 0); //Type
			Write8(pCurAppellation, 0); //Level
			Write8(pCurAppellation, 0); //Status
			Write8(pCurAppellation, 0); //Difficulty
			Write32(pCurAppellation, 0); //MapId
			Write32(pCurAppellation, 0); //Value

			len = pCurAppellation - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //NobleInfo
			BYTE* pNobleInfo = pPlayerRoomVisibleInfo;
			Write16(pNobleInfo, 0); //len

			Write32(pNobleInfo, 0); //NobleID
			Write8(pNobleInfo, 0); //NobleLevel
			Write32(pNobleInfo, 0); //NoblePoint
			Write32(pNobleInfo, 0); //NobleLeftDays

			len = pNobleInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasCarryWizard
		for (size_t i = 0; i < n; i++)
		{ //CarryWizardInfo
			BYTE* pCarryWizardInfo = pPlayerRoomVisibleInfo;
			Write16(pCarryWizardInfo, 0); //len

			Write16(pCarryWizardInfo, 0); //WizardID
			WriteString(pCarryWizardInfo, 0); //NickName[]
			Write16(pCarryWizardInfo, 0); //WizardType
			Write8(pCarryWizardInfo, 0); //Order
			Write8(pCarryWizardInfo, 0); //EvolutionBranch
			Write8(pCarryWizardInfo, 0); //IsHuanHua

			len = pCarryWizardInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //GuildVipBaseInfo
			BYTE* pGuildVipBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pGuildVipBaseInfo, 0); //len

			Write8(pGuildVipBaseInfo, 0); //GuildVipLevel
			Write32(pGuildVipBaseInfo, 0); //GuildVipPoint

			len = pGuildVipBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write32(pPlayerRoomVisibleInfo, 0); //ExFlag
		Write8(pPlayerRoomVisibleInfo, 0); //HaveLDMBaseInfo
		for (size_t i = 0; i < n; i++)
		{ //PlayerLDMBaseInfo
			BYTE* pPlayerLDMBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerLDMBaseInfo, 0); //len

			Write8(pPlayerLDMBaseInfo, 0); //Grade
			Write32(pPlayerLDMBaseInfo, 0); //Score
			Write32(pPlayerLDMBaseInfo, 0); //MaxScore
			Write32(pPlayerLDMBaseInfo, 0); //MaxGrade

			len = pPlayerLDMBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasWl
		for (size_t i = 0; i < n; i++)
		{ //PlayerWlVisibleInfo
			BYTE* pPlayerWlVisibleInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerWlVisibleInfo, 0); //len

			Write32(pPlayerWlVisibleInfo, 0); //WonderLandID
			WriteString(pPlayerWlVisibleInfo, 0); //WonderLandName[]
			Write16(pPlayerWlVisibleInfo, 0); //WonderLandDuty
			Write8(pPlayerWlVisibleInfo, 0); //SubType
			Write8(pPlayerWlVisibleInfo, 0); //GuildGrade

			len = pPlayerWlVisibleInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasLoverVip
		for (size_t i = 0; i < n; i++)
		{ //LoverVipInfo
			BYTE* pLoverVipInfo = pPlayerRoomVisibleInfo;
			Write16(pLoverVipInfo, 0); //len

			Write8(pLoverVipInfo, 0); //LoverVipLevel
			Write32(pLoverVipInfo, 0); //LoverVipPoint
			Write8(pLoverVipInfo, 0); //GrowRate

			len = pLoverVipInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasBattleModeSkillInfoList
		for (size_t i = 0; i < n; i++)
		{ //BattleModeSkillInfoList
			BYTE* pBattleModeSkillInfoList = pPlayerRoomVisibleInfo;
			Write16(pBattleModeSkillInfoList, 0); //len

			Write8(pBattleModeSkillInfoList, 0); //SkillNum
			for (size_t i = 0; i < n; i++)
			{ //SkillInfo
				BYTE* pSkillInfo = pBattleModeSkillInfoList;
				Write16(pSkillInfo, 0); //len

				Write16(pSkillInfo, 0); //SkillId
				Write8(pSkillInfo, 0); //SkillLevel

				len = pSkillInfo - pBattleModeSkillInfoList;
				Set16(pBattleModeSkillInfoList, (WORD)len);
				pBattleModeSkillInfoList += len;
			}

			len = pBattleModeSkillInfoList - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasGarden
		for (size_t i = 0; i < n; i++)
		{ //PersonalGardenBaseInfo
			BYTE* pPersonalGardenBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pPersonalGardenBaseInfo, 0); //len

			Write8(pPersonalGardenBaseInfo, 0); //GardenLevel
			Write32(pPersonalGardenBaseInfo, 0); //GardenPoint
			Write8(pPersonalGardenBaseInfo, 0); //GrowRate
			Write32(pPersonalGardenBaseInfo, 0); //GardenExpireTime
			{ //SimpleInfo
				BYTE* pSimpleInfo = pPersonalGardenBaseInfo;
				Write16(pSimpleInfo, 0); //len

				Write32(pSimpleInfo, 0); //WeekPopularity
				Write32(pSimpleInfo, 0); //TotalPopularity
				Write32(pSimpleInfo, 0); //LastUpdatePopularityTime
				Write8(pSimpleInfo, 0); //PrivateType

				len = pSimpleInfo - pPersonalGardenBaseInfo;
				Set16(pPersonalGardenBaseInfo, (WORD)len);
				pPersonalGardenBaseInfo += len;
			}

			len = pPersonalGardenBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //ConsumeVipInfo
			BYTE* pConsumeVipInfo = pPlayerRoomVisibleInfo;
			Write16(pConsumeVipInfo, 0); //len

			WriteUn(pConsumeVipInfo, 0); //VipLevel
			WriteUn(pConsumeVipInfo, 0); //CharmValueOfMonth
			WriteUn(pConsumeVipInfo, 0); //SearchTreasureNums
			WriteUn(pConsumeVipInfo, 0); //GetTreasureNums

			len = pConsumeVipInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HaveBaby
		{ //LoverBabyInfo
			BYTE* pLoverBabyInfo = pPlayerRoomVisibleInfo;
			Write16(pLoverBabyInfo, 0); //len

			Write32(pLoverBabyInfo, 0); //LoverBabyID
			Write32(pLoverBabyInfo, 0); //ItemID
			Write32(pLoverBabyInfo, 0); //GrowValue
			Write32(pLoverBabyInfo, 0); //MentalValue
			Write32(pLoverBabyInfo, 0); //BabyProfileLevel
			Write32(pLoverBabyInfo, 0); //StrengthLevel
			Write32(pLoverBabyInfo, 0); //GrowLevel
			WriteString(pLoverBabyInfo, 0); //LoveBabyNickName[]
			Write16(pLoverBabyInfo, 0); //LoverBabyStat
			Write16(pLoverBabyInfo, 0); //LoverBabyEquipStat
			Write16(pLoverBabyInfo, 0); //LoverBabyTransferdStatus

			len = pLoverBabyInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //EmperorInfo
			BYTE* pEmperorInfo = pPlayerRoomVisibleInfo;
			Write16(pEmperorInfo, 0); //len

			Write8(pEmperorInfo, 0); //EmperorLevel
			Write32(pEmperorInfo, 0); //EmperorPoint
			Write32(pEmperorInfo, 0); //EmperorLeftDays
			Write8(pEmperorInfo, 0); //EmperorGrowRate

			len = pEmperorInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write16(pPlayerRoomVisibleInfo, 0); //RaceCardNums
		for (size_t i = 0; i < n; i++)
		{ //RaceCardAddValueInfo
			BYTE* pRaceCardAddValueInfo = pPlayerRoomVisibleInfo;
			Write16(pRaceCardAddValueInfo, 0); //len

			Write32(pRaceCardAddValueInfo, 0); //RaceCardID
			Write32(pRaceCardAddValueInfo, 0); //AddValue

			len = pRaceCardAddValueInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //GansterScoreInfo
			BYTE* pGansterScoreInfo = pPlayerRoomVisibleInfo;
			Write16(pGansterScoreInfo, 0); //len

			Write32(pGansterScoreInfo, 0); //GansterSeasonID
			Write32(pGansterScoreInfo, 0); //GansterScore
			Write32(pGansterScoreInfo, 0); //PoliceScore
			Write32(pGansterScoreInfo, 0); //TotalGansterScore

			len = pGansterScoreInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write32(pPlayerRoomVisibleInfo, 0); //OlympicId
		Write32(pPlayerRoomVisibleInfo, 0); //NPCEliminateWinTimes
		Write8(pPlayerRoomVisibleInfo, 0); //OriginTeamID
		Write8(pPlayerRoomVisibleInfo, 0); //NxNpc
		Write16(pPlayerRoomVisibleInfo, 0); //NxNpcAILevel
		{ //EquippedActiveKartInfo
			BYTE* pEquippedActiveKartInfo = pPlayerRoomVisibleInfo;
			Write16(pEquippedActiveKartInfo, 0); //len

			Write8(pEquippedActiveKartInfo, 0); //HaveActiveInfo
			Write32(pEquippedActiveKartInfo, 0); //KartID
			Write32(pEquippedActiveKartInfo, 0); //ActiveLevel

			len = pEquippedActiveKartInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //SpecialActivityStatus
		Write8(pPlayerRoomVisibleInfo, 0); //AreaID
		Write8(pPlayerRoomVisibleInfo, 0); //HaveRaiseSecondBaby
		{ //SecondLoverBabyInfo
			BYTE* pSecondLoverBabyInfo = pPlayerRoomVisibleInfo;
			Write16(pSecondLoverBabyInfo, 0); //len

			Write32(pSecondLoverBabyInfo, 0); //LoverBabyID
			Write32(pSecondLoverBabyInfo, 0); //ItemID
			Write32(pSecondLoverBabyInfo, 0); //GrowValue
			Write32(pSecondLoverBabyInfo, 0); //MentalValue
			Write32(pSecondLoverBabyInfo, 0); //BabyProfileLevel
			Write32(pSecondLoverBabyInfo, 0); //StrengthLevel
			Write32(pSecondLoverBabyInfo, 0); //GrowLevel
			WriteString(pSecondLoverBabyInfo, 0); //LoveBabyNickName[]
			Write16(pSecondLoverBabyInfo, 0); //LoverBabyStat
			Write16(pSecondLoverBabyInfo, 0); //LoverBabyEquipStat
			Write16(pSecondLoverBabyInfo, 0); //LoverBabyTransferdStatus

			len = pSecondLoverBabyInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasRankedMatchInfo
		for (size_t i = 0; i < n; i++)
		{ //RankedMatchGradeInfo
			BYTE* pRankedMatchGradeInfo = pPlayerRoomVisibleInfo;
			Write16(pRankedMatchGradeInfo, 0); //len

			Write32(pRankedMatchGradeInfo, 0); //GradeLevel
			Write32(pRankedMatchGradeInfo, 0); //ChildLevel
			Write32(pRankedMatchGradeInfo, 0); //GradeScore
			Write32(pRankedMatchGradeInfo, 0); //MaxGradeScore
			Write32(pRankedMatchGradeInfo, 0); //TotalScore

			len = pRankedMatchGradeInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasHuanLingChangeInfo
		for (size_t i = 0; i < n; i++)
		{ //HuanLingSuitInfo
			BYTE* pHuanLingSuitInfo = pPlayerRoomVisibleInfo;
			Write16(pHuanLingSuitInfo, 0); //len

			Write32(pHuanLingSuitInfo, 0); //SuitID
			Write8(pHuanLingSuitInfo, 0); //ChangeLevel

			len = pHuanLingSuitInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //EquipSealType
		Write16(pPlayerRoomVisibleInfo, 0); //Role
		Write8(pPlayerRoomVisibleInfo, 0); //SpecialActivityIDNum
		Write8(pPlayerRoomVisibleInfo, 0); //CrewID
		Write8(pPlayerRoomVisibleInfo, 0); //SpecialActivityInfoNum
		for (size_t i = 0; i < n; i++)
		{ //SpecialActivityInfo
			BYTE* pSpecialActivityInfo = pPlayerRoomVisibleInfo;
			Write16(pSpecialActivityInfo, 0); //len

			Write8(pSpecialActivityInfo, 0); //ProfessionLicenseInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ProfessionLicenseInfo
				BYTE* pProfessionLicenseInfo = pSpecialActivityInfo;
				Write16(pProfessionLicenseInfo, 0); //len

				Write8(pProfessionLicenseInfo, 0); //BigLevel
				Write8(pProfessionLicenseInfo, 0); //SmallLevel

				len = pProfessionLicenseInfo - pSpecialActivityInfo;
				Set16(pSpecialActivityInfo, (WORD)len);
				pSpecialActivityInfo += len;
			}

			len = pSpecialActivityInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //ParaNum
		Write32(pPlayerRoomVisibleInfo, 0); //ParaList[]
		Write8(pPlayerRoomVisibleInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemOrder
			BYTE* pItemOrder = pPlayerRoomVisibleInfo;
			Write16(pItemOrder, 0); //len

			Write32(pItemOrder, 0); //KartID
			Write32(pItemOrder, 0); //Order
			Write32(pItemOrder, 0); //BackGroundID

			len = pItemOrder - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //TDCExcluItemNum
		Write32(pPlayerRoomVisibleInfo, 0); //TDCExclusiveItemID[]
		Write8(pPlayerRoomVisibleInfo, 0); //EquipNiChangItemNum
		for (size_t i = 0; i < n; i++)
		{ //NiChangPavilionEquipItemInfo
			BYTE* pNiChangPavilionEquipItemInfo = pPlayerRoomVisibleInfo;
			Write16(pNiChangPavilionEquipItemInfo, 0); //len

			Write32(pNiChangPavilionEquipItemInfo, 0); //ItemId
			Write16(pNiChangPavilionEquipItemInfo, 0); //CurrentEquipColorationPlanId

			len = pNiChangPavilionEquipItemInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //TestKartGameType
		Write32(pPlayerRoomVisibleInfo, 0); //GameTestKartID
		Write8(pPlayerRoomVisibleInfo, 0); //HasStarsFightingInfo
		for (size_t i = 0; i < n; i++)
		{ //StarsFightingInfo
			BYTE* pStarsFightingInfo = pPlayerRoomVisibleInfo;
			Write16(pStarsFightingInfo, 0); //len

			Write32(pStarsFightingInfo, 0); //Star
			Write32(pStarsFightingInfo, 0); //StarVal
			Write32(pStarsFightingInfo, 0); //StarsFightingStarLevel

			len = pStarsFightingInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //RoomBGSetting

		len = pPlayerRoomVisibleInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //KartNum
	for (size_t i = 0; i < n; i++)
	{ //KartRefitInfo
		BYTE* pKartRefitInfo = p;
		Write16(pKartRefitInfo, 0); //len

		Write32(pKartRefitInfo, 0); //Uin
		Write32(pKartRefitInfo, 0); //KartId
		Write32(pKartRefitInfo, 0); //RefitCout
		Write16(pKartRefitInfo, 0); //MaxFlags
		Write16(pKartRefitInfo, 0); //WWeight
		Write16(pKartRefitInfo, 0); //SpeedWeight
		Write16(pKartRefitInfo, 0); //JetWeight
		Write16(pKartRefitInfo, 0); //SJetWeight
		Write16(pKartRefitInfo, 0); //AccuWeight
		Write32(pKartRefitInfo, 0); //ShapeRefitCount
		Write32(pKartRefitInfo, 0); //KartHeadRefitItemID
		Write32(pKartRefitInfo, 0); //KartTailRefitItemID
		Write32(pKartRefitInfo, 0); //KartFlankRefitItemID
		Write32(pKartRefitInfo, 0); //KartTireRefitItemID
		Write32(pKartRefitInfo, 0); //SecondRefitCount
		Write16(pKartRefitInfo, 0); //Speed2Weight
		Write16(pKartRefitInfo, 0); //DriftVecWeight
		Write16(pKartRefitInfo, 0); //AdditionalZSpeedWeight
		Write16(pKartRefitInfo, 0); //AntiCollisionWeight
		Write16(pKartRefitInfo, 0); //LuckyValue
		Write16(pKartRefitInfo, 0); //RefitLuckyValueMaxWeight
		Write32(pKartRefitInfo, 0); //ShapeSuitID
		Write8(pKartRefitInfo, 0); //LegendSuitLevel
		Write32(pKartRefitInfo, 0); //LegendSuitLevelChoice
		Write32(pKartRefitInfo, 0); //ShapeLegendSuitID

		len = pKartRefitInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasNext

	len = p - buf;
	SendToClient(Client, 620, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestCountryHonor(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseCountryHonor(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //LastWeekWinCountryID
	Write8(p, 0); //LastWeekLossCountryID
	Write8(p, 0); //CurrCountryNum
	for (size_t i = 0; i < n; i++)
	{ //CurrWeekHonors
		BYTE* pCurrWeekHonors = p;
		Write16(pCurrWeekHonors, 0); //len

		Write8(pCurrWeekHonors, 0); //CountryID
		Write32(pCurrWeekHonors, 0); //CountryHonor

		len = pCurrWeekHonors - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 146, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestUpdatePlayerPos(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	{ //PlayerPos
		BYTE* pPlayerPos = p;
		len = Read16(pPlayerPos);

		{ //ChatSvrPlayerPos
			BYTE* pChatSvrPlayerPos = pPlayerPos;
			len = Read16(pChatSvrPlayerPos);

			UINT Uin = Read32(pChatSvrPlayerPos);
			int[] Posion[] = Read32(pChatSvrPlayerPos);
			int[] Ori[] = Read32(pChatSvrPlayerPos);
			USHORT Speed = Read16(pChatSvrPlayerPos);

			pPlayerPos += len;
		}
		USHORT NPCNum = Read16(pPlayerPos);
		for (size_t i = 0; i < n; i++)
		{ //NPCPos
			BYTE* pNPCPos = pPlayerPos;
			len = Read16(pNPCPos);

			UINT Uin = Read32(pNPCPos);
			int[] Posion[] = Read32(pNPCPos);
			int[] Ori[] = Read32(pNPCPos);
			USHORT Speed = Read16(pNPCPos);

			pPlayerPos += len;
		}

		p += len;
	}

}

void NotifyBroadcastPlayerPos(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	{ //ChatSvrNtyPlayerInfo
		BYTE* pChatSvrNtyPlayerInfo = p;
		Write16(pChatSvrNtyPlayerInfo, 0); //len

		Write8(pChatSvrNtyPlayerInfo, 0); //PlayerNum
		for (size_t i = 0; i < n; i++)
		{ //PlayerPos
			BYTE* pPlayerPos = pChatSvrNtyPlayerInfo;
			Write16(pPlayerPos, 0); //len

			Write32(pPlayerPos, 0); //Uin
			Write32(pPlayerPos, 0); //Posion[]
			Write32(pPlayerPos, 0); //Ori[]
			Write16(pPlayerPos, 0); //Speed

			len = pPlayerPos - pChatSvrNtyPlayerInfo;
			Set16(pChatSvrNtyPlayerInfo, (WORD)len);
			pChatSvrNtyPlayerInfo += len;
		}

		len = pChatSvrNtyPlayerInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 458, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestEnterOutdoor(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	short SceneID = Read16(p);
	short ChatRoomID = Read16(p);
	short NPCCfgVer = Read16(p);
	char[] Password[] = ReadString(p);
	BYTE InviteType = Read8(p);
	Un InviterUin = ReadUn(p);
	Un ui3DRoomRoleType = ReadUn(p);

}

void ResponseEnterOutdoor(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ChatRoomID
	Write16(p, 0); //SceneID
	{ //HeroMoveInfo
		BYTE* pHeroMoveInfo = p;
		Write16(pHeroMoveInfo, 0); //len

		Write32(pHeroMoveInfo, 0); //Uin
		Write8(pHeroMoveInfo, 0); //WalkStatue
		Write32(pHeroMoveInfo, 0); //Posion[]
		Write32(pHeroMoveInfo, 0); //Ori[]
		Write32(pHeroMoveInfo, 0); //AttachUin
		Write32(pHeroMoveInfo, 0); //WalkExtState
		Write8(pHeroMoveInfo, 0); //Nums
		Write32(pHeroMoveInfo, 0); //PermitSitHorsePetUins[]
		Write32(pHeroMoveInfo, 0); //EquipedPetID
		Write32(pHeroMoveInfo, 0); //EquipedPetStatus
		Write32(pHeroMoveInfo, 0); //PetPKResultStatus
		Write16(pHeroMoveInfo, 0); //HeroMajorState
		Write16(pHeroMoveInfo, 0); //HorsePetStatus

		len = pHeroMoveInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen
	Write16(p, 0); //HeroCount
	for (size_t i = 0; i < n; i++)
	{ //HeroInfo
		BYTE* pHeroInfo = p;
		Write16(pHeroInfo, 0); //len

		{ //HeroMoveInfo
			BYTE* pHeroMoveInfo = pHeroInfo;
			Write16(pHeroMoveInfo, 0); //len

			Write32(pHeroMoveInfo, 0); //Uin
			Write8(pHeroMoveInfo, 0); //WalkStatue
			Write32(pHeroMoveInfo, 0); //Posion[]
			Write32(pHeroMoveInfo, 0); //Ori[]
			Write32(pHeroMoveInfo, 0); //AttachUin
			Write32(pHeroMoveInfo, 0); //WalkExtState
			Write8(pHeroMoveInfo, 0); //Nums
			Write32(pHeroMoveInfo, 0); //PermitSitHorsePetUins[]
			Write32(pHeroMoveInfo, 0); //EquipedPetID
			Write32(pHeroMoveInfo, 0); //EquipedPetStatus
			Write32(pHeroMoveInfo, 0); //PetPKResultStatus
			Write16(pHeroMoveInfo, 0); //HeroMajorState
			Write16(pHeroMoveInfo, 0); //HorsePetStatus

			len = pHeroMoveInfo - pHeroInfo;
			Set16(pHeroInfo, (WORD)len);
			pHeroInfo += len;
		}
		Write32(pHeroInfo, 0); //NextPoint
		Write16(pHeroInfo, 0); //PathLen
		Write32(pHeroInfo, 0); //Path[]
		{ //HeroVisbleInfo
			BYTE* pHeroVisbleInfo = pHeroInfo;
			Write16(pHeroVisbleInfo, 0); //len

			WriteUn(pHeroVisbleInfo, 0); //Uin
			WriteUn(pHeroVisbleInfo, 0); //Identity
			Write8(pHeroVisbleInfo, 0); //SeatID
			Write8(pHeroVisbleInfo, 0); //TeamID
			Write16(pHeroVisbleInfo, 0); //PlayerID
			Write8(pHeroVisbleInfo, 0); //Status
			{ //PlayerDBBaseInfo
				BYTE* pPlayerDBBaseInfo = pHeroVisbleInfo;
				Write16(pPlayerDBBaseInfo, 0); //len

				WriteString(pPlayerDBBaseInfo, 0); //NickName[]
				Write8(pPlayerDBBaseInfo, 0); //Gender
				Write8(pPlayerDBBaseInfo, 0); //Country
				Write32(pPlayerDBBaseInfo, 0); //License
				WriteUn(pPlayerDBBaseInfo, 0); //Experience
				Write32(pPlayerDBBaseInfo, 0); //SuperMoney
				Write32(pPlayerDBBaseInfo, 0); //Money
				WriteUn(pPlayerDBBaseInfo, 0); //WinNum
				Write32(pPlayerDBBaseInfo, 0); //SecondNum
				Write32(pPlayerDBBaseInfo, 0); //ThirdNum
				WriteUn(pPlayerDBBaseInfo, 0); //TotalNum
				Write32(pPlayerDBBaseInfo, 0); //CurHonor
				Write32(pPlayerDBBaseInfo, 0); //TotalHonor
				Write32(pPlayerDBBaseInfo, 0); //TodayHonor
				Write32(pPlayerDBBaseInfo, 0); //RelaxTime
				Write32(pPlayerDBBaseInfo, 0); //MonthDurationBefore
				Write32(pPlayerDBBaseInfo, 0); //MonthDurationCur
				Write32(pPlayerDBBaseInfo, 0); //Charm
				Write32(pPlayerDBBaseInfo, 0); //DurationGame
				Write32(pPlayerDBBaseInfo, 0); //DanceExp
				Write32(pPlayerDBBaseInfo, 0); //Coupons
				Write32(pPlayerDBBaseInfo, 0); //Admiration
				Write32(pPlayerDBBaseInfo, 0); //LuckMoney
				Write32(pPlayerDBBaseInfo, 0); //TeamWorkExp
				Write32(pPlayerDBBaseInfo, 0); //AchievePoint
				Write32(pPlayerDBBaseInfo, 0); //RegTime
				WriteString(pPlayerDBBaseInfo, 0); //Signature[]
				Write32(pPlayerDBBaseInfo, 0); //LuckyMatchPoint
				Write32(pPlayerDBBaseInfo, 0); //LuckyMatchNum
				Write16(pPlayerDBBaseInfo, 0); //LuckyMatchFirstNum
				Write8(pPlayerDBBaseInfo, 0); //LuckyMatchBestRand
				Write32(pPlayerDBBaseInfo, 0); //LuckyMatchWinNum
				Write32(pPlayerDBBaseInfo, 0); //FizzPointTotal
				Write16(pPlayerDBBaseInfo, 0); //FizzPointDaily
				Write16(pPlayerDBBaseInfo, 0); //FizzPointWeekly
				Write16(pPlayerDBBaseInfo, 0); //FizzPointLastWeek
				Write8(pPlayerDBBaseInfo, 0); //FizzLotteryStatus
				Write32(pPlayerDBBaseInfo, 0); //FizzLastUpdateTime
				Write32(pPlayerDBBaseInfo, 0); //SNSLocaleCode
				Write32(pPlayerDBBaseInfo, 0); //AuctionRightUnlockTime
				Write8(pPlayerDBBaseInfo, 0); //ReserveFlag
				Write32(pPlayerDBBaseInfo, 0); //CurConsumeScore
				Write32(pPlayerDBBaseInfo, 0); //HistoryConsumeScore
				Write8(pPlayerDBBaseInfo, 0); //CrashModeSponsorID
				Write32(pPlayerDBBaseInfo, 0); //Popularity
				Write32(pPlayerDBBaseInfo, 0); //LadderMatchAchievePoint
				Write32(pPlayerDBBaseInfo, 0); //Cash
				Write32(pPlayerDBBaseInfo, 0); //PlayerGPMIdentity
				Write32(pPlayerDBBaseInfo, 0); //PointTotalScore
				WriteUn(pPlayerDBBaseInfo, 0); //totalMapMedalNum
				WriteUn(pPlayerDBBaseInfo, 0); //lastMapMedalNum
				WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalNum
				WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalSeasonId
				WriteUn(pPlayerDBBaseInfo, 0); //lastClearMapMedalTime
				WriteUn(pPlayerDBBaseInfo, 0); //max2048Score
				WriteUn(pPlayerDBBaseInfo, 0); //curPlay2048LeftNum
				Write32(pPlayerDBBaseInfo, 0); //CheerValue
				Write16(pPlayerDBBaseInfo, 0); //SeasonID
				Write32(pPlayerDBBaseInfo, 0); //LastCheerValue
				Write32(pPlayerDBBaseInfo, 0); //SpeedBean
				Write32(pPlayerDBBaseInfo, 0); //SpeedCoin

				len = pPlayerDBBaseInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			{ //PlayerGuildInfo
				BYTE* pPlayerGuildInfo = pHeroVisbleInfo;
				Write16(pPlayerGuildInfo, 0); //len

				WriteString(pPlayerGuildInfo, 0); //GuildName[]
				Write16(pPlayerGuildInfo, 0); //Duty
				Write32(pPlayerGuildInfo, 0); //GuildID
				Write32(pPlayerGuildInfo, 0); //Right
				Write32(pPlayerGuildInfo, 0); //Medal
				Write32(pPlayerGuildInfo, 0); //Contribute
				WriteString(pPlayerGuildInfo, 0); //DutyTitle[]

				len = pPlayerGuildInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write16(pHeroVisbleInfo, 0); //EquipedItemNum
			for (size_t i = 0; i < n; i++)
			{ //PlayerItemInfo
				BYTE* pPlayerItemInfo = pHeroVisbleInfo;
				Write16(pPlayerItemInfo, 0); //len

				Write32(pPlayerItemInfo, 0); //ItemID
				Write32(pPlayerItemInfo, 0); //ItemNum
				Write32(pPlayerItemInfo, 0); //AvailPeriod
				Write8(pPlayerItemInfo, 0); //Status
				WriteUn(pPlayerItemInfo, 0); //ObtainTime
				Write32(pPlayerItemInfo, 0); //OtherAttribute
				Write16(pPlayerItemInfo, 0); //ItemType

				len = pPlayerItemInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write16(pHeroVisbleInfo, 0); //PetNum
			for (size_t i = 0; i < n; i++)
			{ //PetInfo
				BYTE* pPetInfo = pHeroVisbleInfo;
				Write16(pPetInfo, 0); //len

				Write32(pPetInfo, 0); //Uin
				Write32(pPetInfo, 0); //PetId
				WriteString(pPetInfo, 0); //PetName[]
				Write8(pPetInfo, 0); //IsProper
				Write16(pPetInfo, 0); //Level
				Write8(pPetInfo, 0); //Status
				Write16(pPetInfo, 0); //PetSkillNum
				for (size_t i = 0; i < n; i++)
				{ //PetSkillList
					BYTE* pPetSkillList = pPetInfo;
					Write16(pPetSkillList, 0); //len

					Write16(pPetSkillList, 0); //SkillID
					Write8(pPetSkillList, 0); //Status
					Write8(pPetSkillList, 0); //Active
					Write32(pPetSkillList, 0); //Value

					len = pPetSkillList - pPetInfo;
					Set16(pPetInfo, (WORD)len);
					pPetInfo += len;
				}
				Write32(pPetInfo, 0); //StrengLevel
				Write8(pPetInfo, 0); //TopStatus
				{ //CommonInfo
					BYTE* pCommonInfo = pPetInfo;
					Write16(pCommonInfo, 0); //len

					Write32(pCommonInfo, 0); //HuanHuaLevel
					Write8(pCommonInfo, 0); //CanHuanHua

					len = pCommonInfo - pPetInfo;
					Set16(pPetInfo, (WORD)len);
					pPetInfo += len;
				}
				Write16(pPetInfo, 0); //PKStar
				Write32(pPetInfo, 0); //PetSkinID

				len = pPetInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			{ //PlayerGuildMatchInfo
				BYTE* pPlayerGuildMatchInfo = pHeroVisbleInfo;
				Write16(pPlayerGuildMatchInfo, 0); //len

				Write32(pPlayerGuildMatchInfo, 0); //SelfPoint
				Write32(pPlayerGuildMatchInfo, 0); //WinNum
				Write32(pPlayerGuildMatchInfo, 0); //TotalNum

				len = pPlayerGuildMatchInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //IsInTopList
			Write8(pHeroVisbleInfo, 0); //LoverRaceOrPro
			Write8(pHeroVisbleInfo, 0); //TmpEffectNum
			Write32(pHeroVisbleInfo, 0); //TmpEffectItems[]
			Write8(pHeroVisbleInfo, 0); //OBState
			Write8(pHeroVisbleInfo, 0); //DebutOrX5
			Write8(pHeroVisbleInfo, 0); //RandKeyFlag
			WriteUn(pHeroVisbleInfo, 0); //VipFlag
			Write8(pHeroVisbleInfo, 0); //HaveAppellation
			for (size_t i = 0; i < n; i++)
			{ //CurAppellation
				BYTE* pCurAppellation = pHeroVisbleInfo;
				Write16(pCurAppellation, 0); //len

				Write8(pCurAppellation, 0); //Type
				Write8(pCurAppellation, 0); //Level
				Write8(pCurAppellation, 0); //Status
				Write8(pCurAppellation, 0); //Difficulty
				Write32(pCurAppellation, 0); //MapId
				Write32(pCurAppellation, 0); //Value

				len = pCurAppellation - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			{ //NobleInfo
				BYTE* pNobleInfo = pHeroVisbleInfo;
				Write16(pNobleInfo, 0); //len

				Write32(pNobleInfo, 0); //NobleID
				Write8(pNobleInfo, 0); //NobleLevel
				Write32(pNobleInfo, 0); //NoblePoint
				Write32(pNobleInfo, 0); //NobleLeftDays

				len = pNobleInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //HasCarryWizard
			for (size_t i = 0; i < n; i++)
			{ //CarryWizardInfo
				BYTE* pCarryWizardInfo = pHeroVisbleInfo;
				Write16(pCarryWizardInfo, 0); //len

				Write16(pCarryWizardInfo, 0); //WizardID
				WriteString(pCarryWizardInfo, 0); //NickName[]
				Write16(pCarryWizardInfo, 0); //WizardType
				Write8(pCarryWizardInfo, 0); //Order
				Write8(pCarryWizardInfo, 0); //EvolutionBranch
				Write8(pCarryWizardInfo, 0); //IsHuanHua

				len = pCarryWizardInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			{ //GuildVipBaseInfo
				BYTE* pGuildVipBaseInfo = pHeroVisbleInfo;
				Write16(pGuildVipBaseInfo, 0); //len

				Write8(pGuildVipBaseInfo, 0); //GuildVipLevel
				Write32(pGuildVipBaseInfo, 0); //GuildVipPoint

				len = pGuildVipBaseInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write32(pHeroVisbleInfo, 0); //ExFlag
			Write8(pHeroVisbleInfo, 0); //HaveLDMBaseInfo
			for (size_t i = 0; i < n; i++)
			{ //PlayerLDMBaseInfo
				BYTE* pPlayerLDMBaseInfo = pHeroVisbleInfo;
				Write16(pPlayerLDMBaseInfo, 0); //len

				Write8(pPlayerLDMBaseInfo, 0); //Grade
				Write32(pPlayerLDMBaseInfo, 0); //Score
				Write32(pPlayerLDMBaseInfo, 0); //MaxScore
				Write32(pPlayerLDMBaseInfo, 0); //MaxGrade

				len = pPlayerLDMBaseInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //HasWl
			for (size_t i = 0; i < n; i++)
			{ //PlayerWlVisibleInfo
				BYTE* pPlayerWlVisibleInfo = pHeroVisbleInfo;
				Write16(pPlayerWlVisibleInfo, 0); //len

				Write32(pPlayerWlVisibleInfo, 0); //WonderLandID
				WriteString(pPlayerWlVisibleInfo, 0); //WonderLandName[]
				Write16(pPlayerWlVisibleInfo, 0); //WonderLandDuty
				Write8(pPlayerWlVisibleInfo, 0); //SubType
				Write8(pPlayerWlVisibleInfo, 0); //GuildGrade

				len = pPlayerWlVisibleInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //HasLoverVip
			for (size_t i = 0; i < n; i++)
			{ //LoverVipInfo
				BYTE* pLoverVipInfo = pHeroVisbleInfo;
				Write16(pLoverVipInfo, 0); //len

				Write8(pLoverVipInfo, 0); //LoverVipLevel
				Write32(pLoverVipInfo, 0); //LoverVipPoint
				Write8(pLoverVipInfo, 0); //GrowRate

				len = pLoverVipInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //HasBattleModeSkillInfoList
			for (size_t i = 0; i < n; i++)
			{ //BattleModeSkillInfoList
				BYTE* pBattleModeSkillInfoList = pHeroVisbleInfo;
				Write16(pBattleModeSkillInfoList, 0); //len

				Write8(pBattleModeSkillInfoList, 0); //SkillNum
				for (size_t i = 0; i < n; i++)
				{ //SkillInfo
					BYTE* pSkillInfo = pBattleModeSkillInfoList;
					Write16(pSkillInfo, 0); //len

					Write16(pSkillInfo, 0); //SkillId
					Write8(pSkillInfo, 0); //SkillLevel

					len = pSkillInfo - pBattleModeSkillInfoList;
					Set16(pBattleModeSkillInfoList, (WORD)len);
					pBattleModeSkillInfoList += len;
				}

				len = pBattleModeSkillInfoList - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //HasGarden
			for (size_t i = 0; i < n; i++)
			{ //PersonalGardenBaseInfo
				BYTE* pPersonalGardenBaseInfo = pHeroVisbleInfo;
				Write16(pPersonalGardenBaseInfo, 0); //len

				Write8(pPersonalGardenBaseInfo, 0); //GardenLevel
				Write32(pPersonalGardenBaseInfo, 0); //GardenPoint
				Write8(pPersonalGardenBaseInfo, 0); //GrowRate
				Write32(pPersonalGardenBaseInfo, 0); //GardenExpireTime
				{ //SimpleInfo
					BYTE* pSimpleInfo = pPersonalGardenBaseInfo;
					Write16(pSimpleInfo, 0); //len

					Write32(pSimpleInfo, 0); //WeekPopularity
					Write32(pSimpleInfo, 0); //TotalPopularity
					Write32(pSimpleInfo, 0); //LastUpdatePopularityTime
					Write8(pSimpleInfo, 0); //PrivateType

					len = pSimpleInfo - pPersonalGardenBaseInfo;
					Set16(pPersonalGardenBaseInfo, (WORD)len);
					pPersonalGardenBaseInfo += len;
				}

				len = pPersonalGardenBaseInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			{ //ConsumeVipInfo
				BYTE* pConsumeVipInfo = pHeroVisbleInfo;
				Write16(pConsumeVipInfo, 0); //len

				WriteUn(pConsumeVipInfo, 0); //VipLevel
				WriteUn(pConsumeVipInfo, 0); //CharmValueOfMonth
				WriteUn(pConsumeVipInfo, 0); //SearchTreasureNums
				WriteUn(pConsumeVipInfo, 0); //GetTreasureNums

				len = pConsumeVipInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //HaveBaby
			{ //LoverBabyInfo
				BYTE* pLoverBabyInfo = pHeroVisbleInfo;
				Write16(pLoverBabyInfo, 0); //len

				Write32(pLoverBabyInfo, 0); //LoverBabyID
				Write32(pLoverBabyInfo, 0); //ItemID
				Write32(pLoverBabyInfo, 0); //GrowValue
				Write32(pLoverBabyInfo, 0); //MentalValue
				Write32(pLoverBabyInfo, 0); //BabyProfileLevel
				Write32(pLoverBabyInfo, 0); //StrengthLevel
				Write32(pLoverBabyInfo, 0); //GrowLevel
				WriteString(pLoverBabyInfo, 0); //LoveBabyNickName[]
				Write16(pLoverBabyInfo, 0); //LoverBabyStat
				Write16(pLoverBabyInfo, 0); //LoverBabyEquipStat
				Write16(pLoverBabyInfo, 0); //LoverBabyTransferdStatus

				len = pLoverBabyInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			{ //EmperorInfo
				BYTE* pEmperorInfo = pHeroVisbleInfo;
				Write16(pEmperorInfo, 0); //len

				Write8(pEmperorInfo, 0); //EmperorLevel
				Write32(pEmperorInfo, 0); //EmperorPoint
				Write32(pEmperorInfo, 0); //EmperorLeftDays
				Write8(pEmperorInfo, 0); //EmperorGrowRate

				len = pEmperorInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write16(pHeroVisbleInfo, 0); //RaceCardNums
			for (size_t i = 0; i < n; i++)
			{ //RaceCardAddValueInfo
				BYTE* pRaceCardAddValueInfo = pHeroVisbleInfo;
				Write16(pRaceCardAddValueInfo, 0); //len

				Write32(pRaceCardAddValueInfo, 0); //RaceCardID
				Write32(pRaceCardAddValueInfo, 0); //AddValue

				len = pRaceCardAddValueInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			{ //GansterScoreInfo
				BYTE* pGansterScoreInfo = pHeroVisbleInfo;
				Write16(pGansterScoreInfo, 0); //len

				Write32(pGansterScoreInfo, 0); //GansterSeasonID
				Write32(pGansterScoreInfo, 0); //GansterScore
				Write32(pGansterScoreInfo, 0); //PoliceScore
				Write32(pGansterScoreInfo, 0); //TotalGansterScore

				len = pGansterScoreInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write32(pHeroVisbleInfo, 0); //OlympicId
			Write32(pHeroVisbleInfo, 0); //NPCEliminateWinTimes
			Write8(pHeroVisbleInfo, 0); //OriginTeamID
			Write8(pHeroVisbleInfo, 0); //NxNpc
			Write16(pHeroVisbleInfo, 0); //NxNpcAILevel
			{ //EquippedActiveKartInfo
				BYTE* pEquippedActiveKartInfo = pHeroVisbleInfo;
				Write16(pEquippedActiveKartInfo, 0); //len

				Write8(pEquippedActiveKartInfo, 0); //HaveActiveInfo
				Write32(pEquippedActiveKartInfo, 0); //KartID
				Write32(pEquippedActiveKartInfo, 0); //ActiveLevel

				len = pEquippedActiveKartInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //SpecialActivityStatus
			Write8(pHeroVisbleInfo, 0); //AreaID
			Write8(pHeroVisbleInfo, 0); //HaveRaiseSecondBaby
			{ //SecondLoverBabyInfo
				BYTE* pSecondLoverBabyInfo = pHeroVisbleInfo;
				Write16(pSecondLoverBabyInfo, 0); //len

				Write32(pSecondLoverBabyInfo, 0); //LoverBabyID
				Write32(pSecondLoverBabyInfo, 0); //ItemID
				Write32(pSecondLoverBabyInfo, 0); //GrowValue
				Write32(pSecondLoverBabyInfo, 0); //MentalValue
				Write32(pSecondLoverBabyInfo, 0); //BabyProfileLevel
				Write32(pSecondLoverBabyInfo, 0); //StrengthLevel
				Write32(pSecondLoverBabyInfo, 0); //GrowLevel
				WriteString(pSecondLoverBabyInfo, 0); //LoveBabyNickName[]
				Write16(pSecondLoverBabyInfo, 0); //LoverBabyStat
				Write16(pSecondLoverBabyInfo, 0); //LoverBabyEquipStat
				Write16(pSecondLoverBabyInfo, 0); //LoverBabyTransferdStatus

				len = pSecondLoverBabyInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //HasRankedMatchInfo
			for (size_t i = 0; i < n; i++)
			{ //RankedMatchGradeInfo
				BYTE* pRankedMatchGradeInfo = pHeroVisbleInfo;
				Write16(pRankedMatchGradeInfo, 0); //len

				Write32(pRankedMatchGradeInfo, 0); //GradeLevel
				Write32(pRankedMatchGradeInfo, 0); //ChildLevel
				Write32(pRankedMatchGradeInfo, 0); //GradeScore
				Write32(pRankedMatchGradeInfo, 0); //MaxGradeScore
				Write32(pRankedMatchGradeInfo, 0); //TotalScore

				len = pRankedMatchGradeInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //HasHuanLingChangeInfo
			for (size_t i = 0; i < n; i++)
			{ //HuanLingSuitInfo
				BYTE* pHuanLingSuitInfo = pHeroVisbleInfo;
				Write16(pHuanLingSuitInfo, 0); //len

				Write32(pHuanLingSuitInfo, 0); //SuitID
				Write8(pHuanLingSuitInfo, 0); //ChangeLevel

				len = pHuanLingSuitInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //EquipSealType
			Write16(pHeroVisbleInfo, 0); //Role
			Write8(pHeroVisbleInfo, 0); //SpecialActivityIDNum
			Write8(pHeroVisbleInfo, 0); //CrewID
			Write8(pHeroVisbleInfo, 0); //SpecialActivityInfoNum
			for (size_t i = 0; i < n; i++)
			{ //SpecialActivityInfo
				BYTE* pSpecialActivityInfo = pHeroVisbleInfo;
				Write16(pSpecialActivityInfo, 0); //len

				Write8(pSpecialActivityInfo, 0); //ProfessionLicenseInfoNum
				for (size_t i = 0; i < n; i++)
				{ //ProfessionLicenseInfo
					BYTE* pProfessionLicenseInfo = pSpecialActivityInfo;
					Write16(pProfessionLicenseInfo, 0); //len

					Write8(pProfessionLicenseInfo, 0); //BigLevel
					Write8(pProfessionLicenseInfo, 0); //SmallLevel

					len = pProfessionLicenseInfo - pSpecialActivityInfo;
					Set16(pSpecialActivityInfo, (WORD)len);
					pSpecialActivityInfo += len;
				}

				len = pSpecialActivityInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //ParaNum
			Write32(pHeroVisbleInfo, 0); //ParaList[]
			Write8(pHeroVisbleInfo, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemOrder
				BYTE* pItemOrder = pHeroVisbleInfo;
				Write16(pItemOrder, 0); //len

				Write32(pItemOrder, 0); //KartID
				Write32(pItemOrder, 0); //Order
				Write32(pItemOrder, 0); //BackGroundID

				len = pItemOrder - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //TDCExcluItemNum
			Write32(pHeroVisbleInfo, 0); //TDCExclusiveItemID[]
			Write8(pHeroVisbleInfo, 0); //EquipNiChangItemNum
			for (size_t i = 0; i < n; i++)
			{ //NiChangPavilionEquipItemInfo
				BYTE* pNiChangPavilionEquipItemInfo = pHeroVisbleInfo;
				Write16(pNiChangPavilionEquipItemInfo, 0); //len

				Write32(pNiChangPavilionEquipItemInfo, 0); //ItemId
				Write16(pNiChangPavilionEquipItemInfo, 0); //CurrentEquipColorationPlanId

				len = pNiChangPavilionEquipItemInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //TestKartGameType
			Write32(pHeroVisbleInfo, 0); //GameTestKartID
			Write8(pHeroVisbleInfo, 0); //HasStarsFightingInfo
			for (size_t i = 0; i < n; i++)
			{ //StarsFightingInfo
				BYTE* pStarsFightingInfo = pHeroVisbleInfo;
				Write16(pStarsFightingInfo, 0); //len

				Write32(pStarsFightingInfo, 0); //Star
				Write32(pStarsFightingInfo, 0); //StarVal
				Write32(pStarsFightingInfo, 0); //StarsFightingStarLevel

				len = pStarsFightingInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //RoomBGSetting

			len = pHeroVisbleInfo - pHeroInfo;
			Set16(pHeroInfo, (WORD)len);
			pHeroInfo += len;
		}
		Write16(pHeroInfo, 0); //HeroEnterDelayTime

		len = pHeroInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //RelationHeroCount
	for (size_t i = 0; i < n; i++)
	{ //PlayerRelationInfo
		BYTE* pPlayerRelationInfo = p;
		Write16(pPlayerRelationInfo, 0); //len

		Write32(pPlayerRelationInfo, 0); //SrcUin
		Write32(pPlayerRelationInfo, 0); //RelationFlag
		Write32(pPlayerRelationInfo, 0); //RelationUin
		WriteString(pPlayerRelationInfo, 0); //RelationNickName[]
		Write32(pPlayerRelationInfo, 0); //EngageTime
		Write32(pPlayerRelationInfo, 0); //NextCanBookingTimeLimit
		Write32(pPlayerRelationInfo, 0); //BeginHoneyMoonTime
		Write32(pPlayerRelationInfo, 0); //EndHoneyMoonTime
		Write8(pPlayerRelationInfo, 0); //EngageFlag

		len = pPlayerRelationInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //KartNum
	for (size_t i = 0; i < n; i++)
	{ //KartRefitInfo
		BYTE* pKartRefitInfo = p;
		Write16(pKartRefitInfo, 0); //len

		Write32(pKartRefitInfo, 0); //Uin
		Write32(pKartRefitInfo, 0); //KartId
		Write32(pKartRefitInfo, 0); //RefitCout
		Write16(pKartRefitInfo, 0); //MaxFlags
		Write16(pKartRefitInfo, 0); //WWeight
		Write16(pKartRefitInfo, 0); //SpeedWeight
		Write16(pKartRefitInfo, 0); //JetWeight
		Write16(pKartRefitInfo, 0); //SJetWeight
		Write16(pKartRefitInfo, 0); //AccuWeight
		Write32(pKartRefitInfo, 0); //ShapeRefitCount
		Write32(pKartRefitInfo, 0); //KartHeadRefitItemID
		Write32(pKartRefitInfo, 0); //KartTailRefitItemID
		Write32(pKartRefitInfo, 0); //KartFlankRefitItemID
		Write32(pKartRefitInfo, 0); //KartTireRefitItemID
		Write32(pKartRefitInfo, 0); //SecondRefitCount
		Write16(pKartRefitInfo, 0); //Speed2Weight
		Write16(pKartRefitInfo, 0); //DriftVecWeight
		Write16(pKartRefitInfo, 0); //AdditionalZSpeedWeight
		Write16(pKartRefitInfo, 0); //AntiCollisionWeight
		Write16(pKartRefitInfo, 0); //LuckyValue
		Write16(pKartRefitInfo, 0); //RefitLuckyValueMaxWeight
		Write32(pKartRefitInfo, 0); //ShapeSuitID
		Write8(pKartRefitInfo, 0); //LegendSuitLevel
		Write32(pKartRefitInfo, 0); //LegendSuitLevelChoice
		Write32(pKartRefitInfo, 0); //ShapeLegendSuitID

		len = pKartRefitInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //HammerCount
	for (size_t i = 0; i < n; i++)
	{ //EquipedHammer
		BYTE* pEquipedHammer = p;
		Write16(pEquipedHammer, 0); //len

		Write32(pEquipedHammer, 0); //EquipedHammerID

		len = pEquipedHammer - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //StealPigCount
	for (size_t i = 0; i < n; i++)
	{ //StealPig
		BYTE* pStealPig = p;
		Write16(pStealPig, 0); //len

		Write8(pStealPig, 0); //Status
		Write8(pStealPig, 0); //PigPos
		Write32(pStealPig, 0); //ItemID
		Write8(pStealPig, 0); //PigNum

		len = pStealPig - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //MaxHeroNumInRoom
	{ //PersonalGardenInfo
		BYTE* pPersonalGardenInfo = p;
		Write16(pPersonalGardenInfo, 0); //len

		Write32(pPersonalGardenInfo, 0); //OwnerUin
		WriteString(pPersonalGardenInfo, 0); //NickName[]
		WriteString(pPersonalGardenInfo, 0); //GardenName[]
		{ //BaseInfo
			BYTE* pBaseInfo = pPersonalGardenInfo;
			Write16(pBaseInfo, 0); //len

			Write8(pBaseInfo, 0); //GardenLevel
			Write32(pBaseInfo, 0); //GardenPoint
			Write8(pBaseInfo, 0); //GrowRate
			Write32(pBaseInfo, 0); //GardenExpireTime
			{ //SimpleInfo
				BYTE* pSimpleInfo = pBaseInfo;
				Write16(pSimpleInfo, 0); //len

				Write32(pSimpleInfo, 0); //WeekPopularity
				Write32(pSimpleInfo, 0); //TotalPopularity
				Write32(pSimpleInfo, 0); //LastUpdatePopularityTime
				Write8(pSimpleInfo, 0); //PrivateType

				len = pSimpleInfo - pBaseInfo;
				Set16(pBaseInfo, (WORD)len);
				pBaseInfo += len;
			}

			len = pBaseInfo - pPersonalGardenInfo;
			Set16(pPersonalGardenInfo, (WORD)len);
			pPersonalGardenInfo += len;
		}
		Write8(pPersonalGardenInfo, 0); //BuildingLevel
		Write8(pPersonalGardenInfo, 0); //PrivateType
		Write32(pPersonalGardenInfo, 0); //CreateTime
		{ //KartExhibition
			BYTE* pKartExhibition = pPersonalGardenInfo;
			Write16(pKartExhibition, 0); //len

			Write16(pKartExhibition, 0); //TNum
			Write16(pKartExhibition, 0); //SNum
			Write16(pKartExhibition, 0); //ANum
			Write8(pKartExhibition, 0); //KartAltasForbiddenFlag
			{ //GardenParkingList
				BYTE* pGardenParkingList = pKartExhibition;
				Write16(pGardenParkingList, 0); //len

				Write8(pGardenParkingList, 0); //ParkingNum
				for (size_t i = 0; i < n; i++)
				{ //ParkingList
					BYTE* pParkingList = pGardenParkingList;
					Write16(pParkingList, 0); //len

					Write8(pParkingList, 0); //Index
					Write8(pParkingList, 0); //Type
					Write32(pParkingList, 0); //KartID
					Write32(pParkingList, 0); //Uin
					WriteString(pParkingList, 0); //NickName[]
					Write32(pParkingList, 0); //ParkingTime
					Write32(pParkingList, 0); //RefitCount

					len = pParkingList - pGardenParkingList;
					Set16(pGardenParkingList, (WORD)len);
					pGardenParkingList += len;
				}

				len = pGardenParkingList - pKartExhibition;
				Set16(pKartExhibition, (WORD)len);
				pKartExhibition += len;
			}
			Write32(pKartExhibition, 0); //LastReceiveAwardTime

			len = pKartExhibition - pPersonalGardenInfo;
			Set16(pPersonalGardenInfo, (WORD)len);
			pPersonalGardenInfo += len;
		}
		{ //PetExhibition
			BYTE* pPetExhibition = pPersonalGardenInfo;
			Write16(pPetExhibition, 0); //len

			Write8(pPetExhibition, 0); //ShowNum
			for (size_t i = 0; i < n; i++)
			{ //ShowList
				BYTE* pShowList = pPetExhibition;
				Write16(pShowList, 0); //len

				Write8(pShowList, 0); //Index
				Write8(pShowList, 0); //Type
				Write32(pShowList, 0); //PetID
				Write32(pShowList, 0); //ShowTime
				Write16(pShowList, 0); //PetLevel
				Write8(pShowList, 0); //Status

				len = pShowList - pPetExhibition;
				Set16(pPetExhibition, (WORD)len);
				pPetExhibition += len;
			}

			len = pPetExhibition - pPersonalGardenInfo;
			Set16(pPersonalGardenInfo, (WORD)len);
			pPersonalGardenInfo += len;
		}

		len = pPersonalGardenInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //ServerTime
	Write8(p, 0); //AwardGardenPopularity
	Write16(p, 0); //SuperShoeCount
	for (size_t i = 0; i < n; i++)
	{ //EquipedSuperShoe
		BYTE* pEquipedSuperShoe = p;
		Write16(pEquipedSuperShoe, 0); //len

		Write32(pEquipedSuperShoe, 0); //EquipedSuperShoeID

		len = pEquipedSuperShoe - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasSailTreasureInfo
	for (size_t i = 0; i < n; i++)
	{ //SailTreasureInfo
		BYTE* pSailTreasureInfo = p;
		Write16(pSailTreasureInfo, 0); //len

		Write32(pSailTreasureInfo, 0); //SailCountWeekly
		Write32(pSailTreasureInfo, 0); //SailCountDaily_Common
		Write32(pSailTreasureInfo, 0); //WeekAwardReceiveStatus
		Write32(pSailTreasureInfo, 0); //GetTreasureBoxDaily
		Write32(pSailTreasureInfo, 0); //WorshipCountDaily

		len = pSailTreasureInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //ChatAreaId
	Write32(p, 0); //EmojiNum
	Write32(p, 0); //EmojiID[]
	Write8(p, 0); //AdNum
	for (size_t i = 0; i < n; i++)
	{ //Ad
		BYTE* pAd = p;
		Write16(pAd, 0); //len

		Write8(pAd, 0); //AdLen

		len = pAd - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //EnableAutoPrepare
	Write8(p, 0); //EnableAutoStart
	WriteUn(p, 0); //aui3DRoomBoxID[]
	for (size_t i = 0; i < n; i++)
	{ //ast3DRoomBox
		BYTE* past3DRoomBox = p;
		Write16(past3DRoomBox, 0); //len

		Write8(past3DRoomBox, 0); //AwardNum
		for (size_t i = 0; i < n; i++)
		{ //ast3DRoomBoxAward
			BYTE* past3DRoomBoxAward = past3DRoomBox;
			Write16(past3DRoomBoxAward, 0); //len

			Write8(past3DRoomBoxAward, 0); //IsBest
			{ //AwardToClient
				BYTE* pAwardToClient = past3DRoomBoxAward;
				Write16(pAwardToClient, 0); //len

				Write32(pAwardToClient, 0); //Exp
				Write32(pAwardToClient, 0); //Money
				Write32(pAwardToClient, 0); //SuperMoney
				Write16(pAwardToClient, 0); //ItemNum
				for (size_t i = 0; i < n; i++)
				{ //ItemInfo
					BYTE* pItemInfo = pAwardToClient;
					Write16(pItemInfo, 0); //len

					Write32(pItemInfo, 0); //ItemID
					Write32(pItemInfo, 0); //ItemNum
					Write32(pItemInfo, 0); //AvailPeriod
					Write8(pItemInfo, 0); //Status
					WriteUn(pItemInfo, 0); //ObtainTime
					Write32(pItemInfo, 0); //OtherAttribute
					Write16(pItemInfo, 0); //ItemType

					len = pItemInfo - pAwardToClient;
					Set16(pAwardToClient, (WORD)len);
					pAwardToClient += len;
				}
				Write32(pAwardToClient, 0); //Coupons
				Write32(pAwardToClient, 0); //GuildPoint
				Write32(pAwardToClient, 0); //LuckMoney
				Write8(pAwardToClient, 0); //ExtendInfoNum
				for (size_t i = 0; i < n; i++)
				{ //ExtendInfoAward
					BYTE* pExtendInfoAward = pAwardToClient;
					Write16(pExtendInfoAward, 0); //len

					Write16(pExtendInfoAward, 0); //Key
					Write32(pExtendInfoAward, 0); //AddValue
					Write32(pExtendInfoAward, 0); //TotalValue
					Write8(pExtendInfoAward, 0); //ShowPriority
					Write16(pExtendInfoAward, 0); //BuyNeedScore
					Write8(pExtendInfoAward, 0); //OneMatchMaxNum

					len = pExtendInfoAward - pAwardToClient;
					Set16(pAwardToClient, (WORD)len);
					pAwardToClient += len;
				}
				Write32(pAwardToClient, 0); //SpeedCoin

				len = pAwardToClient - past3DRoomBoxAward;
				Set16(past3DRoomBoxAward, (WORD)len);
				past3DRoomBoxAward += len;
			}

			len = past3DRoomBoxAward - past3DRoomBox;
			Set16(past3DRoomBox, (WORD)len);
			past3DRoomBox += len;
		}

		len = past3DRoomBox - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //ChallengeTaskID
	Write8(p, 0); //ChallengeTaskFlag
	Write8(p, 0); //RoomType
	Write8(p, 0); //SyncType
	Write16(p, 0); //ReportPosSpan
	Write16(p, 0); //BroadcastPosSpan
	Write8(p, 0); //UseNewPathFind
	Write16(p, 0); //RandomGenSceneItemNum
	Write32(p, 0); //SceneItemList[]

	len = p - buf;
	SendToClient(Client, 352, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyChatGameBegin(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //PlayerNum
	for (size_t i = 0; i < n; i++)
	{ //PlayerInfo
		BYTE* pPlayerInfo = p;
		Write16(pPlayerInfo, 0); //len

		{ //HeroMoveInfo
			BYTE* pHeroMoveInfo = pPlayerInfo;
			Write16(pHeroMoveInfo, 0); //len

			Write32(pHeroMoveInfo, 0); //Uin
			Write8(pHeroMoveInfo, 0); //WalkStatue
			Write32(pHeroMoveInfo, 0); //Posion[]
			Write32(pHeroMoveInfo, 0); //Ori[]
			Write32(pHeroMoveInfo, 0); //AttachUin
			Write32(pHeroMoveInfo, 0); //WalkExtState
			Write8(pHeroMoveInfo, 0); //Nums
			Write32(pHeroMoveInfo, 0); //PermitSitHorsePetUins[]
			Write32(pHeroMoveInfo, 0); //EquipedPetID
			Write32(pHeroMoveInfo, 0); //EquipedPetStatus
			Write32(pHeroMoveInfo, 0); //PetPKResultStatus
			Write16(pHeroMoveInfo, 0); //HeroMajorState
			Write16(pHeroMoveInfo, 0); //HorsePetStatus

			len = pHeroMoveInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		Write32(pPlayerInfo, 0); //NextPoint
		Write16(pPlayerInfo, 0); //PathLen
		Write32(pPlayerInfo, 0); //Path[]
		{ //HeroVisbleInfo
			BYTE* pHeroVisbleInfo = pPlayerInfo;
			Write16(pHeroVisbleInfo, 0); //len

			WriteUn(pHeroVisbleInfo, 0); //Uin
			WriteUn(pHeroVisbleInfo, 0); //Identity
			Write8(pHeroVisbleInfo, 0); //SeatID
			Write8(pHeroVisbleInfo, 0); //TeamID
			Write16(pHeroVisbleInfo, 0); //PlayerID
			Write8(pHeroVisbleInfo, 0); //Status
			{ //PlayerDBBaseInfo
				BYTE* pPlayerDBBaseInfo = pHeroVisbleInfo;
				Write16(pPlayerDBBaseInfo, 0); //len

				WriteString(pPlayerDBBaseInfo, 0); //NickName[]
				Write8(pPlayerDBBaseInfo, 0); //Gender
				Write8(pPlayerDBBaseInfo, 0); //Country
				Write32(pPlayerDBBaseInfo, 0); //License
				WriteUn(pPlayerDBBaseInfo, 0); //Experience
				Write32(pPlayerDBBaseInfo, 0); //SuperMoney
				Write32(pPlayerDBBaseInfo, 0); //Money
				WriteUn(pPlayerDBBaseInfo, 0); //WinNum
				Write32(pPlayerDBBaseInfo, 0); //SecondNum
				Write32(pPlayerDBBaseInfo, 0); //ThirdNum
				WriteUn(pPlayerDBBaseInfo, 0); //TotalNum
				Write32(pPlayerDBBaseInfo, 0); //CurHonor
				Write32(pPlayerDBBaseInfo, 0); //TotalHonor
				Write32(pPlayerDBBaseInfo, 0); //TodayHonor
				Write32(pPlayerDBBaseInfo, 0); //RelaxTime
				Write32(pPlayerDBBaseInfo, 0); //MonthDurationBefore
				Write32(pPlayerDBBaseInfo, 0); //MonthDurationCur
				Write32(pPlayerDBBaseInfo, 0); //Charm
				Write32(pPlayerDBBaseInfo, 0); //DurationGame
				Write32(pPlayerDBBaseInfo, 0); //DanceExp
				Write32(pPlayerDBBaseInfo, 0); //Coupons
				Write32(pPlayerDBBaseInfo, 0); //Admiration
				Write32(pPlayerDBBaseInfo, 0); //LuckMoney
				Write32(pPlayerDBBaseInfo, 0); //TeamWorkExp
				Write32(pPlayerDBBaseInfo, 0); //AchievePoint
				Write32(pPlayerDBBaseInfo, 0); //RegTime
				WriteString(pPlayerDBBaseInfo, 0); //Signature[]
				Write32(pPlayerDBBaseInfo, 0); //LuckyMatchPoint
				Write32(pPlayerDBBaseInfo, 0); //LuckyMatchNum
				Write16(pPlayerDBBaseInfo, 0); //LuckyMatchFirstNum
				Write8(pPlayerDBBaseInfo, 0); //LuckyMatchBestRand
				Write32(pPlayerDBBaseInfo, 0); //LuckyMatchWinNum
				Write32(pPlayerDBBaseInfo, 0); //FizzPointTotal
				Write16(pPlayerDBBaseInfo, 0); //FizzPointDaily
				Write16(pPlayerDBBaseInfo, 0); //FizzPointWeekly
				Write16(pPlayerDBBaseInfo, 0); //FizzPointLastWeek
				Write8(pPlayerDBBaseInfo, 0); //FizzLotteryStatus
				Write32(pPlayerDBBaseInfo, 0); //FizzLastUpdateTime
				Write32(pPlayerDBBaseInfo, 0); //SNSLocaleCode
				Write32(pPlayerDBBaseInfo, 0); //AuctionRightUnlockTime
				Write8(pPlayerDBBaseInfo, 0); //ReserveFlag
				Write32(pPlayerDBBaseInfo, 0); //CurConsumeScore
				Write32(pPlayerDBBaseInfo, 0); //HistoryConsumeScore
				Write8(pPlayerDBBaseInfo, 0); //CrashModeSponsorID
				Write32(pPlayerDBBaseInfo, 0); //Popularity
				Write32(pPlayerDBBaseInfo, 0); //LadderMatchAchievePoint
				Write32(pPlayerDBBaseInfo, 0); //Cash
				Write32(pPlayerDBBaseInfo, 0); //PlayerGPMIdentity
				Write32(pPlayerDBBaseInfo, 0); //PointTotalScore
				WriteUn(pPlayerDBBaseInfo, 0); //totalMapMedalNum
				WriteUn(pPlayerDBBaseInfo, 0); //lastMapMedalNum
				WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalNum
				WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalSeasonId
				WriteUn(pPlayerDBBaseInfo, 0); //lastClearMapMedalTime
				WriteUn(pPlayerDBBaseInfo, 0); //max2048Score
				WriteUn(pPlayerDBBaseInfo, 0); //curPlay2048LeftNum
				Write32(pPlayerDBBaseInfo, 0); //CheerValue
				Write16(pPlayerDBBaseInfo, 0); //SeasonID
				Write32(pPlayerDBBaseInfo, 0); //LastCheerValue
				Write32(pPlayerDBBaseInfo, 0); //SpeedBean
				Write32(pPlayerDBBaseInfo, 0); //SpeedCoin

				len = pPlayerDBBaseInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			{ //PlayerGuildInfo
				BYTE* pPlayerGuildInfo = pHeroVisbleInfo;
				Write16(pPlayerGuildInfo, 0); //len

				WriteString(pPlayerGuildInfo, 0); //GuildName[]
				Write16(pPlayerGuildInfo, 0); //Duty
				Write32(pPlayerGuildInfo, 0); //GuildID
				Write32(pPlayerGuildInfo, 0); //Right
				Write32(pPlayerGuildInfo, 0); //Medal
				Write32(pPlayerGuildInfo, 0); //Contribute
				WriteString(pPlayerGuildInfo, 0); //DutyTitle[]

				len = pPlayerGuildInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write16(pHeroVisbleInfo, 0); //EquipedItemNum
			for (size_t i = 0; i < n; i++)
			{ //PlayerItemInfo
				BYTE* pPlayerItemInfo = pHeroVisbleInfo;
				Write16(pPlayerItemInfo, 0); //len

				Write32(pPlayerItemInfo, 0); //ItemID
				Write32(pPlayerItemInfo, 0); //ItemNum
				Write32(pPlayerItemInfo, 0); //AvailPeriod
				Write8(pPlayerItemInfo, 0); //Status
				WriteUn(pPlayerItemInfo, 0); //ObtainTime
				Write32(pPlayerItemInfo, 0); //OtherAttribute
				Write16(pPlayerItemInfo, 0); //ItemType

				len = pPlayerItemInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write16(pHeroVisbleInfo, 0); //PetNum
			for (size_t i = 0; i < n; i++)
			{ //PetInfo
				BYTE* pPetInfo = pHeroVisbleInfo;
				Write16(pPetInfo, 0); //len

				Write32(pPetInfo, 0); //Uin
				Write32(pPetInfo, 0); //PetId
				WriteString(pPetInfo, 0); //PetName[]
				Write8(pPetInfo, 0); //IsProper
				Write16(pPetInfo, 0); //Level
				Write8(pPetInfo, 0); //Status
				Write16(pPetInfo, 0); //PetSkillNum
				for (size_t i = 0; i < n; i++)
				{ //PetSkillList
					BYTE* pPetSkillList = pPetInfo;
					Write16(pPetSkillList, 0); //len

					Write16(pPetSkillList, 0); //SkillID
					Write8(pPetSkillList, 0); //Status
					Write8(pPetSkillList, 0); //Active
					Write32(pPetSkillList, 0); //Value

					len = pPetSkillList - pPetInfo;
					Set16(pPetInfo, (WORD)len);
					pPetInfo += len;
				}
				Write32(pPetInfo, 0); //StrengLevel
				Write8(pPetInfo, 0); //TopStatus
				{ //CommonInfo
					BYTE* pCommonInfo = pPetInfo;
					Write16(pCommonInfo, 0); //len

					Write32(pCommonInfo, 0); //HuanHuaLevel
					Write8(pCommonInfo, 0); //CanHuanHua

					len = pCommonInfo - pPetInfo;
					Set16(pPetInfo, (WORD)len);
					pPetInfo += len;
				}
				Write16(pPetInfo, 0); //PKStar
				Write32(pPetInfo, 0); //PetSkinID

				len = pPetInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			{ //PlayerGuildMatchInfo
				BYTE* pPlayerGuildMatchInfo = pHeroVisbleInfo;
				Write16(pPlayerGuildMatchInfo, 0); //len

				Write32(pPlayerGuildMatchInfo, 0); //SelfPoint
				Write32(pPlayerGuildMatchInfo, 0); //WinNum
				Write32(pPlayerGuildMatchInfo, 0); //TotalNum

				len = pPlayerGuildMatchInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //IsInTopList
			Write8(pHeroVisbleInfo, 0); //LoverRaceOrPro
			Write8(pHeroVisbleInfo, 0); //TmpEffectNum
			Write32(pHeroVisbleInfo, 0); //TmpEffectItems[]
			Write8(pHeroVisbleInfo, 0); //OBState
			Write8(pHeroVisbleInfo, 0); //DebutOrX5
			Write8(pHeroVisbleInfo, 0); //RandKeyFlag
			WriteUn(pHeroVisbleInfo, 0); //VipFlag
			Write8(pHeroVisbleInfo, 0); //HaveAppellation
			for (size_t i = 0; i < n; i++)
			{ //CurAppellation
				BYTE* pCurAppellation = pHeroVisbleInfo;
				Write16(pCurAppellation, 0); //len

				Write8(pCurAppellation, 0); //Type
				Write8(pCurAppellation, 0); //Level
				Write8(pCurAppellation, 0); //Status
				Write8(pCurAppellation, 0); //Difficulty
				Write32(pCurAppellation, 0); //MapId
				Write32(pCurAppellation, 0); //Value

				len = pCurAppellation - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			{ //NobleInfo
				BYTE* pNobleInfo = pHeroVisbleInfo;
				Write16(pNobleInfo, 0); //len

				Write32(pNobleInfo, 0); //NobleID
				Write8(pNobleInfo, 0); //NobleLevel
				Write32(pNobleInfo, 0); //NoblePoint
				Write32(pNobleInfo, 0); //NobleLeftDays

				len = pNobleInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //HasCarryWizard
			for (size_t i = 0; i < n; i++)
			{ //CarryWizardInfo
				BYTE* pCarryWizardInfo = pHeroVisbleInfo;
				Write16(pCarryWizardInfo, 0); //len

				Write16(pCarryWizardInfo, 0); //WizardID
				WriteString(pCarryWizardInfo, 0); //NickName[]
				Write16(pCarryWizardInfo, 0); //WizardType
				Write8(pCarryWizardInfo, 0); //Order
				Write8(pCarryWizardInfo, 0); //EvolutionBranch
				Write8(pCarryWizardInfo, 0); //IsHuanHua

				len = pCarryWizardInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			{ //GuildVipBaseInfo
				BYTE* pGuildVipBaseInfo = pHeroVisbleInfo;
				Write16(pGuildVipBaseInfo, 0); //len

				Write8(pGuildVipBaseInfo, 0); //GuildVipLevel
				Write32(pGuildVipBaseInfo, 0); //GuildVipPoint

				len = pGuildVipBaseInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write32(pHeroVisbleInfo, 0); //ExFlag
			Write8(pHeroVisbleInfo, 0); //HaveLDMBaseInfo
			for (size_t i = 0; i < n; i++)
			{ //PlayerLDMBaseInfo
				BYTE* pPlayerLDMBaseInfo = pHeroVisbleInfo;
				Write16(pPlayerLDMBaseInfo, 0); //len

				Write8(pPlayerLDMBaseInfo, 0); //Grade
				Write32(pPlayerLDMBaseInfo, 0); //Score
				Write32(pPlayerLDMBaseInfo, 0); //MaxScore
				Write32(pPlayerLDMBaseInfo, 0); //MaxGrade

				len = pPlayerLDMBaseInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //HasWl
			for (size_t i = 0; i < n; i++)
			{ //PlayerWlVisibleInfo
				BYTE* pPlayerWlVisibleInfo = pHeroVisbleInfo;
				Write16(pPlayerWlVisibleInfo, 0); //len

				Write32(pPlayerWlVisibleInfo, 0); //WonderLandID
				WriteString(pPlayerWlVisibleInfo, 0); //WonderLandName[]
				Write16(pPlayerWlVisibleInfo, 0); //WonderLandDuty
				Write8(pPlayerWlVisibleInfo, 0); //SubType
				Write8(pPlayerWlVisibleInfo, 0); //GuildGrade

				len = pPlayerWlVisibleInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //HasLoverVip
			for (size_t i = 0; i < n; i++)
			{ //LoverVipInfo
				BYTE* pLoverVipInfo = pHeroVisbleInfo;
				Write16(pLoverVipInfo, 0); //len

				Write8(pLoverVipInfo, 0); //LoverVipLevel
				Write32(pLoverVipInfo, 0); //LoverVipPoint
				Write8(pLoverVipInfo, 0); //GrowRate

				len = pLoverVipInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //HasBattleModeSkillInfoList
			for (size_t i = 0; i < n; i++)
			{ //BattleModeSkillInfoList
				BYTE* pBattleModeSkillInfoList = pHeroVisbleInfo;
				Write16(pBattleModeSkillInfoList, 0); //len

				Write8(pBattleModeSkillInfoList, 0); //SkillNum
				for (size_t i = 0; i < n; i++)
				{ //SkillInfo
					BYTE* pSkillInfo = pBattleModeSkillInfoList;
					Write16(pSkillInfo, 0); //len

					Write16(pSkillInfo, 0); //SkillId
					Write8(pSkillInfo, 0); //SkillLevel

					len = pSkillInfo - pBattleModeSkillInfoList;
					Set16(pBattleModeSkillInfoList, (WORD)len);
					pBattleModeSkillInfoList += len;
				}

				len = pBattleModeSkillInfoList - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //HasGarden
			for (size_t i = 0; i < n; i++)
			{ //PersonalGardenBaseInfo
				BYTE* pPersonalGardenBaseInfo = pHeroVisbleInfo;
				Write16(pPersonalGardenBaseInfo, 0); //len

				Write8(pPersonalGardenBaseInfo, 0); //GardenLevel
				Write32(pPersonalGardenBaseInfo, 0); //GardenPoint
				Write8(pPersonalGardenBaseInfo, 0); //GrowRate
				Write32(pPersonalGardenBaseInfo, 0); //GardenExpireTime
				{ //SimpleInfo
					BYTE* pSimpleInfo = pPersonalGardenBaseInfo;
					Write16(pSimpleInfo, 0); //len

					Write32(pSimpleInfo, 0); //WeekPopularity
					Write32(pSimpleInfo, 0); //TotalPopularity
					Write32(pSimpleInfo, 0); //LastUpdatePopularityTime
					Write8(pSimpleInfo, 0); //PrivateType

					len = pSimpleInfo - pPersonalGardenBaseInfo;
					Set16(pPersonalGardenBaseInfo, (WORD)len);
					pPersonalGardenBaseInfo += len;
				}

				len = pPersonalGardenBaseInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			{ //ConsumeVipInfo
				BYTE* pConsumeVipInfo = pHeroVisbleInfo;
				Write16(pConsumeVipInfo, 0); //len

				WriteUn(pConsumeVipInfo, 0); //VipLevel
				WriteUn(pConsumeVipInfo, 0); //CharmValueOfMonth
				WriteUn(pConsumeVipInfo, 0); //SearchTreasureNums
				WriteUn(pConsumeVipInfo, 0); //GetTreasureNums

				len = pConsumeVipInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //HaveBaby
			{ //LoverBabyInfo
				BYTE* pLoverBabyInfo = pHeroVisbleInfo;
				Write16(pLoverBabyInfo, 0); //len

				Write32(pLoverBabyInfo, 0); //LoverBabyID
				Write32(pLoverBabyInfo, 0); //ItemID
				Write32(pLoverBabyInfo, 0); //GrowValue
				Write32(pLoverBabyInfo, 0); //MentalValue
				Write32(pLoverBabyInfo, 0); //BabyProfileLevel
				Write32(pLoverBabyInfo, 0); //StrengthLevel
				Write32(pLoverBabyInfo, 0); //GrowLevel
				WriteString(pLoverBabyInfo, 0); //LoveBabyNickName[]
				Write16(pLoverBabyInfo, 0); //LoverBabyStat
				Write16(pLoverBabyInfo, 0); //LoverBabyEquipStat
				Write16(pLoverBabyInfo, 0); //LoverBabyTransferdStatus

				len = pLoverBabyInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			{ //EmperorInfo
				BYTE* pEmperorInfo = pHeroVisbleInfo;
				Write16(pEmperorInfo, 0); //len

				Write8(pEmperorInfo, 0); //EmperorLevel
				Write32(pEmperorInfo, 0); //EmperorPoint
				Write32(pEmperorInfo, 0); //EmperorLeftDays
				Write8(pEmperorInfo, 0); //EmperorGrowRate

				len = pEmperorInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write16(pHeroVisbleInfo, 0); //RaceCardNums
			for (size_t i = 0; i < n; i++)
			{ //RaceCardAddValueInfo
				BYTE* pRaceCardAddValueInfo = pHeroVisbleInfo;
				Write16(pRaceCardAddValueInfo, 0); //len

				Write32(pRaceCardAddValueInfo, 0); //RaceCardID
				Write32(pRaceCardAddValueInfo, 0); //AddValue

				len = pRaceCardAddValueInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			{ //GansterScoreInfo
				BYTE* pGansterScoreInfo = pHeroVisbleInfo;
				Write16(pGansterScoreInfo, 0); //len

				Write32(pGansterScoreInfo, 0); //GansterSeasonID
				Write32(pGansterScoreInfo, 0); //GansterScore
				Write32(pGansterScoreInfo, 0); //PoliceScore
				Write32(pGansterScoreInfo, 0); //TotalGansterScore

				len = pGansterScoreInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write32(pHeroVisbleInfo, 0); //OlympicId
			Write32(pHeroVisbleInfo, 0); //NPCEliminateWinTimes
			Write8(pHeroVisbleInfo, 0); //OriginTeamID
			Write8(pHeroVisbleInfo, 0); //NxNpc
			Write16(pHeroVisbleInfo, 0); //NxNpcAILevel
			{ //EquippedActiveKartInfo
				BYTE* pEquippedActiveKartInfo = pHeroVisbleInfo;
				Write16(pEquippedActiveKartInfo, 0); //len

				Write8(pEquippedActiveKartInfo, 0); //HaveActiveInfo
				Write32(pEquippedActiveKartInfo, 0); //KartID
				Write32(pEquippedActiveKartInfo, 0); //ActiveLevel

				len = pEquippedActiveKartInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //SpecialActivityStatus
			Write8(pHeroVisbleInfo, 0); //AreaID
			Write8(pHeroVisbleInfo, 0); //HaveRaiseSecondBaby
			{ //SecondLoverBabyInfo
				BYTE* pSecondLoverBabyInfo = pHeroVisbleInfo;
				Write16(pSecondLoverBabyInfo, 0); //len

				Write32(pSecondLoverBabyInfo, 0); //LoverBabyID
				Write32(pSecondLoverBabyInfo, 0); //ItemID
				Write32(pSecondLoverBabyInfo, 0); //GrowValue
				Write32(pSecondLoverBabyInfo, 0); //MentalValue
				Write32(pSecondLoverBabyInfo, 0); //BabyProfileLevel
				Write32(pSecondLoverBabyInfo, 0); //StrengthLevel
				Write32(pSecondLoverBabyInfo, 0); //GrowLevel
				WriteString(pSecondLoverBabyInfo, 0); //LoveBabyNickName[]
				Write16(pSecondLoverBabyInfo, 0); //LoverBabyStat
				Write16(pSecondLoverBabyInfo, 0); //LoverBabyEquipStat
				Write16(pSecondLoverBabyInfo, 0); //LoverBabyTransferdStatus

				len = pSecondLoverBabyInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //HasRankedMatchInfo
			for (size_t i = 0; i < n; i++)
			{ //RankedMatchGradeInfo
				BYTE* pRankedMatchGradeInfo = pHeroVisbleInfo;
				Write16(pRankedMatchGradeInfo, 0); //len

				Write32(pRankedMatchGradeInfo, 0); //GradeLevel
				Write32(pRankedMatchGradeInfo, 0); //ChildLevel
				Write32(pRankedMatchGradeInfo, 0); //GradeScore
				Write32(pRankedMatchGradeInfo, 0); //MaxGradeScore
				Write32(pRankedMatchGradeInfo, 0); //TotalScore

				len = pRankedMatchGradeInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //HasHuanLingChangeInfo
			for (size_t i = 0; i < n; i++)
			{ //HuanLingSuitInfo
				BYTE* pHuanLingSuitInfo = pHeroVisbleInfo;
				Write16(pHuanLingSuitInfo, 0); //len

				Write32(pHuanLingSuitInfo, 0); //SuitID
				Write8(pHuanLingSuitInfo, 0); //ChangeLevel

				len = pHuanLingSuitInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //EquipSealType
			Write16(pHeroVisbleInfo, 0); //Role
			Write8(pHeroVisbleInfo, 0); //SpecialActivityIDNum
			Write8(pHeroVisbleInfo, 0); //CrewID
			Write8(pHeroVisbleInfo, 0); //SpecialActivityInfoNum
			for (size_t i = 0; i < n; i++)
			{ //SpecialActivityInfo
				BYTE* pSpecialActivityInfo = pHeroVisbleInfo;
				Write16(pSpecialActivityInfo, 0); //len

				Write8(pSpecialActivityInfo, 0); //ProfessionLicenseInfoNum
				for (size_t i = 0; i < n; i++)
				{ //ProfessionLicenseInfo
					BYTE* pProfessionLicenseInfo = pSpecialActivityInfo;
					Write16(pProfessionLicenseInfo, 0); //len

					Write8(pProfessionLicenseInfo, 0); //BigLevel
					Write8(pProfessionLicenseInfo, 0); //SmallLevel

					len = pProfessionLicenseInfo - pSpecialActivityInfo;
					Set16(pSpecialActivityInfo, (WORD)len);
					pSpecialActivityInfo += len;
				}

				len = pSpecialActivityInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //ParaNum
			Write32(pHeroVisbleInfo, 0); //ParaList[]
			Write8(pHeroVisbleInfo, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemOrder
				BYTE* pItemOrder = pHeroVisbleInfo;
				Write16(pItemOrder, 0); //len

				Write32(pItemOrder, 0); //KartID
				Write32(pItemOrder, 0); //Order
				Write32(pItemOrder, 0); //BackGroundID

				len = pItemOrder - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //TDCExcluItemNum
			Write32(pHeroVisbleInfo, 0); //TDCExclusiveItemID[]
			Write8(pHeroVisbleInfo, 0); //EquipNiChangItemNum
			for (size_t i = 0; i < n; i++)
			{ //NiChangPavilionEquipItemInfo
				BYTE* pNiChangPavilionEquipItemInfo = pHeroVisbleInfo;
				Write16(pNiChangPavilionEquipItemInfo, 0); //len

				Write32(pNiChangPavilionEquipItemInfo, 0); //ItemId
				Write16(pNiChangPavilionEquipItemInfo, 0); //CurrentEquipColorationPlanId

				len = pNiChangPavilionEquipItemInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //TestKartGameType
			Write32(pHeroVisbleInfo, 0); //GameTestKartID
			Write8(pHeroVisbleInfo, 0); //HasStarsFightingInfo
			for (size_t i = 0; i < n; i++)
			{ //StarsFightingInfo
				BYTE* pStarsFightingInfo = pHeroVisbleInfo;
				Write16(pStarsFightingInfo, 0); //len

				Write32(pStarsFightingInfo, 0); //Star
				Write32(pStarsFightingInfo, 0); //StarVal
				Write32(pStarsFightingInfo, 0); //StarsFightingStarLevel

				len = pStarsFightingInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //RoomBGSetting

			len = pHeroVisbleInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		Write16(pPlayerInfo, 0); //HeroEnterDelayTime

		len = pPlayerInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //BaseGameMode
	Write16(p, 0); //SubGameMode
	Write16(p, 0); //SceneID
	Write8(p, 0); //SyncType
	Write16(p, 0); //ReportPosSpan
	Write16(p, 0); //BroadcastPosSpan
	Write8(p, 0); //ParaNum
	Write32(p, 0); //ParaList[]
	WriteUn(p, 0); //GameID

	len = p - buf;
	SendToClient(Client, 454, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyChatGameLeaveGame(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //BaseGameMode
	Write16(p, 0); //SubGameMode
	Write8(p, 0); //LeaveReason
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 455, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyChatGameOver(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //BaseMode
	Write16(p, 0); //SubMode
	Write8(p, 0); //IsTeamMatched
	Write16(p, 0); //GameOverReason

	len = p - buf;
	SendToClient(Client, 456, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyEnterOutdoor(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ChatRoomID
	Write16(p, 0); //SceneID
	Write32(p, 0); //Time
	{ //HeroInfo
		BYTE* pHeroInfo = p;
		Write16(pHeroInfo, 0); //len

		{ //HeroMoveInfo
			BYTE* pHeroMoveInfo = pHeroInfo;
			Write16(pHeroMoveInfo, 0); //len

			Write32(pHeroMoveInfo, 0); //Uin
			Write8(pHeroMoveInfo, 0); //WalkStatue
			Write32(pHeroMoveInfo, 0); //Posion[]
			Write32(pHeroMoveInfo, 0); //Ori[]
			Write32(pHeroMoveInfo, 0); //AttachUin
			Write32(pHeroMoveInfo, 0); //WalkExtState
			Write8(pHeroMoveInfo, 0); //Nums
			Write32(pHeroMoveInfo, 0); //PermitSitHorsePetUins[]
			Write32(pHeroMoveInfo, 0); //EquipedPetID
			Write32(pHeroMoveInfo, 0); //EquipedPetStatus
			Write32(pHeroMoveInfo, 0); //PetPKResultStatus
			Write16(pHeroMoveInfo, 0); //HeroMajorState
			Write16(pHeroMoveInfo, 0); //HorsePetStatus

			len = pHeroMoveInfo - pHeroInfo;
			Set16(pHeroInfo, (WORD)len);
			pHeroInfo += len;
		}
		Write32(pHeroInfo, 0); //NextPoint
		Write16(pHeroInfo, 0); //PathLen
		Write32(pHeroInfo, 0); //Path[]
		{ //HeroVisbleInfo
			BYTE* pHeroVisbleInfo = pHeroInfo;
			Write16(pHeroVisbleInfo, 0); //len

			WriteUn(pHeroVisbleInfo, 0); //Uin
			WriteUn(pHeroVisbleInfo, 0); //Identity
			Write8(pHeroVisbleInfo, 0); //SeatID
			Write8(pHeroVisbleInfo, 0); //TeamID
			Write16(pHeroVisbleInfo, 0); //PlayerID
			Write8(pHeroVisbleInfo, 0); //Status
			{ //PlayerDBBaseInfo
				BYTE* pPlayerDBBaseInfo = pHeroVisbleInfo;
				Write16(pPlayerDBBaseInfo, 0); //len

				WriteString(pPlayerDBBaseInfo, 0); //NickName[]
				Write8(pPlayerDBBaseInfo, 0); //Gender
				Write8(pPlayerDBBaseInfo, 0); //Country
				Write32(pPlayerDBBaseInfo, 0); //License
				WriteUn(pPlayerDBBaseInfo, 0); //Experience
				Write32(pPlayerDBBaseInfo, 0); //SuperMoney
				Write32(pPlayerDBBaseInfo, 0); //Money
				WriteUn(pPlayerDBBaseInfo, 0); //WinNum
				Write32(pPlayerDBBaseInfo, 0); //SecondNum
				Write32(pPlayerDBBaseInfo, 0); //ThirdNum
				WriteUn(pPlayerDBBaseInfo, 0); //TotalNum
				Write32(pPlayerDBBaseInfo, 0); //CurHonor
				Write32(pPlayerDBBaseInfo, 0); //TotalHonor
				Write32(pPlayerDBBaseInfo, 0); //TodayHonor
				Write32(pPlayerDBBaseInfo, 0); //RelaxTime
				Write32(pPlayerDBBaseInfo, 0); //MonthDurationBefore
				Write32(pPlayerDBBaseInfo, 0); //MonthDurationCur
				Write32(pPlayerDBBaseInfo, 0); //Charm
				Write32(pPlayerDBBaseInfo, 0); //DurationGame
				Write32(pPlayerDBBaseInfo, 0); //DanceExp
				Write32(pPlayerDBBaseInfo, 0); //Coupons
				Write32(pPlayerDBBaseInfo, 0); //Admiration
				Write32(pPlayerDBBaseInfo, 0); //LuckMoney
				Write32(pPlayerDBBaseInfo, 0); //TeamWorkExp
				Write32(pPlayerDBBaseInfo, 0); //AchievePoint
				Write32(pPlayerDBBaseInfo, 0); //RegTime
				WriteString(pPlayerDBBaseInfo, 0); //Signature[]
				Write32(pPlayerDBBaseInfo, 0); //LuckyMatchPoint
				Write32(pPlayerDBBaseInfo, 0); //LuckyMatchNum
				Write16(pPlayerDBBaseInfo, 0); //LuckyMatchFirstNum
				Write8(pPlayerDBBaseInfo, 0); //LuckyMatchBestRand
				Write32(pPlayerDBBaseInfo, 0); //LuckyMatchWinNum
				Write32(pPlayerDBBaseInfo, 0); //FizzPointTotal
				Write16(pPlayerDBBaseInfo, 0); //FizzPointDaily
				Write16(pPlayerDBBaseInfo, 0); //FizzPointWeekly
				Write16(pPlayerDBBaseInfo, 0); //FizzPointLastWeek
				Write8(pPlayerDBBaseInfo, 0); //FizzLotteryStatus
				Write32(pPlayerDBBaseInfo, 0); //FizzLastUpdateTime
				Write32(pPlayerDBBaseInfo, 0); //SNSLocaleCode
				Write32(pPlayerDBBaseInfo, 0); //AuctionRightUnlockTime
				Write8(pPlayerDBBaseInfo, 0); //ReserveFlag
				Write32(pPlayerDBBaseInfo, 0); //CurConsumeScore
				Write32(pPlayerDBBaseInfo, 0); //HistoryConsumeScore
				Write8(pPlayerDBBaseInfo, 0); //CrashModeSponsorID
				Write32(pPlayerDBBaseInfo, 0); //Popularity
				Write32(pPlayerDBBaseInfo, 0); //LadderMatchAchievePoint
				Write32(pPlayerDBBaseInfo, 0); //Cash
				Write32(pPlayerDBBaseInfo, 0); //PlayerGPMIdentity
				Write32(pPlayerDBBaseInfo, 0); //PointTotalScore
				WriteUn(pPlayerDBBaseInfo, 0); //totalMapMedalNum
				WriteUn(pPlayerDBBaseInfo, 0); //lastMapMedalNum
				WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalNum
				WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalSeasonId
				WriteUn(pPlayerDBBaseInfo, 0); //lastClearMapMedalTime
				WriteUn(pPlayerDBBaseInfo, 0); //max2048Score
				WriteUn(pPlayerDBBaseInfo, 0); //curPlay2048LeftNum
				Write32(pPlayerDBBaseInfo, 0); //CheerValue
				Write16(pPlayerDBBaseInfo, 0); //SeasonID
				Write32(pPlayerDBBaseInfo, 0); //LastCheerValue
				Write32(pPlayerDBBaseInfo, 0); //SpeedBean
				Write32(pPlayerDBBaseInfo, 0); //SpeedCoin

				len = pPlayerDBBaseInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			{ //PlayerGuildInfo
				BYTE* pPlayerGuildInfo = pHeroVisbleInfo;
				Write16(pPlayerGuildInfo, 0); //len

				WriteString(pPlayerGuildInfo, 0); //GuildName[]
				Write16(pPlayerGuildInfo, 0); //Duty
				Write32(pPlayerGuildInfo, 0); //GuildID
				Write32(pPlayerGuildInfo, 0); //Right
				Write32(pPlayerGuildInfo, 0); //Medal
				Write32(pPlayerGuildInfo, 0); //Contribute
				WriteString(pPlayerGuildInfo, 0); //DutyTitle[]

				len = pPlayerGuildInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write16(pHeroVisbleInfo, 0); //EquipedItemNum
			for (size_t i = 0; i < n; i++)
			{ //PlayerItemInfo
				BYTE* pPlayerItemInfo = pHeroVisbleInfo;
				Write16(pPlayerItemInfo, 0); //len

				Write32(pPlayerItemInfo, 0); //ItemID
				Write32(pPlayerItemInfo, 0); //ItemNum
				Write32(pPlayerItemInfo, 0); //AvailPeriod
				Write8(pPlayerItemInfo, 0); //Status
				WriteUn(pPlayerItemInfo, 0); //ObtainTime
				Write32(pPlayerItemInfo, 0); //OtherAttribute
				Write16(pPlayerItemInfo, 0); //ItemType

				len = pPlayerItemInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write16(pHeroVisbleInfo, 0); //PetNum
			for (size_t i = 0; i < n; i++)
			{ //PetInfo
				BYTE* pPetInfo = pHeroVisbleInfo;
				Write16(pPetInfo, 0); //len

				Write32(pPetInfo, 0); //Uin
				Write32(pPetInfo, 0); //PetId
				WriteString(pPetInfo, 0); //PetName[]
				Write8(pPetInfo, 0); //IsProper
				Write16(pPetInfo, 0); //Level
				Write8(pPetInfo, 0); //Status
				Write16(pPetInfo, 0); //PetSkillNum
				for (size_t i = 0; i < n; i++)
				{ //PetSkillList
					BYTE* pPetSkillList = pPetInfo;
					Write16(pPetSkillList, 0); //len

					Write16(pPetSkillList, 0); //SkillID
					Write8(pPetSkillList, 0); //Status
					Write8(pPetSkillList, 0); //Active
					Write32(pPetSkillList, 0); //Value

					len = pPetSkillList - pPetInfo;
					Set16(pPetInfo, (WORD)len);
					pPetInfo += len;
				}
				Write32(pPetInfo, 0); //StrengLevel
				Write8(pPetInfo, 0); //TopStatus
				{ //CommonInfo
					BYTE* pCommonInfo = pPetInfo;
					Write16(pCommonInfo, 0); //len

					Write32(pCommonInfo, 0); //HuanHuaLevel
					Write8(pCommonInfo, 0); //CanHuanHua

					len = pCommonInfo - pPetInfo;
					Set16(pPetInfo, (WORD)len);
					pPetInfo += len;
				}
				Write16(pPetInfo, 0); //PKStar
				Write32(pPetInfo, 0); //PetSkinID

				len = pPetInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			{ //PlayerGuildMatchInfo
				BYTE* pPlayerGuildMatchInfo = pHeroVisbleInfo;
				Write16(pPlayerGuildMatchInfo, 0); //len

				Write32(pPlayerGuildMatchInfo, 0); //SelfPoint
				Write32(pPlayerGuildMatchInfo, 0); //WinNum
				Write32(pPlayerGuildMatchInfo, 0); //TotalNum

				len = pPlayerGuildMatchInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //IsInTopList
			Write8(pHeroVisbleInfo, 0); //LoverRaceOrPro
			Write8(pHeroVisbleInfo, 0); //TmpEffectNum
			Write32(pHeroVisbleInfo, 0); //TmpEffectItems[]
			Write8(pHeroVisbleInfo, 0); //OBState
			Write8(pHeroVisbleInfo, 0); //DebutOrX5
			Write8(pHeroVisbleInfo, 0); //RandKeyFlag
			WriteUn(pHeroVisbleInfo, 0); //VipFlag
			Write8(pHeroVisbleInfo, 0); //HaveAppellation
			for (size_t i = 0; i < n; i++)
			{ //CurAppellation
				BYTE* pCurAppellation = pHeroVisbleInfo;
				Write16(pCurAppellation, 0); //len

				Write8(pCurAppellation, 0); //Type
				Write8(pCurAppellation, 0); //Level
				Write8(pCurAppellation, 0); //Status
				Write8(pCurAppellation, 0); //Difficulty
				Write32(pCurAppellation, 0); //MapId
				Write32(pCurAppellation, 0); //Value

				len = pCurAppellation - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			{ //NobleInfo
				BYTE* pNobleInfo = pHeroVisbleInfo;
				Write16(pNobleInfo, 0); //len

				Write32(pNobleInfo, 0); //NobleID
				Write8(pNobleInfo, 0); //NobleLevel
				Write32(pNobleInfo, 0); //NoblePoint
				Write32(pNobleInfo, 0); //NobleLeftDays

				len = pNobleInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //HasCarryWizard
			for (size_t i = 0; i < n; i++)
			{ //CarryWizardInfo
				BYTE* pCarryWizardInfo = pHeroVisbleInfo;
				Write16(pCarryWizardInfo, 0); //len

				Write16(pCarryWizardInfo, 0); //WizardID
				WriteString(pCarryWizardInfo, 0); //NickName[]
				Write16(pCarryWizardInfo, 0); //WizardType
				Write8(pCarryWizardInfo, 0); //Order
				Write8(pCarryWizardInfo, 0); //EvolutionBranch
				Write8(pCarryWizardInfo, 0); //IsHuanHua

				len = pCarryWizardInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			{ //GuildVipBaseInfo
				BYTE* pGuildVipBaseInfo = pHeroVisbleInfo;
				Write16(pGuildVipBaseInfo, 0); //len

				Write8(pGuildVipBaseInfo, 0); //GuildVipLevel
				Write32(pGuildVipBaseInfo, 0); //GuildVipPoint

				len = pGuildVipBaseInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write32(pHeroVisbleInfo, 0); //ExFlag
			Write8(pHeroVisbleInfo, 0); //HaveLDMBaseInfo
			for (size_t i = 0; i < n; i++)
			{ //PlayerLDMBaseInfo
				BYTE* pPlayerLDMBaseInfo = pHeroVisbleInfo;
				Write16(pPlayerLDMBaseInfo, 0); //len

				Write8(pPlayerLDMBaseInfo, 0); //Grade
				Write32(pPlayerLDMBaseInfo, 0); //Score
				Write32(pPlayerLDMBaseInfo, 0); //MaxScore
				Write32(pPlayerLDMBaseInfo, 0); //MaxGrade

				len = pPlayerLDMBaseInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //HasWl
			for (size_t i = 0; i < n; i++)
			{ //PlayerWlVisibleInfo
				BYTE* pPlayerWlVisibleInfo = pHeroVisbleInfo;
				Write16(pPlayerWlVisibleInfo, 0); //len

				Write32(pPlayerWlVisibleInfo, 0); //WonderLandID
				WriteString(pPlayerWlVisibleInfo, 0); //WonderLandName[]
				Write16(pPlayerWlVisibleInfo, 0); //WonderLandDuty
				Write8(pPlayerWlVisibleInfo, 0); //SubType
				Write8(pPlayerWlVisibleInfo, 0); //GuildGrade

				len = pPlayerWlVisibleInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //HasLoverVip
			for (size_t i = 0; i < n; i++)
			{ //LoverVipInfo
				BYTE* pLoverVipInfo = pHeroVisbleInfo;
				Write16(pLoverVipInfo, 0); //len

				Write8(pLoverVipInfo, 0); //LoverVipLevel
				Write32(pLoverVipInfo, 0); //LoverVipPoint
				Write8(pLoverVipInfo, 0); //GrowRate

				len = pLoverVipInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //HasBattleModeSkillInfoList
			for (size_t i = 0; i < n; i++)
			{ //BattleModeSkillInfoList
				BYTE* pBattleModeSkillInfoList = pHeroVisbleInfo;
				Write16(pBattleModeSkillInfoList, 0); //len

				Write8(pBattleModeSkillInfoList, 0); //SkillNum
				for (size_t i = 0; i < n; i++)
				{ //SkillInfo
					BYTE* pSkillInfo = pBattleModeSkillInfoList;
					Write16(pSkillInfo, 0); //len

					Write16(pSkillInfo, 0); //SkillId
					Write8(pSkillInfo, 0); //SkillLevel

					len = pSkillInfo - pBattleModeSkillInfoList;
					Set16(pBattleModeSkillInfoList, (WORD)len);
					pBattleModeSkillInfoList += len;
				}

				len = pBattleModeSkillInfoList - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //HasGarden
			for (size_t i = 0; i < n; i++)
			{ //PersonalGardenBaseInfo
				BYTE* pPersonalGardenBaseInfo = pHeroVisbleInfo;
				Write16(pPersonalGardenBaseInfo, 0); //len

				Write8(pPersonalGardenBaseInfo, 0); //GardenLevel
				Write32(pPersonalGardenBaseInfo, 0); //GardenPoint
				Write8(pPersonalGardenBaseInfo, 0); //GrowRate
				Write32(pPersonalGardenBaseInfo, 0); //GardenExpireTime
				{ //SimpleInfo
					BYTE* pSimpleInfo = pPersonalGardenBaseInfo;
					Write16(pSimpleInfo, 0); //len

					Write32(pSimpleInfo, 0); //WeekPopularity
					Write32(pSimpleInfo, 0); //TotalPopularity
					Write32(pSimpleInfo, 0); //LastUpdatePopularityTime
					Write8(pSimpleInfo, 0); //PrivateType

					len = pSimpleInfo - pPersonalGardenBaseInfo;
					Set16(pPersonalGardenBaseInfo, (WORD)len);
					pPersonalGardenBaseInfo += len;
				}

				len = pPersonalGardenBaseInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			{ //ConsumeVipInfo
				BYTE* pConsumeVipInfo = pHeroVisbleInfo;
				Write16(pConsumeVipInfo, 0); //len

				WriteUn(pConsumeVipInfo, 0); //VipLevel
				WriteUn(pConsumeVipInfo, 0); //CharmValueOfMonth
				WriteUn(pConsumeVipInfo, 0); //SearchTreasureNums
				WriteUn(pConsumeVipInfo, 0); //GetTreasureNums

				len = pConsumeVipInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //HaveBaby
			{ //LoverBabyInfo
				BYTE* pLoverBabyInfo = pHeroVisbleInfo;
				Write16(pLoverBabyInfo, 0); //len

				Write32(pLoverBabyInfo, 0); //LoverBabyID
				Write32(pLoverBabyInfo, 0); //ItemID
				Write32(pLoverBabyInfo, 0); //GrowValue
				Write32(pLoverBabyInfo, 0); //MentalValue
				Write32(pLoverBabyInfo, 0); //BabyProfileLevel
				Write32(pLoverBabyInfo, 0); //StrengthLevel
				Write32(pLoverBabyInfo, 0); //GrowLevel
				WriteString(pLoverBabyInfo, 0); //LoveBabyNickName[]
				Write16(pLoverBabyInfo, 0); //LoverBabyStat
				Write16(pLoverBabyInfo, 0); //LoverBabyEquipStat
				Write16(pLoverBabyInfo, 0); //LoverBabyTransferdStatus

				len = pLoverBabyInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			{ //EmperorInfo
				BYTE* pEmperorInfo = pHeroVisbleInfo;
				Write16(pEmperorInfo, 0); //len

				Write8(pEmperorInfo, 0); //EmperorLevel
				Write32(pEmperorInfo, 0); //EmperorPoint
				Write32(pEmperorInfo, 0); //EmperorLeftDays
				Write8(pEmperorInfo, 0); //EmperorGrowRate

				len = pEmperorInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write16(pHeroVisbleInfo, 0); //RaceCardNums
			for (size_t i = 0; i < n; i++)
			{ //RaceCardAddValueInfo
				BYTE* pRaceCardAddValueInfo = pHeroVisbleInfo;
				Write16(pRaceCardAddValueInfo, 0); //len

				Write32(pRaceCardAddValueInfo, 0); //RaceCardID
				Write32(pRaceCardAddValueInfo, 0); //AddValue

				len = pRaceCardAddValueInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			{ //GansterScoreInfo
				BYTE* pGansterScoreInfo = pHeroVisbleInfo;
				Write16(pGansterScoreInfo, 0); //len

				Write32(pGansterScoreInfo, 0); //GansterSeasonID
				Write32(pGansterScoreInfo, 0); //GansterScore
				Write32(pGansterScoreInfo, 0); //PoliceScore
				Write32(pGansterScoreInfo, 0); //TotalGansterScore

				len = pGansterScoreInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write32(pHeroVisbleInfo, 0); //OlympicId
			Write32(pHeroVisbleInfo, 0); //NPCEliminateWinTimes
			Write8(pHeroVisbleInfo, 0); //OriginTeamID
			Write8(pHeroVisbleInfo, 0); //NxNpc
			Write16(pHeroVisbleInfo, 0); //NxNpcAILevel
			{ //EquippedActiveKartInfo
				BYTE* pEquippedActiveKartInfo = pHeroVisbleInfo;
				Write16(pEquippedActiveKartInfo, 0); //len

				Write8(pEquippedActiveKartInfo, 0); //HaveActiveInfo
				Write32(pEquippedActiveKartInfo, 0); //KartID
				Write32(pEquippedActiveKartInfo, 0); //ActiveLevel

				len = pEquippedActiveKartInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //SpecialActivityStatus
			Write8(pHeroVisbleInfo, 0); //AreaID
			Write8(pHeroVisbleInfo, 0); //HaveRaiseSecondBaby
			{ //SecondLoverBabyInfo
				BYTE* pSecondLoverBabyInfo = pHeroVisbleInfo;
				Write16(pSecondLoverBabyInfo, 0); //len

				Write32(pSecondLoverBabyInfo, 0); //LoverBabyID
				Write32(pSecondLoverBabyInfo, 0); //ItemID
				Write32(pSecondLoverBabyInfo, 0); //GrowValue
				Write32(pSecondLoverBabyInfo, 0); //MentalValue
				Write32(pSecondLoverBabyInfo, 0); //BabyProfileLevel
				Write32(pSecondLoverBabyInfo, 0); //StrengthLevel
				Write32(pSecondLoverBabyInfo, 0); //GrowLevel
				WriteString(pSecondLoverBabyInfo, 0); //LoveBabyNickName[]
				Write16(pSecondLoverBabyInfo, 0); //LoverBabyStat
				Write16(pSecondLoverBabyInfo, 0); //LoverBabyEquipStat
				Write16(pSecondLoverBabyInfo, 0); //LoverBabyTransferdStatus

				len = pSecondLoverBabyInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //HasRankedMatchInfo
			for (size_t i = 0; i < n; i++)
			{ //RankedMatchGradeInfo
				BYTE* pRankedMatchGradeInfo = pHeroVisbleInfo;
				Write16(pRankedMatchGradeInfo, 0); //len

				Write32(pRankedMatchGradeInfo, 0); //GradeLevel
				Write32(pRankedMatchGradeInfo, 0); //ChildLevel
				Write32(pRankedMatchGradeInfo, 0); //GradeScore
				Write32(pRankedMatchGradeInfo, 0); //MaxGradeScore
				Write32(pRankedMatchGradeInfo, 0); //TotalScore

				len = pRankedMatchGradeInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //HasHuanLingChangeInfo
			for (size_t i = 0; i < n; i++)
			{ //HuanLingSuitInfo
				BYTE* pHuanLingSuitInfo = pHeroVisbleInfo;
				Write16(pHuanLingSuitInfo, 0); //len

				Write32(pHuanLingSuitInfo, 0); //SuitID
				Write8(pHuanLingSuitInfo, 0); //ChangeLevel

				len = pHuanLingSuitInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //EquipSealType
			Write16(pHeroVisbleInfo, 0); //Role
			Write8(pHeroVisbleInfo, 0); //SpecialActivityIDNum
			Write8(pHeroVisbleInfo, 0); //CrewID
			Write8(pHeroVisbleInfo, 0); //SpecialActivityInfoNum
			for (size_t i = 0; i < n; i++)
			{ //SpecialActivityInfo
				BYTE* pSpecialActivityInfo = pHeroVisbleInfo;
				Write16(pSpecialActivityInfo, 0); //len

				Write8(pSpecialActivityInfo, 0); //ProfessionLicenseInfoNum
				for (size_t i = 0; i < n; i++)
				{ //ProfessionLicenseInfo
					BYTE* pProfessionLicenseInfo = pSpecialActivityInfo;
					Write16(pProfessionLicenseInfo, 0); //len

					Write8(pProfessionLicenseInfo, 0); //BigLevel
					Write8(pProfessionLicenseInfo, 0); //SmallLevel

					len = pProfessionLicenseInfo - pSpecialActivityInfo;
					Set16(pSpecialActivityInfo, (WORD)len);
					pSpecialActivityInfo += len;
				}

				len = pSpecialActivityInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //ParaNum
			Write32(pHeroVisbleInfo, 0); //ParaList[]
			Write8(pHeroVisbleInfo, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemOrder
				BYTE* pItemOrder = pHeroVisbleInfo;
				Write16(pItemOrder, 0); //len

				Write32(pItemOrder, 0); //KartID
				Write32(pItemOrder, 0); //Order
				Write32(pItemOrder, 0); //BackGroundID

				len = pItemOrder - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //TDCExcluItemNum
			Write32(pHeroVisbleInfo, 0); //TDCExclusiveItemID[]
			Write8(pHeroVisbleInfo, 0); //EquipNiChangItemNum
			for (size_t i = 0; i < n; i++)
			{ //NiChangPavilionEquipItemInfo
				BYTE* pNiChangPavilionEquipItemInfo = pHeroVisbleInfo;
				Write16(pNiChangPavilionEquipItemInfo, 0); //len

				Write32(pNiChangPavilionEquipItemInfo, 0); //ItemId
				Write16(pNiChangPavilionEquipItemInfo, 0); //CurrentEquipColorationPlanId

				len = pNiChangPavilionEquipItemInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //TestKartGameType
			Write32(pHeroVisbleInfo, 0); //GameTestKartID
			Write8(pHeroVisbleInfo, 0); //HasStarsFightingInfo
			for (size_t i = 0; i < n; i++)
			{ //StarsFightingInfo
				BYTE* pStarsFightingInfo = pHeroVisbleInfo;
				Write16(pStarsFightingInfo, 0); //len

				Write32(pStarsFightingInfo, 0); //Star
				Write32(pStarsFightingInfo, 0); //StarVal
				Write32(pStarsFightingInfo, 0); //StarsFightingStarLevel

				len = pStarsFightingInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //RoomBGSetting

			len = pHeroVisbleInfo - pHeroInfo;
			Set16(pHeroInfo, (WORD)len);
			pHeroInfo += len;
		}
		Write16(pHeroInfo, 0); //HeroEnterDelayTime

		len = pHeroInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //PlayerRelationInfo
		BYTE* pPlayerRelationInfo = p;
		Write16(pPlayerRelationInfo, 0); //len

		Write32(pPlayerRelationInfo, 0); //SrcUin
		Write32(pPlayerRelationInfo, 0); //RelationFlag
		Write32(pPlayerRelationInfo, 0); //RelationUin
		WriteString(pPlayerRelationInfo, 0); //RelationNickName[]
		Write32(pPlayerRelationInfo, 0); //EngageTime
		Write32(pPlayerRelationInfo, 0); //NextCanBookingTimeLimit
		Write32(pPlayerRelationInfo, 0); //BeginHoneyMoonTime
		Write32(pPlayerRelationInfo, 0); //EndHoneyMoonTime
		Write8(pPlayerRelationInfo, 0); //EngageFlag

		len = pPlayerRelationInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //KartNum
	for (size_t i = 0; i < n; i++)
	{ //KartRefitInfo
		BYTE* pKartRefitInfo = p;
		Write16(pKartRefitInfo, 0); //len

		Write32(pKartRefitInfo, 0); //Uin
		Write32(pKartRefitInfo, 0); //KartId
		Write32(pKartRefitInfo, 0); //RefitCout
		Write16(pKartRefitInfo, 0); //MaxFlags
		Write16(pKartRefitInfo, 0); //WWeight
		Write16(pKartRefitInfo, 0); //SpeedWeight
		Write16(pKartRefitInfo, 0); //JetWeight
		Write16(pKartRefitInfo, 0); //SJetWeight
		Write16(pKartRefitInfo, 0); //AccuWeight
		Write32(pKartRefitInfo, 0); //ShapeRefitCount
		Write32(pKartRefitInfo, 0); //KartHeadRefitItemID
		Write32(pKartRefitInfo, 0); //KartTailRefitItemID
		Write32(pKartRefitInfo, 0); //KartFlankRefitItemID
		Write32(pKartRefitInfo, 0); //KartTireRefitItemID
		Write32(pKartRefitInfo, 0); //SecondRefitCount
		Write16(pKartRefitInfo, 0); //Speed2Weight
		Write16(pKartRefitInfo, 0); //DriftVecWeight
		Write16(pKartRefitInfo, 0); //AdditionalZSpeedWeight
		Write16(pKartRefitInfo, 0); //AntiCollisionWeight
		Write16(pKartRefitInfo, 0); //LuckyValue
		Write16(pKartRefitInfo, 0); //RefitLuckyValueMaxWeight
		Write32(pKartRefitInfo, 0); //ShapeSuitID
		Write8(pKartRefitInfo, 0); //LegendSuitLevel
		Write32(pKartRefitInfo, 0); //LegendSuitLevelChoice
		Write32(pKartRefitInfo, 0); //ShapeLegendSuitID

		len = pKartRefitInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //StealPig
		BYTE* pStealPig = p;
		Write16(pStealPig, 0); //len

		Write8(pStealPig, 0); //Status
		Write8(pStealPig, 0); //PigPos
		Write32(pStealPig, 0); //ItemID
		Write8(pStealPig, 0); //PigNum

		len = pStealPig - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 852, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestChangeHammerStatus(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	{ //EquipedHammer
		BYTE* pEquipedHammer = p;
		len = Read16(pEquipedHammer);

		int EquipedHammerID = Read32(pEquipedHammer);

		p += len;
	}

}

void ResponseChangeHammerStatus(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	{ //EquipedHammer
		BYTE* pEquipedHammer = p;
		Write16(pEquipedHammer, 0); //len

		Write32(pEquipedHammer, 0); //EquipedHammerID

		len = pEquipedHammer - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 359, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyChangeHammerStatus(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //SrcUin
	Write32(p, 0); //Time
	{ //EquipedHammer
		BYTE* pEquipedHammer = p;
		Write16(pEquipedHammer, 0); //len

		Write32(pEquipedHammer, 0); //EquipedHammerID

		len = pEquipedHammer - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 861, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestChangeSuperShoeStatus(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	{ //EquipedSuperShoe
		BYTE* pEquipedSuperShoe = p;
		len = Read16(pEquipedSuperShoe);

		int EquipedSuperShoeID = Read32(pEquipedSuperShoe);

		p += len;
	}

}

void ResponseChangeSuperShoeStatus(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	{ //EquipedSuperShoe
		BYTE* pEquipedSuperShoe = p;
		Write16(pEquipedSuperShoe, 0); //len

		Write32(pEquipedSuperShoe, 0); //EquipedSuperShoeID

		len = pEquipedSuperShoe - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 24428, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyChangeSuperShoeStatus(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //SrcUin
	Write32(p, 0); //Time
	{ //EquipedSuperShoe
		BYTE* pEquipedSuperShoe = p;
		Write16(pEquipedSuperShoe, 0); //len

		Write32(pEquipedSuperShoe, 0); //EquipedSuperShoeID

		len = pEquipedSuperShoe - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24427, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestLeaveOutdoor(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	short LeaveType = Read16(p);

}

void ResponseLeaveOutdoor(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 353, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyLeaveOutdoor(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //Time

	len = p - buf;
	SendToClient(Client, 853, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestExchangeLoverMode(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	UCHAR SrcTeam = Read8(p);
	UCHAR SrcMode = Read8(p);
	Un DstUin = ReadUn(p);

}

void NotifyRequestExchangeLoverMode(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //Uin
	WriteUn(p, 0); //SrcUin
	Write8(p, 0); //SrcTeam
	Write8(p, 0); //SrcMode

	len = p - buf;
	SendToClient(Client, 302, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void ResponseExchangeLoverMode(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	WriteUn(p, 0); //SrcUin
	Write8(p, 0); //SrcTeam
	Write8(p, 0); //SrcMode

	len = p - buf;
	SendToClient(Client, 303, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyExchangeLoverMode(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //Team
	WriteUn(p, 0); //SrcUin
	Write8(p, 0); //SrcMode
	WriteUn(p, 0); //DstUin
	Write8(p, 0); //DstMode

	len = p - buf;
	SendToClient(Client, 304, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestHeroPos(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	{ //HeroMoveInfo
		BYTE* pHeroMoveInfo = p;
		len = Read16(pHeroMoveInfo);

		UINT Uin = Read32(pHeroMoveInfo);
		char WalkStatue = Read8(pHeroMoveInfo);
		int[] Posion[] = Read32(pHeroMoveInfo);
		int[] Ori[] = Read32(pHeroMoveInfo);
		UINT AttachUin = Read32(pHeroMoveInfo);
		int WalkExtState = Read32(pHeroMoveInfo);
		UCHAR Nums = Read8(pHeroMoveInfo);
		UINT[] PermitSitHorsePetUins[] = Read32(pHeroMoveInfo);
		int EquipedPetID = Read32(pHeroMoveInfo);
		int EquipedPetStatus = Read32(pHeroMoveInfo);
		int PetPKResultStatus = Read32(pHeroMoveInfo);
		USHORT HeroMajorState = Read16(pHeroMoveInfo);
		USHORT HorsePetStatus = Read16(pHeroMoveInfo);

		p += len;
	}
	int CellID = Read32(p);
	UCHAR Flag = Read8(p);

}

void NotifySynAllHeroPos(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //HeroCount
	for (size_t i = 0; i < n; i++)
	{ //HeroMoveInfo
		BYTE* pHeroMoveInfo = p;
		Write16(pHeroMoveInfo, 0); //len

		Write32(pHeroMoveInfo, 0); //Uin
		Write8(pHeroMoveInfo, 0); //WalkStatue
		Write32(pHeroMoveInfo, 0); //Posion[]
		Write32(pHeroMoveInfo, 0); //Ori[]
		Write32(pHeroMoveInfo, 0); //AttachUin
		Write32(pHeroMoveInfo, 0); //WalkExtState
		Write8(pHeroMoveInfo, 0); //Nums
		Write32(pHeroMoveInfo, 0); //PermitSitHorsePetUins[]
		Write32(pHeroMoveInfo, 0); //EquipedPetID
		Write32(pHeroMoveInfo, 0); //EquipedPetStatus
		Write32(pHeroMoveInfo, 0); //PetPKResultStatus
		Write16(pHeroMoveInfo, 0); //HeroMajorState
		Write16(pHeroMoveInfo, 0); //HorsePetStatus

		len = pHeroMoveInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //Time
	Write8(p, 0); //Flag

	len = p - buf;
	SendToClient(Client, 850, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestHeroMove(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	{ //HeroMoveInfo
		BYTE* pHeroMoveInfo = p;
		len = Read16(pHeroMoveInfo);

		UINT Uin = Read32(pHeroMoveInfo);
		char WalkStatue = Read8(pHeroMoveInfo);
		int[] Posion[] = Read32(pHeroMoveInfo);
		int[] Ori[] = Read32(pHeroMoveInfo);
		UINT AttachUin = Read32(pHeroMoveInfo);
		int WalkExtState = Read32(pHeroMoveInfo);
		UCHAR Nums = Read8(pHeroMoveInfo);
		UINT[] PermitSitHorsePetUins[] = Read32(pHeroMoveInfo);
		int EquipedPetID = Read32(pHeroMoveInfo);
		int EquipedPetStatus = Read32(pHeroMoveInfo);
		int PetPKResultStatus = Read32(pHeroMoveInfo);
		USHORT HeroMajorState = Read16(pHeroMoveInfo);
		USHORT HorsePetStatus = Read16(pHeroMoveInfo);

		p += len;
	}
	int NextPoint = Read32(p);
	short PathLen = Read16(p);
	int[] Path[] = Read32(p);
	int CurCellID = Read32(p);
	USHORT Speed = Read16(p);

}

void NotifyHeroMove(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	{ //HeroMoveInfo
		BYTE* pHeroMoveInfo = p;
		Write16(pHeroMoveInfo, 0); //len

		Write32(pHeroMoveInfo, 0); //Uin
		Write8(pHeroMoveInfo, 0); //WalkStatue
		Write32(pHeroMoveInfo, 0); //Posion[]
		Write32(pHeroMoveInfo, 0); //Ori[]
		Write32(pHeroMoveInfo, 0); //AttachUin
		Write32(pHeroMoveInfo, 0); //WalkExtState
		Write8(pHeroMoveInfo, 0); //Nums
		Write32(pHeroMoveInfo, 0); //PermitSitHorsePetUins[]
		Write32(pHeroMoveInfo, 0); //EquipedPetID
		Write32(pHeroMoveInfo, 0); //EquipedPetStatus
		Write32(pHeroMoveInfo, 0); //PetPKResultStatus
		Write16(pHeroMoveInfo, 0); //HeroMajorState
		Write16(pHeroMoveInfo, 0); //HorsePetStatus

		len = pHeroMoveInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //NextPoint
	Write16(p, 0); //PathLen
	Write32(p, 0); //Path[]
	Write32(p, 0); //Time

	len = p - buf;
	SendToClient(Client, 851, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyHeroLevelup(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //Time
	Write16(p, 0); //Level
	Write32(p, 0); //NextLevelExperence

	len = p - buf;
	SendToClient(Client, 854, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyRelaxSystemMsg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //MsgType
	Write16(p, 0); //AttachLen
	Write32(p, 0); //ContinuanceTime
	Write32(p, 0); //Flag

	len = p - buf;
	SendToClient(Client, 860, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestHeroDoAction(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	short ActionID = Read16(p);
	int Para1 = Read32(p);

}

void ResponseHeroDoAction(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen
	Write32(p, 0); //Para1

	len = p - buf;
	SendToClient(Client, 355, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyHeroDoAction(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //Time
	Write16(p, 0); //ActionID
	Write32(p, 0); //Para1

	len = p - buf;
	SendToClient(Client, 855, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestKartPetDoAction(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	short ActionID = Read16(p);

}

void NotifyKartPetDoAction(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //Time
	Write16(p, 0); //ActionID

	len = p - buf;
	SendToClient(Client, 349, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyPlayerDoAction(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //Time
	Write16(p, 0); //ActionID

	len = p - buf;
	SendToClient(Client, 856, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestChangeIdentity(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	char SetOrUnset = Read8(p);
	char IsExRightFlag = Read8(p);
	UINT IdentityFlag = Read32(p);
	UINT BeginBit = Read32(p);
	UINT EndBit = Read32(p);
	UCHAR ExRightFlag[] = Read8(p);

}

void ResponseChangeIdentity(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //SetOrUnset
	Write8(p, 0); //IsExRightFlag
	Write32(p, 0); //IdentityFlag
	WriteUn(p, 0); //Identity
	Write8(p, 0); //ExRightFlag[]

	len = p - buf;
	SendToClient(Client, 131, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestTransferByTCP(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	char Ver = Read8(p);
	int Seq = Read32(p);
	char DstNum = Read8(p);
	for (size_t i = 0; i < n; i++)
	{ //DstInfo
		BYTE* pDstInfo = p;
		len = Read16(pDstInfo);

		short PlayerID = Read16(pDstInfo);
		UINT Uin = Read32(pDstInfo);

		p += len;
	}
	short BuffLen = Read16(p);

}

void NotifyTranferByTCP(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //SrcUin
	Write16(p, 0); //SrcPlayerID
	Write8(p, 0); //Ver
	Write32(p, 0); //Seq
	Write16(p, 0); //Bufflen

	len = p - buf;
	SendToClient(Client, 560, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestModifyNickname(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	char[] NewNickName[] = ReadString(p);
	UCHAR UseType = Read8(p);
	char[] SerialId[] = ReadString(p);

}

void ResponseModifyNickname(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	WriteString(p, 0); //NewNickName[]
	Write8(p, 0); //ReasonLen
	Write8(p, 0); //UseType
	WriteString(p, 0); //SerialId[]
	Write32(p, 0); //CDLeftTime

	len = p - buf;
	SendToClient(Client, 154, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyBeginModifyNickname(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //ItemID

	len = p - buf;
	SendToClient(Client, 561, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestUseHammer(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int ItemID = Read32(p);
	UINT DstUin = Read32(p);
	int SrcWeight = Read32(p);
	int DstWeight = Read32(p);
	bool DstType = Read8(p);
	UINT DistToTgt = Read32(p);
	UCHAR MsgSeq = Read8(p);
	int[] Position[] = Read32(p);
	int CellID = Read32(p);

}

void ResponseUseHammer(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //ItemID
	Write32(p, 0); //DstUin
	Write8(p, 0); //ReasonLen
	Write8(p, 0); //DstType
	Write8(p, 0); //HasPKAbilityInfo
	for (size_t i = 0; i < n; i++)
	{ //PKAbilityInfo
		BYTE* pPKAbilityInfo = p;
		Write16(pPKAbilityInfo, 0); //len

		Write16(pPKAbilityInfo, 0); //SrcPKAbility
		Write8(pPKAbilityInfo, 0); //IsSrcPKStrong
		Write16(pPKAbilityInfo, 0); //DstPKAbility
		Write8(pPKAbilityInfo, 0); //IsDstPKStrong

		len = pPKAbilityInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 358, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyMatchInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //IsMatchOpen
	Write32(p, 0); //MaxMatchNum
	Write8(p, 0); //InfoLen
	{ //MatchRule
		BYTE* pMatchRule = p;
		Write16(pMatchRule, 0); //len

		Write8(pMatchRule, 0); //SpeedMode
		Write8(pMatchRule, 0); //PropMode
		Write32(pMatchRule, 0); //SpeedTickedID
		Write32(pMatchRule, 0); //PropTickedID
		Write32(pMatchRule, 0); //ReclearItem
		WriteString(pMatchRule, 0); //IntroAddress[]
		WriteString(pMatchRule, 0); //QueryAddress[]
		Write8(pMatchRule, 0); //EquitNum
		for (size_t i = 0; i < n; i++)
		{ //EquipInfo
			BYTE* pEquipInfo = pMatchRule;
			Write16(pEquipInfo, 0); //len

			Write32(pEquipInfo, 0); //ItemID

			len = pEquipInfo - pMatchRule;
			Set16(pMatchRule, (WORD)len);
			pMatchRule += len;
		}
		Write8(pMatchRule, 0); //PRMode
		Write32(pMatchRule, 0); //PRTicketID
		Write32(pMatchRule, 0); //MaleSuitID
		Write32(pMatchRule, 0); //FemaleSuitID

		len = pMatchRule - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //CtrlType
	Write8(p, 0); //NeedMapNum
	Write32(p, 0); //MapID[]

	len = p - buf;
	SendToClient(Client, 563, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestEnterMatchGame(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int GameType = Read32(p);
	int CtrlType = Read32(p);

}

void ResponseEnterMatchGame(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 155, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyMatchRaceOver(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //AwardTime
	for (size_t i = 0; i < n; i++)
	{ //RaceScore
		BYTE* pRaceScore = p;
		Write16(pRaceScore, 0); //len

		WriteUn(pRaceScore, 0); //Uin
		WriteUn(pRaceScore, 0); //FinTime
		Write32(pRaceScore, 0); //GameType
		Write32(pRaceScore, 0); //PointInc
		Write32(pRaceScore, 0); //TotalPoint
		Write32(pRaceScore, 0); //ExpInc
		Write32(pRaceScore, 0); //TotalExp
		Write32(pRaceScore, 0); //SuperMoneyInc
		Write32(pRaceScore, 0); //TotalSuperMoney
		Write32(pRaceScore, 0); //CoolMoneyInc
		Write32(pRaceScore, 0); //TotalCoolMoney
		Write32(pRaceScore, 0); //PropPoint
		Write32(pRaceScore, 0); //RacePoint
		Write32(pRaceScore, 0); //PRPoint
		Write32(pRaceScore, 0); //DistanceToEnd
		Write32(pRaceScore, 0); //DetailRecordID

		len = pRaceScore - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //InfoLen
	Write8(p, 0); //KickOffPlayerNumber
	for (size_t i = 0; i < n; i++)
	{ //KickOffPlayer
		BYTE* pKickOffPlayer = p;
		Write16(pKickOffPlayer, 0); //len

		Write32(pKickOffPlayer, 0); //Uin
		WriteString(pKickOffPlayer, 0); //NickName[]
		Write8(pKickOffPlayer, 0); //Gender
		Write8(pKickOffPlayer, 0); //TeamID
		Write8(pKickOffPlayer, 0); //Country

		len = pKickOffPlayer - p;
		Set16(p, (WORD)len);
		p += len;
	}
	WriteUn(p, 0); //hasGameFrameInfo
	for (size_t i = 0; i < n; i++)
	{ //GameFrameInfo
		BYTE* pGameFrameInfo = p;
		Write16(pGameFrameInfo, 0); //len

		Write32(pGameFrameInfo, 0); //Uin
		Write32(pGameFrameInfo, 0); //MapID
		Write16(pGameFrameInfo, 0); //FrameNum
		for (size_t i = 0; i < n; i++)
		{ //FrameInfo
			BYTE* pFrameInfo = pGameFrameInfo;
			Write16(pFrameInfo, 0); //len

			Write16(pFrameInfo, 0); //CheckPointID
			Write32(pFrameInfo, 0); //Num
			for (size_t i = 0; i < n; i++)
			{ //FrameList
				BYTE* pFrameList = pFrameInfo;
				Write16(pFrameList, 0); //len

				WriteUn(pFrameList, 0); //TimeElaps
				WriteUn(pFrameList, 0); //fInPosX[]
				WriteUn(pFrameList, 0); //fInPosY[]
				WriteUn(pFrameList, 0); //fInPosZ[]
				WriteUn(pFrameList, 0); //fStepX[]
				WriteUn(pFrameList, 0); //fStepY[]
				WriteUn(pFrameList, 0); //fStepZ[]
				WriteUn(pFrameList, 0); //fCarMat[]
				WriteUn(pFrameList, 0); //fOutPosX[]
				WriteUn(pFrameList, 0); //fOutPosY[]
				WriteUn(pFrameList, 0); //fOutPosZ[]
				WriteUn(pFrameList, 0); //fAccTime[]
				WriteUn(pFrameList, 0); //fFrameTime[]
				Write8(pFrameList, 0); //SetPos
				Write8(pFrameList, 0); //Collision

				len = pFrameList - pFrameInfo;
				Set16(pFrameInfo, (WORD)len);
				pFrameInfo += len;
			}

			len = pFrameInfo - pGameFrameInfo;
			Set16(pGameFrameInfo, (WORD)len);
			pGameFrameInfo += len;
		}

		len = pGameFrameInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 564, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyMatchPlayerInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //BaseMode
	Write32(p, 0); //SubMode
	Write8(p, 0); //PlayerCount
	for (size_t i = 0; i < n; i++)
	{ //PlayerRoomVisibleInfo
		BYTE* pPlayerRoomVisibleInfo = p;
		Write16(pPlayerRoomVisibleInfo, 0); //len

		WriteUn(pPlayerRoomVisibleInfo, 0); //Uin
		WriteUn(pPlayerRoomVisibleInfo, 0); //Identity
		Write8(pPlayerRoomVisibleInfo, 0); //SeatID
		Write8(pPlayerRoomVisibleInfo, 0); //TeamID
		Write16(pPlayerRoomVisibleInfo, 0); //PlayerID
		Write8(pPlayerRoomVisibleInfo, 0); //Status
		{ //PlayerDBBaseInfo
			BYTE* pPlayerDBBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerDBBaseInfo, 0); //len

			WriteString(pPlayerDBBaseInfo, 0); //NickName[]
			Write8(pPlayerDBBaseInfo, 0); //Gender
			Write8(pPlayerDBBaseInfo, 0); //Country
			Write32(pPlayerDBBaseInfo, 0); //License
			WriteUn(pPlayerDBBaseInfo, 0); //Experience
			Write32(pPlayerDBBaseInfo, 0); //SuperMoney
			Write32(pPlayerDBBaseInfo, 0); //Money
			WriteUn(pPlayerDBBaseInfo, 0); //WinNum
			Write32(pPlayerDBBaseInfo, 0); //SecondNum
			Write32(pPlayerDBBaseInfo, 0); //ThirdNum
			WriteUn(pPlayerDBBaseInfo, 0); //TotalNum
			Write32(pPlayerDBBaseInfo, 0); //CurHonor
			Write32(pPlayerDBBaseInfo, 0); //TotalHonor
			Write32(pPlayerDBBaseInfo, 0); //TodayHonor
			Write32(pPlayerDBBaseInfo, 0); //RelaxTime
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationBefore
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationCur
			Write32(pPlayerDBBaseInfo, 0); //Charm
			Write32(pPlayerDBBaseInfo, 0); //DurationGame
			Write32(pPlayerDBBaseInfo, 0); //DanceExp
			Write32(pPlayerDBBaseInfo, 0); //Coupons
			Write32(pPlayerDBBaseInfo, 0); //Admiration
			Write32(pPlayerDBBaseInfo, 0); //LuckMoney
			Write32(pPlayerDBBaseInfo, 0); //TeamWorkExp
			Write32(pPlayerDBBaseInfo, 0); //AchievePoint
			Write32(pPlayerDBBaseInfo, 0); //RegTime
			WriteString(pPlayerDBBaseInfo, 0); //Signature[]
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchPoint
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchNum
			Write16(pPlayerDBBaseInfo, 0); //LuckyMatchFirstNum
			Write8(pPlayerDBBaseInfo, 0); //LuckyMatchBestRand
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchWinNum
			Write32(pPlayerDBBaseInfo, 0); //FizzPointTotal
			Write16(pPlayerDBBaseInfo, 0); //FizzPointDaily
			Write16(pPlayerDBBaseInfo, 0); //FizzPointWeekly
			Write16(pPlayerDBBaseInfo, 0); //FizzPointLastWeek
			Write8(pPlayerDBBaseInfo, 0); //FizzLotteryStatus
			Write32(pPlayerDBBaseInfo, 0); //FizzLastUpdateTime
			Write32(pPlayerDBBaseInfo, 0); //SNSLocaleCode
			Write32(pPlayerDBBaseInfo, 0); //AuctionRightUnlockTime
			Write8(pPlayerDBBaseInfo, 0); //ReserveFlag
			Write32(pPlayerDBBaseInfo, 0); //CurConsumeScore
			Write32(pPlayerDBBaseInfo, 0); //HistoryConsumeScore
			Write8(pPlayerDBBaseInfo, 0); //CrashModeSponsorID
			Write32(pPlayerDBBaseInfo, 0); //Popularity
			Write32(pPlayerDBBaseInfo, 0); //LadderMatchAchievePoint
			Write32(pPlayerDBBaseInfo, 0); //Cash
			Write32(pPlayerDBBaseInfo, 0); //PlayerGPMIdentity
			Write32(pPlayerDBBaseInfo, 0); //PointTotalScore
			WriteUn(pPlayerDBBaseInfo, 0); //totalMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //lastMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalSeasonId
			WriteUn(pPlayerDBBaseInfo, 0); //lastClearMapMedalTime
			WriteUn(pPlayerDBBaseInfo, 0); //max2048Score
			WriteUn(pPlayerDBBaseInfo, 0); //curPlay2048LeftNum
			Write32(pPlayerDBBaseInfo, 0); //CheerValue
			Write16(pPlayerDBBaseInfo, 0); //SeasonID
			Write32(pPlayerDBBaseInfo, 0); //LastCheerValue
			Write32(pPlayerDBBaseInfo, 0); //SpeedBean
			Write32(pPlayerDBBaseInfo, 0); //SpeedCoin

			len = pPlayerDBBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //PlayerGuildInfo
			BYTE* pPlayerGuildInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerGuildInfo, 0); //len

			WriteString(pPlayerGuildInfo, 0); //GuildName[]
			Write16(pPlayerGuildInfo, 0); //Duty
			Write32(pPlayerGuildInfo, 0); //GuildID
			Write32(pPlayerGuildInfo, 0); //Right
			Write32(pPlayerGuildInfo, 0); //Medal
			Write32(pPlayerGuildInfo, 0); //Contribute
			WriteString(pPlayerGuildInfo, 0); //DutyTitle[]

			len = pPlayerGuildInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write16(pPlayerRoomVisibleInfo, 0); //EquipedItemNum
		for (size_t i = 0; i < n; i++)
		{ //PlayerItemInfo
			BYTE* pPlayerItemInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerItemInfo, 0); //len

			Write32(pPlayerItemInfo, 0); //ItemID
			Write32(pPlayerItemInfo, 0); //ItemNum
			Write32(pPlayerItemInfo, 0); //AvailPeriod
			Write8(pPlayerItemInfo, 0); //Status
			WriteUn(pPlayerItemInfo, 0); //ObtainTime
			Write32(pPlayerItemInfo, 0); //OtherAttribute
			Write16(pPlayerItemInfo, 0); //ItemType

			len = pPlayerItemInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write16(pPlayerRoomVisibleInfo, 0); //PetNum
		for (size_t i = 0; i < n; i++)
		{ //PetInfo
			BYTE* pPetInfo = pPlayerRoomVisibleInfo;
			Write16(pPetInfo, 0); //len

			Write32(pPetInfo, 0); //Uin
			Write32(pPetInfo, 0); //PetId
			WriteString(pPetInfo, 0); //PetName[]
			Write8(pPetInfo, 0); //IsProper
			Write16(pPetInfo, 0); //Level
			Write8(pPetInfo, 0); //Status
			Write16(pPetInfo, 0); //PetSkillNum
			for (size_t i = 0; i < n; i++)
			{ //PetSkillList
				BYTE* pPetSkillList = pPetInfo;
				Write16(pPetSkillList, 0); //len

				Write16(pPetSkillList, 0); //SkillID
				Write8(pPetSkillList, 0); //Status
				Write8(pPetSkillList, 0); //Active
				Write32(pPetSkillList, 0); //Value

				len = pPetSkillList - pPetInfo;
				Set16(pPetInfo, (WORD)len);
				pPetInfo += len;
			}
			Write32(pPetInfo, 0); //StrengLevel
			Write8(pPetInfo, 0); //TopStatus
			{ //CommonInfo
				BYTE* pCommonInfo = pPetInfo;
				Write16(pCommonInfo, 0); //len

				Write32(pCommonInfo, 0); //HuanHuaLevel
				Write8(pCommonInfo, 0); //CanHuanHua

				len = pCommonInfo - pPetInfo;
				Set16(pPetInfo, (WORD)len);
				pPetInfo += len;
			}
			Write16(pPetInfo, 0); //PKStar
			Write32(pPetInfo, 0); //PetSkinID

			len = pPetInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //PlayerGuildMatchInfo
			BYTE* pPlayerGuildMatchInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerGuildMatchInfo, 0); //len

			Write32(pPlayerGuildMatchInfo, 0); //SelfPoint
			Write32(pPlayerGuildMatchInfo, 0); //WinNum
			Write32(pPlayerGuildMatchInfo, 0); //TotalNum

			len = pPlayerGuildMatchInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //IsInTopList
		Write8(pPlayerRoomVisibleInfo, 0); //LoverRaceOrPro
		Write8(pPlayerRoomVisibleInfo, 0); //TmpEffectNum
		Write32(pPlayerRoomVisibleInfo, 0); //TmpEffectItems[]
		Write8(pPlayerRoomVisibleInfo, 0); //OBState
		Write8(pPlayerRoomVisibleInfo, 0); //DebutOrX5
		Write8(pPlayerRoomVisibleInfo, 0); //RandKeyFlag
		WriteUn(pPlayerRoomVisibleInfo, 0); //VipFlag
		Write8(pPlayerRoomVisibleInfo, 0); //HaveAppellation
		for (size_t i = 0; i < n; i++)
		{ //CurAppellation
			BYTE* pCurAppellation = pPlayerRoomVisibleInfo;
			Write16(pCurAppellation, 0); //len

			Write8(pCurAppellation, 0); //Type
			Write8(pCurAppellation, 0); //Level
			Write8(pCurAppellation, 0); //Status
			Write8(pCurAppellation, 0); //Difficulty
			Write32(pCurAppellation, 0); //MapId
			Write32(pCurAppellation, 0); //Value

			len = pCurAppellation - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //NobleInfo
			BYTE* pNobleInfo = pPlayerRoomVisibleInfo;
			Write16(pNobleInfo, 0); //len

			Write32(pNobleInfo, 0); //NobleID
			Write8(pNobleInfo, 0); //NobleLevel
			Write32(pNobleInfo, 0); //NoblePoint
			Write32(pNobleInfo, 0); //NobleLeftDays

			len = pNobleInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasCarryWizard
		for (size_t i = 0; i < n; i++)
		{ //CarryWizardInfo
			BYTE* pCarryWizardInfo = pPlayerRoomVisibleInfo;
			Write16(pCarryWizardInfo, 0); //len

			Write16(pCarryWizardInfo, 0); //WizardID
			WriteString(pCarryWizardInfo, 0); //NickName[]
			Write16(pCarryWizardInfo, 0); //WizardType
			Write8(pCarryWizardInfo, 0); //Order
			Write8(pCarryWizardInfo, 0); //EvolutionBranch
			Write8(pCarryWizardInfo, 0); //IsHuanHua

			len = pCarryWizardInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //GuildVipBaseInfo
			BYTE* pGuildVipBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pGuildVipBaseInfo, 0); //len

			Write8(pGuildVipBaseInfo, 0); //GuildVipLevel
			Write32(pGuildVipBaseInfo, 0); //GuildVipPoint

			len = pGuildVipBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write32(pPlayerRoomVisibleInfo, 0); //ExFlag
		Write8(pPlayerRoomVisibleInfo, 0); //HaveLDMBaseInfo
		for (size_t i = 0; i < n; i++)
		{ //PlayerLDMBaseInfo
			BYTE* pPlayerLDMBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerLDMBaseInfo, 0); //len

			Write8(pPlayerLDMBaseInfo, 0); //Grade
			Write32(pPlayerLDMBaseInfo, 0); //Score
			Write32(pPlayerLDMBaseInfo, 0); //MaxScore
			Write32(pPlayerLDMBaseInfo, 0); //MaxGrade

			len = pPlayerLDMBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasWl
		for (size_t i = 0; i < n; i++)
		{ //PlayerWlVisibleInfo
			BYTE* pPlayerWlVisibleInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerWlVisibleInfo, 0); //len

			Write32(pPlayerWlVisibleInfo, 0); //WonderLandID
			WriteString(pPlayerWlVisibleInfo, 0); //WonderLandName[]
			Write16(pPlayerWlVisibleInfo, 0); //WonderLandDuty
			Write8(pPlayerWlVisibleInfo, 0); //SubType
			Write8(pPlayerWlVisibleInfo, 0); //GuildGrade

			len = pPlayerWlVisibleInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasLoverVip
		for (size_t i = 0; i < n; i++)
		{ //LoverVipInfo
			BYTE* pLoverVipInfo = pPlayerRoomVisibleInfo;
			Write16(pLoverVipInfo, 0); //len

			Write8(pLoverVipInfo, 0); //LoverVipLevel
			Write32(pLoverVipInfo, 0); //LoverVipPoint
			Write8(pLoverVipInfo, 0); //GrowRate

			len = pLoverVipInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasBattleModeSkillInfoList
		for (size_t i = 0; i < n; i++)
		{ //BattleModeSkillInfoList
			BYTE* pBattleModeSkillInfoList = pPlayerRoomVisibleInfo;
			Write16(pBattleModeSkillInfoList, 0); //len

			Write8(pBattleModeSkillInfoList, 0); //SkillNum
			for (size_t i = 0; i < n; i++)
			{ //SkillInfo
				BYTE* pSkillInfo = pBattleModeSkillInfoList;
				Write16(pSkillInfo, 0); //len

				Write16(pSkillInfo, 0); //SkillId
				Write8(pSkillInfo, 0); //SkillLevel

				len = pSkillInfo - pBattleModeSkillInfoList;
				Set16(pBattleModeSkillInfoList, (WORD)len);
				pBattleModeSkillInfoList += len;
			}

			len = pBattleModeSkillInfoList - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasGarden
		for (size_t i = 0; i < n; i++)
		{ //PersonalGardenBaseInfo
			BYTE* pPersonalGardenBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pPersonalGardenBaseInfo, 0); //len

			Write8(pPersonalGardenBaseInfo, 0); //GardenLevel
			Write32(pPersonalGardenBaseInfo, 0); //GardenPoint
			Write8(pPersonalGardenBaseInfo, 0); //GrowRate
			Write32(pPersonalGardenBaseInfo, 0); //GardenExpireTime
			{ //SimpleInfo
				BYTE* pSimpleInfo = pPersonalGardenBaseInfo;
				Write16(pSimpleInfo, 0); //len

				Write32(pSimpleInfo, 0); //WeekPopularity
				Write32(pSimpleInfo, 0); //TotalPopularity
				Write32(pSimpleInfo, 0); //LastUpdatePopularityTime
				Write8(pSimpleInfo, 0); //PrivateType

				len = pSimpleInfo - pPersonalGardenBaseInfo;
				Set16(pPersonalGardenBaseInfo, (WORD)len);
				pPersonalGardenBaseInfo += len;
			}

			len = pPersonalGardenBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //ConsumeVipInfo
			BYTE* pConsumeVipInfo = pPlayerRoomVisibleInfo;
			Write16(pConsumeVipInfo, 0); //len

			WriteUn(pConsumeVipInfo, 0); //VipLevel
			WriteUn(pConsumeVipInfo, 0); //CharmValueOfMonth
			WriteUn(pConsumeVipInfo, 0); //SearchTreasureNums
			WriteUn(pConsumeVipInfo, 0); //GetTreasureNums

			len = pConsumeVipInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HaveBaby
		{ //LoverBabyInfo
			BYTE* pLoverBabyInfo = pPlayerRoomVisibleInfo;
			Write16(pLoverBabyInfo, 0); //len

			Write32(pLoverBabyInfo, 0); //LoverBabyID
			Write32(pLoverBabyInfo, 0); //ItemID
			Write32(pLoverBabyInfo, 0); //GrowValue
			Write32(pLoverBabyInfo, 0); //MentalValue
			Write32(pLoverBabyInfo, 0); //BabyProfileLevel
			Write32(pLoverBabyInfo, 0); //StrengthLevel
			Write32(pLoverBabyInfo, 0); //GrowLevel
			WriteString(pLoverBabyInfo, 0); //LoveBabyNickName[]
			Write16(pLoverBabyInfo, 0); //LoverBabyStat
			Write16(pLoverBabyInfo, 0); //LoverBabyEquipStat
			Write16(pLoverBabyInfo, 0); //LoverBabyTransferdStatus

			len = pLoverBabyInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //EmperorInfo
			BYTE* pEmperorInfo = pPlayerRoomVisibleInfo;
			Write16(pEmperorInfo, 0); //len

			Write8(pEmperorInfo, 0); //EmperorLevel
			Write32(pEmperorInfo, 0); //EmperorPoint
			Write32(pEmperorInfo, 0); //EmperorLeftDays
			Write8(pEmperorInfo, 0); //EmperorGrowRate

			len = pEmperorInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write16(pPlayerRoomVisibleInfo, 0); //RaceCardNums
		for (size_t i = 0; i < n; i++)
		{ //RaceCardAddValueInfo
			BYTE* pRaceCardAddValueInfo = pPlayerRoomVisibleInfo;
			Write16(pRaceCardAddValueInfo, 0); //len

			Write32(pRaceCardAddValueInfo, 0); //RaceCardID
			Write32(pRaceCardAddValueInfo, 0); //AddValue

			len = pRaceCardAddValueInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //GansterScoreInfo
			BYTE* pGansterScoreInfo = pPlayerRoomVisibleInfo;
			Write16(pGansterScoreInfo, 0); //len

			Write32(pGansterScoreInfo, 0); //GansterSeasonID
			Write32(pGansterScoreInfo, 0); //GansterScore
			Write32(pGansterScoreInfo, 0); //PoliceScore
			Write32(pGansterScoreInfo, 0); //TotalGansterScore

			len = pGansterScoreInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write32(pPlayerRoomVisibleInfo, 0); //OlympicId
		Write32(pPlayerRoomVisibleInfo, 0); //NPCEliminateWinTimes
		Write8(pPlayerRoomVisibleInfo, 0); //OriginTeamID
		Write8(pPlayerRoomVisibleInfo, 0); //NxNpc
		Write16(pPlayerRoomVisibleInfo, 0); //NxNpcAILevel
		{ //EquippedActiveKartInfo
			BYTE* pEquippedActiveKartInfo = pPlayerRoomVisibleInfo;
			Write16(pEquippedActiveKartInfo, 0); //len

			Write8(pEquippedActiveKartInfo, 0); //HaveActiveInfo
			Write32(pEquippedActiveKartInfo, 0); //KartID
			Write32(pEquippedActiveKartInfo, 0); //ActiveLevel

			len = pEquippedActiveKartInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //SpecialActivityStatus
		Write8(pPlayerRoomVisibleInfo, 0); //AreaID
		Write8(pPlayerRoomVisibleInfo, 0); //HaveRaiseSecondBaby
		{ //SecondLoverBabyInfo
			BYTE* pSecondLoverBabyInfo = pPlayerRoomVisibleInfo;
			Write16(pSecondLoverBabyInfo, 0); //len

			Write32(pSecondLoverBabyInfo, 0); //LoverBabyID
			Write32(pSecondLoverBabyInfo, 0); //ItemID
			Write32(pSecondLoverBabyInfo, 0); //GrowValue
			Write32(pSecondLoverBabyInfo, 0); //MentalValue
			Write32(pSecondLoverBabyInfo, 0); //BabyProfileLevel
			Write32(pSecondLoverBabyInfo, 0); //StrengthLevel
			Write32(pSecondLoverBabyInfo, 0); //GrowLevel
			WriteString(pSecondLoverBabyInfo, 0); //LoveBabyNickName[]
			Write16(pSecondLoverBabyInfo, 0); //LoverBabyStat
			Write16(pSecondLoverBabyInfo, 0); //LoverBabyEquipStat
			Write16(pSecondLoverBabyInfo, 0); //LoverBabyTransferdStatus

			len = pSecondLoverBabyInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasRankedMatchInfo
		for (size_t i = 0; i < n; i++)
		{ //RankedMatchGradeInfo
			BYTE* pRankedMatchGradeInfo = pPlayerRoomVisibleInfo;
			Write16(pRankedMatchGradeInfo, 0); //len

			Write32(pRankedMatchGradeInfo, 0); //GradeLevel
			Write32(pRankedMatchGradeInfo, 0); //ChildLevel
			Write32(pRankedMatchGradeInfo, 0); //GradeScore
			Write32(pRankedMatchGradeInfo, 0); //MaxGradeScore
			Write32(pRankedMatchGradeInfo, 0); //TotalScore

			len = pRankedMatchGradeInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasHuanLingChangeInfo
		for (size_t i = 0; i < n; i++)
		{ //HuanLingSuitInfo
			BYTE* pHuanLingSuitInfo = pPlayerRoomVisibleInfo;
			Write16(pHuanLingSuitInfo, 0); //len

			Write32(pHuanLingSuitInfo, 0); //SuitID
			Write8(pHuanLingSuitInfo, 0); //ChangeLevel

			len = pHuanLingSuitInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //EquipSealType
		Write16(pPlayerRoomVisibleInfo, 0); //Role
		Write8(pPlayerRoomVisibleInfo, 0); //SpecialActivityIDNum
		Write8(pPlayerRoomVisibleInfo, 0); //CrewID
		Write8(pPlayerRoomVisibleInfo, 0); //SpecialActivityInfoNum
		for (size_t i = 0; i < n; i++)
		{ //SpecialActivityInfo
			BYTE* pSpecialActivityInfo = pPlayerRoomVisibleInfo;
			Write16(pSpecialActivityInfo, 0); //len

			Write8(pSpecialActivityInfo, 0); //ProfessionLicenseInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ProfessionLicenseInfo
				BYTE* pProfessionLicenseInfo = pSpecialActivityInfo;
				Write16(pProfessionLicenseInfo, 0); //len

				Write8(pProfessionLicenseInfo, 0); //BigLevel
				Write8(pProfessionLicenseInfo, 0); //SmallLevel

				len = pProfessionLicenseInfo - pSpecialActivityInfo;
				Set16(pSpecialActivityInfo, (WORD)len);
				pSpecialActivityInfo += len;
			}

			len = pSpecialActivityInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //ParaNum
		Write32(pPlayerRoomVisibleInfo, 0); //ParaList[]
		Write8(pPlayerRoomVisibleInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemOrder
			BYTE* pItemOrder = pPlayerRoomVisibleInfo;
			Write16(pItemOrder, 0); //len

			Write32(pItemOrder, 0); //KartID
			Write32(pItemOrder, 0); //Order
			Write32(pItemOrder, 0); //BackGroundID

			len = pItemOrder - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //TDCExcluItemNum
		Write32(pPlayerRoomVisibleInfo, 0); //TDCExclusiveItemID[]
		Write8(pPlayerRoomVisibleInfo, 0); //EquipNiChangItemNum
		for (size_t i = 0; i < n; i++)
		{ //NiChangPavilionEquipItemInfo
			BYTE* pNiChangPavilionEquipItemInfo = pPlayerRoomVisibleInfo;
			Write16(pNiChangPavilionEquipItemInfo, 0); //len

			Write32(pNiChangPavilionEquipItemInfo, 0); //ItemId
			Write16(pNiChangPavilionEquipItemInfo, 0); //CurrentEquipColorationPlanId

			len = pNiChangPavilionEquipItemInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //TestKartGameType
		Write32(pPlayerRoomVisibleInfo, 0); //GameTestKartID
		Write8(pPlayerRoomVisibleInfo, 0); //HasStarsFightingInfo
		for (size_t i = 0; i < n; i++)
		{ //StarsFightingInfo
			BYTE* pStarsFightingInfo = pPlayerRoomVisibleInfo;
			Write16(pStarsFightingInfo, 0); //len

			Write32(pStarsFightingInfo, 0); //Star
			Write32(pStarsFightingInfo, 0); //StarVal
			Write32(pStarsFightingInfo, 0); //StarsFightingStarLevel

			len = pStarsFightingInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //RoomBGSetting

		len = pPlayerRoomVisibleInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //KartNum
	for (size_t i = 0; i < n; i++)
	{ //KartRefitInfo
		BYTE* pKartRefitInfo = p;
		Write16(pKartRefitInfo, 0); //len

		Write32(pKartRefitInfo, 0); //Uin
		Write32(pKartRefitInfo, 0); //KartId
		Write32(pKartRefitInfo, 0); //RefitCout
		Write16(pKartRefitInfo, 0); //MaxFlags
		Write16(pKartRefitInfo, 0); //WWeight
		Write16(pKartRefitInfo, 0); //SpeedWeight
		Write16(pKartRefitInfo, 0); //JetWeight
		Write16(pKartRefitInfo, 0); //SJetWeight
		Write16(pKartRefitInfo, 0); //AccuWeight
		Write32(pKartRefitInfo, 0); //ShapeRefitCount
		Write32(pKartRefitInfo, 0); //KartHeadRefitItemID
		Write32(pKartRefitInfo, 0); //KartTailRefitItemID
		Write32(pKartRefitInfo, 0); //KartFlankRefitItemID
		Write32(pKartRefitInfo, 0); //KartTireRefitItemID
		Write32(pKartRefitInfo, 0); //SecondRefitCount
		Write16(pKartRefitInfo, 0); //Speed2Weight
		Write16(pKartRefitInfo, 0); //DriftVecWeight
		Write16(pKartRefitInfo, 0); //AdditionalZSpeedWeight
		Write16(pKartRefitInfo, 0); //AntiCollisionWeight
		Write16(pKartRefitInfo, 0); //LuckyValue
		Write16(pKartRefitInfo, 0); //RefitLuckyValueMaxWeight
		Write32(pKartRefitInfo, 0); //ShapeSuitID
		Write8(pKartRefitInfo, 0); //LegendSuitLevel
		Write32(pKartRefitInfo, 0); //LegendSuitLevelChoice
		Write32(pKartRefitInfo, 0); //ShapeLegendSuitID

		len = pKartRefitInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasMoreInfo

	len = p - buf;
	SendToClient(Client, 565, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyMatchPlayerMoreInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //PlayerCount
	for (size_t i = 0; i < n; i++)
	{ //PlayerRoomVisibleInfo
		BYTE* pPlayerRoomVisibleInfo = p;
		Write16(pPlayerRoomVisibleInfo, 0); //len

		WriteUn(pPlayerRoomVisibleInfo, 0); //Uin
		WriteUn(pPlayerRoomVisibleInfo, 0); //Identity
		Write8(pPlayerRoomVisibleInfo, 0); //SeatID
		Write8(pPlayerRoomVisibleInfo, 0); //TeamID
		Write16(pPlayerRoomVisibleInfo, 0); //PlayerID
		Write8(pPlayerRoomVisibleInfo, 0); //Status
		{ //PlayerDBBaseInfo
			BYTE* pPlayerDBBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerDBBaseInfo, 0); //len

			WriteString(pPlayerDBBaseInfo, 0); //NickName[]
			Write8(pPlayerDBBaseInfo, 0); //Gender
			Write8(pPlayerDBBaseInfo, 0); //Country
			Write32(pPlayerDBBaseInfo, 0); //License
			WriteUn(pPlayerDBBaseInfo, 0); //Experience
			Write32(pPlayerDBBaseInfo, 0); //SuperMoney
			Write32(pPlayerDBBaseInfo, 0); //Money
			WriteUn(pPlayerDBBaseInfo, 0); //WinNum
			Write32(pPlayerDBBaseInfo, 0); //SecondNum
			Write32(pPlayerDBBaseInfo, 0); //ThirdNum
			WriteUn(pPlayerDBBaseInfo, 0); //TotalNum
			Write32(pPlayerDBBaseInfo, 0); //CurHonor
			Write32(pPlayerDBBaseInfo, 0); //TotalHonor
			Write32(pPlayerDBBaseInfo, 0); //TodayHonor
			Write32(pPlayerDBBaseInfo, 0); //RelaxTime
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationBefore
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationCur
			Write32(pPlayerDBBaseInfo, 0); //Charm
			Write32(pPlayerDBBaseInfo, 0); //DurationGame
			Write32(pPlayerDBBaseInfo, 0); //DanceExp
			Write32(pPlayerDBBaseInfo, 0); //Coupons
			Write32(pPlayerDBBaseInfo, 0); //Admiration
			Write32(pPlayerDBBaseInfo, 0); //LuckMoney
			Write32(pPlayerDBBaseInfo, 0); //TeamWorkExp
			Write32(pPlayerDBBaseInfo, 0); //AchievePoint
			Write32(pPlayerDBBaseInfo, 0); //RegTime
			WriteString(pPlayerDBBaseInfo, 0); //Signature[]
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchPoint
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchNum
			Write16(pPlayerDBBaseInfo, 0); //LuckyMatchFirstNum
			Write8(pPlayerDBBaseInfo, 0); //LuckyMatchBestRand
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchWinNum
			Write32(pPlayerDBBaseInfo, 0); //FizzPointTotal
			Write16(pPlayerDBBaseInfo, 0); //FizzPointDaily
			Write16(pPlayerDBBaseInfo, 0); //FizzPointWeekly
			Write16(pPlayerDBBaseInfo, 0); //FizzPointLastWeek
			Write8(pPlayerDBBaseInfo, 0); //FizzLotteryStatus
			Write32(pPlayerDBBaseInfo, 0); //FizzLastUpdateTime
			Write32(pPlayerDBBaseInfo, 0); //SNSLocaleCode
			Write32(pPlayerDBBaseInfo, 0); //AuctionRightUnlockTime
			Write8(pPlayerDBBaseInfo, 0); //ReserveFlag
			Write32(pPlayerDBBaseInfo, 0); //CurConsumeScore
			Write32(pPlayerDBBaseInfo, 0); //HistoryConsumeScore
			Write8(pPlayerDBBaseInfo, 0); //CrashModeSponsorID
			Write32(pPlayerDBBaseInfo, 0); //Popularity
			Write32(pPlayerDBBaseInfo, 0); //LadderMatchAchievePoint
			Write32(pPlayerDBBaseInfo, 0); //Cash
			Write32(pPlayerDBBaseInfo, 0); //PlayerGPMIdentity
			Write32(pPlayerDBBaseInfo, 0); //PointTotalScore
			WriteUn(pPlayerDBBaseInfo, 0); //totalMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //lastMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalSeasonId
			WriteUn(pPlayerDBBaseInfo, 0); //lastClearMapMedalTime
			WriteUn(pPlayerDBBaseInfo, 0); //max2048Score
			WriteUn(pPlayerDBBaseInfo, 0); //curPlay2048LeftNum
			Write32(pPlayerDBBaseInfo, 0); //CheerValue
			Write16(pPlayerDBBaseInfo, 0); //SeasonID
			Write32(pPlayerDBBaseInfo, 0); //LastCheerValue
			Write32(pPlayerDBBaseInfo, 0); //SpeedBean
			Write32(pPlayerDBBaseInfo, 0); //SpeedCoin

			len = pPlayerDBBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //PlayerGuildInfo
			BYTE* pPlayerGuildInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerGuildInfo, 0); //len

			WriteString(pPlayerGuildInfo, 0); //GuildName[]
			Write16(pPlayerGuildInfo, 0); //Duty
			Write32(pPlayerGuildInfo, 0); //GuildID
			Write32(pPlayerGuildInfo, 0); //Right
			Write32(pPlayerGuildInfo, 0); //Medal
			Write32(pPlayerGuildInfo, 0); //Contribute
			WriteString(pPlayerGuildInfo, 0); //DutyTitle[]

			len = pPlayerGuildInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write16(pPlayerRoomVisibleInfo, 0); //EquipedItemNum
		for (size_t i = 0; i < n; i++)
		{ //PlayerItemInfo
			BYTE* pPlayerItemInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerItemInfo, 0); //len

			Write32(pPlayerItemInfo, 0); //ItemID
			Write32(pPlayerItemInfo, 0); //ItemNum
			Write32(pPlayerItemInfo, 0); //AvailPeriod
			Write8(pPlayerItemInfo, 0); //Status
			WriteUn(pPlayerItemInfo, 0); //ObtainTime
			Write32(pPlayerItemInfo, 0); //OtherAttribute
			Write16(pPlayerItemInfo, 0); //ItemType

			len = pPlayerItemInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write16(pPlayerRoomVisibleInfo, 0); //PetNum
		for (size_t i = 0; i < n; i++)
		{ //PetInfo
			BYTE* pPetInfo = pPlayerRoomVisibleInfo;
			Write16(pPetInfo, 0); //len

			Write32(pPetInfo, 0); //Uin
			Write32(pPetInfo, 0); //PetId
			WriteString(pPetInfo, 0); //PetName[]
			Write8(pPetInfo, 0); //IsProper
			Write16(pPetInfo, 0); //Level
			Write8(pPetInfo, 0); //Status
			Write16(pPetInfo, 0); //PetSkillNum
			for (size_t i = 0; i < n; i++)
			{ //PetSkillList
				BYTE* pPetSkillList = pPetInfo;
				Write16(pPetSkillList, 0); //len

				Write16(pPetSkillList, 0); //SkillID
				Write8(pPetSkillList, 0); //Status
				Write8(pPetSkillList, 0); //Active
				Write32(pPetSkillList, 0); //Value

				len = pPetSkillList - pPetInfo;
				Set16(pPetInfo, (WORD)len);
				pPetInfo += len;
			}
			Write32(pPetInfo, 0); //StrengLevel
			Write8(pPetInfo, 0); //TopStatus
			{ //CommonInfo
				BYTE* pCommonInfo = pPetInfo;
				Write16(pCommonInfo, 0); //len

				Write32(pCommonInfo, 0); //HuanHuaLevel
				Write8(pCommonInfo, 0); //CanHuanHua

				len = pCommonInfo - pPetInfo;
				Set16(pPetInfo, (WORD)len);
				pPetInfo += len;
			}
			Write16(pPetInfo, 0); //PKStar
			Write32(pPetInfo, 0); //PetSkinID

			len = pPetInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //PlayerGuildMatchInfo
			BYTE* pPlayerGuildMatchInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerGuildMatchInfo, 0); //len

			Write32(pPlayerGuildMatchInfo, 0); //SelfPoint
			Write32(pPlayerGuildMatchInfo, 0); //WinNum
			Write32(pPlayerGuildMatchInfo, 0); //TotalNum

			len = pPlayerGuildMatchInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //IsInTopList
		Write8(pPlayerRoomVisibleInfo, 0); //LoverRaceOrPro
		Write8(pPlayerRoomVisibleInfo, 0); //TmpEffectNum
		Write32(pPlayerRoomVisibleInfo, 0); //TmpEffectItems[]
		Write8(pPlayerRoomVisibleInfo, 0); //OBState
		Write8(pPlayerRoomVisibleInfo, 0); //DebutOrX5
		Write8(pPlayerRoomVisibleInfo, 0); //RandKeyFlag
		WriteUn(pPlayerRoomVisibleInfo, 0); //VipFlag
		Write8(pPlayerRoomVisibleInfo, 0); //HaveAppellation
		for (size_t i = 0; i < n; i++)
		{ //CurAppellation
			BYTE* pCurAppellation = pPlayerRoomVisibleInfo;
			Write16(pCurAppellation, 0); //len

			Write8(pCurAppellation, 0); //Type
			Write8(pCurAppellation, 0); //Level
			Write8(pCurAppellation, 0); //Status
			Write8(pCurAppellation, 0); //Difficulty
			Write32(pCurAppellation, 0); //MapId
			Write32(pCurAppellation, 0); //Value

			len = pCurAppellation - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //NobleInfo
			BYTE* pNobleInfo = pPlayerRoomVisibleInfo;
			Write16(pNobleInfo, 0); //len

			Write32(pNobleInfo, 0); //NobleID
			Write8(pNobleInfo, 0); //NobleLevel
			Write32(pNobleInfo, 0); //NoblePoint
			Write32(pNobleInfo, 0); //NobleLeftDays

			len = pNobleInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasCarryWizard
		for (size_t i = 0; i < n; i++)
		{ //CarryWizardInfo
			BYTE* pCarryWizardInfo = pPlayerRoomVisibleInfo;
			Write16(pCarryWizardInfo, 0); //len

			Write16(pCarryWizardInfo, 0); //WizardID
			WriteString(pCarryWizardInfo, 0); //NickName[]
			Write16(pCarryWizardInfo, 0); //WizardType
			Write8(pCarryWizardInfo, 0); //Order
			Write8(pCarryWizardInfo, 0); //EvolutionBranch
			Write8(pCarryWizardInfo, 0); //IsHuanHua

			len = pCarryWizardInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //GuildVipBaseInfo
			BYTE* pGuildVipBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pGuildVipBaseInfo, 0); //len

			Write8(pGuildVipBaseInfo, 0); //GuildVipLevel
			Write32(pGuildVipBaseInfo, 0); //GuildVipPoint

			len = pGuildVipBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write32(pPlayerRoomVisibleInfo, 0); //ExFlag
		Write8(pPlayerRoomVisibleInfo, 0); //HaveLDMBaseInfo
		for (size_t i = 0; i < n; i++)
		{ //PlayerLDMBaseInfo
			BYTE* pPlayerLDMBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerLDMBaseInfo, 0); //len

			Write8(pPlayerLDMBaseInfo, 0); //Grade
			Write32(pPlayerLDMBaseInfo, 0); //Score
			Write32(pPlayerLDMBaseInfo, 0); //MaxScore
			Write32(pPlayerLDMBaseInfo, 0); //MaxGrade

			len = pPlayerLDMBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasWl
		for (size_t i = 0; i < n; i++)
		{ //PlayerWlVisibleInfo
			BYTE* pPlayerWlVisibleInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerWlVisibleInfo, 0); //len

			Write32(pPlayerWlVisibleInfo, 0); //WonderLandID
			WriteString(pPlayerWlVisibleInfo, 0); //WonderLandName[]
			Write16(pPlayerWlVisibleInfo, 0); //WonderLandDuty
			Write8(pPlayerWlVisibleInfo, 0); //SubType
			Write8(pPlayerWlVisibleInfo, 0); //GuildGrade

			len = pPlayerWlVisibleInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasLoverVip
		for (size_t i = 0; i < n; i++)
		{ //LoverVipInfo
			BYTE* pLoverVipInfo = pPlayerRoomVisibleInfo;
			Write16(pLoverVipInfo, 0); //len

			Write8(pLoverVipInfo, 0); //LoverVipLevel
			Write32(pLoverVipInfo, 0); //LoverVipPoint
			Write8(pLoverVipInfo, 0); //GrowRate

			len = pLoverVipInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasBattleModeSkillInfoList
		for (size_t i = 0; i < n; i++)
		{ //BattleModeSkillInfoList
			BYTE* pBattleModeSkillInfoList = pPlayerRoomVisibleInfo;
			Write16(pBattleModeSkillInfoList, 0); //len

			Write8(pBattleModeSkillInfoList, 0); //SkillNum
			for (size_t i = 0; i < n; i++)
			{ //SkillInfo
				BYTE* pSkillInfo = pBattleModeSkillInfoList;
				Write16(pSkillInfo, 0); //len

				Write16(pSkillInfo, 0); //SkillId
				Write8(pSkillInfo, 0); //SkillLevel

				len = pSkillInfo - pBattleModeSkillInfoList;
				Set16(pBattleModeSkillInfoList, (WORD)len);
				pBattleModeSkillInfoList += len;
			}

			len = pBattleModeSkillInfoList - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasGarden
		for (size_t i = 0; i < n; i++)
		{ //PersonalGardenBaseInfo
			BYTE* pPersonalGardenBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pPersonalGardenBaseInfo, 0); //len

			Write8(pPersonalGardenBaseInfo, 0); //GardenLevel
			Write32(pPersonalGardenBaseInfo, 0); //GardenPoint
			Write8(pPersonalGardenBaseInfo, 0); //GrowRate
			Write32(pPersonalGardenBaseInfo, 0); //GardenExpireTime
			{ //SimpleInfo
				BYTE* pSimpleInfo = pPersonalGardenBaseInfo;
				Write16(pSimpleInfo, 0); //len

				Write32(pSimpleInfo, 0); //WeekPopularity
				Write32(pSimpleInfo, 0); //TotalPopularity
				Write32(pSimpleInfo, 0); //LastUpdatePopularityTime
				Write8(pSimpleInfo, 0); //PrivateType

				len = pSimpleInfo - pPersonalGardenBaseInfo;
				Set16(pPersonalGardenBaseInfo, (WORD)len);
				pPersonalGardenBaseInfo += len;
			}

			len = pPersonalGardenBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //ConsumeVipInfo
			BYTE* pConsumeVipInfo = pPlayerRoomVisibleInfo;
			Write16(pConsumeVipInfo, 0); //len

			WriteUn(pConsumeVipInfo, 0); //VipLevel
			WriteUn(pConsumeVipInfo, 0); //CharmValueOfMonth
			WriteUn(pConsumeVipInfo, 0); //SearchTreasureNums
			WriteUn(pConsumeVipInfo, 0); //GetTreasureNums

			len = pConsumeVipInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HaveBaby
		{ //LoverBabyInfo
			BYTE* pLoverBabyInfo = pPlayerRoomVisibleInfo;
			Write16(pLoverBabyInfo, 0); //len

			Write32(pLoverBabyInfo, 0); //LoverBabyID
			Write32(pLoverBabyInfo, 0); //ItemID
			Write32(pLoverBabyInfo, 0); //GrowValue
			Write32(pLoverBabyInfo, 0); //MentalValue
			Write32(pLoverBabyInfo, 0); //BabyProfileLevel
			Write32(pLoverBabyInfo, 0); //StrengthLevel
			Write32(pLoverBabyInfo, 0); //GrowLevel
			WriteString(pLoverBabyInfo, 0); //LoveBabyNickName[]
			Write16(pLoverBabyInfo, 0); //LoverBabyStat
			Write16(pLoverBabyInfo, 0); //LoverBabyEquipStat
			Write16(pLoverBabyInfo, 0); //LoverBabyTransferdStatus

			len = pLoverBabyInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //EmperorInfo
			BYTE* pEmperorInfo = pPlayerRoomVisibleInfo;
			Write16(pEmperorInfo, 0); //len

			Write8(pEmperorInfo, 0); //EmperorLevel
			Write32(pEmperorInfo, 0); //EmperorPoint
			Write32(pEmperorInfo, 0); //EmperorLeftDays
			Write8(pEmperorInfo, 0); //EmperorGrowRate

			len = pEmperorInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write16(pPlayerRoomVisibleInfo, 0); //RaceCardNums
		for (size_t i = 0; i < n; i++)
		{ //RaceCardAddValueInfo
			BYTE* pRaceCardAddValueInfo = pPlayerRoomVisibleInfo;
			Write16(pRaceCardAddValueInfo, 0); //len

			Write32(pRaceCardAddValueInfo, 0); //RaceCardID
			Write32(pRaceCardAddValueInfo, 0); //AddValue

			len = pRaceCardAddValueInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //GansterScoreInfo
			BYTE* pGansterScoreInfo = pPlayerRoomVisibleInfo;
			Write16(pGansterScoreInfo, 0); //len

			Write32(pGansterScoreInfo, 0); //GansterSeasonID
			Write32(pGansterScoreInfo, 0); //GansterScore
			Write32(pGansterScoreInfo, 0); //PoliceScore
			Write32(pGansterScoreInfo, 0); //TotalGansterScore

			len = pGansterScoreInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write32(pPlayerRoomVisibleInfo, 0); //OlympicId
		Write32(pPlayerRoomVisibleInfo, 0); //NPCEliminateWinTimes
		Write8(pPlayerRoomVisibleInfo, 0); //OriginTeamID
		Write8(pPlayerRoomVisibleInfo, 0); //NxNpc
		Write16(pPlayerRoomVisibleInfo, 0); //NxNpcAILevel
		{ //EquippedActiveKartInfo
			BYTE* pEquippedActiveKartInfo = pPlayerRoomVisibleInfo;
			Write16(pEquippedActiveKartInfo, 0); //len

			Write8(pEquippedActiveKartInfo, 0); //HaveActiveInfo
			Write32(pEquippedActiveKartInfo, 0); //KartID
			Write32(pEquippedActiveKartInfo, 0); //ActiveLevel

			len = pEquippedActiveKartInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //SpecialActivityStatus
		Write8(pPlayerRoomVisibleInfo, 0); //AreaID
		Write8(pPlayerRoomVisibleInfo, 0); //HaveRaiseSecondBaby
		{ //SecondLoverBabyInfo
			BYTE* pSecondLoverBabyInfo = pPlayerRoomVisibleInfo;
			Write16(pSecondLoverBabyInfo, 0); //len

			Write32(pSecondLoverBabyInfo, 0); //LoverBabyID
			Write32(pSecondLoverBabyInfo, 0); //ItemID
			Write32(pSecondLoverBabyInfo, 0); //GrowValue
			Write32(pSecondLoverBabyInfo, 0); //MentalValue
			Write32(pSecondLoverBabyInfo, 0); //BabyProfileLevel
			Write32(pSecondLoverBabyInfo, 0); //StrengthLevel
			Write32(pSecondLoverBabyInfo, 0); //GrowLevel
			WriteString(pSecondLoverBabyInfo, 0); //LoveBabyNickName[]
			Write16(pSecondLoverBabyInfo, 0); //LoverBabyStat
			Write16(pSecondLoverBabyInfo, 0); //LoverBabyEquipStat
			Write16(pSecondLoverBabyInfo, 0); //LoverBabyTransferdStatus

			len = pSecondLoverBabyInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasRankedMatchInfo
		for (size_t i = 0; i < n; i++)
		{ //RankedMatchGradeInfo
			BYTE* pRankedMatchGradeInfo = pPlayerRoomVisibleInfo;
			Write16(pRankedMatchGradeInfo, 0); //len

			Write32(pRankedMatchGradeInfo, 0); //GradeLevel
			Write32(pRankedMatchGradeInfo, 0); //ChildLevel
			Write32(pRankedMatchGradeInfo, 0); //GradeScore
			Write32(pRankedMatchGradeInfo, 0); //MaxGradeScore
			Write32(pRankedMatchGradeInfo, 0); //TotalScore

			len = pRankedMatchGradeInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasHuanLingChangeInfo
		for (size_t i = 0; i < n; i++)
		{ //HuanLingSuitInfo
			BYTE* pHuanLingSuitInfo = pPlayerRoomVisibleInfo;
			Write16(pHuanLingSuitInfo, 0); //len

			Write32(pHuanLingSuitInfo, 0); //SuitID
			Write8(pHuanLingSuitInfo, 0); //ChangeLevel

			len = pHuanLingSuitInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //EquipSealType
		Write16(pPlayerRoomVisibleInfo, 0); //Role
		Write8(pPlayerRoomVisibleInfo, 0); //SpecialActivityIDNum
		Write8(pPlayerRoomVisibleInfo, 0); //CrewID
		Write8(pPlayerRoomVisibleInfo, 0); //SpecialActivityInfoNum
		for (size_t i = 0; i < n; i++)
		{ //SpecialActivityInfo
			BYTE* pSpecialActivityInfo = pPlayerRoomVisibleInfo;
			Write16(pSpecialActivityInfo, 0); //len

			Write8(pSpecialActivityInfo, 0); //ProfessionLicenseInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ProfessionLicenseInfo
				BYTE* pProfessionLicenseInfo = pSpecialActivityInfo;
				Write16(pProfessionLicenseInfo, 0); //len

				Write8(pProfessionLicenseInfo, 0); //BigLevel
				Write8(pProfessionLicenseInfo, 0); //SmallLevel

				len = pProfessionLicenseInfo - pSpecialActivityInfo;
				Set16(pSpecialActivityInfo, (WORD)len);
				pSpecialActivityInfo += len;
			}

			len = pSpecialActivityInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //ParaNum
		Write32(pPlayerRoomVisibleInfo, 0); //ParaList[]
		Write8(pPlayerRoomVisibleInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemOrder
			BYTE* pItemOrder = pPlayerRoomVisibleInfo;
			Write16(pItemOrder, 0); //len

			Write32(pItemOrder, 0); //KartID
			Write32(pItemOrder, 0); //Order
			Write32(pItemOrder, 0); //BackGroundID

			len = pItemOrder - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //TDCExcluItemNum
		Write32(pPlayerRoomVisibleInfo, 0); //TDCExclusiveItemID[]
		Write8(pPlayerRoomVisibleInfo, 0); //EquipNiChangItemNum
		for (size_t i = 0; i < n; i++)
		{ //NiChangPavilionEquipItemInfo
			BYTE* pNiChangPavilionEquipItemInfo = pPlayerRoomVisibleInfo;
			Write16(pNiChangPavilionEquipItemInfo, 0); //len

			Write32(pNiChangPavilionEquipItemInfo, 0); //ItemId
			Write16(pNiChangPavilionEquipItemInfo, 0); //CurrentEquipColorationPlanId

			len = pNiChangPavilionEquipItemInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //TestKartGameType
		Write32(pPlayerRoomVisibleInfo, 0); //GameTestKartID
		Write8(pPlayerRoomVisibleInfo, 0); //HasStarsFightingInfo
		for (size_t i = 0; i < n; i++)
		{ //StarsFightingInfo
			BYTE* pStarsFightingInfo = pPlayerRoomVisibleInfo;
			Write16(pStarsFightingInfo, 0); //len

			Write32(pStarsFightingInfo, 0); //Star
			Write32(pStarsFightingInfo, 0); //StarVal
			Write32(pStarsFightingInfo, 0); //StarsFightingStarLevel

			len = pStarsFightingInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //RoomBGSetting

		len = pPlayerRoomVisibleInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //KartNum
	for (size_t i = 0; i < n; i++)
	{ //KartRefitInfo
		BYTE* pKartRefitInfo = p;
		Write16(pKartRefitInfo, 0); //len

		Write32(pKartRefitInfo, 0); //Uin
		Write32(pKartRefitInfo, 0); //KartId
		Write32(pKartRefitInfo, 0); //RefitCout
		Write16(pKartRefitInfo, 0); //MaxFlags
		Write16(pKartRefitInfo, 0); //WWeight
		Write16(pKartRefitInfo, 0); //SpeedWeight
		Write16(pKartRefitInfo, 0); //JetWeight
		Write16(pKartRefitInfo, 0); //SJetWeight
		Write16(pKartRefitInfo, 0); //AccuWeight
		Write32(pKartRefitInfo, 0); //ShapeRefitCount
		Write32(pKartRefitInfo, 0); //KartHeadRefitItemID
		Write32(pKartRefitInfo, 0); //KartTailRefitItemID
		Write32(pKartRefitInfo, 0); //KartFlankRefitItemID
		Write32(pKartRefitInfo, 0); //KartTireRefitItemID
		Write32(pKartRefitInfo, 0); //SecondRefitCount
		Write16(pKartRefitInfo, 0); //Speed2Weight
		Write16(pKartRefitInfo, 0); //DriftVecWeight
		Write16(pKartRefitInfo, 0); //AdditionalZSpeedWeight
		Write16(pKartRefitInfo, 0); //AntiCollisionWeight
		Write16(pKartRefitInfo, 0); //LuckyValue
		Write16(pKartRefitInfo, 0); //RefitLuckyValueMaxWeight
		Write32(pKartRefitInfo, 0); //ShapeSuitID
		Write8(pKartRefitInfo, 0); //LegendSuitLevel
		Write32(pKartRefitInfo, 0); //LegendSuitLevelChoice
		Write32(pKartRefitInfo, 0); //ShapeLegendSuitID

		len = pKartRefitInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasNext

	len = p - buf;
	SendToClient(Client, 619, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestCancelMatch(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseCancelMatch(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 156, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyPlayerLeaveMatchGame(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //GameType

	len = p - buf;
	SendToClient(Client, 566, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestClearPoint(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseClearPoint(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen
	Write8(p, 0); //InfoLen

	len = p - buf;
	SendToClient(Client, 157, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetNumericalValue(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	int Time = Read32(p);
	UCHAR ValueTypeIdNum = Read8(p);
	[] ValueTypeIds[] = Read(p);

}

void NotifyNumericalValue(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //ValueTypeIdNum
	for (size_t i = 0; i < n; i++)
	{ //ValueData
		BYTE* pValueData = p;
		Write16(pValueData, 0); //len

		Write16(pValueData, 0); //ValueTypeId
		Write32(pValueData, 0); //Value

		len = pValueData - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 921, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetWlMatchAwardCfg(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	U Uin = ReadU(p);
	int Time = Read32(p);
	U CurVer = ReadU(p);

}

void ResponseGetWlMatchAwardCfg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteU(p, 0); //ResultId
	WriteU(p, 0); //CurVer
	WriteU(p, 0); //CostMatchScore
	WriteU(p, 0); //AwardNum
	for (size_t i = 0; i < n; i++)
	{ //AwardInfo
		BYTE* pAwardInfo = p;
		Write16(pAwardInfo, 0); //len

		WriteU(pAwardInfo, 0); //AwardId
		WriteU(pAwardInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAwardInfo;
			Write16(pItemInfo, 0); //len

			Write16(pItemInfo, 0); //GenderItemNum
			Write32(pItemInfo, 0); //ItemID[]
			Write16(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write16(pItemInfo, 0); //BroadcastType
			Write16(pItemInfo, 0); //BroadcastFlag
			Write8(pItemInfo, 0); //ShowPriority
			Write8(pItemInfo, 0); //ItemType
			Write8(pItemInfo, 0); //IgnoreItem
			Write32(pItemInfo, 0); //LimitPara
			Write8(pItemInfo, 0); //SpecialAwardCtrlType
			Write8(pItemInfo, 0); //AwardCtrlType

			len = pItemInfo - pAwardInfo;
			Set16(pAwardInfo, (WORD)len);
			pAwardInfo += len;
		}

		len = pAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 962, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetWlMatchAward(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	U Uin = ReadU(p);
	int Time = Read32(p);

}

void ResponseGetWlMatchAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteU(p, 0); //ResultId
	Write32(p, 0); //CostMatchScore
	WriteU(p, 0); //HasAward
	for (size_t i = 0; i < n; i++)
	{ //Award
		BYTE* pAward = p;
		Write16(pAward, 0); //len

		Write32(pAward, 0); //Exp
		Write32(pAward, 0); //Money
		Write32(pAward, 0); //SuperMoney
		Write16(pAward, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAward;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write32(pAward, 0); //Coupons
		Write32(pAward, 0); //GuildPoint
		Write32(pAward, 0); //LuckMoney
		Write8(pAward, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAward;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write32(pAward, 0); //SpeedCoin

		len = pAward - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 963, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestEnterWlMatchGame(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	U Uin = ReadU(p);
	int Time = Read32(p);
	U GameMode = ReadU(p);

}

void ResponseEnterWlMatchGame(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteU(p, 0); //ResultId
	WriteU(p, 0); //ReasonLen
	WriteU(p, 0); //GameMode

	len = p - buf;
	SendToClient(Client, 964, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyEnterWlMatchGameFailed(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteU(p, 0); //ResultId
	WriteU(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 965, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestCancelWlMatch(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	U Uin = ReadU(p);
	int Time = Read32(p);

}

void ResponseCancelWlMatch(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteU(p, 0); //ResultId
	WriteU(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 970, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyWlMatchPlayerInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //BaseMode
	Write32(p, 0); //SubMode
	WriteU(p, 0); //PlayerCount
	for (size_t i = 0; i < n; i++)
	{ //PlayerRoomVisibleInfo
		BYTE* pPlayerRoomVisibleInfo = p;
		Write16(pPlayerRoomVisibleInfo, 0); //len

		WriteUn(pPlayerRoomVisibleInfo, 0); //Uin
		WriteUn(pPlayerRoomVisibleInfo, 0); //Identity
		Write8(pPlayerRoomVisibleInfo, 0); //SeatID
		Write8(pPlayerRoomVisibleInfo, 0); //TeamID
		Write16(pPlayerRoomVisibleInfo, 0); //PlayerID
		Write8(pPlayerRoomVisibleInfo, 0); //Status
		{ //PlayerDBBaseInfo
			BYTE* pPlayerDBBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerDBBaseInfo, 0); //len

			WriteString(pPlayerDBBaseInfo, 0); //NickName[]
			Write8(pPlayerDBBaseInfo, 0); //Gender
			Write8(pPlayerDBBaseInfo, 0); //Country
			Write32(pPlayerDBBaseInfo, 0); //License
			WriteUn(pPlayerDBBaseInfo, 0); //Experience
			Write32(pPlayerDBBaseInfo, 0); //SuperMoney
			Write32(pPlayerDBBaseInfo, 0); //Money
			WriteUn(pPlayerDBBaseInfo, 0); //WinNum
			Write32(pPlayerDBBaseInfo, 0); //SecondNum
			Write32(pPlayerDBBaseInfo, 0); //ThirdNum
			WriteUn(pPlayerDBBaseInfo, 0); //TotalNum
			Write32(pPlayerDBBaseInfo, 0); //CurHonor
			Write32(pPlayerDBBaseInfo, 0); //TotalHonor
			Write32(pPlayerDBBaseInfo, 0); //TodayHonor
			Write32(pPlayerDBBaseInfo, 0); //RelaxTime
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationBefore
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationCur
			Write32(pPlayerDBBaseInfo, 0); //Charm
			Write32(pPlayerDBBaseInfo, 0); //DurationGame
			Write32(pPlayerDBBaseInfo, 0); //DanceExp
			Write32(pPlayerDBBaseInfo, 0); //Coupons
			Write32(pPlayerDBBaseInfo, 0); //Admiration
			Write32(pPlayerDBBaseInfo, 0); //LuckMoney
			Write32(pPlayerDBBaseInfo, 0); //TeamWorkExp
			Write32(pPlayerDBBaseInfo, 0); //AchievePoint
			Write32(pPlayerDBBaseInfo, 0); //RegTime
			WriteString(pPlayerDBBaseInfo, 0); //Signature[]
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchPoint
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchNum
			Write16(pPlayerDBBaseInfo, 0); //LuckyMatchFirstNum
			Write8(pPlayerDBBaseInfo, 0); //LuckyMatchBestRand
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchWinNum
			Write32(pPlayerDBBaseInfo, 0); //FizzPointTotal
			Write16(pPlayerDBBaseInfo, 0); //FizzPointDaily
			Write16(pPlayerDBBaseInfo, 0); //FizzPointWeekly
			Write16(pPlayerDBBaseInfo, 0); //FizzPointLastWeek
			Write8(pPlayerDBBaseInfo, 0); //FizzLotteryStatus
			Write32(pPlayerDBBaseInfo, 0); //FizzLastUpdateTime
			Write32(pPlayerDBBaseInfo, 0); //SNSLocaleCode
			Write32(pPlayerDBBaseInfo, 0); //AuctionRightUnlockTime
			Write8(pPlayerDBBaseInfo, 0); //ReserveFlag
			Write32(pPlayerDBBaseInfo, 0); //CurConsumeScore
			Write32(pPlayerDBBaseInfo, 0); //HistoryConsumeScore
			Write8(pPlayerDBBaseInfo, 0); //CrashModeSponsorID
			Write32(pPlayerDBBaseInfo, 0); //Popularity
			Write32(pPlayerDBBaseInfo, 0); //LadderMatchAchievePoint
			Write32(pPlayerDBBaseInfo, 0); //Cash
			Write32(pPlayerDBBaseInfo, 0); //PlayerGPMIdentity
			Write32(pPlayerDBBaseInfo, 0); //PointTotalScore
			WriteUn(pPlayerDBBaseInfo, 0); //totalMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //lastMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalSeasonId
			WriteUn(pPlayerDBBaseInfo, 0); //lastClearMapMedalTime
			WriteUn(pPlayerDBBaseInfo, 0); //max2048Score
			WriteUn(pPlayerDBBaseInfo, 0); //curPlay2048LeftNum
			Write32(pPlayerDBBaseInfo, 0); //CheerValue
			Write16(pPlayerDBBaseInfo, 0); //SeasonID
			Write32(pPlayerDBBaseInfo, 0); //LastCheerValue
			Write32(pPlayerDBBaseInfo, 0); //SpeedBean
			Write32(pPlayerDBBaseInfo, 0); //SpeedCoin

			len = pPlayerDBBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //PlayerGuildInfo
			BYTE* pPlayerGuildInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerGuildInfo, 0); //len

			WriteString(pPlayerGuildInfo, 0); //GuildName[]
			Write16(pPlayerGuildInfo, 0); //Duty
			Write32(pPlayerGuildInfo, 0); //GuildID
			Write32(pPlayerGuildInfo, 0); //Right
			Write32(pPlayerGuildInfo, 0); //Medal
			Write32(pPlayerGuildInfo, 0); //Contribute
			WriteString(pPlayerGuildInfo, 0); //DutyTitle[]

			len = pPlayerGuildInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write16(pPlayerRoomVisibleInfo, 0); //EquipedItemNum
		for (size_t i = 0; i < n; i++)
		{ //PlayerItemInfo
			BYTE* pPlayerItemInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerItemInfo, 0); //len

			Write32(pPlayerItemInfo, 0); //ItemID
			Write32(pPlayerItemInfo, 0); //ItemNum
			Write32(pPlayerItemInfo, 0); //AvailPeriod
			Write8(pPlayerItemInfo, 0); //Status
			WriteUn(pPlayerItemInfo, 0); //ObtainTime
			Write32(pPlayerItemInfo, 0); //OtherAttribute
			Write16(pPlayerItemInfo, 0); //ItemType

			len = pPlayerItemInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write16(pPlayerRoomVisibleInfo, 0); //PetNum
		for (size_t i = 0; i < n; i++)
		{ //PetInfo
			BYTE* pPetInfo = pPlayerRoomVisibleInfo;
			Write16(pPetInfo, 0); //len

			Write32(pPetInfo, 0); //Uin
			Write32(pPetInfo, 0); //PetId
			WriteString(pPetInfo, 0); //PetName[]
			Write8(pPetInfo, 0); //IsProper
			Write16(pPetInfo, 0); //Level
			Write8(pPetInfo, 0); //Status
			Write16(pPetInfo, 0); //PetSkillNum
			for (size_t i = 0; i < n; i++)
			{ //PetSkillList
				BYTE* pPetSkillList = pPetInfo;
				Write16(pPetSkillList, 0); //len

				Write16(pPetSkillList, 0); //SkillID
				Write8(pPetSkillList, 0); //Status
				Write8(pPetSkillList, 0); //Active
				Write32(pPetSkillList, 0); //Value

				len = pPetSkillList - pPetInfo;
				Set16(pPetInfo, (WORD)len);
				pPetInfo += len;
			}
			Write32(pPetInfo, 0); //StrengLevel
			Write8(pPetInfo, 0); //TopStatus
			{ //CommonInfo
				BYTE* pCommonInfo = pPetInfo;
				Write16(pCommonInfo, 0); //len

				Write32(pCommonInfo, 0); //HuanHuaLevel
				Write8(pCommonInfo, 0); //CanHuanHua

				len = pCommonInfo - pPetInfo;
				Set16(pPetInfo, (WORD)len);
				pPetInfo += len;
			}
			Write16(pPetInfo, 0); //PKStar
			Write32(pPetInfo, 0); //PetSkinID

			len = pPetInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //PlayerGuildMatchInfo
			BYTE* pPlayerGuildMatchInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerGuildMatchInfo, 0); //len

			Write32(pPlayerGuildMatchInfo, 0); //SelfPoint
			Write32(pPlayerGuildMatchInfo, 0); //WinNum
			Write32(pPlayerGuildMatchInfo, 0); //TotalNum

			len = pPlayerGuildMatchInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //IsInTopList
		Write8(pPlayerRoomVisibleInfo, 0); //LoverRaceOrPro
		Write8(pPlayerRoomVisibleInfo, 0); //TmpEffectNum
		Write32(pPlayerRoomVisibleInfo, 0); //TmpEffectItems[]
		Write8(pPlayerRoomVisibleInfo, 0); //OBState
		Write8(pPlayerRoomVisibleInfo, 0); //DebutOrX5
		Write8(pPlayerRoomVisibleInfo, 0); //RandKeyFlag
		WriteUn(pPlayerRoomVisibleInfo, 0); //VipFlag
		Write8(pPlayerRoomVisibleInfo, 0); //HaveAppellation
		for (size_t i = 0; i < n; i++)
		{ //CurAppellation
			BYTE* pCurAppellation = pPlayerRoomVisibleInfo;
			Write16(pCurAppellation, 0); //len

			Write8(pCurAppellation, 0); //Type
			Write8(pCurAppellation, 0); //Level
			Write8(pCurAppellation, 0); //Status
			Write8(pCurAppellation, 0); //Difficulty
			Write32(pCurAppellation, 0); //MapId
			Write32(pCurAppellation, 0); //Value

			len = pCurAppellation - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //NobleInfo
			BYTE* pNobleInfo = pPlayerRoomVisibleInfo;
			Write16(pNobleInfo, 0); //len

			Write32(pNobleInfo, 0); //NobleID
			Write8(pNobleInfo, 0); //NobleLevel
			Write32(pNobleInfo, 0); //NoblePoint
			Write32(pNobleInfo, 0); //NobleLeftDays

			len = pNobleInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasCarryWizard
		for (size_t i = 0; i < n; i++)
		{ //CarryWizardInfo
			BYTE* pCarryWizardInfo = pPlayerRoomVisibleInfo;
			Write16(pCarryWizardInfo, 0); //len

			Write16(pCarryWizardInfo, 0); //WizardID
			WriteString(pCarryWizardInfo, 0); //NickName[]
			Write16(pCarryWizardInfo, 0); //WizardType
			Write8(pCarryWizardInfo, 0); //Order
			Write8(pCarryWizardInfo, 0); //EvolutionBranch
			Write8(pCarryWizardInfo, 0); //IsHuanHua

			len = pCarryWizardInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //GuildVipBaseInfo
			BYTE* pGuildVipBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pGuildVipBaseInfo, 0); //len

			Write8(pGuildVipBaseInfo, 0); //GuildVipLevel
			Write32(pGuildVipBaseInfo, 0); //GuildVipPoint

			len = pGuildVipBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write32(pPlayerRoomVisibleInfo, 0); //ExFlag
		Write8(pPlayerRoomVisibleInfo, 0); //HaveLDMBaseInfo
		for (size_t i = 0; i < n; i++)
		{ //PlayerLDMBaseInfo
			BYTE* pPlayerLDMBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerLDMBaseInfo, 0); //len

			Write8(pPlayerLDMBaseInfo, 0); //Grade
			Write32(pPlayerLDMBaseInfo, 0); //Score
			Write32(pPlayerLDMBaseInfo, 0); //MaxScore
			Write32(pPlayerLDMBaseInfo, 0); //MaxGrade

			len = pPlayerLDMBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasWl
		for (size_t i = 0; i < n; i++)
		{ //PlayerWlVisibleInfo
			BYTE* pPlayerWlVisibleInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerWlVisibleInfo, 0); //len

			Write32(pPlayerWlVisibleInfo, 0); //WonderLandID
			WriteString(pPlayerWlVisibleInfo, 0); //WonderLandName[]
			Write16(pPlayerWlVisibleInfo, 0); //WonderLandDuty
			Write8(pPlayerWlVisibleInfo, 0); //SubType
			Write8(pPlayerWlVisibleInfo, 0); //GuildGrade

			len = pPlayerWlVisibleInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasLoverVip
		for (size_t i = 0; i < n; i++)
		{ //LoverVipInfo
			BYTE* pLoverVipInfo = pPlayerRoomVisibleInfo;
			Write16(pLoverVipInfo, 0); //len

			Write8(pLoverVipInfo, 0); //LoverVipLevel
			Write32(pLoverVipInfo, 0); //LoverVipPoint
			Write8(pLoverVipInfo, 0); //GrowRate

			len = pLoverVipInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasBattleModeSkillInfoList
		for (size_t i = 0; i < n; i++)
		{ //BattleModeSkillInfoList
			BYTE* pBattleModeSkillInfoList = pPlayerRoomVisibleInfo;
			Write16(pBattleModeSkillInfoList, 0); //len

			Write8(pBattleModeSkillInfoList, 0); //SkillNum
			for (size_t i = 0; i < n; i++)
			{ //SkillInfo
				BYTE* pSkillInfo = pBattleModeSkillInfoList;
				Write16(pSkillInfo, 0); //len

				Write16(pSkillInfo, 0); //SkillId
				Write8(pSkillInfo, 0); //SkillLevel

				len = pSkillInfo - pBattleModeSkillInfoList;
				Set16(pBattleModeSkillInfoList, (WORD)len);
				pBattleModeSkillInfoList += len;
			}

			len = pBattleModeSkillInfoList - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasGarden
		for (size_t i = 0; i < n; i++)
		{ //PersonalGardenBaseInfo
			BYTE* pPersonalGardenBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pPersonalGardenBaseInfo, 0); //len

			Write8(pPersonalGardenBaseInfo, 0); //GardenLevel
			Write32(pPersonalGardenBaseInfo, 0); //GardenPoint
			Write8(pPersonalGardenBaseInfo, 0); //GrowRate
			Write32(pPersonalGardenBaseInfo, 0); //GardenExpireTime
			{ //SimpleInfo
				BYTE* pSimpleInfo = pPersonalGardenBaseInfo;
				Write16(pSimpleInfo, 0); //len

				Write32(pSimpleInfo, 0); //WeekPopularity
				Write32(pSimpleInfo, 0); //TotalPopularity
				Write32(pSimpleInfo, 0); //LastUpdatePopularityTime
				Write8(pSimpleInfo, 0); //PrivateType

				len = pSimpleInfo - pPersonalGardenBaseInfo;
				Set16(pPersonalGardenBaseInfo, (WORD)len);
				pPersonalGardenBaseInfo += len;
			}

			len = pPersonalGardenBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //ConsumeVipInfo
			BYTE* pConsumeVipInfo = pPlayerRoomVisibleInfo;
			Write16(pConsumeVipInfo, 0); //len

			WriteUn(pConsumeVipInfo, 0); //VipLevel
			WriteUn(pConsumeVipInfo, 0); //CharmValueOfMonth
			WriteUn(pConsumeVipInfo, 0); //SearchTreasureNums
			WriteUn(pConsumeVipInfo, 0); //GetTreasureNums

			len = pConsumeVipInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HaveBaby
		{ //LoverBabyInfo
			BYTE* pLoverBabyInfo = pPlayerRoomVisibleInfo;
			Write16(pLoverBabyInfo, 0); //len

			Write32(pLoverBabyInfo, 0); //LoverBabyID
			Write32(pLoverBabyInfo, 0); //ItemID
			Write32(pLoverBabyInfo, 0); //GrowValue
			Write32(pLoverBabyInfo, 0); //MentalValue
			Write32(pLoverBabyInfo, 0); //BabyProfileLevel
			Write32(pLoverBabyInfo, 0); //StrengthLevel
			Write32(pLoverBabyInfo, 0); //GrowLevel
			WriteString(pLoverBabyInfo, 0); //LoveBabyNickName[]
			Write16(pLoverBabyInfo, 0); //LoverBabyStat
			Write16(pLoverBabyInfo, 0); //LoverBabyEquipStat
			Write16(pLoverBabyInfo, 0); //LoverBabyTransferdStatus

			len = pLoverBabyInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //EmperorInfo
			BYTE* pEmperorInfo = pPlayerRoomVisibleInfo;
			Write16(pEmperorInfo, 0); //len

			Write8(pEmperorInfo, 0); //EmperorLevel
			Write32(pEmperorInfo, 0); //EmperorPoint
			Write32(pEmperorInfo, 0); //EmperorLeftDays
			Write8(pEmperorInfo, 0); //EmperorGrowRate

			len = pEmperorInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write16(pPlayerRoomVisibleInfo, 0); //RaceCardNums
		for (size_t i = 0; i < n; i++)
		{ //RaceCardAddValueInfo
			BYTE* pRaceCardAddValueInfo = pPlayerRoomVisibleInfo;
			Write16(pRaceCardAddValueInfo, 0); //len

			Write32(pRaceCardAddValueInfo, 0); //RaceCardID
			Write32(pRaceCardAddValueInfo, 0); //AddValue

			len = pRaceCardAddValueInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //GansterScoreInfo
			BYTE* pGansterScoreInfo = pPlayerRoomVisibleInfo;
			Write16(pGansterScoreInfo, 0); //len

			Write32(pGansterScoreInfo, 0); //GansterSeasonID
			Write32(pGansterScoreInfo, 0); //GansterScore
			Write32(pGansterScoreInfo, 0); //PoliceScore
			Write32(pGansterScoreInfo, 0); //TotalGansterScore

			len = pGansterScoreInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write32(pPlayerRoomVisibleInfo, 0); //OlympicId
		Write32(pPlayerRoomVisibleInfo, 0); //NPCEliminateWinTimes
		Write8(pPlayerRoomVisibleInfo, 0); //OriginTeamID
		Write8(pPlayerRoomVisibleInfo, 0); //NxNpc
		Write16(pPlayerRoomVisibleInfo, 0); //NxNpcAILevel
		{ //EquippedActiveKartInfo
			BYTE* pEquippedActiveKartInfo = pPlayerRoomVisibleInfo;
			Write16(pEquippedActiveKartInfo, 0); //len

			Write8(pEquippedActiveKartInfo, 0); //HaveActiveInfo
			Write32(pEquippedActiveKartInfo, 0); //KartID
			Write32(pEquippedActiveKartInfo, 0); //ActiveLevel

			len = pEquippedActiveKartInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //SpecialActivityStatus
		Write8(pPlayerRoomVisibleInfo, 0); //AreaID
		Write8(pPlayerRoomVisibleInfo, 0); //HaveRaiseSecondBaby
		{ //SecondLoverBabyInfo
			BYTE* pSecondLoverBabyInfo = pPlayerRoomVisibleInfo;
			Write16(pSecondLoverBabyInfo, 0); //len

			Write32(pSecondLoverBabyInfo, 0); //LoverBabyID
			Write32(pSecondLoverBabyInfo, 0); //ItemID
			Write32(pSecondLoverBabyInfo, 0); //GrowValue
			Write32(pSecondLoverBabyInfo, 0); //MentalValue
			Write32(pSecondLoverBabyInfo, 0); //BabyProfileLevel
			Write32(pSecondLoverBabyInfo, 0); //StrengthLevel
			Write32(pSecondLoverBabyInfo, 0); //GrowLevel
			WriteString(pSecondLoverBabyInfo, 0); //LoveBabyNickName[]
			Write16(pSecondLoverBabyInfo, 0); //LoverBabyStat
			Write16(pSecondLoverBabyInfo, 0); //LoverBabyEquipStat
			Write16(pSecondLoverBabyInfo, 0); //LoverBabyTransferdStatus

			len = pSecondLoverBabyInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasRankedMatchInfo
		for (size_t i = 0; i < n; i++)
		{ //RankedMatchGradeInfo
			BYTE* pRankedMatchGradeInfo = pPlayerRoomVisibleInfo;
			Write16(pRankedMatchGradeInfo, 0); //len

			Write32(pRankedMatchGradeInfo, 0); //GradeLevel
			Write32(pRankedMatchGradeInfo, 0); //ChildLevel
			Write32(pRankedMatchGradeInfo, 0); //GradeScore
			Write32(pRankedMatchGradeInfo, 0); //MaxGradeScore
			Write32(pRankedMatchGradeInfo, 0); //TotalScore

			len = pRankedMatchGradeInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasHuanLingChangeInfo
		for (size_t i = 0; i < n; i++)
		{ //HuanLingSuitInfo
			BYTE* pHuanLingSuitInfo = pPlayerRoomVisibleInfo;
			Write16(pHuanLingSuitInfo, 0); //len

			Write32(pHuanLingSuitInfo, 0); //SuitID
			Write8(pHuanLingSuitInfo, 0); //ChangeLevel

			len = pHuanLingSuitInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //EquipSealType
		Write16(pPlayerRoomVisibleInfo, 0); //Role
		Write8(pPlayerRoomVisibleInfo, 0); //SpecialActivityIDNum
		Write8(pPlayerRoomVisibleInfo, 0); //CrewID
		Write8(pPlayerRoomVisibleInfo, 0); //SpecialActivityInfoNum
		for (size_t i = 0; i < n; i++)
		{ //SpecialActivityInfo
			BYTE* pSpecialActivityInfo = pPlayerRoomVisibleInfo;
			Write16(pSpecialActivityInfo, 0); //len

			Write8(pSpecialActivityInfo, 0); //ProfessionLicenseInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ProfessionLicenseInfo
				BYTE* pProfessionLicenseInfo = pSpecialActivityInfo;
				Write16(pProfessionLicenseInfo, 0); //len

				Write8(pProfessionLicenseInfo, 0); //BigLevel
				Write8(pProfessionLicenseInfo, 0); //SmallLevel

				len = pProfessionLicenseInfo - pSpecialActivityInfo;
				Set16(pSpecialActivityInfo, (WORD)len);
				pSpecialActivityInfo += len;
			}

			len = pSpecialActivityInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //ParaNum
		Write32(pPlayerRoomVisibleInfo, 0); //ParaList[]
		Write8(pPlayerRoomVisibleInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemOrder
			BYTE* pItemOrder = pPlayerRoomVisibleInfo;
			Write16(pItemOrder, 0); //len

			Write32(pItemOrder, 0); //KartID
			Write32(pItemOrder, 0); //Order
			Write32(pItemOrder, 0); //BackGroundID

			len = pItemOrder - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //TDCExcluItemNum
		Write32(pPlayerRoomVisibleInfo, 0); //TDCExclusiveItemID[]
		Write8(pPlayerRoomVisibleInfo, 0); //EquipNiChangItemNum
		for (size_t i = 0; i < n; i++)
		{ //NiChangPavilionEquipItemInfo
			BYTE* pNiChangPavilionEquipItemInfo = pPlayerRoomVisibleInfo;
			Write16(pNiChangPavilionEquipItemInfo, 0); //len

			Write32(pNiChangPavilionEquipItemInfo, 0); //ItemId
			Write16(pNiChangPavilionEquipItemInfo, 0); //CurrentEquipColorationPlanId

			len = pNiChangPavilionEquipItemInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //TestKartGameType
		Write32(pPlayerRoomVisibleInfo, 0); //GameTestKartID
		Write8(pPlayerRoomVisibleInfo, 0); //HasStarsFightingInfo
		for (size_t i = 0; i < n; i++)
		{ //StarsFightingInfo
			BYTE* pStarsFightingInfo = pPlayerRoomVisibleInfo;
			Write16(pStarsFightingInfo, 0); //len

			Write32(pStarsFightingInfo, 0); //Star
			Write32(pStarsFightingInfo, 0); //StarVal
			Write32(pStarsFightingInfo, 0); //StarsFightingStarLevel

			len = pStarsFightingInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //RoomBGSetting

		len = pPlayerRoomVisibleInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	WriteU(p, 0); //KartNum
	for (size_t i = 0; i < n; i++)
	{ //KartRefitInfo
		BYTE* pKartRefitInfo = p;
		Write16(pKartRefitInfo, 0); //len

		Write32(pKartRefitInfo, 0); //Uin
		Write32(pKartRefitInfo, 0); //KartId
		Write32(pKartRefitInfo, 0); //RefitCout
		Write16(pKartRefitInfo, 0); //MaxFlags
		Write16(pKartRefitInfo, 0); //WWeight
		Write16(pKartRefitInfo, 0); //SpeedWeight
		Write16(pKartRefitInfo, 0); //JetWeight
		Write16(pKartRefitInfo, 0); //SJetWeight
		Write16(pKartRefitInfo, 0); //AccuWeight
		Write32(pKartRefitInfo, 0); //ShapeRefitCount
		Write32(pKartRefitInfo, 0); //KartHeadRefitItemID
		Write32(pKartRefitInfo, 0); //KartTailRefitItemID
		Write32(pKartRefitInfo, 0); //KartFlankRefitItemID
		Write32(pKartRefitInfo, 0); //KartTireRefitItemID
		Write32(pKartRefitInfo, 0); //SecondRefitCount
		Write16(pKartRefitInfo, 0); //Speed2Weight
		Write16(pKartRefitInfo, 0); //DriftVecWeight
		Write16(pKartRefitInfo, 0); //AdditionalZSpeedWeight
		Write16(pKartRefitInfo, 0); //AntiCollisionWeight
		Write16(pKartRefitInfo, 0); //LuckyValue
		Write16(pKartRefitInfo, 0); //RefitLuckyValueMaxWeight
		Write32(pKartRefitInfo, 0); //ShapeSuitID
		Write8(pKartRefitInfo, 0); //LegendSuitLevel
		Write32(pKartRefitInfo, 0); //LegendSuitLevelChoice
		Write32(pKartRefitInfo, 0); //ShapeLegendSuitID

		len = pKartRefitInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasMoreInfo

	len = p - buf;
	SendToClient(Client, 971, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyWlMatchPlayerMoreInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //PlayerCount
	for (size_t i = 0; i < n; i++)
	{ //PlayerRoomVisibleInfo
		BYTE* pPlayerRoomVisibleInfo = p;
		Write16(pPlayerRoomVisibleInfo, 0); //len

		WriteUn(pPlayerRoomVisibleInfo, 0); //Uin
		WriteUn(pPlayerRoomVisibleInfo, 0); //Identity
		Write8(pPlayerRoomVisibleInfo, 0); //SeatID
		Write8(pPlayerRoomVisibleInfo, 0); //TeamID
		Write16(pPlayerRoomVisibleInfo, 0); //PlayerID
		Write8(pPlayerRoomVisibleInfo, 0); //Status
		{ //PlayerDBBaseInfo
			BYTE* pPlayerDBBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerDBBaseInfo, 0); //len

			WriteString(pPlayerDBBaseInfo, 0); //NickName[]
			Write8(pPlayerDBBaseInfo, 0); //Gender
			Write8(pPlayerDBBaseInfo, 0); //Country
			Write32(pPlayerDBBaseInfo, 0); //License
			WriteUn(pPlayerDBBaseInfo, 0); //Experience
			Write32(pPlayerDBBaseInfo, 0); //SuperMoney
			Write32(pPlayerDBBaseInfo, 0); //Money
			WriteUn(pPlayerDBBaseInfo, 0); //WinNum
			Write32(pPlayerDBBaseInfo, 0); //SecondNum
			Write32(pPlayerDBBaseInfo, 0); //ThirdNum
			WriteUn(pPlayerDBBaseInfo, 0); //TotalNum
			Write32(pPlayerDBBaseInfo, 0); //CurHonor
			Write32(pPlayerDBBaseInfo, 0); //TotalHonor
			Write32(pPlayerDBBaseInfo, 0); //TodayHonor
			Write32(pPlayerDBBaseInfo, 0); //RelaxTime
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationBefore
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationCur
			Write32(pPlayerDBBaseInfo, 0); //Charm
			Write32(pPlayerDBBaseInfo, 0); //DurationGame
			Write32(pPlayerDBBaseInfo, 0); //DanceExp
			Write32(pPlayerDBBaseInfo, 0); //Coupons
			Write32(pPlayerDBBaseInfo, 0); //Admiration
			Write32(pPlayerDBBaseInfo, 0); //LuckMoney
			Write32(pPlayerDBBaseInfo, 0); //TeamWorkExp
			Write32(pPlayerDBBaseInfo, 0); //AchievePoint
			Write32(pPlayerDBBaseInfo, 0); //RegTime
			WriteString(pPlayerDBBaseInfo, 0); //Signature[]
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchPoint
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchNum
			Write16(pPlayerDBBaseInfo, 0); //LuckyMatchFirstNum
			Write8(pPlayerDBBaseInfo, 0); //LuckyMatchBestRand
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchWinNum
			Write32(pPlayerDBBaseInfo, 0); //FizzPointTotal
			Write16(pPlayerDBBaseInfo, 0); //FizzPointDaily
			Write16(pPlayerDBBaseInfo, 0); //FizzPointWeekly
			Write16(pPlayerDBBaseInfo, 0); //FizzPointLastWeek
			Write8(pPlayerDBBaseInfo, 0); //FizzLotteryStatus
			Write32(pPlayerDBBaseInfo, 0); //FizzLastUpdateTime
			Write32(pPlayerDBBaseInfo, 0); //SNSLocaleCode
			Write32(pPlayerDBBaseInfo, 0); //AuctionRightUnlockTime
			Write8(pPlayerDBBaseInfo, 0); //ReserveFlag
			Write32(pPlayerDBBaseInfo, 0); //CurConsumeScore
			Write32(pPlayerDBBaseInfo, 0); //HistoryConsumeScore
			Write8(pPlayerDBBaseInfo, 0); //CrashModeSponsorID
			Write32(pPlayerDBBaseInfo, 0); //Popularity
			Write32(pPlayerDBBaseInfo, 0); //LadderMatchAchievePoint
			Write32(pPlayerDBBaseInfo, 0); //Cash
			Write32(pPlayerDBBaseInfo, 0); //PlayerGPMIdentity
			Write32(pPlayerDBBaseInfo, 0); //PointTotalScore
			WriteUn(pPlayerDBBaseInfo, 0); //totalMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //lastMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalSeasonId
			WriteUn(pPlayerDBBaseInfo, 0); //lastClearMapMedalTime
			WriteUn(pPlayerDBBaseInfo, 0); //max2048Score
			WriteUn(pPlayerDBBaseInfo, 0); //curPlay2048LeftNum
			Write32(pPlayerDBBaseInfo, 0); //CheerValue
			Write16(pPlayerDBBaseInfo, 0); //SeasonID
			Write32(pPlayerDBBaseInfo, 0); //LastCheerValue
			Write32(pPlayerDBBaseInfo, 0); //SpeedBean
			Write32(pPlayerDBBaseInfo, 0); //SpeedCoin

			len = pPlayerDBBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //PlayerGuildInfo
			BYTE* pPlayerGuildInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerGuildInfo, 0); //len

			WriteString(pPlayerGuildInfo, 0); //GuildName[]
			Write16(pPlayerGuildInfo, 0); //Duty
			Write32(pPlayerGuildInfo, 0); //GuildID
			Write32(pPlayerGuildInfo, 0); //Right
			Write32(pPlayerGuildInfo, 0); //Medal
			Write32(pPlayerGuildInfo, 0); //Contribute
			WriteString(pPlayerGuildInfo, 0); //DutyTitle[]

			len = pPlayerGuildInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write16(pPlayerRoomVisibleInfo, 0); //EquipedItemNum
		for (size_t i = 0; i < n; i++)
		{ //PlayerItemInfo
			BYTE* pPlayerItemInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerItemInfo, 0); //len

			Write32(pPlayerItemInfo, 0); //ItemID
			Write32(pPlayerItemInfo, 0); //ItemNum
			Write32(pPlayerItemInfo, 0); //AvailPeriod
			Write8(pPlayerItemInfo, 0); //Status
			WriteUn(pPlayerItemInfo, 0); //ObtainTime
			Write32(pPlayerItemInfo, 0); //OtherAttribute
			Write16(pPlayerItemInfo, 0); //ItemType

			len = pPlayerItemInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write16(pPlayerRoomVisibleInfo, 0); //PetNum
		for (size_t i = 0; i < n; i++)
		{ //PetInfo
			BYTE* pPetInfo = pPlayerRoomVisibleInfo;
			Write16(pPetInfo, 0); //len

			Write32(pPetInfo, 0); //Uin
			Write32(pPetInfo, 0); //PetId
			WriteString(pPetInfo, 0); //PetName[]
			Write8(pPetInfo, 0); //IsProper
			Write16(pPetInfo, 0); //Level
			Write8(pPetInfo, 0); //Status
			Write16(pPetInfo, 0); //PetSkillNum
			for (size_t i = 0; i < n; i++)
			{ //PetSkillList
				BYTE* pPetSkillList = pPetInfo;
				Write16(pPetSkillList, 0); //len

				Write16(pPetSkillList, 0); //SkillID
				Write8(pPetSkillList, 0); //Status
				Write8(pPetSkillList, 0); //Active
				Write32(pPetSkillList, 0); //Value

				len = pPetSkillList - pPetInfo;
				Set16(pPetInfo, (WORD)len);
				pPetInfo += len;
			}
			Write32(pPetInfo, 0); //StrengLevel
			Write8(pPetInfo, 0); //TopStatus
			{ //CommonInfo
				BYTE* pCommonInfo = pPetInfo;
				Write16(pCommonInfo, 0); //len

				Write32(pCommonInfo, 0); //HuanHuaLevel
				Write8(pCommonInfo, 0); //CanHuanHua

				len = pCommonInfo - pPetInfo;
				Set16(pPetInfo, (WORD)len);
				pPetInfo += len;
			}
			Write16(pPetInfo, 0); //PKStar
			Write32(pPetInfo, 0); //PetSkinID

			len = pPetInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //PlayerGuildMatchInfo
			BYTE* pPlayerGuildMatchInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerGuildMatchInfo, 0); //len

			Write32(pPlayerGuildMatchInfo, 0); //SelfPoint
			Write32(pPlayerGuildMatchInfo, 0); //WinNum
			Write32(pPlayerGuildMatchInfo, 0); //TotalNum

			len = pPlayerGuildMatchInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //IsInTopList
		Write8(pPlayerRoomVisibleInfo, 0); //LoverRaceOrPro
		Write8(pPlayerRoomVisibleInfo, 0); //TmpEffectNum
		Write32(pPlayerRoomVisibleInfo, 0); //TmpEffectItems[]
		Write8(pPlayerRoomVisibleInfo, 0); //OBState
		Write8(pPlayerRoomVisibleInfo, 0); //DebutOrX5
		Write8(pPlayerRoomVisibleInfo, 0); //RandKeyFlag
		WriteUn(pPlayerRoomVisibleInfo, 0); //VipFlag
		Write8(pPlayerRoomVisibleInfo, 0); //HaveAppellation
		for (size_t i = 0; i < n; i++)
		{ //CurAppellation
			BYTE* pCurAppellation = pPlayerRoomVisibleInfo;
			Write16(pCurAppellation, 0); //len

			Write8(pCurAppellation, 0); //Type
			Write8(pCurAppellation, 0); //Level
			Write8(pCurAppellation, 0); //Status
			Write8(pCurAppellation, 0); //Difficulty
			Write32(pCurAppellation, 0); //MapId
			Write32(pCurAppellation, 0); //Value

			len = pCurAppellation - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //NobleInfo
			BYTE* pNobleInfo = pPlayerRoomVisibleInfo;
			Write16(pNobleInfo, 0); //len

			Write32(pNobleInfo, 0); //NobleID
			Write8(pNobleInfo, 0); //NobleLevel
			Write32(pNobleInfo, 0); //NoblePoint
			Write32(pNobleInfo, 0); //NobleLeftDays

			len = pNobleInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasCarryWizard
		for (size_t i = 0; i < n; i++)
		{ //CarryWizardInfo
			BYTE* pCarryWizardInfo = pPlayerRoomVisibleInfo;
			Write16(pCarryWizardInfo, 0); //len

			Write16(pCarryWizardInfo, 0); //WizardID
			WriteString(pCarryWizardInfo, 0); //NickName[]
			Write16(pCarryWizardInfo, 0); //WizardType
			Write8(pCarryWizardInfo, 0); //Order
			Write8(pCarryWizardInfo, 0); //EvolutionBranch
			Write8(pCarryWizardInfo, 0); //IsHuanHua

			len = pCarryWizardInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //GuildVipBaseInfo
			BYTE* pGuildVipBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pGuildVipBaseInfo, 0); //len

			Write8(pGuildVipBaseInfo, 0); //GuildVipLevel
			Write32(pGuildVipBaseInfo, 0); //GuildVipPoint

			len = pGuildVipBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write32(pPlayerRoomVisibleInfo, 0); //ExFlag
		Write8(pPlayerRoomVisibleInfo, 0); //HaveLDMBaseInfo
		for (size_t i = 0; i < n; i++)
		{ //PlayerLDMBaseInfo
			BYTE* pPlayerLDMBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerLDMBaseInfo, 0); //len

			Write8(pPlayerLDMBaseInfo, 0); //Grade
			Write32(pPlayerLDMBaseInfo, 0); //Score
			Write32(pPlayerLDMBaseInfo, 0); //MaxScore
			Write32(pPlayerLDMBaseInfo, 0); //MaxGrade

			len = pPlayerLDMBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasWl
		for (size_t i = 0; i < n; i++)
		{ //PlayerWlVisibleInfo
			BYTE* pPlayerWlVisibleInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerWlVisibleInfo, 0); //len

			Write32(pPlayerWlVisibleInfo, 0); //WonderLandID
			WriteString(pPlayerWlVisibleInfo, 0); //WonderLandName[]
			Write16(pPlayerWlVisibleInfo, 0); //WonderLandDuty
			Write8(pPlayerWlVisibleInfo, 0); //SubType
			Write8(pPlayerWlVisibleInfo, 0); //GuildGrade

			len = pPlayerWlVisibleInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasLoverVip
		for (size_t i = 0; i < n; i++)
		{ //LoverVipInfo
			BYTE* pLoverVipInfo = pPlayerRoomVisibleInfo;
			Write16(pLoverVipInfo, 0); //len

			Write8(pLoverVipInfo, 0); //LoverVipLevel
			Write32(pLoverVipInfo, 0); //LoverVipPoint
			Write8(pLoverVipInfo, 0); //GrowRate

			len = pLoverVipInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasBattleModeSkillInfoList
		for (size_t i = 0; i < n; i++)
		{ //BattleModeSkillInfoList
			BYTE* pBattleModeSkillInfoList = pPlayerRoomVisibleInfo;
			Write16(pBattleModeSkillInfoList, 0); //len

			Write8(pBattleModeSkillInfoList, 0); //SkillNum
			for (size_t i = 0; i < n; i++)
			{ //SkillInfo
				BYTE* pSkillInfo = pBattleModeSkillInfoList;
				Write16(pSkillInfo, 0); //len

				Write16(pSkillInfo, 0); //SkillId
				Write8(pSkillInfo, 0); //SkillLevel

				len = pSkillInfo - pBattleModeSkillInfoList;
				Set16(pBattleModeSkillInfoList, (WORD)len);
				pBattleModeSkillInfoList += len;
			}

			len = pBattleModeSkillInfoList - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasGarden
		for (size_t i = 0; i < n; i++)
		{ //PersonalGardenBaseInfo
			BYTE* pPersonalGardenBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pPersonalGardenBaseInfo, 0); //len

			Write8(pPersonalGardenBaseInfo, 0); //GardenLevel
			Write32(pPersonalGardenBaseInfo, 0); //GardenPoint
			Write8(pPersonalGardenBaseInfo, 0); //GrowRate
			Write32(pPersonalGardenBaseInfo, 0); //GardenExpireTime
			{ //SimpleInfo
				BYTE* pSimpleInfo = pPersonalGardenBaseInfo;
				Write16(pSimpleInfo, 0); //len

				Write32(pSimpleInfo, 0); //WeekPopularity
				Write32(pSimpleInfo, 0); //TotalPopularity
				Write32(pSimpleInfo, 0); //LastUpdatePopularityTime
				Write8(pSimpleInfo, 0); //PrivateType

				len = pSimpleInfo - pPersonalGardenBaseInfo;
				Set16(pPersonalGardenBaseInfo, (WORD)len);
				pPersonalGardenBaseInfo += len;
			}

			len = pPersonalGardenBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //ConsumeVipInfo
			BYTE* pConsumeVipInfo = pPlayerRoomVisibleInfo;
			Write16(pConsumeVipInfo, 0); //len

			WriteUn(pConsumeVipInfo, 0); //VipLevel
			WriteUn(pConsumeVipInfo, 0); //CharmValueOfMonth
			WriteUn(pConsumeVipInfo, 0); //SearchTreasureNums
			WriteUn(pConsumeVipInfo, 0); //GetTreasureNums

			len = pConsumeVipInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HaveBaby
		{ //LoverBabyInfo
			BYTE* pLoverBabyInfo = pPlayerRoomVisibleInfo;
			Write16(pLoverBabyInfo, 0); //len

			Write32(pLoverBabyInfo, 0); //LoverBabyID
			Write32(pLoverBabyInfo, 0); //ItemID
			Write32(pLoverBabyInfo, 0); //GrowValue
			Write32(pLoverBabyInfo, 0); //MentalValue
			Write32(pLoverBabyInfo, 0); //BabyProfileLevel
			Write32(pLoverBabyInfo, 0); //StrengthLevel
			Write32(pLoverBabyInfo, 0); //GrowLevel
			WriteString(pLoverBabyInfo, 0); //LoveBabyNickName[]
			Write16(pLoverBabyInfo, 0); //LoverBabyStat
			Write16(pLoverBabyInfo, 0); //LoverBabyEquipStat
			Write16(pLoverBabyInfo, 0); //LoverBabyTransferdStatus

			len = pLoverBabyInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //EmperorInfo
			BYTE* pEmperorInfo = pPlayerRoomVisibleInfo;
			Write16(pEmperorInfo, 0); //len

			Write8(pEmperorInfo, 0); //EmperorLevel
			Write32(pEmperorInfo, 0); //EmperorPoint
			Write32(pEmperorInfo, 0); //EmperorLeftDays
			Write8(pEmperorInfo, 0); //EmperorGrowRate

			len = pEmperorInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write16(pPlayerRoomVisibleInfo, 0); //RaceCardNums
		for (size_t i = 0; i < n; i++)
		{ //RaceCardAddValueInfo
			BYTE* pRaceCardAddValueInfo = pPlayerRoomVisibleInfo;
			Write16(pRaceCardAddValueInfo, 0); //len

			Write32(pRaceCardAddValueInfo, 0); //RaceCardID
			Write32(pRaceCardAddValueInfo, 0); //AddValue

			len = pRaceCardAddValueInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //GansterScoreInfo
			BYTE* pGansterScoreInfo = pPlayerRoomVisibleInfo;
			Write16(pGansterScoreInfo, 0); //len

			Write32(pGansterScoreInfo, 0); //GansterSeasonID
			Write32(pGansterScoreInfo, 0); //GansterScore
			Write32(pGansterScoreInfo, 0); //PoliceScore
			Write32(pGansterScoreInfo, 0); //TotalGansterScore

			len = pGansterScoreInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write32(pPlayerRoomVisibleInfo, 0); //OlympicId
		Write32(pPlayerRoomVisibleInfo, 0); //NPCEliminateWinTimes
		Write8(pPlayerRoomVisibleInfo, 0); //OriginTeamID
		Write8(pPlayerRoomVisibleInfo, 0); //NxNpc
		Write16(pPlayerRoomVisibleInfo, 0); //NxNpcAILevel
		{ //EquippedActiveKartInfo
			BYTE* pEquippedActiveKartInfo = pPlayerRoomVisibleInfo;
			Write16(pEquippedActiveKartInfo, 0); //len

			Write8(pEquippedActiveKartInfo, 0); //HaveActiveInfo
			Write32(pEquippedActiveKartInfo, 0); //KartID
			Write32(pEquippedActiveKartInfo, 0); //ActiveLevel

			len = pEquippedActiveKartInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //SpecialActivityStatus
		Write8(pPlayerRoomVisibleInfo, 0); //AreaID
		Write8(pPlayerRoomVisibleInfo, 0); //HaveRaiseSecondBaby
		{ //SecondLoverBabyInfo
			BYTE* pSecondLoverBabyInfo = pPlayerRoomVisibleInfo;
			Write16(pSecondLoverBabyInfo, 0); //len

			Write32(pSecondLoverBabyInfo, 0); //LoverBabyID
			Write32(pSecondLoverBabyInfo, 0); //ItemID
			Write32(pSecondLoverBabyInfo, 0); //GrowValue
			Write32(pSecondLoverBabyInfo, 0); //MentalValue
			Write32(pSecondLoverBabyInfo, 0); //BabyProfileLevel
			Write32(pSecondLoverBabyInfo, 0); //StrengthLevel
			Write32(pSecondLoverBabyInfo, 0); //GrowLevel
			WriteString(pSecondLoverBabyInfo, 0); //LoveBabyNickName[]
			Write16(pSecondLoverBabyInfo, 0); //LoverBabyStat
			Write16(pSecondLoverBabyInfo, 0); //LoverBabyEquipStat
			Write16(pSecondLoverBabyInfo, 0); //LoverBabyTransferdStatus

			len = pSecondLoverBabyInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasRankedMatchInfo
		for (size_t i = 0; i < n; i++)
		{ //RankedMatchGradeInfo
			BYTE* pRankedMatchGradeInfo = pPlayerRoomVisibleInfo;
			Write16(pRankedMatchGradeInfo, 0); //len

			Write32(pRankedMatchGradeInfo, 0); //GradeLevel
			Write32(pRankedMatchGradeInfo, 0); //ChildLevel
			Write32(pRankedMatchGradeInfo, 0); //GradeScore
			Write32(pRankedMatchGradeInfo, 0); //MaxGradeScore
			Write32(pRankedMatchGradeInfo, 0); //TotalScore

			len = pRankedMatchGradeInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasHuanLingChangeInfo
		for (size_t i = 0; i < n; i++)
		{ //HuanLingSuitInfo
			BYTE* pHuanLingSuitInfo = pPlayerRoomVisibleInfo;
			Write16(pHuanLingSuitInfo, 0); //len

			Write32(pHuanLingSuitInfo, 0); //SuitID
			Write8(pHuanLingSuitInfo, 0); //ChangeLevel

			len = pHuanLingSuitInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //EquipSealType
		Write16(pPlayerRoomVisibleInfo, 0); //Role
		Write8(pPlayerRoomVisibleInfo, 0); //SpecialActivityIDNum
		Write8(pPlayerRoomVisibleInfo, 0); //CrewID
		Write8(pPlayerRoomVisibleInfo, 0); //SpecialActivityInfoNum
		for (size_t i = 0; i < n; i++)
		{ //SpecialActivityInfo
			BYTE* pSpecialActivityInfo = pPlayerRoomVisibleInfo;
			Write16(pSpecialActivityInfo, 0); //len

			Write8(pSpecialActivityInfo, 0); //ProfessionLicenseInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ProfessionLicenseInfo
				BYTE* pProfessionLicenseInfo = pSpecialActivityInfo;
				Write16(pProfessionLicenseInfo, 0); //len

				Write8(pProfessionLicenseInfo, 0); //BigLevel
				Write8(pProfessionLicenseInfo, 0); //SmallLevel

				len = pProfessionLicenseInfo - pSpecialActivityInfo;
				Set16(pSpecialActivityInfo, (WORD)len);
				pSpecialActivityInfo += len;
			}

			len = pSpecialActivityInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //ParaNum
		Write32(pPlayerRoomVisibleInfo, 0); //ParaList[]
		Write8(pPlayerRoomVisibleInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemOrder
			BYTE* pItemOrder = pPlayerRoomVisibleInfo;
			Write16(pItemOrder, 0); //len

			Write32(pItemOrder, 0); //KartID
			Write32(pItemOrder, 0); //Order
			Write32(pItemOrder, 0); //BackGroundID

			len = pItemOrder - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //TDCExcluItemNum
		Write32(pPlayerRoomVisibleInfo, 0); //TDCExclusiveItemID[]
		Write8(pPlayerRoomVisibleInfo, 0); //EquipNiChangItemNum
		for (size_t i = 0; i < n; i++)
		{ //NiChangPavilionEquipItemInfo
			BYTE* pNiChangPavilionEquipItemInfo = pPlayerRoomVisibleInfo;
			Write16(pNiChangPavilionEquipItemInfo, 0); //len

			Write32(pNiChangPavilionEquipItemInfo, 0); //ItemId
			Write16(pNiChangPavilionEquipItemInfo, 0); //CurrentEquipColorationPlanId

			len = pNiChangPavilionEquipItemInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //TestKartGameType
		Write32(pPlayerRoomVisibleInfo, 0); //GameTestKartID
		Write8(pPlayerRoomVisibleInfo, 0); //HasStarsFightingInfo
		for (size_t i = 0; i < n; i++)
		{ //StarsFightingInfo
			BYTE* pStarsFightingInfo = pPlayerRoomVisibleInfo;
			Write16(pStarsFightingInfo, 0); //len

			Write32(pStarsFightingInfo, 0); //Star
			Write32(pStarsFightingInfo, 0); //StarVal
			Write32(pStarsFightingInfo, 0); //StarsFightingStarLevel

			len = pStarsFightingInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //RoomBGSetting

		len = pPlayerRoomVisibleInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //KartNum
	for (size_t i = 0; i < n; i++)
	{ //KartRefitInfo
		BYTE* pKartRefitInfo = p;
		Write16(pKartRefitInfo, 0); //len

		Write32(pKartRefitInfo, 0); //Uin
		Write32(pKartRefitInfo, 0); //KartId
		Write32(pKartRefitInfo, 0); //RefitCout
		Write16(pKartRefitInfo, 0); //MaxFlags
		Write16(pKartRefitInfo, 0); //WWeight
		Write16(pKartRefitInfo, 0); //SpeedWeight
		Write16(pKartRefitInfo, 0); //JetWeight
		Write16(pKartRefitInfo, 0); //SJetWeight
		Write16(pKartRefitInfo, 0); //AccuWeight
		Write32(pKartRefitInfo, 0); //ShapeRefitCount
		Write32(pKartRefitInfo, 0); //KartHeadRefitItemID
		Write32(pKartRefitInfo, 0); //KartTailRefitItemID
		Write32(pKartRefitInfo, 0); //KartFlankRefitItemID
		Write32(pKartRefitInfo, 0); //KartTireRefitItemID
		Write32(pKartRefitInfo, 0); //SecondRefitCount
		Write16(pKartRefitInfo, 0); //Speed2Weight
		Write16(pKartRefitInfo, 0); //DriftVecWeight
		Write16(pKartRefitInfo, 0); //AdditionalZSpeedWeight
		Write16(pKartRefitInfo, 0); //AntiCollisionWeight
		Write16(pKartRefitInfo, 0); //LuckyValue
		Write16(pKartRefitInfo, 0); //RefitLuckyValueMaxWeight
		Write32(pKartRefitInfo, 0); //ShapeSuitID
		Write8(pKartRefitInfo, 0); //LegendSuitLevel
		Write32(pKartRefitInfo, 0); //LegendSuitLevelChoice
		Write32(pKartRefitInfo, 0); //ShapeLegendSuitID

		len = pKartRefitInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasNext

	len = p - buf;
	SendToClient(Client, 618, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyPlayerLeaveWlMatchGame(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteU(p, 0); //Uin

	len = p - buf;
	SendToClient(Client, 973, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestQueryWlMatchStatus(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	U Uin = ReadU(p);
	int Time = Read32(p);

}

void ResponseQueryWlMatchStatus(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteU(p, 0); //IsOpen

	len = p - buf;
	SendToClient(Client, 976, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyBriefGuildInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	WriteString(p, 0); //GuildName[]
	Write32(p, 0); //GuildID
	Write16(p, 0); //Duty
	Write32(p, 0); //Right
	Write32(p, 0); //Medal
	Write32(p, 0); //Contribute
	Write16(p, 0); //TeamAddition
	Write32(p, 0); //GuildScore
	Write32(p, 0); //LeaderUin
	Write16(p, 0); //YesterdayMaxOnline
	Write32(p, 0); //LastSingleLoginTime
	Write16(p, 0); //GuildLevel
	Write8(p, 0); //TitleLen
	Write32(p, 0); //DayChallenge
	Write32(p, 0); //CurSeasonId
	Write16(p, 0); //LastSeasonMapID
	Write16(p, 0); //LastSeasonRank
	Write32(p, 0); //LastHero
	Write32(p, 0); //CurHero
	Write32(p, 0); //LastEnlistedTime
	Write32(p, 0); //LastModGuildNameTime
	Write32(p, 0); //GuildCreateTime
	Write32(p, 0); //JoinGuildTime
	Write32(p, 0); //ScoreRank
	Write32(p, 0); //WonderLandID
	Write16(p, 0); //MemberNum
	Write32(p, 0); //Prosperity
	Write16(p, 0); //WonderLandDuty
	Write32(p, 0); //TotalWlDegree
	Write32(p, 0); //WeeklyWlDegree
	Write32(p, 0); //LastCheckWlDegreeTime
	Write32(p, 0); //WeeklyWlDegreeForMatch
	Write32(p, 0); //WeeklyMatchScore
	Write32(p, 0); //WeeklyUsedMatchScore
	Write32(p, 0); //TotalMatchScore
	WriteU(p, 0); //WeeklyGettedWlWelfareIdBitSet
	Write32(p, 0); //LastGetWlBonusTime
	Write32(p, 0); //BanWlTalkEndTime
	Write32(p, 0); //GetWlBonusEndTime
	Write32(p, 0); //LastDayCheerValue
	Write32(p, 0); //LastDayCheerCnt
	Write32(p, 0); //LastRegisterTime
	Write32(p, 0); //CurrentOnLineGuildMembers
	Write8(p, 0); //LeaderFirstOpened
	Write8(p, 0); //AppliedChampionship

	len = p - buf;
	SendToClient(Client, 15205, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestCreateGuild(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	char[] NickName[] = ReadString(p);
	char[] GuildName[] = ReadString(p);
	UINT Guid = Read32(p);

}

void ResponseCreateGuild(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	WriteString(p, 0); //GuildName[]
	Write32(p, 0); //GuildID
	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 15000, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestAddMember(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT DstUin = Read32(p);
	char[] DstNickName[] = ReadString(p);

}

void ResponseAddMember(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //DstUin
	WriteString(p, 0); //DstNickName[]
	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 15001, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyBeAddedToGuild(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //SrcUin
	WriteString(p, 0); //SrcNickName[]
	WriteString(p, 0); //GuildName[]
	Write32(p, 0); //RandomFlag

	len = p - buf;
	SendToClient(Client, 15206, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestReplyBeAddedToGuild(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT SrcUin = Read32(p);
	UINT ReplyUin = Read32(p);
	char[] ReplyNickName[] = ReadString(p);
	char[] GuildName[] = ReadString(p);
	short ResultID = Read16(p);
	USHORT ReasonLen = Read16(p);
	UINT RandomFlag = Read32(p);

}

void NotifyAddToGuildResult(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //ApplyUin
	WriteString(p, 0); //ApplyNickName[]
	WriteString(p, 0); //GuildName[]
	Write32(p, 0); //GuildID
	Write16(p, 0); //Duty
	Write32(p, 0); //Right
	Write32(p, 0); //Medal
	Write32(p, 0); //LeaderUin
	Write16(p, 0); //YesterdayMaxOnline
	Write32(p, 0); //LastSingleLoginTime
	Write16(p, 0); //GuildLevel
	Write32(p, 0); //WonderLandID
	Write16(p, 0); //WonderLandDuty
	Write32(p, 0); //ApproverUin
	Write8(p, 0); //ApplyType

	len = p - buf;
	SendToClient(Client, 15210, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestApplyJoinGuild(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	char[] GuildName[] = ReadString(p);
	char[] ApplyNickName[] = ReadString(p);
	U Guid = ReadU(p);
	{ //SelfCond
		BYTE* pSelfCond = p;
		len = Read16(pSelfCond);

		UINT ProsperityCondition = Read32(pSelfCond);
		UINT JoinTotalCondition = Read32(pSelfCond);
		UINT HonorCondition = Read32(pSelfCond);
		UINT CharmCondition = Read32(pSelfCond);
		UINT DanceExpCondition = Read32(pSelfCond);
		UINT SkillPointCondition = Read32(pSelfCond);
		UINT ExpLevelCondition = Read32(pSelfCond);
		UINT ApplyExpLevelCondition = Read32(pSelfCond);
		UCHAR EnlistType = Read8(pSelfCond);

		p += len;
	}
	UCHAR ApplyType = Read8(p);
	UCHAR RecommendType = Read8(p);

}

void ResponseApplyJoinGuild(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	WriteString(p, 0); //GuildName[]
	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen
	Write16(p, 0); //ReplyQtUinNum
	Write32(p, 0); //ReplyQtUin[]

	len = p - buf;
	SendToClient(Client, 15010, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyApplyJoinGuild(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //ApplyUin
	WriteString(p, 0); //ApplyNickName[]
	Write32(p, 0); //RandomFlag
	Write32(p, 0); //ExpLevel
	Write8(p, 0); //ApplyType
	Write8(p, 0); //RecommendType

	len = p - buf;
	SendToClient(Client, 15208, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestReplyJoinGuild(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT ApplyUin = Read32(p);
	char[] ApplyNickName[] = ReadString(p);
	UINT ReplyUin = Read32(p);
	short ResultID = Read16(p);
	USHORT ReasonLen = Read16(p);
	UINT RandomFlag = Read32(p);
	int OperationChannelType = Read32(p);
	UCHAR ApplyType = Read8(p);
	UCHAR RecommendType = Read8(p);

}

void ResponseReplyJoinGuild(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //ApplyUin
	Write32(p, 0); //ReplyUin
	Write32(p, 0); //OperationChannelType

	len = p - buf;
	SendToClient(Client, 15013, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestRemoveMember(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT DstUin = Read32(p);
	int OperationChannelType = Read32(p);

}

void ResponseRemoveMember(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //DstUin
	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen
	WriteU(p, 0); //AddCash
	WriteString(p, 0); //SrcNickName[]
	WriteString(p, 0); //DstNickName[]
	Write32(p, 0); //OperationChannelType
	Write32(p, 0); //Contribute

	len = p - buf;
	SendToClient(Client, 15002, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyRemoveMember(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //DstUin
	WriteString(p, 0); //GuildName[]
	WriteString(p, 0); //DstNickName[]
	Write32(p, 0); //Guid
	WriteU(p, 0); //AddCash

	len = p - buf;
	SendToClient(Client, 15202, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetGuildList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT StartIdx = Read32(p);
	UINT GuildCount = Read32(p);

}

void ResponseGetGuildList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //StartIdx
	Write32(p, 0); //TotalCount
	Write32(p, 0); //GuildCount
	for (size_t i = 0; i < n; i++)
	{ //GuildDescInfo
		BYTE* pGuildDescInfo = p;
		Write16(pGuildDescInfo, 0); //len

		Write32(pGuildDescInfo, 0); //GuildID
		WriteString(pGuildDescInfo, 0); //Name[]
		Write32(pGuildDescInfo, 0); //Level
		Write32(pGuildDescInfo, 0); //Score
		Write32(pGuildDescInfo, 0); //CreateTime
		Write16(pGuildDescInfo, 0); //Attribute
		Write16(pGuildDescInfo, 0); //MaxMember
		Write16(pGuildDescInfo, 0); //CurrentMember
		Write32(pGuildDescInfo, 0); //Prosperity
		Write16(pGuildDescInfo, 0); //Level
		{ //GuildEnlistCond
			BYTE* pGuildEnlistCond = pGuildDescInfo;
			Write16(pGuildEnlistCond, 0); //len

			Write32(pGuildEnlistCond, 0); //ProsperityCondition
			Write32(pGuildEnlistCond, 0); //JoinTotalCondition
			Write32(pGuildEnlistCond, 0); //HonorCondition
			Write32(pGuildEnlistCond, 0); //CharmCondition
			Write32(pGuildEnlistCond, 0); //DanceExpCondition
			Write32(pGuildEnlistCond, 0); //SkillPointCondition
			Write32(pGuildEnlistCond, 0); //ExpLevelCondition
			Write32(pGuildEnlistCond, 0); //ApplyExpLevelCondition
			Write8(pGuildEnlistCond, 0); //EnlistType

			len = pGuildEnlistCond - pGuildDescInfo;
			Set16(pGuildDescInfo, (WORD)len);
			pGuildDescInfo += len;
		}
		Write8(pGuildDescInfo, 0); //SubType
		{ //CardOtherInfo
			BYTE* pCardOtherInfo = pGuildDescInfo;
			Write16(pCardOtherInfo, 0); //len

			Write32(pCardOtherInfo, 0); //MainZone1
			Write32(pCardOtherInfo, 0); //MainZone2
			Write32(pCardOtherInfo, 0); //MainMode1
			Write32(pCardOtherInfo, 0); //MainMode2
			Write32(pCardOtherInfo, 0); //OtherInterest1
			Write32(pCardOtherInfo, 0); //OtherInterest2

			len = pCardOtherInfo - pGuildDescInfo;
			Set16(pGuildDescInfo, (WORD)len);
			pGuildDescInfo += len;
		}
		Write16(pGuildDescInfo, 0); //DescLen
		Write32(pGuildDescInfo, 0); //WeekProsper
		Write32(pGuildDescInfo, 0); //GuildQQGroup
		Write8(pGuildDescInfo, 0); //RecommendType
		Write16(pGuildDescInfo, 0); //FriendNums
		Write16(pGuildDescInfo, 0); //DCRecommendIndex

		len = pGuildDescInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen
	WriteU(p, 0); //NextQueryNum
	Write(p, 0); //NextQueryKey[]

	len = p - buf;
	SendToClient(Client, 15004, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestFindGuild(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	char[] GuildName[] = ReadString(p);
	UINT Guid = Read32(p);
	UINT Sort = Read32(p);
	UCHAR RecommendType = Read8(p);

}

void ResponseFindGuild(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	{ //GuildDescInfo
		BYTE* pGuildDescInfo = p;
		Write16(pGuildDescInfo, 0); //len

		Write32(pGuildDescInfo, 0); //GuildID
		WriteString(pGuildDescInfo, 0); //Name[]
		{ //LeaderInfo
			BYTE* pLeaderInfo = pGuildDescInfo;
			Write16(pLeaderInfo, 0); //len

			Write32(pLeaderInfo, 0); //Uin
			WriteString(pLeaderInfo, 0); //NickName[]
			Write16(pLeaderInfo, 0); //Duty
			Write8(pLeaderInfo, 0); //OnlineFlag
			WriteUn(pLeaderInfo, 0); //LastLogin
			Write32(pLeaderInfo, 0); //MemProsperity
			Write32(pLeaderInfo, 0); //LastEnlistedTime
			Write8(pLeaderInfo, 0); //EnlistFlag
			Write16(pLeaderInfo, 0); //WonderLandDuty
			Write32(pLeaderInfo, 0); //TotalWlDegree
			Write32(pLeaderInfo, 0); //WeeklyWlDegree
			Write32(pLeaderInfo, 0); //Donate
			Write32(pLeaderInfo, 0); //SeasonZhanxun
			Write32(pLeaderInfo, 0); //WeeklyContributeValue
			Write32(pLeaderInfo, 0); //WeeklyProsperContributeValue
			Write32(pLeaderInfo, 0); //MonthlyProsperContributeValue
			Write32(pLeaderInfo, 0); //CommonParas[]
			Write32(pLeaderInfo, 0); //TimeJoinedGuild
			Write8(pLeaderInfo, 0); //AppliedChampionship

			len = pLeaderInfo - pGuildDescInfo;
			Set16(pGuildDescInfo, (WORD)len);
			pGuildDescInfo += len;
		}
		Write16(pGuildDescInfo, 0); //NotesLen
		Write16(pGuildDescInfo, 0); //DescLen
		Write32(pGuildDescInfo, 0); //Level
		Write32(pGuildDescInfo, 0); //Score
		Write32(pGuildDescInfo, 0); //CreateTime
		Write16(pGuildDescInfo, 0); //Attribute
		Write16(pGuildDescInfo, 0); //MaxMember
		Write16(pGuildDescInfo, 0); //CurrentMember
		Write16(pGuildDescInfo, 0); //TeamAddition
		Write16(pGuildDescInfo, 0); //YesterdayMaxOnline
		Write16(pGuildDescInfo, 0); //HistoryMaxOnline
		Write32(pGuildDescInfo, 0); //HistoryMaxOnlineTime
		Write32(pGuildDescInfo, 0); //Prosperity
		Write16(pGuildDescInfo, 0); //Level
		{ //GuildEnlistCond
			BYTE* pGuildEnlistCond = pGuildDescInfo;
			Write16(pGuildEnlistCond, 0); //len

			Write32(pGuildEnlistCond, 0); //ProsperityCondition
			Write32(pGuildEnlistCond, 0); //JoinTotalCondition
			Write32(pGuildEnlistCond, 0); //HonorCondition
			Write32(pGuildEnlistCond, 0); //CharmCondition
			Write32(pGuildEnlistCond, 0); //DanceExpCondition
			Write32(pGuildEnlistCond, 0); //SkillPointCondition
			Write32(pGuildEnlistCond, 0); //ExpLevelCondition
			Write32(pGuildEnlistCond, 0); //ApplyExpLevelCondition
			Write8(pGuildEnlistCond, 0); //EnlistType

			len = pGuildEnlistCond - pGuildDescInfo;
			Set16(pGuildDescInfo, (WORD)len);
			pGuildDescInfo += len;
		}
		Write8(pGuildDescInfo, 0); //NewGuildType
		Write32(pGuildDescInfo, 0); //GuildQQGroup
		{ //WorkDayActiveTimeSeg
			BYTE* pWorkDayActiveTimeSeg = pGuildDescInfo;
			Write16(pWorkDayActiveTimeSeg, 0); //len

			Write16(pWorkDayActiveTimeSeg, 0); //BeginTimeInt
			Write16(pWorkDayActiveTimeSeg, 0); //EndTimeInt

			len = pWorkDayActiveTimeSeg - pGuildDescInfo;
			Set16(pGuildDescInfo, (WORD)len);
			pGuildDescInfo += len;
		}
		{ //WeekendActiveTimeSeg
			BYTE* pWeekendActiveTimeSeg = pGuildDescInfo;
			Write16(pWeekendActiveTimeSeg, 0); //len

			Write16(pWeekendActiveTimeSeg, 0); //BeginTimeInt
			Write16(pWeekendActiveTimeSeg, 0); //EndTimeInt

			len = pWeekendActiveTimeSeg - pGuildDescInfo;
			Set16(pGuildDescInfo, (WORD)len);
			pGuildDescInfo += len;
		}
		Write32(pGuildDescInfo, 0); //LastEnlistTime
		Write8(pGuildDescInfo, 0); //EnlistNum
		Write32(pGuildDescInfo, 0); //LastModGuildNameTime
		Write32(pGuildDescInfo, 0); //WonderLandID
		WriteUn(pGuildDescInfo, 0); //UiCurDonate
		Write32(pGuildDescInfo, 0); //LastDayCheerValue
		Write32(pGuildDescInfo, 0); //LastDayCheerCnt
		{ //BorderMatchInfo
			BYTE* pBorderMatchInfo = pGuildDescInfo;
			Write16(pBorderMatchInfo, 0); //len

			Write32(pBorderMatchInfo, 0); //Honor
			Write32(pBorderMatchInfo, 0); //SeasonHonor
			Write32(pBorderMatchInfo, 0); //SeasonZhanxunFirstUin
			Write32(pBorderMatchInfo, 0); //SeasonZhanxun
			WriteString(pBorderMatchInfo, 0); //SeasonZhanxunFirstNickName[]

			len = pBorderMatchInfo - pGuildDescInfo;
			Set16(pGuildDescInfo, (WORD)len);
			pGuildDescInfo += len;
		}
		{ //CardOtherInfo
			BYTE* pCardOtherInfo = pGuildDescInfo;
			Write16(pCardOtherInfo, 0); //len

			Write32(pCardOtherInfo, 0); //MainZone1
			Write32(pCardOtherInfo, 0); //MainZone2
			Write32(pCardOtherInfo, 0); //MainMode1
			Write32(pCardOtherInfo, 0); //MainMode2
			Write32(pCardOtherInfo, 0); //OtherInterest1
			Write32(pCardOtherInfo, 0); //OtherInterest2

			len = pCardOtherInfo - pGuildDescInfo;
			Set16(pGuildDescInfo, (WORD)len);
			pGuildDescInfo += len;
		}

		len = pGuildDescInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 15009, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGuildDetail(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT Sort = Read32(p);

}

void ResponseGuildDetail(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	{ //GuildDescInfo
		BYTE* pGuildDescInfo = p;
		Write16(pGuildDescInfo, 0); //len

		Write32(pGuildDescInfo, 0); //GuildID
		WriteString(pGuildDescInfo, 0); //Name[]
		{ //LeaderInfo
			BYTE* pLeaderInfo = pGuildDescInfo;
			Write16(pLeaderInfo, 0); //len

			Write32(pLeaderInfo, 0); //Uin
			WriteString(pLeaderInfo, 0); //NickName[]
			Write16(pLeaderInfo, 0); //Duty
			Write8(pLeaderInfo, 0); //OnlineFlag
			WriteUn(pLeaderInfo, 0); //LastLogin
			Write32(pLeaderInfo, 0); //MemProsperity
			Write32(pLeaderInfo, 0); //LastEnlistedTime
			Write8(pLeaderInfo, 0); //EnlistFlag
			Write16(pLeaderInfo, 0); //WonderLandDuty
			Write32(pLeaderInfo, 0); //TotalWlDegree
			Write32(pLeaderInfo, 0); //WeeklyWlDegree
			Write32(pLeaderInfo, 0); //Donate
			Write32(pLeaderInfo, 0); //SeasonZhanxun
			Write32(pLeaderInfo, 0); //WeeklyContributeValue
			Write32(pLeaderInfo, 0); //WeeklyProsperContributeValue
			Write32(pLeaderInfo, 0); //MonthlyProsperContributeValue
			Write32(pLeaderInfo, 0); //CommonParas[]
			Write32(pLeaderInfo, 0); //TimeJoinedGuild
			Write8(pLeaderInfo, 0); //AppliedChampionship

			len = pLeaderInfo - pGuildDescInfo;
			Set16(pGuildDescInfo, (WORD)len);
			pGuildDescInfo += len;
		}
		Write16(pGuildDescInfo, 0); //NotesLen
		Write16(pGuildDescInfo, 0); //DescLen
		Write32(pGuildDescInfo, 0); //Level
		Write32(pGuildDescInfo, 0); //Score
		Write32(pGuildDescInfo, 0); //CreateTime
		Write16(pGuildDescInfo, 0); //Attribute
		Write16(pGuildDescInfo, 0); //MaxMember
		Write16(pGuildDescInfo, 0); //CurrentMember
		Write16(pGuildDescInfo, 0); //TeamAddition
		Write16(pGuildDescInfo, 0); //YesterdayMaxOnline
		Write16(pGuildDescInfo, 0); //HistoryMaxOnline
		Write32(pGuildDescInfo, 0); //HistoryMaxOnlineTime
		Write32(pGuildDescInfo, 0); //Prosperity
		Write16(pGuildDescInfo, 0); //Level
		{ //GuildEnlistCond
			BYTE* pGuildEnlistCond = pGuildDescInfo;
			Write16(pGuildEnlistCond, 0); //len

			Write32(pGuildEnlistCond, 0); //ProsperityCondition
			Write32(pGuildEnlistCond, 0); //JoinTotalCondition
			Write32(pGuildEnlistCond, 0); //HonorCondition
			Write32(pGuildEnlistCond, 0); //CharmCondition
			Write32(pGuildEnlistCond, 0); //DanceExpCondition
			Write32(pGuildEnlistCond, 0); //SkillPointCondition
			Write32(pGuildEnlistCond, 0); //ExpLevelCondition
			Write32(pGuildEnlistCond, 0); //ApplyExpLevelCondition
			Write8(pGuildEnlistCond, 0); //EnlistType

			len = pGuildEnlistCond - pGuildDescInfo;
			Set16(pGuildDescInfo, (WORD)len);
			pGuildDescInfo += len;
		}
		Write8(pGuildDescInfo, 0); //NewGuildType
		Write32(pGuildDescInfo, 0); //GuildQQGroup
		{ //WorkDayActiveTimeSeg
			BYTE* pWorkDayActiveTimeSeg = pGuildDescInfo;
			Write16(pWorkDayActiveTimeSeg, 0); //len

			Write16(pWorkDayActiveTimeSeg, 0); //BeginTimeInt
			Write16(pWorkDayActiveTimeSeg, 0); //EndTimeInt

			len = pWorkDayActiveTimeSeg - pGuildDescInfo;
			Set16(pGuildDescInfo, (WORD)len);
			pGuildDescInfo += len;
		}
		{ //WeekendActiveTimeSeg
			BYTE* pWeekendActiveTimeSeg = pGuildDescInfo;
			Write16(pWeekendActiveTimeSeg, 0); //len

			Write16(pWeekendActiveTimeSeg, 0); //BeginTimeInt
			Write16(pWeekendActiveTimeSeg, 0); //EndTimeInt

			len = pWeekendActiveTimeSeg - pGuildDescInfo;
			Set16(pGuildDescInfo, (WORD)len);
			pGuildDescInfo += len;
		}
		Write32(pGuildDescInfo, 0); //LastEnlistTime
		Write8(pGuildDescInfo, 0); //EnlistNum
		Write32(pGuildDescInfo, 0); //LastModGuildNameTime
		Write32(pGuildDescInfo, 0); //WonderLandID
		WriteUn(pGuildDescInfo, 0); //UiCurDonate
		Write32(pGuildDescInfo, 0); //LastDayCheerValue
		Write32(pGuildDescInfo, 0); //LastDayCheerCnt
		{ //BorderMatchInfo
			BYTE* pBorderMatchInfo = pGuildDescInfo;
			Write16(pBorderMatchInfo, 0); //len

			Write32(pBorderMatchInfo, 0); //Honor
			Write32(pBorderMatchInfo, 0); //SeasonHonor
			Write32(pBorderMatchInfo, 0); //SeasonZhanxunFirstUin
			Write32(pBorderMatchInfo, 0); //SeasonZhanxun
			WriteString(pBorderMatchInfo, 0); //SeasonZhanxunFirstNickName[]

			len = pBorderMatchInfo - pGuildDescInfo;
			Set16(pGuildDescInfo, (WORD)len);
			pGuildDescInfo += len;
		}
		{ //CardOtherInfo
			BYTE* pCardOtherInfo = pGuildDescInfo;
			Write16(pCardOtherInfo, 0); //len

			Write32(pCardOtherInfo, 0); //MainZone1
			Write32(pCardOtherInfo, 0); //MainZone2
			Write32(pCardOtherInfo, 0); //MainMode1
			Write32(pCardOtherInfo, 0); //MainMode2
			Write32(pCardOtherInfo, 0); //OtherInterest1
			Write32(pCardOtherInfo, 0); //OtherInterest2

			len = pCardOtherInfo - pGuildDescInfo;
			Set16(pGuildDescInfo, (WORD)len);
			pGuildDescInfo += len;
		}

		len = pGuildDescInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //MemberNum
	for (size_t i = 0; i < n; i++)
	{ //Member
		BYTE* pMember = p;
		Write16(pMember, 0); //len

		Write32(pMember, 0); //Uin
		WriteString(pMember, 0); //NickName[]
		Write16(pMember, 0); //Duty
		Write8(pMember, 0); //OnlineFlag
		WriteUn(pMember, 0); //LastLogin
		Write32(pMember, 0); //MemProsperity
		Write32(pMember, 0); //LastEnlistedTime
		Write8(pMember, 0); //EnlistFlag
		Write16(pMember, 0); //WonderLandDuty
		Write32(pMember, 0); //TotalWlDegree
		Write32(pMember, 0); //WeeklyWlDegree
		Write32(pMember, 0); //Donate
		Write32(pMember, 0); //SeasonZhanxun
		Write32(pMember, 0); //WeeklyContributeValue
		Write32(pMember, 0); //WeeklyProsperContributeValue
		Write32(pMember, 0); //MonthlyProsperContributeValue
		Write32(pMember, 0); //CommonParas[]
		Write32(pMember, 0); //TimeJoinedGuild
		Write8(pMember, 0); //AppliedChampionship

		len = pMember - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //LogNum
	for (size_t i = 0; i < n; i++)
	{ //Log
		BYTE* pLog = p;
		Write16(pLog, 0); //len

		Write32(pLog, 0); //Time
		Write8(pLog, 0); //LogLen

		len = pLog - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //Duty
		BYTE* pDuty = p;
		Write16(pDuty, 0); //len

		Write16(pDuty, 0); //Dutys[]
		for (size_t i = 0; i < n; i++)
		{ //AutoPromLimit
			BYTE* pAutoPromLimit = pDuty;
			Write16(pAutoPromLimit, 0); //len

			Write32(pAutoPromLimit, 0); //ScoreLimit
			Write32(pAutoPromLimit, 0); //ProsperityLimit

			len = pAutoPromLimit - pDuty;
			Set16(pDuty, (WORD)len);
			pDuty += len;
		}
		for (size_t i = 0; i < n; i++)
		{ //ApplyPromLimit
			BYTE* pApplyPromLimit = pDuty;
			Write16(pApplyPromLimit, 0); //len

			Write32(pApplyPromLimit, 0); //ScoreLimit
			Write32(pApplyPromLimit, 0); //ProsperityLimit

			len = pApplyPromLimit - pDuty;
			Set16(pDuty, (WORD)len);
			pDuty += len;
		}
		Write(pDuty, 0); //DutyTitle[]

		len = pDuty - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen
	Write32(p, 0); //Contribute[]
	Write32(p, 0); //SelfJoinGuildTime
	Write16(p, 0); //SelfApplyDuty
	Write8(p, 0); //HasAward
	Write32(p, 0); //CurrentOnLineGuildMembers
	Write32(p, 0); //LastWeekProsper

	len = p - buf;
	SendToClient(Client, 15003, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGuildNotes(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT GuildID = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGuildNotes(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	WriteString(p, 0); //Notes[]

	len = p - buf;
	SendToClient(Client, 24309, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestChangeMemberDuty(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT DstUin = Read32(p);
	USHORT NewDuty = Read16(p);
	int OperationChannelType = Read32(p);

}

void ResponseChangeMemberDuty(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	WriteString(p, 0); //SrcNickName[]
	Write32(p, 0); //DstUin
	WriteString(p, 0); //DstNickName[]
	Write16(p, 0); //NewDuty
	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen
	Write16(p, 0); //Right
	Write16(p, 0); //OldDuty

	len = p - buf;
	SendToClient(Client, 15006, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyChangeMemberDutyResult(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	WriteString(p, 0); //SrcNickName[]
	Write32(p, 0); //DstUin
	WriteString(p, 0); //DstNickName[]
	Write16(p, 0); //NewDuty
	Write16(p, 0); //Right

	len = p - buf;
	SendToClient(Client, 15204, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestModifyDutyRight(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT Duty = Read16(p);
	USHORT Right = Read16(p);

}

void ResponseModifyDutyRight(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //Time
	Write16(p, 0); //Duty
	Write16(p, 0); //Right
	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 15007, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestModifyGuildAttriute(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT NewAttr = Read16(p);
	char NewGuildType = Read8(p);
	UINT GuildQQGroup = Read32(p);
	{ //WorkDayActiveTimeSeg
		BYTE* pWorkDayActiveTimeSeg = p;
		len = Read16(pWorkDayActiveTimeSeg);

		USHORT BeginTimeInt = Read16(pWorkDayActiveTimeSeg);
		USHORT EndTimeInt = Read16(pWorkDayActiveTimeSeg);

		p += len;
	}
	{ //WeekendActiveTimeSeg
		BYTE* pWeekendActiveTimeSeg = p;
		len = Read16(pWeekendActiveTimeSeg);

		USHORT BeginTimeInt = Read16(pWeekendActiveTimeSeg);
		USHORT EndTimeInt = Read16(pWeekendActiveTimeSeg);

		p += len;
	}
	{ //CardOtherInfo
		BYTE* pCardOtherInfo = p;
		len = Read16(pCardOtherInfo);

		int MainZone1 = Read32(pCardOtherInfo);
		int MainZone2 = Read32(pCardOtherInfo);
		int MainMode1 = Read32(pCardOtherInfo);
		int MainMode2 = Read32(pCardOtherInfo);
		int OtherInterest1 = Read32(pCardOtherInfo);
		int OtherInterest2 = Read32(pCardOtherInfo);

		p += len;
	}

}

void ResponseModifyGuildAttriute(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //NewAttr
	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen
	Write8(p, 0); //NewGuildType
	Write32(p, 0); //GuildQQGroup
	{ //WorkDayActiveTimeSeg
		BYTE* pWorkDayActiveTimeSeg = p;
		Write16(pWorkDayActiveTimeSeg, 0); //len

		Write16(pWorkDayActiveTimeSeg, 0); //BeginTimeInt
		Write16(pWorkDayActiveTimeSeg, 0); //EndTimeInt

		len = pWorkDayActiveTimeSeg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //WeekendActiveTimeSeg
		BYTE* pWeekendActiveTimeSeg = p;
		Write16(pWeekendActiveTimeSeg, 0); //len

		Write16(pWeekendActiveTimeSeg, 0); //BeginTimeInt
		Write16(pWeekendActiveTimeSeg, 0); //EndTimeInt

		len = pWeekendActiveTimeSeg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //CardOtherInfo
		BYTE* pCardOtherInfo = p;
		Write16(pCardOtherInfo, 0); //len

		Write32(pCardOtherInfo, 0); //MainZone1
		Write32(pCardOtherInfo, 0); //MainZone2
		Write32(pCardOtherInfo, 0); //MainMode1
		Write32(pCardOtherInfo, 0); //MainMode2
		Write32(pCardOtherInfo, 0); //OtherInterest1
		Write32(pCardOtherInfo, 0); //OtherInterest2

		len = pCardOtherInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //ModifyFirstTime

	len = p - buf;
	SendToClient(Client, 15008, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestModifyGuildNotes(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT NotesLen = Read16(p);

}

void ResponseModifyGuildNotes(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //NotesLen
	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 15011, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestModifyGuildDesc(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT DescLen = Read16(p);

}

void ResponseModifyGuildDesc(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //DescLen
	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 15012, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestPlayerGuildInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT DstUin = Read32(p);
	bool Flag = Read8(p);

}

void ResponsePlayerGuildInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //DstUin
	WriteString(p, 0); //Name[]
	Write16(p, 0); //Duty
	Write32(p, 0); //GuildID
	Write32(p, 0); //Medal
	WriteString(p, 0); //DutyTitle[]
	Write8(p, 0); //Flag
	Write32(p, 0); //WonderLandID

	len = p - buf;
	SendToClient(Client, 15015, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGuildLogInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGuildLogInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //LogNum
	for (size_t i = 0; i < n; i++)
	{ //Log
		BYTE* pLog = p;
		Write16(pLog, 0); //len

		Write32(pLog, 0); //Time
		Write8(pLog, 0); //LogLen

		len = pLog - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 15016, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestCheckGuildName(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	char[] GuildName[] = ReadString(p);
	UINT SlefGuildID = Read32(p);

}

void ResponseCheckGuildName(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	WriteString(p, 0); //GuildName[]
	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 15017, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyDismissGuildResult(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteString(p, 0); //GuildName[]
	Write16(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 15217, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestSavingQQshow(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	char[] QQshowName[] = ReadString(p);
	short PropID = Read16(p);
	short Seq = Read16(p);
	UCHAR Finished = Read8(p);
	UINT QQshowBufferSize = Read32(p);
	UCHAR UploadType = Read8(p);

}

void ResponseSavingQQshow(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	WriteString(p, 0); //QQshowName[]
	Write16(p, 0); //PropID
	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen
	Write8(p, 0); //UploadType

	len = p - buf;
	SendToClient(Client, 356, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyLoginMsg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //MsgNum
	for (size_t i = 0; i < n; i++)
	{ //LoginMsgList
		BYTE* pLoginMsgList = p;
		Write16(pLoginMsgList, 0); //len

		Write8(pLoginMsgList, 0); //MsgType
		Write16(pLoginMsgList, 0); //UrlLen
		Write16(pLoginMsgList, 0); //MsgLen

		len = pLoginMsgList - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 575, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestRefitKart(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int KartItemId = Read32(p);
	UCHAR KartNameLen = Read8(p);
	int RefitItemId = Read32(p);
	int Reserved = Read32(p);
	short RefitTimes = Read16(p);

}

void ResponseRefitKart(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Result
	Write32(p, 0); //Uin
	Write32(p, 0); //KartItemId
	{ //Increasement
		BYTE* pIncreasement = p;
		Write16(pIncreasement, 0); //len

		Write32(pIncreasement, 0); //Uin
		Write32(pIncreasement, 0); //KartId
		Write32(pIncreasement, 0); //RefitCout
		Write16(pIncreasement, 0); //MaxFlags
		Write16(pIncreasement, 0); //WWeight
		Write16(pIncreasement, 0); //SpeedWeight
		Write16(pIncreasement, 0); //JetWeight
		Write16(pIncreasement, 0); //SJetWeight
		Write16(pIncreasement, 0); //AccuWeight
		Write32(pIncreasement, 0); //ShapeRefitCount
		Write32(pIncreasement, 0); //KartHeadRefitItemID
		Write32(pIncreasement, 0); //KartTailRefitItemID
		Write32(pIncreasement, 0); //KartFlankRefitItemID
		Write32(pIncreasement, 0); //KartTireRefitItemID
		Write32(pIncreasement, 0); //SecondRefitCount
		Write16(pIncreasement, 0); //Speed2Weight
		Write16(pIncreasement, 0); //DriftVecWeight
		Write16(pIncreasement, 0); //AdditionalZSpeedWeight
		Write16(pIncreasement, 0); //AntiCollisionWeight
		Write16(pIncreasement, 0); //LuckyValue
		Write16(pIncreasement, 0); //RefitLuckyValueMaxWeight
		Write32(pIncreasement, 0); //ShapeSuitID
		Write8(pIncreasement, 0); //LegendSuitLevel
		Write32(pIncreasement, 0); //LegendSuitLevelChoice
		Write32(pIncreasement, 0); //ShapeLegendSuitID

		len = pIncreasement - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //CurAttr
		BYTE* pCurAttr = p;
		Write16(pCurAttr, 0); //len

		Write32(pCurAttr, 0); //Uin
		Write32(pCurAttr, 0); //KartId
		Write32(pCurAttr, 0); //RefitCout
		Write16(pCurAttr, 0); //MaxFlags
		Write16(pCurAttr, 0); //WWeight
		Write16(pCurAttr, 0); //SpeedWeight
		Write16(pCurAttr, 0); //JetWeight
		Write16(pCurAttr, 0); //SJetWeight
		Write16(pCurAttr, 0); //AccuWeight
		Write32(pCurAttr, 0); //ShapeRefitCount
		Write32(pCurAttr, 0); //KartHeadRefitItemID
		Write32(pCurAttr, 0); //KartTailRefitItemID
		Write32(pCurAttr, 0); //KartFlankRefitItemID
		Write32(pCurAttr, 0); //KartTireRefitItemID
		Write32(pCurAttr, 0); //SecondRefitCount
		Write16(pCurAttr, 0); //Speed2Weight
		Write16(pCurAttr, 0); //DriftVecWeight
		Write16(pCurAttr, 0); //AdditionalZSpeedWeight
		Write16(pCurAttr, 0); //AntiCollisionWeight
		Write16(pCurAttr, 0); //LuckyValue
		Write16(pCurAttr, 0); //RefitLuckyValueMaxWeight
		Write32(pCurAttr, 0); //ShapeSuitID
		Write8(pCurAttr, 0); //LegendSuitLevel
		Write32(pCurAttr, 0); //LegendSuitLevelChoice
		Write32(pCurAttr, 0); //ShapeLegendSuitID

		len = pCurAttr - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //ExpAward
	Write32(p, 0); //MoneyAward
	Write16(p, 0); //ReasonLen
	Write16(p, 0); //RefitTimes
	Write16(p, 0); //ResponseIdx
	Write8(p, 0); //LastIdx
	Write32(p, 0); //LuckyValue

	len = p - buf;
	SendToClient(Client, 174, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetForbidRefitKartList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetForbidRefitKartList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write16(p, 0); //ForbidListNum
	Write32(p, 0); //ForbidRefitKartID[]

	len = p - buf;
	SendToClient(Client, 175, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyUpdatePetExp(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //PetID
	Write32(p, 0); //ExpInc
	Write16(p, 0); //PreLevel
	Write16(p, 0); //CurLevel
	Write32(p, 0); //CurLevelExp
	Write32(p, 0); //CurLevelMaxExp
	Write16(p, 0); //MsgLen
	Write16(p, 0); //Reason
	Write32(p, 0); //PetExpCardID

	len = p - buf;
	SendToClient(Client, 583, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyPetEvolution(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Result
	Write16(p, 0); //PreStatus
	{ //PetInfo
		BYTE* pPetInfo = p;
		Write16(pPetInfo, 0); //len

		Write32(pPetInfo, 0); //Uin
		Write32(pPetInfo, 0); //PetId
		WriteString(pPetInfo, 0); //PetName[]
		Write8(pPetInfo, 0); //IsProper
		Write16(pPetInfo, 0); //LevelLimit
		Write16(pPetInfo, 0); //Level
		Write32(pPetInfo, 0); //CurLevelExp
		Write32(pPetInfo, 0); //CurLevelMaxExp
		Write8(pPetInfo, 0); //Status
		Write16(pPetInfo, 0); //PL
		Write16(pPetInfo, 0); //TotalPL
		Write16(pPetInfo, 0); //PetSkillNum
		for (size_t i = 0; i < n; i++)
		{ //PetSkillList
			BYTE* pPetSkillList = pPetInfo;
			Write16(pPetSkillList, 0); //len

			Write16(pPetSkillList, 0); //SkillID
			Write8(pPetSkillList, 0); //Status
			Write8(pPetSkillList, 0); //Active
			Write32(pPetSkillList, 0); //Value

			len = pPetSkillList - pPetInfo;
			Set16(pPetInfo, (WORD)len);
			pPetInfo += len;
		}
		Write32(pPetInfo, 0); //StrengLevel
		Write8(pPetInfo, 0); //TopStatus
		{ //CommonInfo
			BYTE* pCommonInfo = pPetInfo;
			Write16(pCommonInfo, 0); //len

			Write32(pCommonInfo, 0); //HuanHuaLevel
			Write8(pCommonInfo, 0); //CanHuanHua

			len = pCommonInfo - pPetInfo;
			Set16(pPetInfo, (WORD)len);
			pPetInfo += len;
		}

		len = pPetInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //MsgLen

	len = p - buf;
	SendToClient(Client, 584, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyUpdatePetPL(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //PetID
	Write32(p, 0); //PLInc
	Write32(p, 0); //CurPL
	Write16(p, 0); //Reason

	len = p - buf;
	SendToClient(Client, 585, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestResetPL(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	Un Time = ReadUn(p);

}

void NotifyBroadcastPetEvolution(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	{ //PetInfo
		BYTE* pPetInfo = p;
		Write16(pPetInfo, 0); //len

		Write32(pPetInfo, 0); //Uin
		Write32(pPetInfo, 0); //PetId
		WriteString(pPetInfo, 0); //PetName[]
		Write8(pPetInfo, 0); //IsProper
		Write16(pPetInfo, 0); //Level
		Write8(pPetInfo, 0); //Status
		Write16(pPetInfo, 0); //PetSkillNum
		for (size_t i = 0; i < n; i++)
		{ //PetSkillList
			BYTE* pPetSkillList = pPetInfo;
			Write16(pPetSkillList, 0); //len

			Write16(pPetSkillList, 0); //SkillID
			Write8(pPetSkillList, 0); //Status
			Write8(pPetSkillList, 0); //Active
			Write32(pPetSkillList, 0); //Value

			len = pPetSkillList - pPetInfo;
			Set16(pPetInfo, (WORD)len);
			pPetInfo += len;
		}
		Write32(pPetInfo, 0); //StrengLevel
		Write8(pPetInfo, 0); //TopStatus
		{ //CommonInfo
			BYTE* pCommonInfo = pPetInfo;
			Write16(pCommonInfo, 0); //len

			Write32(pCommonInfo, 0); //HuanHuaLevel
			Write8(pCommonInfo, 0); //CanHuanHua

			len = pCommonInfo - pPetInfo;
			Set16(pPetInfo, (WORD)len);
			pPetInfo += len;
		}
		Write16(pPetInfo, 0); //PKStar
		Write32(pPetInfo, 0); //PetSkinID

		len = pPetInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 587, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyBroadcastPetLevelUp(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	{ //PetLevelUpInfo
		BYTE* pPetLevelUpInfo = p;
		Write16(pPetLevelUpInfo, 0); //len

		Write32(pPetLevelUpInfo, 0); //Uin
		Write32(pPetLevelUpInfo, 0); //PetId
		Write16(pPetLevelUpInfo, 0); //NewLevel

		len = pPetLevelUpInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 589, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyPetLevelUp(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	{ //PetLevelUpInfo
		BYTE* pPetLevelUpInfo = p;
		Write16(pPetLevelUpInfo, 0); //len

		Write32(pPetLevelUpInfo, 0); //Uin
		Write32(pPetLevelUpInfo, 0); //PetId
		Write16(pPetLevelUpInfo, 0); //PetSkillNum
		for (size_t i = 0; i < n; i++)
		{ //PetSkillList
			BYTE* pPetSkillList = pPetLevelUpInfo;
			Write16(pPetSkillList, 0); //len

			Write16(pPetSkillList, 0); //SkillID
			Write8(pPetSkillList, 0); //Status
			Write8(pPetSkillList, 0); //Active
			Write32(pPetSkillList, 0); //Value

			len = pPetSkillList - pPetLevelUpInfo;
			Set16(pPetLevelUpInfo, (WORD)len);
			pPetLevelUpInfo += len;
		}

		len = pPetLevelUpInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 588, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestUpdatePetName(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	Un Time = ReadUn(p);
	char[] PetName[] = ReadString(p);

}

void ResponseUpdatePetName(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Result

	len = p - buf;
	SendToClient(Client, 178, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyPetUpdateName(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //PetID
	WriteString(p, 0); //PetName[]

	len = p - buf;
	SendToClient(Client, 590, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetCommodityExchangeItems(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int ExchangeID = Read32(p);

}

void ResponseGetCommodityExchangeItems(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write32(p, 0); //ExchangeID
	Write16(p, 0); //ItemNum
	for (size_t i = 0; i < n; i++)
	{ //ItemInfo
		BYTE* pItemInfo = p;
		Write16(pItemInfo, 0); //len

		Write32(pItemInfo, 0); //ItemID
		Write8(pItemInfo, 0); //ItemType
		Write32(pItemInfo, 0); //NeedQuantity
		Write32(pItemInfo, 0); //Quantity

		len = pItemInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen
	Write32(p, 0); //ConsumeFlag
	Write8(p, 0); //ProduceItemNum
	for (size_t i = 0; i < n; i++)
	{ //ProduceItemInfo
		BYTE* pProduceItemInfo = p;
		Write16(pProduceItemInfo, 0); //len

		Write32(pProduceItemInfo, 0); //ItemID
		Write32(pProduceItemInfo, 0); //ItemNum
		Write32(pProduceItemInfo, 0); //AvailPeriod
		Write8(pProduceItemInfo, 0); //Status
		WriteUn(pProduceItemInfo, 0); //ObtainTime
		Write32(pProduceItemInfo, 0); //OtherAttribute
		Write16(pProduceItemInfo, 0); //ItemType

		len = pProduceItemInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 171, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyFileCheckList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //FileNum
	for (size_t i = 0; i < n; i++)
	{ //FileList
		BYTE* pFileList = p;
		Write16(pFileList, 0); //len

		Write8(pFileList, 0); //FileNameLen

		len = pFileList - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 862, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestFileCheck(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	Un Time = ReadUn(p);
	{ //FileHash
		BYTE* pFileHash = p;
		len = Read16(pFileHash);

		UCHAR HashLen = Read8(pFileHash);

		p += len;
	}
	UCHAR FileNum = Read8(p);
	UINT[] ClientFileCRC[] = Read32(p);

}

void NotifyKubiGameInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //KubiNum
	for (size_t i = 0; i < n; i++)
	{ //Kubi
		BYTE* pKubi = p;
		Write16(pKubi, 0); //len

		Write32(pKubi, 0); //Key
		Write32(pKubi, 0); //Flags
		Write32(pKubi, 0); //PosIndex
		Write16(pKubi, 0); //KubiType

		len = pKubi - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //PlayerNum
	for (size_t i = 0; i < n; i++)
	{ //KubiPlayer
		BYTE* pKubiPlayer = p;
		Write16(pKubiPlayer, 0); //len

		Write32(pKubiPlayer, 0); //Uin
		Write32(pKubiPlayer, 0); //State
		Write32(pKubiPlayer, 0); //KubiNum
		Write32(pKubiPlayer, 0); //KubiKeyArray[]
		Write32(pKubiPlayer, 0); //PickKubiHistory
		Write32(pKubiPlayer, 0); //TeamID
		Write32(pKubiPlayer, 0); //FinTime
		Write32(pKubiPlayer, 0); //BigKubiNum
		Write32(pKubiPlayer, 0); //KubiScore

		len = pKubiPlayer - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //QuarterTime
	Write32(p, 0); //BigKubiTransferSmallKubiFactor

	len = p - buf;
	SendToClient(Client, 600, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGainKubi(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	{ //Kubi
		BYTE* pKubi = p;
		len = Read16(pKubi);

		int Key = Read32(pKubi);
		UINT Flags = Read32(pKubi);
		int PosIndex = Read32(pKubi);
		short KubiType = Read16(pKubi);

		p += len;
	}
	int[] CurrentPosition[] = Read32(p);
	UCHAR GainType = Read8(p);

}

void ResponseGainKubi(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	WriteUn(p, 0); //Uin
	{ //Kubi
		BYTE* pKubi = p;
		Write16(pKubi, 0); //len

		Write32(pKubi, 0); //Key
		Write32(pKubi, 0); //Flags
		Write32(pKubi, 0); //PosIndex
		Write16(pKubi, 0); //KubiType

		len = pKubi - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //KubiPlayer
		BYTE* pKubiPlayer = p;
		Write16(pKubiPlayer, 0); //len

		Write32(pKubiPlayer, 0); //Uin
		Write32(pKubiPlayer, 0); //State
		Write32(pKubiPlayer, 0); //KubiNum
		Write32(pKubiPlayer, 0); //KubiKeyArray[]
		Write32(pKubiPlayer, 0); //PickKubiHistory
		Write32(pKubiPlayer, 0); //TeamID
		Write32(pKubiPlayer, 0); //FinTime
		Write32(pKubiPlayer, 0); //BigKubiNum
		Write32(pKubiPlayer, 0); //KubiScore

		len = pKubiPlayer - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen
	Write32(p, 0); //DropItemID
	Write32(p, 0); //DropItemNum
	Write8(p, 0); //GainType

	len = p - buf;
	SendToClient(Client, 180, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyGainKubi(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //Uin
	{ //Kubi
		BYTE* pKubi = p;
		Write16(pKubi, 0); //len

		Write32(pKubi, 0); //Key
		Write32(pKubi, 0); //Flags
		Write32(pKubi, 0); //PosIndex
		Write16(pKubi, 0); //KubiType

		len = pKubi - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //KubiPlayer
		BYTE* pKubiPlayer = p;
		Write16(pKubiPlayer, 0); //len

		Write32(pKubiPlayer, 0); //Uin
		Write32(pKubiPlayer, 0); //State
		Write32(pKubiPlayer, 0); //KubiNum
		Write32(pKubiPlayer, 0); //KubiKeyArray[]
		Write32(pKubiPlayer, 0); //PickKubiHistory
		Write32(pKubiPlayer, 0); //TeamID
		Write32(pKubiPlayer, 0); //FinTime
		Write32(pKubiPlayer, 0); //BigKubiNum
		Write32(pKubiPlayer, 0); //KubiScore

		len = pKubiPlayer - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //GainType

	len = p - buf;
	SendToClient(Client, 601, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestDropKubi(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	int Reason = Read32(p);
	int[] CurrentPosition[] = Read32(p);

}

void ResponseDropKubi(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	WriteUn(p, 0); //Uin
	Write32(p, 0); //KubiNum
	for (size_t i = 0; i < n; i++)
	{ //Kubi
		BYTE* pKubi = p;
		Write16(pKubi, 0); //len

		Write32(pKubi, 0); //Key
		Write32(pKubi, 0); //Flags
		Write32(pKubi, 0); //PosIndex
		Write16(pKubi, 0); //KubiType

		len = pKubi - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //KubiPlayer
		BYTE* pKubiPlayer = p;
		Write16(pKubiPlayer, 0); //len

		Write32(pKubiPlayer, 0); //Uin
		Write32(pKubiPlayer, 0); //State
		Write32(pKubiPlayer, 0); //KubiNum
		Write32(pKubiPlayer, 0); //KubiKeyArray[]
		Write32(pKubiPlayer, 0); //PickKubiHistory
		Write32(pKubiPlayer, 0); //TeamID
		Write32(pKubiPlayer, 0); //FinTime
		Write32(pKubiPlayer, 0); //BigKubiNum
		Write32(pKubiPlayer, 0); //KubiScore

		len = pKubiPlayer - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 181, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyDropKubi(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //Uin
	Write32(p, 0); //KubiNum
	for (size_t i = 0; i < n; i++)
	{ //Kubi
		BYTE* pKubi = p;
		Write16(pKubi, 0); //len

		Write32(pKubi, 0); //Key
		Write32(pKubi, 0); //Flags
		Write32(pKubi, 0); //PosIndex
		Write16(pKubi, 0); //KubiType

		len = pKubi - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //KubiPlayer
		BYTE* pKubiPlayer = p;
		Write16(pKubiPlayer, 0); //len

		Write32(pKubiPlayer, 0); //Uin
		Write32(pKubiPlayer, 0); //State
		Write32(pKubiPlayer, 0); //KubiNum
		Write32(pKubiPlayer, 0); //KubiKeyArray[]
		Write32(pKubiPlayer, 0); //PickKubiHistory
		Write32(pKubiPlayer, 0); //TeamID
		Write32(pKubiPlayer, 0); //FinTime
		Write32(pKubiPlayer, 0); //BigKubiNum
		Write32(pKubiPlayer, 0); //KubiScore

		len = pKubiPlayer - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //SrcUin

	len = p - buf;
	SendToClient(Client, 602, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyKubiCountDown(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //KubiCountDown
	Write8(p, 0); //CountDownTyp

	len = p - buf;
	SendToClient(Client, 603, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyKubiQuarterOver(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //QuarterTime

	len = p - buf;
	SendToClient(Client, 604, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyKubiKickPlayer(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //PlayerNum
	for (size_t i = 0; i < n; i++)
	{ //KubiPlayerInfo
		BYTE* pKubiPlayerInfo = p;
		Write16(pKubiPlayerInfo, 0); //len

		Write32(pKubiPlayerInfo, 0); //Uin
		Write32(pKubiPlayerInfo, 0); //State
		Write32(pKubiPlayerInfo, 0); //KubiNum
		Write32(pKubiPlayerInfo, 0); //KubiKeyArray[]
		Write32(pKubiPlayerInfo, 0); //PickKubiHistory
		Write32(pKubiPlayerInfo, 0); //TeamID
		Write32(pKubiPlayerInfo, 0); //FinTime
		Write32(pKubiPlayerInfo, 0); //BigKubiNum
		Write32(pKubiPlayerInfo, 0); //KubiScore

		len = pKubiPlayerInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //KubiNum
	for (size_t i = 0; i < n; i++)
	{ //Kubi
		BYTE* pKubi = p;
		Write16(pKubi, 0); //len

		Write32(pKubi, 0); //Key
		Write32(pKubi, 0); //Flags
		Write32(pKubi, 0); //PosIndex
		Write16(pKubi, 0); //KubiType

		len = pKubi - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 605, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyKubiPlayerLeave(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	{ //KubiPlayerInfo
		BYTE* pKubiPlayerInfo = p;
		Write16(pKubiPlayerInfo, 0); //len

		Write32(pKubiPlayerInfo, 0); //Uin
		Write32(pKubiPlayerInfo, 0); //State
		Write32(pKubiPlayerInfo, 0); //KubiNum
		Write32(pKubiPlayerInfo, 0); //KubiKeyArray[]
		Write32(pKubiPlayerInfo, 0); //PickKubiHistory
		Write32(pKubiPlayerInfo, 0); //TeamID
		Write32(pKubiPlayerInfo, 0); //FinTime
		Write32(pKubiPlayerInfo, 0); //BigKubiNum
		Write32(pKubiPlayerInfo, 0); //KubiScore

		len = pKubiPlayerInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //KubiNum
	for (size_t i = 0; i < n; i++)
	{ //Kubi
		BYTE* pKubi = p;
		Write16(pKubi, 0); //len

		Write32(pKubi, 0); //Key
		Write32(pKubi, 0); //Flags
		Write32(pKubi, 0); //PosIndex
		Write16(pKubi, 0); //KubiType

		len = pKubi - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 606, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyKubiRaceOver(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //PlayerNum
	for (size_t i = 0; i < n; i++)
	{ //KubiScore
		BYTE* pKubiScore = p;
		Write16(pKubiScore, 0); //len

		Write32(pKubiScore, 0); //Uin
		Write32(pKubiScore, 0); //State
		Write32(pKubiScore, 0); //Rank
		Write32(pKubiScore, 0); //KubiHistroy
		Write32(pKubiScore, 0); //AliveTime
		Write32(pKubiScore, 0); //TP
		Write32(pKubiScore, 0); //MoneyInc
		Write32(pKubiScore, 0); //MoneyTotal
		Write32(pKubiScore, 0); //ExpInc
		Write32(pKubiScore, 0); //ExpTotal
		Write8(pKubiScore, 0); //AwardNum
		Write32(pKubiScore, 0); //SpecialAward[]
		Write32(pKubiScore, 0); //GainKubiCount
		Write32(pKubiScore, 0); //AwardSuperMoneyNum
		Write32(pKubiScore, 0); //CurrentAwardSuperMoneyNum
		Write32(pKubiScore, 0); //DailyLimitSuperMoneyNums
		Write16(pKubiScore, 0); //HaveAlreadyReachDailyLimit

		len = pKubiScore - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //WinTeamID
	Write32(p, 0); //WinType
	Write32(p, 0); //AwardTime
	Write8(p, 0); //PlayerNumber
	for (size_t i = 0; i < n; i++)
	{ //HideTaskResult
		BYTE* pHideTaskResult = p;
		Write16(pHideTaskResult, 0); //len

		Write32(pHideTaskResult, 0); //Uin
		Write32(pHideTaskResult, 0); //TaskId
		Write8(pHideTaskResult, 0); //HideTaskFinishResult

		len = pHideTaskResult - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //KickOffPlayerNumber
	for (size_t i = 0; i < n; i++)
	{ //KickOffPlayer
		BYTE* pKickOffPlayer = p;
		Write16(pKickOffPlayer, 0); //len

		Write32(pKickOffPlayer, 0); //Uin
		WriteString(pKickOffPlayer, 0); //NickName[]
		Write8(pKickOffPlayer, 0); //Gender
		Write8(pKickOffPlayer, 0); //TeamID
		Write8(pKickOffPlayer, 0); //Country

		len = pKickOffPlayer - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 607, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestReturnToHall(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);

}

void ResponseReturnToHall(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 182, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyGuildBroadcast(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteString(p, 0); //GuildName[]
	Write16(p, 0); //ContentLength
	Write32(p, 0); //Guid

	len = p - buf;
	SendToClient(Client, 15218, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyGSvrdUpdatePlayerGuildScore(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //ContributeInc

	len = p - buf;
	SendToClient(Client, 15219, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestCreateTeam(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	BYTE TeamType = Read8(p);

}

void ResponseCreateTeam(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //TeamID
	Write32(p, 0); //Score
	Write8(p, 0); //TeamType
	Write32(p, 0); //ServerID

	len = p - buf;
	SendToClient(Client, 191, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestJoinTeam(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int TeamID = Read32(p);
	UINT LeaderUin = Read32(p);
	bool NeedAllow = Read8(p);

}

void ResponseJoinTeam(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Score
	Write8(p, 0); //TeamType
	WriteUn(p, 0); //PlayerNum
	for (size_t i = 0; i < n; i++)
	{ //TeamPlayerInfo
		BYTE* pTeamPlayerInfo = p;
		Write16(pTeamPlayerInfo, 0); //len

		Write32(pTeamPlayerInfo, 0); //Uin
		Write32(pTeamPlayerInfo, 0); //Identity
		WriteUn(pTeamPlayerInfo, 0); //PlayerID
		Write8(pTeamPlayerInfo, 0); //ReadyInRoom
		{ //PlayerDBBaseInfo
			BYTE* pPlayerDBBaseInfo = pTeamPlayerInfo;
			Write16(pPlayerDBBaseInfo, 0); //len

			WriteString(pPlayerDBBaseInfo, 0); //NickName[]
			Write8(pPlayerDBBaseInfo, 0); //Gender
			Write8(pPlayerDBBaseInfo, 0); //Country
			Write32(pPlayerDBBaseInfo, 0); //License
			WriteUn(pPlayerDBBaseInfo, 0); //Experience
			Write32(pPlayerDBBaseInfo, 0); //SuperMoney
			Write32(pPlayerDBBaseInfo, 0); //Money
			WriteUn(pPlayerDBBaseInfo, 0); //WinNum
			Write32(pPlayerDBBaseInfo, 0); //SecondNum
			Write32(pPlayerDBBaseInfo, 0); //ThirdNum
			WriteUn(pPlayerDBBaseInfo, 0); //TotalNum
			Write32(pPlayerDBBaseInfo, 0); //CurHonor
			Write32(pPlayerDBBaseInfo, 0); //TotalHonor
			Write32(pPlayerDBBaseInfo, 0); //TodayHonor
			Write32(pPlayerDBBaseInfo, 0); //RelaxTime
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationBefore
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationCur
			Write32(pPlayerDBBaseInfo, 0); //Charm
			Write32(pPlayerDBBaseInfo, 0); //DurationGame
			Write32(pPlayerDBBaseInfo, 0); //DanceExp
			Write32(pPlayerDBBaseInfo, 0); //Coupons
			Write32(pPlayerDBBaseInfo, 0); //Admiration
			Write32(pPlayerDBBaseInfo, 0); //LuckMoney
			Write32(pPlayerDBBaseInfo, 0); //TeamWorkExp
			Write32(pPlayerDBBaseInfo, 0); //AchievePoint
			Write32(pPlayerDBBaseInfo, 0); //RegTime
			WriteString(pPlayerDBBaseInfo, 0); //Signature[]
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchPoint
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchNum
			Write16(pPlayerDBBaseInfo, 0); //LuckyMatchFirstNum
			Write8(pPlayerDBBaseInfo, 0); //LuckyMatchBestRand
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchWinNum
			Write32(pPlayerDBBaseInfo, 0); //FizzPointTotal
			Write16(pPlayerDBBaseInfo, 0); //FizzPointDaily
			Write16(pPlayerDBBaseInfo, 0); //FizzPointWeekly
			Write16(pPlayerDBBaseInfo, 0); //FizzPointLastWeek
			Write8(pPlayerDBBaseInfo, 0); //FizzLotteryStatus
			Write32(pPlayerDBBaseInfo, 0); //FizzLastUpdateTime
			Write32(pPlayerDBBaseInfo, 0); //SNSLocaleCode
			Write32(pPlayerDBBaseInfo, 0); //AuctionRightUnlockTime
			Write8(pPlayerDBBaseInfo, 0); //ReserveFlag
			Write32(pPlayerDBBaseInfo, 0); //CurConsumeScore
			Write32(pPlayerDBBaseInfo, 0); //HistoryConsumeScore
			Write8(pPlayerDBBaseInfo, 0); //CrashModeSponsorID
			Write32(pPlayerDBBaseInfo, 0); //Popularity
			Write32(pPlayerDBBaseInfo, 0); //LadderMatchAchievePoint
			Write32(pPlayerDBBaseInfo, 0); //Cash
			Write32(pPlayerDBBaseInfo, 0); //PlayerGPMIdentity
			Write32(pPlayerDBBaseInfo, 0); //PointTotalScore
			WriteUn(pPlayerDBBaseInfo, 0); //totalMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //lastMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalSeasonId
			WriteUn(pPlayerDBBaseInfo, 0); //lastClearMapMedalTime
			WriteUn(pPlayerDBBaseInfo, 0); //max2048Score
			WriteUn(pPlayerDBBaseInfo, 0); //curPlay2048LeftNum
			Write32(pPlayerDBBaseInfo, 0); //CheerValue
			Write16(pPlayerDBBaseInfo, 0); //SeasonID
			Write32(pPlayerDBBaseInfo, 0); //LastCheerValue
			Write32(pPlayerDBBaseInfo, 0); //SpeedBean
			Write32(pPlayerDBBaseInfo, 0); //SpeedCoin

			len = pPlayerDBBaseInfo - pTeamPlayerInfo;
			Set16(pTeamPlayerInfo, (WORD)len);
			pTeamPlayerInfo += len;
		}
		{ //PlayerGuildInfo
			BYTE* pPlayerGuildInfo = pTeamPlayerInfo;
			Write16(pPlayerGuildInfo, 0); //len

			WriteString(pPlayerGuildInfo, 0); //GuildName[]
			Write16(pPlayerGuildInfo, 0); //Duty
			Write32(pPlayerGuildInfo, 0); //GuildID
			Write32(pPlayerGuildInfo, 0); //Right
			Write32(pPlayerGuildInfo, 0); //Medal
			Write32(pPlayerGuildInfo, 0); //Contribute
			WriteString(pPlayerGuildInfo, 0); //DutyTitle[]

			len = pPlayerGuildInfo - pTeamPlayerInfo;
			Set16(pTeamPlayerInfo, (WORD)len);
			pTeamPlayerInfo += len;
		}
		{ //PlayerRelationInfo
			BYTE* pPlayerRelationInfo = pTeamPlayerInfo;
			Write16(pPlayerRelationInfo, 0); //len

			Write32(pPlayerRelationInfo, 0); //SrcUin
			Write32(pPlayerRelationInfo, 0); //RelationFlag
			Write32(pPlayerRelationInfo, 0); //RelationUin
			WriteString(pPlayerRelationInfo, 0); //RelationNickName[]
			Write32(pPlayerRelationInfo, 0); //EngageTime
			Write32(pPlayerRelationInfo, 0); //NextCanBookingTimeLimit
			Write32(pPlayerRelationInfo, 0); //BeginHoneyMoonTime
			Write32(pPlayerRelationInfo, 0); //EndHoneyMoonTime
			Write8(pPlayerRelationInfo, 0); //EngageFlag

			len = pPlayerRelationInfo - pTeamPlayerInfo;
			Set16(pTeamPlayerInfo, (WORD)len);
			pTeamPlayerInfo += len;
		}
		WriteUn(pTeamPlayerInfo, 0); //EquipedItemNum
		for (size_t i = 0; i < n; i++)
		{ //PlayerItemInfo
			BYTE* pPlayerItemInfo = pTeamPlayerInfo;
			Write16(pPlayerItemInfo, 0); //len

			Write32(pPlayerItemInfo, 0); //ItemID
			Write32(pPlayerItemInfo, 0); //ItemNum
			Write32(pPlayerItemInfo, 0); //AvailPeriod
			Write8(pPlayerItemInfo, 0); //Status
			WriteUn(pPlayerItemInfo, 0); //ObtainTime
			Write32(pPlayerItemInfo, 0); //OtherAttribute
			Write16(pPlayerItemInfo, 0); //ItemType

			len = pPlayerItemInfo - pTeamPlayerInfo;
			Set16(pTeamPlayerInfo, (WORD)len);
			pTeamPlayerInfo += len;
		}
		WriteUn(pTeamPlayerInfo, 0); //PetNum
		for (size_t i = 0; i < n; i++)
		{ //PetInfo
			BYTE* pPetInfo = pTeamPlayerInfo;
			Write16(pPetInfo, 0); //len

			Write32(pPetInfo, 0); //Uin
			Write32(pPetInfo, 0); //PetId
			WriteString(pPetInfo, 0); //PetName[]
			Write8(pPetInfo, 0); //IsProper
			Write16(pPetInfo, 0); //Level
			Write8(pPetInfo, 0); //Status
			Write16(pPetInfo, 0); //PetSkillNum
			for (size_t i = 0; i < n; i++)
			{ //PetSkillList
				BYTE* pPetSkillList = pPetInfo;
				Write16(pPetSkillList, 0); //len

				Write16(pPetSkillList, 0); //SkillID
				Write8(pPetSkillList, 0); //Status
				Write8(pPetSkillList, 0); //Active
				Write32(pPetSkillList, 0); //Value

				len = pPetSkillList - pPetInfo;
				Set16(pPetInfo, (WORD)len);
				pPetInfo += len;
			}
			Write32(pPetInfo, 0); //StrengLevel
			Write8(pPetInfo, 0); //TopStatus
			{ //CommonInfo
				BYTE* pCommonInfo = pPetInfo;
				Write16(pCommonInfo, 0); //len

				Write32(pCommonInfo, 0); //HuanHuaLevel
				Write8(pCommonInfo, 0); //CanHuanHua

				len = pCommonInfo - pPetInfo;
				Set16(pPetInfo, (WORD)len);
				pPetInfo += len;
			}
			Write16(pPetInfo, 0); //PKStar
			Write32(pPetInfo, 0); //PetSkinID

			len = pPetInfo - pTeamPlayerInfo;
			Set16(pTeamPlayerInfo, (WORD)len);
			pTeamPlayerInfo += len;
		}
		WriteUn(pTeamPlayerInfo, 0); //KartNum
		for (size_t i = 0; i < n; i++)
		{ //KartRefitInfo
			BYTE* pKartRefitInfo = pTeamPlayerInfo;
			Write16(pKartRefitInfo, 0); //len

			Write32(pKartRefitInfo, 0); //Uin
			Write32(pKartRefitInfo, 0); //KartId
			Write32(pKartRefitInfo, 0); //RefitCout
			Write16(pKartRefitInfo, 0); //MaxFlags
			Write16(pKartRefitInfo, 0); //WWeight
			Write16(pKartRefitInfo, 0); //SpeedWeight
			Write16(pKartRefitInfo, 0); //JetWeight
			Write16(pKartRefitInfo, 0); //SJetWeight
			Write16(pKartRefitInfo, 0); //AccuWeight
			Write32(pKartRefitInfo, 0); //ShapeRefitCount
			Write32(pKartRefitInfo, 0); //KartHeadRefitItemID
			Write32(pKartRefitInfo, 0); //KartTailRefitItemID
			Write32(pKartRefitInfo, 0); //KartFlankRefitItemID
			Write32(pKartRefitInfo, 0); //KartTireRefitItemID
			Write32(pKartRefitInfo, 0); //SecondRefitCount
			Write16(pKartRefitInfo, 0); //Speed2Weight
			Write16(pKartRefitInfo, 0); //DriftVecWeight
			Write16(pKartRefitInfo, 0); //AdditionalZSpeedWeight
			Write16(pKartRefitInfo, 0); //AntiCollisionWeight
			Write16(pKartRefitInfo, 0); //LuckyValue
			Write16(pKartRefitInfo, 0); //RefitLuckyValueMaxWeight
			Write32(pKartRefitInfo, 0); //ShapeSuitID
			Write8(pKartRefitInfo, 0); //LegendSuitLevel
			Write32(pKartRefitInfo, 0); //LegendSuitLevelChoice
			Write32(pKartRefitInfo, 0); //ShapeLegendSuitID

			len = pKartRefitInfo - pTeamPlayerInfo;
			Set16(pTeamPlayerInfo, (WORD)len);
			pTeamPlayerInfo += len;
		}
		WriteUn(pTeamPlayerInfo, 0); //VipFlag
		{ //NobleInfo
			BYTE* pNobleInfo = pTeamPlayerInfo;
			Write16(pNobleInfo, 0); //len

			Write32(pNobleInfo, 0); //NobleID
			Write8(pNobleInfo, 0); //NobleLevel
			Write32(pNobleInfo, 0); //NoblePoint
			Write32(pNobleInfo, 0); //NobleLeftDays

			len = pNobleInfo - pTeamPlayerInfo;
			Set16(pTeamPlayerInfo, (WORD)len);
			pTeamPlayerInfo += len;
		}
		{ //GuildVipBaseInfo
			BYTE* pGuildVipBaseInfo = pTeamPlayerInfo;
			Write16(pGuildVipBaseInfo, 0); //len

			Write8(pGuildVipBaseInfo, 0); //GuildVipLevel
			Write32(pGuildVipBaseInfo, 0); //GuildVipPoint

			len = pGuildVipBaseInfo - pTeamPlayerInfo;
			Set16(pTeamPlayerInfo, (WORD)len);
			pTeamPlayerInfo += len;
		}
		Write8(pTeamPlayerInfo, 0); //HasLoverVip
		for (size_t i = 0; i < n; i++)
		{ //LoverVipInfo
			BYTE* pLoverVipInfo = pTeamPlayerInfo;
			Write16(pLoverVipInfo, 0); //len

			Write8(pLoverVipInfo, 0); //LoverVipLevel
			Write32(pLoverVipInfo, 0); //LoverVipPoint
			Write8(pLoverVipInfo, 0); //GrowRate

			len = pLoverVipInfo - pTeamPlayerInfo;
			Set16(pTeamPlayerInfo, (WORD)len);
			pTeamPlayerInfo += len;
		}
		Write8(pTeamPlayerInfo, 0); //GardenLevel
		{ //EmperorInfo
			BYTE* pEmperorInfo = pTeamPlayerInfo;
			Write16(pEmperorInfo, 0); //len

			Write8(pEmperorInfo, 0); //EmperorLevel
			Write32(pEmperorInfo, 0); //EmperorPoint
			Write32(pEmperorInfo, 0); //EmperorLeftDays
			Write8(pEmperorInfo, 0); //EmperorGrowRate

			len = pEmperorInfo - pTeamPlayerInfo;
			Set16(pTeamPlayerInfo, (WORD)len);
			pTeamPlayerInfo += len;
		}
		{ //ConsumeVipInfo
			BYTE* pConsumeVipInfo = pTeamPlayerInfo;
			Write16(pConsumeVipInfo, 0); //len

			WriteUn(pConsumeVipInfo, 0); //VipLevel
			WriteUn(pConsumeVipInfo, 0); //CharmValueOfMonth
			WriteUn(pConsumeVipInfo, 0); //SearchTreasureNums
			WriteUn(pConsumeVipInfo, 0); //GetTreasureNums

			len = pConsumeVipInfo - pTeamPlayerInfo;
			Set16(pTeamPlayerInfo, (WORD)len);
			pTeamPlayerInfo += len;
		}

		len = pTeamPlayerInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 192, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyGuildMatchInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //GuildID
	Write32(p, 0); //TotalPoint
	Write32(p, 0); //WinNum
	Write32(p, 0); //TotalNum

	len = p - buf;
	SendToClient(Client, 591, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyGuildOneMemberMatchInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //DstUin
	Write32(p, 0); //SelfPoint
	Write32(p, 0); //WinNum
	Write32(p, 0); //TotalNum

	len = p - buf;
	SendToClient(Client, 592, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyJoinTeam(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Score
	{ //TeamPlayerInfo
		BYTE* pTeamPlayerInfo = p;
		Write16(pTeamPlayerInfo, 0); //len

		Write32(pTeamPlayerInfo, 0); //Uin
		Write32(pTeamPlayerInfo, 0); //Identity
		WriteUn(pTeamPlayerInfo, 0); //PlayerID
		Write8(pTeamPlayerInfo, 0); //ReadyInRoom
		{ //PlayerDBBaseInfo
			BYTE* pPlayerDBBaseInfo = pTeamPlayerInfo;
			Write16(pPlayerDBBaseInfo, 0); //len

			WriteString(pPlayerDBBaseInfo, 0); //NickName[]
			Write8(pPlayerDBBaseInfo, 0); //Gender
			Write8(pPlayerDBBaseInfo, 0); //Country
			Write32(pPlayerDBBaseInfo, 0); //License
			WriteUn(pPlayerDBBaseInfo, 0); //Experience
			Write32(pPlayerDBBaseInfo, 0); //SuperMoney
			Write32(pPlayerDBBaseInfo, 0); //Money
			WriteUn(pPlayerDBBaseInfo, 0); //WinNum
			Write32(pPlayerDBBaseInfo, 0); //SecondNum
			Write32(pPlayerDBBaseInfo, 0); //ThirdNum
			WriteUn(pPlayerDBBaseInfo, 0); //TotalNum
			Write32(pPlayerDBBaseInfo, 0); //CurHonor
			Write32(pPlayerDBBaseInfo, 0); //TotalHonor
			Write32(pPlayerDBBaseInfo, 0); //TodayHonor
			Write32(pPlayerDBBaseInfo, 0); //RelaxTime
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationBefore
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationCur
			Write32(pPlayerDBBaseInfo, 0); //Charm
			Write32(pPlayerDBBaseInfo, 0); //DurationGame
			Write32(pPlayerDBBaseInfo, 0); //DanceExp
			Write32(pPlayerDBBaseInfo, 0); //Coupons
			Write32(pPlayerDBBaseInfo, 0); //Admiration
			Write32(pPlayerDBBaseInfo, 0); //LuckMoney
			Write32(pPlayerDBBaseInfo, 0); //TeamWorkExp
			Write32(pPlayerDBBaseInfo, 0); //AchievePoint
			Write32(pPlayerDBBaseInfo, 0); //RegTime
			WriteString(pPlayerDBBaseInfo, 0); //Signature[]
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchPoint
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchNum
			Write16(pPlayerDBBaseInfo, 0); //LuckyMatchFirstNum
			Write8(pPlayerDBBaseInfo, 0); //LuckyMatchBestRand
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchWinNum
			Write32(pPlayerDBBaseInfo, 0); //FizzPointTotal
			Write16(pPlayerDBBaseInfo, 0); //FizzPointDaily
			Write16(pPlayerDBBaseInfo, 0); //FizzPointWeekly
			Write16(pPlayerDBBaseInfo, 0); //FizzPointLastWeek
			Write8(pPlayerDBBaseInfo, 0); //FizzLotteryStatus
			Write32(pPlayerDBBaseInfo, 0); //FizzLastUpdateTime
			Write32(pPlayerDBBaseInfo, 0); //SNSLocaleCode
			Write32(pPlayerDBBaseInfo, 0); //AuctionRightUnlockTime
			Write8(pPlayerDBBaseInfo, 0); //ReserveFlag
			Write32(pPlayerDBBaseInfo, 0); //CurConsumeScore
			Write32(pPlayerDBBaseInfo, 0); //HistoryConsumeScore
			Write8(pPlayerDBBaseInfo, 0); //CrashModeSponsorID
			Write32(pPlayerDBBaseInfo, 0); //Popularity
			Write32(pPlayerDBBaseInfo, 0); //LadderMatchAchievePoint
			Write32(pPlayerDBBaseInfo, 0); //Cash
			Write32(pPlayerDBBaseInfo, 0); //PlayerGPMIdentity
			Write32(pPlayerDBBaseInfo, 0); //PointTotalScore
			WriteUn(pPlayerDBBaseInfo, 0); //totalMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //lastMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalSeasonId
			WriteUn(pPlayerDBBaseInfo, 0); //lastClearMapMedalTime
			WriteUn(pPlayerDBBaseInfo, 0); //max2048Score
			WriteUn(pPlayerDBBaseInfo, 0); //curPlay2048LeftNum
			Write32(pPlayerDBBaseInfo, 0); //CheerValue
			Write16(pPlayerDBBaseInfo, 0); //SeasonID
			Write32(pPlayerDBBaseInfo, 0); //LastCheerValue
			Write32(pPlayerDBBaseInfo, 0); //SpeedBean
			Write32(pPlayerDBBaseInfo, 0); //SpeedCoin

			len = pPlayerDBBaseInfo - pTeamPlayerInfo;
			Set16(pTeamPlayerInfo, (WORD)len);
			pTeamPlayerInfo += len;
		}
		{ //PlayerGuildInfo
			BYTE* pPlayerGuildInfo = pTeamPlayerInfo;
			Write16(pPlayerGuildInfo, 0); //len

			WriteString(pPlayerGuildInfo, 0); //GuildName[]
			Write16(pPlayerGuildInfo, 0); //Duty
			Write32(pPlayerGuildInfo, 0); //GuildID
			Write32(pPlayerGuildInfo, 0); //Right
			Write32(pPlayerGuildInfo, 0); //Medal
			Write32(pPlayerGuildInfo, 0); //Contribute
			WriteString(pPlayerGuildInfo, 0); //DutyTitle[]

			len = pPlayerGuildInfo - pTeamPlayerInfo;
			Set16(pTeamPlayerInfo, (WORD)len);
			pTeamPlayerInfo += len;
		}
		{ //PlayerRelationInfo
			BYTE* pPlayerRelationInfo = pTeamPlayerInfo;
			Write16(pPlayerRelationInfo, 0); //len

			Write32(pPlayerRelationInfo, 0); //SrcUin
			Write32(pPlayerRelationInfo, 0); //RelationFlag
			Write32(pPlayerRelationInfo, 0); //RelationUin
			WriteString(pPlayerRelationInfo, 0); //RelationNickName[]
			Write32(pPlayerRelationInfo, 0); //EngageTime
			Write32(pPlayerRelationInfo, 0); //NextCanBookingTimeLimit
			Write32(pPlayerRelationInfo, 0); //BeginHoneyMoonTime
			Write32(pPlayerRelationInfo, 0); //EndHoneyMoonTime
			Write8(pPlayerRelationInfo, 0); //EngageFlag

			len = pPlayerRelationInfo - pTeamPlayerInfo;
			Set16(pTeamPlayerInfo, (WORD)len);
			pTeamPlayerInfo += len;
		}
		WriteUn(pTeamPlayerInfo, 0); //EquipedItemNum
		for (size_t i = 0; i < n; i++)
		{ //PlayerItemInfo
			BYTE* pPlayerItemInfo = pTeamPlayerInfo;
			Write16(pPlayerItemInfo, 0); //len

			Write32(pPlayerItemInfo, 0); //ItemID
			Write32(pPlayerItemInfo, 0); //ItemNum
			Write32(pPlayerItemInfo, 0); //AvailPeriod
			Write8(pPlayerItemInfo, 0); //Status
			WriteUn(pPlayerItemInfo, 0); //ObtainTime
			Write32(pPlayerItemInfo, 0); //OtherAttribute
			Write16(pPlayerItemInfo, 0); //ItemType

			len = pPlayerItemInfo - pTeamPlayerInfo;
			Set16(pTeamPlayerInfo, (WORD)len);
			pTeamPlayerInfo += len;
		}
		WriteUn(pTeamPlayerInfo, 0); //PetNum
		for (size_t i = 0; i < n; i++)
		{ //PetInfo
			BYTE* pPetInfo = pTeamPlayerInfo;
			Write16(pPetInfo, 0); //len

			Write32(pPetInfo, 0); //Uin
			Write32(pPetInfo, 0); //PetId
			WriteString(pPetInfo, 0); //PetName[]
			Write8(pPetInfo, 0); //IsProper
			Write16(pPetInfo, 0); //Level
			Write8(pPetInfo, 0); //Status
			Write16(pPetInfo, 0); //PetSkillNum
			for (size_t i = 0; i < n; i++)
			{ //PetSkillList
				BYTE* pPetSkillList = pPetInfo;
				Write16(pPetSkillList, 0); //len

				Write16(pPetSkillList, 0); //SkillID
				Write8(pPetSkillList, 0); //Status
				Write8(pPetSkillList, 0); //Active
				Write32(pPetSkillList, 0); //Value

				len = pPetSkillList - pPetInfo;
				Set16(pPetInfo, (WORD)len);
				pPetInfo += len;
			}
			Write32(pPetInfo, 0); //StrengLevel
			Write8(pPetInfo, 0); //TopStatus
			{ //CommonInfo
				BYTE* pCommonInfo = pPetInfo;
				Write16(pCommonInfo, 0); //len

				Write32(pCommonInfo, 0); //HuanHuaLevel
				Write8(pCommonInfo, 0); //CanHuanHua

				len = pCommonInfo - pPetInfo;
				Set16(pPetInfo, (WORD)len);
				pPetInfo += len;
			}
			Write16(pPetInfo, 0); //PKStar
			Write32(pPetInfo, 0); //PetSkinID

			len = pPetInfo - pTeamPlayerInfo;
			Set16(pTeamPlayerInfo, (WORD)len);
			pTeamPlayerInfo += len;
		}
		WriteUn(pTeamPlayerInfo, 0); //KartNum
		for (size_t i = 0; i < n; i++)
		{ //KartRefitInfo
			BYTE* pKartRefitInfo = pTeamPlayerInfo;
			Write16(pKartRefitInfo, 0); //len

			Write32(pKartRefitInfo, 0); //Uin
			Write32(pKartRefitInfo, 0); //KartId
			Write32(pKartRefitInfo, 0); //RefitCout
			Write16(pKartRefitInfo, 0); //MaxFlags
			Write16(pKartRefitInfo, 0); //WWeight
			Write16(pKartRefitInfo, 0); //SpeedWeight
			Write16(pKartRefitInfo, 0); //JetWeight
			Write16(pKartRefitInfo, 0); //SJetWeight
			Write16(pKartRefitInfo, 0); //AccuWeight
			Write32(pKartRefitInfo, 0); //ShapeRefitCount
			Write32(pKartRefitInfo, 0); //KartHeadRefitItemID
			Write32(pKartRefitInfo, 0); //KartTailRefitItemID
			Write32(pKartRefitInfo, 0); //KartFlankRefitItemID
			Write32(pKartRefitInfo, 0); //KartTireRefitItemID
			Write32(pKartRefitInfo, 0); //SecondRefitCount
			Write16(pKartRefitInfo, 0); //Speed2Weight
			Write16(pKartRefitInfo, 0); //DriftVecWeight
			Write16(pKartRefitInfo, 0); //AdditionalZSpeedWeight
			Write16(pKartRefitInfo, 0); //AntiCollisionWeight
			Write16(pKartRefitInfo, 0); //LuckyValue
			Write16(pKartRefitInfo, 0); //RefitLuckyValueMaxWeight
			Write32(pKartRefitInfo, 0); //ShapeSuitID
			Write8(pKartRefitInfo, 0); //LegendSuitLevel
			Write32(pKartRefitInfo, 0); //LegendSuitLevelChoice
			Write32(pKartRefitInfo, 0); //ShapeLegendSuitID

			len = pKartRefitInfo - pTeamPlayerInfo;
			Set16(pTeamPlayerInfo, (WORD)len);
			pTeamPlayerInfo += len;
		}
		WriteUn(pTeamPlayerInfo, 0); //VipFlag
		{ //NobleInfo
			BYTE* pNobleInfo = pTeamPlayerInfo;
			Write16(pNobleInfo, 0); //len

			Write32(pNobleInfo, 0); //NobleID
			Write8(pNobleInfo, 0); //NobleLevel
			Write32(pNobleInfo, 0); //NoblePoint
			Write32(pNobleInfo, 0); //NobleLeftDays

			len = pNobleInfo - pTeamPlayerInfo;
			Set16(pTeamPlayerInfo, (WORD)len);
			pTeamPlayerInfo += len;
		}
		{ //GuildVipBaseInfo
			BYTE* pGuildVipBaseInfo = pTeamPlayerInfo;
			Write16(pGuildVipBaseInfo, 0); //len

			Write8(pGuildVipBaseInfo, 0); //GuildVipLevel
			Write32(pGuildVipBaseInfo, 0); //GuildVipPoint

			len = pGuildVipBaseInfo - pTeamPlayerInfo;
			Set16(pTeamPlayerInfo, (WORD)len);
			pTeamPlayerInfo += len;
		}
		Write8(pTeamPlayerInfo, 0); //HasLoverVip
		for (size_t i = 0; i < n; i++)
		{ //LoverVipInfo
			BYTE* pLoverVipInfo = pTeamPlayerInfo;
			Write16(pLoverVipInfo, 0); //len

			Write8(pLoverVipInfo, 0); //LoverVipLevel
			Write32(pLoverVipInfo, 0); //LoverVipPoint
			Write8(pLoverVipInfo, 0); //GrowRate

			len = pLoverVipInfo - pTeamPlayerInfo;
			Set16(pTeamPlayerInfo, (WORD)len);
			pTeamPlayerInfo += len;
		}
		Write8(pTeamPlayerInfo, 0); //GardenLevel
		{ //EmperorInfo
			BYTE* pEmperorInfo = pTeamPlayerInfo;
			Write16(pEmperorInfo, 0); //len

			Write8(pEmperorInfo, 0); //EmperorLevel
			Write32(pEmperorInfo, 0); //EmperorPoint
			Write32(pEmperorInfo, 0); //EmperorLeftDays
			Write8(pEmperorInfo, 0); //EmperorGrowRate

			len = pEmperorInfo - pTeamPlayerInfo;
			Set16(pTeamPlayerInfo, (WORD)len);
			pTeamPlayerInfo += len;
		}
		{ //ConsumeVipInfo
			BYTE* pConsumeVipInfo = pTeamPlayerInfo;
			Write16(pConsumeVipInfo, 0); //len

			WriteUn(pConsumeVipInfo, 0); //VipLevel
			WriteUn(pConsumeVipInfo, 0); //CharmValueOfMonth
			WriteUn(pConsumeVipInfo, 0); //SearchTreasureNums
			WriteUn(pConsumeVipInfo, 0); //GetTreasureNums

			len = pConsumeVipInfo - pTeamPlayerInfo;
			Set16(pTeamPlayerInfo, (WORD)len);
			pTeamPlayerInfo += len;
		}

		len = pTeamPlayerInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 611, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestRemoveTeamMember(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT DstUin = Read32(p);

}

void ResponseRemoveTeamMember(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 193, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestQuitTeam(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseQuitTeam(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 194, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyQuitTeam(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //NewLeaderUin

	len = p - buf;
	SendToClient(Client, 612, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetTeamList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT StartIdx = Read32(p);
	UINT TeamCount = Read32(p);
	bool Range = Read8(p);
	int Score1 = Read32(p);
	int Score2 = Read32(p);

}

void ResponseGetTeamList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //GuildScore
	Write32(p, 0); //StartIdx
	Write32(p, 0); //TeamCount
	for (size_t i = 0; i < n; i++)
	{ //TeamInfo
		BYTE* pTeamInfo = p;
		Write16(pTeamInfo, 0); //len

		Write32(pTeamInfo, 0); //TeamID
		Write32(pTeamInfo, 0); //GuildScore
		WriteString(pTeamInfo, 0); //GuildName[]
		WriteString(pTeamInfo, 0); //LeaderName[]

		len = pTeamInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 195, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetTeamListByGuildName(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	char[] GuildName[] = ReadString(p);

}

void ResponseGetTeamListByGuildName(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //GuildScore
	WriteString(p, 0); //GuildName[]
	Write32(p, 0); //TeamCount
	for (size_t i = 0; i < n; i++)
	{ //TeamInfo
		BYTE* pTeamInfo = p;
		Write16(pTeamInfo, 0); //len

		Write32(pTeamInfo, 0); //TeamID
		Write32(pTeamInfo, 0); //GuildScore
		WriteString(pTeamInfo, 0); //GuildName[]
		WriteString(pTeamInfo, 0); //LeaderName[]

		len = pTeamInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 198, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetTeamMemeberList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int TeamID = Read32(p);

}

void ResponseGetTeamMemeberList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //TeamID
	Write32(p, 0); //MemberCount
	for (size_t i = 0; i < n; i++)
	{ //FriendBaseInfo
		BYTE* pFriendBaseInfo = p;
		Write16(pFriendBaseInfo, 0); //len

		WriteUn(pFriendBaseInfo, 0); //Uin
		WriteString(pFriendBaseInfo, 0); //NickName[]
		Write8(pFriendBaseInfo, 0); //Gender
		WriteUn(pFriendBaseInfo, 0); //Identity
		Write8(pFriendBaseInfo, 0); //IsOnLine
		WriteUn(pFriendBaseInfo, 0); //Experience
		Write32(pFriendBaseInfo, 0); //License
		Write32(pFriendBaseInfo, 0); //TotalHonor
		Write32(pFriendBaseInfo, 0); //Charm
		Write32(pFriendBaseInfo, 0); //DanceExp
		Write32(pFriendBaseInfo, 0); //Admiration
		Write32(pFriendBaseInfo, 0); //TeamWorkExp
		WriteString(pFriendBaseInfo, 0); //Signature[]
		WriteUn(pFriendBaseInfo, 0); //VipFlag
		Write32(pFriendBaseInfo, 0); //LocaleCode
		Write8(pFriendBaseInfo, 0); //HaveAppellation
		for (size_t i = 0; i < n; i++)
		{ //CurAppellation
			BYTE* pCurAppellation = pFriendBaseInfo;
			Write16(pCurAppellation, 0); //len

			Write8(pCurAppellation, 0); //Type
			Write8(pCurAppellation, 0); //Level
			Write8(pCurAppellation, 0); //Status
			Write8(pCurAppellation, 0); //Difficulty
			Write32(pCurAppellation, 0); //MapId
			Write32(pCurAppellation, 0); //Value

			len = pCurAppellation - pFriendBaseInfo;
			Set16(pFriendBaseInfo, (WORD)len);
			pFriendBaseInfo += len;
		}
		{ //NobleInfo
			BYTE* pNobleInfo = pFriendBaseInfo;
			Write16(pNobleInfo, 0); //len

			Write32(pNobleInfo, 0); //NobleID
			Write8(pNobleInfo, 0); //NobleLevel
			Write32(pNobleInfo, 0); //NoblePoint
			Write32(pNobleInfo, 0); //NobleLeftDays

			len = pNobleInfo - pFriendBaseInfo;
			Set16(pFriendBaseInfo, (WORD)len);
			pFriendBaseInfo += len;
		}
		Write8(pFriendBaseInfo, 0); //HasWizard
		{ //GuildVipBaseInfo
			BYTE* pGuildVipBaseInfo = pFriendBaseInfo;
			Write16(pGuildVipBaseInfo, 0); //len

			Write8(pGuildVipBaseInfo, 0); //GuildVipLevel
			Write32(pGuildVipBaseInfo, 0); //GuildVipPoint

			len = pGuildVipBaseInfo - pFriendBaseInfo;
			Set16(pFriendBaseInfo, (WORD)len);
			pFriendBaseInfo += len;
		}
		Write8(pFriendBaseInfo, 0); //HasLDMInfo
		for (size_t i = 0; i < n; i++)
		{ //LDMInfo
			BYTE* pLDMInfo = pFriendBaseInfo;
			Write16(pLDMInfo, 0); //len

			Write8(pLDMInfo, 0); //Grade
			Write32(pLDMInfo, 0); //Score
			Write32(pLDMInfo, 0); //MaxScore
			Write32(pLDMInfo, 0); //MaxGrade

			len = pLDMInfo - pFriendBaseInfo;
			Set16(pFriendBaseInfo, (WORD)len);
			pFriendBaseInfo += len;
		}
		Write8(pFriendBaseInfo, 0); //HasLoverVip
		for (size_t i = 0; i < n; i++)
		{ //LoverVipInfo
			BYTE* pLoverVipInfo = pFriendBaseInfo;
			Write16(pLoverVipInfo, 0); //len

			Write8(pLoverVipInfo, 0); //LoverVipLevel
			Write32(pLoverVipInfo, 0); //LoverVipPoint
			Write8(pLoverVipInfo, 0); //GrowRate

			len = pLoverVipInfo - pFriendBaseInfo;
			Set16(pFriendBaseInfo, (WORD)len);
			pFriendBaseInfo += len;
		}
		Write32(pFriendBaseInfo, 0); //MaxDayPveScore
		Write32(pFriendBaseInfo, 0); //MaxHistoryPveScore
		WriteUn(pFriendBaseInfo, 0); //totalMapMedalNum
		Write32(pFriendBaseInfo, 0); //ChumCircleID
		Write8(pFriendBaseInfo, 0); //GardenLevel
		{ //EmperorInfo
			BYTE* pEmperorInfo = pFriendBaseInfo;
			Write16(pEmperorInfo, 0); //len

			Write8(pEmperorInfo, 0); //EmperorLevel
			Write32(pEmperorInfo, 0); //EmperorPoint
			Write32(pEmperorInfo, 0); //EmperorLeftDays
			Write8(pEmperorInfo, 0); //EmperorGrowRate

			len = pEmperorInfo - pFriendBaseInfo;
			Set16(pFriendBaseInfo, (WORD)len);
			pFriendBaseInfo += len;
		}
		Write8(pFriendBaseInfo, 0); //GardenPrivateType
		{ //ConsumeVipInfo
			BYTE* pConsumeVipInfo = pFriendBaseInfo;
			Write16(pConsumeVipInfo, 0); //len

			WriteUn(pConsumeVipInfo, 0); //VipLevel
			WriteUn(pConsumeVipInfo, 0); //CharmValueOfMonth
			WriteUn(pConsumeVipInfo, 0); //SearchTreasureNums
			WriteUn(pConsumeVipInfo, 0); //GetTreasureNums

			len = pConsumeVipInfo - pFriendBaseInfo;
			Set16(pFriendBaseInfo, (WORD)len);
			pFriendBaseInfo += len;
		}
		Write8(pFriendBaseInfo, 0); //IsHelperAppOnline
		Write8(pFriendBaseInfo, 0); //AreaID
		Write8(pFriendBaseInfo, 0); //HasRankedMatchInfo
		for (size_t i = 0; i < n; i++)
		{ //RankedMatchGradeInfo
			BYTE* pRankedMatchGradeInfo = pFriendBaseInfo;
			Write16(pRankedMatchGradeInfo, 0); //len

			Write32(pRankedMatchGradeInfo, 0); //GradeLevel
			Write32(pRankedMatchGradeInfo, 0); //ChildLevel
			Write32(pRankedMatchGradeInfo, 0); //GradeScore
			Write32(pRankedMatchGradeInfo, 0); //MaxGradeScore
			Write32(pRankedMatchGradeInfo, 0); //TotalScore

			len = pRankedMatchGradeInfo - pFriendBaseInfo;
			Set16(pFriendBaseInfo, (WORD)len);
			pFriendBaseInfo += len;
		}
		Write8(pFriendBaseInfo, 0); //ActiveStatus
		Write32(pFriendBaseInfo, 0); //HelperLev

		len = pFriendBaseInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 196, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestTeamInvitePlayer(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT DstUin = Read32(p);

}

void ResponseTeamInvitePlayer(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //DstUin
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 197, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyBeTeamInvited(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //SrcUin
	WriteString(p, 0); //SrcNickName[]
	Write32(p, 0); //DstUin
	Write32(p, 0); //ServerID
	Write32(p, 0); //TeamID

	len = p - buf;
	SendToClient(Client, 613, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestTransferPropEffect(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	{ //PropEffect
		BYTE* pPropEffect = p;
		len = Read16(pPropEffect);

		int PropID = Read32(pPropEffect);
		int PropIdx = Read32(pPropEffect);
		UINT DstUin = Read32(pPropEffect);
		UINT SrcUin = Read32(pPropEffect);
		int GPID = Read32(pPropEffect);
		int SubGP = Read32(pPropEffect);

		p += len;
	}

}

void NotifyTransferPropEffect(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	{ //PropEffect
		BYTE* pPropEffect = p;
		Write16(pPropEffect, 0); //len

		Write32(pPropEffect, 0); //PropID
		Write32(pPropEffect, 0); //PropIdx
		Write32(pPropEffect, 0); //DstUin
		Write32(pPropEffect, 0); //SrcUin
		Write32(pPropEffect, 0); //GPID
		Write32(pPropEffect, 0); //SubGP

		len = pPropEffect - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 204, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestCreateTeamRoom(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	short GameMode = Read16(p);
	char[] RoomName[] = ReadString(p);
	int MapID = Read32(p);
	int CarID = Read32(p);
	bool Flag = Read8(p);
	char[] Password[] = ReadString(p);

}

void ResponseCreateTeamRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 211, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyCreateTeamRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //GameMode
	WriteString(p, 0); //RoomName[]
	Write32(p, 0); //MapID
	Write32(p, 0); //CarID
	Write32(p, 0); //RoomOwnerUin
	Write8(p, 0); //RoomType
	Write32(p, 0); //PreKnowMapID

	len = p - buf;
	SendToClient(Client, 623, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestEnterTeamRoom(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	Un Time = ReadUn(p);
	short RoomID = Read16(p);
	char[] Password[] = ReadString(p);
	UINT InviteUin = Read32(p);

}

void ResponseEnterTeamRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 212, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyRoomAndOtherTeamInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //GameMode
	WriteString(p, 0); //RoomName[]
	Write32(p, 0); //MapID
	Write32(p, 0); //CarID
	Write32(p, 0); //RoomOwnerUin
	Write8(p, 0); //RoomType
	Write16(p, 0); //GameScore
	Write8(p, 0); //MasterTeam
	WriteUn(p, 0); //MemberNum
	for (size_t i = 0; i < n; i++)
	{ //MemberInfo
		BYTE* pMemberInfo = p;
		Write16(pMemberInfo, 0); //len

		Write32(pMemberInfo, 0); //Uin
		Write32(pMemberInfo, 0); //Identity
		WriteUn(pMemberInfo, 0); //PlayerID
		Write8(pMemberInfo, 0); //ReadyInRoom
		{ //PlayerDBBaseInfo
			BYTE* pPlayerDBBaseInfo = pMemberInfo;
			Write16(pPlayerDBBaseInfo, 0); //len

			WriteString(pPlayerDBBaseInfo, 0); //NickName[]
			Write8(pPlayerDBBaseInfo, 0); //Gender
			Write8(pPlayerDBBaseInfo, 0); //Country
			Write32(pPlayerDBBaseInfo, 0); //License
			WriteUn(pPlayerDBBaseInfo, 0); //Experience
			Write32(pPlayerDBBaseInfo, 0); //SuperMoney
			Write32(pPlayerDBBaseInfo, 0); //Money
			WriteUn(pPlayerDBBaseInfo, 0); //WinNum
			Write32(pPlayerDBBaseInfo, 0); //SecondNum
			Write32(pPlayerDBBaseInfo, 0); //ThirdNum
			WriteUn(pPlayerDBBaseInfo, 0); //TotalNum
			Write32(pPlayerDBBaseInfo, 0); //CurHonor
			Write32(pPlayerDBBaseInfo, 0); //TotalHonor
			Write32(pPlayerDBBaseInfo, 0); //TodayHonor
			Write32(pPlayerDBBaseInfo, 0); //RelaxTime
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationBefore
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationCur
			Write32(pPlayerDBBaseInfo, 0); //Charm
			Write32(pPlayerDBBaseInfo, 0); //DurationGame
			Write32(pPlayerDBBaseInfo, 0); //DanceExp
			Write32(pPlayerDBBaseInfo, 0); //Coupons
			Write32(pPlayerDBBaseInfo, 0); //Admiration
			Write32(pPlayerDBBaseInfo, 0); //LuckMoney
			Write32(pPlayerDBBaseInfo, 0); //TeamWorkExp
			Write32(pPlayerDBBaseInfo, 0); //AchievePoint
			Write32(pPlayerDBBaseInfo, 0); //RegTime
			WriteString(pPlayerDBBaseInfo, 0); //Signature[]
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchPoint
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchNum
			Write16(pPlayerDBBaseInfo, 0); //LuckyMatchFirstNum
			Write8(pPlayerDBBaseInfo, 0); //LuckyMatchBestRand
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchWinNum
			Write32(pPlayerDBBaseInfo, 0); //FizzPointTotal
			Write16(pPlayerDBBaseInfo, 0); //FizzPointDaily
			Write16(pPlayerDBBaseInfo, 0); //FizzPointWeekly
			Write16(pPlayerDBBaseInfo, 0); //FizzPointLastWeek
			Write8(pPlayerDBBaseInfo, 0); //FizzLotteryStatus
			Write32(pPlayerDBBaseInfo, 0); //FizzLastUpdateTime
			Write32(pPlayerDBBaseInfo, 0); //SNSLocaleCode
			Write32(pPlayerDBBaseInfo, 0); //AuctionRightUnlockTime
			Write8(pPlayerDBBaseInfo, 0); //ReserveFlag
			Write32(pPlayerDBBaseInfo, 0); //CurConsumeScore
			Write32(pPlayerDBBaseInfo, 0); //HistoryConsumeScore
			Write8(pPlayerDBBaseInfo, 0); //CrashModeSponsorID
			Write32(pPlayerDBBaseInfo, 0); //Popularity
			Write32(pPlayerDBBaseInfo, 0); //LadderMatchAchievePoint
			Write32(pPlayerDBBaseInfo, 0); //Cash
			Write32(pPlayerDBBaseInfo, 0); //PlayerGPMIdentity
			Write32(pPlayerDBBaseInfo, 0); //PointTotalScore
			WriteUn(pPlayerDBBaseInfo, 0); //totalMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //lastMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalSeasonId
			WriteUn(pPlayerDBBaseInfo, 0); //lastClearMapMedalTime
			WriteUn(pPlayerDBBaseInfo, 0); //max2048Score
			WriteUn(pPlayerDBBaseInfo, 0); //curPlay2048LeftNum
			Write32(pPlayerDBBaseInfo, 0); //CheerValue
			Write16(pPlayerDBBaseInfo, 0); //SeasonID
			Write32(pPlayerDBBaseInfo, 0); //LastCheerValue
			Write32(pPlayerDBBaseInfo, 0); //SpeedBean
			Write32(pPlayerDBBaseInfo, 0); //SpeedCoin

			len = pPlayerDBBaseInfo - pMemberInfo;
			Set16(pMemberInfo, (WORD)len);
			pMemberInfo += len;
		}
		{ //PlayerGuildInfo
			BYTE* pPlayerGuildInfo = pMemberInfo;
			Write16(pPlayerGuildInfo, 0); //len

			WriteString(pPlayerGuildInfo, 0); //GuildName[]
			Write16(pPlayerGuildInfo, 0); //Duty
			Write32(pPlayerGuildInfo, 0); //GuildID
			Write32(pPlayerGuildInfo, 0); //Right
			Write32(pPlayerGuildInfo, 0); //Medal
			Write32(pPlayerGuildInfo, 0); //Contribute
			WriteString(pPlayerGuildInfo, 0); //DutyTitle[]

			len = pPlayerGuildInfo - pMemberInfo;
			Set16(pMemberInfo, (WORD)len);
			pMemberInfo += len;
		}
		{ //PlayerRelationInfo
			BYTE* pPlayerRelationInfo = pMemberInfo;
			Write16(pPlayerRelationInfo, 0); //len

			Write32(pPlayerRelationInfo, 0); //SrcUin
			Write32(pPlayerRelationInfo, 0); //RelationFlag
			Write32(pPlayerRelationInfo, 0); //RelationUin
			WriteString(pPlayerRelationInfo, 0); //RelationNickName[]
			Write32(pPlayerRelationInfo, 0); //EngageTime
			Write32(pPlayerRelationInfo, 0); //NextCanBookingTimeLimit
			Write32(pPlayerRelationInfo, 0); //BeginHoneyMoonTime
			Write32(pPlayerRelationInfo, 0); //EndHoneyMoonTime
			Write8(pPlayerRelationInfo, 0); //EngageFlag

			len = pPlayerRelationInfo - pMemberInfo;
			Set16(pMemberInfo, (WORD)len);
			pMemberInfo += len;
		}
		WriteUn(pMemberInfo, 0); //EquipedItemNum
		for (size_t i = 0; i < n; i++)
		{ //PlayerItemInfo
			BYTE* pPlayerItemInfo = pMemberInfo;
			Write16(pPlayerItemInfo, 0); //len

			Write32(pPlayerItemInfo, 0); //ItemID
			Write32(pPlayerItemInfo, 0); //ItemNum
			Write32(pPlayerItemInfo, 0); //AvailPeriod
			Write8(pPlayerItemInfo, 0); //Status
			WriteUn(pPlayerItemInfo, 0); //ObtainTime
			Write32(pPlayerItemInfo, 0); //OtherAttribute
			Write16(pPlayerItemInfo, 0); //ItemType

			len = pPlayerItemInfo - pMemberInfo;
			Set16(pMemberInfo, (WORD)len);
			pMemberInfo += len;
		}
		WriteUn(pMemberInfo, 0); //PetNum
		for (size_t i = 0; i < n; i++)
		{ //PetInfo
			BYTE* pPetInfo = pMemberInfo;
			Write16(pPetInfo, 0); //len

			Write32(pPetInfo, 0); //Uin
			Write32(pPetInfo, 0); //PetId
			WriteString(pPetInfo, 0); //PetName[]
			Write8(pPetInfo, 0); //IsProper
			Write16(pPetInfo, 0); //Level
			Write8(pPetInfo, 0); //Status
			Write16(pPetInfo, 0); //PetSkillNum
			for (size_t i = 0; i < n; i++)
			{ //PetSkillList
				BYTE* pPetSkillList = pPetInfo;
				Write16(pPetSkillList, 0); //len

				Write16(pPetSkillList, 0); //SkillID
				Write8(pPetSkillList, 0); //Status
				Write8(pPetSkillList, 0); //Active
				Write32(pPetSkillList, 0); //Value

				len = pPetSkillList - pPetInfo;
				Set16(pPetInfo, (WORD)len);
				pPetInfo += len;
			}
			Write32(pPetInfo, 0); //StrengLevel
			Write8(pPetInfo, 0); //TopStatus
			{ //CommonInfo
				BYTE* pCommonInfo = pPetInfo;
				Write16(pCommonInfo, 0); //len

				Write32(pCommonInfo, 0); //HuanHuaLevel
				Write8(pCommonInfo, 0); //CanHuanHua

				len = pCommonInfo - pPetInfo;
				Set16(pPetInfo, (WORD)len);
				pPetInfo += len;
			}
			Write16(pPetInfo, 0); //PKStar
			Write32(pPetInfo, 0); //PetSkinID

			len = pPetInfo - pMemberInfo;
			Set16(pMemberInfo, (WORD)len);
			pMemberInfo += len;
		}
		WriteUn(pMemberInfo, 0); //KartNum
		for (size_t i = 0; i < n; i++)
		{ //KartRefitInfo
			BYTE* pKartRefitInfo = pMemberInfo;
			Write16(pKartRefitInfo, 0); //len

			Write32(pKartRefitInfo, 0); //Uin
			Write32(pKartRefitInfo, 0); //KartId
			Write32(pKartRefitInfo, 0); //RefitCout
			Write16(pKartRefitInfo, 0); //MaxFlags
			Write16(pKartRefitInfo, 0); //WWeight
			Write16(pKartRefitInfo, 0); //SpeedWeight
			Write16(pKartRefitInfo, 0); //JetWeight
			Write16(pKartRefitInfo, 0); //SJetWeight
			Write16(pKartRefitInfo, 0); //AccuWeight
			Write32(pKartRefitInfo, 0); //ShapeRefitCount
			Write32(pKartRefitInfo, 0); //KartHeadRefitItemID
			Write32(pKartRefitInfo, 0); //KartTailRefitItemID
			Write32(pKartRefitInfo, 0); //KartFlankRefitItemID
			Write32(pKartRefitInfo, 0); //KartTireRefitItemID
			Write32(pKartRefitInfo, 0); //SecondRefitCount
			Write16(pKartRefitInfo, 0); //Speed2Weight
			Write16(pKartRefitInfo, 0); //DriftVecWeight
			Write16(pKartRefitInfo, 0); //AdditionalZSpeedWeight
			Write16(pKartRefitInfo, 0); //AntiCollisionWeight
			Write16(pKartRefitInfo, 0); //LuckyValue
			Write16(pKartRefitInfo, 0); //RefitLuckyValueMaxWeight
			Write32(pKartRefitInfo, 0); //ShapeSuitID
			Write8(pKartRefitInfo, 0); //LegendSuitLevel
			Write32(pKartRefitInfo, 0); //LegendSuitLevelChoice
			Write32(pKartRefitInfo, 0); //ShapeLegendSuitID

			len = pKartRefitInfo - pMemberInfo;
			Set16(pMemberInfo, (WORD)len);
			pMemberInfo += len;
		}
		WriteUn(pMemberInfo, 0); //VipFlag
		{ //NobleInfo
			BYTE* pNobleInfo = pMemberInfo;
			Write16(pNobleInfo, 0); //len

			Write32(pNobleInfo, 0); //NobleID
			Write8(pNobleInfo, 0); //NobleLevel
			Write32(pNobleInfo, 0); //NoblePoint
			Write32(pNobleInfo, 0); //NobleLeftDays

			len = pNobleInfo - pMemberInfo;
			Set16(pMemberInfo, (WORD)len);
			pMemberInfo += len;
		}
		{ //GuildVipBaseInfo
			BYTE* pGuildVipBaseInfo = pMemberInfo;
			Write16(pGuildVipBaseInfo, 0); //len

			Write8(pGuildVipBaseInfo, 0); //GuildVipLevel
			Write32(pGuildVipBaseInfo, 0); //GuildVipPoint

			len = pGuildVipBaseInfo - pMemberInfo;
			Set16(pMemberInfo, (WORD)len);
			pMemberInfo += len;
		}
		Write8(pMemberInfo, 0); //HasLoverVip
		for (size_t i = 0; i < n; i++)
		{ //LoverVipInfo
			BYTE* pLoverVipInfo = pMemberInfo;
			Write16(pLoverVipInfo, 0); //len

			Write8(pLoverVipInfo, 0); //LoverVipLevel
			Write32(pLoverVipInfo, 0); //LoverVipPoint
			Write8(pLoverVipInfo, 0); //GrowRate

			len = pLoverVipInfo - pMemberInfo;
			Set16(pMemberInfo, (WORD)len);
			pMemberInfo += len;
		}
		Write8(pMemberInfo, 0); //GardenLevel
		{ //EmperorInfo
			BYTE* pEmperorInfo = pMemberInfo;
			Write16(pEmperorInfo, 0); //len

			Write8(pEmperorInfo, 0); //EmperorLevel
			Write32(pEmperorInfo, 0); //EmperorPoint
			Write32(pEmperorInfo, 0); //EmperorLeftDays
			Write8(pEmperorInfo, 0); //EmperorGrowRate

			len = pEmperorInfo - pMemberInfo;
			Set16(pMemberInfo, (WORD)len);
			pMemberInfo += len;
		}
		{ //ConsumeVipInfo
			BYTE* pConsumeVipInfo = pMemberInfo;
			Write16(pConsumeVipInfo, 0); //len

			WriteUn(pConsumeVipInfo, 0); //VipLevel
			WriteUn(pConsumeVipInfo, 0); //CharmValueOfMonth
			WriteUn(pConsumeVipInfo, 0); //SearchTreasureNums
			WriteUn(pConsumeVipInfo, 0); //GetTreasureNums

			len = pConsumeVipInfo - pMemberInfo;
			Set16(pMemberInfo, (WORD)len);
			pMemberInfo += len;
		}

		len = pMemberInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //PreKnowMapID

	len = p - buf;
	SendToClient(Client, 624, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyTeamInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //GameScore
	WriteUn(p, 0); //MemberNum
	for (size_t i = 0; i < n; i++)
	{ //MemberInfo
		BYTE* pMemberInfo = p;
		Write16(pMemberInfo, 0); //len

		Write32(pMemberInfo, 0); //Uin
		Write32(pMemberInfo, 0); //Identity
		WriteUn(pMemberInfo, 0); //PlayerID
		Write8(pMemberInfo, 0); //ReadyInRoom
		{ //PlayerDBBaseInfo
			BYTE* pPlayerDBBaseInfo = pMemberInfo;
			Write16(pPlayerDBBaseInfo, 0); //len

			WriteString(pPlayerDBBaseInfo, 0); //NickName[]
			Write8(pPlayerDBBaseInfo, 0); //Gender
			Write8(pPlayerDBBaseInfo, 0); //Country
			Write32(pPlayerDBBaseInfo, 0); //License
			WriteUn(pPlayerDBBaseInfo, 0); //Experience
			Write32(pPlayerDBBaseInfo, 0); //SuperMoney
			Write32(pPlayerDBBaseInfo, 0); //Money
			WriteUn(pPlayerDBBaseInfo, 0); //WinNum
			Write32(pPlayerDBBaseInfo, 0); //SecondNum
			Write32(pPlayerDBBaseInfo, 0); //ThirdNum
			WriteUn(pPlayerDBBaseInfo, 0); //TotalNum
			Write32(pPlayerDBBaseInfo, 0); //CurHonor
			Write32(pPlayerDBBaseInfo, 0); //TotalHonor
			Write32(pPlayerDBBaseInfo, 0); //TodayHonor
			Write32(pPlayerDBBaseInfo, 0); //RelaxTime
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationBefore
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationCur
			Write32(pPlayerDBBaseInfo, 0); //Charm
			Write32(pPlayerDBBaseInfo, 0); //DurationGame
			Write32(pPlayerDBBaseInfo, 0); //DanceExp
			Write32(pPlayerDBBaseInfo, 0); //Coupons
			Write32(pPlayerDBBaseInfo, 0); //Admiration
			Write32(pPlayerDBBaseInfo, 0); //LuckMoney
			Write32(pPlayerDBBaseInfo, 0); //TeamWorkExp
			Write32(pPlayerDBBaseInfo, 0); //AchievePoint
			Write32(pPlayerDBBaseInfo, 0); //RegTime
			WriteString(pPlayerDBBaseInfo, 0); //Signature[]
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchPoint
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchNum
			Write16(pPlayerDBBaseInfo, 0); //LuckyMatchFirstNum
			Write8(pPlayerDBBaseInfo, 0); //LuckyMatchBestRand
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchWinNum
			Write32(pPlayerDBBaseInfo, 0); //FizzPointTotal
			Write16(pPlayerDBBaseInfo, 0); //FizzPointDaily
			Write16(pPlayerDBBaseInfo, 0); //FizzPointWeekly
			Write16(pPlayerDBBaseInfo, 0); //FizzPointLastWeek
			Write8(pPlayerDBBaseInfo, 0); //FizzLotteryStatus
			Write32(pPlayerDBBaseInfo, 0); //FizzLastUpdateTime
			Write32(pPlayerDBBaseInfo, 0); //SNSLocaleCode
			Write32(pPlayerDBBaseInfo, 0); //AuctionRightUnlockTime
			Write8(pPlayerDBBaseInfo, 0); //ReserveFlag
			Write32(pPlayerDBBaseInfo, 0); //CurConsumeScore
			Write32(pPlayerDBBaseInfo, 0); //HistoryConsumeScore
			Write8(pPlayerDBBaseInfo, 0); //CrashModeSponsorID
			Write32(pPlayerDBBaseInfo, 0); //Popularity
			Write32(pPlayerDBBaseInfo, 0); //LadderMatchAchievePoint
			Write32(pPlayerDBBaseInfo, 0); //Cash
			Write32(pPlayerDBBaseInfo, 0); //PlayerGPMIdentity
			Write32(pPlayerDBBaseInfo, 0); //PointTotalScore
			WriteUn(pPlayerDBBaseInfo, 0); //totalMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //lastMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalSeasonId
			WriteUn(pPlayerDBBaseInfo, 0); //lastClearMapMedalTime
			WriteUn(pPlayerDBBaseInfo, 0); //max2048Score
			WriteUn(pPlayerDBBaseInfo, 0); //curPlay2048LeftNum
			Write32(pPlayerDBBaseInfo, 0); //CheerValue
			Write16(pPlayerDBBaseInfo, 0); //SeasonID
			Write32(pPlayerDBBaseInfo, 0); //LastCheerValue
			Write32(pPlayerDBBaseInfo, 0); //SpeedBean
			Write32(pPlayerDBBaseInfo, 0); //SpeedCoin

			len = pPlayerDBBaseInfo - pMemberInfo;
			Set16(pMemberInfo, (WORD)len);
			pMemberInfo += len;
		}
		{ //PlayerGuildInfo
			BYTE* pPlayerGuildInfo = pMemberInfo;
			Write16(pPlayerGuildInfo, 0); //len

			WriteString(pPlayerGuildInfo, 0); //GuildName[]
			Write16(pPlayerGuildInfo, 0); //Duty
			Write32(pPlayerGuildInfo, 0); //GuildID
			Write32(pPlayerGuildInfo, 0); //Right
			Write32(pPlayerGuildInfo, 0); //Medal
			Write32(pPlayerGuildInfo, 0); //Contribute
			WriteString(pPlayerGuildInfo, 0); //DutyTitle[]

			len = pPlayerGuildInfo - pMemberInfo;
			Set16(pMemberInfo, (WORD)len);
			pMemberInfo += len;
		}
		{ //PlayerRelationInfo
			BYTE* pPlayerRelationInfo = pMemberInfo;
			Write16(pPlayerRelationInfo, 0); //len

			Write32(pPlayerRelationInfo, 0); //SrcUin
			Write32(pPlayerRelationInfo, 0); //RelationFlag
			Write32(pPlayerRelationInfo, 0); //RelationUin
			WriteString(pPlayerRelationInfo, 0); //RelationNickName[]
			Write32(pPlayerRelationInfo, 0); //EngageTime
			Write32(pPlayerRelationInfo, 0); //NextCanBookingTimeLimit
			Write32(pPlayerRelationInfo, 0); //BeginHoneyMoonTime
			Write32(pPlayerRelationInfo, 0); //EndHoneyMoonTime
			Write8(pPlayerRelationInfo, 0); //EngageFlag

			len = pPlayerRelationInfo - pMemberInfo;
			Set16(pMemberInfo, (WORD)len);
			pMemberInfo += len;
		}
		WriteUn(pMemberInfo, 0); //EquipedItemNum
		for (size_t i = 0; i < n; i++)
		{ //PlayerItemInfo
			BYTE* pPlayerItemInfo = pMemberInfo;
			Write16(pPlayerItemInfo, 0); //len

			Write32(pPlayerItemInfo, 0); //ItemID
			Write32(pPlayerItemInfo, 0); //ItemNum
			Write32(pPlayerItemInfo, 0); //AvailPeriod
			Write8(pPlayerItemInfo, 0); //Status
			WriteUn(pPlayerItemInfo, 0); //ObtainTime
			Write32(pPlayerItemInfo, 0); //OtherAttribute
			Write16(pPlayerItemInfo, 0); //ItemType

			len = pPlayerItemInfo - pMemberInfo;
			Set16(pMemberInfo, (WORD)len);
			pMemberInfo += len;
		}
		WriteUn(pMemberInfo, 0); //PetNum
		for (size_t i = 0; i < n; i++)
		{ //PetInfo
			BYTE* pPetInfo = pMemberInfo;
			Write16(pPetInfo, 0); //len

			Write32(pPetInfo, 0); //Uin
			Write32(pPetInfo, 0); //PetId
			WriteString(pPetInfo, 0); //PetName[]
			Write8(pPetInfo, 0); //IsProper
			Write16(pPetInfo, 0); //Level
			Write8(pPetInfo, 0); //Status
			Write16(pPetInfo, 0); //PetSkillNum
			for (size_t i = 0; i < n; i++)
			{ //PetSkillList
				BYTE* pPetSkillList = pPetInfo;
				Write16(pPetSkillList, 0); //len

				Write16(pPetSkillList, 0); //SkillID
				Write8(pPetSkillList, 0); //Status
				Write8(pPetSkillList, 0); //Active
				Write32(pPetSkillList, 0); //Value

				len = pPetSkillList - pPetInfo;
				Set16(pPetInfo, (WORD)len);
				pPetInfo += len;
			}
			Write32(pPetInfo, 0); //StrengLevel
			Write8(pPetInfo, 0); //TopStatus
			{ //CommonInfo
				BYTE* pCommonInfo = pPetInfo;
				Write16(pCommonInfo, 0); //len

				Write32(pCommonInfo, 0); //HuanHuaLevel
				Write8(pCommonInfo, 0); //CanHuanHua

				len = pCommonInfo - pPetInfo;
				Set16(pPetInfo, (WORD)len);
				pPetInfo += len;
			}
			Write16(pPetInfo, 0); //PKStar
			Write32(pPetInfo, 0); //PetSkinID

			len = pPetInfo - pMemberInfo;
			Set16(pMemberInfo, (WORD)len);
			pMemberInfo += len;
		}
		WriteUn(pMemberInfo, 0); //KartNum
		for (size_t i = 0; i < n; i++)
		{ //KartRefitInfo
			BYTE* pKartRefitInfo = pMemberInfo;
			Write16(pKartRefitInfo, 0); //len

			Write32(pKartRefitInfo, 0); //Uin
			Write32(pKartRefitInfo, 0); //KartId
			Write32(pKartRefitInfo, 0); //RefitCout
			Write16(pKartRefitInfo, 0); //MaxFlags
			Write16(pKartRefitInfo, 0); //WWeight
			Write16(pKartRefitInfo, 0); //SpeedWeight
			Write16(pKartRefitInfo, 0); //JetWeight
			Write16(pKartRefitInfo, 0); //SJetWeight
			Write16(pKartRefitInfo, 0); //AccuWeight
			Write32(pKartRefitInfo, 0); //ShapeRefitCount
			Write32(pKartRefitInfo, 0); //KartHeadRefitItemID
			Write32(pKartRefitInfo, 0); //KartTailRefitItemID
			Write32(pKartRefitInfo, 0); //KartFlankRefitItemID
			Write32(pKartRefitInfo, 0); //KartTireRefitItemID
			Write32(pKartRefitInfo, 0); //SecondRefitCount
			Write16(pKartRefitInfo, 0); //Speed2Weight
			Write16(pKartRefitInfo, 0); //DriftVecWeight
			Write16(pKartRefitInfo, 0); //AdditionalZSpeedWeight
			Write16(pKartRefitInfo, 0); //AntiCollisionWeight
			Write16(pKartRefitInfo, 0); //LuckyValue
			Write16(pKartRefitInfo, 0); //RefitLuckyValueMaxWeight
			Write32(pKartRefitInfo, 0); //ShapeSuitID
			Write8(pKartRefitInfo, 0); //LegendSuitLevel
			Write32(pKartRefitInfo, 0); //LegendSuitLevelChoice
			Write32(pKartRefitInfo, 0); //ShapeLegendSuitID

			len = pKartRefitInfo - pMemberInfo;
			Set16(pMemberInfo, (WORD)len);
			pMemberInfo += len;
		}
		WriteUn(pMemberInfo, 0); //VipFlag
		{ //NobleInfo
			BYTE* pNobleInfo = pMemberInfo;
			Write16(pNobleInfo, 0); //len

			Write32(pNobleInfo, 0); //NobleID
			Write8(pNobleInfo, 0); //NobleLevel
			Write32(pNobleInfo, 0); //NoblePoint
			Write32(pNobleInfo, 0); //NobleLeftDays

			len = pNobleInfo - pMemberInfo;
			Set16(pMemberInfo, (WORD)len);
			pMemberInfo += len;
		}
		{ //GuildVipBaseInfo
			BYTE* pGuildVipBaseInfo = pMemberInfo;
			Write16(pGuildVipBaseInfo, 0); //len

			Write8(pGuildVipBaseInfo, 0); //GuildVipLevel
			Write32(pGuildVipBaseInfo, 0); //GuildVipPoint

			len = pGuildVipBaseInfo - pMemberInfo;
			Set16(pMemberInfo, (WORD)len);
			pMemberInfo += len;
		}
		Write8(pMemberInfo, 0); //HasLoverVip
		for (size_t i = 0; i < n; i++)
		{ //LoverVipInfo
			BYTE* pLoverVipInfo = pMemberInfo;
			Write16(pLoverVipInfo, 0); //len

			Write8(pLoverVipInfo, 0); //LoverVipLevel
			Write32(pLoverVipInfo, 0); //LoverVipPoint
			Write8(pLoverVipInfo, 0); //GrowRate

			len = pLoverVipInfo - pMemberInfo;
			Set16(pMemberInfo, (WORD)len);
			pMemberInfo += len;
		}
		Write8(pMemberInfo, 0); //GardenLevel
		{ //EmperorInfo
			BYTE* pEmperorInfo = pMemberInfo;
			Write16(pEmperorInfo, 0); //len

			Write8(pEmperorInfo, 0); //EmperorLevel
			Write32(pEmperorInfo, 0); //EmperorPoint
			Write32(pEmperorInfo, 0); //EmperorLeftDays
			Write8(pEmperorInfo, 0); //EmperorGrowRate

			len = pEmperorInfo - pMemberInfo;
			Set16(pMemberInfo, (WORD)len);
			pMemberInfo += len;
		}
		{ //ConsumeVipInfo
			BYTE* pConsumeVipInfo = pMemberInfo;
			Write16(pConsumeVipInfo, 0); //len

			WriteUn(pConsumeVipInfo, 0); //VipLevel
			WriteUn(pConsumeVipInfo, 0); //CharmValueOfMonth
			WriteUn(pConsumeVipInfo, 0); //SearchTreasureNums
			WriteUn(pConsumeVipInfo, 0); //GetTreasureNums

			len = pConsumeVipInfo - pMemberInfo;
			Set16(pMemberInfo, (WORD)len);
			pMemberInfo += len;
		}

		len = pMemberInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 621, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestLeaveTeamRoom(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	Un Time = ReadUn(p);

}

void ResponseLeaveTeamRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 213, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyLeaveTeamRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write8(p, 0); //Type
	Write32(p, 0); //NewRoomOwnerUin

	len = p - buf;
	SendToClient(Client, 622, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestKickFromTeamRoom(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	Un Time = ReadUn(p);
	UINT DstUin = Read32(p);

}

void ResponseKickFromTeamRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 215, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyKickFromTeamRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //DstUin

	len = p - buf;
	SendToClient(Client, 625, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetTeamRoomList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT StartIdx = Read32(p);
	UINT RoomCount = Read32(p);
	bool Range = Read8(p);
	int Score1 = Read32(p);
	int Score2 = Read32(p);

}

void ResponseGetTeamRoomList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //GuildScore
	Write32(p, 0); //StartIdx
	Write32(p, 0); //RoomCount
	for (size_t i = 0; i < n; i++)
	{ //RoomInfo
		BYTE* pRoomInfo = p;
		Write16(pRoomInfo, 0); //len

		Write32(pRoomInfo, 0); //RoomID
		Write32(pRoomInfo, 0); //GuildScore
		WriteString(pRoomInfo, 0); //GuildName[]
		WriteString(pRoomInfo, 0); //LeaderName[]
		Write8(pRoomInfo, 0); //HasKey
		Write8(pRoomInfo, 0); //RoomType
		Write8(pRoomInfo, 0); //RoomStatus
		Write32(pRoomInfo, 0); //MapID
		Write32(pRoomInfo, 0); //CarID
		Write16(pRoomInfo, 0); //GameMode

		len = pRoomInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 214, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetTeamRoomListByGuildName(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	char[] GuildName[] = ReadString(p);

}

void ResponseGetTeamRoomListByGuildName(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //GuildScore
	WriteString(p, 0); //GuildName[]
	Write32(p, 0); //RoomCount
	for (size_t i = 0; i < n; i++)
	{ //RoomInfo
		BYTE* pRoomInfo = p;
		Write16(pRoomInfo, 0); //len

		Write32(pRoomInfo, 0); //RoomID
		Write32(pRoomInfo, 0); //GuildScore
		WriteString(pRoomInfo, 0); //GuildName[]
		WriteString(pRoomInfo, 0); //LeaderName[]
		Write8(pRoomInfo, 0); //HasKey
		Write8(pRoomInfo, 0); //RoomType
		Write8(pRoomInfo, 0); //RoomStatus
		Write32(pRoomInfo, 0); //MapID
		Write32(pRoomInfo, 0); //CarID
		Write16(pRoomInfo, 0); //GameMode

		len = pRoomInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 219, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyTeamRaceOver(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //CurrentPlayerNum
	for (size_t i = 0; i < n; i++)
	{ //RaceScore
		BYTE* pRaceScore = p;
		Write16(pRaceScore, 0); //len

		WriteUn(pRaceScore, 0); //Uin
		WriteUn(pRaceScore, 0); //FinTime
		Write32(pRaceScore, 0); //TP
		Write32(pRaceScore, 0); //MoneyInc
		Write32(pRaceScore, 0); //TotalMoney
		Write32(pRaceScore, 0); //ExpInc
		Write32(pRaceScore, 0); //TotalExp
		Write8(pRaceScore, 0); //AwardNum
		Write32(pRaceScore, 0); //SpecialAward[]
		Write32(pRaceScore, 0); //TeamWorkExpInc
		Write32(pRaceScore, 0); //PropPoint
		Write32(pRaceScore, 0); //PropPointAddExp
		Write32(pRaceScore, 0); //LuckyMatchPointInc
		Write32(pRaceScore, 0); //LuckyMatchPointTotal
		Write32(pRaceScore, 0); //LuckyMatchScoreInc
		Write32(pRaceScore, 0); //LuckyMatchScoreTotal
		Write32(pRaceScore, 0); //LuckMoneyInc
		Write32(pRaceScore, 0); //LuckMoneyTotal
		Write32(pRaceScore, 0); //GuildScoreInc
		Write8(pRaceScore, 0); //CrazyPropAchieveNum
		Write32(pRaceScore, 0); //CrazyPropAchieve[]
		WriteU(pRaceScore, 0); //IncWlMatchScore
		WriteU(pRaceScore, 0); //IncWlDegree
		WriteU(pRaceScore, 0); //IncItemNumByWl
		for (size_t i = 0; i < n; i++)
		{ //IncItemInfoByWl
			BYTE* pIncItemInfoByWl = pRaceScore;
			Write16(pIncItemInfoByWl, 0); //len

			Write16(pIncItemInfoByWl, 0); //GenderItemNum
			Write32(pIncItemInfoByWl, 0); //ItemID[]
			Write16(pIncItemInfoByWl, 0); //ItemNum
			Write32(pIncItemInfoByWl, 0); //AvailPeriod
			Write16(pIncItemInfoByWl, 0); //BroadcastType
			Write16(pIncItemInfoByWl, 0); //BroadcastFlag
			Write8(pIncItemInfoByWl, 0); //ShowPriority
			Write8(pIncItemInfoByWl, 0); //ItemType
			Write8(pIncItemInfoByWl, 0); //IgnoreItem
			Write32(pIncItemInfoByWl, 0); //LimitPara
			Write8(pIncItemInfoByWl, 0); //SpecialAwardCtrlType
			Write8(pIncItemInfoByWl, 0); //AwardCtrlType

			len = pIncItemInfoByWl - pRaceScore;
			Set16(pRaceScore, (WORD)len);
			pRaceScore += len;
		}
		Write32(pRaceScore, 0); //WlMutiplyCard
		Write32(pRaceScore, 0); //SkateCoinInc
		Write32(pRaceScore, 0); //SkateCoinTotal
		Write32(pRaceScore, 0); //SkateCoinHistoryTotal
		Write32(pRaceScore, 0); //TotalCoupons
		Write8(pRaceScore, 0); //ChallengeCheer
		for (size_t i = 0; i < n; i++)
		{ //ChallengeCheer
			BYTE* pChallengeCheer = pRaceScore;
			Write16(pChallengeCheer, 0); //len

			Write16(pChallengeCheer, 0); //GuildCheerValueInc
			Write16(pChallengeCheer, 0); //CheerValueInc
			Write32(pChallengeCheer, 0); //TotalCheerValue
			Write16(pChallengeCheer, 0); //CouponsInc
			Write32(pChallengeCheer, 0); //GuildScoreInc
			Write32(pChallengeCheer, 0); //SuperMoneyInc

			len = pChallengeCheer - pRaceScore;
			Set16(pRaceScore, (WORD)len);
			pRaceScore += len;
		}
		Write32(pRaceScore, 0); //LoveValue
		Write32(pRaceScore, 0); //SkateCoinEmperorBonus
		Write32(pRaceScore, 0); //DetailRecordID
		Write8(pRaceScore, 0); //HasGangsterResult
		for (size_t i = 0; i < n; i++)
		{ //GangsterResult
			BYTE* pGangsterResult = pRaceScore;
			Write16(pGangsterResult, 0); //len

			Write8(pGangsterResult, 0); //AbnormalFalg
			Write32(pGangsterResult, 0); //GangsterBlood
			Write32(pGangsterResult, 0); //GangsterTotalScore
			Write32(pGangsterResult, 0); //GangsterIndentity
			Write32(pGangsterResult, 0); //FragmentInc
			Write32(pGangsterResult, 0); //KillTimes
			Write32(pGangsterResult, 0); //DeadTimes
			Write8(pGangsterResult, 0); //IsMultiple
			Write8(pGangsterResult, 0); //IsLimited
			Write32(pGangsterResult, 0); //ScoreInc
			Write32(pGangsterResult, 0); //TotalScore
			Write32(pGangsterResult, 0); //LoseStreakCount

			len = pGangsterResult - pRaceScore;
			Set16(pRaceScore, (WORD)len);
			pRaceScore += len;
		}
		{ //EquippedActiveKartInfo
			BYTE* pEquippedActiveKartInfo = pRaceScore;
			Write16(pEquippedActiveKartInfo, 0); //len

			Write8(pEquippedActiveKartInfo, 0); //HaveActiveInfo
			Write32(pEquippedActiveKartInfo, 0); //KartID
			Write32(pEquippedActiveKartInfo, 0); //ActiveLevel

			len = pEquippedActiveKartInfo - pRaceScore;
			Set16(pRaceScore, (WORD)len);
			pRaceScore += len;
		}
		Write8(pRaceScore, 0); //HasWeRelayRaceOverInfo
		for (size_t i = 0; i < n; i++)
		{ //WeRelayRaceOverInfo
			BYTE* pWeRelayRaceOverInfo = pRaceScore;
			Write16(pWeRelayRaceOverInfo, 0); //len

			{ //SumStageInfo
				BYTE* pSumStageInfo = pWeRelayRaceOverInfo;
				Write16(pSumStageInfo, 0); //len

				Write32(pSumStageInfo, 0); //Score
				Write32(pSumStageInfo, 0); //ScoreInc
				Write32(pSumStageInfo, 0); //Supermoney
				Write32(pSumStageInfo, 0); //Coupons
				Write32(pSumStageInfo, 0); //SuperN2O

				len = pSumStageInfo - pWeRelayRaceOverInfo;
				Set16(pWeRelayRaceOverInfo, (WORD)len);
				pWeRelayRaceOverInfo += len;
			}
			Write32(pWeRelayRaceOverInfo, 0); //WeRelayScoreInc
			Write32(pWeRelayRaceOverInfo, 0); //WeRelayScoreNow
			Write32(pWeRelayRaceOverInfo, 0); //WeRelayScoreLevelNow
			Write32(pWeRelayRaceOverInfo, 0); //WeRelayScoreLevelLimit
			Write32(pWeRelayRaceOverInfo, 0); //SupermoneyLimit
			Write32(pWeRelayRaceOverInfo, 0); //SupermoneyNow
			Write32(pWeRelayRaceOverInfo, 0); //CouponsLimit
			Write32(pWeRelayRaceOverInfo, 0); //CouponsNow
			Write32(pWeRelayRaceOverInfo, 0); //LuckAwardMul

			len = pWeRelayRaceOverInfo - pRaceScore;
			Set16(pRaceScore, (WORD)len);
			pRaceScore += len;
		}
		Write8(pRaceScore, 0); //HaveSkatePropRaceInfo
		for (size_t i = 0; i < n; i++)
		{ //SkatePropRaceInfo
			BYTE* pSkatePropRaceInfo = pRaceScore;
			Write16(pSkatePropRaceInfo, 0); //len

			Write32(pSkatePropRaceInfo, 0); //ScoreAdd
			Write32(pSkatePropRaceInfo, 0); //ScoreTotal

			len = pSkatePropRaceInfo - pRaceScore;
			Set16(pRaceScore, (WORD)len);
			pRaceScore += len;
		}
		Write8(pRaceScore, 0); //IsNewBox
		Write8(pRaceScore, 0); //HaveArrestScoreInfo
		for (size_t i = 0; i < n; i++)
		{ //ArrestScoreInfo
			BYTE* pArrestScoreInfo = pRaceScore;
			Write16(pArrestScoreInfo, 0); //len

			Write32(pArrestScoreInfo, 0); //ScoreInGame
			Write32(pArrestScoreInfo, 0); //ScoreByGold
			Write32(pArrestScoreInfo, 0); //GoldMoney
			Write32(pArrestScoreInfo, 0); //ArrestNum
			Write8(pArrestScoreInfo, 0); //ResultType
			Write8(pArrestScoreInfo, 0); //TeamID

			len = pArrestScoreInfo - pRaceScore;
			Set16(pRaceScore, (WORD)len);
			pRaceScore += len;
		}
		Write8(pRaceScore, 0); //HasRankedMatchInfo
		for (size_t i = 0; i < n; i++)
		{ //RankedMatchScore
			BYTE* pRankedMatchScore = pRaceScore;
			Write16(pRankedMatchScore, 0); //len

			{ //RankedMatchLastGradeInfo
				BYTE* pRankedMatchLastGradeInfo = pRankedMatchScore;
				Write16(pRankedMatchLastGradeInfo, 0); //len

				Write32(pRankedMatchLastGradeInfo, 0); //GradeLevel
				Write32(pRankedMatchLastGradeInfo, 0); //ChildLevel
				Write32(pRankedMatchLastGradeInfo, 0); //GradeScore
				Write32(pRankedMatchLastGradeInfo, 0); //MaxGradeScore
				Write32(pRankedMatchLastGradeInfo, 0); //TotalScore

				len = pRankedMatchLastGradeInfo - pRankedMatchScore;
				Set16(pRankedMatchScore, (WORD)len);
				pRankedMatchScore += len;
			}
			{ //RankedMatchGradeInfo
				BYTE* pRankedMatchGradeInfo = pRankedMatchScore;
				Write16(pRankedMatchGradeInfo, 0); //len

				Write32(pRankedMatchGradeInfo, 0); //GradeLevel
				Write32(pRankedMatchGradeInfo, 0); //ChildLevel
				Write32(pRankedMatchGradeInfo, 0); //GradeScore
				Write32(pRankedMatchGradeInfo, 0); //MaxGradeScore
				Write32(pRankedMatchGradeInfo, 0); //TotalScore

				len = pRankedMatchGradeInfo - pRankedMatchScore;
				Set16(pRankedMatchScore, (WORD)len);
				pRankedMatchScore += len;
			}
			{ //RankedMatchPromoInfo
				BYTE* pRankedMatchPromoInfo = pRankedMatchScore;
				Write16(pRankedMatchPromoInfo, 0); //len

				Write8(pRankedMatchPromoInfo, 0); //PromotionMatch
				Write32(pRankedMatchPromoInfo, 0); //PromotionRoundNums
				Write32(pRankedMatchPromoInfo, 0); //PromotionSuccessRoundNums
				Write32(pRankedMatchPromoInfo, 0); //PromotionAlreadySuccessRoundNums
				Write32(pRankedMatchPromoInfo, 0); //PromotionRecordTag
				Write32(pRankedMatchPromoInfo, 0); //CurrentPromotionRoundNums
				Write32(pRankedMatchPromoInfo, 0); //PromoFailedMinusScore
				Write32(pRankedMatchPromoInfo, 0); //PromoSuccAddScore
				Write8(pRankedMatchPromoInfo, 0); //PromoDirectly
				Write8(pRankedMatchPromoInfo, 0); //GradeNoNeedPromo
				Write8(pRankedMatchPromoInfo, 0); //RankedMemoryNoNeedPromo
				Write8(pRankedMatchPromoInfo, 0); //PromotionExtraScore
				Write8(pRankedMatchPromoInfo, 0); //PromtRaceFailedDefendFlag

				len = pRankedMatchPromoInfo - pRankedMatchScore;
				Set16(pRankedMatchScore, (WORD)len);
				pRankedMatchScore += len;
			}
			{ //RankedMatchComputeInfo
				BYTE* pRankedMatchComputeInfo = pRankedMatchScore;
				Write16(pRankedMatchComputeInfo, 0); //len

				Write32(pRankedMatchComputeInfo, 0); //RankAddScore
				Write32(pRankedMatchComputeInfo, 0); //FinishAddScore
				Write32(pRankedMatchComputeInfo, 0); //KillAllAddScore
				Write32(pRankedMatchComputeInfo, 0); //GradeProtectAddScore
				Write32(pRankedMatchComputeInfo, 0); //GradeAddScore
				Write32(pRankedMatchComputeInfo, 0); //ProtectAddScoreGradeLimit
				Write32(pRankedMatchComputeInfo, 0); //DailyExtraAddScore
				Write32(pRankedMatchComputeInfo, 0); //AwardRankCoinNums
				Write32(pRankedMatchComputeInfo, 0); //WeeklyAwardRankCoinNums
				Write32(pRankedMatchComputeInfo, 0); //WeeklyAwardRankCoinLimit
				Write32(pRankedMatchComputeInfo, 0); //AwardRankCoinNumsByRank
				Write32(pRankedMatchComputeInfo, 0); //AwardRankCoinNumsByFinish
				Write32(pRankedMatchComputeInfo, 0); //BanMapExtraAddScore
				Write32(pRankedMatchComputeInfo, 0); //TeamRankAddScore
				Write32(pRankedMatchComputeInfo, 0); //AwardRankCoinNumsByTeamRank
				Write32(pRankedMatchComputeInfo, 0); //AwardRankCoinNumsByTask
				Write8(pRankedMatchComputeInfo, 0); //UseDoubleScoreItem
				Write8(pRankedMatchComputeInfo, 0); //UserNotDecreaseItem
				Write8(pRankedMatchComputeInfo, 0); //FinishSeasonChallengeTaskOrNot
				Write32(pRankedMatchComputeInfo, 0); //FinishedSeasonChallengeTaskIndex
				Write32(pRankedMatchComputeInfo, 0); //SeasonChallengeTaskProtectAddScore
				Write8(pRankedMatchComputeInfo, 0); //NotDecreaseReason
				Write8(pRankedMatchComputeInfo, 0); //HaveSpeedKingInfo
				for (size_t i = 0; i < n; i++)
				{ //RankedMatchSpeedKingInfos
					BYTE* pRankedMatchSpeedKingInfos = pRankedMatchComputeInfo;
					Write16(pRankedMatchSpeedKingInfos, 0); //len

					Write8(pRankedMatchSpeedKingInfos, 0); //WinOrNot
					WriteUn(pRankedMatchSpeedKingInfos, 0); //UiAwardSpeedKingEnergyItemNums
					Write32(pRankedMatchSpeedKingInfos, 0); //WeeklyAwardSpeedKingEnergyItemNums
					Write32(pRankedMatchSpeedKingInfos, 0); //WeeklyAwardSpeedKingEnergyItemLimitNums

					len = pRankedMatchSpeedKingInfos - pRankedMatchComputeInfo;
					Set16(pRankedMatchComputeInfo, (WORD)len);
					pRankedMatchComputeInfo += len;
				}
				Write8(pRankedMatchComputeInfo, 0); //HaveExtraComputeInfo
				for (size_t i = 0; i < n; i++)
				{ //RankedMatchExtracComputeInfos
					BYTE* pRankedMatchExtracComputeInfos = pRankedMatchComputeInfo;
					Write16(pRankedMatchExtracComputeInfos, 0); //len

					Write32(pRankedMatchExtracComputeInfos, 0); //ExtraComputeType
					Write32(pRankedMatchExtracComputeInfos, 0); //AwardItemNums
					Write32(pRankedMatchExtracComputeInfos, 0); //WeekylyAwardItemNums
					Write32(pRankedMatchExtracComputeInfos, 0); //WeeklyAwardItemLimitNums
					Write8(pRankedMatchExtracComputeInfos, 0); //HaveGameLogicTask
					for (size_t i = 0; i < n; i++)
					{ //RakedMatchGamelogicTaskInfo
						BYTE* pRakedMatchGamelogicTaskInfo = pRankedMatchExtracComputeInfos;
						Write16(pRakedMatchGamelogicTaskInfo, 0); //len

						Write32(pRakedMatchGamelogicTaskInfo, 0); //GameLogicTaskType
						Write32(pRakedMatchGamelogicTaskInfo, 0); //TaskFinishCondValue
						Write8(pRakedMatchGamelogicTaskInfo, 0); //JudgeRule
						Write32(pRakedMatchGamelogicTaskInfo, 0); //TaskAddGradeScore
						Write8(pRakedMatchGamelogicTaskInfo, 0); //GradeScoreRangeNum
						Write32(pRakedMatchGamelogicTaskInfo, 0); //GradeScoreRange[]
						Write8(pRakedMatchGamelogicTaskInfo, 0); //TaskFinishCondValueNum
						Write32(pRakedMatchGamelogicTaskInfo, 0); //TaskFinishCondValueRange[]
						Write8(pRakedMatchGamelogicTaskInfo, 0); //TaskAddGradeScoreNum
						Write32(pRakedMatchGamelogicTaskInfo, 0); //TaskAddGradeScoreRange[]
						Write8(pRakedMatchGamelogicTaskInfo, 0); //FailedAddGradeScoreNum
						Write32(pRakedMatchGamelogicTaskInfo, 0); //FailedAddGradeScoreRange[]
						Write8(pRakedMatchGamelogicTaskInfo, 0); //FinishTask
						Write32(pRakedMatchGamelogicTaskInfo, 0); //ExtraFinishTaskAddScore

						len = pRakedMatchGamelogicTaskInfo - pRankedMatchExtracComputeInfos;
						Set16(pRankedMatchExtracComputeInfos, (WORD)len);
						pRankedMatchExtracComputeInfos += len;
					}
					Write8(pRankedMatchExtracComputeInfos, 0); //Win
					Write8(pRankedMatchExtracComputeInfos, 0); //NormalPlayerOrNot
					Write8(pRankedMatchExtracComputeInfos, 0); //LeadRolePlayerNums

					len = pRankedMatchExtracComputeInfos - pRankedMatchComputeInfo;
					Set16(pRankedMatchComputeInfo, (WORD)len);
					pRankedMatchComputeInfo += len;
				}
				Write32(pRankedMatchComputeInfo, 0); //SeasonNewMapAddScore
				Write8(pRankedMatchComputeInfo, 0); //SeasonChallengeBaseScore
				Write8(pRankedMatchComputeInfo, 0); //SeasonChallengeContiWinExtrScore
				Write8(pRankedMatchComputeInfo, 0); //SeasonChallengeRegretDefeatScore
				Write8(pRankedMatchComputeInfo, 0); //SeasonChallengeRespectableOpponentScore
				Write8(pRankedMatchComputeInfo, 0); //SpeedGodChallengeAddScore
				Write8(pRankedMatchComputeInfo, 0); //SpeedGodChallengeAddCoin
				Write8(pRankedMatchComputeInfo, 0); //SpeedFlashAddFactoryCoin
				Write8(pRankedMatchComputeInfo, 0); //PinnacleBattleAddScore
				Write8(pRankedMatchComputeInfo, 0); //PromotionExtraScore
				Write32(pRankedMatchComputeInfo, 0); //SavedExtraScore
				Write32(pRankedMatchComputeInfo, 0); //DailyExtraTaskID
				Write8(pRankedMatchComputeInfo, 0); //SuitActiveAddScore
				Write8(pRankedMatchComputeInfo, 0); //SpeedGodChallengeType
				Write8(pRankedMatchComputeInfo, 0); //SuitActiveEffectID

				len = pRankedMatchComputeInfo - pRankedMatchScore;
				Set16(pRankedMatchScore, (WORD)len);
				pRankedMatchScore += len;
			}
			Write8(pRankedMatchScore, 0); //HavePromotionExtraScoreInfo
			for (size_t i = 0; i < n; i++)
			{ //PromotionExtraScoreInfo
				BYTE* pPromotionExtraScoreInfo = pRankedMatchScore;
				Write16(pPromotionExtraScoreInfo, 0); //len

				Write8(pPromotionExtraScoreInfo, 0); //PromotionMatch
				Write32(pPromotionExtraScoreInfo, 0); //PromotionRoundNums
				Write32(pPromotionExtraScoreInfo, 0); //PromotionSuccessRoundNums
				Write32(pPromotionExtraScoreInfo, 0); //PromotionAlreadySuccessRoundNums
				Write32(pPromotionExtraScoreInfo, 0); //PromotionRecordTag
				Write32(pPromotionExtraScoreInfo, 0); //CurrentPromotionRoundNums
				Write32(pPromotionExtraScoreInfo, 0); //PromoFailedMinusScore
				Write32(pPromotionExtraScoreInfo, 0); //PromoSuccAddScore
				Write8(pPromotionExtraScoreInfo, 0); //PromoDirectly
				Write8(pPromotionExtraScoreInfo, 0); //GradeNoNeedPromo
				Write8(pPromotionExtraScoreInfo, 0); //RankedMemoryNoNeedPromo
				Write8(pPromotionExtraScoreInfo, 0); //PromotionExtraScore
				Write8(pPromotionExtraScoreInfo, 0); //PromtRaceFailedDefendFlag

				len = pPromotionExtraScoreInfo - pRankedMatchScore;
				Set16(pRankedMatchScore, (WORD)len);
				pRankedMatchScore += len;
			}

			len = pRankedMatchScore - pRaceScore;
			Set16(pRaceScore, (WORD)len);
			pRaceScore += len;
		}
		Write8(pRaceScore, 0); //HaveCrazyChaseScoreInfo
		for (size_t i = 0; i < n; i++)
		{ //CrazyChaseScoreInfo
			BYTE* pCrazyChaseScoreInfo = pRaceScore;
			Write16(pCrazyChaseScoreInfo, 0); //len

			Write32(pCrazyChaseScoreInfo, 0); //Uin
			Write16(pCrazyChaseScoreInfo, 0); //Role
			Write32(pCrazyChaseScoreInfo, 0); //Score
			Write8(pCrazyChaseScoreInfo, 0); //ScoreNum
			for (size_t i = 0; i < n; i++)
			{ //ScoreInfo
				BYTE* pScoreInfo = pCrazyChaseScoreInfo;
				Write16(pScoreInfo, 0); //len

				Write8(pScoreInfo, 0); //ScoreType
				Write32(pScoreInfo, 0); //Value
				Write32(pScoreInfo, 0); //Score

				len = pScoreInfo - pCrazyChaseScoreInfo;
				Set16(pCrazyChaseScoreInfo, (WORD)len);
				pCrazyChaseScoreInfo += len;
			}

			len = pCrazyChaseScoreInfo - pRaceScore;
			Set16(pRaceScore, (WORD)len);
			pRaceScore += len;
		}
		Write8(pRaceScore, 0); //TeamID
		Write8(pRaceScore, 0); //HasRankedMatchArenaInfo
		for (size_t i = 0; i < n; i++)
		{ //RankedMatchArenaScore
			BYTE* pRankedMatchArenaScore = pRaceScore;
			Write16(pRankedMatchArenaScore, 0); //len

			Write8(pRankedMatchArenaScore, 0); //Win
			Write8(pRankedMatchArenaScore, 0); //Rank
			Write8(pRankedMatchArenaScore, 0); //TaskScore
			Write32(pRankedMatchArenaScore, 0); //AwardRankCoinNums
			{ //RankedMatchLastGradeInfo
				BYTE* pRankedMatchLastGradeInfo = pRankedMatchArenaScore;
				Write16(pRankedMatchLastGradeInfo, 0); //len

				Write32(pRankedMatchLastGradeInfo, 0); //GradeLevel
				Write32(pRankedMatchLastGradeInfo, 0); //ChildLevel
				Write32(pRankedMatchLastGradeInfo, 0); //GradeScore
				Write32(pRankedMatchLastGradeInfo, 0); //MaxGradeScore
				Write32(pRankedMatchLastGradeInfo, 0); //TotalScore

				len = pRankedMatchLastGradeInfo - pRankedMatchArenaScore;
				Set16(pRankedMatchArenaScore, (WORD)len);
				pRankedMatchArenaScore += len;
			}
			{ //RankedMatchGradeInfo
				BYTE* pRankedMatchGradeInfo = pRankedMatchArenaScore;
				Write16(pRankedMatchGradeInfo, 0); //len

				Write32(pRankedMatchGradeInfo, 0); //GradeLevel
				Write32(pRankedMatchGradeInfo, 0); //ChildLevel
				Write32(pRankedMatchGradeInfo, 0); //GradeScore
				Write32(pRankedMatchGradeInfo, 0); //MaxGradeScore
				Write32(pRankedMatchGradeInfo, 0); //TotalScore

				len = pRankedMatchGradeInfo - pRankedMatchArenaScore;
				Set16(pRankedMatchArenaScore, (WORD)len);
				pRankedMatchArenaScore += len;
			}
			{ //RankedMatchPromoInfo
				BYTE* pRankedMatchPromoInfo = pRankedMatchArenaScore;
				Write16(pRankedMatchPromoInfo, 0); //len

				Write8(pRankedMatchPromoInfo, 0); //PromotionMatch
				Write32(pRankedMatchPromoInfo, 0); //PromotionRoundNums
				Write32(pRankedMatchPromoInfo, 0); //PromotionSuccessRoundNums
				Write32(pRankedMatchPromoInfo, 0); //PromotionAlreadySuccessRoundNums
				Write32(pRankedMatchPromoInfo, 0); //PromotionRecordTag
				Write32(pRankedMatchPromoInfo, 0); //CurrentPromotionRoundNums
				Write32(pRankedMatchPromoInfo, 0); //PromoFailedMinusScore
				Write32(pRankedMatchPromoInfo, 0); //PromoSuccAddScore
				Write8(pRankedMatchPromoInfo, 0); //PromoDirectly
				Write8(pRankedMatchPromoInfo, 0); //GradeNoNeedPromo
				Write8(pRankedMatchPromoInfo, 0); //RankedMemoryNoNeedPromo
				Write8(pRankedMatchPromoInfo, 0); //PromotionExtraScore
				Write8(pRankedMatchPromoInfo, 0); //PromtRaceFailedDefendFlag

				len = pRankedMatchPromoInfo - pRankedMatchArenaScore;
				Set16(pRankedMatchArenaScore, (WORD)len);
				pRankedMatchArenaScore += len;
			}
			Write8(pRankedMatchArenaScore, 0); //WinNum
			Write16(pRankedMatchArenaScore, 0); //CurrentScore
			Write8(pRankedMatchArenaScore, 0); //FinishScore
			Write16(pRankedMatchArenaScore, 0); //AwardRankScore
			Write8(pRankedMatchArenaScore, 0); //AwardRankCoinNumsByRank
			Write8(pRankedMatchArenaScore, 0); //AwardRankCoinNumsByFinish
			Write32(pRankedMatchArenaScore, 0); //WeeklyAwardRankCoinNums
			Write32(pRankedMatchArenaScore, 0); //WeeklyAwardRankCoinLimit
			Write32(pRankedMatchArenaScore, 0); //AwardRankCoinNumsByTask

			len = pRankedMatchArenaScore - pRaceScore;
			Set16(pRaceScore, (WORD)len);
			pRaceScore += len;
		}
		Write32(pRaceScore, 0); //DistanceToEnd
		Write8(pRaceScore, 0); //ShortDistancWinPoint
		Write8(pRaceScore, 0); //Status
		Write8(pRaceScore, 0); //HaveRankedMatchSpeedKingInfo
		for (size_t i = 0; i < n; i++)
		{ //RankedMatchSpeedKingScoreInfo
			BYTE* pRankedMatchSpeedKingScoreInfo = pRaceScore;
			Write16(pRankedMatchSpeedKingScoreInfo, 0); //len

			Write32(pRankedMatchSpeedKingScoreInfo, 0); //AwardSpeedKingEnergyNums
			Write8(pRankedMatchSpeedKingScoreInfo, 0); //Win

			len = pRankedMatchSpeedKingScoreInfo - pRaceScore;
			Set16(pRaceScore, (WORD)len);
			pRaceScore += len;
		}
		Write8(pRaceScore, 0); //ProfessionLicenseAwardNum
		for (size_t i = 0; i < n; i++)
		{ //ProfessionLicenseAward
			BYTE* pProfessionLicenseAward = pRaceScore;
			Write16(pProfessionLicenseAward, 0); //len

			Write32(pProfessionLicenseAward, 0); //PointInc
			Write32(pProfessionLicenseAward, 0); //PointLevelCur
			Write32(pProfessionLicenseAward, 0); //PointLevelMax
			Write16(pProfessionLicenseAward, 0); //IncResultID
			Write8(pProfessionLicenseAward, 0); //ShowQiPao
			Write32(pProfessionLicenseAward, 0); //PointWeekTotal
			Write32(pProfessionLicenseAward, 0); //PointWeekCur
			{ //ProfessionLicenseInfo
				BYTE* pProfessionLicenseInfo = pProfessionLicenseAward;
				Write16(pProfessionLicenseInfo, 0); //len

				Write8(pProfessionLicenseInfo, 0); //BigLevel
				Write8(pProfessionLicenseInfo, 0); //SmallLevel

				len = pProfessionLicenseInfo - pProfessionLicenseAward;
				Set16(pProfessionLicenseAward, (WORD)len);
				pProfessionLicenseAward += len;
			}
			Write8(pProfessionLicenseAward, 0); //SwitchShowExtraAddPoint
			Write16(pProfessionLicenseAward, 0); //BeginOffsetSeconds

			len = pProfessionLicenseAward - pRaceScore;
			Set16(pRaceScore, (WORD)len);
			pRaceScore += len;
		}
		{ //RaceResult
			BYTE* pRaceResult = pRaceScore;
			Write16(pRaceResult, 0); //len

			Write8(pRaceResult, 0); //PLExpPowerValid
			Write8(pRaceResult, 0); //PLHonorPowerValid
			Write8(pRaceResult, 0); //ExpMultiNum
			Write8(pRaceResult, 0); //HonorMultiNum

			len = pRaceResult - pRaceScore;
			Set16(pRaceScore, (WORD)len);
			pRaceScore += len;
		}
		Write8(pRaceScore, 0); //HaveRankedMatchExtraInfo
		for (size_t i = 0; i < n; i++)
		{ //RankedMatchExtraScoreInfo
			BYTE* pRankedMatchExtraScoreInfo = pRaceScore;
			Write16(pRankedMatchExtraScoreInfo, 0); //len

			Write32(pRankedMatchExtraScoreInfo, 0); //AwardItemNums
			Write8(pRankedMatchExtraScoreInfo, 0); //Win

			len = pRankedMatchExtraScoreInfo - pRaceScore;
			Set16(pRaceScore, (WORD)len);
			pRaceScore += len;
		}
		Write8(pRaceScore, 0); //HasYuLeJiaNianHuaComputeData
		for (size_t i = 0; i < n; i++)
		{ //YuLeJiaNianHuaComputeData
			BYTE* pYuLeJiaNianHuaComputeData = pRaceScore;
			Write16(pYuLeJiaNianHuaComputeData, 0); //len

			Write32(pYuLeJiaNianHuaComputeData, 0); //AwardScore
			Write8(pYuLeJiaNianHuaComputeData, 0); //Recommend
			Write8(pYuLeJiaNianHuaComputeData, 0); //ScoreDouble
			Write8(pYuLeJiaNianHuaComputeData, 0); //GuaJi

			len = pYuLeJiaNianHuaComputeData - pRaceScore;
			Set16(pRaceScore, (WORD)len);
			pRaceScore += len;
		}

		len = pRaceScore - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //WinTeamLeaderUin
	Write32(p, 0); //WinTeamScore
	Write32(p, 0); //LoseTeamScore
	Write16(p, 0); //NextGameScore
	WriteUn(p, 0); //AwardTime
	Write16(p, 0); //MsgLength
	Write16(p, 0); //PointChanged
	Write8(p, 0); //KickOffPlayerNumber
	for (size_t i = 0; i < n; i++)
	{ //KickOffPlayer
		BYTE* pKickOffPlayer = p;
		Write16(pKickOffPlayer, 0); //len

		Write32(pKickOffPlayer, 0); //Uin
		WriteString(pKickOffPlayer, 0); //NickName[]
		Write8(pKickOffPlayer, 0); //Gender
		Write8(pKickOffPlayer, 0); //TeamID
		Write8(pKickOffPlayer, 0); //Country

		len = pKickOffPlayer - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 626, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestInviteTeamIntoRoom(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int DstTeamID = Read32(p);

}

void ResponseInviteTeamIntoRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //TeamID
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 216, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyTeamBeInvitedIntoRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //SrcUin
	WriteString(p, 0); //SrcPlayerName[]
	WriteString(p, 0); //GuildName[]
	Write32(p, 0); //GuildScore
	Write16(p, 0); //SrcRoomID
	WriteString(p, 0); //RoomName[]
	Write16(p, 0); //GameMode
	Write32(p, 0); //MapID
	Write32(p, 0); //CarID
	WriteString(p, 0); //Password[]

	len = p - buf;
	SendToClient(Client, 627, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyOtherTeamSelfInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Score
	{ //TeamPlayerInfo
		BYTE* pTeamPlayerInfo = p;
		Write16(pTeamPlayerInfo, 0); //len

		Write32(pTeamPlayerInfo, 0); //Uin
		Write32(pTeamPlayerInfo, 0); //Identity
		WriteUn(pTeamPlayerInfo, 0); //PlayerID
		Write8(pTeamPlayerInfo, 0); //ReadyInRoom
		{ //PlayerDBBaseInfo
			BYTE* pPlayerDBBaseInfo = pTeamPlayerInfo;
			Write16(pPlayerDBBaseInfo, 0); //len

			WriteString(pPlayerDBBaseInfo, 0); //NickName[]
			Write8(pPlayerDBBaseInfo, 0); //Gender
			Write8(pPlayerDBBaseInfo, 0); //Country
			Write32(pPlayerDBBaseInfo, 0); //License
			WriteUn(pPlayerDBBaseInfo, 0); //Experience
			Write32(pPlayerDBBaseInfo, 0); //SuperMoney
			Write32(pPlayerDBBaseInfo, 0); //Money
			WriteUn(pPlayerDBBaseInfo, 0); //WinNum
			Write32(pPlayerDBBaseInfo, 0); //SecondNum
			Write32(pPlayerDBBaseInfo, 0); //ThirdNum
			WriteUn(pPlayerDBBaseInfo, 0); //TotalNum
			Write32(pPlayerDBBaseInfo, 0); //CurHonor
			Write32(pPlayerDBBaseInfo, 0); //TotalHonor
			Write32(pPlayerDBBaseInfo, 0); //TodayHonor
			Write32(pPlayerDBBaseInfo, 0); //RelaxTime
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationBefore
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationCur
			Write32(pPlayerDBBaseInfo, 0); //Charm
			Write32(pPlayerDBBaseInfo, 0); //DurationGame
			Write32(pPlayerDBBaseInfo, 0); //DanceExp
			Write32(pPlayerDBBaseInfo, 0); //Coupons
			Write32(pPlayerDBBaseInfo, 0); //Admiration
			Write32(pPlayerDBBaseInfo, 0); //LuckMoney
			Write32(pPlayerDBBaseInfo, 0); //TeamWorkExp
			Write32(pPlayerDBBaseInfo, 0); //AchievePoint
			Write32(pPlayerDBBaseInfo, 0); //RegTime
			WriteString(pPlayerDBBaseInfo, 0); //Signature[]
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchPoint
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchNum
			Write16(pPlayerDBBaseInfo, 0); //LuckyMatchFirstNum
			Write8(pPlayerDBBaseInfo, 0); //LuckyMatchBestRand
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchWinNum
			Write32(pPlayerDBBaseInfo, 0); //FizzPointTotal
			Write16(pPlayerDBBaseInfo, 0); //FizzPointDaily
			Write16(pPlayerDBBaseInfo, 0); //FizzPointWeekly
			Write16(pPlayerDBBaseInfo, 0); //FizzPointLastWeek
			Write8(pPlayerDBBaseInfo, 0); //FizzLotteryStatus
			Write32(pPlayerDBBaseInfo, 0); //FizzLastUpdateTime
			Write32(pPlayerDBBaseInfo, 0); //SNSLocaleCode
			Write32(pPlayerDBBaseInfo, 0); //AuctionRightUnlockTime
			Write8(pPlayerDBBaseInfo, 0); //ReserveFlag
			Write32(pPlayerDBBaseInfo, 0); //CurConsumeScore
			Write32(pPlayerDBBaseInfo, 0); //HistoryConsumeScore
			Write8(pPlayerDBBaseInfo, 0); //CrashModeSponsorID
			Write32(pPlayerDBBaseInfo, 0); //Popularity
			Write32(pPlayerDBBaseInfo, 0); //LadderMatchAchievePoint
			Write32(pPlayerDBBaseInfo, 0); //Cash
			Write32(pPlayerDBBaseInfo, 0); //PlayerGPMIdentity
			Write32(pPlayerDBBaseInfo, 0); //PointTotalScore
			WriteUn(pPlayerDBBaseInfo, 0); //totalMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //lastMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalSeasonId
			WriteUn(pPlayerDBBaseInfo, 0); //lastClearMapMedalTime
			WriteUn(pPlayerDBBaseInfo, 0); //max2048Score
			WriteUn(pPlayerDBBaseInfo, 0); //curPlay2048LeftNum
			Write32(pPlayerDBBaseInfo, 0); //CheerValue
			Write16(pPlayerDBBaseInfo, 0); //SeasonID
			Write32(pPlayerDBBaseInfo, 0); //LastCheerValue
			Write32(pPlayerDBBaseInfo, 0); //SpeedBean
			Write32(pPlayerDBBaseInfo, 0); //SpeedCoin

			len = pPlayerDBBaseInfo - pTeamPlayerInfo;
			Set16(pTeamPlayerInfo, (WORD)len);
			pTeamPlayerInfo += len;
		}
		{ //PlayerGuildInfo
			BYTE* pPlayerGuildInfo = pTeamPlayerInfo;
			Write16(pPlayerGuildInfo, 0); //len

			WriteString(pPlayerGuildInfo, 0); //GuildName[]
			Write16(pPlayerGuildInfo, 0); //Duty
			Write32(pPlayerGuildInfo, 0); //GuildID
			Write32(pPlayerGuildInfo, 0); //Right
			Write32(pPlayerGuildInfo, 0); //Medal
			Write32(pPlayerGuildInfo, 0); //Contribute
			WriteString(pPlayerGuildInfo, 0); //DutyTitle[]

			len = pPlayerGuildInfo - pTeamPlayerInfo;
			Set16(pTeamPlayerInfo, (WORD)len);
			pTeamPlayerInfo += len;
		}
		{ //PlayerRelationInfo
			BYTE* pPlayerRelationInfo = pTeamPlayerInfo;
			Write16(pPlayerRelationInfo, 0); //len

			Write32(pPlayerRelationInfo, 0); //SrcUin
			Write32(pPlayerRelationInfo, 0); //RelationFlag
			Write32(pPlayerRelationInfo, 0); //RelationUin
			WriteString(pPlayerRelationInfo, 0); //RelationNickName[]
			Write32(pPlayerRelationInfo, 0); //EngageTime
			Write32(pPlayerRelationInfo, 0); //NextCanBookingTimeLimit
			Write32(pPlayerRelationInfo, 0); //BeginHoneyMoonTime
			Write32(pPlayerRelationInfo, 0); //EndHoneyMoonTime
			Write8(pPlayerRelationInfo, 0); //EngageFlag

			len = pPlayerRelationInfo - pTeamPlayerInfo;
			Set16(pTeamPlayerInfo, (WORD)len);
			pTeamPlayerInfo += len;
		}
		WriteUn(pTeamPlayerInfo, 0); //EquipedItemNum
		for (size_t i = 0; i < n; i++)
		{ //PlayerItemInfo
			BYTE* pPlayerItemInfo = pTeamPlayerInfo;
			Write16(pPlayerItemInfo, 0); //len

			Write32(pPlayerItemInfo, 0); //ItemID
			Write32(pPlayerItemInfo, 0); //ItemNum
			Write32(pPlayerItemInfo, 0); //AvailPeriod
			Write8(pPlayerItemInfo, 0); //Status
			WriteUn(pPlayerItemInfo, 0); //ObtainTime
			Write32(pPlayerItemInfo, 0); //OtherAttribute
			Write16(pPlayerItemInfo, 0); //ItemType

			len = pPlayerItemInfo - pTeamPlayerInfo;
			Set16(pTeamPlayerInfo, (WORD)len);
			pTeamPlayerInfo += len;
		}
		WriteUn(pTeamPlayerInfo, 0); //PetNum
		for (size_t i = 0; i < n; i++)
		{ //PetInfo
			BYTE* pPetInfo = pTeamPlayerInfo;
			Write16(pPetInfo, 0); //len

			Write32(pPetInfo, 0); //Uin
			Write32(pPetInfo, 0); //PetId
			WriteString(pPetInfo, 0); //PetName[]
			Write8(pPetInfo, 0); //IsProper
			Write16(pPetInfo, 0); //Level
			Write8(pPetInfo, 0); //Status
			Write16(pPetInfo, 0); //PetSkillNum
			for (size_t i = 0; i < n; i++)
			{ //PetSkillList
				BYTE* pPetSkillList = pPetInfo;
				Write16(pPetSkillList, 0); //len

				Write16(pPetSkillList, 0); //SkillID
				Write8(pPetSkillList, 0); //Status
				Write8(pPetSkillList, 0); //Active
				Write32(pPetSkillList, 0); //Value

				len = pPetSkillList - pPetInfo;
				Set16(pPetInfo, (WORD)len);
				pPetInfo += len;
			}
			Write32(pPetInfo, 0); //StrengLevel
			Write8(pPetInfo, 0); //TopStatus
			{ //CommonInfo
				BYTE* pCommonInfo = pPetInfo;
				Write16(pCommonInfo, 0); //len

				Write32(pCommonInfo, 0); //HuanHuaLevel
				Write8(pCommonInfo, 0); //CanHuanHua

				len = pCommonInfo - pPetInfo;
				Set16(pPetInfo, (WORD)len);
				pPetInfo += len;
			}
			Write16(pPetInfo, 0); //PKStar
			Write32(pPetInfo, 0); //PetSkinID

			len = pPetInfo - pTeamPlayerInfo;
			Set16(pTeamPlayerInfo, (WORD)len);
			pTeamPlayerInfo += len;
		}
		WriteUn(pTeamPlayerInfo, 0); //KartNum
		for (size_t i = 0; i < n; i++)
		{ //KartRefitInfo
			BYTE* pKartRefitInfo = pTeamPlayerInfo;
			Write16(pKartRefitInfo, 0); //len

			Write32(pKartRefitInfo, 0); //Uin
			Write32(pKartRefitInfo, 0); //KartId
			Write32(pKartRefitInfo, 0); //RefitCout
			Write16(pKartRefitInfo, 0); //MaxFlags
			Write16(pKartRefitInfo, 0); //WWeight
			Write16(pKartRefitInfo, 0); //SpeedWeight
			Write16(pKartRefitInfo, 0); //JetWeight
			Write16(pKartRefitInfo, 0); //SJetWeight
			Write16(pKartRefitInfo, 0); //AccuWeight
			Write32(pKartRefitInfo, 0); //ShapeRefitCount
			Write32(pKartRefitInfo, 0); //KartHeadRefitItemID
			Write32(pKartRefitInfo, 0); //KartTailRefitItemID
			Write32(pKartRefitInfo, 0); //KartFlankRefitItemID
			Write32(pKartRefitInfo, 0); //KartTireRefitItemID
			Write32(pKartRefitInfo, 0); //SecondRefitCount
			Write16(pKartRefitInfo, 0); //Speed2Weight
			Write16(pKartRefitInfo, 0); //DriftVecWeight
			Write16(pKartRefitInfo, 0); //AdditionalZSpeedWeight
			Write16(pKartRefitInfo, 0); //AntiCollisionWeight
			Write16(pKartRefitInfo, 0); //LuckyValue
			Write16(pKartRefitInfo, 0); //RefitLuckyValueMaxWeight
			Write32(pKartRefitInfo, 0); //ShapeSuitID
			Write8(pKartRefitInfo, 0); //LegendSuitLevel
			Write32(pKartRefitInfo, 0); //LegendSuitLevelChoice
			Write32(pKartRefitInfo, 0); //ShapeLegendSuitID

			len = pKartRefitInfo - pTeamPlayerInfo;
			Set16(pTeamPlayerInfo, (WORD)len);
			pTeamPlayerInfo += len;
		}
		WriteUn(pTeamPlayerInfo, 0); //VipFlag
		{ //NobleInfo
			BYTE* pNobleInfo = pTeamPlayerInfo;
			Write16(pNobleInfo, 0); //len

			Write32(pNobleInfo, 0); //NobleID
			Write8(pNobleInfo, 0); //NobleLevel
			Write32(pNobleInfo, 0); //NoblePoint
			Write32(pNobleInfo, 0); //NobleLeftDays

			len = pNobleInfo - pTeamPlayerInfo;
			Set16(pTeamPlayerInfo, (WORD)len);
			pTeamPlayerInfo += len;
		}
		{ //GuildVipBaseInfo
			BYTE* pGuildVipBaseInfo = pTeamPlayerInfo;
			Write16(pGuildVipBaseInfo, 0); //len

			Write8(pGuildVipBaseInfo, 0); //GuildVipLevel
			Write32(pGuildVipBaseInfo, 0); //GuildVipPoint

			len = pGuildVipBaseInfo - pTeamPlayerInfo;
			Set16(pTeamPlayerInfo, (WORD)len);
			pTeamPlayerInfo += len;
		}
		Write8(pTeamPlayerInfo, 0); //HasLoverVip
		for (size_t i = 0; i < n; i++)
		{ //LoverVipInfo
			BYTE* pLoverVipInfo = pTeamPlayerInfo;
			Write16(pLoverVipInfo, 0); //len

			Write8(pLoverVipInfo, 0); //LoverVipLevel
			Write32(pLoverVipInfo, 0); //LoverVipPoint
			Write8(pLoverVipInfo, 0); //GrowRate

			len = pLoverVipInfo - pTeamPlayerInfo;
			Set16(pTeamPlayerInfo, (WORD)len);
			pTeamPlayerInfo += len;
		}
		Write8(pTeamPlayerInfo, 0); //GardenLevel
		{ //EmperorInfo
			BYTE* pEmperorInfo = pTeamPlayerInfo;
			Write16(pEmperorInfo, 0); //len

			Write8(pEmperorInfo, 0); //EmperorLevel
			Write32(pEmperorInfo, 0); //EmperorPoint
			Write32(pEmperorInfo, 0); //EmperorLeftDays
			Write8(pEmperorInfo, 0); //EmperorGrowRate

			len = pEmperorInfo - pTeamPlayerInfo;
			Set16(pTeamPlayerInfo, (WORD)len);
			pTeamPlayerInfo += len;
		}
		{ //ConsumeVipInfo
			BYTE* pConsumeVipInfo = pTeamPlayerInfo;
			Write16(pConsumeVipInfo, 0); //len

			WriteUn(pConsumeVipInfo, 0); //VipLevel
			WriteUn(pConsumeVipInfo, 0); //CharmValueOfMonth
			WriteUn(pConsumeVipInfo, 0); //SearchTreasureNums
			WriteUn(pConsumeVipInfo, 0); //GetTreasureNums

			len = pConsumeVipInfo - pTeamPlayerInfo;
			Set16(pTeamPlayerInfo, (WORD)len);
			pTeamPlayerInfo += len;
		}

		len = pTeamPlayerInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 628, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyTeamMatchNotice(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //MsgLen

	len = p - buf;
	SendToClient(Client, 629, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestQuickEnterTeamRoom(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	Un Time = ReadUn(p);

}

void ResponseQuickEnterTeamRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 220, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetLimitKartList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetLimitKartList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //KartNum
	Write32(p, 0); //KartList[]

	len = p - buf;
	SendToClient(Client, 217, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestScoreRules(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetScoreRules(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //Num
	for (size_t i = 0; i < n; i++)
	{ //ScoreRules
		BYTE* pScoreRules = p;
		Write16(pScoreRules, 0); //len

		Write32(pScoreRules, 0); //RightBorder
		Write32(pScoreRules, 0); //Value

		len = pScoreRules - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 218, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetMemberInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Tiem = Read32(p);
	UINT GuildID = Read32(p);

}

void ResponseGetMemberInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //GuildID
	Write16(p, 0); //Member
	for (size_t i = 0; i < n; i++)
	{ //MemberInfo
		BYTE* pMemberInfo = p;
		Write16(pMemberInfo, 0); //len

		Write32(pMemberInfo, 0); //Uin
		Write32(pMemberInfo, 0); //SelfPoint
		Write32(pMemberInfo, 0); //WinMatchNum
		Write32(pMemberInfo, 0); //TotalMatchNum

		len = pMemberInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 200, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetAllTeam(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetAllTeam(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //TeamCount
	for (size_t i = 0; i < n; i++)
	{ //TeamInfo
		BYTE* pTeamInfo = p;
		Write16(pTeamInfo, 0); //len

		Write32(pTeamInfo, 0); //TeamID
		Write8(pTeamInfo, 0); //Type
		Write32(pTeamInfo, 0); //MemberCount
		Write8(pTeamInfo, 0); //InRoom
		Write32(pTeamInfo, 0); //Uin
		WriteString(pTeamInfo, 0); //LeaderName[]

		len = pTeamInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 201, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestChangeTeamLeader(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT DstUin = Read32(p);

}

void ResponseChangeTeamLeader(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyChangeTeamLeader(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //OldLeader
	Write32(p, 0); //NewLeader
	Write8(p, 0); //IsSelfTeam

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestEnterTeamMatchServer(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseEnterTeamMatchServer(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 250, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyTopListDesc(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //Count
	for (size_t i = 0; i < n; i++)
	{ //Descs
		BYTE* pDescs = p;
		Write16(pDescs, 0); //len

		Write16(pDescs, 0); //ID
		WriteString(pDescs, 0); //Name[]
		WriteString(pDescs, 0); //ValueDesc[]
		WriteString(pDescs, 0); //TitleName[]
		Write8(pDescs, 0); //HasOtherInfo
		for (size_t i = 0; i < n; i++)
		{ //Other
			BYTE* pOther = pDescs;
			Write16(pOther, 0); //len

			WriteString(pOther, 0); //IntParaDesc0[]
			WriteString(pOther, 0); //IntParaDesc1[]
			WriteString(pOther, 0); //StrParaDesc0[]
			WriteString(pOther, 0); //StrParaDesc1[]

			len = pOther - pDescs;
			Set16(pDescs, (WORD)len);
			pDescs += len;
		}
		Write8(pDescs, 0); //IsEnableSelfRank

		len = pDescs - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 701, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestTopList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	Un Time = ReadUn(p);
	USHORT ID = Read16(p);
	UCHAR Type = Read8(p);

}

void ResponseTopList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ID
	Write16(p, 0); //Count
	for (size_t i = 0; i < n; i++)
	{ //Items
		BYTE* pItems = p;
		Write16(pItems, 0); //len

		Write32(pItems, 0); //Uin
		WriteString(pItems, 0); //NickName[]
		Write32(pItems, 0); //Value
		Write8(pItems, 0); //HasOtherInfo
		for (size_t i = 0; i < n; i++)
		{ //Other
			BYTE* pOther = pItems;
			Write16(pOther, 0); //len

			Write32(pOther, 0); //IntPara0
			Write32(pOther, 0); //IntPara1
			WriteString(pOther, 0); //StrPara0[]
			WriteString(pOther, 0); //StrPara1[]
			Write32(pOther, 0); //IntPara2
			Write8(pOther, 0); //HasMapInfo
			for (size_t i = 0; i < n; i++)
			{ //MapInfo
				BYTE* pMapInfo = pOther;
				Write16(pMapInfo, 0); //len

				Write8(pMapInfo, 0); //MapItemNum
				for (size_t i = 0; i < n; i++)
				{ //MapItemList
					BYTE* pMapItemList = pMapInfo;
					Write16(pMapItemList, 0); //len

					Write32(pMapItemList, 0); //Uin
					Write8(pMapItemList, 0); //Area

					len = pMapItemList - pMapInfo;
					Set16(pMapInfo, (WORD)len);
					pMapInfo += len;
				}

				len = pMapInfo - pOther;
				Set16(pOther, (WORD)len);
				pOther += len;
			}

			len = pOther - pItems;
			Set16(pItems, (WORD)len);
			pItems += len;
		}
		Write8(pItems, 0); //AreaId
		Write8(pItems, 0); //ParaNum
		Write32(pItems, 0); //Para[]
		Write8(pItems, 0); //AnchorNum
		for (size_t i = 0; i < n; i++)
		{ //AnchorInfo
			BYTE* pAnchorInfo = pItems;
			Write16(pAnchorInfo, 0); //len

			Write32(pAnchorInfo, 0); //Uin
			Write32(pAnchorInfo, 0); //RoomID
			Write8(pAnchorInfo, 0); //StrNum

			len = pAnchorInfo - pItems;
			Set16(pItems, (WORD)len);
			pItems += len;
		}

		len = pItems - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //SelfRank
	Write32(p, 0); //BeginRank
	Write32(p, 0); //UperPercentage

	len = p - buf;
	SendToClient(Client, 461, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestDanceGetRoomList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	short StartRoomIdx = Read16(p);
	short GetRoomNum = Read16(p);
	short BaseGameMode = Read16(p);
	short SubGameMode = Read16(p);
	bool RoomFlag = Read8(p);

}

void ResponseDanceGetRoomList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	WriteUn(p, 0); //Uin
	Write16(p, 0); //CurTotalRoomNum
	Write16(p, 0); //StartIdx
	Write16(p, 0); //RoomNum
	for (size_t i = 0; i < n; i++)
	{ //DanceRooms
		BYTE* pDanceRooms = p;
		Write16(pDanceRooms, 0); //len

		Write16(pDanceRooms, 0); //RoomID
		Write16(pDanceRooms, 0); //BaseGameMode
		Write16(pDanceRooms, 0); //SubGameMode
		Write8(pDanceRooms, 0); //CurrentPlayerNum
		Write8(pDanceRooms, 0); //TotalSeatNum
		Write8(pDanceRooms, 0); //Status
		Write32(pDanceRooms, 0); //Mode
		Write32(pDanceRooms, 0); //SceneID
		Write32(pDanceRooms, 0); //MusicID
		Write8(pDanceRooms, 0); //RandKeyFlag
		Write8(pDanceRooms, 0); //Flag
		WriteString(pDanceRooms, 0); //RoomName[]
		Write16(pDanceRooms, 0); //SvrId
		Write16(pDanceRooms, 0); //SceneID
		Write8(pDanceRooms, 0); //CurrentOBNum
		Write8(pDanceRooms, 0); //TotalOBNum
		Write8(pDanceRooms, 0); //AllowAutoStart

		len = pDanceRooms - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen
	Write16(p, 0); //BaseGameMode
	Write16(p, 0); //SubGameMode
	Write8(p, 0); //RoomFlag

	len = p - buf;
	SendToClient(Client, 251, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestDanceEnterRoom(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	short RoomID = Read16(p);
	char[] Password[] = ReadString(p);
	BYTE InviteType = Read8(p);
	Un InviterUin = ReadUn(p);
	bool RoomFlag = Read8(p);

}

void ResponseDanceEnterRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //RoomID
	Write16(p, 0); //BaseGameMode
	Write16(p, 0); //SubGameMode
	WriteString(p, 0); //RoomName[]
	Write8(p, 0); //SeatNum
	Write8(p, 0); //Flag
	Write8(p, 0); //SeatID
	Write8(p, 0); //TeamID
	Write32(p, 0); //Mode
	Write32(p, 0); //SceneID
	Write32(p, 0); //MusicID
	Write8(p, 0); //RandKeyFlag
	Write16(p, 0); //RoomOwnerID
	Write8(p, 0); //SeatStatus[]
	Write8(p, 0); //PlayerCount
	for (size_t i = 0; i < n; i++)
	{ //PlayerRoomVisibleInfo
		BYTE* pPlayerRoomVisibleInfo = p;
		Write16(pPlayerRoomVisibleInfo, 0); //len

		WriteUn(pPlayerRoomVisibleInfo, 0); //Uin
		WriteUn(pPlayerRoomVisibleInfo, 0); //Identity
		Write8(pPlayerRoomVisibleInfo, 0); //SeatID
		Write8(pPlayerRoomVisibleInfo, 0); //TeamID
		Write16(pPlayerRoomVisibleInfo, 0); //PlayerID
		Write8(pPlayerRoomVisibleInfo, 0); //Status
		{ //PlayerDBBaseInfo
			BYTE* pPlayerDBBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerDBBaseInfo, 0); //len

			WriteString(pPlayerDBBaseInfo, 0); //NickName[]
			Write8(pPlayerDBBaseInfo, 0); //Gender
			Write8(pPlayerDBBaseInfo, 0); //Country
			Write32(pPlayerDBBaseInfo, 0); //License
			WriteUn(pPlayerDBBaseInfo, 0); //Experience
			Write32(pPlayerDBBaseInfo, 0); //SuperMoney
			Write32(pPlayerDBBaseInfo, 0); //Money
			WriteUn(pPlayerDBBaseInfo, 0); //WinNum
			Write32(pPlayerDBBaseInfo, 0); //SecondNum
			Write32(pPlayerDBBaseInfo, 0); //ThirdNum
			WriteUn(pPlayerDBBaseInfo, 0); //TotalNum
			Write32(pPlayerDBBaseInfo, 0); //CurHonor
			Write32(pPlayerDBBaseInfo, 0); //TotalHonor
			Write32(pPlayerDBBaseInfo, 0); //TodayHonor
			Write32(pPlayerDBBaseInfo, 0); //RelaxTime
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationBefore
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationCur
			Write32(pPlayerDBBaseInfo, 0); //Charm
			Write32(pPlayerDBBaseInfo, 0); //DurationGame
			Write32(pPlayerDBBaseInfo, 0); //DanceExp
			Write32(pPlayerDBBaseInfo, 0); //Coupons
			Write32(pPlayerDBBaseInfo, 0); //Admiration
			Write32(pPlayerDBBaseInfo, 0); //LuckMoney
			Write32(pPlayerDBBaseInfo, 0); //TeamWorkExp
			Write32(pPlayerDBBaseInfo, 0); //AchievePoint
			Write32(pPlayerDBBaseInfo, 0); //RegTime
			WriteString(pPlayerDBBaseInfo, 0); //Signature[]
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchPoint
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchNum
			Write16(pPlayerDBBaseInfo, 0); //LuckyMatchFirstNum
			Write8(pPlayerDBBaseInfo, 0); //LuckyMatchBestRand
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchWinNum
			Write32(pPlayerDBBaseInfo, 0); //FizzPointTotal
			Write16(pPlayerDBBaseInfo, 0); //FizzPointDaily
			Write16(pPlayerDBBaseInfo, 0); //FizzPointWeekly
			Write16(pPlayerDBBaseInfo, 0); //FizzPointLastWeek
			Write8(pPlayerDBBaseInfo, 0); //FizzLotteryStatus
			Write32(pPlayerDBBaseInfo, 0); //FizzLastUpdateTime
			Write32(pPlayerDBBaseInfo, 0); //SNSLocaleCode
			Write32(pPlayerDBBaseInfo, 0); //AuctionRightUnlockTime
			Write8(pPlayerDBBaseInfo, 0); //ReserveFlag
			Write32(pPlayerDBBaseInfo, 0); //CurConsumeScore
			Write32(pPlayerDBBaseInfo, 0); //HistoryConsumeScore
			Write8(pPlayerDBBaseInfo, 0); //CrashModeSponsorID
			Write32(pPlayerDBBaseInfo, 0); //Popularity
			Write32(pPlayerDBBaseInfo, 0); //LadderMatchAchievePoint
			Write32(pPlayerDBBaseInfo, 0); //Cash
			Write32(pPlayerDBBaseInfo, 0); //PlayerGPMIdentity
			Write32(pPlayerDBBaseInfo, 0); //PointTotalScore
			WriteUn(pPlayerDBBaseInfo, 0); //totalMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //lastMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalSeasonId
			WriteUn(pPlayerDBBaseInfo, 0); //lastClearMapMedalTime
			WriteUn(pPlayerDBBaseInfo, 0); //max2048Score
			WriteUn(pPlayerDBBaseInfo, 0); //curPlay2048LeftNum
			Write32(pPlayerDBBaseInfo, 0); //CheerValue
			Write16(pPlayerDBBaseInfo, 0); //SeasonID
			Write32(pPlayerDBBaseInfo, 0); //LastCheerValue
			Write32(pPlayerDBBaseInfo, 0); //SpeedBean
			Write32(pPlayerDBBaseInfo, 0); //SpeedCoin

			len = pPlayerDBBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //PlayerGuildInfo
			BYTE* pPlayerGuildInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerGuildInfo, 0); //len

			WriteString(pPlayerGuildInfo, 0); //GuildName[]
			Write16(pPlayerGuildInfo, 0); //Duty
			Write32(pPlayerGuildInfo, 0); //GuildID
			Write32(pPlayerGuildInfo, 0); //Right
			Write32(pPlayerGuildInfo, 0); //Medal
			Write32(pPlayerGuildInfo, 0); //Contribute
			WriteString(pPlayerGuildInfo, 0); //DutyTitle[]

			len = pPlayerGuildInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write16(pPlayerRoomVisibleInfo, 0); //EquipedItemNum
		for (size_t i = 0; i < n; i++)
		{ //PlayerItemInfo
			BYTE* pPlayerItemInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerItemInfo, 0); //len

			Write32(pPlayerItemInfo, 0); //ItemID
			Write32(pPlayerItemInfo, 0); //ItemNum
			Write32(pPlayerItemInfo, 0); //AvailPeriod
			Write8(pPlayerItemInfo, 0); //Status
			WriteUn(pPlayerItemInfo, 0); //ObtainTime
			Write32(pPlayerItemInfo, 0); //OtherAttribute
			Write16(pPlayerItemInfo, 0); //ItemType

			len = pPlayerItemInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write16(pPlayerRoomVisibleInfo, 0); //PetNum
		for (size_t i = 0; i < n; i++)
		{ //PetInfo
			BYTE* pPetInfo = pPlayerRoomVisibleInfo;
			Write16(pPetInfo, 0); //len

			Write32(pPetInfo, 0); //Uin
			Write32(pPetInfo, 0); //PetId
			WriteString(pPetInfo, 0); //PetName[]
			Write8(pPetInfo, 0); //IsProper
			Write16(pPetInfo, 0); //Level
			Write8(pPetInfo, 0); //Status
			Write16(pPetInfo, 0); //PetSkillNum
			for (size_t i = 0; i < n; i++)
			{ //PetSkillList
				BYTE* pPetSkillList = pPetInfo;
				Write16(pPetSkillList, 0); //len

				Write16(pPetSkillList, 0); //SkillID
				Write8(pPetSkillList, 0); //Status
				Write8(pPetSkillList, 0); //Active
				Write32(pPetSkillList, 0); //Value

				len = pPetSkillList - pPetInfo;
				Set16(pPetInfo, (WORD)len);
				pPetInfo += len;
			}
			Write32(pPetInfo, 0); //StrengLevel
			Write8(pPetInfo, 0); //TopStatus
			{ //CommonInfo
				BYTE* pCommonInfo = pPetInfo;
				Write16(pCommonInfo, 0); //len

				Write32(pCommonInfo, 0); //HuanHuaLevel
				Write8(pCommonInfo, 0); //CanHuanHua

				len = pCommonInfo - pPetInfo;
				Set16(pPetInfo, (WORD)len);
				pPetInfo += len;
			}
			Write16(pPetInfo, 0); //PKStar
			Write32(pPetInfo, 0); //PetSkinID

			len = pPetInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //PlayerGuildMatchInfo
			BYTE* pPlayerGuildMatchInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerGuildMatchInfo, 0); //len

			Write32(pPlayerGuildMatchInfo, 0); //SelfPoint
			Write32(pPlayerGuildMatchInfo, 0); //WinNum
			Write32(pPlayerGuildMatchInfo, 0); //TotalNum

			len = pPlayerGuildMatchInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //IsInTopList
		Write8(pPlayerRoomVisibleInfo, 0); //LoverRaceOrPro
		Write8(pPlayerRoomVisibleInfo, 0); //TmpEffectNum
		Write32(pPlayerRoomVisibleInfo, 0); //TmpEffectItems[]
		Write8(pPlayerRoomVisibleInfo, 0); //OBState
		Write8(pPlayerRoomVisibleInfo, 0); //DebutOrX5
		Write8(pPlayerRoomVisibleInfo, 0); //RandKeyFlag
		WriteUn(pPlayerRoomVisibleInfo, 0); //VipFlag
		Write8(pPlayerRoomVisibleInfo, 0); //HaveAppellation
		for (size_t i = 0; i < n; i++)
		{ //CurAppellation
			BYTE* pCurAppellation = pPlayerRoomVisibleInfo;
			Write16(pCurAppellation, 0); //len

			Write8(pCurAppellation, 0); //Type
			Write8(pCurAppellation, 0); //Level
			Write8(pCurAppellation, 0); //Status
			Write8(pCurAppellation, 0); //Difficulty
			Write32(pCurAppellation, 0); //MapId
			Write32(pCurAppellation, 0); //Value

			len = pCurAppellation - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //NobleInfo
			BYTE* pNobleInfo = pPlayerRoomVisibleInfo;
			Write16(pNobleInfo, 0); //len

			Write32(pNobleInfo, 0); //NobleID
			Write8(pNobleInfo, 0); //NobleLevel
			Write32(pNobleInfo, 0); //NoblePoint
			Write32(pNobleInfo, 0); //NobleLeftDays

			len = pNobleInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasCarryWizard
		for (size_t i = 0; i < n; i++)
		{ //CarryWizardInfo
			BYTE* pCarryWizardInfo = pPlayerRoomVisibleInfo;
			Write16(pCarryWizardInfo, 0); //len

			Write16(pCarryWizardInfo, 0); //WizardID
			WriteString(pCarryWizardInfo, 0); //NickName[]
			Write16(pCarryWizardInfo, 0); //WizardType
			Write8(pCarryWizardInfo, 0); //Order
			Write8(pCarryWizardInfo, 0); //EvolutionBranch
			Write8(pCarryWizardInfo, 0); //IsHuanHua

			len = pCarryWizardInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //GuildVipBaseInfo
			BYTE* pGuildVipBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pGuildVipBaseInfo, 0); //len

			Write8(pGuildVipBaseInfo, 0); //GuildVipLevel
			Write32(pGuildVipBaseInfo, 0); //GuildVipPoint

			len = pGuildVipBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write32(pPlayerRoomVisibleInfo, 0); //ExFlag
		Write8(pPlayerRoomVisibleInfo, 0); //HaveLDMBaseInfo
		for (size_t i = 0; i < n; i++)
		{ //PlayerLDMBaseInfo
			BYTE* pPlayerLDMBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerLDMBaseInfo, 0); //len

			Write8(pPlayerLDMBaseInfo, 0); //Grade
			Write32(pPlayerLDMBaseInfo, 0); //Score
			Write32(pPlayerLDMBaseInfo, 0); //MaxScore
			Write32(pPlayerLDMBaseInfo, 0); //MaxGrade

			len = pPlayerLDMBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasWl
		for (size_t i = 0; i < n; i++)
		{ //PlayerWlVisibleInfo
			BYTE* pPlayerWlVisibleInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerWlVisibleInfo, 0); //len

			Write32(pPlayerWlVisibleInfo, 0); //WonderLandID
			WriteString(pPlayerWlVisibleInfo, 0); //WonderLandName[]
			Write16(pPlayerWlVisibleInfo, 0); //WonderLandDuty
			Write8(pPlayerWlVisibleInfo, 0); //SubType
			Write8(pPlayerWlVisibleInfo, 0); //GuildGrade

			len = pPlayerWlVisibleInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasLoverVip
		for (size_t i = 0; i < n; i++)
		{ //LoverVipInfo
			BYTE* pLoverVipInfo = pPlayerRoomVisibleInfo;
			Write16(pLoverVipInfo, 0); //len

			Write8(pLoverVipInfo, 0); //LoverVipLevel
			Write32(pLoverVipInfo, 0); //LoverVipPoint
			Write8(pLoverVipInfo, 0); //GrowRate

			len = pLoverVipInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasBattleModeSkillInfoList
		for (size_t i = 0; i < n; i++)
		{ //BattleModeSkillInfoList
			BYTE* pBattleModeSkillInfoList = pPlayerRoomVisibleInfo;
			Write16(pBattleModeSkillInfoList, 0); //len

			Write8(pBattleModeSkillInfoList, 0); //SkillNum
			for (size_t i = 0; i < n; i++)
			{ //SkillInfo
				BYTE* pSkillInfo = pBattleModeSkillInfoList;
				Write16(pSkillInfo, 0); //len

				Write16(pSkillInfo, 0); //SkillId
				Write8(pSkillInfo, 0); //SkillLevel

				len = pSkillInfo - pBattleModeSkillInfoList;
				Set16(pBattleModeSkillInfoList, (WORD)len);
				pBattleModeSkillInfoList += len;
			}

			len = pBattleModeSkillInfoList - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasGarden
		for (size_t i = 0; i < n; i++)
		{ //PersonalGardenBaseInfo
			BYTE* pPersonalGardenBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pPersonalGardenBaseInfo, 0); //len

			Write8(pPersonalGardenBaseInfo, 0); //GardenLevel
			Write32(pPersonalGardenBaseInfo, 0); //GardenPoint
			Write8(pPersonalGardenBaseInfo, 0); //GrowRate
			Write32(pPersonalGardenBaseInfo, 0); //GardenExpireTime
			{ //SimpleInfo
				BYTE* pSimpleInfo = pPersonalGardenBaseInfo;
				Write16(pSimpleInfo, 0); //len

				Write32(pSimpleInfo, 0); //WeekPopularity
				Write32(pSimpleInfo, 0); //TotalPopularity
				Write32(pSimpleInfo, 0); //LastUpdatePopularityTime
				Write8(pSimpleInfo, 0); //PrivateType

				len = pSimpleInfo - pPersonalGardenBaseInfo;
				Set16(pPersonalGardenBaseInfo, (WORD)len);
				pPersonalGardenBaseInfo += len;
			}

			len = pPersonalGardenBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //ConsumeVipInfo
			BYTE* pConsumeVipInfo = pPlayerRoomVisibleInfo;
			Write16(pConsumeVipInfo, 0); //len

			WriteUn(pConsumeVipInfo, 0); //VipLevel
			WriteUn(pConsumeVipInfo, 0); //CharmValueOfMonth
			WriteUn(pConsumeVipInfo, 0); //SearchTreasureNums
			WriteUn(pConsumeVipInfo, 0); //GetTreasureNums

			len = pConsumeVipInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HaveBaby
		{ //LoverBabyInfo
			BYTE* pLoverBabyInfo = pPlayerRoomVisibleInfo;
			Write16(pLoverBabyInfo, 0); //len

			Write32(pLoverBabyInfo, 0); //LoverBabyID
			Write32(pLoverBabyInfo, 0); //ItemID
			Write32(pLoverBabyInfo, 0); //GrowValue
			Write32(pLoverBabyInfo, 0); //MentalValue
			Write32(pLoverBabyInfo, 0); //BabyProfileLevel
			Write32(pLoverBabyInfo, 0); //StrengthLevel
			Write32(pLoverBabyInfo, 0); //GrowLevel
			WriteString(pLoverBabyInfo, 0); //LoveBabyNickName[]
			Write16(pLoverBabyInfo, 0); //LoverBabyStat
			Write16(pLoverBabyInfo, 0); //LoverBabyEquipStat
			Write16(pLoverBabyInfo, 0); //LoverBabyTransferdStatus

			len = pLoverBabyInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //EmperorInfo
			BYTE* pEmperorInfo = pPlayerRoomVisibleInfo;
			Write16(pEmperorInfo, 0); //len

			Write8(pEmperorInfo, 0); //EmperorLevel
			Write32(pEmperorInfo, 0); //EmperorPoint
			Write32(pEmperorInfo, 0); //EmperorLeftDays
			Write8(pEmperorInfo, 0); //EmperorGrowRate

			len = pEmperorInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write16(pPlayerRoomVisibleInfo, 0); //RaceCardNums
		for (size_t i = 0; i < n; i++)
		{ //RaceCardAddValueInfo
			BYTE* pRaceCardAddValueInfo = pPlayerRoomVisibleInfo;
			Write16(pRaceCardAddValueInfo, 0); //len

			Write32(pRaceCardAddValueInfo, 0); //RaceCardID
			Write32(pRaceCardAddValueInfo, 0); //AddValue

			len = pRaceCardAddValueInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //GansterScoreInfo
			BYTE* pGansterScoreInfo = pPlayerRoomVisibleInfo;
			Write16(pGansterScoreInfo, 0); //len

			Write32(pGansterScoreInfo, 0); //GansterSeasonID
			Write32(pGansterScoreInfo, 0); //GansterScore
			Write32(pGansterScoreInfo, 0); //PoliceScore
			Write32(pGansterScoreInfo, 0); //TotalGansterScore

			len = pGansterScoreInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write32(pPlayerRoomVisibleInfo, 0); //OlympicId
		Write32(pPlayerRoomVisibleInfo, 0); //NPCEliminateWinTimes
		Write8(pPlayerRoomVisibleInfo, 0); //OriginTeamID
		Write8(pPlayerRoomVisibleInfo, 0); //NxNpc
		Write16(pPlayerRoomVisibleInfo, 0); //NxNpcAILevel
		{ //EquippedActiveKartInfo
			BYTE* pEquippedActiveKartInfo = pPlayerRoomVisibleInfo;
			Write16(pEquippedActiveKartInfo, 0); //len

			Write8(pEquippedActiveKartInfo, 0); //HaveActiveInfo
			Write32(pEquippedActiveKartInfo, 0); //KartID
			Write32(pEquippedActiveKartInfo, 0); //ActiveLevel

			len = pEquippedActiveKartInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //SpecialActivityStatus
		Write8(pPlayerRoomVisibleInfo, 0); //AreaID
		Write8(pPlayerRoomVisibleInfo, 0); //HaveRaiseSecondBaby
		{ //SecondLoverBabyInfo
			BYTE* pSecondLoverBabyInfo = pPlayerRoomVisibleInfo;
			Write16(pSecondLoverBabyInfo, 0); //len

			Write32(pSecondLoverBabyInfo, 0); //LoverBabyID
			Write32(pSecondLoverBabyInfo, 0); //ItemID
			Write32(pSecondLoverBabyInfo, 0); //GrowValue
			Write32(pSecondLoverBabyInfo, 0); //MentalValue
			Write32(pSecondLoverBabyInfo, 0); //BabyProfileLevel
			Write32(pSecondLoverBabyInfo, 0); //StrengthLevel
			Write32(pSecondLoverBabyInfo, 0); //GrowLevel
			WriteString(pSecondLoverBabyInfo, 0); //LoveBabyNickName[]
			Write16(pSecondLoverBabyInfo, 0); //LoverBabyStat
			Write16(pSecondLoverBabyInfo, 0); //LoverBabyEquipStat
			Write16(pSecondLoverBabyInfo, 0); //LoverBabyTransferdStatus

			len = pSecondLoverBabyInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasRankedMatchInfo
		for (size_t i = 0; i < n; i++)
		{ //RankedMatchGradeInfo
			BYTE* pRankedMatchGradeInfo = pPlayerRoomVisibleInfo;
			Write16(pRankedMatchGradeInfo, 0); //len

			Write32(pRankedMatchGradeInfo, 0); //GradeLevel
			Write32(pRankedMatchGradeInfo, 0); //ChildLevel
			Write32(pRankedMatchGradeInfo, 0); //GradeScore
			Write32(pRankedMatchGradeInfo, 0); //MaxGradeScore
			Write32(pRankedMatchGradeInfo, 0); //TotalScore

			len = pRankedMatchGradeInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasHuanLingChangeInfo
		for (size_t i = 0; i < n; i++)
		{ //HuanLingSuitInfo
			BYTE* pHuanLingSuitInfo = pPlayerRoomVisibleInfo;
			Write16(pHuanLingSuitInfo, 0); //len

			Write32(pHuanLingSuitInfo, 0); //SuitID
			Write8(pHuanLingSuitInfo, 0); //ChangeLevel

			len = pHuanLingSuitInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //EquipSealType
		Write16(pPlayerRoomVisibleInfo, 0); //Role
		Write8(pPlayerRoomVisibleInfo, 0); //SpecialActivityIDNum
		Write8(pPlayerRoomVisibleInfo, 0); //CrewID
		Write8(pPlayerRoomVisibleInfo, 0); //SpecialActivityInfoNum
		for (size_t i = 0; i < n; i++)
		{ //SpecialActivityInfo
			BYTE* pSpecialActivityInfo = pPlayerRoomVisibleInfo;
			Write16(pSpecialActivityInfo, 0); //len

			Write8(pSpecialActivityInfo, 0); //ProfessionLicenseInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ProfessionLicenseInfo
				BYTE* pProfessionLicenseInfo = pSpecialActivityInfo;
				Write16(pProfessionLicenseInfo, 0); //len

				Write8(pProfessionLicenseInfo, 0); //BigLevel
				Write8(pProfessionLicenseInfo, 0); //SmallLevel

				len = pProfessionLicenseInfo - pSpecialActivityInfo;
				Set16(pSpecialActivityInfo, (WORD)len);
				pSpecialActivityInfo += len;
			}

			len = pSpecialActivityInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //ParaNum
		Write32(pPlayerRoomVisibleInfo, 0); //ParaList[]
		Write8(pPlayerRoomVisibleInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemOrder
			BYTE* pItemOrder = pPlayerRoomVisibleInfo;
			Write16(pItemOrder, 0); //len

			Write32(pItemOrder, 0); //KartID
			Write32(pItemOrder, 0); //Order
			Write32(pItemOrder, 0); //BackGroundID

			len = pItemOrder - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //TDCExcluItemNum
		Write32(pPlayerRoomVisibleInfo, 0); //TDCExclusiveItemID[]
		Write8(pPlayerRoomVisibleInfo, 0); //EquipNiChangItemNum
		for (size_t i = 0; i < n; i++)
		{ //NiChangPavilionEquipItemInfo
			BYTE* pNiChangPavilionEquipItemInfo = pPlayerRoomVisibleInfo;
			Write16(pNiChangPavilionEquipItemInfo, 0); //len

			Write32(pNiChangPavilionEquipItemInfo, 0); //ItemId
			Write16(pNiChangPavilionEquipItemInfo, 0); //CurrentEquipColorationPlanId

			len = pNiChangPavilionEquipItemInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //TestKartGameType
		Write32(pPlayerRoomVisibleInfo, 0); //GameTestKartID
		Write8(pPlayerRoomVisibleInfo, 0); //HasStarsFightingInfo
		for (size_t i = 0; i < n; i++)
		{ //StarsFightingInfo
			BYTE* pStarsFightingInfo = pPlayerRoomVisibleInfo;
			Write16(pStarsFightingInfo, 0); //len

			Write32(pStarsFightingInfo, 0); //Star
			Write32(pStarsFightingInfo, 0); //StarVal
			Write32(pStarsFightingInfo, 0); //StarsFightingStarLevel

			len = pStarsFightingInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //RoomBGSetting

		len = pPlayerRoomVisibleInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen
	Write8(p, 0); //PlayerCount2
	for (size_t i = 0; i < n; i++)
	{ //PlayerRelationInfo
		BYTE* pPlayerRelationInfo = p;
		Write16(pPlayerRelationInfo, 0); //len

		Write32(pPlayerRelationInfo, 0); //SrcUin
		Write32(pPlayerRelationInfo, 0); //RelationFlag
		Write32(pPlayerRelationInfo, 0); //RelationUin
		WriteString(pPlayerRelationInfo, 0); //RelationNickName[]
		Write32(pPlayerRelationInfo, 0); //EngageTime
		Write32(pPlayerRelationInfo, 0); //NextCanBookingTimeLimit
		Write32(pPlayerRelationInfo, 0); //BeginHoneyMoonTime
		Write32(pPlayerRelationInfo, 0); //EndHoneyMoonTime
		Write8(pPlayerRelationInfo, 0); //EngageFlag

		len = pPlayerRelationInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //DebutOrX5
	Write32(p, 0); //PreKnownMusicID
	Write8(p, 0); //HasMoreInfo
	Write16(p, 0); //KartNum
	for (size_t i = 0; i < n; i++)
	{ //KartRefitInfo
		BYTE* pKartRefitInfo = p;
		Write16(pKartRefitInfo, 0); //len

		Write32(pKartRefitInfo, 0); //Uin
		Write32(pKartRefitInfo, 0); //KartId
		Write32(pKartRefitInfo, 0); //RefitCout
		Write16(pKartRefitInfo, 0); //MaxFlags
		Write16(pKartRefitInfo, 0); //WWeight
		Write16(pKartRefitInfo, 0); //SpeedWeight
		Write16(pKartRefitInfo, 0); //JetWeight
		Write16(pKartRefitInfo, 0); //SJetWeight
		Write16(pKartRefitInfo, 0); //AccuWeight
		Write32(pKartRefitInfo, 0); //ShapeRefitCount
		Write32(pKartRefitInfo, 0); //KartHeadRefitItemID
		Write32(pKartRefitInfo, 0); //KartTailRefitItemID
		Write32(pKartRefitInfo, 0); //KartFlankRefitItemID
		Write32(pKartRefitInfo, 0); //KartTireRefitItemID
		Write32(pKartRefitInfo, 0); //SecondRefitCount
		Write16(pKartRefitInfo, 0); //Speed2Weight
		Write16(pKartRefitInfo, 0); //DriftVecWeight
		Write16(pKartRefitInfo, 0); //AdditionalZSpeedWeight
		Write16(pKartRefitInfo, 0); //AntiCollisionWeight
		Write16(pKartRefitInfo, 0); //LuckyValue
		Write16(pKartRefitInfo, 0); //RefitLuckyValueMaxWeight
		Write32(pKartRefitInfo, 0); //ShapeSuitID
		Write8(pKartRefitInfo, 0); //LegendSuitLevel
		Write32(pKartRefitInfo, 0); //LegendSuitLevelChoice
		Write32(pKartRefitInfo, 0); //ShapeLegendSuitID

		len = pKartRefitInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //RoomFlag
	Write8(p, 0); //MaxOBNum
	Write8(p, 0); //AllowAutoStart
	Write8(p, 0); //GVoiceRoomNameLen
	Write8(p, 0); //GVoiceReasonLen

	len = p - buf;
	SendToClient(Client, 252, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyEnterDanceRoomMoreInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //PlayerCount
	for (size_t i = 0; i < n; i++)
	{ //PlayerRoomVisibleInfo
		BYTE* pPlayerRoomVisibleInfo = p;
		Write16(pPlayerRoomVisibleInfo, 0); //len

		WriteUn(pPlayerRoomVisibleInfo, 0); //Uin
		WriteUn(pPlayerRoomVisibleInfo, 0); //Identity
		Write8(pPlayerRoomVisibleInfo, 0); //SeatID
		Write8(pPlayerRoomVisibleInfo, 0); //TeamID
		Write16(pPlayerRoomVisibleInfo, 0); //PlayerID
		Write8(pPlayerRoomVisibleInfo, 0); //Status
		{ //PlayerDBBaseInfo
			BYTE* pPlayerDBBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerDBBaseInfo, 0); //len

			WriteString(pPlayerDBBaseInfo, 0); //NickName[]
			Write8(pPlayerDBBaseInfo, 0); //Gender
			Write8(pPlayerDBBaseInfo, 0); //Country
			Write32(pPlayerDBBaseInfo, 0); //License
			WriteUn(pPlayerDBBaseInfo, 0); //Experience
			Write32(pPlayerDBBaseInfo, 0); //SuperMoney
			Write32(pPlayerDBBaseInfo, 0); //Money
			WriteUn(pPlayerDBBaseInfo, 0); //WinNum
			Write32(pPlayerDBBaseInfo, 0); //SecondNum
			Write32(pPlayerDBBaseInfo, 0); //ThirdNum
			WriteUn(pPlayerDBBaseInfo, 0); //TotalNum
			Write32(pPlayerDBBaseInfo, 0); //CurHonor
			Write32(pPlayerDBBaseInfo, 0); //TotalHonor
			Write32(pPlayerDBBaseInfo, 0); //TodayHonor
			Write32(pPlayerDBBaseInfo, 0); //RelaxTime
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationBefore
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationCur
			Write32(pPlayerDBBaseInfo, 0); //Charm
			Write32(pPlayerDBBaseInfo, 0); //DurationGame
			Write32(pPlayerDBBaseInfo, 0); //DanceExp
			Write32(pPlayerDBBaseInfo, 0); //Coupons
			Write32(pPlayerDBBaseInfo, 0); //Admiration
			Write32(pPlayerDBBaseInfo, 0); //LuckMoney
			Write32(pPlayerDBBaseInfo, 0); //TeamWorkExp
			Write32(pPlayerDBBaseInfo, 0); //AchievePoint
			Write32(pPlayerDBBaseInfo, 0); //RegTime
			WriteString(pPlayerDBBaseInfo, 0); //Signature[]
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchPoint
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchNum
			Write16(pPlayerDBBaseInfo, 0); //LuckyMatchFirstNum
			Write8(pPlayerDBBaseInfo, 0); //LuckyMatchBestRand
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchWinNum
			Write32(pPlayerDBBaseInfo, 0); //FizzPointTotal
			Write16(pPlayerDBBaseInfo, 0); //FizzPointDaily
			Write16(pPlayerDBBaseInfo, 0); //FizzPointWeekly
			Write16(pPlayerDBBaseInfo, 0); //FizzPointLastWeek
			Write8(pPlayerDBBaseInfo, 0); //FizzLotteryStatus
			Write32(pPlayerDBBaseInfo, 0); //FizzLastUpdateTime
			Write32(pPlayerDBBaseInfo, 0); //SNSLocaleCode
			Write32(pPlayerDBBaseInfo, 0); //AuctionRightUnlockTime
			Write8(pPlayerDBBaseInfo, 0); //ReserveFlag
			Write32(pPlayerDBBaseInfo, 0); //CurConsumeScore
			Write32(pPlayerDBBaseInfo, 0); //HistoryConsumeScore
			Write8(pPlayerDBBaseInfo, 0); //CrashModeSponsorID
			Write32(pPlayerDBBaseInfo, 0); //Popularity
			Write32(pPlayerDBBaseInfo, 0); //LadderMatchAchievePoint
			Write32(pPlayerDBBaseInfo, 0); //Cash
			Write32(pPlayerDBBaseInfo, 0); //PlayerGPMIdentity
			Write32(pPlayerDBBaseInfo, 0); //PointTotalScore
			WriteUn(pPlayerDBBaseInfo, 0); //totalMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //lastMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalSeasonId
			WriteUn(pPlayerDBBaseInfo, 0); //lastClearMapMedalTime
			WriteUn(pPlayerDBBaseInfo, 0); //max2048Score
			WriteUn(pPlayerDBBaseInfo, 0); //curPlay2048LeftNum
			Write32(pPlayerDBBaseInfo, 0); //CheerValue
			Write16(pPlayerDBBaseInfo, 0); //SeasonID
			Write32(pPlayerDBBaseInfo, 0); //LastCheerValue
			Write32(pPlayerDBBaseInfo, 0); //SpeedBean
			Write32(pPlayerDBBaseInfo, 0); //SpeedCoin

			len = pPlayerDBBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //PlayerGuildInfo
			BYTE* pPlayerGuildInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerGuildInfo, 0); //len

			WriteString(pPlayerGuildInfo, 0); //GuildName[]
			Write16(pPlayerGuildInfo, 0); //Duty
			Write32(pPlayerGuildInfo, 0); //GuildID
			Write32(pPlayerGuildInfo, 0); //Right
			Write32(pPlayerGuildInfo, 0); //Medal
			Write32(pPlayerGuildInfo, 0); //Contribute
			WriteString(pPlayerGuildInfo, 0); //DutyTitle[]

			len = pPlayerGuildInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write16(pPlayerRoomVisibleInfo, 0); //EquipedItemNum
		for (size_t i = 0; i < n; i++)
		{ //PlayerItemInfo
			BYTE* pPlayerItemInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerItemInfo, 0); //len

			Write32(pPlayerItemInfo, 0); //ItemID
			Write32(pPlayerItemInfo, 0); //ItemNum
			Write32(pPlayerItemInfo, 0); //AvailPeriod
			Write8(pPlayerItemInfo, 0); //Status
			WriteUn(pPlayerItemInfo, 0); //ObtainTime
			Write32(pPlayerItemInfo, 0); //OtherAttribute
			Write16(pPlayerItemInfo, 0); //ItemType

			len = pPlayerItemInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write16(pPlayerRoomVisibleInfo, 0); //PetNum
		for (size_t i = 0; i < n; i++)
		{ //PetInfo
			BYTE* pPetInfo = pPlayerRoomVisibleInfo;
			Write16(pPetInfo, 0); //len

			Write32(pPetInfo, 0); //Uin
			Write32(pPetInfo, 0); //PetId
			WriteString(pPetInfo, 0); //PetName[]
			Write8(pPetInfo, 0); //IsProper
			Write16(pPetInfo, 0); //Level
			Write8(pPetInfo, 0); //Status
			Write16(pPetInfo, 0); //PetSkillNum
			for (size_t i = 0; i < n; i++)
			{ //PetSkillList
				BYTE* pPetSkillList = pPetInfo;
				Write16(pPetSkillList, 0); //len

				Write16(pPetSkillList, 0); //SkillID
				Write8(pPetSkillList, 0); //Status
				Write8(pPetSkillList, 0); //Active
				Write32(pPetSkillList, 0); //Value

				len = pPetSkillList - pPetInfo;
				Set16(pPetInfo, (WORD)len);
				pPetInfo += len;
			}
			Write32(pPetInfo, 0); //StrengLevel
			Write8(pPetInfo, 0); //TopStatus
			{ //CommonInfo
				BYTE* pCommonInfo = pPetInfo;
				Write16(pCommonInfo, 0); //len

				Write32(pCommonInfo, 0); //HuanHuaLevel
				Write8(pCommonInfo, 0); //CanHuanHua

				len = pCommonInfo - pPetInfo;
				Set16(pPetInfo, (WORD)len);
				pPetInfo += len;
			}
			Write16(pPetInfo, 0); //PKStar
			Write32(pPetInfo, 0); //PetSkinID

			len = pPetInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //PlayerGuildMatchInfo
			BYTE* pPlayerGuildMatchInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerGuildMatchInfo, 0); //len

			Write32(pPlayerGuildMatchInfo, 0); //SelfPoint
			Write32(pPlayerGuildMatchInfo, 0); //WinNum
			Write32(pPlayerGuildMatchInfo, 0); //TotalNum

			len = pPlayerGuildMatchInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //IsInTopList
		Write8(pPlayerRoomVisibleInfo, 0); //LoverRaceOrPro
		Write8(pPlayerRoomVisibleInfo, 0); //TmpEffectNum
		Write32(pPlayerRoomVisibleInfo, 0); //TmpEffectItems[]
		Write8(pPlayerRoomVisibleInfo, 0); //OBState
		Write8(pPlayerRoomVisibleInfo, 0); //DebutOrX5
		Write8(pPlayerRoomVisibleInfo, 0); //RandKeyFlag
		WriteUn(pPlayerRoomVisibleInfo, 0); //VipFlag
		Write8(pPlayerRoomVisibleInfo, 0); //HaveAppellation
		for (size_t i = 0; i < n; i++)
		{ //CurAppellation
			BYTE* pCurAppellation = pPlayerRoomVisibleInfo;
			Write16(pCurAppellation, 0); //len

			Write8(pCurAppellation, 0); //Type
			Write8(pCurAppellation, 0); //Level
			Write8(pCurAppellation, 0); //Status
			Write8(pCurAppellation, 0); //Difficulty
			Write32(pCurAppellation, 0); //MapId
			Write32(pCurAppellation, 0); //Value

			len = pCurAppellation - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //NobleInfo
			BYTE* pNobleInfo = pPlayerRoomVisibleInfo;
			Write16(pNobleInfo, 0); //len

			Write32(pNobleInfo, 0); //NobleID
			Write8(pNobleInfo, 0); //NobleLevel
			Write32(pNobleInfo, 0); //NoblePoint
			Write32(pNobleInfo, 0); //NobleLeftDays

			len = pNobleInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasCarryWizard
		for (size_t i = 0; i < n; i++)
		{ //CarryWizardInfo
			BYTE* pCarryWizardInfo = pPlayerRoomVisibleInfo;
			Write16(pCarryWizardInfo, 0); //len

			Write16(pCarryWizardInfo, 0); //WizardID
			WriteString(pCarryWizardInfo, 0); //NickName[]
			Write16(pCarryWizardInfo, 0); //WizardType
			Write8(pCarryWizardInfo, 0); //Order
			Write8(pCarryWizardInfo, 0); //EvolutionBranch
			Write8(pCarryWizardInfo, 0); //IsHuanHua

			len = pCarryWizardInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //GuildVipBaseInfo
			BYTE* pGuildVipBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pGuildVipBaseInfo, 0); //len

			Write8(pGuildVipBaseInfo, 0); //GuildVipLevel
			Write32(pGuildVipBaseInfo, 0); //GuildVipPoint

			len = pGuildVipBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write32(pPlayerRoomVisibleInfo, 0); //ExFlag
		Write8(pPlayerRoomVisibleInfo, 0); //HaveLDMBaseInfo
		for (size_t i = 0; i < n; i++)
		{ //PlayerLDMBaseInfo
			BYTE* pPlayerLDMBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerLDMBaseInfo, 0); //len

			Write8(pPlayerLDMBaseInfo, 0); //Grade
			Write32(pPlayerLDMBaseInfo, 0); //Score
			Write32(pPlayerLDMBaseInfo, 0); //MaxScore
			Write32(pPlayerLDMBaseInfo, 0); //MaxGrade

			len = pPlayerLDMBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasWl
		for (size_t i = 0; i < n; i++)
		{ //PlayerWlVisibleInfo
			BYTE* pPlayerWlVisibleInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerWlVisibleInfo, 0); //len

			Write32(pPlayerWlVisibleInfo, 0); //WonderLandID
			WriteString(pPlayerWlVisibleInfo, 0); //WonderLandName[]
			Write16(pPlayerWlVisibleInfo, 0); //WonderLandDuty
			Write8(pPlayerWlVisibleInfo, 0); //SubType
			Write8(pPlayerWlVisibleInfo, 0); //GuildGrade

			len = pPlayerWlVisibleInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasLoverVip
		for (size_t i = 0; i < n; i++)
		{ //LoverVipInfo
			BYTE* pLoverVipInfo = pPlayerRoomVisibleInfo;
			Write16(pLoverVipInfo, 0); //len

			Write8(pLoverVipInfo, 0); //LoverVipLevel
			Write32(pLoverVipInfo, 0); //LoverVipPoint
			Write8(pLoverVipInfo, 0); //GrowRate

			len = pLoverVipInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasBattleModeSkillInfoList
		for (size_t i = 0; i < n; i++)
		{ //BattleModeSkillInfoList
			BYTE* pBattleModeSkillInfoList = pPlayerRoomVisibleInfo;
			Write16(pBattleModeSkillInfoList, 0); //len

			Write8(pBattleModeSkillInfoList, 0); //SkillNum
			for (size_t i = 0; i < n; i++)
			{ //SkillInfo
				BYTE* pSkillInfo = pBattleModeSkillInfoList;
				Write16(pSkillInfo, 0); //len

				Write16(pSkillInfo, 0); //SkillId
				Write8(pSkillInfo, 0); //SkillLevel

				len = pSkillInfo - pBattleModeSkillInfoList;
				Set16(pBattleModeSkillInfoList, (WORD)len);
				pBattleModeSkillInfoList += len;
			}

			len = pBattleModeSkillInfoList - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasGarden
		for (size_t i = 0; i < n; i++)
		{ //PersonalGardenBaseInfo
			BYTE* pPersonalGardenBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pPersonalGardenBaseInfo, 0); //len

			Write8(pPersonalGardenBaseInfo, 0); //GardenLevel
			Write32(pPersonalGardenBaseInfo, 0); //GardenPoint
			Write8(pPersonalGardenBaseInfo, 0); //GrowRate
			Write32(pPersonalGardenBaseInfo, 0); //GardenExpireTime
			{ //SimpleInfo
				BYTE* pSimpleInfo = pPersonalGardenBaseInfo;
				Write16(pSimpleInfo, 0); //len

				Write32(pSimpleInfo, 0); //WeekPopularity
				Write32(pSimpleInfo, 0); //TotalPopularity
				Write32(pSimpleInfo, 0); //LastUpdatePopularityTime
				Write8(pSimpleInfo, 0); //PrivateType

				len = pSimpleInfo - pPersonalGardenBaseInfo;
				Set16(pPersonalGardenBaseInfo, (WORD)len);
				pPersonalGardenBaseInfo += len;
			}

			len = pPersonalGardenBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //ConsumeVipInfo
			BYTE* pConsumeVipInfo = pPlayerRoomVisibleInfo;
			Write16(pConsumeVipInfo, 0); //len

			WriteUn(pConsumeVipInfo, 0); //VipLevel
			WriteUn(pConsumeVipInfo, 0); //CharmValueOfMonth
			WriteUn(pConsumeVipInfo, 0); //SearchTreasureNums
			WriteUn(pConsumeVipInfo, 0); //GetTreasureNums

			len = pConsumeVipInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HaveBaby
		{ //LoverBabyInfo
			BYTE* pLoverBabyInfo = pPlayerRoomVisibleInfo;
			Write16(pLoverBabyInfo, 0); //len

			Write32(pLoverBabyInfo, 0); //LoverBabyID
			Write32(pLoverBabyInfo, 0); //ItemID
			Write32(pLoverBabyInfo, 0); //GrowValue
			Write32(pLoverBabyInfo, 0); //MentalValue
			Write32(pLoverBabyInfo, 0); //BabyProfileLevel
			Write32(pLoverBabyInfo, 0); //StrengthLevel
			Write32(pLoverBabyInfo, 0); //GrowLevel
			WriteString(pLoverBabyInfo, 0); //LoveBabyNickName[]
			Write16(pLoverBabyInfo, 0); //LoverBabyStat
			Write16(pLoverBabyInfo, 0); //LoverBabyEquipStat
			Write16(pLoverBabyInfo, 0); //LoverBabyTransferdStatus

			len = pLoverBabyInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //EmperorInfo
			BYTE* pEmperorInfo = pPlayerRoomVisibleInfo;
			Write16(pEmperorInfo, 0); //len

			Write8(pEmperorInfo, 0); //EmperorLevel
			Write32(pEmperorInfo, 0); //EmperorPoint
			Write32(pEmperorInfo, 0); //EmperorLeftDays
			Write8(pEmperorInfo, 0); //EmperorGrowRate

			len = pEmperorInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write16(pPlayerRoomVisibleInfo, 0); //RaceCardNums
		for (size_t i = 0; i < n; i++)
		{ //RaceCardAddValueInfo
			BYTE* pRaceCardAddValueInfo = pPlayerRoomVisibleInfo;
			Write16(pRaceCardAddValueInfo, 0); //len

			Write32(pRaceCardAddValueInfo, 0); //RaceCardID
			Write32(pRaceCardAddValueInfo, 0); //AddValue

			len = pRaceCardAddValueInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //GansterScoreInfo
			BYTE* pGansterScoreInfo = pPlayerRoomVisibleInfo;
			Write16(pGansterScoreInfo, 0); //len

			Write32(pGansterScoreInfo, 0); //GansterSeasonID
			Write32(pGansterScoreInfo, 0); //GansterScore
			Write32(pGansterScoreInfo, 0); //PoliceScore
			Write32(pGansterScoreInfo, 0); //TotalGansterScore

			len = pGansterScoreInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write32(pPlayerRoomVisibleInfo, 0); //OlympicId
		Write32(pPlayerRoomVisibleInfo, 0); //NPCEliminateWinTimes
		Write8(pPlayerRoomVisibleInfo, 0); //OriginTeamID
		Write8(pPlayerRoomVisibleInfo, 0); //NxNpc
		Write16(pPlayerRoomVisibleInfo, 0); //NxNpcAILevel
		{ //EquippedActiveKartInfo
			BYTE* pEquippedActiveKartInfo = pPlayerRoomVisibleInfo;
			Write16(pEquippedActiveKartInfo, 0); //len

			Write8(pEquippedActiveKartInfo, 0); //HaveActiveInfo
			Write32(pEquippedActiveKartInfo, 0); //KartID
			Write32(pEquippedActiveKartInfo, 0); //ActiveLevel

			len = pEquippedActiveKartInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //SpecialActivityStatus
		Write8(pPlayerRoomVisibleInfo, 0); //AreaID
		Write8(pPlayerRoomVisibleInfo, 0); //HaveRaiseSecondBaby
		{ //SecondLoverBabyInfo
			BYTE* pSecondLoverBabyInfo = pPlayerRoomVisibleInfo;
			Write16(pSecondLoverBabyInfo, 0); //len

			Write32(pSecondLoverBabyInfo, 0); //LoverBabyID
			Write32(pSecondLoverBabyInfo, 0); //ItemID
			Write32(pSecondLoverBabyInfo, 0); //GrowValue
			Write32(pSecondLoverBabyInfo, 0); //MentalValue
			Write32(pSecondLoverBabyInfo, 0); //BabyProfileLevel
			Write32(pSecondLoverBabyInfo, 0); //StrengthLevel
			Write32(pSecondLoverBabyInfo, 0); //GrowLevel
			WriteString(pSecondLoverBabyInfo, 0); //LoveBabyNickName[]
			Write16(pSecondLoverBabyInfo, 0); //LoverBabyStat
			Write16(pSecondLoverBabyInfo, 0); //LoverBabyEquipStat
			Write16(pSecondLoverBabyInfo, 0); //LoverBabyTransferdStatus

			len = pSecondLoverBabyInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasRankedMatchInfo
		for (size_t i = 0; i < n; i++)
		{ //RankedMatchGradeInfo
			BYTE* pRankedMatchGradeInfo = pPlayerRoomVisibleInfo;
			Write16(pRankedMatchGradeInfo, 0); //len

			Write32(pRankedMatchGradeInfo, 0); //GradeLevel
			Write32(pRankedMatchGradeInfo, 0); //ChildLevel
			Write32(pRankedMatchGradeInfo, 0); //GradeScore
			Write32(pRankedMatchGradeInfo, 0); //MaxGradeScore
			Write32(pRankedMatchGradeInfo, 0); //TotalScore

			len = pRankedMatchGradeInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasHuanLingChangeInfo
		for (size_t i = 0; i < n; i++)
		{ //HuanLingSuitInfo
			BYTE* pHuanLingSuitInfo = pPlayerRoomVisibleInfo;
			Write16(pHuanLingSuitInfo, 0); //len

			Write32(pHuanLingSuitInfo, 0); //SuitID
			Write8(pHuanLingSuitInfo, 0); //ChangeLevel

			len = pHuanLingSuitInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //EquipSealType
		Write16(pPlayerRoomVisibleInfo, 0); //Role
		Write8(pPlayerRoomVisibleInfo, 0); //SpecialActivityIDNum
		Write8(pPlayerRoomVisibleInfo, 0); //CrewID
		Write8(pPlayerRoomVisibleInfo, 0); //SpecialActivityInfoNum
		for (size_t i = 0; i < n; i++)
		{ //SpecialActivityInfo
			BYTE* pSpecialActivityInfo = pPlayerRoomVisibleInfo;
			Write16(pSpecialActivityInfo, 0); //len

			Write8(pSpecialActivityInfo, 0); //ProfessionLicenseInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ProfessionLicenseInfo
				BYTE* pProfessionLicenseInfo = pSpecialActivityInfo;
				Write16(pProfessionLicenseInfo, 0); //len

				Write8(pProfessionLicenseInfo, 0); //BigLevel
				Write8(pProfessionLicenseInfo, 0); //SmallLevel

				len = pProfessionLicenseInfo - pSpecialActivityInfo;
				Set16(pSpecialActivityInfo, (WORD)len);
				pSpecialActivityInfo += len;
			}

			len = pSpecialActivityInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //ParaNum
		Write32(pPlayerRoomVisibleInfo, 0); //ParaList[]
		Write8(pPlayerRoomVisibleInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemOrder
			BYTE* pItemOrder = pPlayerRoomVisibleInfo;
			Write16(pItemOrder, 0); //len

			Write32(pItemOrder, 0); //KartID
			Write32(pItemOrder, 0); //Order
			Write32(pItemOrder, 0); //BackGroundID

			len = pItemOrder - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //TDCExcluItemNum
		Write32(pPlayerRoomVisibleInfo, 0); //TDCExclusiveItemID[]
		Write8(pPlayerRoomVisibleInfo, 0); //EquipNiChangItemNum
		for (size_t i = 0; i < n; i++)
		{ //NiChangPavilionEquipItemInfo
			BYTE* pNiChangPavilionEquipItemInfo = pPlayerRoomVisibleInfo;
			Write16(pNiChangPavilionEquipItemInfo, 0); //len

			Write32(pNiChangPavilionEquipItemInfo, 0); //ItemId
			Write16(pNiChangPavilionEquipItemInfo, 0); //CurrentEquipColorationPlanId

			len = pNiChangPavilionEquipItemInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //TestKartGameType
		Write32(pPlayerRoomVisibleInfo, 0); //GameTestKartID
		Write8(pPlayerRoomVisibleInfo, 0); //HasStarsFightingInfo
		for (size_t i = 0; i < n; i++)
		{ //StarsFightingInfo
			BYTE* pStarsFightingInfo = pPlayerRoomVisibleInfo;
			Write16(pStarsFightingInfo, 0); //len

			Write32(pStarsFightingInfo, 0); //Star
			Write32(pStarsFightingInfo, 0); //StarVal
			Write32(pStarsFightingInfo, 0); //StarsFightingStarLevel

			len = pStarsFightingInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //RoomBGSetting

		len = pPlayerRoomVisibleInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //PlayerCount2
	for (size_t i = 0; i < n; i++)
	{ //PlayerRelationInfo
		BYTE* pPlayerRelationInfo = p;
		Write16(pPlayerRelationInfo, 0); //len

		Write32(pPlayerRelationInfo, 0); //SrcUin
		Write32(pPlayerRelationInfo, 0); //RelationFlag
		Write32(pPlayerRelationInfo, 0); //RelationUin
		WriteString(pPlayerRelationInfo, 0); //RelationNickName[]
		Write32(pPlayerRelationInfo, 0); //EngageTime
		Write32(pPlayerRelationInfo, 0); //NextCanBookingTimeLimit
		Write32(pPlayerRelationInfo, 0); //BeginHoneyMoonTime
		Write32(pPlayerRelationInfo, 0); //EndHoneyMoonTime
		Write8(pPlayerRelationInfo, 0); //EngageFlag

		len = pPlayerRelationInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasNext
	Write16(p, 0); //KartNum
	for (size_t i = 0; i < n; i++)
	{ //KartRefitInfo
		BYTE* pKartRefitInfo = p;
		Write16(pKartRefitInfo, 0); //len

		Write32(pKartRefitInfo, 0); //Uin
		Write32(pKartRefitInfo, 0); //KartId
		Write32(pKartRefitInfo, 0); //RefitCout
		Write16(pKartRefitInfo, 0); //MaxFlags
		Write16(pKartRefitInfo, 0); //WWeight
		Write16(pKartRefitInfo, 0); //SpeedWeight
		Write16(pKartRefitInfo, 0); //JetWeight
		Write16(pKartRefitInfo, 0); //SJetWeight
		Write16(pKartRefitInfo, 0); //AccuWeight
		Write32(pKartRefitInfo, 0); //ShapeRefitCount
		Write32(pKartRefitInfo, 0); //KartHeadRefitItemID
		Write32(pKartRefitInfo, 0); //KartTailRefitItemID
		Write32(pKartRefitInfo, 0); //KartFlankRefitItemID
		Write32(pKartRefitInfo, 0); //KartTireRefitItemID
		Write32(pKartRefitInfo, 0); //SecondRefitCount
		Write16(pKartRefitInfo, 0); //Speed2Weight
		Write16(pKartRefitInfo, 0); //DriftVecWeight
		Write16(pKartRefitInfo, 0); //AdditionalZSpeedWeight
		Write16(pKartRefitInfo, 0); //AntiCollisionWeight
		Write16(pKartRefitInfo, 0); //LuckyValue
		Write16(pKartRefitInfo, 0); //RefitLuckyValueMaxWeight
		Write32(pKartRefitInfo, 0); //ShapeSuitID
		Write8(pKartRefitInfo, 0); //LegendSuitLevel
		Write32(pKartRefitInfo, 0); //LegendSuitLevelChoice
		Write32(pKartRefitInfo, 0); //ShapeLegendSuitID

		len = pKartRefitInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 226, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestDanceChangeMusic(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	int MusicID = Read32(p);

}

void ResponseDanceChangeMusic(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //NewMusicID
	Write8(p, 0); //ReasonLen
	WriteString(p, 0); //Reason[]
	Write32(p, 0); //PreKnownMusicID

	len = p - buf;
	SendToClient(Client, 253, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyDanceChangeMusic(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //Uin
	Write32(p, 0); //NewMusicID
	Write32(p, 0); //PreKnownMusicID

	len = p - buf;
	SendToClient(Client, 721, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestChangeScene(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	int SceneID = Read32(p);

}

void ResponseChangeScene(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //NewSceneID
	Write8(p, 0); //ReasonLen
	WriteString(p, 0); //Reason[]

	len = p - buf;
	SendToClient(Client, 254, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyChangeScene(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //Uin
	Write32(p, 0); //NewSceneID

	len = p - buf;
	SendToClient(Client, 722, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyDanceGameBegin(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //NormalLoadTime
	WriteUn(p, 0); //GameID
	WriteUn(p, 0); //Seed
	Write8(p, 0); //CurrentPlayers
	Write32(p, 0); //Mode
	Write32(p, 0); //SceneID
	Write32(p, 0); //MusicID
	Write8(p, 0); //RandKeyFlag
	Write8(p, 0); //PlayerNum
	for (size_t i = 0; i < n; i++)
	{ //LoverDanceStartGameInfo
		BYTE* pLoverDanceStartGameInfo = p;
		Write16(pLoverDanceStartGameInfo, 0); //len

		Write32(pLoverDanceStartGameInfo, 0); //Uin
		Write32(pLoverDanceStartGameInfo, 0); //Mode
		Write8(pLoverDanceStartGameInfo, 0); //RandKeyFlag
		Write8(pLoverDanceStartGameInfo, 0); //TeamID

		len = pLoverDanceStartGameInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 726, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyDanceWaitUnReadyPlayers(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //WaitLoadTime

	len = p - buf;
	SendToClient(Client, 727, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestDancePrepareReady(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	int Mode = Read32(p);
	int SceneID = Read32(p);
	char[] SceneHash[] = ReadString(p);
	int MusicID = Read32(p);
	char[] MusicHash[] = ReadString(p);
	bool RandKeyFlag = Read8(p);
	UINT ClothesWeight = Read32(p);

}

void NotifyDanceRaceBegin(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //CountDownTime
	Write8(p, 0); //PlayerNum
	Write32(p, 0); //Uin[]

	len = p - buf;
	SendToClient(Client, 728, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyDanceShow(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //ShowTime

	len = p - buf;
	SendToClient(Client, 729, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyDanceRaceOver(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //PlayerNum
	for (size_t i = 0; i < n; i++)
	{ //DanceScores
		BYTE* pDanceScores = p;
		Write16(pDanceScores, 0); //len

		WriteUn(pDanceScores, 0); //Uin
		Write32(pDanceScores, 0); //Rank
		Write32(pDanceScores, 0); //Score
		Write32(pDanceScores, 0); //DanceExpInc
		Write32(pDanceScores, 0); //TotalDanceExp
		Write32(pDanceScores, 0); //MaxCombo
		Write32(pDanceScores, 0); //MaxPerfect
		Write32(pDanceScores, 0); //ExpInc
		Write32(pDanceScores, 0); //TotalExp
		Write32(pDanceScores, 0); //MoneyInc
		Write32(pDanceScores, 0); //TotalMoney
		Write8(pDanceScores, 0); //AwardNum
		Write32(pDanceScores, 0); //SpecialAward[]
		Write32(pDanceScores, 0); //Degree
		Write32(pDanceScores, 0); //LoverVipDanceExpMulti

		len = pDanceScores - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //WinTeamID
	WriteUn(p, 0); //AwardTime
	Write8(p, 0); //TeamNum
	for (size_t i = 0; i < n; i++)
	{ //TeamDanceScores
		BYTE* pTeamDanceScores = p;
		Write16(pTeamDanceScores, 0); //len

		Write8(pTeamDanceScores, 0); //TeamID
		Write8(pTeamDanceScores, 0); //TeamRank
		Write32(pTeamDanceScores, 0); //TotalCooper
		Write32(pTeamDanceScores, 0); //TotalScore
		for (size_t i = 0; i < n; i++)
		{ //MemDanceScore
			BYTE* pMemDanceScore = pTeamDanceScores;
			Write16(pMemDanceScore, 0); //len

			WriteUn(pMemDanceScore, 0); //Uin
			Write32(pMemDanceScore, 0); //Rank
			Write32(pMemDanceScore, 0); //Score
			Write32(pMemDanceScore, 0); //DanceExpInc
			Write32(pMemDanceScore, 0); //TotalDanceExp
			Write32(pMemDanceScore, 0); //MaxCombo
			Write32(pMemDanceScore, 0); //MaxPerfect
			Write32(pMemDanceScore, 0); //ExpInc
			Write32(pMemDanceScore, 0); //TotalExp
			Write32(pMemDanceScore, 0); //MoneyInc
			Write32(pMemDanceScore, 0); //TotalMoney
			Write8(pMemDanceScore, 0); //AwardNum
			Write32(pMemDanceScore, 0); //SpecialAward[]
			Write32(pMemDanceScore, 0); //Degree
			Write32(pMemDanceScore, 0); //LoverVipDanceExpMulti

			len = pMemDanceScore - pTeamDanceScores;
			Set16(pTeamDanceScores, (WORD)len);
			pTeamDanceScores += len;
		}

		len = pTeamDanceScores - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //KickOffPlayerNumber
	for (size_t i = 0; i < n; i++)
	{ //KickOffPlayer
		BYTE* pKickOffPlayer = p;
		Write16(pKickOffPlayer, 0); //len

		Write32(pKickOffPlayer, 0); //Uin
		WriteString(pKickOffPlayer, 0); //NickName[]
		Write8(pKickOffPlayer, 0); //Gender
		Write8(pKickOffPlayer, 0); //TeamID
		Write8(pKickOffPlayer, 0); //Country

		len = pKickOffPlayer - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 730, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyDanceGameOver(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 731, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestDanceStepStatistics(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	int SegID = Read32(p);
	int StepID = Read32(p);
	int Checksum = Read32(p);
	Un Hits = ReadUn(p);
	{ //Combo
		BYTE* pCombo = p;
		len = Read16(pCombo);

		short First = Read16(pCombo);
		short Last = Read16(pCombo);

		p += len;
	}
	short Decision = Read16(p);

}

void ResponseDanceStepStatistics(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	WriteUn(p, 0); //Uin
	Write32(p, 0); //ScoresInc
	Write32(p, 0); //ScoresTotal

	len = p - buf;
	SendToClient(Client, 260, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyDanceStepStatistics(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //Uin
	Write32(p, 0); //ScoresInc
	Write32(p, 0); //ScoresTotal

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyDanceRank(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //PlayerNum
	Write32(p, 0); //Uin[]

	len = p - buf;
	SendToClient(Client, 733, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetInviteList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);

}

void ResponseGetInviteList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	WriteUn(p, 0); //Uin
	Write16(p, 0); //PlayerNum
	for (size_t i = 0; i < n; i++)
	{ //InvitePlayerBaseInfo
		BYTE* pInvitePlayerBaseInfo = p;
		Write16(pInvitePlayerBaseInfo, 0); //len

		WriteUn(pInvitePlayerBaseInfo, 0); //Uin
		WriteString(pInvitePlayerBaseInfo, 0); //NickName[]
		Write8(pInvitePlayerBaseInfo, 0); //Gender
		WriteUn(pInvitePlayerBaseInfo, 0); //Identity
		WriteUn(pInvitePlayerBaseInfo, 0); //Experience
		Write32(pInvitePlayerBaseInfo, 0); //License
		Write32(pInvitePlayerBaseInfo, 0); //TotalHonor
		Write32(pInvitePlayerBaseInfo, 0); //Charm
		Write32(pInvitePlayerBaseInfo, 0); //DanceExp
		Write32(pInvitePlayerBaseInfo, 0); //Admiration
		Write32(pInvitePlayerBaseInfo, 0); //TeamWorkExp

		len = pInvitePlayerBaseInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen
	Write8(p, 0); //Type

	len = p - buf;
	SendToClient(Client, 255, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestDanceQuickEnterRoom(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	short BaseGameMode = Read16(p);
	short SubGameMode = Read16(p);
	int DanceMode = Read32(p);
	bool RoomFlag = Read8(p);

}

void ResponseDanceQuickEnterRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //RoomID
	Write16(p, 0); //BaseGameMode
	Write16(p, 0); //SubGameMode
	WriteString(p, 0); //RoomName[]
	Write8(p, 0); //SeatNum
	Write8(p, 0); //Flag
	Write8(p, 0); //SeatID
	Write8(p, 0); //TeamID
	Write32(p, 0); //Mode
	Write32(p, 0); //SceneID
	Write32(p, 0); //MusicID
	Write8(p, 0); //RandKeyFlag
	Write16(p, 0); //RoomOwnerID
	Write8(p, 0); //SeatStatus[]
	Write8(p, 0); //PlayerCount
	for (size_t i = 0; i < n; i++)
	{ //PlayerRoomVisibleInfo
		BYTE* pPlayerRoomVisibleInfo = p;
		Write16(pPlayerRoomVisibleInfo, 0); //len

		WriteUn(pPlayerRoomVisibleInfo, 0); //Uin
		WriteUn(pPlayerRoomVisibleInfo, 0); //Identity
		Write8(pPlayerRoomVisibleInfo, 0); //SeatID
		Write8(pPlayerRoomVisibleInfo, 0); //TeamID
		Write16(pPlayerRoomVisibleInfo, 0); //PlayerID
		Write8(pPlayerRoomVisibleInfo, 0); //Status
		{ //PlayerDBBaseInfo
			BYTE* pPlayerDBBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerDBBaseInfo, 0); //len

			WriteString(pPlayerDBBaseInfo, 0); //NickName[]
			Write8(pPlayerDBBaseInfo, 0); //Gender
			Write8(pPlayerDBBaseInfo, 0); //Country
			Write32(pPlayerDBBaseInfo, 0); //License
			WriteUn(pPlayerDBBaseInfo, 0); //Experience
			Write32(pPlayerDBBaseInfo, 0); //SuperMoney
			Write32(pPlayerDBBaseInfo, 0); //Money
			WriteUn(pPlayerDBBaseInfo, 0); //WinNum
			Write32(pPlayerDBBaseInfo, 0); //SecondNum
			Write32(pPlayerDBBaseInfo, 0); //ThirdNum
			WriteUn(pPlayerDBBaseInfo, 0); //TotalNum
			Write32(pPlayerDBBaseInfo, 0); //CurHonor
			Write32(pPlayerDBBaseInfo, 0); //TotalHonor
			Write32(pPlayerDBBaseInfo, 0); //TodayHonor
			Write32(pPlayerDBBaseInfo, 0); //RelaxTime
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationBefore
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationCur
			Write32(pPlayerDBBaseInfo, 0); //Charm
			Write32(pPlayerDBBaseInfo, 0); //DurationGame
			Write32(pPlayerDBBaseInfo, 0); //DanceExp
			Write32(pPlayerDBBaseInfo, 0); //Coupons
			Write32(pPlayerDBBaseInfo, 0); //Admiration
			Write32(pPlayerDBBaseInfo, 0); //LuckMoney
			Write32(pPlayerDBBaseInfo, 0); //TeamWorkExp
			Write32(pPlayerDBBaseInfo, 0); //AchievePoint
			Write32(pPlayerDBBaseInfo, 0); //RegTime
			WriteString(pPlayerDBBaseInfo, 0); //Signature[]
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchPoint
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchNum
			Write16(pPlayerDBBaseInfo, 0); //LuckyMatchFirstNum
			Write8(pPlayerDBBaseInfo, 0); //LuckyMatchBestRand
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchWinNum
			Write32(pPlayerDBBaseInfo, 0); //FizzPointTotal
			Write16(pPlayerDBBaseInfo, 0); //FizzPointDaily
			Write16(pPlayerDBBaseInfo, 0); //FizzPointWeekly
			Write16(pPlayerDBBaseInfo, 0); //FizzPointLastWeek
			Write8(pPlayerDBBaseInfo, 0); //FizzLotteryStatus
			Write32(pPlayerDBBaseInfo, 0); //FizzLastUpdateTime
			Write32(pPlayerDBBaseInfo, 0); //SNSLocaleCode
			Write32(pPlayerDBBaseInfo, 0); //AuctionRightUnlockTime
			Write8(pPlayerDBBaseInfo, 0); //ReserveFlag
			Write32(pPlayerDBBaseInfo, 0); //CurConsumeScore
			Write32(pPlayerDBBaseInfo, 0); //HistoryConsumeScore
			Write8(pPlayerDBBaseInfo, 0); //CrashModeSponsorID
			Write32(pPlayerDBBaseInfo, 0); //Popularity
			Write32(pPlayerDBBaseInfo, 0); //LadderMatchAchievePoint
			Write32(pPlayerDBBaseInfo, 0); //Cash
			Write32(pPlayerDBBaseInfo, 0); //PlayerGPMIdentity
			Write32(pPlayerDBBaseInfo, 0); //PointTotalScore
			WriteUn(pPlayerDBBaseInfo, 0); //totalMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //lastMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalSeasonId
			WriteUn(pPlayerDBBaseInfo, 0); //lastClearMapMedalTime
			WriteUn(pPlayerDBBaseInfo, 0); //max2048Score
			WriteUn(pPlayerDBBaseInfo, 0); //curPlay2048LeftNum
			Write32(pPlayerDBBaseInfo, 0); //CheerValue
			Write16(pPlayerDBBaseInfo, 0); //SeasonID
			Write32(pPlayerDBBaseInfo, 0); //LastCheerValue
			Write32(pPlayerDBBaseInfo, 0); //SpeedBean
			Write32(pPlayerDBBaseInfo, 0); //SpeedCoin

			len = pPlayerDBBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //PlayerGuildInfo
			BYTE* pPlayerGuildInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerGuildInfo, 0); //len

			WriteString(pPlayerGuildInfo, 0); //GuildName[]
			Write16(pPlayerGuildInfo, 0); //Duty
			Write32(pPlayerGuildInfo, 0); //GuildID
			Write32(pPlayerGuildInfo, 0); //Right
			Write32(pPlayerGuildInfo, 0); //Medal
			Write32(pPlayerGuildInfo, 0); //Contribute
			WriteString(pPlayerGuildInfo, 0); //DutyTitle[]

			len = pPlayerGuildInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write16(pPlayerRoomVisibleInfo, 0); //EquipedItemNum
		for (size_t i = 0; i < n; i++)
		{ //PlayerItemInfo
			BYTE* pPlayerItemInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerItemInfo, 0); //len

			Write32(pPlayerItemInfo, 0); //ItemID
			Write32(pPlayerItemInfo, 0); //ItemNum
			Write32(pPlayerItemInfo, 0); //AvailPeriod
			Write8(pPlayerItemInfo, 0); //Status
			WriteUn(pPlayerItemInfo, 0); //ObtainTime
			Write32(pPlayerItemInfo, 0); //OtherAttribute
			Write16(pPlayerItemInfo, 0); //ItemType

			len = pPlayerItemInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write16(pPlayerRoomVisibleInfo, 0); //PetNum
		for (size_t i = 0; i < n; i++)
		{ //PetInfo
			BYTE* pPetInfo = pPlayerRoomVisibleInfo;
			Write16(pPetInfo, 0); //len

			Write32(pPetInfo, 0); //Uin
			Write32(pPetInfo, 0); //PetId
			WriteString(pPetInfo, 0); //PetName[]
			Write8(pPetInfo, 0); //IsProper
			Write16(pPetInfo, 0); //Level
			Write8(pPetInfo, 0); //Status
			Write16(pPetInfo, 0); //PetSkillNum
			for (size_t i = 0; i < n; i++)
			{ //PetSkillList
				BYTE* pPetSkillList = pPetInfo;
				Write16(pPetSkillList, 0); //len

				Write16(pPetSkillList, 0); //SkillID
				Write8(pPetSkillList, 0); //Status
				Write8(pPetSkillList, 0); //Active
				Write32(pPetSkillList, 0); //Value

				len = pPetSkillList - pPetInfo;
				Set16(pPetInfo, (WORD)len);
				pPetInfo += len;
			}
			Write32(pPetInfo, 0); //StrengLevel
			Write8(pPetInfo, 0); //TopStatus
			{ //CommonInfo
				BYTE* pCommonInfo = pPetInfo;
				Write16(pCommonInfo, 0); //len

				Write32(pCommonInfo, 0); //HuanHuaLevel
				Write8(pCommonInfo, 0); //CanHuanHua

				len = pCommonInfo - pPetInfo;
				Set16(pPetInfo, (WORD)len);
				pPetInfo += len;
			}
			Write16(pPetInfo, 0); //PKStar
			Write32(pPetInfo, 0); //PetSkinID

			len = pPetInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //PlayerGuildMatchInfo
			BYTE* pPlayerGuildMatchInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerGuildMatchInfo, 0); //len

			Write32(pPlayerGuildMatchInfo, 0); //SelfPoint
			Write32(pPlayerGuildMatchInfo, 0); //WinNum
			Write32(pPlayerGuildMatchInfo, 0); //TotalNum

			len = pPlayerGuildMatchInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //IsInTopList
		Write8(pPlayerRoomVisibleInfo, 0); //LoverRaceOrPro
		Write8(pPlayerRoomVisibleInfo, 0); //TmpEffectNum
		Write32(pPlayerRoomVisibleInfo, 0); //TmpEffectItems[]
		Write8(pPlayerRoomVisibleInfo, 0); //OBState
		Write8(pPlayerRoomVisibleInfo, 0); //DebutOrX5
		Write8(pPlayerRoomVisibleInfo, 0); //RandKeyFlag
		WriteUn(pPlayerRoomVisibleInfo, 0); //VipFlag
		Write8(pPlayerRoomVisibleInfo, 0); //HaveAppellation
		for (size_t i = 0; i < n; i++)
		{ //CurAppellation
			BYTE* pCurAppellation = pPlayerRoomVisibleInfo;
			Write16(pCurAppellation, 0); //len

			Write8(pCurAppellation, 0); //Type
			Write8(pCurAppellation, 0); //Level
			Write8(pCurAppellation, 0); //Status
			Write8(pCurAppellation, 0); //Difficulty
			Write32(pCurAppellation, 0); //MapId
			Write32(pCurAppellation, 0); //Value

			len = pCurAppellation - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //NobleInfo
			BYTE* pNobleInfo = pPlayerRoomVisibleInfo;
			Write16(pNobleInfo, 0); //len

			Write32(pNobleInfo, 0); //NobleID
			Write8(pNobleInfo, 0); //NobleLevel
			Write32(pNobleInfo, 0); //NoblePoint
			Write32(pNobleInfo, 0); //NobleLeftDays

			len = pNobleInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasCarryWizard
		for (size_t i = 0; i < n; i++)
		{ //CarryWizardInfo
			BYTE* pCarryWizardInfo = pPlayerRoomVisibleInfo;
			Write16(pCarryWizardInfo, 0); //len

			Write16(pCarryWizardInfo, 0); //WizardID
			WriteString(pCarryWizardInfo, 0); //NickName[]
			Write16(pCarryWizardInfo, 0); //WizardType
			Write8(pCarryWizardInfo, 0); //Order
			Write8(pCarryWizardInfo, 0); //EvolutionBranch
			Write8(pCarryWizardInfo, 0); //IsHuanHua

			len = pCarryWizardInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //GuildVipBaseInfo
			BYTE* pGuildVipBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pGuildVipBaseInfo, 0); //len

			Write8(pGuildVipBaseInfo, 0); //GuildVipLevel
			Write32(pGuildVipBaseInfo, 0); //GuildVipPoint

			len = pGuildVipBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write32(pPlayerRoomVisibleInfo, 0); //ExFlag
		Write8(pPlayerRoomVisibleInfo, 0); //HaveLDMBaseInfo
		for (size_t i = 0; i < n; i++)
		{ //PlayerLDMBaseInfo
			BYTE* pPlayerLDMBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerLDMBaseInfo, 0); //len

			Write8(pPlayerLDMBaseInfo, 0); //Grade
			Write32(pPlayerLDMBaseInfo, 0); //Score
			Write32(pPlayerLDMBaseInfo, 0); //MaxScore
			Write32(pPlayerLDMBaseInfo, 0); //MaxGrade

			len = pPlayerLDMBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasWl
		for (size_t i = 0; i < n; i++)
		{ //PlayerWlVisibleInfo
			BYTE* pPlayerWlVisibleInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerWlVisibleInfo, 0); //len

			Write32(pPlayerWlVisibleInfo, 0); //WonderLandID
			WriteString(pPlayerWlVisibleInfo, 0); //WonderLandName[]
			Write16(pPlayerWlVisibleInfo, 0); //WonderLandDuty
			Write8(pPlayerWlVisibleInfo, 0); //SubType
			Write8(pPlayerWlVisibleInfo, 0); //GuildGrade

			len = pPlayerWlVisibleInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasLoverVip
		for (size_t i = 0; i < n; i++)
		{ //LoverVipInfo
			BYTE* pLoverVipInfo = pPlayerRoomVisibleInfo;
			Write16(pLoverVipInfo, 0); //len

			Write8(pLoverVipInfo, 0); //LoverVipLevel
			Write32(pLoverVipInfo, 0); //LoverVipPoint
			Write8(pLoverVipInfo, 0); //GrowRate

			len = pLoverVipInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasBattleModeSkillInfoList
		for (size_t i = 0; i < n; i++)
		{ //BattleModeSkillInfoList
			BYTE* pBattleModeSkillInfoList = pPlayerRoomVisibleInfo;
			Write16(pBattleModeSkillInfoList, 0); //len

			Write8(pBattleModeSkillInfoList, 0); //SkillNum
			for (size_t i = 0; i < n; i++)
			{ //SkillInfo
				BYTE* pSkillInfo = pBattleModeSkillInfoList;
				Write16(pSkillInfo, 0); //len

				Write16(pSkillInfo, 0); //SkillId
				Write8(pSkillInfo, 0); //SkillLevel

				len = pSkillInfo - pBattleModeSkillInfoList;
				Set16(pBattleModeSkillInfoList, (WORD)len);
				pBattleModeSkillInfoList += len;
			}

			len = pBattleModeSkillInfoList - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasGarden
		for (size_t i = 0; i < n; i++)
		{ //PersonalGardenBaseInfo
			BYTE* pPersonalGardenBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pPersonalGardenBaseInfo, 0); //len

			Write8(pPersonalGardenBaseInfo, 0); //GardenLevel
			Write32(pPersonalGardenBaseInfo, 0); //GardenPoint
			Write8(pPersonalGardenBaseInfo, 0); //GrowRate
			Write32(pPersonalGardenBaseInfo, 0); //GardenExpireTime
			{ //SimpleInfo
				BYTE* pSimpleInfo = pPersonalGardenBaseInfo;
				Write16(pSimpleInfo, 0); //len

				Write32(pSimpleInfo, 0); //WeekPopularity
				Write32(pSimpleInfo, 0); //TotalPopularity
				Write32(pSimpleInfo, 0); //LastUpdatePopularityTime
				Write8(pSimpleInfo, 0); //PrivateType

				len = pSimpleInfo - pPersonalGardenBaseInfo;
				Set16(pPersonalGardenBaseInfo, (WORD)len);
				pPersonalGardenBaseInfo += len;
			}

			len = pPersonalGardenBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //ConsumeVipInfo
			BYTE* pConsumeVipInfo = pPlayerRoomVisibleInfo;
			Write16(pConsumeVipInfo, 0); //len

			WriteUn(pConsumeVipInfo, 0); //VipLevel
			WriteUn(pConsumeVipInfo, 0); //CharmValueOfMonth
			WriteUn(pConsumeVipInfo, 0); //SearchTreasureNums
			WriteUn(pConsumeVipInfo, 0); //GetTreasureNums

			len = pConsumeVipInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HaveBaby
		{ //LoverBabyInfo
			BYTE* pLoverBabyInfo = pPlayerRoomVisibleInfo;
			Write16(pLoverBabyInfo, 0); //len

			Write32(pLoverBabyInfo, 0); //LoverBabyID
			Write32(pLoverBabyInfo, 0); //ItemID
			Write32(pLoverBabyInfo, 0); //GrowValue
			Write32(pLoverBabyInfo, 0); //MentalValue
			Write32(pLoverBabyInfo, 0); //BabyProfileLevel
			Write32(pLoverBabyInfo, 0); //StrengthLevel
			Write32(pLoverBabyInfo, 0); //GrowLevel
			WriteString(pLoverBabyInfo, 0); //LoveBabyNickName[]
			Write16(pLoverBabyInfo, 0); //LoverBabyStat
			Write16(pLoverBabyInfo, 0); //LoverBabyEquipStat
			Write16(pLoverBabyInfo, 0); //LoverBabyTransferdStatus

			len = pLoverBabyInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //EmperorInfo
			BYTE* pEmperorInfo = pPlayerRoomVisibleInfo;
			Write16(pEmperorInfo, 0); //len

			Write8(pEmperorInfo, 0); //EmperorLevel
			Write32(pEmperorInfo, 0); //EmperorPoint
			Write32(pEmperorInfo, 0); //EmperorLeftDays
			Write8(pEmperorInfo, 0); //EmperorGrowRate

			len = pEmperorInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write16(pPlayerRoomVisibleInfo, 0); //RaceCardNums
		for (size_t i = 0; i < n; i++)
		{ //RaceCardAddValueInfo
			BYTE* pRaceCardAddValueInfo = pPlayerRoomVisibleInfo;
			Write16(pRaceCardAddValueInfo, 0); //len

			Write32(pRaceCardAddValueInfo, 0); //RaceCardID
			Write32(pRaceCardAddValueInfo, 0); //AddValue

			len = pRaceCardAddValueInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //GansterScoreInfo
			BYTE* pGansterScoreInfo = pPlayerRoomVisibleInfo;
			Write16(pGansterScoreInfo, 0); //len

			Write32(pGansterScoreInfo, 0); //GansterSeasonID
			Write32(pGansterScoreInfo, 0); //GansterScore
			Write32(pGansterScoreInfo, 0); //PoliceScore
			Write32(pGansterScoreInfo, 0); //TotalGansterScore

			len = pGansterScoreInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write32(pPlayerRoomVisibleInfo, 0); //OlympicId
		Write32(pPlayerRoomVisibleInfo, 0); //NPCEliminateWinTimes
		Write8(pPlayerRoomVisibleInfo, 0); //OriginTeamID
		Write8(pPlayerRoomVisibleInfo, 0); //NxNpc
		Write16(pPlayerRoomVisibleInfo, 0); //NxNpcAILevel
		{ //EquippedActiveKartInfo
			BYTE* pEquippedActiveKartInfo = pPlayerRoomVisibleInfo;
			Write16(pEquippedActiveKartInfo, 0); //len

			Write8(pEquippedActiveKartInfo, 0); //HaveActiveInfo
			Write32(pEquippedActiveKartInfo, 0); //KartID
			Write32(pEquippedActiveKartInfo, 0); //ActiveLevel

			len = pEquippedActiveKartInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //SpecialActivityStatus
		Write8(pPlayerRoomVisibleInfo, 0); //AreaID
		Write8(pPlayerRoomVisibleInfo, 0); //HaveRaiseSecondBaby
		{ //SecondLoverBabyInfo
			BYTE* pSecondLoverBabyInfo = pPlayerRoomVisibleInfo;
			Write16(pSecondLoverBabyInfo, 0); //len

			Write32(pSecondLoverBabyInfo, 0); //LoverBabyID
			Write32(pSecondLoverBabyInfo, 0); //ItemID
			Write32(pSecondLoverBabyInfo, 0); //GrowValue
			Write32(pSecondLoverBabyInfo, 0); //MentalValue
			Write32(pSecondLoverBabyInfo, 0); //BabyProfileLevel
			Write32(pSecondLoverBabyInfo, 0); //StrengthLevel
			Write32(pSecondLoverBabyInfo, 0); //GrowLevel
			WriteString(pSecondLoverBabyInfo, 0); //LoveBabyNickName[]
			Write16(pSecondLoverBabyInfo, 0); //LoverBabyStat
			Write16(pSecondLoverBabyInfo, 0); //LoverBabyEquipStat
			Write16(pSecondLoverBabyInfo, 0); //LoverBabyTransferdStatus

			len = pSecondLoverBabyInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasRankedMatchInfo
		for (size_t i = 0; i < n; i++)
		{ //RankedMatchGradeInfo
			BYTE* pRankedMatchGradeInfo = pPlayerRoomVisibleInfo;
			Write16(pRankedMatchGradeInfo, 0); //len

			Write32(pRankedMatchGradeInfo, 0); //GradeLevel
			Write32(pRankedMatchGradeInfo, 0); //ChildLevel
			Write32(pRankedMatchGradeInfo, 0); //GradeScore
			Write32(pRankedMatchGradeInfo, 0); //MaxGradeScore
			Write32(pRankedMatchGradeInfo, 0); //TotalScore

			len = pRankedMatchGradeInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasHuanLingChangeInfo
		for (size_t i = 0; i < n; i++)
		{ //HuanLingSuitInfo
			BYTE* pHuanLingSuitInfo = pPlayerRoomVisibleInfo;
			Write16(pHuanLingSuitInfo, 0); //len

			Write32(pHuanLingSuitInfo, 0); //SuitID
			Write8(pHuanLingSuitInfo, 0); //ChangeLevel

			len = pHuanLingSuitInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //EquipSealType
		Write16(pPlayerRoomVisibleInfo, 0); //Role
		Write8(pPlayerRoomVisibleInfo, 0); //SpecialActivityIDNum
		Write8(pPlayerRoomVisibleInfo, 0); //CrewID
		Write8(pPlayerRoomVisibleInfo, 0); //SpecialActivityInfoNum
		for (size_t i = 0; i < n; i++)
		{ //SpecialActivityInfo
			BYTE* pSpecialActivityInfo = pPlayerRoomVisibleInfo;
			Write16(pSpecialActivityInfo, 0); //len

			Write8(pSpecialActivityInfo, 0); //ProfessionLicenseInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ProfessionLicenseInfo
				BYTE* pProfessionLicenseInfo = pSpecialActivityInfo;
				Write16(pProfessionLicenseInfo, 0); //len

				Write8(pProfessionLicenseInfo, 0); //BigLevel
				Write8(pProfessionLicenseInfo, 0); //SmallLevel

				len = pProfessionLicenseInfo - pSpecialActivityInfo;
				Set16(pSpecialActivityInfo, (WORD)len);
				pSpecialActivityInfo += len;
			}

			len = pSpecialActivityInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //ParaNum
		Write32(pPlayerRoomVisibleInfo, 0); //ParaList[]
		Write8(pPlayerRoomVisibleInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemOrder
			BYTE* pItemOrder = pPlayerRoomVisibleInfo;
			Write16(pItemOrder, 0); //len

			Write32(pItemOrder, 0); //KartID
			Write32(pItemOrder, 0); //Order
			Write32(pItemOrder, 0); //BackGroundID

			len = pItemOrder - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //TDCExcluItemNum
		Write32(pPlayerRoomVisibleInfo, 0); //TDCExclusiveItemID[]
		Write8(pPlayerRoomVisibleInfo, 0); //EquipNiChangItemNum
		for (size_t i = 0; i < n; i++)
		{ //NiChangPavilionEquipItemInfo
			BYTE* pNiChangPavilionEquipItemInfo = pPlayerRoomVisibleInfo;
			Write16(pNiChangPavilionEquipItemInfo, 0); //len

			Write32(pNiChangPavilionEquipItemInfo, 0); //ItemId
			Write16(pNiChangPavilionEquipItemInfo, 0); //CurrentEquipColorationPlanId

			len = pNiChangPavilionEquipItemInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //TestKartGameType
		Write32(pPlayerRoomVisibleInfo, 0); //GameTestKartID
		Write8(pPlayerRoomVisibleInfo, 0); //HasStarsFightingInfo
		for (size_t i = 0; i < n; i++)
		{ //StarsFightingInfo
			BYTE* pStarsFightingInfo = pPlayerRoomVisibleInfo;
			Write16(pStarsFightingInfo, 0); //len

			Write32(pStarsFightingInfo, 0); //Star
			Write32(pStarsFightingInfo, 0); //StarVal
			Write32(pStarsFightingInfo, 0); //StarsFightingStarLevel

			len = pStarsFightingInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //RoomBGSetting

		len = pPlayerRoomVisibleInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen
	Write8(p, 0); //PlayerCount2
	for (size_t i = 0; i < n; i++)
	{ //PlayerRelationInfo
		BYTE* pPlayerRelationInfo = p;
		Write16(pPlayerRelationInfo, 0); //len

		Write32(pPlayerRelationInfo, 0); //SrcUin
		Write32(pPlayerRelationInfo, 0); //RelationFlag
		Write32(pPlayerRelationInfo, 0); //RelationUin
		WriteString(pPlayerRelationInfo, 0); //RelationNickName[]
		Write32(pPlayerRelationInfo, 0); //EngageTime
		Write32(pPlayerRelationInfo, 0); //NextCanBookingTimeLimit
		Write32(pPlayerRelationInfo, 0); //BeginHoneyMoonTime
		Write32(pPlayerRelationInfo, 0); //EndHoneyMoonTime
		Write8(pPlayerRelationInfo, 0); //EngageFlag

		len = pPlayerRelationInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //DebutOrX5
	Write32(p, 0); //PreKnownMusicID
	Write8(p, 0); //HasMoreInfo
	Write16(p, 0); //KartNum
	for (size_t i = 0; i < n; i++)
	{ //KartRefitInfo
		BYTE* pKartRefitInfo = p;
		Write16(pKartRefitInfo, 0); //len

		Write32(pKartRefitInfo, 0); //Uin
		Write32(pKartRefitInfo, 0); //KartId
		Write32(pKartRefitInfo, 0); //RefitCout
		Write16(pKartRefitInfo, 0); //MaxFlags
		Write16(pKartRefitInfo, 0); //WWeight
		Write16(pKartRefitInfo, 0); //SpeedWeight
		Write16(pKartRefitInfo, 0); //JetWeight
		Write16(pKartRefitInfo, 0); //SJetWeight
		Write16(pKartRefitInfo, 0); //AccuWeight
		Write32(pKartRefitInfo, 0); //ShapeRefitCount
		Write32(pKartRefitInfo, 0); //KartHeadRefitItemID
		Write32(pKartRefitInfo, 0); //KartTailRefitItemID
		Write32(pKartRefitInfo, 0); //KartFlankRefitItemID
		Write32(pKartRefitInfo, 0); //KartTireRefitItemID
		Write32(pKartRefitInfo, 0); //SecondRefitCount
		Write16(pKartRefitInfo, 0); //Speed2Weight
		Write16(pKartRefitInfo, 0); //DriftVecWeight
		Write16(pKartRefitInfo, 0); //AdditionalZSpeedWeight
		Write16(pKartRefitInfo, 0); //AntiCollisionWeight
		Write16(pKartRefitInfo, 0); //LuckyValue
		Write16(pKartRefitInfo, 0); //RefitLuckyValueMaxWeight
		Write32(pKartRefitInfo, 0); //ShapeSuitID
		Write8(pKartRefitInfo, 0); //LegendSuitLevel
		Write32(pKartRefitInfo, 0); //LegendSuitLevelChoice
		Write32(pKartRefitInfo, 0); //ShapeLegendSuitID

		len = pKartRefitInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //RoomFlag
	Write8(p, 0); //MaxOBNum
	Write8(p, 0); //AllowAutoStart

	len = p - buf;
	SendToClient(Client, 256, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyQuickEnterDanceRoomMoreInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //PlayerCount
	for (size_t i = 0; i < n; i++)
	{ //PlayerRoomVisibleInfo
		BYTE* pPlayerRoomVisibleInfo = p;
		Write16(pPlayerRoomVisibleInfo, 0); //len

		WriteUn(pPlayerRoomVisibleInfo, 0); //Uin
		WriteUn(pPlayerRoomVisibleInfo, 0); //Identity
		Write8(pPlayerRoomVisibleInfo, 0); //SeatID
		Write8(pPlayerRoomVisibleInfo, 0); //TeamID
		Write16(pPlayerRoomVisibleInfo, 0); //PlayerID
		Write8(pPlayerRoomVisibleInfo, 0); //Status
		{ //PlayerDBBaseInfo
			BYTE* pPlayerDBBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerDBBaseInfo, 0); //len

			WriteString(pPlayerDBBaseInfo, 0); //NickName[]
			Write8(pPlayerDBBaseInfo, 0); //Gender
			Write8(pPlayerDBBaseInfo, 0); //Country
			Write32(pPlayerDBBaseInfo, 0); //License
			WriteUn(pPlayerDBBaseInfo, 0); //Experience
			Write32(pPlayerDBBaseInfo, 0); //SuperMoney
			Write32(pPlayerDBBaseInfo, 0); //Money
			WriteUn(pPlayerDBBaseInfo, 0); //WinNum
			Write32(pPlayerDBBaseInfo, 0); //SecondNum
			Write32(pPlayerDBBaseInfo, 0); //ThirdNum
			WriteUn(pPlayerDBBaseInfo, 0); //TotalNum
			Write32(pPlayerDBBaseInfo, 0); //CurHonor
			Write32(pPlayerDBBaseInfo, 0); //TotalHonor
			Write32(pPlayerDBBaseInfo, 0); //TodayHonor
			Write32(pPlayerDBBaseInfo, 0); //RelaxTime
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationBefore
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationCur
			Write32(pPlayerDBBaseInfo, 0); //Charm
			Write32(pPlayerDBBaseInfo, 0); //DurationGame
			Write32(pPlayerDBBaseInfo, 0); //DanceExp
			Write32(pPlayerDBBaseInfo, 0); //Coupons
			Write32(pPlayerDBBaseInfo, 0); //Admiration
			Write32(pPlayerDBBaseInfo, 0); //LuckMoney
			Write32(pPlayerDBBaseInfo, 0); //TeamWorkExp
			Write32(pPlayerDBBaseInfo, 0); //AchievePoint
			Write32(pPlayerDBBaseInfo, 0); //RegTime
			WriteString(pPlayerDBBaseInfo, 0); //Signature[]
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchPoint
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchNum
			Write16(pPlayerDBBaseInfo, 0); //LuckyMatchFirstNum
			Write8(pPlayerDBBaseInfo, 0); //LuckyMatchBestRand
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchWinNum
			Write32(pPlayerDBBaseInfo, 0); //FizzPointTotal
			Write16(pPlayerDBBaseInfo, 0); //FizzPointDaily
			Write16(pPlayerDBBaseInfo, 0); //FizzPointWeekly
			Write16(pPlayerDBBaseInfo, 0); //FizzPointLastWeek
			Write8(pPlayerDBBaseInfo, 0); //FizzLotteryStatus
			Write32(pPlayerDBBaseInfo, 0); //FizzLastUpdateTime
			Write32(pPlayerDBBaseInfo, 0); //SNSLocaleCode
			Write32(pPlayerDBBaseInfo, 0); //AuctionRightUnlockTime
			Write8(pPlayerDBBaseInfo, 0); //ReserveFlag
			Write32(pPlayerDBBaseInfo, 0); //CurConsumeScore
			Write32(pPlayerDBBaseInfo, 0); //HistoryConsumeScore
			Write8(pPlayerDBBaseInfo, 0); //CrashModeSponsorID
			Write32(pPlayerDBBaseInfo, 0); //Popularity
			Write32(pPlayerDBBaseInfo, 0); //LadderMatchAchievePoint
			Write32(pPlayerDBBaseInfo, 0); //Cash
			Write32(pPlayerDBBaseInfo, 0); //PlayerGPMIdentity
			Write32(pPlayerDBBaseInfo, 0); //PointTotalScore
			WriteUn(pPlayerDBBaseInfo, 0); //totalMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //lastMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalSeasonId
			WriteUn(pPlayerDBBaseInfo, 0); //lastClearMapMedalTime
			WriteUn(pPlayerDBBaseInfo, 0); //max2048Score
			WriteUn(pPlayerDBBaseInfo, 0); //curPlay2048LeftNum
			Write32(pPlayerDBBaseInfo, 0); //CheerValue
			Write16(pPlayerDBBaseInfo, 0); //SeasonID
			Write32(pPlayerDBBaseInfo, 0); //LastCheerValue
			Write32(pPlayerDBBaseInfo, 0); //SpeedBean
			Write32(pPlayerDBBaseInfo, 0); //SpeedCoin

			len = pPlayerDBBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //PlayerGuildInfo
			BYTE* pPlayerGuildInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerGuildInfo, 0); //len

			WriteString(pPlayerGuildInfo, 0); //GuildName[]
			Write16(pPlayerGuildInfo, 0); //Duty
			Write32(pPlayerGuildInfo, 0); //GuildID
			Write32(pPlayerGuildInfo, 0); //Right
			Write32(pPlayerGuildInfo, 0); //Medal
			Write32(pPlayerGuildInfo, 0); //Contribute
			WriteString(pPlayerGuildInfo, 0); //DutyTitle[]

			len = pPlayerGuildInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write16(pPlayerRoomVisibleInfo, 0); //EquipedItemNum
		for (size_t i = 0; i < n; i++)
		{ //PlayerItemInfo
			BYTE* pPlayerItemInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerItemInfo, 0); //len

			Write32(pPlayerItemInfo, 0); //ItemID
			Write32(pPlayerItemInfo, 0); //ItemNum
			Write32(pPlayerItemInfo, 0); //AvailPeriod
			Write8(pPlayerItemInfo, 0); //Status
			WriteUn(pPlayerItemInfo, 0); //ObtainTime
			Write32(pPlayerItemInfo, 0); //OtherAttribute
			Write16(pPlayerItemInfo, 0); //ItemType

			len = pPlayerItemInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write16(pPlayerRoomVisibleInfo, 0); //PetNum
		for (size_t i = 0; i < n; i++)
		{ //PetInfo
			BYTE* pPetInfo = pPlayerRoomVisibleInfo;
			Write16(pPetInfo, 0); //len

			Write32(pPetInfo, 0); //Uin
			Write32(pPetInfo, 0); //PetId
			WriteString(pPetInfo, 0); //PetName[]
			Write8(pPetInfo, 0); //IsProper
			Write16(pPetInfo, 0); //Level
			Write8(pPetInfo, 0); //Status
			Write16(pPetInfo, 0); //PetSkillNum
			for (size_t i = 0; i < n; i++)
			{ //PetSkillList
				BYTE* pPetSkillList = pPetInfo;
				Write16(pPetSkillList, 0); //len

				Write16(pPetSkillList, 0); //SkillID
				Write8(pPetSkillList, 0); //Status
				Write8(pPetSkillList, 0); //Active
				Write32(pPetSkillList, 0); //Value

				len = pPetSkillList - pPetInfo;
				Set16(pPetInfo, (WORD)len);
				pPetInfo += len;
			}
			Write32(pPetInfo, 0); //StrengLevel
			Write8(pPetInfo, 0); //TopStatus
			{ //CommonInfo
				BYTE* pCommonInfo = pPetInfo;
				Write16(pCommonInfo, 0); //len

				Write32(pCommonInfo, 0); //HuanHuaLevel
				Write8(pCommonInfo, 0); //CanHuanHua

				len = pCommonInfo - pPetInfo;
				Set16(pPetInfo, (WORD)len);
				pPetInfo += len;
			}
			Write16(pPetInfo, 0); //PKStar
			Write32(pPetInfo, 0); //PetSkinID

			len = pPetInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //PlayerGuildMatchInfo
			BYTE* pPlayerGuildMatchInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerGuildMatchInfo, 0); //len

			Write32(pPlayerGuildMatchInfo, 0); //SelfPoint
			Write32(pPlayerGuildMatchInfo, 0); //WinNum
			Write32(pPlayerGuildMatchInfo, 0); //TotalNum

			len = pPlayerGuildMatchInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //IsInTopList
		Write8(pPlayerRoomVisibleInfo, 0); //LoverRaceOrPro
		Write8(pPlayerRoomVisibleInfo, 0); //TmpEffectNum
		Write32(pPlayerRoomVisibleInfo, 0); //TmpEffectItems[]
		Write8(pPlayerRoomVisibleInfo, 0); //OBState
		Write8(pPlayerRoomVisibleInfo, 0); //DebutOrX5
		Write8(pPlayerRoomVisibleInfo, 0); //RandKeyFlag
		WriteUn(pPlayerRoomVisibleInfo, 0); //VipFlag
		Write8(pPlayerRoomVisibleInfo, 0); //HaveAppellation
		for (size_t i = 0; i < n; i++)
		{ //CurAppellation
			BYTE* pCurAppellation = pPlayerRoomVisibleInfo;
			Write16(pCurAppellation, 0); //len

			Write8(pCurAppellation, 0); //Type
			Write8(pCurAppellation, 0); //Level
			Write8(pCurAppellation, 0); //Status
			Write8(pCurAppellation, 0); //Difficulty
			Write32(pCurAppellation, 0); //MapId
			Write32(pCurAppellation, 0); //Value

			len = pCurAppellation - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //NobleInfo
			BYTE* pNobleInfo = pPlayerRoomVisibleInfo;
			Write16(pNobleInfo, 0); //len

			Write32(pNobleInfo, 0); //NobleID
			Write8(pNobleInfo, 0); //NobleLevel
			Write32(pNobleInfo, 0); //NoblePoint
			Write32(pNobleInfo, 0); //NobleLeftDays

			len = pNobleInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasCarryWizard
		for (size_t i = 0; i < n; i++)
		{ //CarryWizardInfo
			BYTE* pCarryWizardInfo = pPlayerRoomVisibleInfo;
			Write16(pCarryWizardInfo, 0); //len

			Write16(pCarryWizardInfo, 0); //WizardID
			WriteString(pCarryWizardInfo, 0); //NickName[]
			Write16(pCarryWizardInfo, 0); //WizardType
			Write8(pCarryWizardInfo, 0); //Order
			Write8(pCarryWizardInfo, 0); //EvolutionBranch
			Write8(pCarryWizardInfo, 0); //IsHuanHua

			len = pCarryWizardInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //GuildVipBaseInfo
			BYTE* pGuildVipBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pGuildVipBaseInfo, 0); //len

			Write8(pGuildVipBaseInfo, 0); //GuildVipLevel
			Write32(pGuildVipBaseInfo, 0); //GuildVipPoint

			len = pGuildVipBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write32(pPlayerRoomVisibleInfo, 0); //ExFlag
		Write8(pPlayerRoomVisibleInfo, 0); //HaveLDMBaseInfo
		for (size_t i = 0; i < n; i++)
		{ //PlayerLDMBaseInfo
			BYTE* pPlayerLDMBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerLDMBaseInfo, 0); //len

			Write8(pPlayerLDMBaseInfo, 0); //Grade
			Write32(pPlayerLDMBaseInfo, 0); //Score
			Write32(pPlayerLDMBaseInfo, 0); //MaxScore
			Write32(pPlayerLDMBaseInfo, 0); //MaxGrade

			len = pPlayerLDMBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasWl
		for (size_t i = 0; i < n; i++)
		{ //PlayerWlVisibleInfo
			BYTE* pPlayerWlVisibleInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerWlVisibleInfo, 0); //len

			Write32(pPlayerWlVisibleInfo, 0); //WonderLandID
			WriteString(pPlayerWlVisibleInfo, 0); //WonderLandName[]
			Write16(pPlayerWlVisibleInfo, 0); //WonderLandDuty
			Write8(pPlayerWlVisibleInfo, 0); //SubType
			Write8(pPlayerWlVisibleInfo, 0); //GuildGrade

			len = pPlayerWlVisibleInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasLoverVip
		for (size_t i = 0; i < n; i++)
		{ //LoverVipInfo
			BYTE* pLoverVipInfo = pPlayerRoomVisibleInfo;
			Write16(pLoverVipInfo, 0); //len

			Write8(pLoverVipInfo, 0); //LoverVipLevel
			Write32(pLoverVipInfo, 0); //LoverVipPoint
			Write8(pLoverVipInfo, 0); //GrowRate

			len = pLoverVipInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasBattleModeSkillInfoList
		for (size_t i = 0; i < n; i++)
		{ //BattleModeSkillInfoList
			BYTE* pBattleModeSkillInfoList = pPlayerRoomVisibleInfo;
			Write16(pBattleModeSkillInfoList, 0); //len

			Write8(pBattleModeSkillInfoList, 0); //SkillNum
			for (size_t i = 0; i < n; i++)
			{ //SkillInfo
				BYTE* pSkillInfo = pBattleModeSkillInfoList;
				Write16(pSkillInfo, 0); //len

				Write16(pSkillInfo, 0); //SkillId
				Write8(pSkillInfo, 0); //SkillLevel

				len = pSkillInfo - pBattleModeSkillInfoList;
				Set16(pBattleModeSkillInfoList, (WORD)len);
				pBattleModeSkillInfoList += len;
			}

			len = pBattleModeSkillInfoList - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasGarden
		for (size_t i = 0; i < n; i++)
		{ //PersonalGardenBaseInfo
			BYTE* pPersonalGardenBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pPersonalGardenBaseInfo, 0); //len

			Write8(pPersonalGardenBaseInfo, 0); //GardenLevel
			Write32(pPersonalGardenBaseInfo, 0); //GardenPoint
			Write8(pPersonalGardenBaseInfo, 0); //GrowRate
			Write32(pPersonalGardenBaseInfo, 0); //GardenExpireTime
			{ //SimpleInfo
				BYTE* pSimpleInfo = pPersonalGardenBaseInfo;
				Write16(pSimpleInfo, 0); //len

				Write32(pSimpleInfo, 0); //WeekPopularity
				Write32(pSimpleInfo, 0); //TotalPopularity
				Write32(pSimpleInfo, 0); //LastUpdatePopularityTime
				Write8(pSimpleInfo, 0); //PrivateType

				len = pSimpleInfo - pPersonalGardenBaseInfo;
				Set16(pPersonalGardenBaseInfo, (WORD)len);
				pPersonalGardenBaseInfo += len;
			}

			len = pPersonalGardenBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //ConsumeVipInfo
			BYTE* pConsumeVipInfo = pPlayerRoomVisibleInfo;
			Write16(pConsumeVipInfo, 0); //len

			WriteUn(pConsumeVipInfo, 0); //VipLevel
			WriteUn(pConsumeVipInfo, 0); //CharmValueOfMonth
			WriteUn(pConsumeVipInfo, 0); //SearchTreasureNums
			WriteUn(pConsumeVipInfo, 0); //GetTreasureNums

			len = pConsumeVipInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HaveBaby
		{ //LoverBabyInfo
			BYTE* pLoverBabyInfo = pPlayerRoomVisibleInfo;
			Write16(pLoverBabyInfo, 0); //len

			Write32(pLoverBabyInfo, 0); //LoverBabyID
			Write32(pLoverBabyInfo, 0); //ItemID
			Write32(pLoverBabyInfo, 0); //GrowValue
			Write32(pLoverBabyInfo, 0); //MentalValue
			Write32(pLoverBabyInfo, 0); //BabyProfileLevel
			Write32(pLoverBabyInfo, 0); //StrengthLevel
			Write32(pLoverBabyInfo, 0); //GrowLevel
			WriteString(pLoverBabyInfo, 0); //LoveBabyNickName[]
			Write16(pLoverBabyInfo, 0); //LoverBabyStat
			Write16(pLoverBabyInfo, 0); //LoverBabyEquipStat
			Write16(pLoverBabyInfo, 0); //LoverBabyTransferdStatus

			len = pLoverBabyInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //EmperorInfo
			BYTE* pEmperorInfo = pPlayerRoomVisibleInfo;
			Write16(pEmperorInfo, 0); //len

			Write8(pEmperorInfo, 0); //EmperorLevel
			Write32(pEmperorInfo, 0); //EmperorPoint
			Write32(pEmperorInfo, 0); //EmperorLeftDays
			Write8(pEmperorInfo, 0); //EmperorGrowRate

			len = pEmperorInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write16(pPlayerRoomVisibleInfo, 0); //RaceCardNums
		for (size_t i = 0; i < n; i++)
		{ //RaceCardAddValueInfo
			BYTE* pRaceCardAddValueInfo = pPlayerRoomVisibleInfo;
			Write16(pRaceCardAddValueInfo, 0); //len

			Write32(pRaceCardAddValueInfo, 0); //RaceCardID
			Write32(pRaceCardAddValueInfo, 0); //AddValue

			len = pRaceCardAddValueInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //GansterScoreInfo
			BYTE* pGansterScoreInfo = pPlayerRoomVisibleInfo;
			Write16(pGansterScoreInfo, 0); //len

			Write32(pGansterScoreInfo, 0); //GansterSeasonID
			Write32(pGansterScoreInfo, 0); //GansterScore
			Write32(pGansterScoreInfo, 0); //PoliceScore
			Write32(pGansterScoreInfo, 0); //TotalGansterScore

			len = pGansterScoreInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write32(pPlayerRoomVisibleInfo, 0); //OlympicId
		Write32(pPlayerRoomVisibleInfo, 0); //NPCEliminateWinTimes
		Write8(pPlayerRoomVisibleInfo, 0); //OriginTeamID
		Write8(pPlayerRoomVisibleInfo, 0); //NxNpc
		Write16(pPlayerRoomVisibleInfo, 0); //NxNpcAILevel
		{ //EquippedActiveKartInfo
			BYTE* pEquippedActiveKartInfo = pPlayerRoomVisibleInfo;
			Write16(pEquippedActiveKartInfo, 0); //len

			Write8(pEquippedActiveKartInfo, 0); //HaveActiveInfo
			Write32(pEquippedActiveKartInfo, 0); //KartID
			Write32(pEquippedActiveKartInfo, 0); //ActiveLevel

			len = pEquippedActiveKartInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //SpecialActivityStatus
		Write8(pPlayerRoomVisibleInfo, 0); //AreaID
		Write8(pPlayerRoomVisibleInfo, 0); //HaveRaiseSecondBaby
		{ //SecondLoverBabyInfo
			BYTE* pSecondLoverBabyInfo = pPlayerRoomVisibleInfo;
			Write16(pSecondLoverBabyInfo, 0); //len

			Write32(pSecondLoverBabyInfo, 0); //LoverBabyID
			Write32(pSecondLoverBabyInfo, 0); //ItemID
			Write32(pSecondLoverBabyInfo, 0); //GrowValue
			Write32(pSecondLoverBabyInfo, 0); //MentalValue
			Write32(pSecondLoverBabyInfo, 0); //BabyProfileLevel
			Write32(pSecondLoverBabyInfo, 0); //StrengthLevel
			Write32(pSecondLoverBabyInfo, 0); //GrowLevel
			WriteString(pSecondLoverBabyInfo, 0); //LoveBabyNickName[]
			Write16(pSecondLoverBabyInfo, 0); //LoverBabyStat
			Write16(pSecondLoverBabyInfo, 0); //LoverBabyEquipStat
			Write16(pSecondLoverBabyInfo, 0); //LoverBabyTransferdStatus

			len = pSecondLoverBabyInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasRankedMatchInfo
		for (size_t i = 0; i < n; i++)
		{ //RankedMatchGradeInfo
			BYTE* pRankedMatchGradeInfo = pPlayerRoomVisibleInfo;
			Write16(pRankedMatchGradeInfo, 0); //len

			Write32(pRankedMatchGradeInfo, 0); //GradeLevel
			Write32(pRankedMatchGradeInfo, 0); //ChildLevel
			Write32(pRankedMatchGradeInfo, 0); //GradeScore
			Write32(pRankedMatchGradeInfo, 0); //MaxGradeScore
			Write32(pRankedMatchGradeInfo, 0); //TotalScore

			len = pRankedMatchGradeInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasHuanLingChangeInfo
		for (size_t i = 0; i < n; i++)
		{ //HuanLingSuitInfo
			BYTE* pHuanLingSuitInfo = pPlayerRoomVisibleInfo;
			Write16(pHuanLingSuitInfo, 0); //len

			Write32(pHuanLingSuitInfo, 0); //SuitID
			Write8(pHuanLingSuitInfo, 0); //ChangeLevel

			len = pHuanLingSuitInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //EquipSealType
		Write16(pPlayerRoomVisibleInfo, 0); //Role
		Write8(pPlayerRoomVisibleInfo, 0); //SpecialActivityIDNum
		Write8(pPlayerRoomVisibleInfo, 0); //CrewID
		Write8(pPlayerRoomVisibleInfo, 0); //SpecialActivityInfoNum
		for (size_t i = 0; i < n; i++)
		{ //SpecialActivityInfo
			BYTE* pSpecialActivityInfo = pPlayerRoomVisibleInfo;
			Write16(pSpecialActivityInfo, 0); //len

			Write8(pSpecialActivityInfo, 0); //ProfessionLicenseInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ProfessionLicenseInfo
				BYTE* pProfessionLicenseInfo = pSpecialActivityInfo;
				Write16(pProfessionLicenseInfo, 0); //len

				Write8(pProfessionLicenseInfo, 0); //BigLevel
				Write8(pProfessionLicenseInfo, 0); //SmallLevel

				len = pProfessionLicenseInfo - pSpecialActivityInfo;
				Set16(pSpecialActivityInfo, (WORD)len);
				pSpecialActivityInfo += len;
			}

			len = pSpecialActivityInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //ParaNum
		Write32(pPlayerRoomVisibleInfo, 0); //ParaList[]
		Write8(pPlayerRoomVisibleInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemOrder
			BYTE* pItemOrder = pPlayerRoomVisibleInfo;
			Write16(pItemOrder, 0); //len

			Write32(pItemOrder, 0); //KartID
			Write32(pItemOrder, 0); //Order
			Write32(pItemOrder, 0); //BackGroundID

			len = pItemOrder - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //TDCExcluItemNum
		Write32(pPlayerRoomVisibleInfo, 0); //TDCExclusiveItemID[]
		Write8(pPlayerRoomVisibleInfo, 0); //EquipNiChangItemNum
		for (size_t i = 0; i < n; i++)
		{ //NiChangPavilionEquipItemInfo
			BYTE* pNiChangPavilionEquipItemInfo = pPlayerRoomVisibleInfo;
			Write16(pNiChangPavilionEquipItemInfo, 0); //len

			Write32(pNiChangPavilionEquipItemInfo, 0); //ItemId
			Write16(pNiChangPavilionEquipItemInfo, 0); //CurrentEquipColorationPlanId

			len = pNiChangPavilionEquipItemInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //TestKartGameType
		Write32(pPlayerRoomVisibleInfo, 0); //GameTestKartID
		Write8(pPlayerRoomVisibleInfo, 0); //HasStarsFightingInfo
		for (size_t i = 0; i < n; i++)
		{ //StarsFightingInfo
			BYTE* pStarsFightingInfo = pPlayerRoomVisibleInfo;
			Write16(pStarsFightingInfo, 0); //len

			Write32(pStarsFightingInfo, 0); //Star
			Write32(pStarsFightingInfo, 0); //StarVal
			Write32(pStarsFightingInfo, 0); //StarsFightingStarLevel

			len = pStarsFightingInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //RoomBGSetting

		len = pPlayerRoomVisibleInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //PlayerCount2
	for (size_t i = 0; i < n; i++)
	{ //PlayerRelationInfo
		BYTE* pPlayerRelationInfo = p;
		Write16(pPlayerRelationInfo, 0); //len

		Write32(pPlayerRelationInfo, 0); //SrcUin
		Write32(pPlayerRelationInfo, 0); //RelationFlag
		Write32(pPlayerRelationInfo, 0); //RelationUin
		WriteString(pPlayerRelationInfo, 0); //RelationNickName[]
		Write32(pPlayerRelationInfo, 0); //EngageTime
		Write32(pPlayerRelationInfo, 0); //NextCanBookingTimeLimit
		Write32(pPlayerRelationInfo, 0); //BeginHoneyMoonTime
		Write32(pPlayerRelationInfo, 0); //EndHoneyMoonTime
		Write8(pPlayerRelationInfo, 0); //EngageFlag

		len = pPlayerRelationInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasNext
	Write16(p, 0); //KartNum
	for (size_t i = 0; i < n; i++)
	{ //KartRefitInfo
		BYTE* pKartRefitInfo = p;
		Write16(pKartRefitInfo, 0); //len

		Write32(pKartRefitInfo, 0); //Uin
		Write32(pKartRefitInfo, 0); //KartId
		Write32(pKartRefitInfo, 0); //RefitCout
		Write16(pKartRefitInfo, 0); //MaxFlags
		Write16(pKartRefitInfo, 0); //WWeight
		Write16(pKartRefitInfo, 0); //SpeedWeight
		Write16(pKartRefitInfo, 0); //JetWeight
		Write16(pKartRefitInfo, 0); //SJetWeight
		Write16(pKartRefitInfo, 0); //AccuWeight
		Write32(pKartRefitInfo, 0); //ShapeRefitCount
		Write32(pKartRefitInfo, 0); //KartHeadRefitItemID
		Write32(pKartRefitInfo, 0); //KartTailRefitItemID
		Write32(pKartRefitInfo, 0); //KartFlankRefitItemID
		Write32(pKartRefitInfo, 0); //KartTireRefitItemID
		Write32(pKartRefitInfo, 0); //SecondRefitCount
		Write16(pKartRefitInfo, 0); //Speed2Weight
		Write16(pKartRefitInfo, 0); //DriftVecWeight
		Write16(pKartRefitInfo, 0); //AdditionalZSpeedWeight
		Write16(pKartRefitInfo, 0); //AntiCollisionWeight
		Write16(pKartRefitInfo, 0); //LuckyValue
		Write16(pKartRefitInfo, 0); //RefitLuckyValueMaxWeight
		Write32(pKartRefitInfo, 0); //ShapeSuitID
		Write8(pKartRefitInfo, 0); //LegendSuitLevel
		Write32(pKartRefitInfo, 0); //LegendSuitLevelChoice
		Write32(pKartRefitInfo, 0); //ShapeLegendSuitID

		len = pKartRefitInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 227, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifySkillStoneKartInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //uin
	WriteUn(p, 0); //kartNum
	for (size_t i = 0; i < n; i++)
	{ //kartInfo
		BYTE* pkartInfo = p;
		Write16(pkartInfo, 0); //len

		Write32(pkartInfo, 0); //KartID
		Write32(pkartInfo, 0); //StoneGrooveNum
		for (size_t i = 0; i < n; i++)
		{ //StoneGrooveInfo
			BYTE* pStoneGrooveInfo = pkartInfo;
			Write16(pStoneGrooveInfo, 0); //len

			Write32(pStoneGrooveInfo, 0); //StoneUseOccaType
			Write32(pStoneGrooveInfo, 0); //SkillStoneID

			len = pStoneGrooveInfo - pkartInfo;
			Set16(pkartInfo, (WORD)len);
			pkartInfo += len;
		}

		len = pkartInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasMoreInfo

	len = p - buf;
	SendToClient(Client, 228, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifySkillStoneKartMoreInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //uin
	WriteUn(p, 0); //kartNum
	for (size_t i = 0; i < n; i++)
	{ //kartInfo
		BYTE* pkartInfo = p;
		Write16(pkartInfo, 0); //len

		Write32(pkartInfo, 0); //KartID
		Write32(pkartInfo, 0); //StoneGrooveNum
		for (size_t i = 0; i < n; i++)
		{ //StoneGrooveInfo
			BYTE* pStoneGrooveInfo = pkartInfo;
			Write16(pStoneGrooveInfo, 0); //len

			Write32(pStoneGrooveInfo, 0); //StoneUseOccaType
			Write32(pStoneGrooveInfo, 0); //SkillStoneID

			len = pStoneGrooveInfo - pkartInfo;
			Set16(pkartInfo, (WORD)len);
			pkartInfo += len;
		}

		len = pkartInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasNext

	len = p - buf;
	SendToClient(Client, 28416, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestDanceChangeMode(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	int Mode = Read32(p);

}

void ResponseDanceChangeMode(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //NewMode
	Write8(p, 0); //ReasonLen
	Write32(p, 0); //PreKnownMusicID

	len = p - buf;
	SendToClient(Client, 257, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyDanceChangeMode(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //Uin
	Write32(p, 0); //NewMode
	Write32(p, 0); //PreKnownMusicID

	len = p - buf;
	SendToClient(Client, 723, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestDanceChangeRandKeyFlag(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	bool RandKeyFlag = Read8(p);

}

void ResponseDanceChangeRandKeyFlag(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //NewRandKeyFlag
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 258, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyDanceChangeRandKeyFlag(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //Uin
	Write8(p, 0); //NewRandKeyFlag

	len = p - buf;
	SendToClient(Client, 724, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestAffection(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	Un Time = ReadUn(p);
	UINT SrcUin = Read32(p);
	UINT DstUin = Read32(p);
	short RoomID = Read16(p);
	int ItemID = Read32(p);

}

void NotifyAffection(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //SrcUin
	Write32(p, 0); //DstUin
	Write16(p, 0); //RoomID
	Write32(p, 0); //ItemID
	Write16(p, 0); //IncAdiration
	Write32(p, 0); //CurAdiration

	len = p - buf;
	SendToClient(Client, 593, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestAKAffection(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	Un Time = ReadUn(p);
	UINT SrcUin = Read32(p);
	UINT DstUin = Read32(p);
	short RoomID = Read16(p);
	int ItemID = Read32(p);

}

void NotifyAKAffection(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //SrcUin
	Write32(p, 0); //DstUin
	Write16(p, 0); //RoomID
	Write32(p, 0); //ItemID
	Write16(p, 0); //IncAdiration
	Write32(p, 0); //CurAdiration

	len = p - buf;
	SendToClient(Client, 594, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestChangeRoomName(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	char[] NewRoomName[] = ReadString(p);

}

void ResponseChangeRoomName(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	WriteString(p, 0); //NewRoomName[]
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 222, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyChangeRoomName(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteString(p, 0); //NewRoomName[]

	len = p - buf;
	SendToClient(Client, 598, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyTimerChallengeChangeBuffStatus(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write8(p, 0); //EquipBuffNum
	Write32(p, 0); //EquipBuffList[]
	Write8(p, 0); //Status

	len = p - buf;
	SendToClient(Client, 28422, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyNPCInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //NPCCfgVer
	Write8(p, 0); //NPCNum
	for (size_t i = 0; i < n; i++)
	{ //NPCInfo
		BYTE* pNPCInfo = p;
		Write16(pNPCInfo, 0); //len

		Write32(pNPCInfo, 0); //NPCID
		WriteString(pNPCInfo, 0); //NPCName[]
		Write8(pNPCInfo, 0); //SceneNum
		for (size_t i = 0; i < n; i++)
		{ //NPCPositionInScene
			BYTE* pNPCPositionInScene = pNPCInfo;
			Write16(pNPCPositionInScene, 0); //len

			Write32(pNPCPositionInScene, 0); //SceneID
			Write8(pNPCPositionInScene, 0); //NPCPositionNum
			for (size_t i = 0; i < n; i++)
			{ //NPCPosition
				BYTE* pNPCPosition = pNPCPositionInScene;
				Write16(pNPCPosition, 0); //len

				Write32(pNPCPosition, 0); //Idx
				Write32(pNPCPosition, 0); //Postion[]

				len = pNPCPosition - pNPCPositionInScene;
				Set16(pNPCPositionInScene, (WORD)len);
				pNPCPositionInScene += len;
			}

			len = pNPCPositionInScene - pNPCInfo;
			Set16(pNPCInfo, (WORD)len);
			pNPCInfo += len;
		}
		Write8(pNPCInfo, 0); //ActNum
		Write32(pNPCInfo, 0); //ActionID[]
		Write8(pNPCInfo, 0); //SpeechNum
		for (size_t i = 0; i < n; i++)
		{ //Speech
			BYTE* pSpeech = pNPCInfo;
			Write16(pSpeech, 0); //len

			Write8(pSpeech, 0); //Len

			len = pSpeech - pNPCInfo;
			Set16(pNPCInfo, (WORD)len);
			pNPCInfo += len;
		}
		Write8(pNPCInfo, 0); //SpeechNum2
		for (size_t i = 0; i < n; i++)
		{ //Speech2
			BYTE* pSpeech2 = pNPCInfo;
			Write16(pSpeech2, 0); //len

			Write8(pSpeech2, 0); //Len

			len = pSpeech2 - pNPCInfo;
			Set16(pNPCInfo, (WORD)len);
			pNPCInfo += len;
		}
		{ //NPCItemInfo
			BYTE* pNPCItemInfo = pNPCInfo;
			Write16(pNPCItemInfo, 0); //len

			Write32(pNPCItemInfo, 0); //RoleID
			Write32(pNPCItemInfo, 0); //HairID
			Write32(pNPCItemInfo, 0); //FaceID
			Write32(pNPCItemInfo, 0); //GlassID
			Write32(pNPCItemInfo, 0); //CoatID
			Write32(pNPCItemInfo, 0); //GloveID
			Write32(pNPCItemInfo, 0); //TrousersID
			Write32(pNPCItemInfo, 0); //PersonarID
			Write32(pNPCItemInfo, 0); //TattooID
			Write32(pNPCItemInfo, 0); //WingID
			Write32(pNPCItemInfo, 0); //DecoratorID
			Write32(pNPCItemInfo, 0); //KartID
			Write32(pNPCItemInfo, 0); //ColorID
			Write32(pNPCItemInfo, 0); //TrackID
			Write32(pNPCItemInfo, 0); //EffectID
			Write32(pNPCItemInfo, 0); //BrandID
			Write32(pNPCItemInfo, 0); //TailID

			len = pNPCItemInfo - pNPCInfo;
			Set16(pNPCInfo, (WORD)len);
			pNPCInfo += len;
		}
		Write8(pNPCInfo, 0); //DialogNum
		for (size_t i = 0; i < n; i++)
		{ //NPCDialogInfo
			BYTE* pNPCDialogInfo = pNPCInfo;
			Write16(pNPCDialogInfo, 0); //len

			Write32(pNPCDialogInfo, 0); //DialogID
			WriteString(pNPCDialogInfo, 0); //Title[]
			Write16(pNPCDialogInfo, 0); //ContLen
			Write8(pNPCDialogInfo, 0); //LinkNum
			for (size_t i = 0; i < n; i++)
			{ //LinkInfo
				BYTE* pLinkInfo = pNPCDialogInfo;
				Write16(pLinkInfo, 0); //len

				Write16(pLinkInfo, 0); //LinkLen

				len = pLinkInfo - pNPCDialogInfo;
				Set16(pNPCDialogInfo, (WORD)len);
				pNPCDialogInfo += len;
			}

			len = pNPCDialogInfo - pNPCInfo;
			Set16(pNPCInfo, (WORD)len);
			pNPCInfo += len;
		}
		Write8(pNPCInfo, 0); //NPCType
		Write32(pNPCInfo, 0); //Interval
		Write8(pNPCInfo, 0); //UnChangeItemTypeNum
		Write32(pNPCInfo, 0); //UnChangeItemType[]
		Write32(pNPCInfo, 0); //SpeechInterval
		Write16(pNPCInfo, 0); //Privilage

		len = pNPCInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 863, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetPkableNPCInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetPkableNPCInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //NPCNum
	for (size_t i = 0; i < n; i++)
	{ //NPCInfo
		BYTE* pNPCInfo = p;
		Write16(pNPCInfo, 0); //len

		{ //NPCBaseInfo
			BYTE* pNPCBaseInfo = pNPCInfo;
			Write16(pNPCBaseInfo, 0); //len

			Write32(pNPCBaseInfo, 0); //NPCID
			WriteString(pNPCBaseInfo, 0); //NPCNickName[]
			{ //NPCItemInfo
				BYTE* pNPCItemInfo = pNPCBaseInfo;
				Write16(pNPCItemInfo, 0); //len

				Write32(pNPCItemInfo, 0); //RoleID
				Write32(pNPCItemInfo, 0); //HairID
				Write32(pNPCItemInfo, 0); //FaceID
				Write32(pNPCItemInfo, 0); //GlassID
				Write32(pNPCItemInfo, 0); //CoatID
				Write32(pNPCItemInfo, 0); //GloveID
				Write32(pNPCItemInfo, 0); //TrousersID
				Write32(pNPCItemInfo, 0); //PersonarID
				Write32(pNPCItemInfo, 0); //TattooID
				Write32(pNPCItemInfo, 0); //WingID
				Write32(pNPCItemInfo, 0); //DecoratorID
				Write32(pNPCItemInfo, 0); //KartID
				Write32(pNPCItemInfo, 0); //ColorID
				Write32(pNPCItemInfo, 0); //TrackID
				Write32(pNPCItemInfo, 0); //EffectID
				Write32(pNPCItemInfo, 0); //BrandID
				Write32(pNPCItemInfo, 0); //TailID

				len = pNPCItemInfo - pNPCBaseInfo;
				Set16(pNPCBaseInfo, (WORD)len);
				pNPCBaseInfo += len;
			}

			len = pNPCBaseInfo - pNPCInfo;
			Set16(pNPCInfo, (WORD)len);
			pNPCInfo += len;
		}
		{ //NPCStatusInfo
			BYTE* pNPCStatusInfo = pNPCInfo;
			Write16(pNPCStatusInfo, 0); //len

			Write32(pNPCStatusInfo, 0); //Interval
			Write32(pNPCStatusInfo, 0); //LastPlayerUin
			WriteString(pNPCStatusInfo, 0); //LastPlayerNickName[]
			Write32(pNPCStatusInfo, 0); //Time

			len = pNPCStatusInfo - pNPCInfo;
			Set16(pNPCInfo, (WORD)len);
			pNPCInfo += len;
		}

		len = pNPCInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 431, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestCheckNickName(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	char[] NickName[] = ReadString(p);

}

void ResponseCheckNickName(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	WriteString(p, 0); //NickName[]

	len = p - buf;
	SendToClient(Client, 432, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestSetPkableNPCInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	{ //NPCBaseInfo
		BYTE* pNPCBaseInfo = p;
		len = Read16(pNPCBaseInfo);

		int NPCID = Read32(pNPCBaseInfo);
		char[] NPCNickName[] = ReadString(pNPCBaseInfo);
		{ //NPCItemInfo
			BYTE* pNPCItemInfo = pNPCBaseInfo;
			len = Read16(pNPCItemInfo);

			int RoleID = Read32(pNPCItemInfo);
			int HairID = Read32(pNPCItemInfo);
			int FaceID = Read32(pNPCItemInfo);
			int GlassID = Read32(pNPCItemInfo);
			int CoatID = Read32(pNPCItemInfo);
			int GloveID = Read32(pNPCItemInfo);
			int TrousersID = Read32(pNPCItemInfo);
			int PersonarID = Read32(pNPCItemInfo);
			int TattooID = Read32(pNPCItemInfo);
			int WingID = Read32(pNPCItemInfo);
			int DecoratorID = Read32(pNPCItemInfo);
			int KartID = Read32(pNPCItemInfo);
			int ColorID = Read32(pNPCItemInfo);
			int TrackID = Read32(pNPCItemInfo);
			int EffectID = Read32(pNPCItemInfo);
			int BrandID = Read32(pNPCItemInfo);
			int TailID = Read32(pNPCItemInfo);

			pNPCBaseInfo += len;
		}

		p += len;
	}

}

void ResponseSetPkableNPCInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	{ //NPCInfo
		BYTE* pNPCInfo = p;
		Write16(pNPCInfo, 0); //len

		{ //NPCBaseInfo
			BYTE* pNPCBaseInfo = pNPCInfo;
			Write16(pNPCBaseInfo, 0); //len

			Write32(pNPCBaseInfo, 0); //NPCID
			WriteString(pNPCBaseInfo, 0); //NPCNickName[]
			{ //NPCItemInfo
				BYTE* pNPCItemInfo = pNPCBaseInfo;
				Write16(pNPCItemInfo, 0); //len

				Write32(pNPCItemInfo, 0); //RoleID
				Write32(pNPCItemInfo, 0); //HairID
				Write32(pNPCItemInfo, 0); //FaceID
				Write32(pNPCItemInfo, 0); //GlassID
				Write32(pNPCItemInfo, 0); //CoatID
				Write32(pNPCItemInfo, 0); //GloveID
				Write32(pNPCItemInfo, 0); //TrousersID
				Write32(pNPCItemInfo, 0); //PersonarID
				Write32(pNPCItemInfo, 0); //TattooID
				Write32(pNPCItemInfo, 0); //WingID
				Write32(pNPCItemInfo, 0); //DecoratorID
				Write32(pNPCItemInfo, 0); //KartID
				Write32(pNPCItemInfo, 0); //ColorID
				Write32(pNPCItemInfo, 0); //TrackID
				Write32(pNPCItemInfo, 0); //EffectID
				Write32(pNPCItemInfo, 0); //BrandID
				Write32(pNPCItemInfo, 0); //TailID

				len = pNPCItemInfo - pNPCBaseInfo;
				Set16(pNPCBaseInfo, (WORD)len);
				pNPCBaseInfo += len;
			}

			len = pNPCBaseInfo - pNPCInfo;
			Set16(pNPCInfo, (WORD)len);
			pNPCInfo += len;
		}
		{ //NPCStatusInfo
			BYTE* pNPCStatusInfo = pNPCInfo;
			Write16(pNPCStatusInfo, 0); //len

			Write32(pNPCStatusInfo, 0); //Interval
			Write32(pNPCStatusInfo, 0); //LastPlayerUin
			WriteString(pNPCStatusInfo, 0); //LastPlayerNickName[]
			Write32(pNPCStatusInfo, 0); //Time

			len = pNPCStatusInfo - pNPCInfo;
			Set16(pNPCInfo, (WORD)len);
			pNPCInfo += len;
		}

		len = pNPCInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 433, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifySetPkableNPCInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	{ //NPCInfo
		BYTE* pNPCInfo = p;
		Write16(pNPCInfo, 0); //len

		{ //NPCBaseInfo
			BYTE* pNPCBaseInfo = pNPCInfo;
			Write16(pNPCBaseInfo, 0); //len

			Write32(pNPCBaseInfo, 0); //NPCID
			WriteString(pNPCBaseInfo, 0); //NPCNickName[]
			{ //NPCItemInfo
				BYTE* pNPCItemInfo = pNPCBaseInfo;
				Write16(pNPCItemInfo, 0); //len

				Write32(pNPCItemInfo, 0); //RoleID
				Write32(pNPCItemInfo, 0); //HairID
				Write32(pNPCItemInfo, 0); //FaceID
				Write32(pNPCItemInfo, 0); //GlassID
				Write32(pNPCItemInfo, 0); //CoatID
				Write32(pNPCItemInfo, 0); //GloveID
				Write32(pNPCItemInfo, 0); //TrousersID
				Write32(pNPCItemInfo, 0); //PersonarID
				Write32(pNPCItemInfo, 0); //TattooID
				Write32(pNPCItemInfo, 0); //WingID
				Write32(pNPCItemInfo, 0); //DecoratorID
				Write32(pNPCItemInfo, 0); //KartID
				Write32(pNPCItemInfo, 0); //ColorID
				Write32(pNPCItemInfo, 0); //TrackID
				Write32(pNPCItemInfo, 0); //EffectID
				Write32(pNPCItemInfo, 0); //BrandID
				Write32(pNPCItemInfo, 0); //TailID

				len = pNPCItemInfo - pNPCBaseInfo;
				Set16(pNPCBaseInfo, (WORD)len);
				pNPCBaseInfo += len;
			}

			len = pNPCBaseInfo - pNPCInfo;
			Set16(pNPCInfo, (WORD)len);
			pNPCInfo += len;
		}
		{ //NPCStatusInfo
			BYTE* pNPCStatusInfo = pNPCInfo;
			Write16(pNPCStatusInfo, 0); //len

			Write32(pNPCStatusInfo, 0); //Interval
			Write32(pNPCStatusInfo, 0); //LastPlayerUin
			WriteString(pNPCStatusInfo, 0); //LastPlayerNickName[]
			Write32(pNPCStatusInfo, 0); //Time

			len = pNPCStatusInfo - pNPCInfo;
			Set16(pNPCInfo, (WORD)len);
			pNPCInfo += len;
		}

		len = pNPCInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 434, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestNPCDoAction(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int NPCID = Read32(p);
	short ActionID = Read16(p);
	bool SpeedIdx = Read8(p);

}

void ResponseNPCDoAction(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //NPCID
	Write16(p, 0); //ActionID
	Write8(p, 0); //SpeedIdx

	len = p - buf;
	SendToClient(Client, 435, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyNPCDoAction(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //NPCID
	Write16(p, 0); //ActionID
	Write8(p, 0); //SpeedIdx

	len = p - buf;
	SendToClient(Client, 436, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyChairInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	for (size_t i = 0; i < n; i++)
	{ //ChairInfo
		BYTE* pChairInfo = p;
		Write16(pChairInfo, 0); //len

		Write32(pChairInfo, 0); //UinInChair[]

		len = pChairInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 864, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestChangeChairState(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	bool ChangeState = Read8(p);
	int ChairIndx = Read32(p);
	bool SeatIndx = Read8(p);

}

void RequestReportListenMusic(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseChangeChairState(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //Result
	Write8(p, 0); //ChangeState
	Write32(p, 0); //ChairIndx
	Write8(p, 0); //SeatIndx

	len = p - buf;
	SendToClient(Client, 360, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyChangeChairState(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //ChairIndx
	Write8(p, 0); //SeatIndx
	Write32(p, 0); //Uin
	Write8(p, 0); //State

	len = p - buf;
	SendToClient(Client, 865, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestChangeUdpState(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	Un Time = ReadUn(p);
	bool State = Read8(p);

}

void RequestDeleteOneItem(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	int ItemID = Read32(p);

}

void ResponseDeleteOneItem(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	WriteUn(p, 0); //Uin
	Write32(p, 0); //ItemID
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 261, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyRunnerInitInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	for (size_t i = 0; i < n; i++)
	{ //RunnerRoleAttributes
		BYTE* pRunnerRoleAttributes = p;
		Write16(pRunnerRoleAttributes, 0); //len

		Write8(pRunnerRoleAttributes, 0); //HitProtect
		Write32(pRunnerRoleAttributes, 0); //MaxAccFuelOfGroove

		len = pRunnerRoleAttributes - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //PlayerNum
	for (size_t i = 0; i < n; i++)
	{ //RunnerInfo
		BYTE* pRunnerInfo = p;
		Write16(pRunnerInfo, 0); //len

		WriteUn(pRunnerInfo, 0); //Uin
		Write8(pRunnerInfo, 0); //RacerRole
		Write32(pRunnerInfo, 0); //RacerHP
		WriteUn(pRunnerInfo, 0); //Converter
		Write16(pRunnerInfo, 0); //ConvertCount
		Write16(pRunnerInfo, 0); //CatchCount

		len = pRunnerInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 741, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyRunnerReportPos(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //NotifyTime

	len = p - buf;
	SendToClient(Client, 742, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyRunnerBoltResult(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //Uin
	Write8(p, 0); //PropNum
	Write32(p, 0); //PropIdx[]
	Write32(p, 0); //NextInterval

	len = p - buf;
	SendToClient(Client, 743, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyRunnerHPChange(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //Uin
	Write32(p, 0); //HP
	Write8(p, 0); //ChangeReason

	len = p - buf;
	SendToClient(Client, 744, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyRunnerRoleChange(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //Uin
	WriteUn(p, 0); //ConverterUin
	Write8(p, 0); //PrevRole
	Write8(p, 0); //Role

	len = p - buf;
	SendToClient(Client, 745, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestRunnerReportPos(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	int DistanceToEnd = Read32(p);
	UINT ReportNum = Read32(p);
	for (size_t i = 0; i < n; i++)
	{ //ReportUin
		BYTE* pReportUin = p;
		len = Read16(pReportUin);

		UINT Uin = Read32(pReportUin);
		UINT Dst = Read32(pReportUin);

		p += len;
	}

}

void RequestRunnerOverTake(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	Un DstUin = ReadUn(p);

}

void ResponseRunnerOverTake(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //IsSucceed
	WriteUn(p, 0); //OverTakeUin

	len = p - buf;
	SendToClient(Client, 322, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestRunnerBuyNo2(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);

}

void ResponseRunnerBuyNo2(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //PropNum
	Write32(p, 0); //PropIdx[]

	len = p - buf;
	SendToClient(Client, 323, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestChangeTempEffect(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT ItemID = Read32(p);
	char Flag = Read8(p);

}

void ResponseChangeTempEffect(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //ItemID
	Write8(p, 0); //Result

	len = p - buf;
	SendToClient(Client, 221, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyChangeTempEffect(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //SrcUin
	Write32(p, 0); //ItemID
	Write8(p, 0); //State

	len = p - buf;
	SendToClient(Client, 595, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyShooterInitInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //CompensateModifyRate[]
	Write32(p, 0); //PowerIncRate[]
	Write8(p, 0); //PlayerNum
	for (size_t i = 0; i < n; i++)
	{ //ShooterRaceInitInfo
		BYTE* pShooterRaceInitInfo = p;
		Write16(pShooterRaceInitInfo, 0); //len

		Write32(pShooterRaceInitInfo, 0); //Uin
		Write32(pShooterRaceInitInfo, 0); //InitPower
		Write32(pShooterRaceInitInfo, 0); //InitHP
		Write32(pShooterRaceInitInfo, 0); //RestTime
		Write32(pShooterRaceInitInfo, 0); //RecoverHP
		Write32(pShooterRaceInitInfo, 0); //RecoverPower

		len = pShooterRaceInitInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 771, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyShooterGunPhysParam(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //GunNum
	for (size_t i = 0; i < n; i++)
	{ //GunPhysParam
		BYTE* pGunPhysParam = p;
		Write16(pGunPhysParam, 0); //len

		Write32(pGunPhysParam, 0); //GunID
		Write32(pGunPhysParam, 0); //FireRate
		Write32(pGunPhysParam, 0); //PowerPerShot
		Write32(pGunPhysParam, 0); //Precision
		Write32(pGunPhysParam, 0); //MaxDamage
		Write32(pGunPhysParam, 0); //MinDamage
		Write32(pGunPhysParam, 0); //Stability
		Write32(pGunPhysParam, 0); //MaxPowerAddtion
		Write32(pGunPhysParam, 0); //AttRadius
		Write32(pGunPhysParam, 0); //AttDelta
		Write32(pGunPhysParam, 0); //EscRadius
		Write32(pGunPhysParam, 0); //EscDelta

		len = pGunPhysParam - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyShooterMissilePhysParam(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //MissileNum
	for (size_t i = 0; i < n; i++)
	{ //MissilePhysParam
		BYTE* pMissilePhysParam = p;
		Write16(pMissilePhysParam, 0); //len

		Write32(pMissilePhysParam, 0); //MissileID
		Write32(pMissilePhysParam, 0); //Precision
		Write32(pMissilePhysParam, 0); //MaxDamage
		Write32(pMissilePhysParam, 0); //Stability
		Write32(pMissilePhysParam, 0); //Target
		Write32(pMissilePhysParam, 0); //PowerConRate

		len = pMissilePhysParam - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyShooterDestroy(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //SrcUin
	Write32(p, 0); //DstUin
	Write32(p, 0); //AwardHP
	Write32(p, 0); //AwardPower

	len = p - buf;
	SendToClient(Client, 774, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyShooterMissileDenDeter(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //MissileSeq

	len = p - buf;
	SendToClient(Client, 775, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyShooterMissileResult(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //SrcUin
	Write32(p, 0); //DstUin
	Write8(p, 0); //IsHit
	Write32(p, 0); //DecHP

	len = p - buf;
	SendToClient(Client, 776, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyShooterCurrentHP(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //CurrentHP

	len = p - buf;
	SendToClient(Client, 777, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestShooterDestroyed(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT SrcUin = Read32(p);
	bool Criminal = Read8(p);

}

void RequestShooterRecover(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void RequestShooterMissileAttDeter(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT DstUin = Read32(p);

}

void ResponseShooterMissileAttDeter(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //MissileSeq
	Write8(p, 0); //IsSuccess
	Write8(p, 0); //FailReason

	len = p - buf;
	SendToClient(Client, 334, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestShooterMissileAttRes(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int MissileSeq = Read32(p);
	int Damage = Read32(p);

}

void RequestShooterMissileDenRes(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int MissileSeq = Read32(p);
	int Probability = Read32(p);

}

void RequestShooterReportCurrentHP(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int CurrentHP = Read32(p);

}

void RequestReportCurrentNPCInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int NpcID = Read32(p);
	int RoundNum = Read32(p);

}

void NotifyNPCWeedOut(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //NpcID

	len = p - buf;
	SendToClient(Client, 186, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyMsgBox(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //MsgType
	{ //MsgBox
		BYTE* pMsgBox = p;
		Write16(pMsgBox, 0); //len

		{ //OnlineTaskMsg
			BYTE* pOnlineTaskMsg = pMsgBox;
			Write16(pOnlineTaskMsg, 0); //len

			Write8(pOnlineTaskMsg, 0); //MsgType
			Write32(pOnlineTaskMsg, 0); //OpenDate
			Write32(pOnlineTaskMsg, 0); //OpenTime
			Write32(pOnlineTaskMsg, 0); //CloseDate
			Write32(pOnlineTaskMsg, 0); //CloseTime
			Write8(pOnlineTaskMsg, 0); //IsToday
			Write8(pOnlineTaskMsg, 0); //URLLen
			Write8(pOnlineTaskMsg, 0); //WeekLimit

			len = pOnlineTaskMsg - pMsgBox;
			Set16(pMsgBox, (WORD)len);
			pMsgBox += len;
		}
		{ //VipPages
			BYTE* pVipPages = pMsgBox;
			Write16(pVipPages, 0); //len

			Write8(pVipPages, 0); //URLLen1
			Write8(pVipPages, 0); //URLLen2
			Write8(pVipPages, 0); //URLLen3

			len = pVipPages - pMsgBox;
			Set16(pMsgBox, (WORD)len);
			pMsgBox += len;
		}
		{ //ActivitiesAd
			BYTE* pActivitiesAd = pMsgBox;
			Write16(pActivitiesAd, 0); //len

			Write8(pActivitiesAd, 0); //URLLen

			len = pActivitiesAd - pMsgBox;
			Set16(pMsgBox, (WORD)len);
			pMsgBox += len;
		}
		{ //MatchSchedule
			BYTE* pMatchSchedule = pMsgBox;
			Write16(pMatchSchedule, 0); //len

			Write8(pMatchSchedule, 0); //URLLen

			len = pMatchSchedule - pMsgBox;
			Set16(pMsgBox, (WORD)len);
			pMsgBox += len;
		}
		{ //LoadingAd
			BYTE* pLoadingAd = pMsgBox;
			Write16(pLoadingAd, 0); //len

			Write8(pLoadingAd, 0); //Ver
			Write8(pLoadingAd, 0); //URLLen

			len = pLoadingAd - pMsgBox;
			Set16(pMsgBox, (WORD)len);
			pMsgBox += len;
		}
		{ //TaskAdvAd
			BYTE* pTaskAdvAd = pMsgBox;
			Write16(pTaskAdvAd, 0); //len

			Write8(pTaskAdvAd, 0); //URLLen

			len = pTaskAdvAd - pMsgBox;
			Set16(pMsgBox, (WORD)len);
			pMsgBox += len;
		}
		{ //LoginAd
			BYTE* pLoginAd = pMsgBox;
			Write16(pLoginAd, 0); //len

			Write8(pLoginAd, 0); //URLLen

			len = pLoginAd - pMsgBox;
			Set16(pMsgBox, (WORD)len);
			pMsgBox += len;
		}
		{ //T3Ad
			BYTE* pT3Ad = pMsgBox;
			Write16(pT3Ad, 0); //len

			Write8(pT3Ad, 0); //URLLen1
			Write8(pT3Ad, 0); //URLLen2
			Write8(pT3Ad, 0); //URLLen3
			Write8(pT3Ad, 0); //URLLen4

			len = pT3Ad - pMsgBox;
			Set16(pMsgBox, (WORD)len);
			pMsgBox += len;
		}

		len = pMsgBox - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 596, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyNianShouInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //NianShouNum
	for (size_t i = 0; i < n; i++)
	{ //NianShouSingleInfo
		BYTE* pNianShouSingleInfo = p;
		Write16(pNianShouSingleInfo, 0); //len

		Write32(pNianShouSingleInfo, 0); //OpenDate
		Write32(pNianShouSingleInfo, 0); //OpenTime
		Write32(pNianShouSingleInfo, 0); //CloseDate
		Write32(pNianShouSingleInfo, 0); //CloseTime
		Write32(pNianShouSingleInfo, 0); //ActIdForClient
		Write16(pNianShouSingleInfo, 0); //MapNum
		Write32(pNianShouSingleInfo, 0); //MapID[]

		len = pNianShouSingleInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 597, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyRandRoomNameList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //Count
	for (size_t i = 0; i < n; i++)
	{ //RoomNames
		BYTE* pRoomNames = p;
		Write16(pRoomNames, 0); //len

		Write8(pRoomNames, 0); //NameLen
		Write8(pRoomNames, 0); //BaseModes[]

		len = pRoomNames - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 760, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetLuckAwardList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int ExchangeID = Read32(p);

}

void ResponseGetLuckAwardList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //Time
	Write32(p, 0); //ExchangeID
	Write8(p, 0); //AwardNum
	for (size_t i = 0; i < n; i++)
	{ //LuckAwardList
		BYTE* pLuckAwardList = p;
		Write16(pLuckAwardList, 0); //len

		Write8(pLuckAwardList, 0); //AwardType
		Write32(pLuckAwardList, 0); //AwardPara
		Write8(pLuckAwardList, 0); //AwardPostion
		Write8(pLuckAwardList, 0); //AwardDesLen
		Write32(pLuckAwardList, 0); //ItemNum
		Write32(pLuckAwardList, 0); //AvailPeriod

		len = pLuckAwardList - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 172, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetRandomTask(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR Flag = Read8(p);

}

void ResponseGetRandomTask(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write32(p, 0); //TaskPackNum
	for (size_t i = 0; i < n; i++)
	{ //SystemTaskPackInfo
		BYTE* pSystemTaskPackInfo = p;
		Write16(pSystemTaskPackInfo, 0); //len

		Write32(pSystemTaskPackInfo, 0); //PackID
		WriteString(pSystemTaskPackInfo, 0); //PackName[]
		Write16(pSystemTaskPackInfo, 0); //PackType
		Write16(pSystemTaskPackInfo, 0); //TaskNum
		Write32(pSystemTaskPackInfo, 0); //TaskID[]
		Write16(pSystemTaskPackInfo, 0); //Priority
		Write16(pSystemTaskPackInfo, 0); //PackMode

		len = pSystemTaskPackInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //TaskNum
	for (size_t i = 0; i < n; i++)
	{ //SystemTaskInfo
		BYTE* pSystemTaskInfo = p;
		Write16(pSystemTaskInfo, 0); //len

		Write32(pSystemTaskInfo, 0); //TaskID
		Write32(pSystemTaskInfo, 0); //PackID
		WriteString(pSystemTaskInfo, 0); //TaskName[]
		Write16(pSystemTaskInfo, 0); //TaskIntroLen
		Write8(pSystemTaskInfo, 0); //SuccDialogLen
		Write8(pSystemTaskInfo, 0); //FailDialogLen
		Write8(pSystemTaskInfo, 0); //AwardInfoLen
		Write8(pSystemTaskInfo, 0); //AwardOtherInfoLen
		Write8(pSystemTaskInfo, 0); //ProgressLen
		Write16(pSystemTaskInfo, 0); //ExecuteNum
		Write8(pSystemTaskInfo, 0); //PrevTaskNum
		Write32(pSystemTaskInfo, 0); //PrevTaskID[]
		Write16(pSystemTaskInfo, 0); //LogicType
		Write16(pSystemTaskInfo, 0); //TaskType
		Write8(pSystemTaskInfo, 0); //OperatorType
		Write32(pSystemTaskInfo, 0); //OperatorParam
		Write32(pSystemTaskInfo, 0); //Option
		Write32(pSystemTaskInfo, 0); //Identity
		Write32(pSystemTaskInfo, 0); //NeedNum
		Write16(pSystemTaskInfo, 0); //ShowType
		Write32(pSystemTaskInfo, 0); //TotalTime
		Write8(pSystemTaskInfo, 0); //DiffInfoLen
		Write16(pSystemTaskInfo, 0); //TaskShortIntroLen
		Write16(pSystemTaskInfo, 0); //JumpFuncNameLen

		len = pSystemTaskInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //TaskNum
	for (size_t i = 0; i < n; i++)
	{ //TaskInfo
		BYTE* pTaskInfo = p;
		Write16(pTaskInfo, 0); //len

		{ //PlayerDBTaskInfo
			BYTE* pPlayerDBTaskInfo = pTaskInfo;
			Write16(pPlayerDBTaskInfo, 0); //len

			Write32(pPlayerDBTaskInfo, 0); //TaskID
			Write16(pPlayerDBTaskInfo, 0); //OptionID
			Write8(pPlayerDBTaskInfo, 0); //Status
			Write8(pPlayerDBTaskInfo, 0); //PrevStatus
			Write32(pPlayerDBTaskInfo, 0); //ProgressRate
			Write32(pPlayerDBTaskInfo, 0); //Other
			Write32(pPlayerDBTaskInfo, 0); //TakeTime
			Write32(pPlayerDBTaskInfo, 0); //LastUpdateTime

			len = pPlayerDBTaskInfo - pTaskInfo;
			Set16(pTaskInfo, (WORD)len);
			pTaskInfo += len;
		}
		Write16(pTaskInfo, 0); //MapID
		Write8(pTaskInfo, 0); //IsRecommandTask

		len = pTaskInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //TaskDescNum
	for (size_t i = 0; i < n; i++)
	{ //TaskDescInfo
		BYTE* pTaskDescInfo = p;
		Write16(pTaskDescInfo, 0); //len

		Write32(pTaskDescInfo, 0); //TaskID
		Write8(pTaskDescInfo, 0); //RandTaskType
		Write32(pTaskDescInfo, 0); //GameMode
		Write32(pTaskDescInfo, 0); //GameSubMode
		Write32(pTaskDescInfo, 0); //ID
		Write16(pTaskDescInfo, 0); //PlayerNum
		Write16(pTaskDescInfo, 0); //Score
		Write16(pTaskDescInfo, 0); //NeedNum

		len = pTaskDescInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 187, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetSpecialBroadcasts(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	bool Type = Read8(p);

}

void ResponseGetSpecialBroadcasts(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //Type
	Write8(p, 0); //BroadcastNum
	for (size_t i = 0; i < n; i++)
	{ //Broadcast
		BYTE* pBroadcast = p;
		Write16(pBroadcast, 0); //len

		Write8(pBroadcast, 0); //BCFlag
		Write16(pBroadcast, 0); //ConTime
		Write16(pBroadcast, 0); //ContentLen
		Write32(pBroadcast, 0); //BroadcastType
		Write8(pBroadcast, 0); //DisplayFlag
		Write32(pBroadcast, 0); //ID1
		Write32(pBroadcast, 0); //ID2
		Write16(pBroadcast, 0); //AttachLen

		len = pBroadcast - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 362, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestFishRegister(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseFishRegister(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //Result
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 10500, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestFishLogin(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseFishLogin(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //Result
	Write32(p, 0); //Uin
	{ //BaseFishInfo
		BYTE* pBaseFishInfo = p;
		Write16(pBaseFishInfo, 0); //len

		Write32(pBaseFishInfo, 0); //Experience
		Write32(pBaseFishInfo, 0); //Money
		Write8(pBaseFishInfo, 0); //FishStockNum
		Write8(pBaseFishInfo, 0); //RubbishCount

		len = pBaseFishInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //TodayInfo
		BYTE* pTodayInfo = p;
		Write16(pTodayInfo, 0); //len

		Write8(pTodayInfo, 0); //RestStealCount
		Write8(pTodayInfo, 0); //RestVisitStrangerCount
		Write8(pTodayInfo, 0); //RestClearRubbishCount

		len = pTodayInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //FishStockNum
	for (size_t i = 0; i < n; i++)
	{ //FishStockInfo
		BYTE* pFishStockInfo = p;
		Write16(pFishStockInfo, 0); //len

		Write8(pFishStockInfo, 0); //FishStockID
		Write8(pFishStockInfo, 0); //MaturityCount
		Write8(pFishStockInfo, 0); //TotalGrowStage
		Write8(pFishStockInfo, 0); //CurrentGrowStage
		Write8(pFishStockInfo, 0); //FishNum
		Write8(pFishStockInfo, 0); //StealedCount
		Write8(pFishStockInfo, 0); //FeedInfo
		Write32(pFishStockInfo, 0); //FishItemID
		Write32(pFishStockInfo, 0); //FishStartTime
		Write32(pFishStockInfo, 0); //MaturityTime
		Write32(pFishStockInfo, 0); //CurGrowStageEndTime

		len = pFishStockInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 10501, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestFishEnter(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT DstUin = Read32(p);
	UCHAR IsFriend = Read8(p);

}

void ResponseFishEnter(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //DstUin
	Write16(p, 0); //Result
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 10503, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestFishExit(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseFishExit(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //Result
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 10504, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestFishGetFishInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR HaveBaseInfo = Read8(p);
	UCHAR HaveTodayInfo = Read8(p);
	UCHAR HaveFishStockInfo = Read8(p);

}

void ResponseFishGetFishInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //Result
	Write8(p, 0); //HaveBaseInfo
	for (size_t i = 0; i < n; i++)
	{ //BaseFishInfo
		BYTE* pBaseFishInfo = p;
		Write16(pBaseFishInfo, 0); //len

		Write32(pBaseFishInfo, 0); //Experience
		Write32(pBaseFishInfo, 0); //Money
		Write8(pBaseFishInfo, 0); //FishStockNum
		Write8(pBaseFishInfo, 0); //RubbishCount

		len = pBaseFishInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HaveTodayInfo
	for (size_t i = 0; i < n; i++)
	{ //TodayInfo
		BYTE* pTodayInfo = p;
		Write16(pTodayInfo, 0); //len

		Write8(pTodayInfo, 0); //RestStealCount
		Write8(pTodayInfo, 0); //RestVisitStrangerCount
		Write8(pTodayInfo, 0); //RestClearRubbishCount

		len = pTodayInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //FishStockNum
	for (size_t i = 0; i < n; i++)
	{ //FishStockInfo
		BYTE* pFishStockInfo = p;
		Write16(pFishStockInfo, 0); //len

		Write8(pFishStockInfo, 0); //FishStockID
		Write8(pFishStockInfo, 0); //MaturityCount
		Write8(pFishStockInfo, 0); //TotalGrowStage
		Write8(pFishStockInfo, 0); //CurrentGrowStage
		Write8(pFishStockInfo, 0); //FishNum
		Write8(pFishStockInfo, 0); //StealedCount
		Write8(pFishStockInfo, 0); //FeedInfo
		Write32(pFishStockInfo, 0); //FishItemID
		Write32(pFishStockInfo, 0); //FishStartTime
		Write32(pFishStockInfo, 0); //MaturityTime
		Write32(pFishStockInfo, 0); //CurGrowStageEndTime

		len = pFishStockInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 10505, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestFishGetLeaveWord(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseFishGetLeaveWord(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //Result
	Write8(p, 0); //LeaveWordNum
	for (size_t i = 0; i < n; i++)
	{ //LeaveWord
		BYTE* pLeaveWord = p;
		Write16(pLeaveWord, 0); //len

		Write32(pLeaveWord, 0); //LeaveTime
		Write32(pLeaveWord, 0); //SrcUin
		WriteString(pLeaveWord, 0); //SrcName[]
		Write8(pLeaveWord, 0); //LeaveWordLen

		len = pLeaveWord - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 10506, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestFishGetMsg(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseFishGetMsg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //Result
	Write8(p, 0); //MsgNum
	for (size_t i = 0; i < n; i++)
	{ //Msg
		BYTE* pMsg = p;
		Write16(pMsg, 0); //len

		Write32(pMsg, 0); //MsgTime
		Write32(pMsg, 0); //OpType
		Write32(pMsg, 0); //SrcUin
		WriteString(pMsg, 0); //SrcName[]
		Write32(pMsg, 0); //OtherInfo

		len = pMsg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 10507, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestFishGetBulletin(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseFishGetBulletin(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //Result
	Write16(p, 0); //ContentLen
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 10508, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestFishGetHarvestInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseFishGetHarvestInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //Result
	Write8(p, 0); //HarvestNum
	for (size_t i = 0; i < n; i++)
	{ //HarvestInfo
		BYTE* pHarvestInfo = p;
		Write16(pHarvestInfo, 0); //len

		Write32(pHarvestInfo, 0); //FishItemID
		Write32(pHarvestInfo, 0); //FishNum

		len = pHarvestInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 10509, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestFishGetStorageInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseFishGetStorageInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //Result
	Write8(p, 0); //GridNum
	for (size_t i = 0; i < n; i++)
	{ //GridInfo
		BYTE* pGridInfo = p;
		Write16(pGridInfo, 0); //len

		Write16(pGridInfo, 0); //GridID
		Write32(pGridInfo, 0); //ItemID
		Write32(pGridInfo, 0); //ItemNum

		len = pGridInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 10510, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestFishStartFeedFish(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR FishStockID = Read8(p);
	USHORT GridID = Read16(p);

}

void ResponseFishStartFeedFish(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //Result
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 10514, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestFishHarvestFish(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR FishStockID = Read8(p);

}

void ResponseFishHarvestFish(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //Result
	Write32(p, 0); //Uin
	Write32(p, 0); //AddExpr
	{ //ResHarvestInfo
		BYTE* pResHarvestInfo = p;
		Write16(pResHarvestInfo, 0); //len

		Write8(pResHarvestInfo, 0); //FishStockID
		Write8(pResHarvestInfo, 0); //FishNum
		Write32(pResHarvestInfo, 0); //FishItemID

		len = pResHarvestInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 10511, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestFishHarvestAllFish(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseFishHarvestAllFish(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //Result
	Write32(p, 0); //Uin
	Write32(p, 0); //AddExpr
	Write8(p, 0); //ResHarvestInfoNum
	for (size_t i = 0; i < n; i++)
	{ //ResHarvestInfo
		BYTE* pResHarvestInfo = p;
		Write16(pResHarvestInfo, 0); //len

		Write8(pResHarvestInfo, 0); //FishStockID
		Write8(pResHarvestInfo, 0); //FishNum
		Write32(pResHarvestInfo, 0); //FishItemID

		len = pResHarvestInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 10517, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestFishUseFeed(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT GridID = Read16(p);
	UCHAR FishStockID = Read8(p);

}

void ResponseFishUseFeed(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //Result
	{ //ResInfo
		BYTE* pResInfo = p;
		Write16(pResInfo, 0); //len

		Write32(pResInfo, 0); //FeedItemID
		Write32(pResInfo, 0); //AccelTime
		Write32(pResInfo, 0); //AddExpr

		len = pResInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 10512, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestFishSellFish(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT GridID = Read16(p);
	UINT ItemNum = Read32(p);

}

void ResponseFishSellFish(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //Result
	Write32(p, 0); //Uin
	Write32(p, 0); //AddMoney
	{ //ResSellInfo
		BYTE* pResSellInfo = p;
		Write16(pResSellInfo, 0); //len

		Write32(pResSellInfo, 0); //FishNum
		Write32(pResSellInfo, 0); //FishItemID

		len = pResSellInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 10515, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestFishSellAllFish(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseFishSellAllFish(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //Result
	Write32(p, 0); //Uin
	Write32(p, 0); //AddMoney
	Write8(p, 0); //ResSellInfoNum
	for (size_t i = 0; i < n; i++)
	{ //ResSellInfo
		BYTE* pResSellInfo = p;
		Write16(pResSellInfo, 0); //len

		Write32(pResSellInfo, 0); //FishNum
		Write32(pResSellInfo, 0); //FishItemID

		len = pResSellInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 10516, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestFishBuyFishStock(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseFishBuyFishStock(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //Result
	Write32(p, 0); //Uin
	Write8(p, 0); //FishStockNum
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 10518, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestFishGetGiftBoxInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseFishGetGiftBoxInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //Result
	Write32(p, 0); //Uin
	Write8(p, 0); //GiftBoxNum
	for (size_t i = 0; i < n; i++)
	{ //GiftBoxInfo
		BYTE* pGiftBoxInfo = p;
		Write16(pGiftBoxInfo, 0); //len

		Write8(pGiftBoxInfo, 0); //BoxID
		Write32(pGiftBoxInfo, 0); //ItemID
		Write32(pGiftBoxInfo, 0); //ItemNum

		len = pGiftBoxInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 10519, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestFishThrowRubbish(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT DstUin = Read32(p);
	UCHAR SrcNameLen = Read8(p);

}

void ResponseFishThrowRubbish(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //Result
	Write32(p, 0); //DstUin
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 10521, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestFishClearRubbish(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT DstUin = Read32(p);
	UCHAR SrcNameLen = Read8(p);

}

void ResponseFishClearRubbish(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //Result
	Write32(p, 0); //DstUin
	{ //ResInfo
		BYTE* pResInfo = p;
		Write16(pResInfo, 0); //len

		Write32(pResInfo, 0); //AddExpr

		len = pResInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 10522, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestFishStealFish(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT DstUin = Read32(p);
	UCHAR FishStockID = Read8(p);
	int FishItemID = Read32(p);
	UCHAR SrcNameLen = Read8(p);
	UCHAR IsFriend = Read8(p);

}

void ResponseFishStealFish(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //Result
	Write32(p, 0); //Uin
	Write32(p, 0); //DstUin
	Write8(p, 0); //FishStockID
	Write32(p, 0); //FishItemID
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 10523, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestFishLeaveWord(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT DstUin = Read32(p);
	char[] SrcName[] = ReadString(p);
	UCHAR LeaveWordLen = Read8(p);

}

void ResponseFishLeaveWord(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //Result
	Write32(p, 0); //Uin
	Write32(p, 0); //DstUin
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 10524, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestFishReceiveGift(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseFishReceiveGift(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //Result
	Write32(p, 0); //Uin
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 10525, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestFishGetPlayerAllFishInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT DstUin = Read32(p);

}

void ResponseFishGetPlayerAllFishInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //Result
	Write32(p, 0); //Uin
	Write32(p, 0); //DstUin
	{ //BaseFishInfo
		BYTE* pBaseFishInfo = p;
		Write16(pBaseFishInfo, 0); //len

		Write32(pBaseFishInfo, 0); //Experience
		Write32(pBaseFishInfo, 0); //Money
		Write8(pBaseFishInfo, 0); //FishStockNum
		Write8(pBaseFishInfo, 0); //RubbishCount

		len = pBaseFishInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //CanThrowRubbish
	Write8(p, 0); //CanClearRubbish
	Write8(p, 0); //FishStockNum
	for (size_t i = 0; i < n; i++)
	{ //FishStockInfo
		BYTE* pFishStockInfo = p;
		Write16(pFishStockInfo, 0); //len

		Write8(pFishStockInfo, 0); //FishStockID
		Write8(pFishStockInfo, 0); //MaturityCount
		Write8(pFishStockInfo, 0); //TotalGrowStage
		Write8(pFishStockInfo, 0); //CurrentGrowStage
		Write8(pFishStockInfo, 0); //FishNum
		Write8(pFishStockInfo, 0); //StealedCount
		Write8(pFishStockInfo, 0); //CanSteal
		Write32(pFishStockInfo, 0); //FishItemID
		Write32(pFishStockInfo, 0); //FishStartTime
		Write32(pFishStockInfo, 0); //MaturityTime
		Write32(pFishStockInfo, 0); //CurGrowStageEndTime

		len = pFishStockInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 10526, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyClientReceiveNewLeaveWord(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	{ //LeaveWord
		BYTE* pLeaveWord = p;
		Write16(pLeaveWord, 0); //len

		Write32(pLeaveWord, 0); //LeaveTime
		Write32(pLeaveWord, 0); //SrcUin
		WriteString(pLeaveWord, 0); //SrcName[]
		Write8(pLeaveWord, 0); //LeaveWordLen

		len = pLeaveWord - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 10550, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyClientReceiveNewMsg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	{ //Msg
		BYTE* pMsg = p;
		Write16(pMsg, 0); //len

		Write32(pMsg, 0); //MsgTime
		Write32(pMsg, 0); //OpType
		Write32(pMsg, 0); //SrcUin
		WriteString(pMsg, 0); //SrcName[]
		Write32(pMsg, 0); //OtherInfo

		len = pMsg - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 10551, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyClientFishStealed(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write8(p, 0); //FishStockID
	Write8(p, 0); //FishNum

	len = p - buf;
	SendToClient(Client, 10552, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyClientRubbishThrown(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write8(p, 0); //RubbishCount

	len = p - buf;
	SendToClient(Client, 10553, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyClientUpdateFishInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //HaveBaseFishInfo
	for (size_t i = 0; i < n; i++)
	{ //BaseFishInfo
		BYTE* pBaseFishInfo = p;
		Write16(pBaseFishInfo, 0); //len

		Write32(pBaseFishInfo, 0); //Experience
		Write32(pBaseFishInfo, 0); //Money
		Write8(pBaseFishInfo, 0); //FishStockNum
		Write8(pBaseFishInfo, 0); //RubbishCount

		len = pBaseFishInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HaveTodayInfo
	for (size_t i = 0; i < n; i++)
	{ //TodayInfo
		BYTE* pTodayInfo = p;
		Write16(pTodayInfo, 0); //len

		Write8(pTodayInfo, 0); //RestStealCount
		Write8(pTodayInfo, 0); //RestVisitStrangerCount
		Write8(pTodayInfo, 0); //RestClearRubbishCount

		len = pTodayInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //FishStockInfoNum
	for (size_t i = 0; i < n; i++)
	{ //FishStockInfo
		BYTE* pFishStockInfo = p;
		Write16(pFishStockInfo, 0); //len

		Write8(pFishStockInfo, 0); //FishStockID
		Write8(pFishStockInfo, 0); //MaturityCount
		Write8(pFishStockInfo, 0); //TotalGrowStage
		Write8(pFishStockInfo, 0); //CurrentGrowStage
		Write8(pFishStockInfo, 0); //FishNum
		Write8(pFishStockInfo, 0); //StealedCount
		Write8(pFishStockInfo, 0); //FeedInfo
		Write32(pFishStockInfo, 0); //FishItemID
		Write32(pFishStockInfo, 0); //FishStartTime
		Write32(pFishStockInfo, 0); //MaturityTime
		Write32(pFishStockInfo, 0); //CurGrowStageEndTime

		len = pFishStockInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //StorageInfoNum
	for (size_t i = 0; i < n; i++)
	{ //StorageInfo
		BYTE* pStorageInfo = p;
		Write16(pStorageInfo, 0); //len

		Write16(pStorageInfo, 0); //GridID
		Write32(pStorageInfo, 0); //ItemID
		Write32(pStorageInfo, 0); //ItemNum

		len = pStorageInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HarvestInfoNum
	for (size_t i = 0; i < n; i++)
	{ //HarvestInfo
		BYTE* pHarvestInfo = p;
		Write16(pHarvestInfo, 0); //len

		Write32(pHarvestInfo, 0); //FishItemID
		Write32(pHarvestInfo, 0); //FishNum

		len = pHarvestInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //GiftBoxInfoNum
	for (size_t i = 0; i < n; i++)
	{ //GiftBoxInfo
		BYTE* pGiftBoxInfo = p;
		Write16(pGiftBoxInfo, 0); //len

		Write8(pGiftBoxInfo, 0); //BoxID
		Write32(pGiftBoxInfo, 0); //ItemID
		Write32(pGiftBoxInfo, 0); //ItemNum

		len = pGiftBoxInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 10554, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyClientTimeOutAtOtherStock(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin

	len = p - buf;
	SendToClient(Client, 10555, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyClientRubbishCleared(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write8(p, 0); //RubbishCount

	len = p - buf;
	SendToClient(Client, 10557, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyClientHaveNewGift(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write8(p, 0); //GiftBoxInfoNum
	for (size_t i = 0; i < n; i++)
	{ //GiftBoxInfo
		BYTE* pGiftBoxInfo = p;
		Write16(pGiftBoxInfo, 0); //len

		Write8(pGiftBoxInfo, 0); //BoxID
		Write32(pGiftBoxInfo, 0); //ItemID
		Write32(pGiftBoxInfo, 0); //ItemNum

		len = pGiftBoxInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 10559, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyClientCloseFishsys(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin

	len = p - buf;
	SendToClient(Client, 10560, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestFishGetPlayerList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT StartIdx = Read16(p);

}

void ResponseFishGetPlayerList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //Result
	Write16(p, 0); //StartIdx
	Write32(p, 0); //TotalNum
	Write16(p, 0); //PlayerNum
	for (size_t i = 0; i < n; i++)
	{ //BaseInfo
		BYTE* pBaseInfo = p;
		Write16(pBaseInfo, 0); //len

		Write32(pBaseInfo, 0); //Uin
		WriteString(pBaseInfo, 0); //SrcName[]

		len = pBaseInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 10532, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestFishQueryPlayerInfoInList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR UinNum = Read8(p);
	UINT[] Uin[] = Read32(p);

}

void ResponseFishQueryPlayerInfoInList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //Result
	Write32(p, 0); //Uin
	{ //FishInfo
		BYTE* pFishInfo = p;
		Write16(pFishInfo, 0); //len

		Write32(pFishInfo, 0); //Uin
		Write8(pFishInfo, 0); //CanSteal
		Write8(pFishInfo, 0); //CanThrowRubbish
		Write8(pFishInfo, 0); //CanClearRubbish

		len = pFishInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 10533, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetMaster(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetMaster(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write8(p, 0); //AccStatus
	Write32(p, 0); //MasterUin
	Write32(p, 0); //AccTime
	Write32(p, 0); //GraduateTime
	Write16(p, 0); //RecentPMAwardNum
	for (size_t i = 0; i < n; i++)
	{ //RecentPMAwards
		BYTE* pRecentPMAwards = p;
		Write16(pRecentPMAwards, 0); //len

		Write16(pRecentPMAwards, 0); //RecentPMAwardDesLen

		len = pRecentPMAwards - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 363, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetPrentices(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetPrentices(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write32(p, 0); //MasterPoint
	Write32(p, 0); //TeachedNum
	Write32(p, 0); //GraduatedNum
	Write16(p, 0); //StudyingNum
	Write16(p, 0); //MaxPrenticeNum
	Write16(p, 0); //CurrentPrenticeNum
	for (size_t i = 0; i < n; i++)
	{ //PrenticeInfo
		BYTE* pPrenticeInfo = p;
		Write16(pPrenticeInfo, 0); //len

		Write32(pPrenticeInfo, 0); //Uin
		Write8(pPrenticeInfo, 0); //IsGraduated
		Write32(pPrenticeInfo, 0); //AccTime
		Write32(pPrenticeInfo, 0); //GraduatedTime

		len = pPrenticeInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasFirstConsumeAward
	Write8(p, 0); //ReasonLen
	Write32(p, 0); //GetGraduateAwardCd

	len = p - buf;
	SendToClient(Client, 364, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetClassMates(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetClassMates(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write16(p, 0); //ClassMatesNum
	for (size_t i = 0; i < n; i++)
	{ //PrenticeInfo
		BYTE* pPrenticeInfo = p;
		Write16(pPrenticeInfo, 0); //len

		Write32(pPrenticeInfo, 0); //Uin
		Write8(pPrenticeInfo, 0); //IsGraduated
		Write32(pPrenticeInfo, 0); //AccTime
		Write32(pPrenticeInfo, 0); //GraduatedTime

		len = pPrenticeInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 365, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestQueryMPAward(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT PrenticeUin = Read32(p);
	char IsOnlyNum = Read8(p);

}

void ResponseQueryMPAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write8(p, 0); //IsOnlyNum
	{ //MasterAwardList
		BYTE* pMasterAwardList = p;
		Write16(pMasterAwardList, 0); //len

		Write32(pMasterAwardList, 0); //TriggerUin
		Write16(pMasterAwardList, 0); //AwardNum
		for (size_t i = 0; i < n; i++)
		{ //AwardInfo
			BYTE* pAwardInfo = pMasterAwardList;
			Write16(pAwardInfo, 0); //len

			Write8(pAwardInfo, 0); //AwardType
			Write32(pAwardInfo, 0); //AwardID
			Write32(pAwardInfo, 0); //EffectTime
			{ //AwardMoneyExp
				BYTE* pAwardMoneyExp = pAwardInfo;
				Write16(pAwardMoneyExp, 0); //len

				Write32(pAwardMoneyExp, 0); //Money
				Write32(pAwardMoneyExp, 0); //SuperMoney
				Write32(pAwardMoneyExp, 0); //Exp
				Write32(pAwardMoneyExp, 0); //Charm
				Write32(pAwardMoneyExp, 0); //DanceExp
				Write32(pAwardMoneyExp, 0); //Coupons
				Write32(pAwardMoneyExp, 0); //Admiration
				Write32(pAwardMoneyExp, 0); //LuckMoney
				Write32(pAwardMoneyExp, 0); //TeamWorkExp
				Write32(pAwardMoneyExp, 0); //AchievePoint
				Write32(pAwardMoneyExp, 0); //ConsumeScore
				Write32(pAwardMoneyExp, 0); //HistoryConsumeScore
				Write32(pAwardMoneyExp, 0); //LadderMatchAchievePoint
				Write32(pAwardMoneyExp, 0); //SpeedBean
				Write32(pAwardMoneyExp, 0); //SpeedCoin

				len = pAwardMoneyExp - pAwardInfo;
				Set16(pAwardInfo, (WORD)len);
				pAwardInfo += len;
			}
			Write16(pAwardInfo, 0); //AwardItemNum
			for (size_t i = 0; i < n; i++)
			{ //AwardItem
				BYTE* pAwardItem = pAwardInfo;
				Write16(pAwardItem, 0); //len

				Write16(pAwardItem, 0); //GenderItemNum
				Write32(pAwardItem, 0); //ItemID[]
				Write8(pAwardItem, 0); //ItemType
				Write32(pAwardItem, 0); //Quantity

				len = pAwardItem - pAwardInfo;
				Set16(pAwardInfo, (WORD)len);
				pAwardInfo += len;
			}

			len = pAwardInfo - pMasterAwardList;
			Set16(pMasterAwardList, (WORD)len);
			pMasterAwardList += len;
		}

		len = pMasterAwardList - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //RecentPMAwardNum
	for (size_t i = 0; i < n; i++)
	{ //RecentPMAwards
		BYTE* pRecentPMAwards = p;
		Write16(pRecentPMAwards, 0); //len

		Write16(pRecentPMAwards, 0); //RecentPMAwardDesLen

		len = pRecentPMAwards - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 366, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestAcc(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT DstUin = Read32(p);
	char MPPlayerType = Read8(p);
	short WordLength = Read16(p);

}

void ResponseAcc(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write32(p, 0); //DstUin
	Write8(p, 0); //MPPlayerType
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 367, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestDismiss(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT DstUin = Read32(p);
	char MPPlayerType = Read8(p);
	short WordLength = Read16(p);

}

void ResponseDismiss(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write32(p, 0); //DstUin
	Write8(p, 0); //MPPlayerType
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 368, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetMPAward(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT PrenticeUin = Read32(p);

}

void ResponseGetMPAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	{ //MasterAwardList
		BYTE* pMasterAwardList = p;
		Write16(pMasterAwardList, 0); //len

		Write32(pMasterAwardList, 0); //TriggerUin
		Write16(pMasterAwardList, 0); //AwardNum
		for (size_t i = 0; i < n; i++)
		{ //AwardInfo
			BYTE* pAwardInfo = pMasterAwardList;
			Write16(pAwardInfo, 0); //len

			Write8(pAwardInfo, 0); //AwardType
			Write32(pAwardInfo, 0); //AwardID
			Write32(pAwardInfo, 0); //EffectTime
			{ //AwardMoneyExp
				BYTE* pAwardMoneyExp = pAwardInfo;
				Write16(pAwardMoneyExp, 0); //len

				Write32(pAwardMoneyExp, 0); //Money
				Write32(pAwardMoneyExp, 0); //SuperMoney
				Write32(pAwardMoneyExp, 0); //Exp
				Write32(pAwardMoneyExp, 0); //Charm
				Write32(pAwardMoneyExp, 0); //DanceExp
				Write32(pAwardMoneyExp, 0); //Coupons
				Write32(pAwardMoneyExp, 0); //Admiration
				Write32(pAwardMoneyExp, 0); //LuckMoney
				Write32(pAwardMoneyExp, 0); //TeamWorkExp
				Write32(pAwardMoneyExp, 0); //AchievePoint
				Write32(pAwardMoneyExp, 0); //ConsumeScore
				Write32(pAwardMoneyExp, 0); //HistoryConsumeScore
				Write32(pAwardMoneyExp, 0); //LadderMatchAchievePoint
				Write32(pAwardMoneyExp, 0); //SpeedBean
				Write32(pAwardMoneyExp, 0); //SpeedCoin

				len = pAwardMoneyExp - pAwardInfo;
				Set16(pAwardInfo, (WORD)len);
				pAwardInfo += len;
			}
			Write16(pAwardInfo, 0); //AwardItemNum
			for (size_t i = 0; i < n; i++)
			{ //AwardItem
				BYTE* pAwardItem = pAwardInfo;
				Write16(pAwardItem, 0); //len

				Write16(pAwardItem, 0); //GenderItemNum
				Write32(pAwardItem, 0); //ItemID[]
				Write8(pAwardItem, 0); //ItemType
				Write32(pAwardItem, 0); //Quantity

				len = pAwardItem - pAwardInfo;
				Set16(pAwardInfo, (WORD)len);
				pAwardInfo += len;
			}

			len = pAwardInfo - pMasterAwardList;
			Set16(pMasterAwardList, (WORD)len);
			pMasterAwardList += len;
		}

		len = pMasterAwardList - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen
	Write32(p, 0); //GetGraduateAwardCd

	len = p - buf;
	SendToClient(Client, 369, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyMPAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write8(p, 0); //ContentLen

	len = p - buf;
	SendToClient(Client, 758, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetCommendMP(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	char MPPlayerType = Read8(p);

}

void ResponseGetCommendMP(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write8(p, 0); //MPPlayerType
	Write16(p, 0); //CommendNum
	Write32(p, 0); //CommendMP[]
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 370, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyReqAcc(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //DstUin
	Write8(p, 0); //MPPlayerType
	Write16(p, 0); //WordLength

	len = p - buf;
	SendToClient(Client, 751, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void AckReqAcc(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	short ResultID = Read16(p);
	UINT Uin = Read32(p);
	UINT DstUin = Read32(p);
	char MPPlayerType = Read8(p);
	short WordLength = Read16(p);

}

void NotifyAccResult(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write32(p, 0); //DstUin
	Write8(p, 0); //MPPlayerType
	Write8(p, 0); //ReasonLen
	Write16(p, 0); //WordLength

	len = p - buf;
	SendToClient(Client, 752, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyGraduate(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //DstUin
	Write8(p, 0); //MPPlayerType
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 753, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyDismiss(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //DstUin
	Write8(p, 0); //MPPlayerType
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 754, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyIncMasterPoint(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //MasterPointInc
	Write32(p, 0); //MasterPointTotal

	len = p - buf;
	SendToClient(Client, 755, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyIncMaxPrenticeNum(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //MaxPrenticeNumInc
	Write16(p, 0); //MaxPrenticeNumTotal

	len = p - buf;
	SendToClient(Client, 756, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyPMAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	{ //MasterAwardInfo
		BYTE* pMasterAwardInfo = p;
		Write16(pMasterAwardInfo, 0); //len

		Write8(pMasterAwardInfo, 0); //AwardType
		Write32(pMasterAwardInfo, 0); //AwardID
		Write32(pMasterAwardInfo, 0); //EffectTime
		{ //AwardMoneyExp
			BYTE* pAwardMoneyExp = pMasterAwardInfo;
			Write16(pAwardMoneyExp, 0); //len

			Write32(pAwardMoneyExp, 0); //Money
			Write32(pAwardMoneyExp, 0); //SuperMoney
			Write32(pAwardMoneyExp, 0); //Exp
			Write32(pAwardMoneyExp, 0); //Charm
			Write32(pAwardMoneyExp, 0); //DanceExp
			Write32(pAwardMoneyExp, 0); //Coupons
			Write32(pAwardMoneyExp, 0); //Admiration
			Write32(pAwardMoneyExp, 0); //LuckMoney
			Write32(pAwardMoneyExp, 0); //TeamWorkExp
			Write32(pAwardMoneyExp, 0); //AchievePoint
			Write32(pAwardMoneyExp, 0); //ConsumeScore
			Write32(pAwardMoneyExp, 0); //HistoryConsumeScore
			Write32(pAwardMoneyExp, 0); //LadderMatchAchievePoint
			Write32(pAwardMoneyExp, 0); //SpeedBean
			Write32(pAwardMoneyExp, 0); //SpeedCoin

			len = pAwardMoneyExp - pMasterAwardInfo;
			Set16(pMasterAwardInfo, (WORD)len);
			pMasterAwardInfo += len;
		}
		Write16(pMasterAwardInfo, 0); //AwardItemNum
		for (size_t i = 0; i < n; i++)
		{ //AwardItem
			BYTE* pAwardItem = pMasterAwardInfo;
			Write16(pAwardItem, 0); //len

			Write16(pAwardItem, 0); //GenderItemNum
			Write32(pAwardItem, 0); //ItemID[]
			Write8(pAwardItem, 0); //ItemType
			Write32(pAwardItem, 0); //Quantity

			len = pAwardItem - pMasterAwardInfo;
			Set16(pMasterAwardInfo, (WORD)len);
			pMasterAwardInfo += len;
		}

		len = pMasterAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 757, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetPlayerSummaryInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	short PlayerNum = Read16(p);
	UINT[] DstUins[] = Read32(p);

}

void ResponseGetPlayerSummaryInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write32(p, 0); //DstUin
	WriteString(p, 0); //NickName[]
	Write8(p, 0); //Gender
	Write16(p, 0); //Level
	Write8(p, 0); //IsOnLine
	Write32(p, 0); //LastLogin
	Write8(p, 0); //ReasonLen
	WriteUn(p, 0); //VipFlag
	{ //NobleInfo
		BYTE* pNobleInfo = p;
		Write16(pNobleInfo, 0); //len

		Write32(pNobleInfo, 0); //NobleID
		Write8(pNobleInfo, 0); //NobleLevel
		Write32(pNobleInfo, 0); //NoblePoint
		Write32(pNobleInfo, 0); //NobleLeftDays

		len = pNobleInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //GuildVipBaseInfo
		BYTE* pGuildVipBaseInfo = p;
		Write16(pGuildVipBaseInfo, 0); //len

		Write8(pGuildVipBaseInfo, 0); //GuildVipLevel
		Write32(pGuildVipBaseInfo, 0); //GuildVipPoint

		len = pGuildVipBaseInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasLoverVip
	for (size_t i = 0; i < n; i++)
	{ //LoverVipInfo
		BYTE* pLoverVipInfo = p;
		Write16(pLoverVipInfo, 0); //len

		Write8(pLoverVipInfo, 0); //LoverVipLevel
		Write32(pLoverVipInfo, 0); //LoverVipPoint
		Write8(pLoverVipInfo, 0); //GrowRate

		len = pLoverVipInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //GardenLevel
	{ //EmperorInfo
		BYTE* pEmperorInfo = p;
		Write16(pEmperorInfo, 0); //len

		Write8(pEmperorInfo, 0); //EmperorLevel
		Write32(pEmperorInfo, 0); //EmperorPoint
		Write32(pEmperorInfo, 0); //EmperorLeftDays
		Write8(pEmperorInfo, 0); //EmperorGrowRate

		len = pEmperorInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //ConsumeVipInfo
		BYTE* pConsumeVipInfo = p;
		Write16(pConsumeVipInfo, 0); //len

		WriteUn(pConsumeVipInfo, 0); //VipLevel
		WriteUn(pConsumeVipInfo, 0); //CharmValueOfMonth
		WriteUn(pConsumeVipInfo, 0); //SearchTreasureNums
		WriteUn(pConsumeVipInfo, 0); //GetTreasureNums

		len = pConsumeVipInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 371, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetMPAwardRule(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	char AwardType = Read8(p);

}

void ResponseGetMPAwardRule(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write8(p, 0); //AwardType
	Write16(p, 0); //DescNum
	for (size_t i = 0; i < n; i++)
	{ //RuleDesc
		BYTE* pRuleDesc = p;
		Write16(pRuleDesc, 0); //len

		Write16(pRuleDesc, 0); //DescLen

		len = pRuleDesc - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 372, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestReceiveTaskAward(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int TaskID = Read32(p);

}

void ResponseReceiveTaskAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write32(p, 0); //TaskID
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 188, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyRRModeExtraInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //PassOnDistanceLimit
	Write16(p, 0); //PassOnCD
	Write16(p, 0); //ExplosionCD
	Write16(p, 0); //ExplosionFrozenCD
	Write16(p, 0); //ExplosionAffNum
	for (size_t i = 0; i < n; i++)
	{ //ExplosionAff
		BYTE* pExplosionAff = p;
		Write16(pExplosionAff, 0); //len

		Write32(pExplosionAff, 0); //SpeedLost
		Write32(pExplosionAff, 0); //AffTime

		len = pExplosionAff - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 782, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyBatonPassOn(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //PassOnType
	Write32(p, 0); //SrcUin
	Write32(p, 0); //DstUin

	len = p - buf;
	SendToClient(Client, 780, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestBatonPassOn(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT SrcUin = Read32(p);
	UINT DstUin = Read32(p);

}

void ResponseBatonPassOn(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Result
	Write32(p, 0); //SrcUin
	Write32(p, 0); //DstUin

	len = p - buf;
	SendToClient(Client, 230, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyBatonExplosion(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin

	len = p - buf;
	SendToClient(Client, 781, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyRelayRaceOver(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //CurrentPlayerNum
	for (size_t i = 0; i < n; i++)
	{ //RaceScore
		BYTE* pRaceScore = p;
		Write16(pRaceScore, 0); //len

		WriteUn(pRaceScore, 0); //Uin
		WriteUn(pRaceScore, 0); //FinTime
		Write32(pRaceScore, 0); //TP
		Write32(pRaceScore, 0); //MoneyInc
		Write32(pRaceScore, 0); //TotalMoney
		Write32(pRaceScore, 0); //ExpInc
		Write32(pRaceScore, 0); //TotalExp
		Write8(pRaceScore, 0); //AwardNum
		Write32(pRaceScore, 0); //SpecialAward[]
		Write32(pRaceScore, 0); //TeamWorkExpInc
		Write32(pRaceScore, 0); //PropPoint
		Write32(pRaceScore, 0); //PropPointAddExp
		Write32(pRaceScore, 0); //LuckyMatchPointInc
		Write32(pRaceScore, 0); //LuckyMatchPointTotal
		Write32(pRaceScore, 0); //LuckyMatchScoreInc
		Write32(pRaceScore, 0); //LuckyMatchScoreTotal
		Write32(pRaceScore, 0); //LuckMoneyInc
		Write32(pRaceScore, 0); //LuckMoneyTotal
		Write32(pRaceScore, 0); //GuildScoreInc
		Write8(pRaceScore, 0); //CrazyPropAchieveNum
		Write32(pRaceScore, 0); //CrazyPropAchieve[]
		WriteU(pRaceScore, 0); //IncWlMatchScore
		WriteU(pRaceScore, 0); //IncWlDegree
		WriteU(pRaceScore, 0); //IncItemNumByWl
		for (size_t i = 0; i < n; i++)
		{ //IncItemInfoByWl
			BYTE* pIncItemInfoByWl = pRaceScore;
			Write16(pIncItemInfoByWl, 0); //len

			Write16(pIncItemInfoByWl, 0); //GenderItemNum
			Write32(pIncItemInfoByWl, 0); //ItemID[]
			Write16(pIncItemInfoByWl, 0); //ItemNum
			Write32(pIncItemInfoByWl, 0); //AvailPeriod
			Write16(pIncItemInfoByWl, 0); //BroadcastType
			Write16(pIncItemInfoByWl, 0); //BroadcastFlag
			Write8(pIncItemInfoByWl, 0); //ShowPriority
			Write8(pIncItemInfoByWl, 0); //ItemType
			Write8(pIncItemInfoByWl, 0); //IgnoreItem
			Write32(pIncItemInfoByWl, 0); //LimitPara
			Write8(pIncItemInfoByWl, 0); //SpecialAwardCtrlType
			Write8(pIncItemInfoByWl, 0); //AwardCtrlType

			len = pIncItemInfoByWl - pRaceScore;
			Set16(pRaceScore, (WORD)len);
			pRaceScore += len;
		}
		Write32(pRaceScore, 0); //WlMutiplyCard
		Write32(pRaceScore, 0); //SkateCoinInc
		Write32(pRaceScore, 0); //SkateCoinTotal
		Write32(pRaceScore, 0); //SkateCoinHistoryTotal
		Write32(pRaceScore, 0); //TotalCoupons
		Write8(pRaceScore, 0); //ChallengeCheer
		for (size_t i = 0; i < n; i++)
		{ //ChallengeCheer
			BYTE* pChallengeCheer = pRaceScore;
			Write16(pChallengeCheer, 0); //len

			Write16(pChallengeCheer, 0); //GuildCheerValueInc
			Write16(pChallengeCheer, 0); //CheerValueInc
			Write32(pChallengeCheer, 0); //TotalCheerValue
			Write16(pChallengeCheer, 0); //CouponsInc
			Write32(pChallengeCheer, 0); //GuildScoreInc
			Write32(pChallengeCheer, 0); //SuperMoneyInc

			len = pChallengeCheer - pRaceScore;
			Set16(pRaceScore, (WORD)len);
			pRaceScore += len;
		}
		Write32(pRaceScore, 0); //LoveValue
		Write32(pRaceScore, 0); //SkateCoinEmperorBonus
		Write32(pRaceScore, 0); //DetailRecordID
		Write8(pRaceScore, 0); //HasGangsterResult
		for (size_t i = 0; i < n; i++)
		{ //GangsterResult
			BYTE* pGangsterResult = pRaceScore;
			Write16(pGangsterResult, 0); //len

			Write8(pGangsterResult, 0); //AbnormalFalg
			Write32(pGangsterResult, 0); //GangsterBlood
			Write32(pGangsterResult, 0); //GangsterTotalScore
			Write32(pGangsterResult, 0); //GangsterIndentity
			Write32(pGangsterResult, 0); //FragmentInc
			Write32(pGangsterResult, 0); //KillTimes
			Write32(pGangsterResult, 0); //DeadTimes
			Write8(pGangsterResult, 0); //IsMultiple
			Write8(pGangsterResult, 0); //IsLimited
			Write32(pGangsterResult, 0); //ScoreInc
			Write32(pGangsterResult, 0); //TotalScore
			Write32(pGangsterResult, 0); //LoseStreakCount

			len = pGangsterResult - pRaceScore;
			Set16(pRaceScore, (WORD)len);
			pRaceScore += len;
		}
		{ //EquippedActiveKartInfo
			BYTE* pEquippedActiveKartInfo = pRaceScore;
			Write16(pEquippedActiveKartInfo, 0); //len

			Write8(pEquippedActiveKartInfo, 0); //HaveActiveInfo
			Write32(pEquippedActiveKartInfo, 0); //KartID
			Write32(pEquippedActiveKartInfo, 0); //ActiveLevel

			len = pEquippedActiveKartInfo - pRaceScore;
			Set16(pRaceScore, (WORD)len);
			pRaceScore += len;
		}
		Write8(pRaceScore, 0); //HasWeRelayRaceOverInfo
		for (size_t i = 0; i < n; i++)
		{ //WeRelayRaceOverInfo
			BYTE* pWeRelayRaceOverInfo = pRaceScore;
			Write16(pWeRelayRaceOverInfo, 0); //len

			{ //SumStageInfo
				BYTE* pSumStageInfo = pWeRelayRaceOverInfo;
				Write16(pSumStageInfo, 0); //len

				Write32(pSumStageInfo, 0); //Score
				Write32(pSumStageInfo, 0); //ScoreInc
				Write32(pSumStageInfo, 0); //Supermoney
				Write32(pSumStageInfo, 0); //Coupons
				Write32(pSumStageInfo, 0); //SuperN2O

				len = pSumStageInfo - pWeRelayRaceOverInfo;
				Set16(pWeRelayRaceOverInfo, (WORD)len);
				pWeRelayRaceOverInfo += len;
			}
			Write32(pWeRelayRaceOverInfo, 0); //WeRelayScoreInc
			Write32(pWeRelayRaceOverInfo, 0); //WeRelayScoreNow
			Write32(pWeRelayRaceOverInfo, 0); //WeRelayScoreLevelNow
			Write32(pWeRelayRaceOverInfo, 0); //WeRelayScoreLevelLimit
			Write32(pWeRelayRaceOverInfo, 0); //SupermoneyLimit
			Write32(pWeRelayRaceOverInfo, 0); //SupermoneyNow
			Write32(pWeRelayRaceOverInfo, 0); //CouponsLimit
			Write32(pWeRelayRaceOverInfo, 0); //CouponsNow
			Write32(pWeRelayRaceOverInfo, 0); //LuckAwardMul

			len = pWeRelayRaceOverInfo - pRaceScore;
			Set16(pRaceScore, (WORD)len);
			pRaceScore += len;
		}
		Write8(pRaceScore, 0); //HaveSkatePropRaceInfo
		for (size_t i = 0; i < n; i++)
		{ //SkatePropRaceInfo
			BYTE* pSkatePropRaceInfo = pRaceScore;
			Write16(pSkatePropRaceInfo, 0); //len

			Write32(pSkatePropRaceInfo, 0); //ScoreAdd
			Write32(pSkatePropRaceInfo, 0); //ScoreTotal

			len = pSkatePropRaceInfo - pRaceScore;
			Set16(pRaceScore, (WORD)len);
			pRaceScore += len;
		}
		Write8(pRaceScore, 0); //IsNewBox
		Write8(pRaceScore, 0); //HaveArrestScoreInfo
		for (size_t i = 0; i < n; i++)
		{ //ArrestScoreInfo
			BYTE* pArrestScoreInfo = pRaceScore;
			Write16(pArrestScoreInfo, 0); //len

			Write32(pArrestScoreInfo, 0); //ScoreInGame
			Write32(pArrestScoreInfo, 0); //ScoreByGold
			Write32(pArrestScoreInfo, 0); //GoldMoney
			Write32(pArrestScoreInfo, 0); //ArrestNum
			Write8(pArrestScoreInfo, 0); //ResultType
			Write8(pArrestScoreInfo, 0); //TeamID

			len = pArrestScoreInfo - pRaceScore;
			Set16(pRaceScore, (WORD)len);
			pRaceScore += len;
		}
		Write8(pRaceScore, 0); //HasRankedMatchInfo
		for (size_t i = 0; i < n; i++)
		{ //RankedMatchScore
			BYTE* pRankedMatchScore = pRaceScore;
			Write16(pRankedMatchScore, 0); //len

			{ //RankedMatchLastGradeInfo
				BYTE* pRankedMatchLastGradeInfo = pRankedMatchScore;
				Write16(pRankedMatchLastGradeInfo, 0); //len

				Write32(pRankedMatchLastGradeInfo, 0); //GradeLevel
				Write32(pRankedMatchLastGradeInfo, 0); //ChildLevel
				Write32(pRankedMatchLastGradeInfo, 0); //GradeScore
				Write32(pRankedMatchLastGradeInfo, 0); //MaxGradeScore
				Write32(pRankedMatchLastGradeInfo, 0); //TotalScore

				len = pRankedMatchLastGradeInfo - pRankedMatchScore;
				Set16(pRankedMatchScore, (WORD)len);
				pRankedMatchScore += len;
			}
			{ //RankedMatchGradeInfo
				BYTE* pRankedMatchGradeInfo = pRankedMatchScore;
				Write16(pRankedMatchGradeInfo, 0); //len

				Write32(pRankedMatchGradeInfo, 0); //GradeLevel
				Write32(pRankedMatchGradeInfo, 0); //ChildLevel
				Write32(pRankedMatchGradeInfo, 0); //GradeScore
				Write32(pRankedMatchGradeInfo, 0); //MaxGradeScore
				Write32(pRankedMatchGradeInfo, 0); //TotalScore

				len = pRankedMatchGradeInfo - pRankedMatchScore;
				Set16(pRankedMatchScore, (WORD)len);
				pRankedMatchScore += len;
			}
			{ //RankedMatchPromoInfo
				BYTE* pRankedMatchPromoInfo = pRankedMatchScore;
				Write16(pRankedMatchPromoInfo, 0); //len

				Write8(pRankedMatchPromoInfo, 0); //PromotionMatch
				Write32(pRankedMatchPromoInfo, 0); //PromotionRoundNums
				Write32(pRankedMatchPromoInfo, 0); //PromotionSuccessRoundNums
				Write32(pRankedMatchPromoInfo, 0); //PromotionAlreadySuccessRoundNums
				Write32(pRankedMatchPromoInfo, 0); //PromotionRecordTag
				Write32(pRankedMatchPromoInfo, 0); //CurrentPromotionRoundNums
				Write32(pRankedMatchPromoInfo, 0); //PromoFailedMinusScore
				Write32(pRankedMatchPromoInfo, 0); //PromoSuccAddScore
				Write8(pRankedMatchPromoInfo, 0); //PromoDirectly
				Write8(pRankedMatchPromoInfo, 0); //GradeNoNeedPromo
				Write8(pRankedMatchPromoInfo, 0); //RankedMemoryNoNeedPromo
				Write8(pRankedMatchPromoInfo, 0); //PromotionExtraScore
				Write8(pRankedMatchPromoInfo, 0); //PromtRaceFailedDefendFlag

				len = pRankedMatchPromoInfo - pRankedMatchScore;
				Set16(pRankedMatchScore, (WORD)len);
				pRankedMatchScore += len;
			}
			{ //RankedMatchComputeInfo
				BYTE* pRankedMatchComputeInfo = pRankedMatchScore;
				Write16(pRankedMatchComputeInfo, 0); //len

				Write32(pRankedMatchComputeInfo, 0); //RankAddScore
				Write32(pRankedMatchComputeInfo, 0); //FinishAddScore
				Write32(pRankedMatchComputeInfo, 0); //KillAllAddScore
				Write32(pRankedMatchComputeInfo, 0); //GradeProtectAddScore
				Write32(pRankedMatchComputeInfo, 0); //GradeAddScore
				Write32(pRankedMatchComputeInfo, 0); //ProtectAddScoreGradeLimit
				Write32(pRankedMatchComputeInfo, 0); //DailyExtraAddScore
				Write32(pRankedMatchComputeInfo, 0); //AwardRankCoinNums
				Write32(pRankedMatchComputeInfo, 0); //WeeklyAwardRankCoinNums
				Write32(pRankedMatchComputeInfo, 0); //WeeklyAwardRankCoinLimit
				Write32(pRankedMatchComputeInfo, 0); //AwardRankCoinNumsByRank
				Write32(pRankedMatchComputeInfo, 0); //AwardRankCoinNumsByFinish
				Write32(pRankedMatchComputeInfo, 0); //BanMapExtraAddScore
				Write32(pRankedMatchComputeInfo, 0); //TeamRankAddScore
				Write32(pRankedMatchComputeInfo, 0); //AwardRankCoinNumsByTeamRank
				Write32(pRankedMatchComputeInfo, 0); //AwardRankCoinNumsByTask
				Write8(pRankedMatchComputeInfo, 0); //UseDoubleScoreItem
				Write8(pRankedMatchComputeInfo, 0); //UserNotDecreaseItem
				Write8(pRankedMatchComputeInfo, 0); //FinishSeasonChallengeTaskOrNot
				Write32(pRankedMatchComputeInfo, 0); //FinishedSeasonChallengeTaskIndex
				Write32(pRankedMatchComputeInfo, 0); //SeasonChallengeTaskProtectAddScore
				Write8(pRankedMatchComputeInfo, 0); //NotDecreaseReason
				Write8(pRankedMatchComputeInfo, 0); //HaveSpeedKingInfo
				for (size_t i = 0; i < n; i++)
				{ //RankedMatchSpeedKingInfos
					BYTE* pRankedMatchSpeedKingInfos = pRankedMatchComputeInfo;
					Write16(pRankedMatchSpeedKingInfos, 0); //len

					Write8(pRankedMatchSpeedKingInfos, 0); //WinOrNot
					WriteUn(pRankedMatchSpeedKingInfos, 0); //UiAwardSpeedKingEnergyItemNums
					Write32(pRankedMatchSpeedKingInfos, 0); //WeeklyAwardSpeedKingEnergyItemNums
					Write32(pRankedMatchSpeedKingInfos, 0); //WeeklyAwardSpeedKingEnergyItemLimitNums

					len = pRankedMatchSpeedKingInfos - pRankedMatchComputeInfo;
					Set16(pRankedMatchComputeInfo, (WORD)len);
					pRankedMatchComputeInfo += len;
				}
				Write8(pRankedMatchComputeInfo, 0); //HaveExtraComputeInfo
				for (size_t i = 0; i < n; i++)
				{ //RankedMatchExtracComputeInfos
					BYTE* pRankedMatchExtracComputeInfos = pRankedMatchComputeInfo;
					Write16(pRankedMatchExtracComputeInfos, 0); //len

					Write32(pRankedMatchExtracComputeInfos, 0); //ExtraComputeType
					Write32(pRankedMatchExtracComputeInfos, 0); //AwardItemNums
					Write32(pRankedMatchExtracComputeInfos, 0); //WeekylyAwardItemNums
					Write32(pRankedMatchExtracComputeInfos, 0); //WeeklyAwardItemLimitNums
					Write8(pRankedMatchExtracComputeInfos, 0); //HaveGameLogicTask
					for (size_t i = 0; i < n; i++)
					{ //RakedMatchGamelogicTaskInfo
						BYTE* pRakedMatchGamelogicTaskInfo = pRankedMatchExtracComputeInfos;
						Write16(pRakedMatchGamelogicTaskInfo, 0); //len

						Write32(pRakedMatchGamelogicTaskInfo, 0); //GameLogicTaskType
						Write32(pRakedMatchGamelogicTaskInfo, 0); //TaskFinishCondValue
						Write8(pRakedMatchGamelogicTaskInfo, 0); //JudgeRule
						Write32(pRakedMatchGamelogicTaskInfo, 0); //TaskAddGradeScore
						Write8(pRakedMatchGamelogicTaskInfo, 0); //GradeScoreRangeNum
						Write32(pRakedMatchGamelogicTaskInfo, 0); //GradeScoreRange[]
						Write8(pRakedMatchGamelogicTaskInfo, 0); //TaskFinishCondValueNum
						Write32(pRakedMatchGamelogicTaskInfo, 0); //TaskFinishCondValueRange[]
						Write8(pRakedMatchGamelogicTaskInfo, 0); //TaskAddGradeScoreNum
						Write32(pRakedMatchGamelogicTaskInfo, 0); //TaskAddGradeScoreRange[]
						Write8(pRakedMatchGamelogicTaskInfo, 0); //FailedAddGradeScoreNum
						Write32(pRakedMatchGamelogicTaskInfo, 0); //FailedAddGradeScoreRange[]
						Write8(pRakedMatchGamelogicTaskInfo, 0); //FinishTask
						Write32(pRakedMatchGamelogicTaskInfo, 0); //ExtraFinishTaskAddScore

						len = pRakedMatchGamelogicTaskInfo - pRankedMatchExtracComputeInfos;
						Set16(pRankedMatchExtracComputeInfos, (WORD)len);
						pRankedMatchExtracComputeInfos += len;
					}
					Write8(pRankedMatchExtracComputeInfos, 0); //Win
					Write8(pRankedMatchExtracComputeInfos, 0); //NormalPlayerOrNot
					Write8(pRankedMatchExtracComputeInfos, 0); //LeadRolePlayerNums

					len = pRankedMatchExtracComputeInfos - pRankedMatchComputeInfo;
					Set16(pRankedMatchComputeInfo, (WORD)len);
					pRankedMatchComputeInfo += len;
				}
				Write32(pRankedMatchComputeInfo, 0); //SeasonNewMapAddScore
				Write8(pRankedMatchComputeInfo, 0); //SeasonChallengeBaseScore
				Write8(pRankedMatchComputeInfo, 0); //SeasonChallengeContiWinExtrScore
				Write8(pRankedMatchComputeInfo, 0); //SeasonChallengeRegretDefeatScore
				Write8(pRankedMatchComputeInfo, 0); //SeasonChallengeRespectableOpponentScore
				Write8(pRankedMatchComputeInfo, 0); //SpeedGodChallengeAddScore
				Write8(pRankedMatchComputeInfo, 0); //SpeedGodChallengeAddCoin
				Write8(pRankedMatchComputeInfo, 0); //SpeedFlashAddFactoryCoin
				Write8(pRankedMatchComputeInfo, 0); //PinnacleBattleAddScore
				Write8(pRankedMatchComputeInfo, 0); //PromotionExtraScore
				Write32(pRankedMatchComputeInfo, 0); //SavedExtraScore
				Write32(pRankedMatchComputeInfo, 0); //DailyExtraTaskID
				Write8(pRankedMatchComputeInfo, 0); //SuitActiveAddScore
				Write8(pRankedMatchComputeInfo, 0); //SpeedGodChallengeType
				Write8(pRankedMatchComputeInfo, 0); //SuitActiveEffectID

				len = pRankedMatchComputeInfo - pRankedMatchScore;
				Set16(pRankedMatchScore, (WORD)len);
				pRankedMatchScore += len;
			}
			Write8(pRankedMatchScore, 0); //HavePromotionExtraScoreInfo
			for (size_t i = 0; i < n; i++)
			{ //PromotionExtraScoreInfo
				BYTE* pPromotionExtraScoreInfo = pRankedMatchScore;
				Write16(pPromotionExtraScoreInfo, 0); //len

				Write8(pPromotionExtraScoreInfo, 0); //PromotionMatch
				Write32(pPromotionExtraScoreInfo, 0); //PromotionRoundNums
				Write32(pPromotionExtraScoreInfo, 0); //PromotionSuccessRoundNums
				Write32(pPromotionExtraScoreInfo, 0); //PromotionAlreadySuccessRoundNums
				Write32(pPromotionExtraScoreInfo, 0); //PromotionRecordTag
				Write32(pPromotionExtraScoreInfo, 0); //CurrentPromotionRoundNums
				Write32(pPromotionExtraScoreInfo, 0); //PromoFailedMinusScore
				Write32(pPromotionExtraScoreInfo, 0); //PromoSuccAddScore
				Write8(pPromotionExtraScoreInfo, 0); //PromoDirectly
				Write8(pPromotionExtraScoreInfo, 0); //GradeNoNeedPromo
				Write8(pPromotionExtraScoreInfo, 0); //RankedMemoryNoNeedPromo
				Write8(pPromotionExtraScoreInfo, 0); //PromotionExtraScore
				Write8(pPromotionExtraScoreInfo, 0); //PromtRaceFailedDefendFlag

				len = pPromotionExtraScoreInfo - pRankedMatchScore;
				Set16(pRankedMatchScore, (WORD)len);
				pRankedMatchScore += len;
			}

			len = pRankedMatchScore - pRaceScore;
			Set16(pRaceScore, (WORD)len);
			pRaceScore += len;
		}
		Write8(pRaceScore, 0); //HaveCrazyChaseScoreInfo
		for (size_t i = 0; i < n; i++)
		{ //CrazyChaseScoreInfo
			BYTE* pCrazyChaseScoreInfo = pRaceScore;
			Write16(pCrazyChaseScoreInfo, 0); //len

			Write32(pCrazyChaseScoreInfo, 0); //Uin
			Write16(pCrazyChaseScoreInfo, 0); //Role
			Write32(pCrazyChaseScoreInfo, 0); //Score
			Write8(pCrazyChaseScoreInfo, 0); //ScoreNum
			for (size_t i = 0; i < n; i++)
			{ //ScoreInfo
				BYTE* pScoreInfo = pCrazyChaseScoreInfo;
				Write16(pScoreInfo, 0); //len

				Write8(pScoreInfo, 0); //ScoreType
				Write32(pScoreInfo, 0); //Value
				Write32(pScoreInfo, 0); //Score

				len = pScoreInfo - pCrazyChaseScoreInfo;
				Set16(pCrazyChaseScoreInfo, (WORD)len);
				pCrazyChaseScoreInfo += len;
			}

			len = pCrazyChaseScoreInfo - pRaceScore;
			Set16(pRaceScore, (WORD)len);
			pRaceScore += len;
		}
		Write8(pRaceScore, 0); //TeamID
		Write8(pRaceScore, 0); //HasRankedMatchArenaInfo
		for (size_t i = 0; i < n; i++)
		{ //RankedMatchArenaScore
			BYTE* pRankedMatchArenaScore = pRaceScore;
			Write16(pRankedMatchArenaScore, 0); //len

			Write8(pRankedMatchArenaScore, 0); //Win
			Write8(pRankedMatchArenaScore, 0); //Rank
			Write8(pRankedMatchArenaScore, 0); //TaskScore
			Write32(pRankedMatchArenaScore, 0); //AwardRankCoinNums
			{ //RankedMatchLastGradeInfo
				BYTE* pRankedMatchLastGradeInfo = pRankedMatchArenaScore;
				Write16(pRankedMatchLastGradeInfo, 0); //len

				Write32(pRankedMatchLastGradeInfo, 0); //GradeLevel
				Write32(pRankedMatchLastGradeInfo, 0); //ChildLevel
				Write32(pRankedMatchLastGradeInfo, 0); //GradeScore
				Write32(pRankedMatchLastGradeInfo, 0); //MaxGradeScore
				Write32(pRankedMatchLastGradeInfo, 0); //TotalScore

				len = pRankedMatchLastGradeInfo - pRankedMatchArenaScore;
				Set16(pRankedMatchArenaScore, (WORD)len);
				pRankedMatchArenaScore += len;
			}
			{ //RankedMatchGradeInfo
				BYTE* pRankedMatchGradeInfo = pRankedMatchArenaScore;
				Write16(pRankedMatchGradeInfo, 0); //len

				Write32(pRankedMatchGradeInfo, 0); //GradeLevel
				Write32(pRankedMatchGradeInfo, 0); //ChildLevel
				Write32(pRankedMatchGradeInfo, 0); //GradeScore
				Write32(pRankedMatchGradeInfo, 0); //MaxGradeScore
				Write32(pRankedMatchGradeInfo, 0); //TotalScore

				len = pRankedMatchGradeInfo - pRankedMatchArenaScore;
				Set16(pRankedMatchArenaScore, (WORD)len);
				pRankedMatchArenaScore += len;
			}
			{ //RankedMatchPromoInfo
				BYTE* pRankedMatchPromoInfo = pRankedMatchArenaScore;
				Write16(pRankedMatchPromoInfo, 0); //len

				Write8(pRankedMatchPromoInfo, 0); //PromotionMatch
				Write32(pRankedMatchPromoInfo, 0); //PromotionRoundNums
				Write32(pRankedMatchPromoInfo, 0); //PromotionSuccessRoundNums
				Write32(pRankedMatchPromoInfo, 0); //PromotionAlreadySuccessRoundNums
				Write32(pRankedMatchPromoInfo, 0); //PromotionRecordTag
				Write32(pRankedMatchPromoInfo, 0); //CurrentPromotionRoundNums
				Write32(pRankedMatchPromoInfo, 0); //PromoFailedMinusScore
				Write32(pRankedMatchPromoInfo, 0); //PromoSuccAddScore
				Write8(pRankedMatchPromoInfo, 0); //PromoDirectly
				Write8(pRankedMatchPromoInfo, 0); //GradeNoNeedPromo
				Write8(pRankedMatchPromoInfo, 0); //RankedMemoryNoNeedPromo
				Write8(pRankedMatchPromoInfo, 0); //PromotionExtraScore
				Write8(pRankedMatchPromoInfo, 0); //PromtRaceFailedDefendFlag

				len = pRankedMatchPromoInfo - pRankedMatchArenaScore;
				Set16(pRankedMatchArenaScore, (WORD)len);
				pRankedMatchArenaScore += len;
			}
			Write8(pRankedMatchArenaScore, 0); //WinNum
			Write16(pRankedMatchArenaScore, 0); //CurrentScore
			Write8(pRankedMatchArenaScore, 0); //FinishScore
			Write16(pRankedMatchArenaScore, 0); //AwardRankScore
			Write8(pRankedMatchArenaScore, 0); //AwardRankCoinNumsByRank
			Write8(pRankedMatchArenaScore, 0); //AwardRankCoinNumsByFinish
			Write32(pRankedMatchArenaScore, 0); //WeeklyAwardRankCoinNums
			Write32(pRankedMatchArenaScore, 0); //WeeklyAwardRankCoinLimit
			Write32(pRankedMatchArenaScore, 0); //AwardRankCoinNumsByTask

			len = pRankedMatchArenaScore - pRaceScore;
			Set16(pRaceScore, (WORD)len);
			pRaceScore += len;
		}
		Write32(pRaceScore, 0); //DistanceToEnd
		Write8(pRaceScore, 0); //ShortDistancWinPoint
		Write8(pRaceScore, 0); //Status
		Write8(pRaceScore, 0); //HaveRankedMatchSpeedKingInfo
		for (size_t i = 0; i < n; i++)
		{ //RankedMatchSpeedKingScoreInfo
			BYTE* pRankedMatchSpeedKingScoreInfo = pRaceScore;
			Write16(pRankedMatchSpeedKingScoreInfo, 0); //len

			Write32(pRankedMatchSpeedKingScoreInfo, 0); //AwardSpeedKingEnergyNums
			Write8(pRankedMatchSpeedKingScoreInfo, 0); //Win

			len = pRankedMatchSpeedKingScoreInfo - pRaceScore;
			Set16(pRaceScore, (WORD)len);
			pRaceScore += len;
		}
		Write8(pRaceScore, 0); //ProfessionLicenseAwardNum
		for (size_t i = 0; i < n; i++)
		{ //ProfessionLicenseAward
			BYTE* pProfessionLicenseAward = pRaceScore;
			Write16(pProfessionLicenseAward, 0); //len

			Write32(pProfessionLicenseAward, 0); //PointInc
			Write32(pProfessionLicenseAward, 0); //PointLevelCur
			Write32(pProfessionLicenseAward, 0); //PointLevelMax
			Write16(pProfessionLicenseAward, 0); //IncResultID
			Write8(pProfessionLicenseAward, 0); //ShowQiPao
			Write32(pProfessionLicenseAward, 0); //PointWeekTotal
			Write32(pProfessionLicenseAward, 0); //PointWeekCur
			{ //ProfessionLicenseInfo
				BYTE* pProfessionLicenseInfo = pProfessionLicenseAward;
				Write16(pProfessionLicenseInfo, 0); //len

				Write8(pProfessionLicenseInfo, 0); //BigLevel
				Write8(pProfessionLicenseInfo, 0); //SmallLevel

				len = pProfessionLicenseInfo - pProfessionLicenseAward;
				Set16(pProfessionLicenseAward, (WORD)len);
				pProfessionLicenseAward += len;
			}
			Write8(pProfessionLicenseAward, 0); //SwitchShowExtraAddPoint
			Write16(pProfessionLicenseAward, 0); //BeginOffsetSeconds

			len = pProfessionLicenseAward - pRaceScore;
			Set16(pRaceScore, (WORD)len);
			pRaceScore += len;
		}
		{ //RaceResult
			BYTE* pRaceResult = pRaceScore;
			Write16(pRaceResult, 0); //len

			Write8(pRaceResult, 0); //PLExpPowerValid
			Write8(pRaceResult, 0); //PLHonorPowerValid
			Write8(pRaceResult, 0); //ExpMultiNum
			Write8(pRaceResult, 0); //HonorMultiNum

			len = pRaceResult - pRaceScore;
			Set16(pRaceScore, (WORD)len);
			pRaceScore += len;
		}
		Write8(pRaceScore, 0); //HaveRankedMatchExtraInfo
		for (size_t i = 0; i < n; i++)
		{ //RankedMatchExtraScoreInfo
			BYTE* pRankedMatchExtraScoreInfo = pRaceScore;
			Write16(pRankedMatchExtraScoreInfo, 0); //len

			Write32(pRankedMatchExtraScoreInfo, 0); //AwardItemNums
			Write8(pRankedMatchExtraScoreInfo, 0); //Win

			len = pRankedMatchExtraScoreInfo - pRaceScore;
			Set16(pRaceScore, (WORD)len);
			pRaceScore += len;
		}
		Write8(pRaceScore, 0); //HasYuLeJiaNianHuaComputeData
		for (size_t i = 0; i < n; i++)
		{ //YuLeJiaNianHuaComputeData
			BYTE* pYuLeJiaNianHuaComputeData = pRaceScore;
			Write16(pYuLeJiaNianHuaComputeData, 0); //len

			Write32(pYuLeJiaNianHuaComputeData, 0); //AwardScore
			Write8(pYuLeJiaNianHuaComputeData, 0); //Recommend
			Write8(pYuLeJiaNianHuaComputeData, 0); //ScoreDouble
			Write8(pYuLeJiaNianHuaComputeData, 0); //GuaJi

			len = pYuLeJiaNianHuaComputeData - pRaceScore;
			Set16(pRaceScore, (WORD)len);
			pRaceScore += len;
		}

		len = pRaceScore - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //WinTeamID
	Write32(p, 0); //WinType
	WriteUn(p, 0); //AwardTime
	Write8(p, 0); //TeamNum
	Write32(p, 0); //FinishTime[]
	Write8(p, 0); //PlayerNumber
	for (size_t i = 0; i < n; i++)
	{ //HideTaskResult
		BYTE* pHideTaskResult = p;
		Write16(pHideTaskResult, 0); //len

		Write32(pHideTaskResult, 0); //Uin
		Write32(pHideTaskResult, 0); //TaskId
		Write8(pHideTaskResult, 0); //HideTaskFinishResult

		len = pHideTaskResult - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //KickOffPlayerNumber
	for (size_t i = 0; i < n; i++)
	{ //KickOffPlayer
		BYTE* pKickOffPlayer = p;
		Write16(pKickOffPlayer, 0); //len

		Write32(pKickOffPlayer, 0); //Uin
		WriteString(pKickOffPlayer, 0); //NickName[]
		Write8(pKickOffPlayer, 0); //Gender
		Write8(pKickOffPlayer, 0); //TeamID
		Write8(pKickOffPlayer, 0); //Country

		len = pKickOffPlayer - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 783, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetAchieveList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT DstUin = Read32(p);

}

void ResponseGetAchieveList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //DstUin
	Write16(p, 0); //Result
	Write16(p, 0); //AchieveNum
	for (size_t i = 0; i < n; i++)
	{ //Achieves
		BYTE* pAchieves = p;
		Write16(pAchieves, 0); //len

		Write16(pAchieves, 0); //ID
		Write8(pAchieves, 0); //ShowType
		Write8(pAchieves, 0); //LogicType
		Write8(pAchieves, 0); //Status
		Write16(pAchieves, 0); //Progress
		Write16(pAchieves, 0); //TotalProgress
		Write32(pAchieves, 0); //FinTime
		Write16(pAchieves, 0); //AchieveValue
		Write32(pAchieves, 0); //AchieveFlagType

		len = pAchieves - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 373, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestQueryAchieveAward(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT AchieveID = Read16(p);

}

void ResponseQueryAchieveAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //AchieveID
	Write16(p, 0); //Result
	{ //AwardMoneyExp
		BYTE* pAwardMoneyExp = p;
		Write16(pAwardMoneyExp, 0); //len

		Write32(pAwardMoneyExp, 0); //Money
		Write32(pAwardMoneyExp, 0); //SuperMoney
		Write32(pAwardMoneyExp, 0); //Exp
		Write32(pAwardMoneyExp, 0); //Charm
		Write32(pAwardMoneyExp, 0); //DanceExp
		Write32(pAwardMoneyExp, 0); //Coupons
		Write32(pAwardMoneyExp, 0); //Admiration
		Write32(pAwardMoneyExp, 0); //LuckMoney
		Write32(pAwardMoneyExp, 0); //TeamWorkExp
		Write32(pAwardMoneyExp, 0); //AchievePoint
		Write32(pAwardMoneyExp, 0); //ConsumeScore
		Write32(pAwardMoneyExp, 0); //HistoryConsumeScore
		Write32(pAwardMoneyExp, 0); //LadderMatchAchievePoint
		Write32(pAwardMoneyExp, 0); //SpeedBean
		Write32(pAwardMoneyExp, 0); //SpeedCoin

		len = pAwardMoneyExp - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //AwardItemNum
	for (size_t i = 0; i < n; i++)
	{ //AwardItem
		BYTE* pAwardItem = p;
		Write16(pAwardItem, 0); //len

		Write32(pAwardItem, 0); //ItemID
		Write32(pAwardItem, 0); //ItemNum
		Write32(pAwardItem, 0); //AvailPeriod
		Write8(pAwardItem, 0); //Status
		WriteUn(pAwardItem, 0); //ObtainTime
		Write32(pAwardItem, 0); //OtherAttribute
		Write16(pAwardItem, 0); //ItemType

		len = pAwardItem - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 374, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetAchieveAward(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT AchieveID = Read16(p);
	UCHAR GetAll = Read8(p);
	UCHAR AchieveType = Read8(p);

}

void ResponseGetAchieveAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //AchieveID
	Write16(p, 0); //Result
	{ //AwardMoneyExp
		BYTE* pAwardMoneyExp = p;
		Write16(pAwardMoneyExp, 0); //len

		Write32(pAwardMoneyExp, 0); //Money
		Write32(pAwardMoneyExp, 0); //SuperMoney
		Write32(pAwardMoneyExp, 0); //Exp
		Write32(pAwardMoneyExp, 0); //Charm
		Write32(pAwardMoneyExp, 0); //DanceExp
		Write32(pAwardMoneyExp, 0); //Coupons
		Write32(pAwardMoneyExp, 0); //Admiration
		Write32(pAwardMoneyExp, 0); //LuckMoney
		Write32(pAwardMoneyExp, 0); //TeamWorkExp
		Write32(pAwardMoneyExp, 0); //AchievePoint
		Write32(pAwardMoneyExp, 0); //ConsumeScore
		Write32(pAwardMoneyExp, 0); //HistoryConsumeScore
		Write32(pAwardMoneyExp, 0); //LadderMatchAchievePoint
		Write32(pAwardMoneyExp, 0); //SpeedBean
		Write32(pAwardMoneyExp, 0); //SpeedCoin

		len = pAwardMoneyExp - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //AwardItemNum
	for (size_t i = 0; i < n; i++)
	{ //AwardItem
		BYTE* pAwardItem = p;
		Write16(pAwardItem, 0); //len

		Write32(pAwardItem, 0); //ItemID
		Write32(pAwardItem, 0); //ItemNum
		Write32(pAwardItem, 0); //AvailPeriod
		Write8(pAwardItem, 0); //Status
		WriteUn(pAwardItem, 0); //ObtainTime
		Write32(pAwardItem, 0); //OtherAttribute
		Write16(pAwardItem, 0); //ItemType

		len = pAwardItem - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //GetAll
	Write8(p, 0); //AchieveType

	len = p - buf;
	SendToClient(Client, 375, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyUpdateAchieveProgress(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //AchieveNum
	for (size_t i = 0; i < n; i++)
	{ //Achieve
		BYTE* pAchieve = p;
		Write16(pAchieve, 0); //len

		Write16(pAchieve, 0); //ID
		Write8(pAchieve, 0); //ShowType
		Write8(pAchieve, 0); //LogicType
		Write8(pAchieve, 0); //Status
		Write16(pAchieve, 0); //Progress
		Write16(pAchieve, 0); //TotalProgress
		Write32(pAchieve, 0); //FinTime
		Write16(pAchieve, 0); //AchieveValue
		Write32(pAchieve, 0); //AchieveFlagType

		len = pAchieve - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 759, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestStartShadowChallenge(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	int MapID = Read32(p);

}

void ResponseStartShadowChallenge(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 1500, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestEndShadowChallenge(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	int Time = Read32(p);
	UCHAR GuildChallengePractice = Read8(p);
	USHORT MapID = Read16(p);

}

void ResponseEndShadowChallenge(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //ResultID
	Write32(p, 0); //MoneyInc
	Write32(p, 0); //ExpInc
	Write32(p, 0); //MoneyTotal
	WriteUn(p, 0); //ExpTotal
	Write16(p, 0); //ItemNum
	Write32(p, 0); //ItemID[]

	len = p - buf;
	SendToClient(Client, 1501, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyPropPoint(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //PropID
	Write8(p, 0); //PropType
	Write32(p, 0); //DstUin
	Write32(p, 0); //PropPointInc
	Write32(p, 0); //PropPointDec
	Write32(p, 0); //PropPointTotal
	Write8(p, 0); //AttackNum
	Write8(p, 0); //AttackTeammateNum
	Write8(p, 0); //ProtectNum
	Write8(p, 0); //ProtectTeammatetNum
	Write8(p, 0); //ComboFlag

	len = p - buf;
	SendToClient(Client, 1502, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestCheckRealName(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseCheckRealName(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //ResultID
	Write8(p, 0); //IsHOPE

	len = p - buf;
	SendToClient(Client, 1499, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyPlayerIdentify(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Time
	Write32(p, 0); //Identify

	len = p - buf;
	SendToClient(Client, 608, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestRecommendGuildList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	{ //SelfCond
		BYTE* pSelfCond = p;
		len = Read16(pSelfCond);

		UINT ProsperityCondition = Read32(pSelfCond);
		UINT JoinTotalCondition = Read32(pSelfCond);
		UINT HonorCondition = Read32(pSelfCond);
		UINT CharmCondition = Read32(pSelfCond);
		UINT DanceExpCondition = Read32(pSelfCond);
		UINT SkillPointCondition = Read32(pSelfCond);
		UINT ExpLevelCondition = Read32(pSelfCond);
		UINT ApplyExpLevelCondition = Read32(pSelfCond);
		UCHAR EnlistType = Read8(pSelfCond);

		p += len;
	}
	U NextQueryNum = ReadU(p);
	[] NextQueryKey[] = Read(p);
	USHORT FriendPlayerNums = Read16(p);
	UINT FriendNums[] = Read32(p);

}

void ResponseRecommendGuildList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //GuildCount
	for (size_t i = 0; i < n; i++)
	{ //GuildDescInfo
		BYTE* pGuildDescInfo = p;
		Write16(pGuildDescInfo, 0); //len

		Write32(pGuildDescInfo, 0); //GuildID
		WriteString(pGuildDescInfo, 0); //Name[]
		Write32(pGuildDescInfo, 0); //Level
		Write32(pGuildDescInfo, 0); //Score
		Write32(pGuildDescInfo, 0); //CreateTime
		Write16(pGuildDescInfo, 0); //Attribute
		Write16(pGuildDescInfo, 0); //MaxMember
		Write16(pGuildDescInfo, 0); //CurrentMember
		Write32(pGuildDescInfo, 0); //Prosperity
		Write16(pGuildDescInfo, 0); //Level
		{ //GuildEnlistCond
			BYTE* pGuildEnlistCond = pGuildDescInfo;
			Write16(pGuildEnlistCond, 0); //len

			Write32(pGuildEnlistCond, 0); //ProsperityCondition
			Write32(pGuildEnlistCond, 0); //JoinTotalCondition
			Write32(pGuildEnlistCond, 0); //HonorCondition
			Write32(pGuildEnlistCond, 0); //CharmCondition
			Write32(pGuildEnlistCond, 0); //DanceExpCondition
			Write32(pGuildEnlistCond, 0); //SkillPointCondition
			Write32(pGuildEnlistCond, 0); //ExpLevelCondition
			Write32(pGuildEnlistCond, 0); //ApplyExpLevelCondition
			Write8(pGuildEnlistCond, 0); //EnlistType

			len = pGuildEnlistCond - pGuildDescInfo;
			Set16(pGuildDescInfo, (WORD)len);
			pGuildDescInfo += len;
		}
		Write8(pGuildDescInfo, 0); //SubType
		{ //CardOtherInfo
			BYTE* pCardOtherInfo = pGuildDescInfo;
			Write16(pCardOtherInfo, 0); //len

			Write32(pCardOtherInfo, 0); //MainZone1
			Write32(pCardOtherInfo, 0); //MainZone2
			Write32(pCardOtherInfo, 0); //MainMode1
			Write32(pCardOtherInfo, 0); //MainMode2
			Write32(pCardOtherInfo, 0); //OtherInterest1
			Write32(pCardOtherInfo, 0); //OtherInterest2

			len = pCardOtherInfo - pGuildDescInfo;
			Set16(pGuildDescInfo, (WORD)len);
			pGuildDescInfo += len;
		}
		Write16(pGuildDescInfo, 0); //DescLen
		Write32(pGuildDescInfo, 0); //WeekProsper
		Write32(pGuildDescInfo, 0); //GuildQQGroup
		Write8(pGuildDescInfo, 0); //RecommendType
		Write16(pGuildDescInfo, 0); //FriendNums
		Write16(pGuildDescInfo, 0); //DCRecommendIndex

		len = pGuildDescInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen
	WriteU(p, 0); //NextQueryNum
	Write(p, 0); //NextQueryKey[]
	Write32(p, 0); //RecommendAlgoType
	Write8(p, 0); //RecommendIDStr[]

	len = p - buf;
	SendToClient(Client, 15020, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetGuildChatRoomInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT GuildID = Read32(p);
	short PreSvrID = Read16(p);

}

void ResponseGetGuildChatRoomInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteU(p, 0); //Result
	Write32(p, 0); //GuildID
	Write32(p, 0); //ExtenalIP
	Write16(p, 0); //ServerID
	Write8(p, 0); //ExtTcpPortNum
	Write16(p, 0); //ExternalTcpPort[]
	Write8(p, 0); //ExtUdpPortNum
	Write16(p, 0); //ExternalUdpPort[]
	Write8(p, 0); //RoomNum
	for (size_t i = 0; i < n; i++)
	{ //RoomInfo
		BYTE* pRoomInfo = p;
		Write16(pRoomInfo, 0); //len

		Write8(pRoomInfo, 0); //Flag
		Write8(pRoomInfo, 0); //GuildRoomID
		Write8(pRoomInfo, 0); //RoomNameLen
		Write32(pRoomInfo, 0); //MaxPlayerNum
		Write32(pRoomInfo, 0); //CurPlayerNum
		Write32(pRoomInfo, 0); //CurInvadedPlayerNum

		len = pRoomInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 380, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestEnterGuildRoom(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT GuildID = Read32(p);
	UCHAR GuildRoomID = Read8(p);
	USHORT NPCCfgVer = Read16(p);
	UINT ClientStatusContex = Read32(p);
	UCHAR EnterStatus = Read8(p);

}

void ResponseEnterGuildRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen
	Write32(p, 0); //GuildID
	Write8(p, 0); //GuildRoomID
	Write16(p, 0); //SceneID
	{ //HeroMoveInfo
		BYTE* pHeroMoveInfo = p;
		Write16(pHeroMoveInfo, 0); //len

		Write32(pHeroMoveInfo, 0); //Uin
		Write8(pHeroMoveInfo, 0); //WalkStatue
		Write32(pHeroMoveInfo, 0); //Posion[]
		Write32(pHeroMoveInfo, 0); //Ori[]
		Write32(pHeroMoveInfo, 0); //AttachUin
		Write32(pHeroMoveInfo, 0); //WalkExtState
		Write8(pHeroMoveInfo, 0); //Nums
		Write32(pHeroMoveInfo, 0); //PermitSitHorsePetUins[]
		Write32(pHeroMoveInfo, 0); //EquipedPetID
		Write32(pHeroMoveInfo, 0); //EquipedPetStatus
		Write32(pHeroMoveInfo, 0); //PetPKResultStatus
		Write16(pHeroMoveInfo, 0); //HeroMajorState
		Write16(pHeroMoveInfo, 0); //HorsePetStatus

		len = pHeroMoveInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //MaxHeroNumInRoom
	Write32(p, 0); //ClientStatusContex
	Write8(p, 0); //GuildBirthStage
	Write16(p, 0); //GuildCrazyTimeRemain
	Write8(p, 0); //EnterStatus
	Write8(p, 0); //PigNum

	len = p - buf;
	SendToClient(Client, 11011, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyGuildRoomMoreInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //GuildID
	Write8(p, 0); //GuildRoomID
	Write16(p, 0); //HeroCount
	for (size_t i = 0; i < n; i++)
	{ //HeroInfo
		BYTE* pHeroInfo = p;
		Write16(pHeroInfo, 0); //len

		{ //HeroMoveInfo
			BYTE* pHeroMoveInfo = pHeroInfo;
			Write16(pHeroMoveInfo, 0); //len

			Write32(pHeroMoveInfo, 0); //Uin
			Write8(pHeroMoveInfo, 0); //WalkStatue
			Write32(pHeroMoveInfo, 0); //Posion[]
			Write32(pHeroMoveInfo, 0); //Ori[]
			Write32(pHeroMoveInfo, 0); //AttachUin
			Write32(pHeroMoveInfo, 0); //WalkExtState
			Write8(pHeroMoveInfo, 0); //Nums
			Write32(pHeroMoveInfo, 0); //PermitSitHorsePetUins[]
			Write32(pHeroMoveInfo, 0); //EquipedPetID
			Write32(pHeroMoveInfo, 0); //EquipedPetStatus
			Write32(pHeroMoveInfo, 0); //PetPKResultStatus
			Write16(pHeroMoveInfo, 0); //HeroMajorState
			Write16(pHeroMoveInfo, 0); //HorsePetStatus

			len = pHeroMoveInfo - pHeroInfo;
			Set16(pHeroInfo, (WORD)len);
			pHeroInfo += len;
		}
		Write32(pHeroInfo, 0); //NextPoint
		Write16(pHeroInfo, 0); //PathLen
		Write32(pHeroInfo, 0); //Path[]
		{ //HeroVisbleInfo
			BYTE* pHeroVisbleInfo = pHeroInfo;
			Write16(pHeroVisbleInfo, 0); //len

			WriteUn(pHeroVisbleInfo, 0); //Uin
			WriteUn(pHeroVisbleInfo, 0); //Identity
			Write8(pHeroVisbleInfo, 0); //SeatID
			Write8(pHeroVisbleInfo, 0); //TeamID
			Write16(pHeroVisbleInfo, 0); //PlayerID
			Write8(pHeroVisbleInfo, 0); //Status
			{ //PlayerDBBaseInfo
				BYTE* pPlayerDBBaseInfo = pHeroVisbleInfo;
				Write16(pPlayerDBBaseInfo, 0); //len

				WriteString(pPlayerDBBaseInfo, 0); //NickName[]
				Write8(pPlayerDBBaseInfo, 0); //Gender
				Write8(pPlayerDBBaseInfo, 0); //Country
				Write32(pPlayerDBBaseInfo, 0); //License
				WriteUn(pPlayerDBBaseInfo, 0); //Experience
				Write32(pPlayerDBBaseInfo, 0); //SuperMoney
				Write32(pPlayerDBBaseInfo, 0); //Money
				WriteUn(pPlayerDBBaseInfo, 0); //WinNum
				Write32(pPlayerDBBaseInfo, 0); //SecondNum
				Write32(pPlayerDBBaseInfo, 0); //ThirdNum
				WriteUn(pPlayerDBBaseInfo, 0); //TotalNum
				Write32(pPlayerDBBaseInfo, 0); //CurHonor
				Write32(pPlayerDBBaseInfo, 0); //TotalHonor
				Write32(pPlayerDBBaseInfo, 0); //TodayHonor
				Write32(pPlayerDBBaseInfo, 0); //RelaxTime
				Write32(pPlayerDBBaseInfo, 0); //MonthDurationBefore
				Write32(pPlayerDBBaseInfo, 0); //MonthDurationCur
				Write32(pPlayerDBBaseInfo, 0); //Charm
				Write32(pPlayerDBBaseInfo, 0); //DurationGame
				Write32(pPlayerDBBaseInfo, 0); //DanceExp
				Write32(pPlayerDBBaseInfo, 0); //Coupons
				Write32(pPlayerDBBaseInfo, 0); //Admiration
				Write32(pPlayerDBBaseInfo, 0); //LuckMoney
				Write32(pPlayerDBBaseInfo, 0); //TeamWorkExp
				Write32(pPlayerDBBaseInfo, 0); //AchievePoint
				Write32(pPlayerDBBaseInfo, 0); //RegTime
				WriteString(pPlayerDBBaseInfo, 0); //Signature[]
				Write32(pPlayerDBBaseInfo, 0); //LuckyMatchPoint
				Write32(pPlayerDBBaseInfo, 0); //LuckyMatchNum
				Write16(pPlayerDBBaseInfo, 0); //LuckyMatchFirstNum
				Write8(pPlayerDBBaseInfo, 0); //LuckyMatchBestRand
				Write32(pPlayerDBBaseInfo, 0); //LuckyMatchWinNum
				Write32(pPlayerDBBaseInfo, 0); //FizzPointTotal
				Write16(pPlayerDBBaseInfo, 0); //FizzPointDaily
				Write16(pPlayerDBBaseInfo, 0); //FizzPointWeekly
				Write16(pPlayerDBBaseInfo, 0); //FizzPointLastWeek
				Write8(pPlayerDBBaseInfo, 0); //FizzLotteryStatus
				Write32(pPlayerDBBaseInfo, 0); //FizzLastUpdateTime
				Write32(pPlayerDBBaseInfo, 0); //SNSLocaleCode
				Write32(pPlayerDBBaseInfo, 0); //AuctionRightUnlockTime
				Write8(pPlayerDBBaseInfo, 0); //ReserveFlag
				Write32(pPlayerDBBaseInfo, 0); //CurConsumeScore
				Write32(pPlayerDBBaseInfo, 0); //HistoryConsumeScore
				Write8(pPlayerDBBaseInfo, 0); //CrashModeSponsorID
				Write32(pPlayerDBBaseInfo, 0); //Popularity
				Write32(pPlayerDBBaseInfo, 0); //LadderMatchAchievePoint
				Write32(pPlayerDBBaseInfo, 0); //Cash
				Write32(pPlayerDBBaseInfo, 0); //PlayerGPMIdentity
				Write32(pPlayerDBBaseInfo, 0); //PointTotalScore
				WriteUn(pPlayerDBBaseInfo, 0); //totalMapMedalNum
				WriteUn(pPlayerDBBaseInfo, 0); //lastMapMedalNum
				WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalNum
				WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalSeasonId
				WriteUn(pPlayerDBBaseInfo, 0); //lastClearMapMedalTime
				WriteUn(pPlayerDBBaseInfo, 0); //max2048Score
				WriteUn(pPlayerDBBaseInfo, 0); //curPlay2048LeftNum
				Write32(pPlayerDBBaseInfo, 0); //CheerValue
				Write16(pPlayerDBBaseInfo, 0); //SeasonID
				Write32(pPlayerDBBaseInfo, 0); //LastCheerValue
				Write32(pPlayerDBBaseInfo, 0); //SpeedBean
				Write32(pPlayerDBBaseInfo, 0); //SpeedCoin

				len = pPlayerDBBaseInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			{ //PlayerGuildInfo
				BYTE* pPlayerGuildInfo = pHeroVisbleInfo;
				Write16(pPlayerGuildInfo, 0); //len

				WriteString(pPlayerGuildInfo, 0); //GuildName[]
				Write16(pPlayerGuildInfo, 0); //Duty
				Write32(pPlayerGuildInfo, 0); //GuildID
				Write32(pPlayerGuildInfo, 0); //Right
				Write32(pPlayerGuildInfo, 0); //Medal
				Write32(pPlayerGuildInfo, 0); //Contribute
				WriteString(pPlayerGuildInfo, 0); //DutyTitle[]

				len = pPlayerGuildInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write16(pHeroVisbleInfo, 0); //EquipedItemNum
			for (size_t i = 0; i < n; i++)
			{ //PlayerItemInfo
				BYTE* pPlayerItemInfo = pHeroVisbleInfo;
				Write16(pPlayerItemInfo, 0); //len

				Write32(pPlayerItemInfo, 0); //ItemID
				Write32(pPlayerItemInfo, 0); //ItemNum
				Write32(pPlayerItemInfo, 0); //AvailPeriod
				Write8(pPlayerItemInfo, 0); //Status
				WriteUn(pPlayerItemInfo, 0); //ObtainTime
				Write32(pPlayerItemInfo, 0); //OtherAttribute
				Write16(pPlayerItemInfo, 0); //ItemType

				len = pPlayerItemInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write16(pHeroVisbleInfo, 0); //PetNum
			for (size_t i = 0; i < n; i++)
			{ //PetInfo
				BYTE* pPetInfo = pHeroVisbleInfo;
				Write16(pPetInfo, 0); //len

				Write32(pPetInfo, 0); //Uin
				Write32(pPetInfo, 0); //PetId
				WriteString(pPetInfo, 0); //PetName[]
				Write8(pPetInfo, 0); //IsProper
				Write16(pPetInfo, 0); //Level
				Write8(pPetInfo, 0); //Status
				Write16(pPetInfo, 0); //PetSkillNum
				for (size_t i = 0; i < n; i++)
				{ //PetSkillList
					BYTE* pPetSkillList = pPetInfo;
					Write16(pPetSkillList, 0); //len

					Write16(pPetSkillList, 0); //SkillID
					Write8(pPetSkillList, 0); //Status
					Write8(pPetSkillList, 0); //Active
					Write32(pPetSkillList, 0); //Value

					len = pPetSkillList - pPetInfo;
					Set16(pPetInfo, (WORD)len);
					pPetInfo += len;
				}
				Write32(pPetInfo, 0); //StrengLevel
				Write8(pPetInfo, 0); //TopStatus
				{ //CommonInfo
					BYTE* pCommonInfo = pPetInfo;
					Write16(pCommonInfo, 0); //len

					Write32(pCommonInfo, 0); //HuanHuaLevel
					Write8(pCommonInfo, 0); //CanHuanHua

					len = pCommonInfo - pPetInfo;
					Set16(pPetInfo, (WORD)len);
					pPetInfo += len;
				}
				Write16(pPetInfo, 0); //PKStar
				Write32(pPetInfo, 0); //PetSkinID

				len = pPetInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			{ //PlayerGuildMatchInfo
				BYTE* pPlayerGuildMatchInfo = pHeroVisbleInfo;
				Write16(pPlayerGuildMatchInfo, 0); //len

				Write32(pPlayerGuildMatchInfo, 0); //SelfPoint
				Write32(pPlayerGuildMatchInfo, 0); //WinNum
				Write32(pPlayerGuildMatchInfo, 0); //TotalNum

				len = pPlayerGuildMatchInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //IsInTopList
			Write8(pHeroVisbleInfo, 0); //LoverRaceOrPro
			Write8(pHeroVisbleInfo, 0); //TmpEffectNum
			Write32(pHeroVisbleInfo, 0); //TmpEffectItems[]
			Write8(pHeroVisbleInfo, 0); //OBState
			Write8(pHeroVisbleInfo, 0); //DebutOrX5
			Write8(pHeroVisbleInfo, 0); //RandKeyFlag
			WriteUn(pHeroVisbleInfo, 0); //VipFlag
			Write8(pHeroVisbleInfo, 0); //HaveAppellation
			for (size_t i = 0; i < n; i++)
			{ //CurAppellation
				BYTE* pCurAppellation = pHeroVisbleInfo;
				Write16(pCurAppellation, 0); //len

				Write8(pCurAppellation, 0); //Type
				Write8(pCurAppellation, 0); //Level
				Write8(pCurAppellation, 0); //Status
				Write8(pCurAppellation, 0); //Difficulty
				Write32(pCurAppellation, 0); //MapId
				Write32(pCurAppellation, 0); //Value

				len = pCurAppellation - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			{ //NobleInfo
				BYTE* pNobleInfo = pHeroVisbleInfo;
				Write16(pNobleInfo, 0); //len

				Write32(pNobleInfo, 0); //NobleID
				Write8(pNobleInfo, 0); //NobleLevel
				Write32(pNobleInfo, 0); //NoblePoint
				Write32(pNobleInfo, 0); //NobleLeftDays

				len = pNobleInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //HasCarryWizard
			for (size_t i = 0; i < n; i++)
			{ //CarryWizardInfo
				BYTE* pCarryWizardInfo = pHeroVisbleInfo;
				Write16(pCarryWizardInfo, 0); //len

				Write16(pCarryWizardInfo, 0); //WizardID
				WriteString(pCarryWizardInfo, 0); //NickName[]
				Write16(pCarryWizardInfo, 0); //WizardType
				Write8(pCarryWizardInfo, 0); //Order
				Write8(pCarryWizardInfo, 0); //EvolutionBranch
				Write8(pCarryWizardInfo, 0); //IsHuanHua

				len = pCarryWizardInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			{ //GuildVipBaseInfo
				BYTE* pGuildVipBaseInfo = pHeroVisbleInfo;
				Write16(pGuildVipBaseInfo, 0); //len

				Write8(pGuildVipBaseInfo, 0); //GuildVipLevel
				Write32(pGuildVipBaseInfo, 0); //GuildVipPoint

				len = pGuildVipBaseInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write32(pHeroVisbleInfo, 0); //ExFlag
			Write8(pHeroVisbleInfo, 0); //HaveLDMBaseInfo
			for (size_t i = 0; i < n; i++)
			{ //PlayerLDMBaseInfo
				BYTE* pPlayerLDMBaseInfo = pHeroVisbleInfo;
				Write16(pPlayerLDMBaseInfo, 0); //len

				Write8(pPlayerLDMBaseInfo, 0); //Grade
				Write32(pPlayerLDMBaseInfo, 0); //Score
				Write32(pPlayerLDMBaseInfo, 0); //MaxScore
				Write32(pPlayerLDMBaseInfo, 0); //MaxGrade

				len = pPlayerLDMBaseInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //HasWl
			for (size_t i = 0; i < n; i++)
			{ //PlayerWlVisibleInfo
				BYTE* pPlayerWlVisibleInfo = pHeroVisbleInfo;
				Write16(pPlayerWlVisibleInfo, 0); //len

				Write32(pPlayerWlVisibleInfo, 0); //WonderLandID
				WriteString(pPlayerWlVisibleInfo, 0); //WonderLandName[]
				Write16(pPlayerWlVisibleInfo, 0); //WonderLandDuty
				Write8(pPlayerWlVisibleInfo, 0); //SubType
				Write8(pPlayerWlVisibleInfo, 0); //GuildGrade

				len = pPlayerWlVisibleInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //HasLoverVip
			for (size_t i = 0; i < n; i++)
			{ //LoverVipInfo
				BYTE* pLoverVipInfo = pHeroVisbleInfo;
				Write16(pLoverVipInfo, 0); //len

				Write8(pLoverVipInfo, 0); //LoverVipLevel
				Write32(pLoverVipInfo, 0); //LoverVipPoint
				Write8(pLoverVipInfo, 0); //GrowRate

				len = pLoverVipInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //HasBattleModeSkillInfoList
			for (size_t i = 0; i < n; i++)
			{ //BattleModeSkillInfoList
				BYTE* pBattleModeSkillInfoList = pHeroVisbleInfo;
				Write16(pBattleModeSkillInfoList, 0); //len

				Write8(pBattleModeSkillInfoList, 0); //SkillNum
				for (size_t i = 0; i < n; i++)
				{ //SkillInfo
					BYTE* pSkillInfo = pBattleModeSkillInfoList;
					Write16(pSkillInfo, 0); //len

					Write16(pSkillInfo, 0); //SkillId
					Write8(pSkillInfo, 0); //SkillLevel

					len = pSkillInfo - pBattleModeSkillInfoList;
					Set16(pBattleModeSkillInfoList, (WORD)len);
					pBattleModeSkillInfoList += len;
				}

				len = pBattleModeSkillInfoList - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //HasGarden
			for (size_t i = 0; i < n; i++)
			{ //PersonalGardenBaseInfo
				BYTE* pPersonalGardenBaseInfo = pHeroVisbleInfo;
				Write16(pPersonalGardenBaseInfo, 0); //len

				Write8(pPersonalGardenBaseInfo, 0); //GardenLevel
				Write32(pPersonalGardenBaseInfo, 0); //GardenPoint
				Write8(pPersonalGardenBaseInfo, 0); //GrowRate
				Write32(pPersonalGardenBaseInfo, 0); //GardenExpireTime
				{ //SimpleInfo
					BYTE* pSimpleInfo = pPersonalGardenBaseInfo;
					Write16(pSimpleInfo, 0); //len

					Write32(pSimpleInfo, 0); //WeekPopularity
					Write32(pSimpleInfo, 0); //TotalPopularity
					Write32(pSimpleInfo, 0); //LastUpdatePopularityTime
					Write8(pSimpleInfo, 0); //PrivateType

					len = pSimpleInfo - pPersonalGardenBaseInfo;
					Set16(pPersonalGardenBaseInfo, (WORD)len);
					pPersonalGardenBaseInfo += len;
				}

				len = pPersonalGardenBaseInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			{ //ConsumeVipInfo
				BYTE* pConsumeVipInfo = pHeroVisbleInfo;
				Write16(pConsumeVipInfo, 0); //len

				WriteUn(pConsumeVipInfo, 0); //VipLevel
				WriteUn(pConsumeVipInfo, 0); //CharmValueOfMonth
				WriteUn(pConsumeVipInfo, 0); //SearchTreasureNums
				WriteUn(pConsumeVipInfo, 0); //GetTreasureNums

				len = pConsumeVipInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //HaveBaby
			{ //LoverBabyInfo
				BYTE* pLoverBabyInfo = pHeroVisbleInfo;
				Write16(pLoverBabyInfo, 0); //len

				Write32(pLoverBabyInfo, 0); //LoverBabyID
				Write32(pLoverBabyInfo, 0); //ItemID
				Write32(pLoverBabyInfo, 0); //GrowValue
				Write32(pLoverBabyInfo, 0); //MentalValue
				Write32(pLoverBabyInfo, 0); //BabyProfileLevel
				Write32(pLoverBabyInfo, 0); //StrengthLevel
				Write32(pLoverBabyInfo, 0); //GrowLevel
				WriteString(pLoverBabyInfo, 0); //LoveBabyNickName[]
				Write16(pLoverBabyInfo, 0); //LoverBabyStat
				Write16(pLoverBabyInfo, 0); //LoverBabyEquipStat
				Write16(pLoverBabyInfo, 0); //LoverBabyTransferdStatus

				len = pLoverBabyInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			{ //EmperorInfo
				BYTE* pEmperorInfo = pHeroVisbleInfo;
				Write16(pEmperorInfo, 0); //len

				Write8(pEmperorInfo, 0); //EmperorLevel
				Write32(pEmperorInfo, 0); //EmperorPoint
				Write32(pEmperorInfo, 0); //EmperorLeftDays
				Write8(pEmperorInfo, 0); //EmperorGrowRate

				len = pEmperorInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write16(pHeroVisbleInfo, 0); //RaceCardNums
			for (size_t i = 0; i < n; i++)
			{ //RaceCardAddValueInfo
				BYTE* pRaceCardAddValueInfo = pHeroVisbleInfo;
				Write16(pRaceCardAddValueInfo, 0); //len

				Write32(pRaceCardAddValueInfo, 0); //RaceCardID
				Write32(pRaceCardAddValueInfo, 0); //AddValue

				len = pRaceCardAddValueInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			{ //GansterScoreInfo
				BYTE* pGansterScoreInfo = pHeroVisbleInfo;
				Write16(pGansterScoreInfo, 0); //len

				Write32(pGansterScoreInfo, 0); //GansterSeasonID
				Write32(pGansterScoreInfo, 0); //GansterScore
				Write32(pGansterScoreInfo, 0); //PoliceScore
				Write32(pGansterScoreInfo, 0); //TotalGansterScore

				len = pGansterScoreInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write32(pHeroVisbleInfo, 0); //OlympicId
			Write32(pHeroVisbleInfo, 0); //NPCEliminateWinTimes
			Write8(pHeroVisbleInfo, 0); //OriginTeamID
			Write8(pHeroVisbleInfo, 0); //NxNpc
			Write16(pHeroVisbleInfo, 0); //NxNpcAILevel
			{ //EquippedActiveKartInfo
				BYTE* pEquippedActiveKartInfo = pHeroVisbleInfo;
				Write16(pEquippedActiveKartInfo, 0); //len

				Write8(pEquippedActiveKartInfo, 0); //HaveActiveInfo
				Write32(pEquippedActiveKartInfo, 0); //KartID
				Write32(pEquippedActiveKartInfo, 0); //ActiveLevel

				len = pEquippedActiveKartInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //SpecialActivityStatus
			Write8(pHeroVisbleInfo, 0); //AreaID
			Write8(pHeroVisbleInfo, 0); //HaveRaiseSecondBaby
			{ //SecondLoverBabyInfo
				BYTE* pSecondLoverBabyInfo = pHeroVisbleInfo;
				Write16(pSecondLoverBabyInfo, 0); //len

				Write32(pSecondLoverBabyInfo, 0); //LoverBabyID
				Write32(pSecondLoverBabyInfo, 0); //ItemID
				Write32(pSecondLoverBabyInfo, 0); //GrowValue
				Write32(pSecondLoverBabyInfo, 0); //MentalValue
				Write32(pSecondLoverBabyInfo, 0); //BabyProfileLevel
				Write32(pSecondLoverBabyInfo, 0); //StrengthLevel
				Write32(pSecondLoverBabyInfo, 0); //GrowLevel
				WriteString(pSecondLoverBabyInfo, 0); //LoveBabyNickName[]
				Write16(pSecondLoverBabyInfo, 0); //LoverBabyStat
				Write16(pSecondLoverBabyInfo, 0); //LoverBabyEquipStat
				Write16(pSecondLoverBabyInfo, 0); //LoverBabyTransferdStatus

				len = pSecondLoverBabyInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //HasRankedMatchInfo
			for (size_t i = 0; i < n; i++)
			{ //RankedMatchGradeInfo
				BYTE* pRankedMatchGradeInfo = pHeroVisbleInfo;
				Write16(pRankedMatchGradeInfo, 0); //len

				Write32(pRankedMatchGradeInfo, 0); //GradeLevel
				Write32(pRankedMatchGradeInfo, 0); //ChildLevel
				Write32(pRankedMatchGradeInfo, 0); //GradeScore
				Write32(pRankedMatchGradeInfo, 0); //MaxGradeScore
				Write32(pRankedMatchGradeInfo, 0); //TotalScore

				len = pRankedMatchGradeInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //HasHuanLingChangeInfo
			for (size_t i = 0; i < n; i++)
			{ //HuanLingSuitInfo
				BYTE* pHuanLingSuitInfo = pHeroVisbleInfo;
				Write16(pHuanLingSuitInfo, 0); //len

				Write32(pHuanLingSuitInfo, 0); //SuitID
				Write8(pHuanLingSuitInfo, 0); //ChangeLevel

				len = pHuanLingSuitInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //EquipSealType
			Write16(pHeroVisbleInfo, 0); //Role
			Write8(pHeroVisbleInfo, 0); //SpecialActivityIDNum
			Write8(pHeroVisbleInfo, 0); //CrewID
			Write8(pHeroVisbleInfo, 0); //SpecialActivityInfoNum
			for (size_t i = 0; i < n; i++)
			{ //SpecialActivityInfo
				BYTE* pSpecialActivityInfo = pHeroVisbleInfo;
				Write16(pSpecialActivityInfo, 0); //len

				Write8(pSpecialActivityInfo, 0); //ProfessionLicenseInfoNum
				for (size_t i = 0; i < n; i++)
				{ //ProfessionLicenseInfo
					BYTE* pProfessionLicenseInfo = pSpecialActivityInfo;
					Write16(pProfessionLicenseInfo, 0); //len

					Write8(pProfessionLicenseInfo, 0); //BigLevel
					Write8(pProfessionLicenseInfo, 0); //SmallLevel

					len = pProfessionLicenseInfo - pSpecialActivityInfo;
					Set16(pSpecialActivityInfo, (WORD)len);
					pSpecialActivityInfo += len;
				}

				len = pSpecialActivityInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //ParaNum
			Write32(pHeroVisbleInfo, 0); //ParaList[]
			Write8(pHeroVisbleInfo, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemOrder
				BYTE* pItemOrder = pHeroVisbleInfo;
				Write16(pItemOrder, 0); //len

				Write32(pItemOrder, 0); //KartID
				Write32(pItemOrder, 0); //Order
				Write32(pItemOrder, 0); //BackGroundID

				len = pItemOrder - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //TDCExcluItemNum
			Write32(pHeroVisbleInfo, 0); //TDCExclusiveItemID[]
			Write8(pHeroVisbleInfo, 0); //EquipNiChangItemNum
			for (size_t i = 0; i < n; i++)
			{ //NiChangPavilionEquipItemInfo
				BYTE* pNiChangPavilionEquipItemInfo = pHeroVisbleInfo;
				Write16(pNiChangPavilionEquipItemInfo, 0); //len

				Write32(pNiChangPavilionEquipItemInfo, 0); //ItemId
				Write16(pNiChangPavilionEquipItemInfo, 0); //CurrentEquipColorationPlanId

				len = pNiChangPavilionEquipItemInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //TestKartGameType
			Write32(pHeroVisbleInfo, 0); //GameTestKartID
			Write8(pHeroVisbleInfo, 0); //HasStarsFightingInfo
			for (size_t i = 0; i < n; i++)
			{ //StarsFightingInfo
				BYTE* pStarsFightingInfo = pHeroVisbleInfo;
				Write16(pStarsFightingInfo, 0); //len

				Write32(pStarsFightingInfo, 0); //Star
				Write32(pStarsFightingInfo, 0); //StarVal
				Write32(pStarsFightingInfo, 0); //StarsFightingStarLevel

				len = pStarsFightingInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //RoomBGSetting

			len = pHeroVisbleInfo - pHeroInfo;
			Set16(pHeroInfo, (WORD)len);
			pHeroInfo += len;
		}
		Write16(pHeroInfo, 0); //HeroEnterDelayTime

		len = pHeroInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //RelationHeroCount
	for (size_t i = 0; i < n; i++)
	{ //PlayerRelationInfo
		BYTE* pPlayerRelationInfo = p;
		Write16(pPlayerRelationInfo, 0); //len

		Write32(pPlayerRelationInfo, 0); //SrcUin
		Write32(pPlayerRelationInfo, 0); //RelationFlag
		Write32(pPlayerRelationInfo, 0); //RelationUin
		WriteString(pPlayerRelationInfo, 0); //RelationNickName[]
		Write32(pPlayerRelationInfo, 0); //EngageTime
		Write32(pPlayerRelationInfo, 0); //NextCanBookingTimeLimit
		Write32(pPlayerRelationInfo, 0); //BeginHoneyMoonTime
		Write32(pPlayerRelationInfo, 0); //EndHoneyMoonTime
		Write8(pPlayerRelationInfo, 0); //EngageFlag

		len = pPlayerRelationInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //KartNum
	for (size_t i = 0; i < n; i++)
	{ //KartRefitInfo
		BYTE* pKartRefitInfo = p;
		Write16(pKartRefitInfo, 0); //len

		Write32(pKartRefitInfo, 0); //Uin
		Write32(pKartRefitInfo, 0); //KartId
		Write32(pKartRefitInfo, 0); //RefitCout
		Write16(pKartRefitInfo, 0); //MaxFlags
		Write16(pKartRefitInfo, 0); //WWeight
		Write16(pKartRefitInfo, 0); //SpeedWeight
		Write16(pKartRefitInfo, 0); //JetWeight
		Write16(pKartRefitInfo, 0); //SJetWeight
		Write16(pKartRefitInfo, 0); //AccuWeight
		Write32(pKartRefitInfo, 0); //ShapeRefitCount
		Write32(pKartRefitInfo, 0); //KartHeadRefitItemID
		Write32(pKartRefitInfo, 0); //KartTailRefitItemID
		Write32(pKartRefitInfo, 0); //KartFlankRefitItemID
		Write32(pKartRefitInfo, 0); //KartTireRefitItemID
		Write32(pKartRefitInfo, 0); //SecondRefitCount
		Write16(pKartRefitInfo, 0); //Speed2Weight
		Write16(pKartRefitInfo, 0); //DriftVecWeight
		Write16(pKartRefitInfo, 0); //AdditionalZSpeedWeight
		Write16(pKartRefitInfo, 0); //AntiCollisionWeight
		Write16(pKartRefitInfo, 0); //LuckyValue
		Write16(pKartRefitInfo, 0); //RefitLuckyValueMaxWeight
		Write32(pKartRefitInfo, 0); //ShapeSuitID
		Write8(pKartRefitInfo, 0); //LegendSuitLevel
		Write32(pKartRefitInfo, 0); //LegendSuitLevelChoice
		Write32(pKartRefitInfo, 0); //ShapeLegendSuitID

		len = pKartRefitInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //HammerCount
	for (size_t i = 0; i < n; i++)
	{ //EquipedHammer
		BYTE* pEquipedHammer = p;
		Write16(pEquipedHammer, 0); //len

		Write32(pEquipedHammer, 0); //EquipedHammerID

		len = pEquipedHammer - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //StealPigCount
	for (size_t i = 0; i < n; i++)
	{ //StealPig
		BYTE* pStealPig = p;
		Write16(pStealPig, 0); //len

		Write8(pStealPig, 0); //Status
		Write8(pStealPig, 0); //PigPos
		Write32(pStealPig, 0); //ItemID
		Write8(pStealPig, 0); //PigNum

		len = pStealPig - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HaveNext
	Write8(p, 0); //HaveAppellation
	for (size_t i = 0; i < n; i++)
	{ //CurAppellation
		BYTE* pCurAppellation = p;
		Write16(pCurAppellation, 0); //len

		Write8(pCurAppellation, 0); //Type
		Write8(pCurAppellation, 0); //Level
		Write8(pCurAppellation, 0); //Status
		Write8(pCurAppellation, 0); //Difficulty
		Write32(pCurAppellation, 0); //MapId
		Write32(pCurAppellation, 0); //Value

		len = pCurAppellation - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //SuperShoeCount
	for (size_t i = 0; i < n; i++)
	{ //EquipedSuperShoe
		BYTE* pEquipedSuperShoe = p;
		Write16(pEquipedSuperShoe, 0); //len

		Write32(pEquipedSuperShoe, 0); //EquipedSuperShoeID

		len = pEquipedSuperShoe - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11019, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestLeaveGuildRoom(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT ClientStatusContex = Read32(p);

}

void ResponseLeaveGuildRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //ClientStatusContex

	len = p - buf;
	SendToClient(Client, 11012, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestKickOtherFromGuildRoom(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	U KickUin = ReadU(p);

}

void ResponseKickOtherFromGuildRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 11013, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyKickFromGuildRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //GuildID
	Write8(p, 0); //GuildNameLen
	Write32(p, 0); //KickerUin
	Write8(p, 0); //KickerNameLen
	Write16(p, 0); //KickReasonID
	Write8(p, 0); //KickReasonLen

	len = p - buf;
	SendToClient(Client, 11014, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyOtherEnterGuildRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //GuildID
	Write8(p, 0); //GuildRoomID
	Write16(p, 0); //SceneID
	Write32(p, 0); //Time
	{ //HeroInfo
		BYTE* pHeroInfo = p;
		Write16(pHeroInfo, 0); //len

		{ //HeroMoveInfo
			BYTE* pHeroMoveInfo = pHeroInfo;
			Write16(pHeroMoveInfo, 0); //len

			Write32(pHeroMoveInfo, 0); //Uin
			Write8(pHeroMoveInfo, 0); //WalkStatue
			Write32(pHeroMoveInfo, 0); //Posion[]
			Write32(pHeroMoveInfo, 0); //Ori[]
			Write32(pHeroMoveInfo, 0); //AttachUin
			Write32(pHeroMoveInfo, 0); //WalkExtState
			Write8(pHeroMoveInfo, 0); //Nums
			Write32(pHeroMoveInfo, 0); //PermitSitHorsePetUins[]
			Write32(pHeroMoveInfo, 0); //EquipedPetID
			Write32(pHeroMoveInfo, 0); //EquipedPetStatus
			Write32(pHeroMoveInfo, 0); //PetPKResultStatus
			Write16(pHeroMoveInfo, 0); //HeroMajorState
			Write16(pHeroMoveInfo, 0); //HorsePetStatus

			len = pHeroMoveInfo - pHeroInfo;
			Set16(pHeroInfo, (WORD)len);
			pHeroInfo += len;
		}
		Write32(pHeroInfo, 0); //NextPoint
		Write16(pHeroInfo, 0); //PathLen
		Write32(pHeroInfo, 0); //Path[]
		{ //HeroVisbleInfo
			BYTE* pHeroVisbleInfo = pHeroInfo;
			Write16(pHeroVisbleInfo, 0); //len

			WriteUn(pHeroVisbleInfo, 0); //Uin
			WriteUn(pHeroVisbleInfo, 0); //Identity
			Write8(pHeroVisbleInfo, 0); //SeatID
			Write8(pHeroVisbleInfo, 0); //TeamID
			Write16(pHeroVisbleInfo, 0); //PlayerID
			Write8(pHeroVisbleInfo, 0); //Status
			{ //PlayerDBBaseInfo
				BYTE* pPlayerDBBaseInfo = pHeroVisbleInfo;
				Write16(pPlayerDBBaseInfo, 0); //len

				WriteString(pPlayerDBBaseInfo, 0); //NickName[]
				Write8(pPlayerDBBaseInfo, 0); //Gender
				Write8(pPlayerDBBaseInfo, 0); //Country
				Write32(pPlayerDBBaseInfo, 0); //License
				WriteUn(pPlayerDBBaseInfo, 0); //Experience
				Write32(pPlayerDBBaseInfo, 0); //SuperMoney
				Write32(pPlayerDBBaseInfo, 0); //Money
				WriteUn(pPlayerDBBaseInfo, 0); //WinNum
				Write32(pPlayerDBBaseInfo, 0); //SecondNum
				Write32(pPlayerDBBaseInfo, 0); //ThirdNum
				WriteUn(pPlayerDBBaseInfo, 0); //TotalNum
				Write32(pPlayerDBBaseInfo, 0); //CurHonor
				Write32(pPlayerDBBaseInfo, 0); //TotalHonor
				Write32(pPlayerDBBaseInfo, 0); //TodayHonor
				Write32(pPlayerDBBaseInfo, 0); //RelaxTime
				Write32(pPlayerDBBaseInfo, 0); //MonthDurationBefore
				Write32(pPlayerDBBaseInfo, 0); //MonthDurationCur
				Write32(pPlayerDBBaseInfo, 0); //Charm
				Write32(pPlayerDBBaseInfo, 0); //DurationGame
				Write32(pPlayerDBBaseInfo, 0); //DanceExp
				Write32(pPlayerDBBaseInfo, 0); //Coupons
				Write32(pPlayerDBBaseInfo, 0); //Admiration
				Write32(pPlayerDBBaseInfo, 0); //LuckMoney
				Write32(pPlayerDBBaseInfo, 0); //TeamWorkExp
				Write32(pPlayerDBBaseInfo, 0); //AchievePoint
				Write32(pPlayerDBBaseInfo, 0); //RegTime
				WriteString(pPlayerDBBaseInfo, 0); //Signature[]
				Write32(pPlayerDBBaseInfo, 0); //LuckyMatchPoint
				Write32(pPlayerDBBaseInfo, 0); //LuckyMatchNum
				Write16(pPlayerDBBaseInfo, 0); //LuckyMatchFirstNum
				Write8(pPlayerDBBaseInfo, 0); //LuckyMatchBestRand
				Write32(pPlayerDBBaseInfo, 0); //LuckyMatchWinNum
				Write32(pPlayerDBBaseInfo, 0); //FizzPointTotal
				Write16(pPlayerDBBaseInfo, 0); //FizzPointDaily
				Write16(pPlayerDBBaseInfo, 0); //FizzPointWeekly
				Write16(pPlayerDBBaseInfo, 0); //FizzPointLastWeek
				Write8(pPlayerDBBaseInfo, 0); //FizzLotteryStatus
				Write32(pPlayerDBBaseInfo, 0); //FizzLastUpdateTime
				Write32(pPlayerDBBaseInfo, 0); //SNSLocaleCode
				Write32(pPlayerDBBaseInfo, 0); //AuctionRightUnlockTime
				Write8(pPlayerDBBaseInfo, 0); //ReserveFlag
				Write32(pPlayerDBBaseInfo, 0); //CurConsumeScore
				Write32(pPlayerDBBaseInfo, 0); //HistoryConsumeScore
				Write8(pPlayerDBBaseInfo, 0); //CrashModeSponsorID
				Write32(pPlayerDBBaseInfo, 0); //Popularity
				Write32(pPlayerDBBaseInfo, 0); //LadderMatchAchievePoint
				Write32(pPlayerDBBaseInfo, 0); //Cash
				Write32(pPlayerDBBaseInfo, 0); //PlayerGPMIdentity
				Write32(pPlayerDBBaseInfo, 0); //PointTotalScore
				WriteUn(pPlayerDBBaseInfo, 0); //totalMapMedalNum
				WriteUn(pPlayerDBBaseInfo, 0); //lastMapMedalNum
				WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalNum
				WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalSeasonId
				WriteUn(pPlayerDBBaseInfo, 0); //lastClearMapMedalTime
				WriteUn(pPlayerDBBaseInfo, 0); //max2048Score
				WriteUn(pPlayerDBBaseInfo, 0); //curPlay2048LeftNum
				Write32(pPlayerDBBaseInfo, 0); //CheerValue
				Write16(pPlayerDBBaseInfo, 0); //SeasonID
				Write32(pPlayerDBBaseInfo, 0); //LastCheerValue
				Write32(pPlayerDBBaseInfo, 0); //SpeedBean
				Write32(pPlayerDBBaseInfo, 0); //SpeedCoin

				len = pPlayerDBBaseInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			{ //PlayerGuildInfo
				BYTE* pPlayerGuildInfo = pHeroVisbleInfo;
				Write16(pPlayerGuildInfo, 0); //len

				WriteString(pPlayerGuildInfo, 0); //GuildName[]
				Write16(pPlayerGuildInfo, 0); //Duty
				Write32(pPlayerGuildInfo, 0); //GuildID
				Write32(pPlayerGuildInfo, 0); //Right
				Write32(pPlayerGuildInfo, 0); //Medal
				Write32(pPlayerGuildInfo, 0); //Contribute
				WriteString(pPlayerGuildInfo, 0); //DutyTitle[]

				len = pPlayerGuildInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write16(pHeroVisbleInfo, 0); //EquipedItemNum
			for (size_t i = 0; i < n; i++)
			{ //PlayerItemInfo
				BYTE* pPlayerItemInfo = pHeroVisbleInfo;
				Write16(pPlayerItemInfo, 0); //len

				Write32(pPlayerItemInfo, 0); //ItemID
				Write32(pPlayerItemInfo, 0); //ItemNum
				Write32(pPlayerItemInfo, 0); //AvailPeriod
				Write8(pPlayerItemInfo, 0); //Status
				WriteUn(pPlayerItemInfo, 0); //ObtainTime
				Write32(pPlayerItemInfo, 0); //OtherAttribute
				Write16(pPlayerItemInfo, 0); //ItemType

				len = pPlayerItemInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write16(pHeroVisbleInfo, 0); //PetNum
			for (size_t i = 0; i < n; i++)
			{ //PetInfo
				BYTE* pPetInfo = pHeroVisbleInfo;
				Write16(pPetInfo, 0); //len

				Write32(pPetInfo, 0); //Uin
				Write32(pPetInfo, 0); //PetId
				WriteString(pPetInfo, 0); //PetName[]
				Write8(pPetInfo, 0); //IsProper
				Write16(pPetInfo, 0); //Level
				Write8(pPetInfo, 0); //Status
				Write16(pPetInfo, 0); //PetSkillNum
				for (size_t i = 0; i < n; i++)
				{ //PetSkillList
					BYTE* pPetSkillList = pPetInfo;
					Write16(pPetSkillList, 0); //len

					Write16(pPetSkillList, 0); //SkillID
					Write8(pPetSkillList, 0); //Status
					Write8(pPetSkillList, 0); //Active
					Write32(pPetSkillList, 0); //Value

					len = pPetSkillList - pPetInfo;
					Set16(pPetInfo, (WORD)len);
					pPetInfo += len;
				}
				Write32(pPetInfo, 0); //StrengLevel
				Write8(pPetInfo, 0); //TopStatus
				{ //CommonInfo
					BYTE* pCommonInfo = pPetInfo;
					Write16(pCommonInfo, 0); //len

					Write32(pCommonInfo, 0); //HuanHuaLevel
					Write8(pCommonInfo, 0); //CanHuanHua

					len = pCommonInfo - pPetInfo;
					Set16(pPetInfo, (WORD)len);
					pPetInfo += len;
				}
				Write16(pPetInfo, 0); //PKStar
				Write32(pPetInfo, 0); //PetSkinID

				len = pPetInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			{ //PlayerGuildMatchInfo
				BYTE* pPlayerGuildMatchInfo = pHeroVisbleInfo;
				Write16(pPlayerGuildMatchInfo, 0); //len

				Write32(pPlayerGuildMatchInfo, 0); //SelfPoint
				Write32(pPlayerGuildMatchInfo, 0); //WinNum
				Write32(pPlayerGuildMatchInfo, 0); //TotalNum

				len = pPlayerGuildMatchInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //IsInTopList
			Write8(pHeroVisbleInfo, 0); //LoverRaceOrPro
			Write8(pHeroVisbleInfo, 0); //TmpEffectNum
			Write32(pHeroVisbleInfo, 0); //TmpEffectItems[]
			Write8(pHeroVisbleInfo, 0); //OBState
			Write8(pHeroVisbleInfo, 0); //DebutOrX5
			Write8(pHeroVisbleInfo, 0); //RandKeyFlag
			WriteUn(pHeroVisbleInfo, 0); //VipFlag
			Write8(pHeroVisbleInfo, 0); //HaveAppellation
			for (size_t i = 0; i < n; i++)
			{ //CurAppellation
				BYTE* pCurAppellation = pHeroVisbleInfo;
				Write16(pCurAppellation, 0); //len

				Write8(pCurAppellation, 0); //Type
				Write8(pCurAppellation, 0); //Level
				Write8(pCurAppellation, 0); //Status
				Write8(pCurAppellation, 0); //Difficulty
				Write32(pCurAppellation, 0); //MapId
				Write32(pCurAppellation, 0); //Value

				len = pCurAppellation - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			{ //NobleInfo
				BYTE* pNobleInfo = pHeroVisbleInfo;
				Write16(pNobleInfo, 0); //len

				Write32(pNobleInfo, 0); //NobleID
				Write8(pNobleInfo, 0); //NobleLevel
				Write32(pNobleInfo, 0); //NoblePoint
				Write32(pNobleInfo, 0); //NobleLeftDays

				len = pNobleInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //HasCarryWizard
			for (size_t i = 0; i < n; i++)
			{ //CarryWizardInfo
				BYTE* pCarryWizardInfo = pHeroVisbleInfo;
				Write16(pCarryWizardInfo, 0); //len

				Write16(pCarryWizardInfo, 0); //WizardID
				WriteString(pCarryWizardInfo, 0); //NickName[]
				Write16(pCarryWizardInfo, 0); //WizardType
				Write8(pCarryWizardInfo, 0); //Order
				Write8(pCarryWizardInfo, 0); //EvolutionBranch
				Write8(pCarryWizardInfo, 0); //IsHuanHua

				len = pCarryWizardInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			{ //GuildVipBaseInfo
				BYTE* pGuildVipBaseInfo = pHeroVisbleInfo;
				Write16(pGuildVipBaseInfo, 0); //len

				Write8(pGuildVipBaseInfo, 0); //GuildVipLevel
				Write32(pGuildVipBaseInfo, 0); //GuildVipPoint

				len = pGuildVipBaseInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write32(pHeroVisbleInfo, 0); //ExFlag
			Write8(pHeroVisbleInfo, 0); //HaveLDMBaseInfo
			for (size_t i = 0; i < n; i++)
			{ //PlayerLDMBaseInfo
				BYTE* pPlayerLDMBaseInfo = pHeroVisbleInfo;
				Write16(pPlayerLDMBaseInfo, 0); //len

				Write8(pPlayerLDMBaseInfo, 0); //Grade
				Write32(pPlayerLDMBaseInfo, 0); //Score
				Write32(pPlayerLDMBaseInfo, 0); //MaxScore
				Write32(pPlayerLDMBaseInfo, 0); //MaxGrade

				len = pPlayerLDMBaseInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //HasWl
			for (size_t i = 0; i < n; i++)
			{ //PlayerWlVisibleInfo
				BYTE* pPlayerWlVisibleInfo = pHeroVisbleInfo;
				Write16(pPlayerWlVisibleInfo, 0); //len

				Write32(pPlayerWlVisibleInfo, 0); //WonderLandID
				WriteString(pPlayerWlVisibleInfo, 0); //WonderLandName[]
				Write16(pPlayerWlVisibleInfo, 0); //WonderLandDuty
				Write8(pPlayerWlVisibleInfo, 0); //SubType
				Write8(pPlayerWlVisibleInfo, 0); //GuildGrade

				len = pPlayerWlVisibleInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //HasLoverVip
			for (size_t i = 0; i < n; i++)
			{ //LoverVipInfo
				BYTE* pLoverVipInfo = pHeroVisbleInfo;
				Write16(pLoverVipInfo, 0); //len

				Write8(pLoverVipInfo, 0); //LoverVipLevel
				Write32(pLoverVipInfo, 0); //LoverVipPoint
				Write8(pLoverVipInfo, 0); //GrowRate

				len = pLoverVipInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //HasBattleModeSkillInfoList
			for (size_t i = 0; i < n; i++)
			{ //BattleModeSkillInfoList
				BYTE* pBattleModeSkillInfoList = pHeroVisbleInfo;
				Write16(pBattleModeSkillInfoList, 0); //len

				Write8(pBattleModeSkillInfoList, 0); //SkillNum
				for (size_t i = 0; i < n; i++)
				{ //SkillInfo
					BYTE* pSkillInfo = pBattleModeSkillInfoList;
					Write16(pSkillInfo, 0); //len

					Write16(pSkillInfo, 0); //SkillId
					Write8(pSkillInfo, 0); //SkillLevel

					len = pSkillInfo - pBattleModeSkillInfoList;
					Set16(pBattleModeSkillInfoList, (WORD)len);
					pBattleModeSkillInfoList += len;
				}

				len = pBattleModeSkillInfoList - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //HasGarden
			for (size_t i = 0; i < n; i++)
			{ //PersonalGardenBaseInfo
				BYTE* pPersonalGardenBaseInfo = pHeroVisbleInfo;
				Write16(pPersonalGardenBaseInfo, 0); //len

				Write8(pPersonalGardenBaseInfo, 0); //GardenLevel
				Write32(pPersonalGardenBaseInfo, 0); //GardenPoint
				Write8(pPersonalGardenBaseInfo, 0); //GrowRate
				Write32(pPersonalGardenBaseInfo, 0); //GardenExpireTime
				{ //SimpleInfo
					BYTE* pSimpleInfo = pPersonalGardenBaseInfo;
					Write16(pSimpleInfo, 0); //len

					Write32(pSimpleInfo, 0); //WeekPopularity
					Write32(pSimpleInfo, 0); //TotalPopularity
					Write32(pSimpleInfo, 0); //LastUpdatePopularityTime
					Write8(pSimpleInfo, 0); //PrivateType

					len = pSimpleInfo - pPersonalGardenBaseInfo;
					Set16(pPersonalGardenBaseInfo, (WORD)len);
					pPersonalGardenBaseInfo += len;
				}

				len = pPersonalGardenBaseInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			{ //ConsumeVipInfo
				BYTE* pConsumeVipInfo = pHeroVisbleInfo;
				Write16(pConsumeVipInfo, 0); //len

				WriteUn(pConsumeVipInfo, 0); //VipLevel
				WriteUn(pConsumeVipInfo, 0); //CharmValueOfMonth
				WriteUn(pConsumeVipInfo, 0); //SearchTreasureNums
				WriteUn(pConsumeVipInfo, 0); //GetTreasureNums

				len = pConsumeVipInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //HaveBaby
			{ //LoverBabyInfo
				BYTE* pLoverBabyInfo = pHeroVisbleInfo;
				Write16(pLoverBabyInfo, 0); //len

				Write32(pLoverBabyInfo, 0); //LoverBabyID
				Write32(pLoverBabyInfo, 0); //ItemID
				Write32(pLoverBabyInfo, 0); //GrowValue
				Write32(pLoverBabyInfo, 0); //MentalValue
				Write32(pLoverBabyInfo, 0); //BabyProfileLevel
				Write32(pLoverBabyInfo, 0); //StrengthLevel
				Write32(pLoverBabyInfo, 0); //GrowLevel
				WriteString(pLoverBabyInfo, 0); //LoveBabyNickName[]
				Write16(pLoverBabyInfo, 0); //LoverBabyStat
				Write16(pLoverBabyInfo, 0); //LoverBabyEquipStat
				Write16(pLoverBabyInfo, 0); //LoverBabyTransferdStatus

				len = pLoverBabyInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			{ //EmperorInfo
				BYTE* pEmperorInfo = pHeroVisbleInfo;
				Write16(pEmperorInfo, 0); //len

				Write8(pEmperorInfo, 0); //EmperorLevel
				Write32(pEmperorInfo, 0); //EmperorPoint
				Write32(pEmperorInfo, 0); //EmperorLeftDays
				Write8(pEmperorInfo, 0); //EmperorGrowRate

				len = pEmperorInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write16(pHeroVisbleInfo, 0); //RaceCardNums
			for (size_t i = 0; i < n; i++)
			{ //RaceCardAddValueInfo
				BYTE* pRaceCardAddValueInfo = pHeroVisbleInfo;
				Write16(pRaceCardAddValueInfo, 0); //len

				Write32(pRaceCardAddValueInfo, 0); //RaceCardID
				Write32(pRaceCardAddValueInfo, 0); //AddValue

				len = pRaceCardAddValueInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			{ //GansterScoreInfo
				BYTE* pGansterScoreInfo = pHeroVisbleInfo;
				Write16(pGansterScoreInfo, 0); //len

				Write32(pGansterScoreInfo, 0); //GansterSeasonID
				Write32(pGansterScoreInfo, 0); //GansterScore
				Write32(pGansterScoreInfo, 0); //PoliceScore
				Write32(pGansterScoreInfo, 0); //TotalGansterScore

				len = pGansterScoreInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write32(pHeroVisbleInfo, 0); //OlympicId
			Write32(pHeroVisbleInfo, 0); //NPCEliminateWinTimes
			Write8(pHeroVisbleInfo, 0); //OriginTeamID
			Write8(pHeroVisbleInfo, 0); //NxNpc
			Write16(pHeroVisbleInfo, 0); //NxNpcAILevel
			{ //EquippedActiveKartInfo
				BYTE* pEquippedActiveKartInfo = pHeroVisbleInfo;
				Write16(pEquippedActiveKartInfo, 0); //len

				Write8(pEquippedActiveKartInfo, 0); //HaveActiveInfo
				Write32(pEquippedActiveKartInfo, 0); //KartID
				Write32(pEquippedActiveKartInfo, 0); //ActiveLevel

				len = pEquippedActiveKartInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //SpecialActivityStatus
			Write8(pHeroVisbleInfo, 0); //AreaID
			Write8(pHeroVisbleInfo, 0); //HaveRaiseSecondBaby
			{ //SecondLoverBabyInfo
				BYTE* pSecondLoverBabyInfo = pHeroVisbleInfo;
				Write16(pSecondLoverBabyInfo, 0); //len

				Write32(pSecondLoverBabyInfo, 0); //LoverBabyID
				Write32(pSecondLoverBabyInfo, 0); //ItemID
				Write32(pSecondLoverBabyInfo, 0); //GrowValue
				Write32(pSecondLoverBabyInfo, 0); //MentalValue
				Write32(pSecondLoverBabyInfo, 0); //BabyProfileLevel
				Write32(pSecondLoverBabyInfo, 0); //StrengthLevel
				Write32(pSecondLoverBabyInfo, 0); //GrowLevel
				WriteString(pSecondLoverBabyInfo, 0); //LoveBabyNickName[]
				Write16(pSecondLoverBabyInfo, 0); //LoverBabyStat
				Write16(pSecondLoverBabyInfo, 0); //LoverBabyEquipStat
				Write16(pSecondLoverBabyInfo, 0); //LoverBabyTransferdStatus

				len = pSecondLoverBabyInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //HasRankedMatchInfo
			for (size_t i = 0; i < n; i++)
			{ //RankedMatchGradeInfo
				BYTE* pRankedMatchGradeInfo = pHeroVisbleInfo;
				Write16(pRankedMatchGradeInfo, 0); //len

				Write32(pRankedMatchGradeInfo, 0); //GradeLevel
				Write32(pRankedMatchGradeInfo, 0); //ChildLevel
				Write32(pRankedMatchGradeInfo, 0); //GradeScore
				Write32(pRankedMatchGradeInfo, 0); //MaxGradeScore
				Write32(pRankedMatchGradeInfo, 0); //TotalScore

				len = pRankedMatchGradeInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //HasHuanLingChangeInfo
			for (size_t i = 0; i < n; i++)
			{ //HuanLingSuitInfo
				BYTE* pHuanLingSuitInfo = pHeroVisbleInfo;
				Write16(pHuanLingSuitInfo, 0); //len

				Write32(pHuanLingSuitInfo, 0); //SuitID
				Write8(pHuanLingSuitInfo, 0); //ChangeLevel

				len = pHuanLingSuitInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //EquipSealType
			Write16(pHeroVisbleInfo, 0); //Role
			Write8(pHeroVisbleInfo, 0); //SpecialActivityIDNum
			Write8(pHeroVisbleInfo, 0); //CrewID
			Write8(pHeroVisbleInfo, 0); //SpecialActivityInfoNum
			for (size_t i = 0; i < n; i++)
			{ //SpecialActivityInfo
				BYTE* pSpecialActivityInfo = pHeroVisbleInfo;
				Write16(pSpecialActivityInfo, 0); //len

				Write8(pSpecialActivityInfo, 0); //ProfessionLicenseInfoNum
				for (size_t i = 0; i < n; i++)
				{ //ProfessionLicenseInfo
					BYTE* pProfessionLicenseInfo = pSpecialActivityInfo;
					Write16(pProfessionLicenseInfo, 0); //len

					Write8(pProfessionLicenseInfo, 0); //BigLevel
					Write8(pProfessionLicenseInfo, 0); //SmallLevel

					len = pProfessionLicenseInfo - pSpecialActivityInfo;
					Set16(pSpecialActivityInfo, (WORD)len);
					pSpecialActivityInfo += len;
				}

				len = pSpecialActivityInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //ParaNum
			Write32(pHeroVisbleInfo, 0); //ParaList[]
			Write8(pHeroVisbleInfo, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemOrder
				BYTE* pItemOrder = pHeroVisbleInfo;
				Write16(pItemOrder, 0); //len

				Write32(pItemOrder, 0); //KartID
				Write32(pItemOrder, 0); //Order
				Write32(pItemOrder, 0); //BackGroundID

				len = pItemOrder - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //TDCExcluItemNum
			Write32(pHeroVisbleInfo, 0); //TDCExclusiveItemID[]
			Write8(pHeroVisbleInfo, 0); //EquipNiChangItemNum
			for (size_t i = 0; i < n; i++)
			{ //NiChangPavilionEquipItemInfo
				BYTE* pNiChangPavilionEquipItemInfo = pHeroVisbleInfo;
				Write16(pNiChangPavilionEquipItemInfo, 0); //len

				Write32(pNiChangPavilionEquipItemInfo, 0); //ItemId
				Write16(pNiChangPavilionEquipItemInfo, 0); //CurrentEquipColorationPlanId

				len = pNiChangPavilionEquipItemInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //TestKartGameType
			Write32(pHeroVisbleInfo, 0); //GameTestKartID
			Write8(pHeroVisbleInfo, 0); //HasStarsFightingInfo
			for (size_t i = 0; i < n; i++)
			{ //StarsFightingInfo
				BYTE* pStarsFightingInfo = pHeroVisbleInfo;
				Write16(pStarsFightingInfo, 0); //len

				Write32(pStarsFightingInfo, 0); //Star
				Write32(pStarsFightingInfo, 0); //StarVal
				Write32(pStarsFightingInfo, 0); //StarsFightingStarLevel

				len = pStarsFightingInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //RoomBGSetting

			len = pHeroVisbleInfo - pHeroInfo;
			Set16(pHeroInfo, (WORD)len);
			pHeroInfo += len;
		}
		Write16(pHeroInfo, 0); //HeroEnterDelayTime

		len = pHeroInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //PlayerRelationInfo
		BYTE* pPlayerRelationInfo = p;
		Write16(pPlayerRelationInfo, 0); //len

		Write32(pPlayerRelationInfo, 0); //SrcUin
		Write32(pPlayerRelationInfo, 0); //RelationFlag
		Write32(pPlayerRelationInfo, 0); //RelationUin
		WriteString(pPlayerRelationInfo, 0); //RelationNickName[]
		Write32(pPlayerRelationInfo, 0); //EngageTime
		Write32(pPlayerRelationInfo, 0); //NextCanBookingTimeLimit
		Write32(pPlayerRelationInfo, 0); //BeginHoneyMoonTime
		Write32(pPlayerRelationInfo, 0); //EndHoneyMoonTime
		Write8(pPlayerRelationInfo, 0); //EngageFlag

		len = pPlayerRelationInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //KartNum
	for (size_t i = 0; i < n; i++)
	{ //KartRefitInfo
		BYTE* pKartRefitInfo = p;
		Write16(pKartRefitInfo, 0); //len

		Write32(pKartRefitInfo, 0); //Uin
		Write32(pKartRefitInfo, 0); //KartId
		Write32(pKartRefitInfo, 0); //RefitCout
		Write16(pKartRefitInfo, 0); //MaxFlags
		Write16(pKartRefitInfo, 0); //WWeight
		Write16(pKartRefitInfo, 0); //SpeedWeight
		Write16(pKartRefitInfo, 0); //JetWeight
		Write16(pKartRefitInfo, 0); //SJetWeight
		Write16(pKartRefitInfo, 0); //AccuWeight
		Write32(pKartRefitInfo, 0); //ShapeRefitCount
		Write32(pKartRefitInfo, 0); //KartHeadRefitItemID
		Write32(pKartRefitInfo, 0); //KartTailRefitItemID
		Write32(pKartRefitInfo, 0); //KartFlankRefitItemID
		Write32(pKartRefitInfo, 0); //KartTireRefitItemID
		Write32(pKartRefitInfo, 0); //SecondRefitCount
		Write16(pKartRefitInfo, 0); //Speed2Weight
		Write16(pKartRefitInfo, 0); //DriftVecWeight
		Write16(pKartRefitInfo, 0); //AdditionalZSpeedWeight
		Write16(pKartRefitInfo, 0); //AntiCollisionWeight
		Write16(pKartRefitInfo, 0); //LuckyValue
		Write16(pKartRefitInfo, 0); //RefitLuckyValueMaxWeight
		Write32(pKartRefitInfo, 0); //ShapeSuitID
		Write8(pKartRefitInfo, 0); //LegendSuitLevel
		Write32(pKartRefitInfo, 0); //LegendSuitLevelChoice
		Write32(pKartRefitInfo, 0); //ShapeLegendSuitID

		len = pKartRefitInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //StealPig
		BYTE* pStealPig = p;
		Write16(pStealPig, 0); //len

		Write8(pStealPig, 0); //Status
		Write8(pStealPig, 0); //PigPos
		Write32(pStealPig, 0); //ItemID
		Write8(pStealPig, 0); //PigNum

		len = pStealPig - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11015, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyOtherLeavedGuildRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin

	len = p - buf;
	SendToClient(Client, 11016, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifySwitchGuildChatServer(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //GuildID

	len = p - buf;
	SendToClient(Client, 11017, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestChangeOBState(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	bool OBState = Read8(p);

}

void ResponseChangeOBState(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //OBState
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 134, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyChangeOBState(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //Uin
	Write8(p, 0); //OBState

	len = p - buf;
	SendToClient(Client, 609, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestParticipateLuckyMatch(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseParticipateLuckyMatch(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //CurPlayerNum
	Write8(p, 0); //NeedPlayerNum
	Write8(p, 0); //NewPlayerNumPerMinute
	Write8(p, 0); //NeedMapNum
	Write32(p, 0); //MapID[]
	Write32(p, 0); //MatchTimeOutTime
	Write32(p, 0); //OpenDate
	Write32(p, 0); //CloseDate
	Write16(p, 0); //OpenTimeInfoNums
	for (size_t i = 0; i < n; i++)
	{ //LuckMatchOpentTimeInfo
		BYTE* pLuckMatchOpentTimeInfo = p;
		Write16(pLuckMatchOpentTimeInfo, 0); //len

		Write32(pLuckMatchOpentTimeInfo, 0); //OpenTime
		Write32(pLuckMatchOpentTimeInfo, 0); //CloseTime

		len = pLuckMatchOpentTimeInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 400, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestCancelParticipateLuckyMatch(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseCancelParticipateLuckyMatch(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 401, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyParticipateLuckyMatchTimeOut(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 816, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestLuckyMatchBillboard(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseLuckyMatchBillboard(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //Num
	for (size_t i = 0; i < n; i++)
	{ //Info
		BYTE* pInfo = p;
		Write16(pInfo, 0); //len

		Write8(pInfo, 0); //Type
		WriteString(pInfo, 0); //Name[]
		WriteString(pInfo, 0); //MatchType[]
		WriteString(pInfo, 0); //Award[]
		WriteString(pInfo, 0); //AreaName[]

		len = pInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 402, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifySvrConfig(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteU(p, 0); //GuildScoreThreshold
	{ //LuckyMatchCfg
		BYTE* pLuckyMatchCfg = p;
		Write16(pLuckyMatchCfg, 0); //len

		WriteString(pLuckyMatchCfg, 0); //Time[]
		WriteString(pLuckyMatchCfg, 0); //Award[]
		WriteString(pLuckyMatchCfg, 0); //StartCondition[]
		WriteU(pLuckyMatchCfg, 0); //LuckyMoney
		WriteString(pLuckyMatchCfg, 0); //MatchTitle[]

		len = pLuckyMatchCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //MsgStoneSysCfg
		BYTE* pMsgStoneSysCfg = p;
		Write16(pMsgStoneSysCfg, 0); //len

		WriteU(pMsgStoneSysCfg, 0); //IsStoneSkillTakeEffect
		{ //SkillStoneCfg
			BYTE* pSkillStoneCfg = pMsgStoneSysCfg;
			Write16(pSkillStoneCfg, 0); //len

			Write32(pSkillStoneCfg, 0); //SkillStoneNum
			for (size_t i = 0; i < n; i++)
			{ //SingleSkillStoneCfg
				BYTE* pSingleSkillStoneCfg = pSkillStoneCfg;
				Write16(pSingleSkillStoneCfg, 0); //len

				Write32(pSingleSkillStoneCfg, 0); //StoneID
				Write32(pSingleSkillStoneCfg, 0); //ActiveCondVal1
				Write32(pSingleSkillStoneCfg, 0); //UseCountUpperlimit
				Write32(pSingleSkillStoneCfg, 0); //ActiveSuccessProb
				Write32(pSingleSkillStoneCfg, 0); //CoolTime
				Write32(pSingleSkillStoneCfg, 0); //GenResultVal1

				len = pSingleSkillStoneCfg - pSkillStoneCfg;
				Set16(pSkillStoneCfg, (WORD)len);
				pSkillStoneCfg += len;
			}

			len = pSkillStoneCfg - pMsgStoneSysCfg;
			Set16(pMsgStoneSysCfg, (WORD)len);
			pMsgStoneSysCfg += len;
		}
		Write32(pMsgStoneSysCfg, 0); //Kart2StoneGrooveNum
		for (size_t i = 0; i < n; i++)
		{ //Kart2StoneGrooveCfg
			BYTE* pKart2StoneGrooveCfg = pMsgStoneSysCfg;
			Write16(pKart2StoneGrooveCfg, 0); //len

			Write32(pKart2StoneGrooveCfg, 0); //KartID
			Write32(pKart2StoneGrooveCfg, 0); //InitStoneGrooveNum
			Write32(pKart2StoneGrooveCfg, 0); //StoneUseOccasionType[]

			len = pKart2StoneGrooveCfg - pMsgStoneSysCfg;
			Set16(pMsgStoneSysCfg, (WORD)len);
			pMsgStoneSysCfg += len;
		}

		len = pMsgStoneSysCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //UITitleDispInfo
		BYTE* pUITitleDispInfo = p;
		Write16(pUITitleDispInfo, 0); //len

		Write8(pUITitleDispInfo, 0); //DisplayBitMap[]
		{ //ADText
			BYTE* pADText = pUITitleDispInfo;
			Write16(pADText, 0); //len

			Write8(pADText, 0); //TextLen

			len = pADText - pUITitleDispInfo;
			Set16(pUITitleDispInfo, (WORD)len);
			pUITitleDispInfo += len;
		}

		len = pUITitleDispInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //LoaderTipInfo
		BYTE* pLoaderTipInfo = p;
		Write16(pLoaderTipInfo, 0); //len

		Write32(pLoaderTipInfo, 0); //Version
		Write8(pLoaderTipInfo, 0); //TipsNum
		for (size_t i = 0; i < n; i++)
		{ //LoaderTipText
			BYTE* pLoaderTipText = pLoaderTipInfo;
			Write16(pLoaderTipText, 0); //len

			Write8(pLoaderTipText, 0); //TextLen

			len = pLoaderTipText - pLoaderTipInfo;
			Set16(pLoaderTipInfo, (WORD)len);
			pLoaderTipInfo += len;
		}

		len = pLoaderTipInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //MailSysAD
		BYTE* pMailSysAD = p;
		Write16(pMailSysAD, 0); //len

		Write16(pMailSysAD, 0); //TextLen

		len = pMailSysAD - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //CheatReportCfg
		BYTE* pCheatReportCfg = p;
		Write16(pCheatReportCfg, 0); //len

		Write8(pCheatReportCfg, 0); //ReplayDayNum
		Write8(pCheatReportCfg, 0); //IsReportCheatEnable

		len = pCheatReportCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //MaintainableKartNum
	Write32(p, 0); //MaintainableKartID[]
	Write32(p, 0); //CommonBitSwitch
	Write8(p, 0); //QQKart2ButtonLen
	{ //GuildEnlistCfg
		BYTE* pGuildEnlistCfg = p;
		Write16(pGuildEnlistCfg, 0); //len

		Write8(pGuildEnlistCfg, 0); //MinUnloginDay
		Write8(pGuildEnlistCfg, 0); //CdDay
		Write8(pGuildEnlistCfg, 0); //MaxAwardTimeOneDay

		len = pGuildEnlistCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //CloseQT
	Write32(p, 0); //QTCommonRoomID
	Write8(p, 0); //WlFetionDayLimit
	Write8(p, 0); //ShowShopIcon
	Write32(p, 0); //TiroRecommendMapNum
	Write32(p, 0); //TiroRecommendMapIdList[]
	WriteUn(p, 0); //personalSignatureReportNumsLimit
	Write16(p, 0); //BoxMutiOpenLimit
	Write8(p, 0); //HallButtonShow
	Write8(p, 0); //HallButtonShowUrlLen
	Write32(p, 0); //EndlessModeBaseScorePerLevel
	Write32(p, 0); //GetShopNonSaleInfoInterval
	{ //ShuttleRandMap
		BYTE* pShuttleRandMap = p;
		Write16(pShuttleRandMap, 0); //len

		Write16(pShuttleRandMap, 0); //BeginNum
		for (size_t i = 0; i < n; i++)
		{ //BeginMapList
			BYTE* pBeginMapList = pShuttleRandMap;
			Write16(pBeginMapList, 0); //len

			Write32(pBeginMapList, 0); //MapID
			Write16(pBeginMapList, 0); //BeginIdx
			Write16(pBeginMapList, 0); //EndIdx
			Write8(pBeginMapList, 0); //Reverse
			Write16(pBeginMapList, 0); //BeginCheckPointIdx

			len = pBeginMapList - pShuttleRandMap;
			Set16(pShuttleRandMap, (WORD)len);
			pShuttleRandMap += len;
		}
		Write16(pShuttleRandMap, 0); //MidNum
		for (size_t i = 0; i < n; i++)
		{ //MidMapList
			BYTE* pMidMapList = pShuttleRandMap;
			Write16(pMidMapList, 0); //len

			Write32(pMidMapList, 0); //MapID
			Write16(pMidMapList, 0); //BeginIdx
			Write16(pMidMapList, 0); //EndIdx
			Write8(pMidMapList, 0); //Reverse
			Write16(pMidMapList, 0); //BeginCheckPointIdx

			len = pMidMapList - pShuttleRandMap;
			Set16(pShuttleRandMap, (WORD)len);
			pShuttleRandMap += len;
		}
		Write16(pShuttleRandMap, 0); //EndNum
		for (size_t i = 0; i < n; i++)
		{ //EndMapList
			BYTE* pEndMapList = pShuttleRandMap;
			Write16(pEndMapList, 0); //len

			Write32(pEndMapList, 0); //MapID
			Write16(pEndMapList, 0); //BeginIdx
			Write16(pEndMapList, 0); //EndIdx
			Write8(pEndMapList, 0); //Reverse
			Write16(pEndMapList, 0); //BeginCheckPointIdx

			len = pEndMapList - pShuttleRandMap;
			Set16(pShuttleRandMap, (WORD)len);
			pShuttleRandMap += len;
		}

		len = pShuttleRandMap - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasWeeklyRecommendModeClientInfo
	for (size_t i = 0; i < n; i++)
	{ //WeeklyRecommendModeClientInfo
		BYTE* pWeeklyRecommendModeClientInfo = p;
		Write16(pWeeklyRecommendModeClientInfo, 0); //len

		Write32(pWeeklyRecommendModeClientInfo, 0); //OpenDate
		Write32(pWeeklyRecommendModeClientInfo, 0); //CloseDate
		Write32(pWeeklyRecommendModeClientInfo, 0); //OpenTime
		Write32(pWeeklyRecommendModeClientInfo, 0); //CloseTime
		Write8(pWeeklyRecommendModeClientInfo, 0); //WeekLimitNum
		Write8(pWeeklyRecommendModeClientInfo, 0); //WeekLimits[]
		Write32(pWeeklyRecommendModeClientInfo, 0); //DesktopSpecialShowFlag
		Write16(pWeeklyRecommendModeClientInfo, 0); //BaseMode
		Write16(pWeeklyRecommendModeClientInfo, 0); //SubMode
		Write32(pWeeklyRecommendModeClientInfo, 0); //SpecialFlag
		Write(pWeeklyRecommendModeClientInfo, 0); //AwardTriggerDesc[]
		Write8(pWeeklyRecommendModeClientInfo, 0); //AwardNum
		Write32(pWeeklyRecommendModeClientInfo, 0); //AwardItemID[]

		len = pWeeklyRecommendModeClientInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //ReportWeeklyRecommendModeTriggerInfoInterval
	Write32(p, 0); //MaxEnergy
	Write32(p, 0); //N2ORatio
	Write32(p, 0); //PlayerNumRatio[]
	Write32(p, 0); //IsOpenBuf
	Write8(p, 0); //CouponTreasureGameButtonShow
	Write8(p, 0); //NewYearFinancingShow
	WriteUn(p, 0); //GuildTeamSignatureReportNumsLimit
	Write32(p, 0); //GetRelationItemMaxTimeout
	Write32(p, 0); //ClientWaitGameBeginTimeout

	len = p - buf;
	SendToClient(Client, 800, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestLmtEnterChatRoom(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT RoomID = Read32(p);

}

void ResponseLmtEnterChatRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen
	Write16(p, 0); //PlayerNum
	for (size_t i = 0; i < n; i++)
	{ //PlayerInfo
		BYTE* pPlayerInfo = p;
		Write16(pPlayerInfo, 0); //len

		Write32(pPlayerInfo, 0); //Uin
		WriteString(pPlayerInfo, 0); //NickName[]
		Write32(pPlayerInfo, 0); //Identify
		Write8(pPlayerInfo, 0); //Gender
		Write32(pPlayerInfo, 0); //EquipedIconID
		WriteUn(pPlayerInfo, 0); //Experience
		{ //PlayerRecord
			BYTE* pPlayerRecord = pPlayerInfo;
			Write16(pPlayerRecord, 0); //len

			Write32(pPlayerRecord, 0); //MatchNum
			Write8(pPlayerRecord, 0); //BestRank
			Write32(pPlayerRecord, 0); //ChamNum
			Write32(pPlayerRecord, 0); //WinNum

			len = pPlayerRecord - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		WriteUn(pPlayerInfo, 0); //VipFlag
		{ //NobleInfo
			BYTE* pNobleInfo = pPlayerInfo;
			Write16(pNobleInfo, 0); //len

			Write32(pNobleInfo, 0); //NobleID
			Write8(pNobleInfo, 0); //NobleLevel
			Write32(pNobleInfo, 0); //NoblePoint
			Write32(pNobleInfo, 0); //NobleLeftDays

			len = pNobleInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		{ //GuildVipBaseInfo
			BYTE* pGuildVipBaseInfo = pPlayerInfo;
			Write16(pGuildVipBaseInfo, 0); //len

			Write8(pGuildVipBaseInfo, 0); //GuildVipLevel
			Write32(pGuildVipBaseInfo, 0); //GuildVipPoint

			len = pGuildVipBaseInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		Write8(pPlayerInfo, 0); //HasLoverVip
		for (size_t i = 0; i < n; i++)
		{ //LoverVipInfo
			BYTE* pLoverVipInfo = pPlayerInfo;
			Write16(pLoverVipInfo, 0); //len

			Write8(pLoverVipInfo, 0); //LoverVipLevel
			Write32(pLoverVipInfo, 0); //LoverVipPoint
			Write8(pLoverVipInfo, 0); //GrowRate

			len = pLoverVipInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		Write8(pPlayerInfo, 0); //GardenLevel
		{ //EmperorInfo
			BYTE* pEmperorInfo = pPlayerInfo;
			Write16(pEmperorInfo, 0); //len

			Write8(pEmperorInfo, 0); //EmperorLevel
			Write32(pEmperorInfo, 0); //EmperorPoint
			Write32(pEmperorInfo, 0); //EmperorLeftDays
			Write8(pEmperorInfo, 0); //EmperorGrowRate

			len = pEmperorInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		{ //ConsumeVipInfo
			BYTE* pConsumeVipInfo = pPlayerInfo;
			Write16(pConsumeVipInfo, 0); //len

			WriteUn(pConsumeVipInfo, 0); //VipLevel
			WriteUn(pConsumeVipInfo, 0); //CharmValueOfMonth
			WriteUn(pConsumeVipInfo, 0); //SearchTreasureNums
			WriteUn(pConsumeVipInfo, 0); //GetTreasureNums

			len = pConsumeVipInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		Write32(pPlayerInfo, 0); //BeLikedNums
		Write8(pPlayerInfo, 0); //AreaID

		len = pPlayerInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 381, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestLmtUpdateStatus(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseLmtUpdateStatus(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen
	Write8(p, 0); //PlayerStatus
	Write32(p, 0); //LeftTime

	len = p - buf;
	SendToClient(Client, 382, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestLmtGetScoreInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseLmtGetScoreInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen
	{ //ScoreInfo
		BYTE* pScoreInfo = p;
		Write16(pScoreInfo, 0); //len

		Write32(pScoreInfo, 0); //Score
		Write16(pScoreInfo, 0); //Rank
		Write16(pScoreInfo, 0); //TotalPlayerNum
		Write8(pScoreInfo, 0); //RoundNum
		for (size_t i = 0; i < n; i++)
		{ //RoundResult
			BYTE* pRoundResult = pScoreInfo;
			Write16(pRoundResult, 0); //len

			Write8(pRoundResult, 0); //Result
			Write32(pRoundResult, 0); //ScoreChg

			len = pRoundResult - pScoreInfo;
			Set16(pScoreInfo, (WORD)len);
			pScoreInfo += len;
		}
		{ //PlayerRecord
			BYTE* pPlayerRecord = pScoreInfo;
			Write16(pPlayerRecord, 0); //len

			Write32(pPlayerRecord, 0); //MatchNum
			Write8(pPlayerRecord, 0); //BestRank
			Write32(pPlayerRecord, 0); //ChamNum
			Write32(pPlayerRecord, 0); //WinNum

			len = pPlayerRecord - pScoreInfo;
			Set16(pScoreInfo, (WORD)len);
			pScoreInfo += len;
		}

		len = pScoreInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 383, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestLmtGetElimInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseLmtGetElimInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen
	Write8(p, 0); //Round
	Write8(p, 0); //MatchNum
	for (size_t i = 0; i < n; i++)
	{ //MatchInfo
		BYTE* pMatchInfo = p;
		Write16(pMatchInfo, 0); //len

		Write32(pMatchInfo, 0); //PlayerUin[]
		Write8(pMatchInfo, 0); //MatchResult

		len = pMatchInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 384, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestLmtRoll(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	bool Position = Read8(p);

}

void ResponseLmtRoll(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen
	Write8(p, 0); //Position
	Write32(p, 0); //ItemID

	len = p - buf;
	SendToClient(Client, 385, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyLuckyMatchReady(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ServerID
	WriteU(p, 0); //ExtenalIP
	Write8(p, 0); //ExtTcpPortNum
	Write16(p, 0); //ExternalTcpPort[]
	Write8(p, 0); //ExtUdpPortNum
	Write16(p, 0); //ExternalUdpPort[]
	Write32(p, 0); //RoomID
	Write8(p, 0); //HasMultiIPInfo
	for (size_t i = 0; i < n; i++)
	{ //MultiIPInfo
		BYTE* pMultiIPInfo = p;
		Write16(pMultiIPInfo, 0); //len

		Write8(pMultiIPInfo, 0); //IPCount
		Write32(pMultiIPInfo, 0); //ServerIP[]
		Write8(pMultiIPInfo, 0); //DomainLen

		len = pMultiIPInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 815, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyLmtEnterRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	{ //PlayerInfo
		BYTE* pPlayerInfo = p;
		Write16(pPlayerInfo, 0); //len

		Write32(pPlayerInfo, 0); //Uin
		WriteString(pPlayerInfo, 0); //NickName[]
		Write32(pPlayerInfo, 0); //Identify
		Write8(pPlayerInfo, 0); //Gender
		Write32(pPlayerInfo, 0); //EquipedIconID
		WriteUn(pPlayerInfo, 0); //Experience
		{ //PlayerRecord
			BYTE* pPlayerRecord = pPlayerInfo;
			Write16(pPlayerRecord, 0); //len

			Write32(pPlayerRecord, 0); //MatchNum
			Write8(pPlayerRecord, 0); //BestRank
			Write32(pPlayerRecord, 0); //ChamNum
			Write32(pPlayerRecord, 0); //WinNum

			len = pPlayerRecord - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		WriteUn(pPlayerInfo, 0); //VipFlag
		{ //NobleInfo
			BYTE* pNobleInfo = pPlayerInfo;
			Write16(pNobleInfo, 0); //len

			Write32(pNobleInfo, 0); //NobleID
			Write8(pNobleInfo, 0); //NobleLevel
			Write32(pNobleInfo, 0); //NoblePoint
			Write32(pNobleInfo, 0); //NobleLeftDays

			len = pNobleInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		{ //GuildVipBaseInfo
			BYTE* pGuildVipBaseInfo = pPlayerInfo;
			Write16(pGuildVipBaseInfo, 0); //len

			Write8(pGuildVipBaseInfo, 0); //GuildVipLevel
			Write32(pGuildVipBaseInfo, 0); //GuildVipPoint

			len = pGuildVipBaseInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		Write8(pPlayerInfo, 0); //HasLoverVip
		for (size_t i = 0; i < n; i++)
		{ //LoverVipInfo
			BYTE* pLoverVipInfo = pPlayerInfo;
			Write16(pLoverVipInfo, 0); //len

			Write8(pLoverVipInfo, 0); //LoverVipLevel
			Write32(pLoverVipInfo, 0); //LoverVipPoint
			Write8(pLoverVipInfo, 0); //GrowRate

			len = pLoverVipInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		Write8(pPlayerInfo, 0); //GardenLevel
		{ //EmperorInfo
			BYTE* pEmperorInfo = pPlayerInfo;
			Write16(pEmperorInfo, 0); //len

			Write8(pEmperorInfo, 0); //EmperorLevel
			Write32(pEmperorInfo, 0); //EmperorPoint
			Write32(pEmperorInfo, 0); //EmperorLeftDays
			Write8(pEmperorInfo, 0); //EmperorGrowRate

			len = pEmperorInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		{ //ConsumeVipInfo
			BYTE* pConsumeVipInfo = pPlayerInfo;
			Write16(pConsumeVipInfo, 0); //len

			WriteUn(pConsumeVipInfo, 0); //VipLevel
			WriteUn(pConsumeVipInfo, 0); //CharmValueOfMonth
			WriteUn(pConsumeVipInfo, 0); //SearchTreasureNums
			WriteUn(pConsumeVipInfo, 0); //GetTreasureNums

			len = pConsumeVipInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		Write32(pPlayerInfo, 0); //BeLikedNums
		Write8(pPlayerInfo, 0); //AreaID

		len = pPlayerInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 801, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyLmtLeaveRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin

	len = p - buf;
	SendToClient(Client, 802, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyLmtUpdateStatus(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //PlayerStatus
	Write32(p, 0); //LeftTime

	len = p - buf;
	SendToClient(Client, 803, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyLmtOpponentInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	{ //PlayerInfo
		BYTE* pPlayerInfo = p;
		Write16(pPlayerInfo, 0); //len

		WriteUn(pPlayerInfo, 0); //Uin
		WriteUn(pPlayerInfo, 0); //Identity
		Write8(pPlayerInfo, 0); //SeatID
		Write8(pPlayerInfo, 0); //TeamID
		Write16(pPlayerInfo, 0); //PlayerID
		Write8(pPlayerInfo, 0); //Status
		{ //PlayerDBBaseInfo
			BYTE* pPlayerDBBaseInfo = pPlayerInfo;
			Write16(pPlayerDBBaseInfo, 0); //len

			WriteString(pPlayerDBBaseInfo, 0); //NickName[]
			Write8(pPlayerDBBaseInfo, 0); //Gender
			Write8(pPlayerDBBaseInfo, 0); //Country
			Write32(pPlayerDBBaseInfo, 0); //License
			WriteUn(pPlayerDBBaseInfo, 0); //Experience
			Write32(pPlayerDBBaseInfo, 0); //SuperMoney
			Write32(pPlayerDBBaseInfo, 0); //Money
			WriteUn(pPlayerDBBaseInfo, 0); //WinNum
			Write32(pPlayerDBBaseInfo, 0); //SecondNum
			Write32(pPlayerDBBaseInfo, 0); //ThirdNum
			WriteUn(pPlayerDBBaseInfo, 0); //TotalNum
			Write32(pPlayerDBBaseInfo, 0); //CurHonor
			Write32(pPlayerDBBaseInfo, 0); //TotalHonor
			Write32(pPlayerDBBaseInfo, 0); //TodayHonor
			Write32(pPlayerDBBaseInfo, 0); //RelaxTime
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationBefore
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationCur
			Write32(pPlayerDBBaseInfo, 0); //Charm
			Write32(pPlayerDBBaseInfo, 0); //DurationGame
			Write32(pPlayerDBBaseInfo, 0); //DanceExp
			Write32(pPlayerDBBaseInfo, 0); //Coupons
			Write32(pPlayerDBBaseInfo, 0); //Admiration
			Write32(pPlayerDBBaseInfo, 0); //LuckMoney
			Write32(pPlayerDBBaseInfo, 0); //TeamWorkExp
			Write32(pPlayerDBBaseInfo, 0); //AchievePoint
			Write32(pPlayerDBBaseInfo, 0); //RegTime
			WriteString(pPlayerDBBaseInfo, 0); //Signature[]
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchPoint
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchNum
			Write16(pPlayerDBBaseInfo, 0); //LuckyMatchFirstNum
			Write8(pPlayerDBBaseInfo, 0); //LuckyMatchBestRand
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchWinNum
			Write32(pPlayerDBBaseInfo, 0); //FizzPointTotal
			Write16(pPlayerDBBaseInfo, 0); //FizzPointDaily
			Write16(pPlayerDBBaseInfo, 0); //FizzPointWeekly
			Write16(pPlayerDBBaseInfo, 0); //FizzPointLastWeek
			Write8(pPlayerDBBaseInfo, 0); //FizzLotteryStatus
			Write32(pPlayerDBBaseInfo, 0); //FizzLastUpdateTime
			Write32(pPlayerDBBaseInfo, 0); //SNSLocaleCode
			Write32(pPlayerDBBaseInfo, 0); //AuctionRightUnlockTime
			Write8(pPlayerDBBaseInfo, 0); //ReserveFlag
			Write32(pPlayerDBBaseInfo, 0); //CurConsumeScore
			Write32(pPlayerDBBaseInfo, 0); //HistoryConsumeScore
			Write8(pPlayerDBBaseInfo, 0); //CrashModeSponsorID
			Write32(pPlayerDBBaseInfo, 0); //Popularity
			Write32(pPlayerDBBaseInfo, 0); //LadderMatchAchievePoint
			Write32(pPlayerDBBaseInfo, 0); //Cash
			Write32(pPlayerDBBaseInfo, 0); //PlayerGPMIdentity
			Write32(pPlayerDBBaseInfo, 0); //PointTotalScore
			WriteUn(pPlayerDBBaseInfo, 0); //totalMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //lastMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalSeasonId
			WriteUn(pPlayerDBBaseInfo, 0); //lastClearMapMedalTime
			WriteUn(pPlayerDBBaseInfo, 0); //max2048Score
			WriteUn(pPlayerDBBaseInfo, 0); //curPlay2048LeftNum
			Write32(pPlayerDBBaseInfo, 0); //CheerValue
			Write16(pPlayerDBBaseInfo, 0); //SeasonID
			Write32(pPlayerDBBaseInfo, 0); //LastCheerValue
			Write32(pPlayerDBBaseInfo, 0); //SpeedBean
			Write32(pPlayerDBBaseInfo, 0); //SpeedCoin

			len = pPlayerDBBaseInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		{ //PlayerGuildInfo
			BYTE* pPlayerGuildInfo = pPlayerInfo;
			Write16(pPlayerGuildInfo, 0); //len

			WriteString(pPlayerGuildInfo, 0); //GuildName[]
			Write16(pPlayerGuildInfo, 0); //Duty
			Write32(pPlayerGuildInfo, 0); //GuildID
			Write32(pPlayerGuildInfo, 0); //Right
			Write32(pPlayerGuildInfo, 0); //Medal
			Write32(pPlayerGuildInfo, 0); //Contribute
			WriteString(pPlayerGuildInfo, 0); //DutyTitle[]

			len = pPlayerGuildInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		Write16(pPlayerInfo, 0); //EquipedItemNum
		for (size_t i = 0; i < n; i++)
		{ //PlayerItemInfo
			BYTE* pPlayerItemInfo = pPlayerInfo;
			Write16(pPlayerItemInfo, 0); //len

			Write32(pPlayerItemInfo, 0); //ItemID
			Write32(pPlayerItemInfo, 0); //ItemNum
			Write32(pPlayerItemInfo, 0); //AvailPeriod
			Write8(pPlayerItemInfo, 0); //Status
			WriteUn(pPlayerItemInfo, 0); //ObtainTime
			Write32(pPlayerItemInfo, 0); //OtherAttribute
			Write16(pPlayerItemInfo, 0); //ItemType

			len = pPlayerItemInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		Write16(pPlayerInfo, 0); //PetNum
		for (size_t i = 0; i < n; i++)
		{ //PetInfo
			BYTE* pPetInfo = pPlayerInfo;
			Write16(pPetInfo, 0); //len

			Write32(pPetInfo, 0); //Uin
			Write32(pPetInfo, 0); //PetId
			WriteString(pPetInfo, 0); //PetName[]
			Write8(pPetInfo, 0); //IsProper
			Write16(pPetInfo, 0); //Level
			Write8(pPetInfo, 0); //Status
			Write16(pPetInfo, 0); //PetSkillNum
			for (size_t i = 0; i < n; i++)
			{ //PetSkillList
				BYTE* pPetSkillList = pPetInfo;
				Write16(pPetSkillList, 0); //len

				Write16(pPetSkillList, 0); //SkillID
				Write8(pPetSkillList, 0); //Status
				Write8(pPetSkillList, 0); //Active
				Write32(pPetSkillList, 0); //Value

				len = pPetSkillList - pPetInfo;
				Set16(pPetInfo, (WORD)len);
				pPetInfo += len;
			}
			Write32(pPetInfo, 0); //StrengLevel
			Write8(pPetInfo, 0); //TopStatus
			{ //CommonInfo
				BYTE* pCommonInfo = pPetInfo;
				Write16(pCommonInfo, 0); //len

				Write32(pCommonInfo, 0); //HuanHuaLevel
				Write8(pCommonInfo, 0); //CanHuanHua

				len = pCommonInfo - pPetInfo;
				Set16(pPetInfo, (WORD)len);
				pPetInfo += len;
			}
			Write16(pPetInfo, 0); //PKStar
			Write32(pPetInfo, 0); //PetSkinID

			len = pPetInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		{ //PlayerGuildMatchInfo
			BYTE* pPlayerGuildMatchInfo = pPlayerInfo;
			Write16(pPlayerGuildMatchInfo, 0); //len

			Write32(pPlayerGuildMatchInfo, 0); //SelfPoint
			Write32(pPlayerGuildMatchInfo, 0); //WinNum
			Write32(pPlayerGuildMatchInfo, 0); //TotalNum

			len = pPlayerGuildMatchInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		Write8(pPlayerInfo, 0); //IsInTopList
		Write8(pPlayerInfo, 0); //LoverRaceOrPro
		Write8(pPlayerInfo, 0); //TmpEffectNum
		Write32(pPlayerInfo, 0); //TmpEffectItems[]
		Write8(pPlayerInfo, 0); //OBState
		Write8(pPlayerInfo, 0); //DebutOrX5
		Write8(pPlayerInfo, 0); //RandKeyFlag
		WriteUn(pPlayerInfo, 0); //VipFlag
		Write8(pPlayerInfo, 0); //HaveAppellation
		for (size_t i = 0; i < n; i++)
		{ //CurAppellation
			BYTE* pCurAppellation = pPlayerInfo;
			Write16(pCurAppellation, 0); //len

			Write8(pCurAppellation, 0); //Type
			Write8(pCurAppellation, 0); //Level
			Write8(pCurAppellation, 0); //Status
			Write8(pCurAppellation, 0); //Difficulty
			Write32(pCurAppellation, 0); //MapId
			Write32(pCurAppellation, 0); //Value

			len = pCurAppellation - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		{ //NobleInfo
			BYTE* pNobleInfo = pPlayerInfo;
			Write16(pNobleInfo, 0); //len

			Write32(pNobleInfo, 0); //NobleID
			Write8(pNobleInfo, 0); //NobleLevel
			Write32(pNobleInfo, 0); //NoblePoint
			Write32(pNobleInfo, 0); //NobleLeftDays

			len = pNobleInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		Write8(pPlayerInfo, 0); //HasCarryWizard
		for (size_t i = 0; i < n; i++)
		{ //CarryWizardInfo
			BYTE* pCarryWizardInfo = pPlayerInfo;
			Write16(pCarryWizardInfo, 0); //len

			Write16(pCarryWizardInfo, 0); //WizardID
			WriteString(pCarryWizardInfo, 0); //NickName[]
			Write16(pCarryWizardInfo, 0); //WizardType
			Write8(pCarryWizardInfo, 0); //Order
			Write8(pCarryWizardInfo, 0); //EvolutionBranch
			Write8(pCarryWizardInfo, 0); //IsHuanHua

			len = pCarryWizardInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		{ //GuildVipBaseInfo
			BYTE* pGuildVipBaseInfo = pPlayerInfo;
			Write16(pGuildVipBaseInfo, 0); //len

			Write8(pGuildVipBaseInfo, 0); //GuildVipLevel
			Write32(pGuildVipBaseInfo, 0); //GuildVipPoint

			len = pGuildVipBaseInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		Write32(pPlayerInfo, 0); //ExFlag
		Write8(pPlayerInfo, 0); //HaveLDMBaseInfo
		for (size_t i = 0; i < n; i++)
		{ //PlayerLDMBaseInfo
			BYTE* pPlayerLDMBaseInfo = pPlayerInfo;
			Write16(pPlayerLDMBaseInfo, 0); //len

			Write8(pPlayerLDMBaseInfo, 0); //Grade
			Write32(pPlayerLDMBaseInfo, 0); //Score
			Write32(pPlayerLDMBaseInfo, 0); //MaxScore
			Write32(pPlayerLDMBaseInfo, 0); //MaxGrade

			len = pPlayerLDMBaseInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		Write8(pPlayerInfo, 0); //HasWl
		for (size_t i = 0; i < n; i++)
		{ //PlayerWlVisibleInfo
			BYTE* pPlayerWlVisibleInfo = pPlayerInfo;
			Write16(pPlayerWlVisibleInfo, 0); //len

			Write32(pPlayerWlVisibleInfo, 0); //WonderLandID
			WriteString(pPlayerWlVisibleInfo, 0); //WonderLandName[]
			Write16(pPlayerWlVisibleInfo, 0); //WonderLandDuty
			Write8(pPlayerWlVisibleInfo, 0); //SubType
			Write8(pPlayerWlVisibleInfo, 0); //GuildGrade

			len = pPlayerWlVisibleInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		Write8(pPlayerInfo, 0); //HasLoverVip
		for (size_t i = 0; i < n; i++)
		{ //LoverVipInfo
			BYTE* pLoverVipInfo = pPlayerInfo;
			Write16(pLoverVipInfo, 0); //len

			Write8(pLoverVipInfo, 0); //LoverVipLevel
			Write32(pLoverVipInfo, 0); //LoverVipPoint
			Write8(pLoverVipInfo, 0); //GrowRate

			len = pLoverVipInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		Write8(pPlayerInfo, 0); //HasBattleModeSkillInfoList
		for (size_t i = 0; i < n; i++)
		{ //BattleModeSkillInfoList
			BYTE* pBattleModeSkillInfoList = pPlayerInfo;
			Write16(pBattleModeSkillInfoList, 0); //len

			Write8(pBattleModeSkillInfoList, 0); //SkillNum
			for (size_t i = 0; i < n; i++)
			{ //SkillInfo
				BYTE* pSkillInfo = pBattleModeSkillInfoList;
				Write16(pSkillInfo, 0); //len

				Write16(pSkillInfo, 0); //SkillId
				Write8(pSkillInfo, 0); //SkillLevel

				len = pSkillInfo - pBattleModeSkillInfoList;
				Set16(pBattleModeSkillInfoList, (WORD)len);
				pBattleModeSkillInfoList += len;
			}

			len = pBattleModeSkillInfoList - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		Write8(pPlayerInfo, 0); //HasGarden
		for (size_t i = 0; i < n; i++)
		{ //PersonalGardenBaseInfo
			BYTE* pPersonalGardenBaseInfo = pPlayerInfo;
			Write16(pPersonalGardenBaseInfo, 0); //len

			Write8(pPersonalGardenBaseInfo, 0); //GardenLevel
			Write32(pPersonalGardenBaseInfo, 0); //GardenPoint
			Write8(pPersonalGardenBaseInfo, 0); //GrowRate
			Write32(pPersonalGardenBaseInfo, 0); //GardenExpireTime
			{ //SimpleInfo
				BYTE* pSimpleInfo = pPersonalGardenBaseInfo;
				Write16(pSimpleInfo, 0); //len

				Write32(pSimpleInfo, 0); //WeekPopularity
				Write32(pSimpleInfo, 0); //TotalPopularity
				Write32(pSimpleInfo, 0); //LastUpdatePopularityTime
				Write8(pSimpleInfo, 0); //PrivateType

				len = pSimpleInfo - pPersonalGardenBaseInfo;
				Set16(pPersonalGardenBaseInfo, (WORD)len);
				pPersonalGardenBaseInfo += len;
			}

			len = pPersonalGardenBaseInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		{ //ConsumeVipInfo
			BYTE* pConsumeVipInfo = pPlayerInfo;
			Write16(pConsumeVipInfo, 0); //len

			WriteUn(pConsumeVipInfo, 0); //VipLevel
			WriteUn(pConsumeVipInfo, 0); //CharmValueOfMonth
			WriteUn(pConsumeVipInfo, 0); //SearchTreasureNums
			WriteUn(pConsumeVipInfo, 0); //GetTreasureNums

			len = pConsumeVipInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		Write8(pPlayerInfo, 0); //HaveBaby
		{ //LoverBabyInfo
			BYTE* pLoverBabyInfo = pPlayerInfo;
			Write16(pLoverBabyInfo, 0); //len

			Write32(pLoverBabyInfo, 0); //LoverBabyID
			Write32(pLoverBabyInfo, 0); //ItemID
			Write32(pLoverBabyInfo, 0); //GrowValue
			Write32(pLoverBabyInfo, 0); //MentalValue
			Write32(pLoverBabyInfo, 0); //BabyProfileLevel
			Write32(pLoverBabyInfo, 0); //StrengthLevel
			Write32(pLoverBabyInfo, 0); //GrowLevel
			WriteString(pLoverBabyInfo, 0); //LoveBabyNickName[]
			Write16(pLoverBabyInfo, 0); //LoverBabyStat
			Write16(pLoverBabyInfo, 0); //LoverBabyEquipStat
			Write16(pLoverBabyInfo, 0); //LoverBabyTransferdStatus

			len = pLoverBabyInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		{ //EmperorInfo
			BYTE* pEmperorInfo = pPlayerInfo;
			Write16(pEmperorInfo, 0); //len

			Write8(pEmperorInfo, 0); //EmperorLevel
			Write32(pEmperorInfo, 0); //EmperorPoint
			Write32(pEmperorInfo, 0); //EmperorLeftDays
			Write8(pEmperorInfo, 0); //EmperorGrowRate

			len = pEmperorInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		Write16(pPlayerInfo, 0); //RaceCardNums
		for (size_t i = 0; i < n; i++)
		{ //RaceCardAddValueInfo
			BYTE* pRaceCardAddValueInfo = pPlayerInfo;
			Write16(pRaceCardAddValueInfo, 0); //len

			Write32(pRaceCardAddValueInfo, 0); //RaceCardID
			Write32(pRaceCardAddValueInfo, 0); //AddValue

			len = pRaceCardAddValueInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		{ //GansterScoreInfo
			BYTE* pGansterScoreInfo = pPlayerInfo;
			Write16(pGansterScoreInfo, 0); //len

			Write32(pGansterScoreInfo, 0); //GansterSeasonID
			Write32(pGansterScoreInfo, 0); //GansterScore
			Write32(pGansterScoreInfo, 0); //PoliceScore
			Write32(pGansterScoreInfo, 0); //TotalGansterScore

			len = pGansterScoreInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		Write32(pPlayerInfo, 0); //OlympicId
		Write32(pPlayerInfo, 0); //NPCEliminateWinTimes
		Write8(pPlayerInfo, 0); //OriginTeamID
		Write8(pPlayerInfo, 0); //NxNpc
		Write16(pPlayerInfo, 0); //NxNpcAILevel
		{ //EquippedActiveKartInfo
			BYTE* pEquippedActiveKartInfo = pPlayerInfo;
			Write16(pEquippedActiveKartInfo, 0); //len

			Write8(pEquippedActiveKartInfo, 0); //HaveActiveInfo
			Write32(pEquippedActiveKartInfo, 0); //KartID
			Write32(pEquippedActiveKartInfo, 0); //ActiveLevel

			len = pEquippedActiveKartInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		Write8(pPlayerInfo, 0); //SpecialActivityStatus
		Write8(pPlayerInfo, 0); //AreaID
		Write8(pPlayerInfo, 0); //HaveRaiseSecondBaby
		{ //SecondLoverBabyInfo
			BYTE* pSecondLoverBabyInfo = pPlayerInfo;
			Write16(pSecondLoverBabyInfo, 0); //len

			Write32(pSecondLoverBabyInfo, 0); //LoverBabyID
			Write32(pSecondLoverBabyInfo, 0); //ItemID
			Write32(pSecondLoverBabyInfo, 0); //GrowValue
			Write32(pSecondLoverBabyInfo, 0); //MentalValue
			Write32(pSecondLoverBabyInfo, 0); //BabyProfileLevel
			Write32(pSecondLoverBabyInfo, 0); //StrengthLevel
			Write32(pSecondLoverBabyInfo, 0); //GrowLevel
			WriteString(pSecondLoverBabyInfo, 0); //LoveBabyNickName[]
			Write16(pSecondLoverBabyInfo, 0); //LoverBabyStat
			Write16(pSecondLoverBabyInfo, 0); //LoverBabyEquipStat
			Write16(pSecondLoverBabyInfo, 0); //LoverBabyTransferdStatus

			len = pSecondLoverBabyInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		Write8(pPlayerInfo, 0); //HasRankedMatchInfo
		for (size_t i = 0; i < n; i++)
		{ //RankedMatchGradeInfo
			BYTE* pRankedMatchGradeInfo = pPlayerInfo;
			Write16(pRankedMatchGradeInfo, 0); //len

			Write32(pRankedMatchGradeInfo, 0); //GradeLevel
			Write32(pRankedMatchGradeInfo, 0); //ChildLevel
			Write32(pRankedMatchGradeInfo, 0); //GradeScore
			Write32(pRankedMatchGradeInfo, 0); //MaxGradeScore
			Write32(pRankedMatchGradeInfo, 0); //TotalScore

			len = pRankedMatchGradeInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		Write8(pPlayerInfo, 0); //HasHuanLingChangeInfo
		for (size_t i = 0; i < n; i++)
		{ //HuanLingSuitInfo
			BYTE* pHuanLingSuitInfo = pPlayerInfo;
			Write16(pHuanLingSuitInfo, 0); //len

			Write32(pHuanLingSuitInfo, 0); //SuitID
			Write8(pHuanLingSuitInfo, 0); //ChangeLevel

			len = pHuanLingSuitInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		Write8(pPlayerInfo, 0); //EquipSealType
		Write16(pPlayerInfo, 0); //Role
		Write8(pPlayerInfo, 0); //SpecialActivityIDNum
		Write8(pPlayerInfo, 0); //CrewID
		Write8(pPlayerInfo, 0); //SpecialActivityInfoNum
		for (size_t i = 0; i < n; i++)
		{ //SpecialActivityInfo
			BYTE* pSpecialActivityInfo = pPlayerInfo;
			Write16(pSpecialActivityInfo, 0); //len

			Write8(pSpecialActivityInfo, 0); //ProfessionLicenseInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ProfessionLicenseInfo
				BYTE* pProfessionLicenseInfo = pSpecialActivityInfo;
				Write16(pProfessionLicenseInfo, 0); //len

				Write8(pProfessionLicenseInfo, 0); //BigLevel
				Write8(pProfessionLicenseInfo, 0); //SmallLevel

				len = pProfessionLicenseInfo - pSpecialActivityInfo;
				Set16(pSpecialActivityInfo, (WORD)len);
				pSpecialActivityInfo += len;
			}

			len = pSpecialActivityInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		Write8(pPlayerInfo, 0); //ParaNum
		Write32(pPlayerInfo, 0); //ParaList[]
		Write8(pPlayerInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemOrder
			BYTE* pItemOrder = pPlayerInfo;
			Write16(pItemOrder, 0); //len

			Write32(pItemOrder, 0); //KartID
			Write32(pItemOrder, 0); //Order
			Write32(pItemOrder, 0); //BackGroundID

			len = pItemOrder - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		Write8(pPlayerInfo, 0); //TDCExcluItemNum
		Write32(pPlayerInfo, 0); //TDCExclusiveItemID[]
		Write8(pPlayerInfo, 0); //EquipNiChangItemNum
		for (size_t i = 0; i < n; i++)
		{ //NiChangPavilionEquipItemInfo
			BYTE* pNiChangPavilionEquipItemInfo = pPlayerInfo;
			Write16(pNiChangPavilionEquipItemInfo, 0); //len

			Write32(pNiChangPavilionEquipItemInfo, 0); //ItemId
			Write16(pNiChangPavilionEquipItemInfo, 0); //CurrentEquipColorationPlanId

			len = pNiChangPavilionEquipItemInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		Write8(pPlayerInfo, 0); //TestKartGameType
		Write32(pPlayerInfo, 0); //GameTestKartID
		Write8(pPlayerInfo, 0); //HasStarsFightingInfo
		for (size_t i = 0; i < n; i++)
		{ //StarsFightingInfo
			BYTE* pStarsFightingInfo = pPlayerInfo;
			Write16(pStarsFightingInfo, 0); //len

			Write32(pStarsFightingInfo, 0); //Star
			Write32(pStarsFightingInfo, 0); //StarVal
			Write32(pStarsFightingInfo, 0); //StarsFightingStarLevel

			len = pStarsFightingInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		Write8(pPlayerInfo, 0); //RoomBGSetting

		len = pPlayerInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //KartNum
	for (size_t i = 0; i < n; i++)
	{ //KartRefitInfo
		BYTE* pKartRefitInfo = p;
		Write16(pKartRefitInfo, 0); //len

		Write32(pKartRefitInfo, 0); //Uin
		Write32(pKartRefitInfo, 0); //KartId
		Write32(pKartRefitInfo, 0); //RefitCout
		Write16(pKartRefitInfo, 0); //MaxFlags
		Write16(pKartRefitInfo, 0); //WWeight
		Write16(pKartRefitInfo, 0); //SpeedWeight
		Write16(pKartRefitInfo, 0); //JetWeight
		Write16(pKartRefitInfo, 0); //SJetWeight
		Write16(pKartRefitInfo, 0); //AccuWeight
		Write32(pKartRefitInfo, 0); //ShapeRefitCount
		Write32(pKartRefitInfo, 0); //KartHeadRefitItemID
		Write32(pKartRefitInfo, 0); //KartTailRefitItemID
		Write32(pKartRefitInfo, 0); //KartFlankRefitItemID
		Write32(pKartRefitInfo, 0); //KartTireRefitItemID
		Write32(pKartRefitInfo, 0); //SecondRefitCount
		Write16(pKartRefitInfo, 0); //Speed2Weight
		Write16(pKartRefitInfo, 0); //DriftVecWeight
		Write16(pKartRefitInfo, 0); //AdditionalZSpeedWeight
		Write16(pKartRefitInfo, 0); //AntiCollisionWeight
		Write16(pKartRefitInfo, 0); //LuckyValue
		Write16(pKartRefitInfo, 0); //RefitLuckyValueMaxWeight
		Write32(pKartRefitInfo, 0); //ShapeSuitID
		Write8(pKartRefitInfo, 0); //LegendSuitLevel
		Write32(pKartRefitInfo, 0); //LegendSuitLevelChoice
		Write32(pKartRefitInfo, 0); //ShapeLegendSuitID

		len = pKartRefitInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 804, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyLmtMatchOver(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //OverReason
	Write16(p, 0); //Rank
	Write8(p, 0); //AwardItemNum
	Write32(p, 0); //AwardItem[]
	Write32(p, 0); //AwardLuckMoney
	Write32(p, 0); //AwardLuckyMatchPoint
	Write16(p, 0); //WinNum

	len = p - buf;
	SendToClient(Client, 805, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyLmtRoll(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write8(p, 0); //Position
	Write32(p, 0); //ItemID

	len = p - buf;
	SendToClient(Client, 806, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyLmtAllRollAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Award[]
	for (size_t i = 0; i < n; i++)
	{ //LmtRollResult
		BYTE* pLmtRollResult = p;
		Write16(pLmtRollResult, 0); //len

		Write32(pLmtRollResult, 0); //Uin
		Write8(pLmtRollResult, 0); //Position

		len = pLmtRollResult - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 807, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyLmtBroadCast(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	{ //BroadInfo
		BYTE* pBroadInfo = p;
		Write16(pBroadInfo, 0); //len

		Write8(pBroadInfo, 0); //Type
		WriteString(pBroadInfo, 0); //Name[]
		WriteString(pBroadInfo, 0); //MatchType[]
		WriteString(pBroadInfo, 0); //Award[]
		WriteString(pBroadInfo, 0); //AreaName[]

		len = pBroadInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 808, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyLmtGetElimInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //Round
	Write8(p, 0); //MatchNum
	for (size_t i = 0; i < n; i++)
	{ //MatchInfo
		BYTE* pMatchInfo = p;
		Write16(pMatchInfo, 0); //len

		Write32(pMatchInfo, 0); //PlayerUin[]
		Write8(pMatchInfo, 0); //MatchResult

		len = pMatchInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 809, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyLmtGetScoreInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	{ //ScoreInfo
		BYTE* pScoreInfo = p;
		Write16(pScoreInfo, 0); //len

		Write32(pScoreInfo, 0); //Score
		Write16(pScoreInfo, 0); //Rank
		Write16(pScoreInfo, 0); //TotalPlayerNum
		Write8(pScoreInfo, 0); //RoundNum
		for (size_t i = 0; i < n; i++)
		{ //RoundResult
			BYTE* pRoundResult = pScoreInfo;
			Write16(pRoundResult, 0); //len

			Write8(pRoundResult, 0); //Result
			Write32(pRoundResult, 0); //ScoreChg

			len = pRoundResult - pScoreInfo;
			Set16(pScoreInfo, (WORD)len);
			pScoreInfo += len;
		}
		{ //PlayerRecord
			BYTE* pPlayerRecord = pScoreInfo;
			Write16(pPlayerRecord, 0); //len

			Write32(pPlayerRecord, 0); //MatchNum
			Write8(pPlayerRecord, 0); //BestRank
			Write32(pPlayerRecord, 0); //ChamNum
			Write32(pPlayerRecord, 0); //WinNum

			len = pPlayerRecord - pScoreInfo;
			Set16(pScoreInfo, (WORD)len);
			pScoreInfo += len;
		}

		len = pScoreInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 810, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyLmtSummaryInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //PlayerNum
	for (size_t i = 0; i < n; i++)
	{ //SummaryInfo
		BYTE* pSummaryInfo = p;
		Write16(pSummaryInfo, 0); //len

		Write32(pSummaryInfo, 0); //Uin
		Write16(pSummaryInfo, 0); //Score
		Write8(pSummaryInfo, 0); //Rank
		Write8(pSummaryInfo, 0); //Status
		Write16(pSummaryInfo, 0); //ExtraScore

		len = pSummaryInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 811, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestLmtBuglet(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR OpType = Read8(p);

}

void ResponsetLmtBuglet(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write8(p, 0); //OpType
	Write8(p, 0); //ReasonLen
	Write8(p, 0); //State
	Write16(p, 0); //LeftTimes
	Write32(p, 0); //LuckMoney

	len = p - buf;
	SendToClient(Client, 812, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyAddOverdueItem(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //OverdueItemNum
	for (size_t i = 0; i < n; i++)
	{ //OverdueItem
		BYTE* pOverdueItem = p;
		Write16(pOverdueItem, 0); //len

		Write32(pOverdueItem, 0); //ItemID
		Write32(pOverdueItem, 0); //OverdueTime
		Write32(pOverdueItem, 0); //OtherAttr

		len = pOverdueItem - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 931, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyDelOverdueItem(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //OverdueItemNum
	Write32(p, 0); //OverdueItemID[]

	len = p - buf;
	SendToClient(Client, 932, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestDelOverdueItem(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int DelOverdueItemID = Read32(p);
	int ItemNum = Read32(p);
	int[] ItemID[] = Read32(p);

}

void ResponseDelOverdueItem(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //DelOverdueItemID
	WriteUn(p, 0); //SuccessDeleteItemNum
	Write32(p, 0); //SuccessDeleteItemID[]
	WriteUn(p, 0); //FailDeleteItemNum
	Write(p, 0); //FailDeleteItemID[]

	len = p - buf;
	SendToClient(Client, 933, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestInlaySkillStone(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	U Uin = ReadU(p);
	U Time = ReadU(p);
	int KartID = Read32(p);
	int StoneGrooveID = Read32(p);
	int SkillStoneID = Read32(p);

}

void ResponseInlaySkillStone(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteU(p, 0); //ResultID
	WriteU(p, 0); //ReasonLen
	Write32(p, 0); //KartID
	Write32(p, 0); //StoneGrooveID
	Write32(p, 0); //SkillStoneID

	len = p - buf;
	SendToClient(Client, 901, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestAddStoneGroove(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	U Uin = ReadU(p);
	U Time = ReadU(p);
	int KartID = Read32(p);
	int CarveKnifeID = Read32(p);
	int StoneGrooveType = Read32(p);

}

void ResponseAddStoneGroove(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteU(p, 0); //ResultID
	WriteU(p, 0); //ReasonLen
	Write32(p, 0); //KartID
	Write32(p, 0); //CarveKnifeID
	Write32(p, 0); //StoneGrooveType

	len = p - buf;
	SendToClient(Client, 903, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestCompositeSkillStone(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	U Uin = ReadU(p);
	U Time = ReadU(p);
	int SkillStoneID = Read32(p);
	int LuckyStoneID = Read32(p);
	int BlessStoneID = Read32(p);

}

void ResponseCompositeSkillStone(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteU(p, 0); //ResultID
	WriteU(p, 0); //ReasonLen
	Write32(p, 0); //SkillStoneID
	Write32(p, 0); //LuckyStoneID
	Write32(p, 0); //BlessStoneID
	Write32(p, 0); //DecSkillStoneNum
	Write32(p, 0); //GenStillStoneID
	Write32(p, 0); //ExperienceCompensation
	Write8(p, 0); //LeftSkillStoneNumOnFailed_ModifyType

	len = p - buf;
	SendToClient(Client, 905, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyUpdateKartSkillStoneInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteU(p, 0); //Uin
	{ //KartStoneInfo
		BYTE* pKartStoneInfo = p;
		Write16(pKartStoneInfo, 0); //len

		Write32(pKartStoneInfo, 0); //KartID
		Write32(pKartStoneInfo, 0); //StoneGrooveNum
		for (size_t i = 0; i < n; i++)
		{ //StoneGrooveInfo
			BYTE* pStoneGrooveInfo = pKartStoneInfo;
			Write16(pStoneGrooveInfo, 0); //len

			Write32(pStoneGrooveInfo, 0); //StoneUseOccaType
			Write32(pStoneGrooveInfo, 0); //SkillStoneID

			len = pStoneGrooveInfo - pKartStoneInfo;
			Set16(pKartStoneInfo, (WORD)len);
			pKartStoneInfo += len;
		}

		len = pKartStoneInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 906, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyOtherKartStoneInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //OtherStoneKartNum
	for (size_t i = 0; i < n; i++)
	{ //KartStoneGrooveInfo
		BYTE* pKartStoneGrooveInfo = p;
		Write16(pKartStoneGrooveInfo, 0); //len

		WriteU(pKartStoneGrooveInfo, 0); //Uin
		{ //KartStoneGrooveInfo
			BYTE* pKartStoneGrooveInfo = pKartStoneGrooveInfo;
			Write16(pKartStoneGrooveInfo, 0); //len

			Write32(pKartStoneGrooveInfo, 0); //KartID
			Write32(pKartStoneGrooveInfo, 0); //StoneGrooveNum
			for (size_t i = 0; i < n; i++)
			{ //StoneGrooveInfo
				BYTE* pStoneGrooveInfo = pKartStoneGrooveInfo;
				Write16(pStoneGrooveInfo, 0); //len

				Write32(pStoneGrooveInfo, 0); //StoneUseOccaType
				Write32(pStoneGrooveInfo, 0); //SkillStoneID

				len = pStoneGrooveInfo - pKartStoneGrooveInfo;
				Set16(pKartStoneGrooveInfo, (WORD)len);
				pKartStoneGrooveInfo += len;
			}

			len = pKartStoneGrooveInfo - pKartStoneGrooveInfo;
			Set16(pKartStoneGrooveInfo, (WORD)len);
			pKartStoneGrooveInfo += len;
		}

		len = pKartStoneGrooveInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 907, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyAddPropBySkillStone(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //StoneSkillType
	Write16(p, 0); //PropID
	Write32(p, 0); //PropIndex

	len = p - buf;
	SendToClient(Client, 908, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestReportSkillStoneTakeEffect(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	U Uin = ReadU(p);
	U Time = ReadU(p);
	int StoneID = Read32(p);

}

void NotifyOtherSkillStoneTakeEffect(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteU(p, 0); //Uin
	Write32(p, 0); //StoneID

	len = p - buf;
	SendToClient(Client, 910, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestReportSkillStoneTakeEffectForStatistic(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	U Uin = ReadU(p);
	U Time = ReadU(p);
	int SkillStoneID = Read32(p);
	int StoneSkillType = Read32(p);
	Un needTransfer = ReadUn(p);

}

void RequestRemoveSkillStone(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	U Uin = ReadU(p);
	U Time = ReadU(p);
	int KartID = Read32(p);
	int StoneGrooveID = Read32(p);
	int RemovalToolID = Read32(p);

}

void ResponseRemoveSkillStone(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteU(p, 0); //ResultID
	Write32(p, 0); //KartID
	Write32(p, 0); //StoneGrooveID
	Write32(p, 0); //RemovalToolID
	Write32(p, 0); //ObtainSkillStoneID

	len = p - buf;
	SendToClient(Client, 912, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestAskGuildBonus(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int TaskID = Read32(p);

}

void ResponseAskGuildBonus(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 941, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyLeaderAskGuildBonus(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //ReqUin
	WriteString(p, 0); //ReqName[]

	len = p - buf;
	SendToClient(Client, 942, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestReplyAskGuildBonus(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	char ReplyStat = Read8(p);
	UINT AskUin = Read32(p);

}

void RequestReportCheckData(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	{ //CheckData
		BYTE* pCheckData = p;
		len = Read16(pCheckData);

		int CheckPointIdx = Read32(pCheckData);
		UINT ClientCurrTime = Read32(pCheckData);
		int CurrSpeed = Read32(pCheckData);
		{ //ClientReportSelfErr
			BYTE* pClientReportSelfErr = pCheckData;
			len = Read16(pClientReportSelfErr);

			int RemoveFailedCount = Read32(pClientReportSelfErr);
			int No2CheckErrCount = Read32(pClientReportSelfErr);
			int FrictionCheckErrCount = Read32(pClientReportSelfErr);
			int GPTargetCheckErrCount = Read32(pClientReportSelfErr);
			int PowerCheckErrCount = Read32(pClientReportSelfErr);
			int StoneCheckErrCount = Read32(pClientReportSelfErr);
			int HashCheckErrCount = Read32(pClientReportSelfErr);
			int TencentCarCheckErrCount = Read32(pClientReportSelfErr);
			int UseIlleagleNo2Count = Read32(pClientReportSelfErr);
			int ListAffectGPsCheckErrCount = Read32(pClientReportSelfErr);
			int GPTargetInvalidErrCount = Read32(pClientReportSelfErr);
			int[] ErrData[] = Read32(pClientReportSelfErr);

			pCheckData += len;
		}
		{ //ClientReportSeflTag
			BYTE* pClientReportSeflTag = pCheckData;
			len = Read16(pClientReportSeflTag);

			int PowerCheckTag = Read32(pClientReportSeflTag);
			int No2CheckTag = Read32(pClientReportSeflTag);
			int TencentCarCheckTag = Read32(pClientReportSeflTag);
			int GPTargetInvalidCheckTag = Read32(pClientReportSeflTag);

			pCheckData += len;
		}

		p += len;
	}

}

void RequestSampleCheckPointData(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	UCHAR DataNum = Read8(p);
	for (size_t i = 0; i < n; i++)
	{ //Data
		BYTE* pData = p;
		len = Read16(pData);

		short LastCheckPointIdx = Read16(pData);
		short CurCheckPointIdx = Read16(pData);
		UCHAR StateDataNum = Read8(pData);
		UINT[] StateData[] = Read32(pData);
		UCHAR StateChangeDataNum = Read8(pData);
		UINT[] StateChangeData[] = Read32(pData);

		p += len;
	}

}

void RequestFizzInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseFizzInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	{ //FizzBaseInfo
		BYTE* pFizzBaseInfo = p;
		Write16(pFizzBaseInfo, 0); //len

		Write16(pFizzBaseInfo, 0); //FizzPointDaily
		Write16(pFizzBaseInfo, 0); //FizzPointWeekly
		Write32(pFizzBaseInfo, 0); //FizzPointTotal
		Write8(pFizzBaseInfo, 0); //FizzEmblem

		len = pFizzBaseInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //FizzTaskNum
	for (size_t i = 0; i < n; i++)
	{ //FizzTaskInfo
		BYTE* pFizzTaskInfo = p;
		Write16(pFizzTaskInfo, 0); //len

		Write8(pFizzTaskInfo, 0); //TaskID
		Write8(pFizzTaskInfo, 0); //Status
		Write32(pFizzTaskInfo, 0); //TotalProgress
		Write32(pFizzTaskInfo, 0); //CurrentProgress
		Write16(pFizzTaskInfo, 0); //FizzPoint
		Write8(pFizzTaskInfo, 0); //DisplayPri
		Write8(pFizzTaskInfo, 0); //SpecialFlag

		len = pFizzTaskInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //FizzLotteryNum
	for (size_t i = 0; i < n; i++)
	{ //FizzLotteryInfo
		BYTE* pFizzLotteryInfo = p;
		Write16(pFizzLotteryInfo, 0); //len

		Write8(pFizzLotteryInfo, 0); //LotteryType
		Write8(pFizzLotteryInfo, 0); //Status
		Write16(pFizzLotteryInfo, 0); //FizzPoint
		Write8(pFizzLotteryInfo, 0); //ControlledItemNum
		Write32(pFizzLotteryInfo, 0); //ControlledItem[]

		len = pFizzLotteryInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 944, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestFizzLottery(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	bool LotteryType = Read8(p);

}

void ResponseFizzLottery(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	{ //AwardMoneyExp
		BYTE* pAwardMoneyExp = p;
		Write16(pAwardMoneyExp, 0); //len

		Write32(pAwardMoneyExp, 0); //Money
		Write32(pAwardMoneyExp, 0); //SuperMoney
		Write32(pAwardMoneyExp, 0); //Exp
		Write32(pAwardMoneyExp, 0); //Charm
		Write32(pAwardMoneyExp, 0); //DanceExp
		Write32(pAwardMoneyExp, 0); //Coupons
		Write32(pAwardMoneyExp, 0); //Admiration
		Write32(pAwardMoneyExp, 0); //LuckMoney
		Write32(pAwardMoneyExp, 0); //TeamWorkExp
		Write32(pAwardMoneyExp, 0); //AchievePoint
		Write32(pAwardMoneyExp, 0); //ConsumeScore
		Write32(pAwardMoneyExp, 0); //HistoryConsumeScore
		Write32(pAwardMoneyExp, 0); //LadderMatchAchievePoint
		Write32(pAwardMoneyExp, 0); //SpeedBean
		Write32(pAwardMoneyExp, 0); //SpeedCoin

		len = pAwardMoneyExp - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //AwardItemNum
	for (size_t i = 0; i < n; i++)
	{ //AwardItemInfo
		BYTE* pAwardItemInfo = p;
		Write16(pAwardItemInfo, 0); //len

		Write32(pAwardItemInfo, 0); //ItemID
		Write32(pAwardItemInfo, 0); //ItemNum
		Write32(pAwardItemInfo, 0); //AvailPeriod
		Write8(pAwardItemInfo, 0); //Status
		WriteUn(pAwardItemInfo, 0); //ObtainTime
		Write32(pAwardItemInfo, 0); //OtherAttribute
		Write16(pAwardItemInfo, 0); //ItemType

		len = pAwardItemInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 945, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyFizzInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	{ //FizzBaseInfo
		BYTE* pFizzBaseInfo = p;
		Write16(pFizzBaseInfo, 0); //len

		Write16(pFizzBaseInfo, 0); //FizzPointDaily
		Write16(pFizzBaseInfo, 0); //FizzPointWeekly
		Write32(pFizzBaseInfo, 0); //FizzPointTotal
		Write8(pFizzBaseInfo, 0); //FizzEmblem

		len = pFizzBaseInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //FizzTaskNum
	for (size_t i = 0; i < n; i++)
	{ //FizzTaskInfo
		BYTE* pFizzTaskInfo = p;
		Write16(pFizzTaskInfo, 0); //len

		Write8(pFizzTaskInfo, 0); //TaskID
		Write8(pFizzTaskInfo, 0); //Status
		Write32(pFizzTaskInfo, 0); //TotalProgress
		Write32(pFizzTaskInfo, 0); //CurrentProgress
		Write16(pFizzTaskInfo, 0); //FizzPoint
		Write8(pFizzTaskInfo, 0); //DisplayPri
		Write8(pFizzTaskInfo, 0); //SpecialFlag

		len = pFizzTaskInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //FizzLotteryNum
	for (size_t i = 0; i < n; i++)
	{ //FizzLotteryInfo
		BYTE* pFizzLotteryInfo = p;
		Write16(pFizzLotteryInfo, 0); //len

		Write8(pFizzLotteryInfo, 0); //LotteryType
		Write8(pFizzLotteryInfo, 0); //Status
		Write16(pFizzLotteryInfo, 0); //FizzPoint
		Write8(pFizzLotteryInfo, 0); //ControlledItemNum
		Write32(pFizzLotteryInfo, 0); //ControlledItem[]

		len = pFizzLotteryInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 946, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyDeleteFizzTask(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //DelFizzTaskNum

	len = p - buf;
	SendToClient(Client, 947, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void AckMultiSynchronize(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT SvrTime = Read32(p);

}

void NotifyMultiSynchronize(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //SvrTime

	len = p - buf;
	SendToClient(Client, 1503, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetExchangeDesc(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	bool ExchangeNum = Read8(p);
	int[] ExchangeIDs[] = Read32(p);

}

void ResponseGetExchangeDesc(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //ExchangeNum
	for (size_t i = 0; i < n; i++)
	{ //Desc
		BYTE* pDesc = p;
		Write16(pDesc, 0); //len

		Write32(pDesc, 0); //ExchangeID
		Write16(pDesc, 0); //DescLen

		len = pDesc - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 936, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestReportFeedBack(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	{ //FeedBack
		BYTE* pFeedBack = p;
		len = Read16(pFeedBack);

		UINT TotalHitPoint = Read32(pFeedBack);
		UINT ComboHitPoint = Read32(pFeedBack);
		bool AssessNum = Read8(pFeedBack);
		for (size_t i = 0; i < n; i++)
		{ //Assess
			BYTE* pAssess = pFeedBack;
			len = Read16(pAssess);

			bool Type = Read8(pAssess);
			USHORT Count = Read16(pAssess);

			pFeedBack += len;
		}

		p += len;
	}

}

void NotifyFeedBackData(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	{ //FeedBack
		BYTE* pFeedBack = p;
		Write16(pFeedBack, 0); //len

		Write32(pFeedBack, 0); //Rank
		Write8(pFeedBack, 0); //Level
		{ //CurRecord
			BYTE* pCurRecord = pFeedBack;
			Write16(pCurRecord, 0); //len

			Write32(pCurRecord, 0); //MapID
			Write32(pCurRecord, 0); //FinTime
			Write32(pCurRecord, 0); //HighestSpeed
			Write32(pCurRecord, 0); //DriftCount
			Write32(pCurRecord, 0); //N2OGatherCount
			Write32(pCurRecord, 0); //CollisionCount

			len = pCurRecord - pFeedBack;
			Set16(pFeedBack, (WORD)len);
			pFeedBack += len;
		}
		{ //BestRecord
			BYTE* pBestRecord = pFeedBack;
			Write16(pBestRecord, 0); //len

			Write32(pBestRecord, 0); //MapID
			Write32(pBestRecord, 0); //FinTime
			Write32(pBestRecord, 0); //HighestSpeed
			Write32(pBestRecord, 0); //DriftCount
			Write32(pBestRecord, 0); //N2OGatherCount
			Write32(pBestRecord, 0); //CollisionCount

			len = pBestRecord - pFeedBack;
			Set16(pFeedBack, (WORD)len);
			pFeedBack += len;
		}
		Write32(pFeedBack, 0); //GameEvaluation
		Write32(pFeedBack, 0); //PlayerEvaluation
		Write32(pFeedBack, 0); //KartEvaluation
		Write32(pFeedBack, 0); //RefitTryOutIncTime
		Write8(pFeedBack, 0); //WeightNum
		Write32(pFeedBack, 0); //Uin
		Write32(pFeedBack, 0); //Rank
		Write8(pFeedBack, 0); //HaveGameLogicTask
		for (size_t i = 0; i < n; i++)
		{ //RakedMatchGamelogicTaskInfo
			BYTE* pRakedMatchGamelogicTaskInfo = pFeedBack;
			Write16(pRakedMatchGamelogicTaskInfo, 0); //len

			Write32(pRakedMatchGamelogicTaskInfo, 0); //GameLogicTaskType
			Write32(pRakedMatchGamelogicTaskInfo, 0); //TaskFinishCondValue
			Write8(pRakedMatchGamelogicTaskInfo, 0); //JudgeRule
			Write32(pRakedMatchGamelogicTaskInfo, 0); //TaskAddGradeScore
			Write8(pRakedMatchGamelogicTaskInfo, 0); //GradeScoreRangeNum
			Write32(pRakedMatchGamelogicTaskInfo, 0); //GradeScoreRange[]
			Write8(pRakedMatchGamelogicTaskInfo, 0); //TaskFinishCondValueNum
			Write32(pRakedMatchGamelogicTaskInfo, 0); //TaskFinishCondValueRange[]
			Write8(pRakedMatchGamelogicTaskInfo, 0); //TaskAddGradeScoreNum
			Write32(pRakedMatchGamelogicTaskInfo, 0); //TaskAddGradeScoreRange[]
			Write8(pRakedMatchGamelogicTaskInfo, 0); //FailedAddGradeScoreNum
			Write32(pRakedMatchGamelogicTaskInfo, 0); //FailedAddGradeScoreRange[]
			Write8(pRakedMatchGamelogicTaskInfo, 0); //FinishTask
			Write32(pRakedMatchGamelogicTaskInfo, 0); //ExtraFinishTaskAddScore

			len = pRakedMatchGamelogicTaskInfo - pFeedBack;
			Set16(pFeedBack, (WORD)len);
			pFeedBack += len;
		}

		len = pFeedBack - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //MapChallengeInfoNum
	for (size_t i = 0; i < n; i++)
	{ //MapChallengeInfo
		BYTE* pMapChallengeInfo = p;
		Write16(pMapChallengeInfo, 0); //len

		Write8(pMapChallengeInfo, 0); //StarInfoNum
		for (size_t i = 0; i < n; i++)
		{ //MapChallengeStarInfo
			BYTE* pMapChallengeStarInfo = pMapChallengeInfo;
			Write16(pMapChallengeStarInfo, 0); //len

			Write32(pMapChallengeStarInfo, 0); //Time
			Write8(pMapChallengeStarInfo, 0); //Status

			len = pMapChallengeStarInfo - pMapChallengeInfo;
			Set16(pMapChallengeInfo, (WORD)len);
			pMapChallengeInfo += len;
		}
		{ //AssessInfo
			BYTE* pAssessInfo = pMapChallengeInfo;
			Write16(pAssessInfo, 0); //len

			{ //MapChallenge_AssessInfo
				BYTE* pMapChallenge_AssessInfo = pAssessInfo;
				Write16(pMapChallenge_AssessInfo, 0); //len

				Write8(pMapChallenge_AssessInfo, 0); //Type
				Write16(pMapChallenge_AssessInfo, 0); //Count

				len = pMapChallenge_AssessInfo - pAssessInfo;
				Set16(pAssessInfo, (WORD)len);
				pAssessInfo += len;
			}
			Write8(pAssessInfo, 0); //Status
			Write16(pAssessInfo, 0); //MsgLen

			len = pAssessInfo - pMapChallengeInfo;
			Set16(pMapChallengeInfo, (WORD)len);
			pMapChallengeInfo += len;
		}
		Write32(pMapChallengeInfo, 0); //MapID

		len = pMapChallengeInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 935, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetMailHeaderList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	bool Type = Read8(p);

}

void ResponseGetMailHeaderList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //Result
	Write8(p, 0); //Type
	Write8(p, 0); //HeaderNum
	for (size_t i = 0; i < n; i++)
	{ //Headers
		BYTE* pHeaders = p;
		Write16(pHeaders, 0); //len

		{ //MailID
			BYTE* pMailID = pHeaders;
			Write16(pMailID, 0); //len

			Write8(pMailID, 0); //Data[]

			len = pMailID - pHeaders;
			Set16(pHeaders, (WORD)len);
			pHeaders += len;
		}
		WriteString(pHeaders, 0); //SenderName[]
		WriteString(pHeaders, 0); //ReceiverName[]
		Write32(pHeaders, 0); //SenderUin
		Write32(pHeaders, 0); //ReceiverUin
		WriteString(pHeaders, 0); //Title[]
		Write32(pHeaders, 0); //TimeStamp
		Write8(pHeaders, 0); //Type
		Write8(pHeaders, 0); //Flag
		Write8(pHeaders, 0); //MatchFlag

		len = pHeaders - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 406, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetMailBody(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	{ //MailID
		BYTE* pMailID = p;
		len = Read16(pMailID);

		char[] Data[] = Read8(pMailID);

		p += len;
	}

}

void ResponseGetMailBody(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //Result
	{ //MailID
		BYTE* pMailID = p;
		Write16(pMailID, 0); //len

		Write8(pMailID, 0); //Data[]

		len = pMailID - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HaveMailBody
	for (size_t i = 0; i < n; i++)
	{ //MailBody
		BYTE* pMailBody = p;
		Write16(pMailBody, 0); //len

		{ //MailID
			BYTE* pMailID = pMailBody;
			Write16(pMailID, 0); //len

			Write8(pMailID, 0); //Data[]

			len = pMailID - pMailBody;
			Set16(pMailBody, (WORD)len);
			pMailBody += len;
		}
		{ //Content
			BYTE* pContent = pMailBody;
			Write16(pContent, 0); //len

			{ //Attach
				BYTE* pAttach = pContent;
				Write16(pAttach, 0); //len

				Write8(pAttach, 0); //Type
				Write16(pAttach, 0); //Len

				len = pAttach - pContent;
				Set16(pContent, (WORD)len);
				pContent += len;
			}
			{ //Text
				BYTE* pText = pContent;
				Write16(pText, 0); //len

				Write16(pText, 0); //Len

				len = pText - pContent;
				Set16(pContent, (WORD)len);
				pContent += len;
			}

			len = pContent - pMailBody;
			Set16(pMailBody, (WORD)len);
			pMailBody += len;
		}

		len = pMailBody - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 407, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetMailAttach(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	{ //MailID
		BYTE* pMailID = p;
		len = Read16(pMailID);

		char[] Data[] = Read8(pMailID);

		p += len;
	}

}

void ResponseGetMailAttach(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //Result
	{ //MailID
		BYTE* pMailID = p;
		Write16(pMailID, 0); //len

		Write8(pMailID, 0); //Data[]

		len = pMailID - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 408, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestSendMail(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	bool Type = Read8(p);
	UINT ReceiverUin = Read32(p);
	char[] ReceiverName[] = ReadString(p);
	char[] Title[] = ReadString(p);
	USHORT TextLen = Read16(p);
	bool IsInvalid = Read8(p);

}

void ResponseSendMail(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //Result
	Write8(p, 0); //IsReturnHeader
	for (size_t i = 0; i < n; i++)
	{ //Header
		BYTE* pHeader = p;
		Write16(pHeader, 0); //len

		{ //MailID
			BYTE* pMailID = pHeader;
			Write16(pMailID, 0); //len

			Write8(pMailID, 0); //Data[]

			len = pMailID - pHeader;
			Set16(pHeader, (WORD)len);
			pHeader += len;
		}
		WriteString(pHeader, 0); //SenderName[]
		WriteString(pHeader, 0); //ReceiverName[]
		Write32(pHeader, 0); //SenderUin
		Write32(pHeader, 0); //ReceiverUin
		WriteString(pHeader, 0); //Title[]
		Write32(pHeader, 0); //TimeStamp
		Write8(pHeader, 0); //Type
		Write8(pHeader, 0); //Flag
		Write8(pHeader, 0); //MatchFlag

		len = pHeader - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //CoolTime
	Write16(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 409, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestModifyMailFlag(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	{ //MailID
		BYTE* pMailID = p;
		len = Read16(pMailID);

		char[] Data[] = Read8(pMailID);

		p += len;
	}
	bool NewFlag = Read8(p);

}

void ResponseModifyMailFlag(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //Result
	{ //MailID
		BYTE* pMailID = p;
		Write16(pMailID, 0); //len

		Write8(pMailID, 0); //Data[]

		len = pMailID - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //NewFlag

	len = p - buf;
	SendToClient(Client, 410, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestDeleteMail(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	{ //MailID
		BYTE* pMailID = p;
		len = Read16(pMailID);

		char[] Data[] = Read8(pMailID);

		p += len;
	}

}

void ResponseDeleteMail(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //Result
	{ //MailID
		BYTE* pMailID = p;
		Write16(pMailID, 0); //len

		Write8(pMailID, 0); //Data[]

		len = pMailID - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 411, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyNewMailHeader(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //HaveMailHeader
	for (size_t i = 0; i < n; i++)
	{ //MailHeader
		BYTE* pMailHeader = p;
		Write16(pMailHeader, 0); //len

		{ //MailID
			BYTE* pMailID = pMailHeader;
			Write16(pMailID, 0); //len

			Write8(pMailID, 0); //Data[]

			len = pMailID - pMailHeader;
			Set16(pMailHeader, (WORD)len);
			pMailHeader += len;
		}
		WriteString(pMailHeader, 0); //SenderName[]
		WriteString(pMailHeader, 0); //ReceiverName[]
		Write32(pMailHeader, 0); //SenderUin
		Write32(pMailHeader, 0); //ReceiverUin
		WriteString(pMailHeader, 0); //Title[]
		Write32(pMailHeader, 0); //TimeStamp
		Write8(pMailHeader, 0); //Type
		Write8(pMailHeader, 0); //Flag
		Write8(pMailHeader, 0); //MatchFlag

		len = pMailHeader - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //IsMailBoxFull
	Write8(p, 0); //HaveNewMail
	Write8(p, 0); //HaveNewAnonymMail
	Write8(p, 0); //IsRecvAnonymMailFull
	Write8(p, 0); //IsSentAnonymMailFull
	Write8(p, 0); //HasDialog
	for (size_t i = 0; i < n; i++)
	{ //Dialog
		BYTE* pDialog = p;
		Write16(pDialog, 0); //len

		Write8(pDialog, 0); //PlayerIdx
		Write16(pDialog, 0); //Len
		Write32(pDialog, 0); //Time

		len = pDialog - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 412, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyMailSomeFlag(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //SomeFlag
	Write16(p, 0); //CanSendAnonymMailNum
	Write16(p, 0); //CanRecvAnonymMailNum
	Write32(p, 0); //EquipedIconID
	Write16(p, 0); //SpecialFlag

	len = p - buf;
	SendToClient(Client, 413, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestChangeMailSomeFlag(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT SomeFlag = Read16(p);
	USHORT SpecialFlag = Read16(p);

}

void ResponseChangeMailSomeFlag(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //Result
	Write16(p, 0); //SomeFlag
	Write16(p, 0); //SpecialFlag

	len = p - buf;
	SendToClient(Client, 414, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetAnonymMail(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetAnonymMail(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //HasHeader
	for (size_t i = 0; i < n; i++)
	{ //MailHeader
		BYTE* pMailHeader = p;
		Write16(pMailHeader, 0); //len

		{ //MailID
			BYTE* pMailID = pMailHeader;
			Write16(pMailID, 0); //len

			Write8(pMailID, 0); //Data[]

			len = pMailID - pMailHeader;
			Set16(pMailHeader, (WORD)len);
			pMailHeader += len;
		}
		WriteString(pMailHeader, 0); //SenderName[]
		WriteString(pMailHeader, 0); //ReceiverName[]
		Write32(pMailHeader, 0); //SenderUin
		Write32(pMailHeader, 0); //ReceiverUin
		WriteString(pMailHeader, 0); //Title[]
		Write32(pMailHeader, 0); //TimeStamp
		Write8(pMailHeader, 0); //Type
		Write8(pMailHeader, 0); //Flag
		Write8(pMailHeader, 0); //MatchFlag

		len = pMailHeader - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //AwardItemNum
	for (size_t i = 0; i < n; i++)
	{ //AwardItem
		BYTE* pAwardItem = p;
		Write16(pAwardItem, 0); //len

		Write32(pAwardItem, 0); //ItemID
		Write32(pAwardItem, 0); //ItemNum
		Write32(pAwardItem, 0); //AvailPeriod
		Write8(pAwardItem, 0); //Status
		WriteUn(pAwardItem, 0); //ObtainTime
		Write32(pAwardItem, 0); //OtherAttribute
		Write16(pAwardItem, 0); //ItemType

		len = pAwardItem - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 426, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestReplyAnonymMail(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	{ //MailID
		BYTE* pMailID = p;
		len = Read16(pMailID);

		char[] Data[] = Read8(pMailID);

		p += len;
	}
	{ //MailDialog
		BYTE* pMailDialog = p;
		len = Read16(pMailDialog);

		bool PlayerIdx = Read8(pMailDialog);
		USHORT Len = Read16(pMailDialog);
		UINT Time = Read32(pMailDialog);

		p += len;
	}

}

void ResponseReplyAnonymMail(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //HasHeader
	for (size_t i = 0; i < n; i++)
	{ //MailHeader
		BYTE* pMailHeader = p;
		Write16(pMailHeader, 0); //len

		{ //MailID
			BYTE* pMailID = pMailHeader;
			Write16(pMailID, 0); //len

			Write8(pMailID, 0); //Data[]

			len = pMailID - pMailHeader;
			Set16(pMailHeader, (WORD)len);
			pMailHeader += len;
		}
		WriteString(pMailHeader, 0); //SenderName[]
		WriteString(pMailHeader, 0); //ReceiverName[]
		Write32(pMailHeader, 0); //SenderUin
		Write32(pMailHeader, 0); //ReceiverUin
		WriteString(pMailHeader, 0); //Title[]
		Write32(pMailHeader, 0); //TimeStamp
		Write8(pMailHeader, 0); //Type
		Write8(pMailHeader, 0); //Flag
		Write8(pMailHeader, 0); //MatchFlag

		len = pMailHeader - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasDialog
	for (size_t i = 0; i < n; i++)
	{ //MailDialog
		BYTE* pMailDialog = p;
		Write16(pMailDialog, 0); //len

		Write8(pMailDialog, 0); //PlayerIdx
		Write16(pMailDialog, 0); //Len
		Write32(pMailDialog, 0); //Time

		len = pMailDialog - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 427, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestRecycleAnonymMail(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	{ //MailID
		BYTE* pMailID = p;
		len = Read16(pMailID);

		char[] Data[] = Read8(pMailID);

		p += len;
	}

}

void ResponseRecycleAnonymMail(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	{ //MailID
		BYTE* pMailID = p;
		Write16(pMailID, 0); //len

		Write8(pMailID, 0); //Data[]

		len = pMailID - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 428, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGuildWelfareInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT GuildID = Read32(p);

}

void ResponseGuildWelfareInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //GuildID
	{ //GuildWelfare
		BYTE* pGuildWelfare = p;
		Write16(pGuildWelfare, 0); //len

		Write16(pGuildWelfare, 0); //ExpAdd
		Write16(pGuildWelfare, 0); //LuckMoneyAdd
		Write16(pGuildWelfare, 0); //WagesAdd
		Write16(pGuildWelfare, 0); //MinMemHaveExpAdd
		Write16(pGuildWelfare, 0); //MinMemHaveLuckMoneyAdd
		Write16(pGuildWelfare, 0); //MinMemHaveWagesAdd
		Write32(pGuildWelfare, 0); //GetGuildWardMinProsperity
		Write8(pGuildWelfare, 0); //IsJoinGuildToday
		{ //AwardMoneyExp
			BYTE* pAwardMoneyExp = pGuildWelfare;
			Write16(pAwardMoneyExp, 0); //len

			Write32(pAwardMoneyExp, 0); //Money
			Write32(pAwardMoneyExp, 0); //SuperMoney
			Write32(pAwardMoneyExp, 0); //Exp
			Write32(pAwardMoneyExp, 0); //Charm
			Write32(pAwardMoneyExp, 0); //DanceExp
			Write32(pAwardMoneyExp, 0); //Coupons
			Write32(pAwardMoneyExp, 0); //Admiration
			Write32(pAwardMoneyExp, 0); //LuckMoney
			Write32(pAwardMoneyExp, 0); //TeamWorkExp
			Write32(pAwardMoneyExp, 0); //AchievePoint
			Write32(pAwardMoneyExp, 0); //ConsumeScore
			Write32(pAwardMoneyExp, 0); //HistoryConsumeScore
			Write32(pAwardMoneyExp, 0); //LadderMatchAchievePoint
			Write32(pAwardMoneyExp, 0); //SpeedBean
			Write32(pAwardMoneyExp, 0); //SpeedCoin

			len = pAwardMoneyExp - pGuildWelfare;
			Set16(pGuildWelfare, (WORD)len);
			pGuildWelfare += len;
		}
		Write8(pGuildWelfare, 0); //AwardItemNum
		for (size_t i = 0; i < n; i++)
		{ //AwardItemInfo
			BYTE* pAwardItemInfo = pGuildWelfare;
			Write16(pAwardItemInfo, 0); //len

			Write32(pAwardItemInfo, 0); //ItemID
			Write32(pAwardItemInfo, 0); //ItemNum
			Write32(pAwardItemInfo, 0); //AvailPeriod
			Write8(pAwardItemInfo, 0); //Status
			WriteUn(pAwardItemInfo, 0); //ObtainTime
			Write32(pAwardItemInfo, 0); //OtherAttribute
			Write16(pAwardItemInfo, 0); //ItemType

			len = pAwardItemInfo - pGuildWelfare;
			Set16(pGuildWelfare, (WORD)len);
			pGuildWelfare += len;
		}
		Write32(pGuildWelfare, 0); //NextAwardProsperity
		{ //NextAwardMoneyExp
			BYTE* pNextAwardMoneyExp = pGuildWelfare;
			Write16(pNextAwardMoneyExp, 0); //len

			Write32(pNextAwardMoneyExp, 0); //Money
			Write32(pNextAwardMoneyExp, 0); //SuperMoney
			Write32(pNextAwardMoneyExp, 0); //Exp
			Write32(pNextAwardMoneyExp, 0); //Charm
			Write32(pNextAwardMoneyExp, 0); //DanceExp
			Write32(pNextAwardMoneyExp, 0); //Coupons
			Write32(pNextAwardMoneyExp, 0); //Admiration
			Write32(pNextAwardMoneyExp, 0); //LuckMoney
			Write32(pNextAwardMoneyExp, 0); //TeamWorkExp
			Write32(pNextAwardMoneyExp, 0); //AchievePoint
			Write32(pNextAwardMoneyExp, 0); //ConsumeScore
			Write32(pNextAwardMoneyExp, 0); //HistoryConsumeScore
			Write32(pNextAwardMoneyExp, 0); //LadderMatchAchievePoint
			Write32(pNextAwardMoneyExp, 0); //SpeedBean
			Write32(pNextAwardMoneyExp, 0); //SpeedCoin

			len = pNextAwardMoneyExp - pGuildWelfare;
			Set16(pGuildWelfare, (WORD)len);
			pGuildWelfare += len;
		}
		Write8(pGuildWelfare, 0); //NextAwardItemNum
		for (size_t i = 0; i < n; i++)
		{ //NextAwardItemInfo
			BYTE* pNextAwardItemInfo = pGuildWelfare;
			Write16(pNextAwardItemInfo, 0); //len

			Write32(pNextAwardItemInfo, 0); //ItemID
			Write32(pNextAwardItemInfo, 0); //ItemNum
			Write32(pNextAwardItemInfo, 0); //AvailPeriod
			Write8(pNextAwardItemInfo, 0); //Status
			WriteUn(pNextAwardItemInfo, 0); //ObtainTime
			Write32(pNextAwardItemInfo, 0); //OtherAttribute
			Write16(pNextAwardItemInfo, 0); //ItemType

			len = pNextAwardItemInfo - pGuildWelfare;
			Set16(pGuildWelfare, (WORD)len);
			pGuildWelfare += len;
		}
		Write8(pGuildWelfare, 0); //WageAddTips

		len = pGuildWelfare - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 15022, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGuildListOtherInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT GuildCount = Read32(p);
	[] GuildID[] = Read(p);

}

void ResponseGuildListOtherInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //GuildCount
	for (size_t i = 0; i < n; i++)
	{ //GuildListOtherInfo
		BYTE* pGuildListOtherInfo = p;
		Write16(pGuildListOtherInfo, 0); //len

		Write32(pGuildListOtherInfo, 0); //GuidID
		Write32(pGuildListOtherInfo, 0); //Prosperity
		Write16(pGuildListOtherInfo, 0); //Level
		Write16(pGuildListOtherInfo, 0); //MaxMember
		Write16(pGuildListOtherInfo, 0); //Attribute
		{ //GuildEnlistCond
			BYTE* pGuildEnlistCond = pGuildListOtherInfo;
			Write16(pGuildEnlistCond, 0); //len

			Write32(pGuildEnlistCond, 0); //ProsperityCondition
			Write32(pGuildEnlistCond, 0); //JoinTotalCondition
			Write32(pGuildEnlistCond, 0); //HonorCondition
			Write32(pGuildEnlistCond, 0); //CharmCondition
			Write32(pGuildEnlistCond, 0); //DanceExpCondition
			Write32(pGuildEnlistCond, 0); //SkillPointCondition
			Write32(pGuildEnlistCond, 0); //ExpLevelCondition
			Write32(pGuildEnlistCond, 0); //ApplyExpLevelCondition
			Write8(pGuildEnlistCond, 0); //EnlistType

			len = pGuildEnlistCond - pGuildListOtherInfo;
			Set16(pGuildListOtherInfo, (WORD)len);
			pGuildListOtherInfo += len;
		}
		Write8(pGuildListOtherInfo, 0); //SubType
		{ //CardOtherInfo
			BYTE* pCardOtherInfo = pGuildListOtherInfo;
			Write16(pCardOtherInfo, 0); //len

			Write32(pCardOtherInfo, 0); //MainZone1
			Write32(pCardOtherInfo, 0); //MainZone2
			Write32(pCardOtherInfo, 0); //MainMode1
			Write32(pCardOtherInfo, 0); //MainMode2
			Write32(pCardOtherInfo, 0); //OtherInterest1
			Write32(pCardOtherInfo, 0); //OtherInterest2

			len = pCardOtherInfo - pGuildListOtherInfo;
			Set16(pGuildListOtherInfo, (WORD)len);
			pGuildListOtherInfo += len;
		}
		Write16(pGuildListOtherInfo, 0); //DescLen
		Write32(pGuildListOtherInfo, 0); //WeekProsper
		Write32(pGuildListOtherInfo, 0); //GuildQQGroup

		len = pGuildListOtherInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 15021, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestDayProsperityAward(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT GuildID = Read32(p);

}

void ResponseDayProsperityAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //GuildID
	{ //AwardMoneyExp
		BYTE* pAwardMoneyExp = p;
		Write16(pAwardMoneyExp, 0); //len

		Write32(pAwardMoneyExp, 0); //Money
		Write32(pAwardMoneyExp, 0); //SuperMoney
		Write32(pAwardMoneyExp, 0); //Exp
		Write32(pAwardMoneyExp, 0); //Charm
		Write32(pAwardMoneyExp, 0); //DanceExp
		Write32(pAwardMoneyExp, 0); //Coupons
		Write32(pAwardMoneyExp, 0); //Admiration
		Write32(pAwardMoneyExp, 0); //LuckMoney
		Write32(pAwardMoneyExp, 0); //TeamWorkExp
		Write32(pAwardMoneyExp, 0); //AchievePoint
		Write32(pAwardMoneyExp, 0); //ConsumeScore
		Write32(pAwardMoneyExp, 0); //HistoryConsumeScore
		Write32(pAwardMoneyExp, 0); //LadderMatchAchievePoint
		Write32(pAwardMoneyExp, 0); //SpeedBean
		Write32(pAwardMoneyExp, 0); //SpeedCoin

		len = pAwardMoneyExp - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //AwardItemNum
	for (size_t i = 0; i < n; i++)
	{ //AwardItemInfo
		BYTE* pAwardItemInfo = p;
		Write16(pAwardItemInfo, 0); //len

		Write32(pAwardItemInfo, 0); //ItemID
		Write32(pAwardItemInfo, 0); //ItemNum
		Write32(pAwardItemInfo, 0); //AvailPeriod
		Write8(pAwardItemInfo, 0); //Status
		WriteUn(pAwardItemInfo, 0); //ObtainTime
		Write32(pAwardItemInfo, 0); //OtherAttribute
		Write16(pAwardItemInfo, 0); //ItemType

		len = pAwardItemInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 15023, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyLastProsperityAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //GuildID
	{ //AwardMoneyExp
		BYTE* pAwardMoneyExp = p;
		Write16(pAwardMoneyExp, 0); //len

		Write32(pAwardMoneyExp, 0); //Money
		Write32(pAwardMoneyExp, 0); //SuperMoney
		Write32(pAwardMoneyExp, 0); //Exp
		Write32(pAwardMoneyExp, 0); //Charm
		Write32(pAwardMoneyExp, 0); //DanceExp
		Write32(pAwardMoneyExp, 0); //Coupons
		Write32(pAwardMoneyExp, 0); //Admiration
		Write32(pAwardMoneyExp, 0); //LuckMoney
		Write32(pAwardMoneyExp, 0); //TeamWorkExp
		Write32(pAwardMoneyExp, 0); //AchievePoint
		Write32(pAwardMoneyExp, 0); //ConsumeScore
		Write32(pAwardMoneyExp, 0); //HistoryConsumeScore
		Write32(pAwardMoneyExp, 0); //LadderMatchAchievePoint
		Write32(pAwardMoneyExp, 0); //SpeedBean
		Write32(pAwardMoneyExp, 0); //SpeedCoin

		len = pAwardMoneyExp - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //AwardItemNum
	for (size_t i = 0; i < n; i++)
	{ //AwardItemInfo
		BYTE* pAwardItemInfo = p;
		Write16(pAwardItemInfo, 0); //len

		Write32(pAwardItemInfo, 0); //ItemID
		Write32(pAwardItemInfo, 0); //ItemNum
		Write32(pAwardItemInfo, 0); //AvailPeriod
		Write8(pAwardItemInfo, 0); //Status
		WriteUn(pAwardItemInfo, 0); //ObtainTime
		Write32(pAwardItemInfo, 0); //OtherAttribute
		Write16(pAwardItemInfo, 0); //ItemType

		len = pAwardItemInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 15224, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestEltQQOnlineFriends(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);

}

void ResponseEltQQOnlineFriends(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen
	Write16(p, 0); //EnlistQQFriendNum
	for (size_t i = 0; i < n; i++)
	{ //EnlistQQFriends
		BYTE* pEnlistQQFriends = p;
		Write16(pEnlistQQFriends, 0); //len

		Write8(pEnlistQQFriends, 0); //EnlistFlag
		Write8(pEnlistQQFriends, 0); //IsEnlistToday
		{ //QQBaseInfo
			BYTE* pQQBaseInfo = pEnlistQQFriends;
			Write16(pQQBaseInfo, 0); //len

			WriteUn(pQQBaseInfo, 0); //Uin
			Write8(pQQBaseInfo, 0); //QQNickNameLen
			Write8(pQQBaseInfo, 0); //QQGender
			Write8(pQQBaseInfo, 0); //IsQQOnline
			Write8(pQQBaseInfo, 0); //GroupID

			len = pQQBaseInfo - pEnlistQQFriends;
			Set16(pEnlistQQFriends, (WORD)len);
			pEnlistQQFriends += len;
		}
		Write32(pEnlistQQFriends, 0); //GameLevel
		WriteUn(pEnlistQQFriends, 0); //UnLoginTime
		Write8(pEnlistQQFriends, 0); //IsOnline

		len = pEnlistQQFriends - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //QQGroupNum
	for (size_t i = 0; i < n; i++)
	{ //QQGroup
		BYTE* pQQGroup = p;
		Write16(pQQGroup, 0); //len

		Write8(pQQGroup, 0); //GroupID
		WriteString(pQQGroup, 0); //GroupName[]

		len = pQQGroup - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 10900, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyClientEnlistGuid(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //Time

	len = p - buf;
	SendToClient(Client, 10913, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestEltEnlist(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	{ //EnlistFriend
		BYTE* pEnlistFriend = p;
		len = Read16(pEnlistFriend);

		Un Uin = ReadUn(pEnlistFriend);
		char QQNickNameLen = Read8(pEnlistFriend);
		char QQGender = Read8(pEnlistFriend);
		char IsQQOnline = Read8(pEnlistFriend);
		char GroupID = Read8(pEnlistFriend);

		p += len;
	}
	char EnlistFlag = Read8(p);

}

void ResponseEltEnlist(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen
	WriteUn(p, 0); //EnlistUin

	len = p - buf;
	SendToClient(Client, 10901, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestEltEnlistAward(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);

}

void ResponseEltEnlistAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //AwardNum
	for (size_t i = 0; i < n; i++)
	{ //EnlistQQFriends
		BYTE* pEnlistQQFriends = p;
		Write16(pEnlistQQFriends, 0); //len

		WriteUn(pEnlistQQFriends, 0); //EnlistUin
		{ //AwardMoneyExp
			BYTE* pAwardMoneyExp = pEnlistQQFriends;
			Write16(pAwardMoneyExp, 0); //len

			Write32(pAwardMoneyExp, 0); //Money
			Write32(pAwardMoneyExp, 0); //SuperMoney
			Write32(pAwardMoneyExp, 0); //Exp
			Write32(pAwardMoneyExp, 0); //Charm
			Write32(pAwardMoneyExp, 0); //DanceExp
			Write32(pAwardMoneyExp, 0); //Coupons
			Write32(pAwardMoneyExp, 0); //Admiration
			Write32(pAwardMoneyExp, 0); //LuckMoney
			Write32(pAwardMoneyExp, 0); //TeamWorkExp
			Write32(pAwardMoneyExp, 0); //AchievePoint
			Write32(pAwardMoneyExp, 0); //ConsumeScore
			Write32(pAwardMoneyExp, 0); //HistoryConsumeScore
			Write32(pAwardMoneyExp, 0); //LadderMatchAchievePoint
			Write32(pAwardMoneyExp, 0); //SpeedBean
			Write32(pAwardMoneyExp, 0); //SpeedCoin

			len = pAwardMoneyExp - pEnlistQQFriends;
			Set16(pEnlistQQFriends, (WORD)len);
			pEnlistQQFriends += len;
		}
		Write8(pEnlistQQFriends, 0); //AwardItemNum
		for (size_t i = 0; i < n; i++)
		{ //AwardItemInfo
			BYTE* pAwardItemInfo = pEnlistQQFriends;
			Write16(pAwardItemInfo, 0); //len

			Write32(pAwardItemInfo, 0); //ItemID
			Write32(pAwardItemInfo, 0); //ItemNum
			Write32(pAwardItemInfo, 0); //AvailPeriod
			Write8(pAwardItemInfo, 0); //Status
			WriteUn(pAwardItemInfo, 0); //ObtainTime
			Write32(pAwardItemInfo, 0); //OtherAttribute
			Write16(pAwardItemInfo, 0); //ItemType

			len = pAwardItemInfo - pEnlistQQFriends;
			Set16(pEnlistQQFriends, (WORD)len);
			pEnlistQQFriends += len;
		}
		Write8(pEnlistQQFriends, 0); //NickNameLen

		len = pEnlistQQFriends - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 10902, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetConItemLeftNum(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	UINT Num = Read32(p);
	for (size_t i = 0; i < n; i++)
	{ //ConItemQueryInfo
		BYTE* pConItemQueryInfo = p;
		len = Read16(pConItemQueryInfo);

		int ExchangeID = Read32(pConItemQueryInfo);
		int ItemID = Read32(pConItemQueryInfo);
		int ItemLeftNum = Read32(pConItemQueryInfo);

		p += len;
	}

}

void ResponseGetConItemLeftNum(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Num
	for (size_t i = 0; i < n; i++)
	{ //ConItemQueryInfo
		BYTE* pConItemQueryInfo = p;
		Write16(pConItemQueryInfo, 0); //len

		Write32(pConItemQueryInfo, 0); //ExchangeID
		Write32(pConItemQueryInfo, 0); //ItemID
		Write32(pConItemQueryInfo, 0); //ItemLeftNum

		len = pConItemQueryInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 10903, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestReportCheat(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	Un DstUin = ReadUn(p);
	BYTE MultiInfoLen = Read8(p);
	BYTE IsNetworkStable = Read8(p);
	char[] DstNickName[] = ReadString(p);

}

void ResponseReportCheat(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 1600, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyCheatWarning(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //MsgLen

	len = p - buf;
	SendToClient(Client, 1601, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetWareHouseStatus(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetWareHouseStatus(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //Status
	Write16(p, 0); //MaxSize

	len = p - buf;
	SendToClient(Client, 420, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetWareHouseItemList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetWareHouseItemList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ItemNum
	for (size_t i = 0; i < n; i++)
	{ //WareHouseItems
		BYTE* pWareHouseItems = p;
		Write16(pWareHouseItems, 0); //len

		Write32(pWareHouseItems, 0); //ItemID
		Write32(pWareHouseItems, 0); //ItemNum
		Write32(pWareHouseItems, 0); //AvailPeriod
		Write8(pWareHouseItems, 0); //Status
		WriteUn(pWareHouseItems, 0); //ObtainTime
		Write32(pWareHouseItems, 0); //OtherAttribute
		Write16(pWareHouseItems, 0); //ItemType

		len = pWareHouseItems - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasMoreInfo

	len = p - buf;
	SendToClient(Client, 421, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void ResponseGetWareHouseItemListMoreInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ItemNum
	for (size_t i = 0; i < n; i++)
	{ //WareHouseItems
		BYTE* pWareHouseItems = p;
		Write16(pWareHouseItems, 0); //len

		Write32(pWareHouseItems, 0); //ItemID
		Write32(pWareHouseItems, 0); //ItemNum
		Write32(pWareHouseItems, 0); //AvailPeriod
		Write8(pWareHouseItems, 0); //Status
		WriteUn(pWareHouseItems, 0); //ObtainTime
		Write32(pWareHouseItems, 0); //OtherAttribute
		Write16(pWareHouseItems, 0); //ItemType

		len = pWareHouseItems - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasNext

	len = p - buf;
	SendToClient(Client, 429, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestDoWareHouseOperation(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int ItemID = Read32(p);
	bool OpType = Read8(p);

}

void ResponseWareHouseOperation(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //OpType
	{ //ItemInfo
		BYTE* pItemInfo = p;
		Write16(pItemInfo, 0); //len

		Write32(pItemInfo, 0); //ItemID
		Write32(pItemInfo, 0); //ItemNum
		Write32(pItemInfo, 0); //AvailPeriod
		Write8(pItemInfo, 0); //Status
		WriteUn(pItemInfo, 0); //ObtainTime
		Write32(pItemInfo, 0); //OtherAttribute
		Write16(pItemInfo, 0); //ItemType

		len = pItemInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 422, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyWareHouseDelItem(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ItemNum
	Write32(p, 0); //Item[]

	len = p - buf;
	SendToClient(Client, 423, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestReportN2OChangeEvent(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	UINT LapTime = Read32(p);
	UCHAR N2OChangeEventNum = Read8(p);
	for (size_t i = 0; i < n; i++)
	{ //N2OChangeEvent
		BYTE* pN2OChangeEvent = p;
		len = Read16(pN2OChangeEvent);

		USHORT EventID = Read16(pN2OChangeEvent);
		UINT BeginLapTime = Read32(pN2OChangeEvent);
		USHORT LastingTime = Read16(pN2OChangeEvent);
		UCHAR EventType = Read8(pN2OChangeEvent);
		short N2OChange = Read16(pN2OChangeEvent);

		p += len;
	}

}

void RequestUseHyperJet(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	UINT LapTime = Read32(p);
	UCHAR N2OChangeEventNum = Read8(p);
	for (size_t i = 0; i < n; i++)
	{ //N2OChangeEvent
		BYTE* pN2OChangeEvent = p;
		len = Read16(pN2OChangeEvent);

		USHORT EventID = Read16(pN2OChangeEvent);
		UINT BeginLapTime = Read32(pN2OChangeEvent);
		USHORT LastingTime = Read16(pN2OChangeEvent);
		UCHAR EventType = Read8(pN2OChangeEvent);
		short N2OChange = Read16(pN2OChangeEvent);

		p += len;
	}

}

void RequestLoverDanceChangeOneMode(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	int Mode = Read32(p);

}

void ResponseLoverDanceChangeOneMode(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //NewMode
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 262, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyLoverDanceChangeOneMode(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //MasterUin
	WriteUn(p, 0); //Uin
	Write32(p, 0); //NewMode

	len = p - buf;
	SendToClient(Client, 725, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestLoverDanceStepStatistics(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	int SegID = Read32(p);
	int StepID = Read32(p);
	int Checksum = Read32(p);
	Un Hits = ReadUn(p);
	{ //Combo
		BYTE* pCombo = p;
		len = Read16(pCombo);

		short First = Read16(pCombo);
		short Last = Read16(pCombo);

		p += len;
	}
	short Decision = Read16(p);
	short NormalKeyTotalHits = Read16(p);

}

void NotifyLoverDanceStepStatistics(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //TeamID
	Write32(p, 0); //ScoresInc
	Write32(p, 0); //ScoresTotal
	Write8(p, 0); //CooperInc
	Write8(p, 0); //CooperScoresInc
	Write32(p, 0); //TotalCooper

	len = p - buf;
	SendToClient(Client, 735, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyLoverDanceWaitCooperKey(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //WaitKeyTime

	len = p - buf;
	SendToClient(Client, 736, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestLoverDanceCooperKey(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	UCHAR TeamID = Read8(p);
	USHORT Key = Read16(p);

}

void NotifyLoverDanceCooperKey(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //TeamNum
	for (size_t i = 0; i < n; i++)
	{ //TeamCooperKey
		BYTE* pTeamCooperKey = p;
		Write16(pTeamCooperKey, 0); //len

		Write8(pTeamCooperKey, 0); //TeamID
		Write8(pTeamCooperKey, 0); //IsSame
		Write8(pTeamCooperKey, 0); //Key

		len = pTeamCooperKey - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 737, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetFavoriteTask(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetFavoriteTask(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //Result
	Write8(p, 0); //FavoriteTaskNum
	for (size_t i = 0; i < n; i++)
	{ //FavoriteTask
		BYTE* pFavoriteTask = p;
		Write16(pFavoriteTask, 0); //len

		Write32(pFavoriteTask, 0); //TaskID
		Write32(pFavoriteTask, 0); //AddTime

		len = pFavoriteTask - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 415, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestAddFavoriteTask(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int AddFavoriteTaskID = Read32(p);

}

void ResponseAddFavoriteTask(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //Result
	{ //AddFavoriteTask
		BYTE* pAddFavoriteTask = p;
		Write16(pAddFavoriteTask, 0); //len

		Write32(pAddFavoriteTask, 0); //TaskID
		Write32(pAddFavoriteTask, 0); //AddTime

		len = pAddFavoriteTask - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //DeleteFavoriteTaskID

	len = p - buf;
	SendToClient(Client, 416, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestDeleteFavoriteTask(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int DeleteFavoriteTaskID = Read32(p);

}

void ResponseDeleteFavoriteTask(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //Result
	Write32(p, 0); //DeleteFavoriteTaskID

	len = p - buf;
	SendToClient(Client, 417, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyDeleteOneItem(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	WriteUn(p, 0); //Uin
	Write32(p, 0); //ItemID
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 610, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestLoveDanceShowTimeAffection(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT SrcUin = Read32(p);
	Un Time = ReadUn(p);
	UINT DstUin = Read32(p);
	short RoomID = Read16(p);
	short GameLogicID = Read16(p);
	int ItemID = Read32(p);

}

void ResponseLoveDanceShowTimeAffection(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //SrcUin
	Write32(p, 0); //DstUin
	Write16(p, 0); //IncAdiration
	Write32(p, 0); //CurAdiration
	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 265, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyLoveDanceShowTimeAffection(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //SrcUin
	Write32(p, 0); //DstUin
	Write16(p, 0); //IncAdiration
	Write32(p, 0); //CurAdiration

	len = p - buf;
	SendToClient(Client, 738, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetPetSkillList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetPetSkillList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //PetNum
	for (size_t i = 0; i < n; i++)
	{ //PetSkills
		BYTE* pPetSkills = p;
		Write16(pPetSkills, 0); //len

		Write32(pPetSkills, 0); //PetID
		Write8(pPetSkills, 0); //SkillNum
		Write16(pPetSkills, 0); //PetSkillIDs[]

		len = pPetSkills - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 440, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestSetSecPwd(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	char[] Pwd[] = ReadString(p);

}

void ResponseSetSecPwd(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 441, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestModSecPwd(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	char[] OldPwd[] = ReadString(p);
	char[] NewPwd[] = ReadString(p);

}

void ResponseModSecPwd(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 442, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestEmptySecPwd(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseEmptySecPwd(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 443, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestCancelEmptySecPwd(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseCancelEmptySecPwd(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 444, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestCheckSecPwd(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	char[] SecPwd[] = ReadString(p);

}

void ResponseCheckSecPwd(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 445, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetSecPwdStatus(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetSecPwdStatus(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write8(p, 0); //IsEmpty
	Write32(p, 0); //ReqEmptyTime

	len = p - buf;
	SendToClient(Client, 447, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyS2CEvent(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //EventID
	Write16(p, 0); //MsgLen
	Write8(p, 0); //Context

	len = p - buf;
	SendToClient(Client, 446, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetShoppingCarItemList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetShoppingCarItemList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	{ //ShoppingCarItemList
		BYTE* pShoppingCarItemList = p;
		Write16(pShoppingCarItemList, 0); //len

		Write8(pShoppingCarItemList, 0); //ItemNum
		Write32(pShoppingCarItemList, 0); //Item[]

		len = pShoppingCarItemList - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 452, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestUpdateShoppingCarItemList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	{ //ShoppingCarItemList
		BYTE* pShoppingCarItemList = p;
		len = Read16(pShoppingCarItemList);

		bool ItemNum = Read8(pShoppingCarItemList);
		int[] Item[] = Read32(pShoppingCarItemList);

		p += len;
	}

}

void ResponseUpdateShoppingCarItemList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 453, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestTakeStealPigTask(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseTakeStealPigTask(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen
	Write32(p, 0); //ActiveLeftTime
	Write16(p, 0); //TaskLeftTime
	Write16(p, 0); //CurrentStealNum
	Write16(p, 0); //TotalCanStealNum
	Write16(p, 0); //AdditionNum

	len = p - buf;
	SendToClient(Client, 11024, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestTransferToGuildRoom(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT DstSvrID = Read16(p);
	U DstGuildID = ReadU(p);
	U DstGuildRoomID = ReadU(p);
	UCHAR TransferReason = Read8(p);
	UCHAR TransferFlag = Read8(p);

}

void ResponseTransferToGuildRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write8(p, 0); //TransferReason
	Write16(p, 0); //DstSvrID
	WriteU(p, 0); //DstGuildID
	WriteU(p, 0); //DstGuildRoomID
	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 11025, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGuildRoomPigInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGuildRoomPigInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen
	Write8(p, 0); //PigNum
	for (size_t i = 0; i < n; i++)
	{ //PigInfo
		BYTE* pPigInfo = p;
		Write16(pPigInfo, 0); //len

		Write8(pPigInfo, 0); //PigPos
		Write32(pPigInfo, 0); //ItemID

		len = pPigInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //SpeedBuffNum
	for (size_t i = 0; i < n; i++)
	{ //SpeedBuffInfo
		BYTE* pSpeedBuffInfo = p;
		Write16(pSpeedBuffInfo, 0); //len

		Write8(pSpeedBuffInfo, 0); //SpeedBuffPos
		Write32(pSpeedBuffInfo, 0); //ItemID

		len = pSpeedBuffInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //CrazyPigNum
	for (size_t i = 0; i < n; i++)
	{ //CrazyPigInfo
		BYTE* pCrazyPigInfo = p;
		Write16(pCrazyPigInfo, 0); //len

		Write8(pCrazyPigInfo, 0); //PigPos
		Write32(pCrazyPigInfo, 0); //ItemID

		len = pCrazyPigInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11026, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyGuildRoomPigInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //PigNum
	for (size_t i = 0; i < n; i++)
	{ //PigInfo
		BYTE* pPigInfo = p;
		Write16(pPigInfo, 0); //len

		Write8(pPigInfo, 0); //PigPos
		Write32(pPigInfo, 0); //ItemID

		len = pPigInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //SpeedBuffNum
	for (size_t i = 0; i < n; i++)
	{ //SpeedBuffInfo
		BYTE* pSpeedBuffInfo = p;
		Write16(pSpeedBuffInfo, 0); //len

		Write8(pSpeedBuffInfo, 0); //SpeedBuffPos
		Write32(pSpeedBuffInfo, 0); //ItemID

		len = pSpeedBuffInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //CrazyPigNum
	for (size_t i = 0; i < n; i++)
	{ //CrazyPigInfo
		BYTE* pCrazyPigInfo = p;
		Write16(pCrazyPigInfo, 0); //len

		Write8(pCrazyPigInfo, 0); //PigPos
		Write32(pCrazyPigInfo, 0); //ItemID

		len = pCrazyPigInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11027, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestDigPig(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	{ //PigInfo
		BYTE* pPigInfo = p;
		len = Read16(pPigInfo);

		UCHAR PigPos = Read8(pPigInfo);
		int ItemID = Read32(pPigInfo);

		p += len;
	}

}

void ResponseDigPig(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen
	{ //PigInfo
		BYTE* pPigInfo = p;
		Write16(pPigInfo, 0); //len

		Write8(pPigInfo, 0); //PigPos
		Write32(pPigInfo, 0); //ItemID

		len = pPigInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11028, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyDigPig(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	{ //PigInfo
		BYTE* pPigInfo = p;
		Write16(pPigInfo, 0); //len

		Write8(pPigInfo, 0); //PigPos
		Write32(pPigInfo, 0); //ItemID

		len = pPigInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11029, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetPig(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	{ //PigInfo
		BYTE* pPigInfo = p;
		len = Read16(pPigInfo);

		UCHAR PigPos = Read8(pPigInfo);
		int ItemID = Read32(pPigInfo);

		p += len;
	}

}

void ResponseGetPig(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen
	{ //PigInfo
		BYTE* pPigInfo = p;
		Write16(pPigInfo, 0); //len

		Write8(pPigInfo, 0); //PigPos
		Write32(pPigInfo, 0); //ItemID

		len = pPigInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //CrazyTimeRemain

	len = p - buf;
	SendToClient(Client, 11030, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyGetPig(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	{ //PigInfo
		BYTE* pPigInfo = p;
		Write16(pPigInfo, 0); //len

		Write8(pPigInfo, 0); //PigPos
		Write32(pPigInfo, 0); //ItemID

		len = pPigInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11031, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestSubmitPig(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseSubmitPig(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 11032, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifySubmitPig(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //ItemID

	len = p - buf;
	SendToClient(Client, 11033, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyStealPigStatus(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //LeftTime
	Write16(p, 0); //Other

	len = p - buf;
	SendToClient(Client, 11034, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestModifyGuildEnlistCondition(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT NewAttr = Read16(p);
	{ //NewGuildEnlistCond
		BYTE* pNewGuildEnlistCond = p;
		len = Read16(pNewGuildEnlistCond);

		UINT ProsperityCondition = Read32(pNewGuildEnlistCond);
		UINT JoinTotalCondition = Read32(pNewGuildEnlistCond);
		UINT HonorCondition = Read32(pNewGuildEnlistCond);
		UINT CharmCondition = Read32(pNewGuildEnlistCond);
		UINT DanceExpCondition = Read32(pNewGuildEnlistCond);
		UINT SkillPointCondition = Read32(pNewGuildEnlistCond);
		UINT ExpLevelCondition = Read32(pNewGuildEnlistCond);
		UINT ApplyExpLevelCondition = Read32(pNewGuildEnlistCond);
		UCHAR EnlistType = Read8(pNewGuildEnlistCond);

		p += len;
	}

}

void ResponseModifyGuildEnlistCondition(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen
	Write16(p, 0); //NewAttr
	{ //NewGuildEnlistCond
		BYTE* pNewGuildEnlistCond = p;
		Write16(pNewGuildEnlistCond, 0); //len

		Write32(pNewGuildEnlistCond, 0); //ProsperityCondition
		Write32(pNewGuildEnlistCond, 0); //JoinTotalCondition
		Write32(pNewGuildEnlistCond, 0); //HonorCondition
		Write32(pNewGuildEnlistCond, 0); //CharmCondition
		Write32(pNewGuildEnlistCond, 0); //DanceExpCondition
		Write32(pNewGuildEnlistCond, 0); //SkillPointCondition
		Write32(pNewGuildEnlistCond, 0); //ExpLevelCondition
		Write32(pNewGuildEnlistCond, 0); //ApplyExpLevelCondition
		Write8(pNewGuildEnlistCond, 0); //EnlistType

		len = pNewGuildEnlistCond - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //FirstSetNoApprove

	len = p - buf;
	SendToClient(Client, 15026, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestAdvanceQueryGuild(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	short CurrentGuild = Read16(p);
	USHORT Start = Read16(p);
	USHORT QueryNum = Read16(p);
	UINT ClassifyCfgVersion = Read32(p);
	USHORT Num = Read16(p);
	for (size_t i = 0; i < n; i++)
	{ //AdanceQueryCondIdx
		BYTE* pAdanceQueryCondIdx = p;
		len = Read16(pAdanceQueryCondIdx);

		USHORT ID = Read16(pAdanceQueryCondIdx);
		USHORT ConditionIdx = Read16(pAdanceQueryCondIdx);

		p += len;
	}

}

void ResponseAdvanceQueryGuild(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //Start
	Write32(p, 0); //GuildCount
	for (size_t i = 0; i < n; i++)
	{ //GuildDescInfo
		BYTE* pGuildDescInfo = p;
		Write16(pGuildDescInfo, 0); //len

		Write32(pGuildDescInfo, 0); //GuildID
		WriteString(pGuildDescInfo, 0); //Name[]
		Write32(pGuildDescInfo, 0); //Level
		Write32(pGuildDescInfo, 0); //Score
		Write32(pGuildDescInfo, 0); //CreateTime
		Write16(pGuildDescInfo, 0); //Attribute
		Write16(pGuildDescInfo, 0); //MaxMember
		Write16(pGuildDescInfo, 0); //CurrentMember
		Write32(pGuildDescInfo, 0); //Prosperity
		Write16(pGuildDescInfo, 0); //Level
		{ //GuildEnlistCond
			BYTE* pGuildEnlistCond = pGuildDescInfo;
			Write16(pGuildEnlistCond, 0); //len

			Write32(pGuildEnlistCond, 0); //ProsperityCondition
			Write32(pGuildEnlistCond, 0); //JoinTotalCondition
			Write32(pGuildEnlistCond, 0); //HonorCondition
			Write32(pGuildEnlistCond, 0); //CharmCondition
			Write32(pGuildEnlistCond, 0); //DanceExpCondition
			Write32(pGuildEnlistCond, 0); //SkillPointCondition
			Write32(pGuildEnlistCond, 0); //ExpLevelCondition
			Write32(pGuildEnlistCond, 0); //ApplyExpLevelCondition
			Write8(pGuildEnlistCond, 0); //EnlistType

			len = pGuildEnlistCond - pGuildDescInfo;
			Set16(pGuildDescInfo, (WORD)len);
			pGuildDescInfo += len;
		}
		Write8(pGuildDescInfo, 0); //SubType
		{ //CardOtherInfo
			BYTE* pCardOtherInfo = pGuildDescInfo;
			Write16(pCardOtherInfo, 0); //len

			Write32(pCardOtherInfo, 0); //MainZone1
			Write32(pCardOtherInfo, 0); //MainZone2
			Write32(pCardOtherInfo, 0); //MainMode1
			Write32(pCardOtherInfo, 0); //MainMode2
			Write32(pCardOtherInfo, 0); //OtherInterest1
			Write32(pCardOtherInfo, 0); //OtherInterest2

			len = pCardOtherInfo - pGuildDescInfo;
			Set16(pGuildDescInfo, (WORD)len);
			pGuildDescInfo += len;
		}
		Write16(pGuildDescInfo, 0); //DescLen
		Write32(pGuildDescInfo, 0); //WeekProsper
		Write32(pGuildDescInfo, 0); //GuildQQGroup
		Write8(pGuildDescInfo, 0); //RecommendType
		Write16(pGuildDescInfo, 0); //FriendNums
		Write16(pGuildDescInfo, 0); //DCRecommendIndex

		len = pGuildDescInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //CurrentGuild
	Write32(p, 0); //TotalCount
	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen
	{ //GuildClassifyCfg
		BYTE* pGuildClassifyCfg = p;
		Write16(pGuildClassifyCfg, 0); //len

		Write32(pGuildClassifyCfg, 0); //Version
		Write16(pGuildClassifyCfg, 0); //ClassifyEntryNum
		for (size_t i = 0; i < n; i++)
		{ //ClassifyEntry
			BYTE* pClassifyEntry = pGuildClassifyCfg;
			Write16(pClassifyEntry, 0); //len

			Write16(pClassifyEntry, 0); //ID
			Write16(pClassifyEntry, 0); //ClassifyNum
			Write32(pClassifyEntry, 0); //ClassifyLimit[]

			len = pClassifyEntry - pGuildClassifyCfg;
			Set16(pGuildClassifyCfg, (WORD)len);
			pGuildClassifyCfg += len;
		}

		len = pGuildClassifyCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //NextGuild

	len = p - buf;
	SendToClient(Client, 15025, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestModifyDutyProperty(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT DutyPropertyNum = Read16(p);
	for (size_t i = 0; i < n; i++)
	{ //NewDutyProperty
		BYTE* pNewDutyProperty = p;
		len = Read16(pNewDutyProperty);

		USHORT Duty = Read16(pNewDutyProperty);
		USHORT Right = Read16(pNewDutyProperty);
		{ //AutoPromLimit
			BYTE* pAutoPromLimit = pNewDutyProperty;
			len = Read16(pAutoPromLimit);

			UINT ScoreLimit = Read32(pAutoPromLimit);
			UINT ProsperityLimit = Read32(pAutoPromLimit);

			pNewDutyProperty += len;
		}
		{ //ApplyPromLimit
			BYTE* pApplyPromLimit = pNewDutyProperty;
			len = Read16(pApplyPromLimit);

			UINT ScoreLimit = Read32(pApplyPromLimit);
			UINT ProsperityLimit = Read32(pApplyPromLimit);

			pNewDutyProperty += len;
		}
		[] DutyTitle[] = Read(pNewDutyProperty);

		p += len;
	}

}

void ResponseModifyDutyProperty(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //DutyPropertyNum
	for (size_t i = 0; i < n; i++)
	{ //NewDutyProperty
		BYTE* pNewDutyProperty = p;
		Write16(pNewDutyProperty, 0); //len

		Write16(pNewDutyProperty, 0); //Duty
		Write16(pNewDutyProperty, 0); //Right
		{ //AutoPromLimit
			BYTE* pAutoPromLimit = pNewDutyProperty;
			Write16(pAutoPromLimit, 0); //len

			Write32(pAutoPromLimit, 0); //ScoreLimit
			Write32(pAutoPromLimit, 0); //ProsperityLimit

			len = pAutoPromLimit - pNewDutyProperty;
			Set16(pNewDutyProperty, (WORD)len);
			pNewDutyProperty += len;
		}
		{ //ApplyPromLimit
			BYTE* pApplyPromLimit = pNewDutyProperty;
			Write16(pApplyPromLimit, 0); //len

			Write32(pApplyPromLimit, 0); //ScoreLimit
			Write32(pApplyPromLimit, 0); //ProsperityLimit

			len = pApplyPromLimit - pNewDutyProperty;
			Set16(pNewDutyProperty, (WORD)len);
			pNewDutyProperty += len;
		}
		Write(pNewDutyProperty, 0); //DutyTitle[]

		len = pNewDutyProperty - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 15032, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestApplyDuty(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT Duty = Read16(p);

}

void ResponseApplyDuty(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //Duty
	Write16(p, 0); //NameLen
	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 15033, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestDutyApplyList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseDutyApplyList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //ApplyNum
	for (size_t i = 0; i < n; i++)
	{ //Apply
		BYTE* pApply = p;
		Write16(pApply, 0); //len

		Write32(pApply, 0); //Uin
		Write16(pApply, 0); //Duty

		len = pApply - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 15034, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestDutyApplyReply(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT ApplyNum = Read32(p);
	for (size_t i = 0; i < n; i++)
	{ //ApplyReply
		BYTE* pApplyReply = p;
		len = Read16(pApplyReply);

		UINT Uin = Read32(pApplyReply);
		USHORT Duty = Read16(pApplyReply);
		char Agree = Read8(pApplyReply);

		p += len;
	}

}

void ResponseDutyApplyReply(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //ApplyNum
	for (size_t i = 0; i < n; i++)
	{ //ApplyReply
		BYTE* pApplyReply = p;
		Write16(pApplyReply, 0); //len

		Write32(pApplyReply, 0); //Uin
		Write16(pApplyReply, 0); //Duty
		Write8(pApplyReply, 0); //Agree

		len = pApplyReply - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //ResNum
	for (size_t i = 0; i < n; i++)
	{ //ApplyRes
		BYTE* pApplyRes = p;
		Write16(pApplyRes, 0); //len

		WriteString(pApplyRes, 0); //NickName[]
		WriteString(pApplyRes, 0); //DutyTitle[]

		len = pApplyRes - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 15035, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetGuildCommercialInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetGuildCommercialInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //Time
	{ //GuildClothItem
		BYTE* pGuildClothItem = p;
		Write16(pGuildClothItem, 0); //len

		Write32(pGuildClothItem, 0); //ClothSetTime
		for (size_t i = 0; i < n; i++)
		{ //GuildClothItem
			BYTE* pGuildClothItem = pGuildClothItem;
			Write16(pGuildClothItem, 0); //len

			Write16(pGuildClothItem, 0); //ClothItemNum
			Write32(pGuildClothItem, 0); //ClothItems[]
			Write32(pGuildClothItem, 0); //ChooseFlag

			len = pGuildClothItem - pGuildClothItem;
			Set16(pGuildClothItem, (WORD)len);
			pGuildClothItem += len;
		}

		len = pGuildClothItem - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //GroupBuyNum
	for (size_t i = 0; i < n; i++)
	{ //GuildGroupBuy
		BYTE* pGuildGroupBuy = p;
		Write16(pGuildGroupBuy, 0); //len

		Write8(pGuildGroupBuy, 0); //Status
		Write8(pGuildGroupBuy, 0); //LeftSecond
		{ //BaseEntry
			BYTE* pBaseEntry = pGuildGroupBuy;
			Write16(pBaseEntry, 0); //len

			Write32(pBaseEntry, 0); //PubTime
			Write16(pBaseEntry, 0); //CommodityID
			Write32(pBaseEntry, 0); //TotalSuperMoney
			Write16(pBaseEntry, 0); //JoinNum

			len = pBaseEntry - pGuildGroupBuy;
			Set16(pGuildGroupBuy, (WORD)len);
			pGuildGroupBuy += len;
		}

		len = pGuildGroupBuy - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 15028, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestChangeGuildCloth(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	{ //NewGuildClothItem
		BYTE* pNewGuildClothItem = p;
		len = Read16(pNewGuildClothItem);

		UINT ClothSetTime = Read32(pNewGuildClothItem);
		for (size_t i = 0; i < n; i++)
		{ //GuildClothItem
			BYTE* pGuildClothItem = pNewGuildClothItem;
			len = Read16(pGuildClothItem);

			USHORT ClothItemNum = Read16(pGuildClothItem);
			UINT[] ClothItems[] = Read32(pGuildClothItem);
			UINT ChooseFlag = Read32(pGuildClothItem);

			pNewGuildClothItem += len;
		}

		p += len;
	}

}

void ResponseChangeGuildCloth(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //Time
	{ //NewGuildClothItem
		BYTE* pNewGuildClothItem = p;
		Write16(pNewGuildClothItem, 0); //len

		Write32(pNewGuildClothItem, 0); //ClothSetTime
		for (size_t i = 0; i < n; i++)
		{ //GuildClothItem
			BYTE* pGuildClothItem = pNewGuildClothItem;
			Write16(pGuildClothItem, 0); //len

			Write16(pGuildClothItem, 0); //ClothItemNum
			Write32(pGuildClothItem, 0); //ClothItems[]
			Write32(pGuildClothItem, 0); //ChooseFlag

			len = pGuildClothItem - pNewGuildClothItem;
			Set16(pNewGuildClothItem, (WORD)len);
			pNewGuildClothItem += len;
		}

		len = pNewGuildClothItem - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 15029, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyModifyDutyRight(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //GuidID
	Write16(p, 0); //Duty
	Write16(p, 0); //NewRight

	len = p - buf;
	SendToClient(Client, 15223, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyChangeGuildCloth(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //GuildID
	{ //NewGuildClothItem
		BYTE* pNewGuildClothItem = p;
		Write16(pNewGuildClothItem, 0); //len

		Write32(pNewGuildClothItem, 0); //ClothSetTime
		for (size_t i = 0; i < n; i++)
		{ //GuildClothItem
			BYTE* pGuildClothItem = pNewGuildClothItem;
			Write16(pGuildClothItem, 0); //len

			Write16(pGuildClothItem, 0); //ClothItemNum
			Write32(pGuildClothItem, 0); //ClothItems[]
			Write32(pGuildClothItem, 0); //ChooseFlag

			len = pGuildClothItem - pNewGuildClothItem;
			Set16(pNewGuildClothItem, (WORD)len);
			pNewGuildClothItem += len;
		}

		len = pNewGuildClothItem - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 15227, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestTransferMapInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int MapID = Read32(p);
	bool MapInfo = Read8(p);

}

void NotifyOtherClientMapInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //SrcUin
	Write32(p, 0); //MapID
	Write8(p, 0); //MapInfo

	len = p - buf;
	SendToClient(Client, 463, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestTransferMusicResHoldInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int MusicID = Read32(p);
	UCHAR ResHoldInfo = Read8(p);

}

void NotifyTransferMusicResHoldInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //SrcUin
	Write32(p, 0); //MusicID
	Write8(p, 0); //ResHoldInfo

	len = p - buf;
	SendToClient(Client, 266, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestTransferResourceDownloadStatus(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR ResourceType = Read8(p);
	UCHAR DownloadStatusValue = Read8(p);

}

void NotifyResourceDownloadStatus(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //SrcUin
	Write8(p, 0); //ResourceType
	Write8(p, 0); //DownloadStatusValue

	len = p - buf;
	SendToClient(Client, 268, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyClientVipFlag(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	WriteUn(p, 0); //VipFlag
	Write16(p, 0); //MsgLen
	WriteUn(p, 0); //VipGrowRate

	len = p - buf;
	SendToClient(Client, 948, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyClientDeadLineItemTips(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ToBeExpiredItemNum
	for (size_t i = 0; i < n; i++)
	{ //ToBeExpiredItem
		BYTE* pToBeExpiredItem = p;
		Write16(pToBeExpiredItem, 0); //len

		{ //ItemInfo
			BYTE* pItemInfo = pToBeExpiredItem;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pToBeExpiredItem;
			Set16(pToBeExpiredItem, (WORD)len);
			pToBeExpiredItem += len;
		}
		Write32(pToBeExpiredItem, 0); //ExpiredTime

		len = pToBeExpiredItem - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //ExpiredItemNum
	for (size_t i = 0; i < n; i++)
	{ //ExpiredItem
		BYTE* pExpiredItem = p;
		Write16(pExpiredItem, 0); //len

		{ //ItemInfo
			BYTE* pItemInfo = pExpiredItem;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pExpiredItem;
			Set16(pExpiredItem, (WORD)len);
			pExpiredItem += len;
		}
		Write32(pExpiredItem, 0); //ExpiredTime

		len = pExpiredItem - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 949, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyClientDeadLineItemExpired(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	{ //ExpiredItemInfo
		BYTE* pExpiredItemInfo = p;
		Write16(pExpiredItemInfo, 0); //len

		{ //ItemInfo
			BYTE* pItemInfo = pExpiredItemInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pExpiredItemInfo;
			Set16(pExpiredItemInfo, (WORD)len);
			pExpiredItemInfo += len;
		}
		Write32(pExpiredItemInfo, 0); //ExpiredTime

		len = pExpiredItemInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 950, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestReportClickStream(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	bool Num = Read8(p);
	for (size_t i = 0; i < n; i++)
	{ //Events
		BYTE* pEvents = p;
		len = Read16(pEvents);

		USHORT EventID = Read16(pEvents);
		UINT EventParam = Read32(pEvents);
		bool ContextID = Read8(pEvents);
		UINT Time = Read32(pEvents);

		p += len;
	}

}

void NotifySvrConfig2(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //HaveTopMapRecord
	for (size_t i = 0; i < n; i++)
	{ //TopMapRecordConfig
		BYTE* pTopMapRecordConfig = p;
		Write16(pTopMapRecordConfig, 0); //len

		Write32(pTopMapRecordConfig, 0); //Version
		Write32(pTopMapRecordConfig, 0); //RecordDisplayLimit
		Write8(pTopMapRecordConfig, 0); //RecordNumber
		for (size_t i = 0; i < n; i++)
		{ //Record
			BYTE* pRecord = pTopMapRecordConfig;
			Write16(pRecord, 0); //len

			Write32(pRecord, 0); //MapId
			Write32(pRecord, 0); //Record
			Write32(pRecord, 0); //Uin
			Write8(pRecord, 0); //WorldId
			Write8(pRecord, 0); //NameLength
			Write8(pRecord, 0); //UrlLength

			len = pRecord - pTopMapRecordConfig;
			Set16(pTopMapRecordConfig, (WORD)len);
			pTopMapRecordConfig += len;
		}

		len = pTopMapRecordConfig - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HaveKartRoomPushInfo
	for (size_t i = 0; i < n; i++)
	{ //KartRoomPushInfo
		BYTE* pKartRoomPushInfo = p;
		Write16(pKartRoomPushInfo, 0); //len

		Write32(pKartRoomPushInfo, 0); //Version
		Write16(pKartRoomPushInfo, 0); //PushItemNumber
		for (size_t i = 0; i < n; i++)
		{ //PushItem
			BYTE* pPushItem = pKartRoomPushInfo;
			Write16(pPushItem, 0); //len

			Write32(pPushItem, 0); //KartId
			Write8(pPushItem, 0); //TextLength

			len = pPushItem - pKartRoomPushInfo;
			Set16(pKartRoomPushInfo, (WORD)len);
			pKartRoomPushInfo += len;
		}

		len = pKartRoomPushInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //ClickStreamCfg
		BYTE* pClickStreamCfg = p;
		Write16(pClickStreamCfg, 0); //len

		Write8(pClickStreamCfg, 0); //ReportMode
		Write8(pClickStreamCfg, 0); //ContextNum
		Write32(pClickStreamCfg, 0); //MaxNum

		len = pClickStreamCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //IsGuildPKOpen
	Write8(p, 0); //IsEightYearsOpen
	Write8(p, 0); //HaveSkatePropGameLogicCfg
	for (size_t i = 0; i < n; i++)
	{ //SkatePropGameLogicCfg
		BYTE* pSkatePropGameLogicCfg = p;
		Write16(pSkatePropGameLogicCfg, 0); //len

		Write32(pSkatePropGameLogicCfg, 0); //PropAddN2ONum
		Write32(pSkatePropGameLogicCfg, 0); //N2OSpeed
		Write32(pSkatePropGameLogicCfg, 0); //ZanAddScoreNum
		Write32(pSkatePropGameLogicCfg, 0); //GetSpecialPropAddCoinNum
		Write32(pSkatePropGameLogicCfg, 0); //SkatePropHitCD
		Write32(pSkatePropGameLogicCfg, 0); //SkatePropHit_CoinSubNum
		Write32(pSkatePropGameLogicCfg, 0); //MaxOneGameLogicGetScoreNum

		len = pSkatePropGameLogicCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //SkatePropShoeNum
	Write32(p, 0); //SkatePropShoeList[]
	Write16(p, 0); //SkatePropShoeNumForMultiGame
	Write32(p, 0); //SkatePropShoeListForMultiGame[]
	WriteUn(p, 0); //AddAngleTime
	for (size_t i = 0; i < n; i++)
	{ //ClassicMapInfo
		BYTE* pClassicMapInfo = p;
		Write16(pClassicMapInfo, 0); //len

		Write32(pClassicMapInfo, 0); //MapNums
		Write32(pClassicMapInfo, 0); //MapIDS[]

		len = pClassicMapInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //OpenPopAds
	Write8(p, 0); //IsCloseSaveKeyTransInfo
	Write8(p, 0); //IsCloseSuperMoneySecondPsw
	Write32(p, 0); //NewMapNum
	for (size_t i = 0; i < n; i++)
	{ //NewMapTipsCfg
		BYTE* pNewMapTipsCfg = p;
		Write16(pNewMapTipsCfg, 0); //len

		Write32(pNewMapTipsCfg, 0); //Mapid
		Write16(pNewMapTipsCfg, 0); //WordLen

		len = pNewMapTipsCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ClientSwitch[]
	Write8(p, 0); //OpenPwdRedEnvelop
	Write8(p, 0); //IsUseTCLS
	Write8(p, 0); //IsPropTeamMatchShow
	Write32(p, 0); //CfgNums
	for (size_t i = 0; i < n; i++)
	{ //CommonItemTopListInfos
		BYTE* pCommonItemTopListInfos = p;
		Write16(pCommonItemTopListInfos, 0); //len

		Write32(pCommonItemTopListInfos, 0); //ItemID
		Write16(pCommonItemTopListInfos, 0); //ExtendInfoNums
		Write32(pCommonItemTopListInfos, 0); //ExtendInfoForItemGene[]
		Write16(pCommonItemTopListInfos, 0); //UpdateTopListNums
		Write32(pCommonItemTopListInfos, 0); //TopListID[]
		Write32(pCommonItemTopListInfos, 0); //ActiveDate
		Write32(pCommonItemTopListInfos, 0); //InActiveDate
		Write32(pCommonItemTopListInfos, 0); //ActiveTime
		Write32(pCommonItemTopListInfos, 0); //InActiveTime
		Write8(pCommonItemTopListInfos, 0); //UpdateTopList
		Write32(pCommonItemTopListInfos, 0); //ExtendInfoForLastUpdateTime
		Write32(pCommonItemTopListInfos, 0); //DailyTopListExtendInfoID
		Write32(pCommonItemTopListInfos, 0); //UpdateDate

		len = pCommonItemTopListInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //IsShowBoardAllareaBubble
	Write8(p, 0); //RemindClearSuperMoneyLeftDays
	Write8(p, 0); //RemindClearSuperMoneyLeftHours
	Write32(p, 0); //RemindClearSuperMoneyThreshold
	Write16(p, 0); //RemindClearSuperMoneyInterval
	Write32(p, 0); //HPJMaxAccFuel
	Write32(p, 0); //HPJWildStatusAccelParam
	Write8(p, 0); //SwitchNum
	Write8(p, 0); //UseSign3
	Write8(p, 0); //OpenRankedMatchSpeedKing
	Write8(p, 0); //OpenLimitMapCollect
	Write8(p, 0); //HasMoreInfo

	len = p - buf;
	SendToClient(Client, 822, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifySvrConfig2MoreInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //HaveTopMapRecord
	for (size_t i = 0; i < n; i++)
	{ //TopMapRecordConfig
		BYTE* pTopMapRecordConfig = p;
		Write16(pTopMapRecordConfig, 0); //len

		Write32(pTopMapRecordConfig, 0); //Version
		Write32(pTopMapRecordConfig, 0); //RecordDisplayLimit
		Write8(pTopMapRecordConfig, 0); //RecordNumber
		for (size_t i = 0; i < n; i++)
		{ //Record
			BYTE* pRecord = pTopMapRecordConfig;
			Write16(pRecord, 0); //len

			Write32(pRecord, 0); //MapId
			Write32(pRecord, 0); //Record
			Write32(pRecord, 0); //Uin
			Write8(pRecord, 0); //WorldId
			Write8(pRecord, 0); //NameLength
			Write8(pRecord, 0); //UrlLength

			len = pRecord - pTopMapRecordConfig;
			Set16(pTopMapRecordConfig, (WORD)len);
			pTopMapRecordConfig += len;
		}

		len = pTopMapRecordConfig - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HaveKartRoomPushInfo
	for (size_t i = 0; i < n; i++)
	{ //KartRoomPushInfo
		BYTE* pKartRoomPushInfo = p;
		Write16(pKartRoomPushInfo, 0); //len

		Write32(pKartRoomPushInfo, 0); //Version
		Write16(pKartRoomPushInfo, 0); //PushItemNumber
		for (size_t i = 0; i < n; i++)
		{ //PushItem
			BYTE* pPushItem = pKartRoomPushInfo;
			Write16(pPushItem, 0); //len

			Write32(pPushItem, 0); //KartId
			Write8(pPushItem, 0); //TextLength

			len = pPushItem - pKartRoomPushInfo;
			Set16(pKartRoomPushInfo, (WORD)len);
			pKartRoomPushInfo += len;
		}

		len = pKartRoomPushInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasNext

	len = p - buf;
	SendToClient(Client, 823, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifySvrConfig3(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	{ //NPCKartPhysPara
		BYTE* pNPCKartPhysPara = p;
		Write16(pNPCKartPhysPara, 0); //len

		Write32(pNPCKartPhysPara, 0); //KartID
		Write8(pNPCKartPhysPara, 0); //PhysInfoCount
		for (size_t i = 0; i < n; i++)
		{ //PhysInfo
			BYTE* pPhysInfo = pNPCKartPhysPara;
			Write16(pPhysInfo, 0); //len

			Write32(pPhysInfo, 0); //PID
			Write32(pPhysInfo, 0); //AffectID
			Write32(pPhysInfo, 0); //Param
			Write32(pPhysInfo, 0); //LifeTime

			len = pPhysInfo - pNPCKartPhysPara;
			Set16(pNPCKartPhysPara, (WORD)len);
			pNPCKartPhysPara += len;
		}
		Write8(pNPCKartPhysPara, 0); //CompensateParamCount
		for (size_t i = 0; i < n; i++)
		{ //CompensateParam
			BYTE* pCompensateParam = pNPCKartPhysPara;
			Write16(pCompensateParam, 0); //len

			Write32(pCompensateParam, 0); //Percent
			Write32(pCompensateParam, 0); //Value

			len = pCompensateParam - pNPCKartPhysPara;
			Set16(pNPCKartPhysPara, (WORD)len);
			pNPCKartPhysPara += len;
		}
		{ //CollisionBoxParam
			BYTE* pCollisionBoxParam = pNPCKartPhysPara;
			Write16(pCollisionBoxParam, 0); //len

			Write32(pCollisionBoxParam, 0); //BoxLength
			Write32(pCollisionBoxParam, 0); //BoxWidth
			Write32(pCollisionBoxParam, 0); //BoxHeight
			Write32(pCollisionBoxParam, 0); //AdjustOffset
			Write32(pCollisionBoxParam, 0); //AdjustPickGap
			Write32(pCollisionBoxParam, 0); //AdjustRemoteOffset
			Write32(pCollisionBoxParam, 0); //AdjustBevelOffset
			Write32(pCollisionBoxParam, 0); //ControllerOffset

			len = pCollisionBoxParam - pNPCKartPhysPara;
			Set16(pNPCKartPhysPara, (WORD)len);
			pNPCKartPhysPara += len;
		}
		{ //CarToCarCollisionParam
			BYTE* pCarToCarCollisionParam = pNPCKartPhysPara;
			Write16(pCarToCarCollisionParam, 0); //len

			Write32(pCarToCarCollisionParam, 0); //CollisionRadius
			Write32(pCarToCarCollisionParam, 0); //CollisionLength
			Write32(pCarToCarCollisionParam, 0); //CollisionWidth
			Write32(pCarToCarCollisionParam, 0); //CollisionHeight
			Write32(pCarToCarCollisionParam, 0); //CollisionLostCtrlTime

			len = pCarToCarCollisionParam - pNPCKartPhysPara;
			Set16(pNPCKartPhysPara, (WORD)len);
			pNPCKartPhysPara += len;
		}
		Write32(pNPCKartPhysPara, 0); //BaseTurnRate
		Write32(pNPCKartPhysPara, 0); //VolatileTurnRate
		Write32(pNPCKartPhysPara, 0); //MaxTurnSpeed
		Write32(pNPCKartPhysPara, 0); //MinTurnSpeed
		Write32(pNPCKartPhysPara, 0); //MaxAccuTime
		Write32(pNPCKartPhysPara, 0); //BaseAccuRate
		Write32(pNPCKartPhysPara, 0); //MaxAffectSpeed
		Write32(pNPCKartPhysPara, 0); //Gravity
		Write32(pNPCKartPhysPara, 0); //AdditionalLocalZSpeed
		Write32(pNPCKartPhysPara, 0); //StartVec
		Write32(pNPCKartPhysPara, 0); //EndVecFist
		Write32(pNPCKartPhysPara, 0); //EndVecSecon
		Write32(pNPCKartPhysPara, 0); //DirKeyForce
		Write32(pNPCKartPhysPara, 0); //DirKeyTwist
		Write32(pNPCKartPhysPara, 0); //BannerTwist
		Write32(pNPCKartPhysPara, 0); //BannerKeyTwist
		Write32(pNPCKartPhysPara, 0); //BannerVecForce
		Write32(pNPCKartPhysPara, 0); //BannerHeadForce
		Write32(pNPCKartPhysPara, 0); //SlidFricForce
		Write32(pNPCKartPhysPara, 0); //RollFricForce
		Write32(pNPCKartPhysPara, 0); //StartWec
		Write32(pNPCKartPhysPara, 0); //MaxWec
		Write32(pNPCKartPhysPara, 0); //SuaiJianTwist
		Write32(pNPCKartPhysPara, 0); //DirUpKeyForce
		Write8(pNPCKartPhysPara, 0); //AccelStatusCount
		Write32(pNPCKartPhysPara, 0); //AccelStatus[]
		Write8(pNPCKartPhysPara, 0); //ForwardAccelNum
		for (size_t i = 0; i < n; i++)
		{ //ForwardAccel
			BYTE* pForwardAccel = pNPCKartPhysPara;
			Write16(pForwardAccel, 0); //len

			Write32(pForwardAccel, 0); //Key
			Write32(pForwardAccel, 0); //Value

			len = pForwardAccel - pNPCKartPhysPara;
			Set16(pNPCKartPhysPara, (WORD)len);
			pNPCKartPhysPara += len;
		}
		Write8(pNPCKartPhysPara, 0); //ForwardDecelNum
		for (size_t i = 0; i < n; i++)
		{ //ForwardDecel
			BYTE* pForwardDecel = pNPCKartPhysPara;
			Write16(pForwardDecel, 0); //len

			Write32(pForwardDecel, 0); //Key
			Write32(pForwardDecel, 0); //Value

			len = pForwardDecel - pNPCKartPhysPara;
			Set16(pNPCKartPhysPara, (WORD)len);
			pNPCKartPhysPara += len;
		}
		Write8(pNPCKartPhysPara, 0); //BackwardAccelNum
		for (size_t i = 0; i < n; i++)
		{ //BackwardAccel
			BYTE* pBackwardAccel = pNPCKartPhysPara;
			Write16(pBackwardAccel, 0); //len

			Write32(pBackwardAccel, 0); //Key
			Write32(pBackwardAccel, 0); //Value

			len = pBackwardAccel - pNPCKartPhysPara;
			Set16(pNPCKartPhysPara, (WORD)len);
			pNPCKartPhysPara += len;
		}
		Write8(pNPCKartPhysPara, 0); //BackwardDecelNum
		for (size_t i = 0; i < n; i++)
		{ //BackwardDecel
			BYTE* pBackwardDecel = pNPCKartPhysPara;
			Write16(pBackwardDecel, 0); //len

			Write32(pBackwardDecel, 0); //Key
			Write32(pBackwardDecel, 0); //Value

			len = pBackwardDecel - pNPCKartPhysPara;
			Set16(pNPCKartPhysPara, (WORD)len);
			pNPCKartPhysPara += len;
		}
		Write32(pNPCKartPhysPara, 0); //CrashCompensatePower
		Write32(pNPCKartPhysPara, 0); //DefenseRate
		Write32(pNPCKartPhysPara, 0); //Uin
		Write32(pNPCKartPhysPara, 0); //SpeedupCardGenRate
		Write32(pNPCKartPhysPara, 0); //ExtraFuncFlag
		Write8(pNPCKartPhysPara, 0); //SkatePara
		for (size_t i = 0; i < n; i++)
		{ //hasSkatePara
			BYTE* phasSkatePara = pNPCKartPhysPara;
			Write16(phasSkatePara, 0); //len

			Write32(phasSkatePara, 0); //TrackSpeed
			Write32(phasSkatePara, 0); //SkateSpeedCoef_AirBigJet
			Write32(phasSkatePara, 0); //SkateSpeedCoef_Jump
			Write32(phasSkatePara, 0); //SkateSpeedCoef_AirJetPoint
			Write32(phasSkatePara, 0); //SkateSpeedCoef_MaxForce
			Write32(phasSkatePara, 0); //OntrackAccRef
			Write32(phasSkatePara, 0); //TrackAccRef
			Write32(phasSkatePara, 0); //DashSkill

			len = phasSkatePara - pNPCKartPhysPara;
			Set16(pNPCKartPhysPara, (WORD)len);
			pNPCKartPhysPara += len;
		}
		Write8(pNPCKartPhysPara, 0); //HasBattleModeSkillInfoList
		for (size_t i = 0; i < n; i++)
		{ //BattleModeSkillInfoList
			BYTE* pBattleModeSkillInfoList = pNPCKartPhysPara;
			Write16(pBattleModeSkillInfoList, 0); //len

			Write8(pBattleModeSkillInfoList, 0); //SkillNum
			for (size_t i = 0; i < n; i++)
			{ //SkillInfo
				BYTE* pSkillInfo = pBattleModeSkillInfoList;
				Write16(pSkillInfo, 0); //len

				Write16(pSkillInfo, 0); //SkillId
				Write8(pSkillInfo, 0); //SkillLevel

				len = pSkillInfo - pBattleModeSkillInfoList;
				Set16(pBattleModeSkillInfoList, (WORD)len);
				pBattleModeSkillInfoList += len;
			}

			len = pBattleModeSkillInfoList - pNPCKartPhysPara;
			Set16(pNPCKartPhysPara, (WORD)len);
			pNPCKartPhysPara += len;
		}
		Write32(pNPCKartPhysPara, 0); //EnergyConvert
		Write16(pNPCKartPhysPara, 0); //SuperN2ORate
		Write16(pNPCKartPhysPara, 0); //CollisionLoseRate
		Write8(pNPCKartPhysPara, 0); //NotInterruptDrift
		Write8(pNPCKartPhysPara, 0); //AddWeightNum
		Write8(pNPCKartPhysPara, 0); //WeightNum
		Write8(pNPCKartPhysPara, 0); //HasAntiCollisionCfg
		for (size_t i = 0; i < n; i++)
		{ //AntiCollistionCfg
			BYTE* pAntiCollistionCfg = pNPCKartPhysPara;
			Write16(pAntiCollistionCfg, 0); //len

			Write8(pAntiCollistionCfg, 0); //Num
			Write32(pAntiCollistionCfg, 0); //Position[]

			len = pAntiCollistionCfg - pNPCKartPhysPara;
			Set16(pNPCKartPhysPara, (WORD)len);
			pNPCKartPhysPara += len;
		}
		Write8(pNPCKartPhysPara, 0); //HasBoatParam
		for (size_t i = 0; i < n; i++)
		{ //BoatParam
			BYTE* pBoatParam = pNPCKartPhysPara;
			Write16(pBoatParam, 0); //len

			Write32(pBoatParam, 0); //DirKeyForceParamC
			Write32(pBoatParam, 0); //DirKeyForceParamD
			Write32(pBoatParam, 0); //DTFLimitAngle
			Write32(pBoatParam, 0); //DTFRatio
			Write32(pBoatParam, 0); //UpKeyVecForce
			Write32(pBoatParam, 0); //UpKeyVecForceParamA
			Write32(pBoatParam, 0); //UpKeyVecForceParamB
			Write32(pBoatParam, 0); //LRKeyVecForce
			Write32(pBoatParam, 0); //LRKeyVecForceParamA
			Write32(pBoatParam, 0); //LRKeyVecForceParamB
			Write32(pBoatParam, 0); //VecForce
			Write32(pBoatParam, 0); //VecForceParamA
			Write32(pBoatParam, 0); //VecForceParamB
			Write32(pBoatParam, 0); //BoatShape[]
			Write32(pBoatParam, 0); //WecEffect
			Write32(pBoatParam, 0); //BannerKeyTwist
			Write32(pBoatParam, 0); //BannerKeyTwistParamA
			Write32(pBoatParam, 0); //BannerKeyTwistParamB
			Write32(pBoatParam, 0); //SuaiJianTwist
			Write32(pBoatParam, 0); //BoatHeighRatio
			Write32(pBoatParam, 0); //BannerTwist
			Write32(pBoatParam, 0); //BannerTwistParamA
			Write32(pBoatParam, 0); //DirUpKeyForce
			Write32(pBoatParam, 0); //DirUpKeyForceParamA
			Write32(pBoatParam, 0); //DirUpKeyForceParamB
			Write32(pBoatParam, 0); //DirKeyForce
			Write32(pBoatParam, 0); //DirKeyForceParamA
			Write32(pBoatParam, 0); //DirKeyForceParamB
			Write32(pBoatParam, 0); //AddNO2PerSec
			Write32(pBoatParam, 0); //BoatAirValue
			WriteUn(pBoatParam, 0); //ifSlidFricForce

			len = pBoatParam - pNPCKartPhysPara;
			Set16(pNPCKartPhysPara, (WORD)len);
			pNPCKartPhysPara += len;
		}
		Write8(pNPCKartPhysPara, 0); //BoatForwardAccelNum
		for (size_t i = 0; i < n; i++)
		{ //BoatForwardAccel
			BYTE* pBoatForwardAccel = pNPCKartPhysPara;
			Write16(pBoatForwardAccel, 0); //len

			Write32(pBoatForwardAccel, 0); //Key
			Write32(pBoatForwardAccel, 0); //Value

			len = pBoatForwardAccel - pNPCKartPhysPara;
			Set16(pNPCKartPhysPara, (WORD)len);
			pNPCKartPhysPara += len;
		}
		Write32(pNPCKartPhysPara, 0); //DirUpKeyForceParamA
		Write32(pNPCKartPhysPara, 0); //DirUpKeyForceParamB

		len = pNPCKartPhysPara - p;
		Set16(p, (WORD)len);
		p += len;
	}
	for (size_t i = 0; i < n; i++)
	{ //NPCKartAIPhysPara
		BYTE* pNPCKartAIPhysPara = p;
		Write16(pNPCKartAIPhysPara, 0); //len

		Write32(pNPCKartAIPhysPara, 0); //NpcN2OIntervalTime
		Write32(pNPCKartAIPhysPara, 0); //NpcTriggerN2ORate
		Write32(pNPCKartAIPhysPara, 0); //NpcRestCheckTime
		Write32(pNPCKartAIPhysPara, 0); //NpcFixVelocity
		Write32(pNPCKartAIPhysPara, 0); //NpcFixVelocityRate
		Write32(pNPCKartAIPhysPara, 0); //NpcRunDisHulanThreshold
		Write32(pNPCKartAIPhysPara, 0); //NpcSJetRate
		Write32(pNPCKartAIPhysPara, 0); //NpcTurnAjustDisHulanRate
		Write8(pNPCKartAIPhysPara, 0); //ForwardAccelNum
		for (size_t i = 0; i < n; i++)
		{ //ForwardAccel
			BYTE* pForwardAccel = pNPCKartAIPhysPara;
			Write16(pForwardAccel, 0); //len

			Write32(pForwardAccel, 0); //Key
			Write32(pForwardAccel, 0); //Value

			len = pForwardAccel - pNPCKartAIPhysPara;
			Set16(pNPCKartAIPhysPara, (WORD)len);
			pNPCKartAIPhysPara += len;
		}
		Write8(pNPCKartAIPhysPara, 0); //BackwardAccelNum
		for (size_t i = 0; i < n; i++)
		{ //BackwardAccel
			BYTE* pBackwardAccel = pNPCKartAIPhysPara;
			Write16(pBackwardAccel, 0); //len

			Write32(pBackwardAccel, 0); //Key
			Write32(pBackwardAccel, 0); //Value

			len = pBackwardAccel - pNPCKartAIPhysPara;
			Set16(pNPCKartAIPhysPara, (WORD)len);
			pNPCKartAIPhysPara += len;
		}
		Write32(pNPCKartAIPhysPara, 0); //StraightLenThreshold
		Write32(pNPCKartAIPhysPara, 0); //NpcDriftRate
		Write8(pNPCKartAIPhysPara, 0); //CompensateParamCount
		for (size_t i = 0; i < n; i++)
		{ //CompensateParam
			BYTE* pCompensateParam = pNPCKartAIPhysPara;
			Write16(pCompensateParam, 0); //len

			Write32(pCompensateParam, 0); //Percent
			Write32(pCompensateParam, 0); //Value

			len = pCompensateParam - pNPCKartAIPhysPara;
			Set16(pNPCKartAIPhysPara, (WORD)len);
			pNPCKartAIPhysPara += len;
		}

		len = pNPCKartAIPhysPara - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //NPCKartPhysPara_NpcPlayer
		BYTE* pNPCKartPhysPara_NpcPlayer = p;
		Write16(pNPCKartPhysPara_NpcPlayer, 0); //len

		Write32(pNPCKartPhysPara_NpcPlayer, 0); //KartID
		Write8(pNPCKartPhysPara_NpcPlayer, 0); //PhysInfoCount
		for (size_t i = 0; i < n; i++)
		{ //PhysInfo
			BYTE* pPhysInfo = pNPCKartPhysPara_NpcPlayer;
			Write16(pPhysInfo, 0); //len

			Write32(pPhysInfo, 0); //PID
			Write32(pPhysInfo, 0); //AffectID
			Write32(pPhysInfo, 0); //Param
			Write32(pPhysInfo, 0); //LifeTime

			len = pPhysInfo - pNPCKartPhysPara_NpcPlayer;
			Set16(pNPCKartPhysPara_NpcPlayer, (WORD)len);
			pNPCKartPhysPara_NpcPlayer += len;
		}
		Write8(pNPCKartPhysPara_NpcPlayer, 0); //CompensateParamCount
		for (size_t i = 0; i < n; i++)
		{ //CompensateParam
			BYTE* pCompensateParam = pNPCKartPhysPara_NpcPlayer;
			Write16(pCompensateParam, 0); //len

			Write32(pCompensateParam, 0); //Percent
			Write32(pCompensateParam, 0); //Value

			len = pCompensateParam - pNPCKartPhysPara_NpcPlayer;
			Set16(pNPCKartPhysPara_NpcPlayer, (WORD)len);
			pNPCKartPhysPara_NpcPlayer += len;
		}
		{ //CollisionBoxParam
			BYTE* pCollisionBoxParam = pNPCKartPhysPara_NpcPlayer;
			Write16(pCollisionBoxParam, 0); //len

			Write32(pCollisionBoxParam, 0); //BoxLength
			Write32(pCollisionBoxParam, 0); //BoxWidth
			Write32(pCollisionBoxParam, 0); //BoxHeight
			Write32(pCollisionBoxParam, 0); //AdjustOffset
			Write32(pCollisionBoxParam, 0); //AdjustPickGap
			Write32(pCollisionBoxParam, 0); //AdjustRemoteOffset
			Write32(pCollisionBoxParam, 0); //AdjustBevelOffset
			Write32(pCollisionBoxParam, 0); //ControllerOffset

			len = pCollisionBoxParam - pNPCKartPhysPara_NpcPlayer;
			Set16(pNPCKartPhysPara_NpcPlayer, (WORD)len);
			pNPCKartPhysPara_NpcPlayer += len;
		}
		{ //CarToCarCollisionParam
			BYTE* pCarToCarCollisionParam = pNPCKartPhysPara_NpcPlayer;
			Write16(pCarToCarCollisionParam, 0); //len

			Write32(pCarToCarCollisionParam, 0); //CollisionRadius
			Write32(pCarToCarCollisionParam, 0); //CollisionLength
			Write32(pCarToCarCollisionParam, 0); //CollisionWidth
			Write32(pCarToCarCollisionParam, 0); //CollisionHeight
			Write32(pCarToCarCollisionParam, 0); //CollisionLostCtrlTime

			len = pCarToCarCollisionParam - pNPCKartPhysPara_NpcPlayer;
			Set16(pNPCKartPhysPara_NpcPlayer, (WORD)len);
			pNPCKartPhysPara_NpcPlayer += len;
		}
		Write32(pNPCKartPhysPara_NpcPlayer, 0); //BaseTurnRate
		Write32(pNPCKartPhysPara_NpcPlayer, 0); //VolatileTurnRate
		Write32(pNPCKartPhysPara_NpcPlayer, 0); //MaxTurnSpeed
		Write32(pNPCKartPhysPara_NpcPlayer, 0); //MinTurnSpeed
		Write32(pNPCKartPhysPara_NpcPlayer, 0); //MaxAccuTime
		Write32(pNPCKartPhysPara_NpcPlayer, 0); //BaseAccuRate
		Write32(pNPCKartPhysPara_NpcPlayer, 0); //MaxAffectSpeed
		Write32(pNPCKartPhysPara_NpcPlayer, 0); //Gravity
		Write32(pNPCKartPhysPara_NpcPlayer, 0); //AdditionalLocalZSpeed
		Write32(pNPCKartPhysPara_NpcPlayer, 0); //StartVec
		Write32(pNPCKartPhysPara_NpcPlayer, 0); //EndVecFist
		Write32(pNPCKartPhysPara_NpcPlayer, 0); //EndVecSecon
		Write32(pNPCKartPhysPara_NpcPlayer, 0); //DirKeyForce
		Write32(pNPCKartPhysPara_NpcPlayer, 0); //DirKeyTwist
		Write32(pNPCKartPhysPara_NpcPlayer, 0); //BannerTwist
		Write32(pNPCKartPhysPara_NpcPlayer, 0); //BannerKeyTwist
		Write32(pNPCKartPhysPara_NpcPlayer, 0); //BannerVecForce
		Write32(pNPCKartPhysPara_NpcPlayer, 0); //BannerHeadForce
		Write32(pNPCKartPhysPara_NpcPlayer, 0); //SlidFricForce
		Write32(pNPCKartPhysPara_NpcPlayer, 0); //RollFricForce
		Write32(pNPCKartPhysPara_NpcPlayer, 0); //StartWec
		Write32(pNPCKartPhysPara_NpcPlayer, 0); //MaxWec
		Write32(pNPCKartPhysPara_NpcPlayer, 0); //SuaiJianTwist
		Write32(pNPCKartPhysPara_NpcPlayer, 0); //DirUpKeyForce
		Write8(pNPCKartPhysPara_NpcPlayer, 0); //AccelStatusCount
		Write32(pNPCKartPhysPara_NpcPlayer, 0); //AccelStatus[]
		Write8(pNPCKartPhysPara_NpcPlayer, 0); //ForwardAccelNum
		for (size_t i = 0; i < n; i++)
		{ //ForwardAccel
			BYTE* pForwardAccel = pNPCKartPhysPara_NpcPlayer;
			Write16(pForwardAccel, 0); //len

			Write32(pForwardAccel, 0); //Key
			Write32(pForwardAccel, 0); //Value

			len = pForwardAccel - pNPCKartPhysPara_NpcPlayer;
			Set16(pNPCKartPhysPara_NpcPlayer, (WORD)len);
			pNPCKartPhysPara_NpcPlayer += len;
		}
		Write8(pNPCKartPhysPara_NpcPlayer, 0); //ForwardDecelNum
		for (size_t i = 0; i < n; i++)
		{ //ForwardDecel
			BYTE* pForwardDecel = pNPCKartPhysPara_NpcPlayer;
			Write16(pForwardDecel, 0); //len

			Write32(pForwardDecel, 0); //Key
			Write32(pForwardDecel, 0); //Value

			len = pForwardDecel - pNPCKartPhysPara_NpcPlayer;
			Set16(pNPCKartPhysPara_NpcPlayer, (WORD)len);
			pNPCKartPhysPara_NpcPlayer += len;
		}
		Write8(pNPCKartPhysPara_NpcPlayer, 0); //BackwardAccelNum
		for (size_t i = 0; i < n; i++)
		{ //BackwardAccel
			BYTE* pBackwardAccel = pNPCKartPhysPara_NpcPlayer;
			Write16(pBackwardAccel, 0); //len

			Write32(pBackwardAccel, 0); //Key
			Write32(pBackwardAccel, 0); //Value

			len = pBackwardAccel - pNPCKartPhysPara_NpcPlayer;
			Set16(pNPCKartPhysPara_NpcPlayer, (WORD)len);
			pNPCKartPhysPara_NpcPlayer += len;
		}
		Write8(pNPCKartPhysPara_NpcPlayer, 0); //BackwardDecelNum
		for (size_t i = 0; i < n; i++)
		{ //BackwardDecel
			BYTE* pBackwardDecel = pNPCKartPhysPara_NpcPlayer;
			Write16(pBackwardDecel, 0); //len

			Write32(pBackwardDecel, 0); //Key
			Write32(pBackwardDecel, 0); //Value

			len = pBackwardDecel - pNPCKartPhysPara_NpcPlayer;
			Set16(pNPCKartPhysPara_NpcPlayer, (WORD)len);
			pNPCKartPhysPara_NpcPlayer += len;
		}
		Write32(pNPCKartPhysPara_NpcPlayer, 0); //CrashCompensatePower
		Write32(pNPCKartPhysPara_NpcPlayer, 0); //DefenseRate
		Write32(pNPCKartPhysPara_NpcPlayer, 0); //Uin
		Write32(pNPCKartPhysPara_NpcPlayer, 0); //SpeedupCardGenRate
		Write32(pNPCKartPhysPara_NpcPlayer, 0); //ExtraFuncFlag
		Write8(pNPCKartPhysPara_NpcPlayer, 0); //SkatePara
		for (size_t i = 0; i < n; i++)
		{ //hasSkatePara
			BYTE* phasSkatePara = pNPCKartPhysPara_NpcPlayer;
			Write16(phasSkatePara, 0); //len

			Write32(phasSkatePara, 0); //TrackSpeed
			Write32(phasSkatePara, 0); //SkateSpeedCoef_AirBigJet
			Write32(phasSkatePara, 0); //SkateSpeedCoef_Jump
			Write32(phasSkatePara, 0); //SkateSpeedCoef_AirJetPoint
			Write32(phasSkatePara, 0); //SkateSpeedCoef_MaxForce
			Write32(phasSkatePara, 0); //OntrackAccRef
			Write32(phasSkatePara, 0); //TrackAccRef
			Write32(phasSkatePara, 0); //DashSkill

			len = phasSkatePara - pNPCKartPhysPara_NpcPlayer;
			Set16(pNPCKartPhysPara_NpcPlayer, (WORD)len);
			pNPCKartPhysPara_NpcPlayer += len;
		}
		Write8(pNPCKartPhysPara_NpcPlayer, 0); //HasBattleModeSkillInfoList
		for (size_t i = 0; i < n; i++)
		{ //BattleModeSkillInfoList
			BYTE* pBattleModeSkillInfoList = pNPCKartPhysPara_NpcPlayer;
			Write16(pBattleModeSkillInfoList, 0); //len

			Write8(pBattleModeSkillInfoList, 0); //SkillNum
			for (size_t i = 0; i < n; i++)
			{ //SkillInfo
				BYTE* pSkillInfo = pBattleModeSkillInfoList;
				Write16(pSkillInfo, 0); //len

				Write16(pSkillInfo, 0); //SkillId
				Write8(pSkillInfo, 0); //SkillLevel

				len = pSkillInfo - pBattleModeSkillInfoList;
				Set16(pBattleModeSkillInfoList, (WORD)len);
				pBattleModeSkillInfoList += len;
			}

			len = pBattleModeSkillInfoList - pNPCKartPhysPara_NpcPlayer;
			Set16(pNPCKartPhysPara_NpcPlayer, (WORD)len);
			pNPCKartPhysPara_NpcPlayer += len;
		}
		Write32(pNPCKartPhysPara_NpcPlayer, 0); //EnergyConvert
		Write16(pNPCKartPhysPara_NpcPlayer, 0); //SuperN2ORate
		Write16(pNPCKartPhysPara_NpcPlayer, 0); //CollisionLoseRate
		Write8(pNPCKartPhysPara_NpcPlayer, 0); //NotInterruptDrift
		Write8(pNPCKartPhysPara_NpcPlayer, 0); //AddWeightNum
		Write8(pNPCKartPhysPara_NpcPlayer, 0); //WeightNum
		Write8(pNPCKartPhysPara_NpcPlayer, 0); //HasAntiCollisionCfg
		for (size_t i = 0; i < n; i++)
		{ //AntiCollistionCfg
			BYTE* pAntiCollistionCfg = pNPCKartPhysPara_NpcPlayer;
			Write16(pAntiCollistionCfg, 0); //len

			Write8(pAntiCollistionCfg, 0); //Num
			Write32(pAntiCollistionCfg, 0); //Position[]

			len = pAntiCollistionCfg - pNPCKartPhysPara_NpcPlayer;
			Set16(pNPCKartPhysPara_NpcPlayer, (WORD)len);
			pNPCKartPhysPara_NpcPlayer += len;
		}
		Write8(pNPCKartPhysPara_NpcPlayer, 0); //HasBoatParam
		for (size_t i = 0; i < n; i++)
		{ //BoatParam
			BYTE* pBoatParam = pNPCKartPhysPara_NpcPlayer;
			Write16(pBoatParam, 0); //len

			Write32(pBoatParam, 0); //DirKeyForceParamC
			Write32(pBoatParam, 0); //DirKeyForceParamD
			Write32(pBoatParam, 0); //DTFLimitAngle
			Write32(pBoatParam, 0); //DTFRatio
			Write32(pBoatParam, 0); //UpKeyVecForce
			Write32(pBoatParam, 0); //UpKeyVecForceParamA
			Write32(pBoatParam, 0); //UpKeyVecForceParamB
			Write32(pBoatParam, 0); //LRKeyVecForce
			Write32(pBoatParam, 0); //LRKeyVecForceParamA
			Write32(pBoatParam, 0); //LRKeyVecForceParamB
			Write32(pBoatParam, 0); //VecForce
			Write32(pBoatParam, 0); //VecForceParamA
			Write32(pBoatParam, 0); //VecForceParamB
			Write32(pBoatParam, 0); //BoatShape[]
			Write32(pBoatParam, 0); //WecEffect
			Write32(pBoatParam, 0); //BannerKeyTwist
			Write32(pBoatParam, 0); //BannerKeyTwistParamA
			Write32(pBoatParam, 0); //BannerKeyTwistParamB
			Write32(pBoatParam, 0); //SuaiJianTwist
			Write32(pBoatParam, 0); //BoatHeighRatio
			Write32(pBoatParam, 0); //BannerTwist
			Write32(pBoatParam, 0); //BannerTwistParamA
			Write32(pBoatParam, 0); //DirUpKeyForce
			Write32(pBoatParam, 0); //DirUpKeyForceParamA
			Write32(pBoatParam, 0); //DirUpKeyForceParamB
			Write32(pBoatParam, 0); //DirKeyForce
			Write32(pBoatParam, 0); //DirKeyForceParamA
			Write32(pBoatParam, 0); //DirKeyForceParamB
			Write32(pBoatParam, 0); //AddNO2PerSec
			Write32(pBoatParam, 0); //BoatAirValue
			WriteUn(pBoatParam, 0); //ifSlidFricForce

			len = pBoatParam - pNPCKartPhysPara_NpcPlayer;
			Set16(pNPCKartPhysPara_NpcPlayer, (WORD)len);
			pNPCKartPhysPara_NpcPlayer += len;
		}
		Write8(pNPCKartPhysPara_NpcPlayer, 0); //BoatForwardAccelNum
		for (size_t i = 0; i < n; i++)
		{ //BoatForwardAccel
			BYTE* pBoatForwardAccel = pNPCKartPhysPara_NpcPlayer;
			Write16(pBoatForwardAccel, 0); //len

			Write32(pBoatForwardAccel, 0); //Key
			Write32(pBoatForwardAccel, 0); //Value

			len = pBoatForwardAccel - pNPCKartPhysPara_NpcPlayer;
			Set16(pNPCKartPhysPara_NpcPlayer, (WORD)len);
			pNPCKartPhysPara_NpcPlayer += len;
		}
		Write32(pNPCKartPhysPara_NpcPlayer, 0); //DirUpKeyForceParamA
		Write32(pNPCKartPhysPara_NpcPlayer, 0); //DirUpKeyForceParamB

		len = pNPCKartPhysPara_NpcPlayer - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //LevelNum
	for (size_t i = 0; i < n; i++)
	{ //NPCKartAIPhysPara_NpcPlayer
		BYTE* pNPCKartAIPhysPara_NpcPlayer = p;
		Write16(pNPCKartAIPhysPara_NpcPlayer, 0); //len

		{ //Param
			BYTE* pParam = pNPCKartAIPhysPara_NpcPlayer;
			Write16(pParam, 0); //len

			Write32(pParam, 0); //NpcN2OIntervalTime
			Write32(pParam, 0); //NpcTriggerN2ORate
			Write32(pParam, 0); //NpcRestCheckTime
			Write32(pParam, 0); //NpcFixVelocity
			Write32(pParam, 0); //NpcFixVelocityRate
			Write32(pParam, 0); //NpcRunDisHulanThreshold
			Write32(pParam, 0); //NpcSJetRate
			Write32(pParam, 0); //NpcTurnAjustDisHulanRate
			Write8(pParam, 0); //ForwardAccelNum
			for (size_t i = 0; i < n; i++)
			{ //ForwardAccel
				BYTE* pForwardAccel = pParam;
				Write16(pForwardAccel, 0); //len

				Write32(pForwardAccel, 0); //Key
				Write32(pForwardAccel, 0); //Value

				len = pForwardAccel - pParam;
				Set16(pParam, (WORD)len);
				pParam += len;
			}
			Write8(pParam, 0); //BackwardAccelNum
			for (size_t i = 0; i < n; i++)
			{ //BackwardAccel
				BYTE* pBackwardAccel = pParam;
				Write16(pBackwardAccel, 0); //len

				Write32(pBackwardAccel, 0); //Key
				Write32(pBackwardAccel, 0); //Value

				len = pBackwardAccel - pParam;
				Set16(pParam, (WORD)len);
				pParam += len;
			}
			Write32(pParam, 0); //StraightLenThreshold
			Write32(pParam, 0); //NpcDriftRate
			Write8(pParam, 0); //CompensateParamCount
			for (size_t i = 0; i < n; i++)
			{ //CompensateParam
				BYTE* pCompensateParam = pParam;
				Write16(pCompensateParam, 0); //len

				Write32(pCompensateParam, 0); //Percent
				Write32(pCompensateParam, 0); //Value

				len = pCompensateParam - pParam;
				Set16(pParam, (WORD)len);
				pParam += len;
			}

			len = pParam - pNPCKartAIPhysPara_NpcPlayer;
			Set16(pNPCKartAIPhysPara_NpcPlayer, (WORD)len);
			pNPCKartAIPhysPara_NpcPlayer += len;
		}
		Write32(pNPCKartAIPhysPara_NpcPlayer, 0); //N2OStartTime
		Write32(pNPCKartAIPhysPara_NpcPlayer, 0); //NpcN2OMaxCount
		Write32(pNPCKartAIPhysPara_NpcPlayer, 0); //Dis2FirstPlay
		Write32(pNPCKartAIPhysPara_NpcPlayer, 0); //LostControlTime
		Write32(pNPCKartAIPhysPara_NpcPlayer, 0); //LostInterval
		Write32(pNPCKartAIPhysPara_NpcPlayer, 0); //LostControlCount

		len = pNPCKartAIPhysPara_NpcPlayer - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //NPCKartPhysPara_RankedMatch
		BYTE* pNPCKartPhysPara_RankedMatch = p;
		Write16(pNPCKartPhysPara_RankedMatch, 0); //len

		Write32(pNPCKartPhysPara_RankedMatch, 0); //KartID
		Write8(pNPCKartPhysPara_RankedMatch, 0); //PhysInfoCount
		for (size_t i = 0; i < n; i++)
		{ //PhysInfo
			BYTE* pPhysInfo = pNPCKartPhysPara_RankedMatch;
			Write16(pPhysInfo, 0); //len

			Write32(pPhysInfo, 0); //PID
			Write32(pPhysInfo, 0); //AffectID
			Write32(pPhysInfo, 0); //Param
			Write32(pPhysInfo, 0); //LifeTime

			len = pPhysInfo - pNPCKartPhysPara_RankedMatch;
			Set16(pNPCKartPhysPara_RankedMatch, (WORD)len);
			pNPCKartPhysPara_RankedMatch += len;
		}
		Write8(pNPCKartPhysPara_RankedMatch, 0); //CompensateParamCount
		for (size_t i = 0; i < n; i++)
		{ //CompensateParam
			BYTE* pCompensateParam = pNPCKartPhysPara_RankedMatch;
			Write16(pCompensateParam, 0); //len

			Write32(pCompensateParam, 0); //Percent
			Write32(pCompensateParam, 0); //Value

			len = pCompensateParam - pNPCKartPhysPara_RankedMatch;
			Set16(pNPCKartPhysPara_RankedMatch, (WORD)len);
			pNPCKartPhysPara_RankedMatch += len;
		}
		{ //CollisionBoxParam
			BYTE* pCollisionBoxParam = pNPCKartPhysPara_RankedMatch;
			Write16(pCollisionBoxParam, 0); //len

			Write32(pCollisionBoxParam, 0); //BoxLength
			Write32(pCollisionBoxParam, 0); //BoxWidth
			Write32(pCollisionBoxParam, 0); //BoxHeight
			Write32(pCollisionBoxParam, 0); //AdjustOffset
			Write32(pCollisionBoxParam, 0); //AdjustPickGap
			Write32(pCollisionBoxParam, 0); //AdjustRemoteOffset
			Write32(pCollisionBoxParam, 0); //AdjustBevelOffset
			Write32(pCollisionBoxParam, 0); //ControllerOffset

			len = pCollisionBoxParam - pNPCKartPhysPara_RankedMatch;
			Set16(pNPCKartPhysPara_RankedMatch, (WORD)len);
			pNPCKartPhysPara_RankedMatch += len;
		}
		{ //CarToCarCollisionParam
			BYTE* pCarToCarCollisionParam = pNPCKartPhysPara_RankedMatch;
			Write16(pCarToCarCollisionParam, 0); //len

			Write32(pCarToCarCollisionParam, 0); //CollisionRadius
			Write32(pCarToCarCollisionParam, 0); //CollisionLength
			Write32(pCarToCarCollisionParam, 0); //CollisionWidth
			Write32(pCarToCarCollisionParam, 0); //CollisionHeight
			Write32(pCarToCarCollisionParam, 0); //CollisionLostCtrlTime

			len = pCarToCarCollisionParam - pNPCKartPhysPara_RankedMatch;
			Set16(pNPCKartPhysPara_RankedMatch, (WORD)len);
			pNPCKartPhysPara_RankedMatch += len;
		}
		Write32(pNPCKartPhysPara_RankedMatch, 0); //BaseTurnRate
		Write32(pNPCKartPhysPara_RankedMatch, 0); //VolatileTurnRate
		Write32(pNPCKartPhysPara_RankedMatch, 0); //MaxTurnSpeed
		Write32(pNPCKartPhysPara_RankedMatch, 0); //MinTurnSpeed
		Write32(pNPCKartPhysPara_RankedMatch, 0); //MaxAccuTime
		Write32(pNPCKartPhysPara_RankedMatch, 0); //BaseAccuRate
		Write32(pNPCKartPhysPara_RankedMatch, 0); //MaxAffectSpeed
		Write32(pNPCKartPhysPara_RankedMatch, 0); //Gravity
		Write32(pNPCKartPhysPara_RankedMatch, 0); //AdditionalLocalZSpeed
		Write32(pNPCKartPhysPara_RankedMatch, 0); //StartVec
		Write32(pNPCKartPhysPara_RankedMatch, 0); //EndVecFist
		Write32(pNPCKartPhysPara_RankedMatch, 0); //EndVecSecon
		Write32(pNPCKartPhysPara_RankedMatch, 0); //DirKeyForce
		Write32(pNPCKartPhysPara_RankedMatch, 0); //DirKeyTwist
		Write32(pNPCKartPhysPara_RankedMatch, 0); //BannerTwist
		Write32(pNPCKartPhysPara_RankedMatch, 0); //BannerKeyTwist
		Write32(pNPCKartPhysPara_RankedMatch, 0); //BannerVecForce
		Write32(pNPCKartPhysPara_RankedMatch, 0); //BannerHeadForce
		Write32(pNPCKartPhysPara_RankedMatch, 0); //SlidFricForce
		Write32(pNPCKartPhysPara_RankedMatch, 0); //RollFricForce
		Write32(pNPCKartPhysPara_RankedMatch, 0); //StartWec
		Write32(pNPCKartPhysPara_RankedMatch, 0); //MaxWec
		Write32(pNPCKartPhysPara_RankedMatch, 0); //SuaiJianTwist
		Write32(pNPCKartPhysPara_RankedMatch, 0); //DirUpKeyForce
		Write8(pNPCKartPhysPara_RankedMatch, 0); //AccelStatusCount
		Write32(pNPCKartPhysPara_RankedMatch, 0); //AccelStatus[]
		Write8(pNPCKartPhysPara_RankedMatch, 0); //ForwardAccelNum
		for (size_t i = 0; i < n; i++)
		{ //ForwardAccel
			BYTE* pForwardAccel = pNPCKartPhysPara_RankedMatch;
			Write16(pForwardAccel, 0); //len

			Write32(pForwardAccel, 0); //Key
			Write32(pForwardAccel, 0); //Value

			len = pForwardAccel - pNPCKartPhysPara_RankedMatch;
			Set16(pNPCKartPhysPara_RankedMatch, (WORD)len);
			pNPCKartPhysPara_RankedMatch += len;
		}
		Write8(pNPCKartPhysPara_RankedMatch, 0); //ForwardDecelNum
		for (size_t i = 0; i < n; i++)
		{ //ForwardDecel
			BYTE* pForwardDecel = pNPCKartPhysPara_RankedMatch;
			Write16(pForwardDecel, 0); //len

			Write32(pForwardDecel, 0); //Key
			Write32(pForwardDecel, 0); //Value

			len = pForwardDecel - pNPCKartPhysPara_RankedMatch;
			Set16(pNPCKartPhysPara_RankedMatch, (WORD)len);
			pNPCKartPhysPara_RankedMatch += len;
		}
		Write8(pNPCKartPhysPara_RankedMatch, 0); //BackwardAccelNum
		for (size_t i = 0; i < n; i++)
		{ //BackwardAccel
			BYTE* pBackwardAccel = pNPCKartPhysPara_RankedMatch;
			Write16(pBackwardAccel, 0); //len

			Write32(pBackwardAccel, 0); //Key
			Write32(pBackwardAccel, 0); //Value

			len = pBackwardAccel - pNPCKartPhysPara_RankedMatch;
			Set16(pNPCKartPhysPara_RankedMatch, (WORD)len);
			pNPCKartPhysPara_RankedMatch += len;
		}
		Write8(pNPCKartPhysPara_RankedMatch, 0); //BackwardDecelNum
		for (size_t i = 0; i < n; i++)
		{ //BackwardDecel
			BYTE* pBackwardDecel = pNPCKartPhysPara_RankedMatch;
			Write16(pBackwardDecel, 0); //len

			Write32(pBackwardDecel, 0); //Key
			Write32(pBackwardDecel, 0); //Value

			len = pBackwardDecel - pNPCKartPhysPara_RankedMatch;
			Set16(pNPCKartPhysPara_RankedMatch, (WORD)len);
			pNPCKartPhysPara_RankedMatch += len;
		}
		Write32(pNPCKartPhysPara_RankedMatch, 0); //CrashCompensatePower
		Write32(pNPCKartPhysPara_RankedMatch, 0); //DefenseRate
		Write32(pNPCKartPhysPara_RankedMatch, 0); //Uin
		Write32(pNPCKartPhysPara_RankedMatch, 0); //SpeedupCardGenRate
		Write32(pNPCKartPhysPara_RankedMatch, 0); //ExtraFuncFlag
		Write8(pNPCKartPhysPara_RankedMatch, 0); //SkatePara
		for (size_t i = 0; i < n; i++)
		{ //hasSkatePara
			BYTE* phasSkatePara = pNPCKartPhysPara_RankedMatch;
			Write16(phasSkatePara, 0); //len

			Write32(phasSkatePara, 0); //TrackSpeed
			Write32(phasSkatePara, 0); //SkateSpeedCoef_AirBigJet
			Write32(phasSkatePara, 0); //SkateSpeedCoef_Jump
			Write32(phasSkatePara, 0); //SkateSpeedCoef_AirJetPoint
			Write32(phasSkatePara, 0); //SkateSpeedCoef_MaxForce
			Write32(phasSkatePara, 0); //OntrackAccRef
			Write32(phasSkatePara, 0); //TrackAccRef
			Write32(phasSkatePara, 0); //DashSkill

			len = phasSkatePara - pNPCKartPhysPara_RankedMatch;
			Set16(pNPCKartPhysPara_RankedMatch, (WORD)len);
			pNPCKartPhysPara_RankedMatch += len;
		}
		Write8(pNPCKartPhysPara_RankedMatch, 0); //HasBattleModeSkillInfoList
		for (size_t i = 0; i < n; i++)
		{ //BattleModeSkillInfoList
			BYTE* pBattleModeSkillInfoList = pNPCKartPhysPara_RankedMatch;
			Write16(pBattleModeSkillInfoList, 0); //len

			Write8(pBattleModeSkillInfoList, 0); //SkillNum
			for (size_t i = 0; i < n; i++)
			{ //SkillInfo
				BYTE* pSkillInfo = pBattleModeSkillInfoList;
				Write16(pSkillInfo, 0); //len

				Write16(pSkillInfo, 0); //SkillId
				Write8(pSkillInfo, 0); //SkillLevel

				len = pSkillInfo - pBattleModeSkillInfoList;
				Set16(pBattleModeSkillInfoList, (WORD)len);
				pBattleModeSkillInfoList += len;
			}

			len = pBattleModeSkillInfoList - pNPCKartPhysPara_RankedMatch;
			Set16(pNPCKartPhysPara_RankedMatch, (WORD)len);
			pNPCKartPhysPara_RankedMatch += len;
		}
		Write32(pNPCKartPhysPara_RankedMatch, 0); //EnergyConvert
		Write16(pNPCKartPhysPara_RankedMatch, 0); //SuperN2ORate
		Write16(pNPCKartPhysPara_RankedMatch, 0); //CollisionLoseRate
		Write8(pNPCKartPhysPara_RankedMatch, 0); //NotInterruptDrift
		Write8(pNPCKartPhysPara_RankedMatch, 0); //AddWeightNum
		Write8(pNPCKartPhysPara_RankedMatch, 0); //WeightNum
		Write8(pNPCKartPhysPara_RankedMatch, 0); //HasAntiCollisionCfg
		for (size_t i = 0; i < n; i++)
		{ //AntiCollistionCfg
			BYTE* pAntiCollistionCfg = pNPCKartPhysPara_RankedMatch;
			Write16(pAntiCollistionCfg, 0); //len

			Write8(pAntiCollistionCfg, 0); //Num
			Write32(pAntiCollistionCfg, 0); //Position[]

			len = pAntiCollistionCfg - pNPCKartPhysPara_RankedMatch;
			Set16(pNPCKartPhysPara_RankedMatch, (WORD)len);
			pNPCKartPhysPara_RankedMatch += len;
		}
		Write8(pNPCKartPhysPara_RankedMatch, 0); //HasBoatParam
		for (size_t i = 0; i < n; i++)
		{ //BoatParam
			BYTE* pBoatParam = pNPCKartPhysPara_RankedMatch;
			Write16(pBoatParam, 0); //len

			Write32(pBoatParam, 0); //DirKeyForceParamC
			Write32(pBoatParam, 0); //DirKeyForceParamD
			Write32(pBoatParam, 0); //DTFLimitAngle
			Write32(pBoatParam, 0); //DTFRatio
			Write32(pBoatParam, 0); //UpKeyVecForce
			Write32(pBoatParam, 0); //UpKeyVecForceParamA
			Write32(pBoatParam, 0); //UpKeyVecForceParamB
			Write32(pBoatParam, 0); //LRKeyVecForce
			Write32(pBoatParam, 0); //LRKeyVecForceParamA
			Write32(pBoatParam, 0); //LRKeyVecForceParamB
			Write32(pBoatParam, 0); //VecForce
			Write32(pBoatParam, 0); //VecForceParamA
			Write32(pBoatParam, 0); //VecForceParamB
			Write32(pBoatParam, 0); //BoatShape[]
			Write32(pBoatParam, 0); //WecEffect
			Write32(pBoatParam, 0); //BannerKeyTwist
			Write32(pBoatParam, 0); //BannerKeyTwistParamA
			Write32(pBoatParam, 0); //BannerKeyTwistParamB
			Write32(pBoatParam, 0); //SuaiJianTwist
			Write32(pBoatParam, 0); //BoatHeighRatio
			Write32(pBoatParam, 0); //BannerTwist
			Write32(pBoatParam, 0); //BannerTwistParamA
			Write32(pBoatParam, 0); //DirUpKeyForce
			Write32(pBoatParam, 0); //DirUpKeyForceParamA
			Write32(pBoatParam, 0); //DirUpKeyForceParamB
			Write32(pBoatParam, 0); //DirKeyForce
			Write32(pBoatParam, 0); //DirKeyForceParamA
			Write32(pBoatParam, 0); //DirKeyForceParamB
			Write32(pBoatParam, 0); //AddNO2PerSec
			Write32(pBoatParam, 0); //BoatAirValue
			WriteUn(pBoatParam, 0); //ifSlidFricForce

			len = pBoatParam - pNPCKartPhysPara_RankedMatch;
			Set16(pNPCKartPhysPara_RankedMatch, (WORD)len);
			pNPCKartPhysPara_RankedMatch += len;
		}
		Write8(pNPCKartPhysPara_RankedMatch, 0); //BoatForwardAccelNum
		for (size_t i = 0; i < n; i++)
		{ //BoatForwardAccel
			BYTE* pBoatForwardAccel = pNPCKartPhysPara_RankedMatch;
			Write16(pBoatForwardAccel, 0); //len

			Write32(pBoatForwardAccel, 0); //Key
			Write32(pBoatForwardAccel, 0); //Value

			len = pBoatForwardAccel - pNPCKartPhysPara_RankedMatch;
			Set16(pNPCKartPhysPara_RankedMatch, (WORD)len);
			pNPCKartPhysPara_RankedMatch += len;
		}
		Write32(pNPCKartPhysPara_RankedMatch, 0); //DirUpKeyForceParamA
		Write32(pNPCKartPhysPara_RankedMatch, 0); //DirUpKeyForceParamB

		len = pNPCKartPhysPara_RankedMatch - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //NPCLevelNum_RankedMatch
	for (size_t i = 0; i < n; i++)
	{ //NPCKartAIPhysPara_RankedMatch
		BYTE* pNPCKartAIPhysPara_RankedMatch = p;
		Write16(pNPCKartAIPhysPara_RankedMatch, 0); //len

		{ //Param
			BYTE* pParam = pNPCKartAIPhysPara_RankedMatch;
			Write16(pParam, 0); //len

			Write32(pParam, 0); //NpcN2OIntervalTime
			Write32(pParam, 0); //NpcTriggerN2ORate
			Write32(pParam, 0); //NpcRestCheckTime
			Write32(pParam, 0); //NpcFixVelocity
			Write32(pParam, 0); //NpcFixVelocityRate
			Write32(pParam, 0); //NpcRunDisHulanThreshold
			Write32(pParam, 0); //NpcSJetRate
			Write32(pParam, 0); //NpcTurnAjustDisHulanRate
			Write8(pParam, 0); //ForwardAccelNum
			for (size_t i = 0; i < n; i++)
			{ //ForwardAccel
				BYTE* pForwardAccel = pParam;
				Write16(pForwardAccel, 0); //len

				Write32(pForwardAccel, 0); //Key
				Write32(pForwardAccel, 0); //Value

				len = pForwardAccel - pParam;
				Set16(pParam, (WORD)len);
				pParam += len;
			}
			Write8(pParam, 0); //BackwardAccelNum
			for (size_t i = 0; i < n; i++)
			{ //BackwardAccel
				BYTE* pBackwardAccel = pParam;
				Write16(pBackwardAccel, 0); //len

				Write32(pBackwardAccel, 0); //Key
				Write32(pBackwardAccel, 0); //Value

				len = pBackwardAccel - pParam;
				Set16(pParam, (WORD)len);
				pParam += len;
			}
			Write32(pParam, 0); //StraightLenThreshold
			Write32(pParam, 0); //NpcDriftRate
			Write8(pParam, 0); //CompensateParamCount
			for (size_t i = 0; i < n; i++)
			{ //CompensateParam
				BYTE* pCompensateParam = pParam;
				Write16(pCompensateParam, 0); //len

				Write32(pCompensateParam, 0); //Percent
				Write32(pCompensateParam, 0); //Value

				len = pCompensateParam - pParam;
				Set16(pParam, (WORD)len);
				pParam += len;
			}

			len = pParam - pNPCKartAIPhysPara_RankedMatch;
			Set16(pNPCKartAIPhysPara_RankedMatch, (WORD)len);
			pNPCKartAIPhysPara_RankedMatch += len;
		}
		Write32(pNPCKartAIPhysPara_RankedMatch, 0); //N2OStartTime
		Write32(pNPCKartAIPhysPara_RankedMatch, 0); //NpcN2OMaxCount
		Write32(pNPCKartAIPhysPara_RankedMatch, 0); //Dis2FirstPlay
		Write32(pNPCKartAIPhysPara_RankedMatch, 0); //LostControlTime
		Write32(pNPCKartAIPhysPara_RankedMatch, 0); //LostInterval
		Write32(pNPCKartAIPhysPara_RankedMatch, 0); //LostControlCount

		len = pNPCKartAIPhysPara_RankedMatch - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //SwitchFlag1
	Write16(p, 0); //MaxQuickLerpThrehold
	Write16(p, 0); //QuickLerpStepCnts
	Write16(p, 0); //LerpSynccpFrequence
	Write16(p, 0); //ClientItemOpenTypeNum
	for (size_t i = 0; i < n; i++)
	{ //ClientItemOpenCfg
		BYTE* pClientItemOpenCfg = p;
		Write16(pClientItemOpenCfg, 0); //len

		Write16(pClientItemOpenCfg, 0); //OpenType
		Write8(pClientItemOpenCfg, 0); //ItemNum
		Write32(pClientItemOpenCfg, 0); //ItemList[]

		len = pClientItemOpenCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //OtherNum
	for (size_t i = 0; i < n; i++)
	{ //CollisionPowerOtherInfo
		BYTE* pCollisionPowerOtherInfo = p;
		Write16(pCollisionPowerOtherInfo, 0); //len

		Write32(pCollisionPowerOtherInfo, 0); //Power
		Write32(pCollisionPowerOtherInfo, 0); //Ratio
		Write32(pCollisionPowerOtherInfo, 0); //Add

		len = pCollisionPowerOtherInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //CollisionMinPower
	Write32(p, 0); //ItemExtendLimit
	Write32(p, 0); //ChattingTalkLevelLimit
	Write32(p, 0); //ChattingSpecialOp
	Write8(p, 0); //ForbidMapNum
	Write32(p, 0); //ForbidMap[]
	Write32(p, 0); //MaxBuySpeedNum
	Write8(p, 0); //ClientItemIconNum
	for (size_t i = 0; i < n; i++)
	{ //ClientIconCfg
		BYTE* pClientIconCfg = p;
		Write16(pClientIconCfg, 0); //len

		Write32(pClientIconCfg, 0); //ItemID
		Write8(pClientIconCfg, 0); //IconPathLen

		len = pClientIconCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //TDCBlackCarNum
	Write32(p, 0); //TDCBlackCar[]
	Write8(p, 0); //TDCBlackCarTypeNum
	Write32(p, 0); //TDCBlackCarType[]
	Write8(p, 0); //TDCBlackCarType2ndNum
	Write32(p, 0); //TDCBlackCarType2nd[]
	{ //ClientFrameRateCfg
		BYTE* pClientFrameRateCfg = p;
		Write16(pClientFrameRateCfg, 0); //len

		Write32(pClientFrameRateCfg, 0); //MinFrameRate
		Write32(pClientFrameRateCfg, 0); //MaxFrameRate
		Write32(pClientFrameRateCfg, 0); //FrameStep
		Write32(pClientFrameRateCfg, 0); //CurrentFrameRate

		len = pClientFrameRateCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReportFrameRateValue
	Write16(p, 0); //FrameOpSpan
	Write8(p, 0); //VideoSwitch
	Write8(p, 0); //KartRefitCardTypeNum
	for (size_t i = 0; i < n; i++)
	{ //KartRefitCardCfg
		BYTE* pKartRefitCardCfg = p;
		Write16(pKartRefitCardCfg, 0); //len

		Write32(pKartRefitCardCfg, 0); //RefitCardID
		Write8(pKartRefitCardCfg, 0); //EffectNum
		for (size_t i = 0; i < n; i++)
		{ //RefitCardEffect
			BYTE* pRefitCardEffect = pKartRefitCardCfg;
			Write16(pRefitCardEffect, 0); //len

			Write8(pRefitCardEffect, 0); //RefitID
			Write8(pRefitCardEffect, 0); //ModifyValue

			len = pRefitCardEffect - pKartRefitCardCfg;
			Set16(pKartRefitCardCfg, (WORD)len);
			pKartRefitCardCfg += len;
		}
		Write8(pKartRefitCardCfg, 0); //KartNum
		Write32(pKartRefitCardCfg, 0); //KartList[]

		len = pKartRefitCardCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 25066, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestC2GGetHRoomNum(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseC2GGetHRoomNum(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //HRoomNum

	len = p - buf;
	SendToClient(Client, 11040, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GGetHRoomList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT BeginIdx = Read16(p);
	USHORT EndIdx = Read16(p);

}

void ResponseC2GGetHRoomList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //BeginIdx
	Write16(p, 0); //EndIdx
	Write8(p, 0); //HRoomNum
	for (size_t i = 0; i < n; i++)
	{ //HRoomDisplayInfo
		BYTE* pHRoomDisplayInfo = p;
		Write16(pHRoomDisplayInfo, 0); //len

		Write16(pHRoomDisplayInfo, 0); //SvrID
		Write32(pHRoomDisplayInfo, 0); //HRoomID
		Write8(pHRoomDisplayInfo, 0); //TotalPlayerNum
		Write16(pHRoomDisplayInfo, 0); //LeftTime
		Write32(pHRoomDisplayInfo, 0); //Uin1
		Write8(pHRoomDisplayInfo, 0); //NameLen1
		Write32(pHRoomDisplayInfo, 0); //Uin2
		Write8(pHRoomDisplayInfo, 0); //NameLen2
		WriteUn(pHRoomDisplayInfo, 0); //HRoomType
		{ //DynInfo
			BYTE* pDynInfo = pHRoomDisplayInfo;
			Write16(pDynInfo, 0); //len

			Write8(pDynInfo, 0); //HRoomNameLen
			Write8(pDynInfo, 0); //CurrentPlayerNum
			WriteUn(pDynInfo, 0); //OpenFlag

			len = pDynInfo - pHRoomDisplayInfo;
			Set16(pHRoomDisplayInfo, (WORD)len);
			pHRoomDisplayInfo += len;
		}

		len = pHRoomDisplayInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //TotalRoomNum

	len = p - buf;
	SendToClient(Client, 11041, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GGetHRoomBookingInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseC2GGetHRoomBookingInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //TimeZoneNum
	for (size_t i = 0; i < n; i++)
	{ //BookingInfo
		BYTE* pBookingInfo = p;
		Write16(pBookingInfo, 0); //len

		Write8(pBookingInfo, 0); //BeginHour
		Write16(pBookingInfo, 0); //AvailableNum
		Write16(pBookingInfo, 0); //TotalNum

		len = pBookingInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11042, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GGetHRoomPhyInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	bool TargetType = Read8(p);
	UINT TargetID = Read32(p);

}

void ResponseC2GGetHRoomPhyInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //TargetType
	Write16(p, 0); //ServerID
	{ //PhyInfo
		BYTE* pPhyInfo = p;
		Write16(pPhyInfo, 0); //len

		WriteU(pPhyInfo, 0); //ExtenalIP
		Write8(pPhyInfo, 0); //ExtTcpPortNum
		Write16(pPhyInfo, 0); //ExternalTcpPort[]
		Write8(pPhyInfo, 0); //ExtUdpPortNum
		Write16(pPhyInfo, 0); //ExternalUdpPort[]

		len = pPhyInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //HRoomID

	len = p - buf;
	SendToClient(Client, 11043, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GBookingHRoom(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	Un HRoomType = ReadUn(p);
	Un OpenFlag = ReadUn(p);
	bool BeginHour = Read8(p);
	bool HRoomNameLen = Read8(p);

}

void ResponseC2GBookingHRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 11044, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GGetBookingRoom(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseC2GGetBookingRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	{ //HRoomInfo
		BYTE* pHRoomInfo = p;
		Write16(pHRoomInfo, 0); //len

		Write8(pHRoomInfo, 0); //HRoomNameLen
		WriteUn(pHRoomInfo, 0); //OpenFlag

		len = pHRoomInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11046, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GSendWeddingMail(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	bool GuestNum = Read8(p);
	UINT[] GuestUin[] = Read32(p);

}

void ResponseC2GSendWeddingMail(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 11045, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyG2CWeddingMsg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ContentLen
	Write32(p, 0); //HRoomID

	len = p - buf;
	SendToClient(Client, 11047, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestG2CTodayPreWeddingStatus(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR CliContex = Read8(p);

}

void ResponseG2CTodayPreWeddingStatus(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write8(p, 0); //CliContex
	Write8(p, 0); //HasBookingHRoom
	Write8(p, 0); //HasSendWeddingMail

	len = p - buf;
	SendToClient(Client, 11048, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2HCEnterHRoom(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT HRoomID = Read32(p);

}

void ResponseC2HCEnterHRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //HRoomID
	Write16(p, 0); //HRoomObjID
	Write8(p, 0); //PlayerIdentify
	Write16(p, 0); //SceneID
	{ //HeroMoveInfo
		BYTE* pHeroMoveInfo = p;
		Write16(pHeroMoveInfo, 0); //len

		Write32(pHeroMoveInfo, 0); //Uin
		Write8(pHeroMoveInfo, 0); //WalkStatue
		Write32(pHeroMoveInfo, 0); //Posion[]
		Write32(pHeroMoveInfo, 0); //Ori[]
		Write32(pHeroMoveInfo, 0); //AttachUin
		Write32(pHeroMoveInfo, 0); //WalkExtState
		Write8(pHeroMoveInfo, 0); //Nums
		Write32(pHeroMoveInfo, 0); //PermitSitHorsePetUins[]
		Write32(pHeroMoveInfo, 0); //EquipedPetID
		Write32(pHeroMoveInfo, 0); //EquipedPetStatus
		Write32(pHeroMoveInfo, 0); //PetPKResultStatus
		Write16(pHeroMoveInfo, 0); //HeroMajorState
		Write16(pHeroMoveInfo, 0); //HorsePetStatus

		len = pHeroMoveInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //Uin1
	Write8(p, 0); //NameLen1
	Write32(p, 0); //Uin2
	Write8(p, 0); //NameLen2
	Write8(p, 0); //HRoomType

	len = p - buf;
	SendToClient(Client, 11060, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2HCGetHRoomInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseC2HCGetHRoomInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	{ //HRoomInfo
		BYTE* pHRoomInfo = p;
		Write16(pHRoomInfo, 0); //len

		Write8(pHRoomInfo, 0); //HRoomNameLen
		WriteUn(pHRoomInfo, 0); //OpenFlag

		len = pHRoomInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11061, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2HCModifyHRoomInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	{ //HRoomInfo
		BYTE* pHRoomInfo = p;
		len = Read16(pHRoomInfo);

		bool HRoomNameLen = Read8(pHRoomInfo);
		Un OpenFlag = ReadUn(pHRoomInfo);

		p += len;
	}

}

void ResponseC2HCModifyHRoomInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	{ //HRoomInfo
		BYTE* pHRoomInfo = p;
		Write16(pHRoomInfo, 0); //len

		Write8(pHRoomInfo, 0); //HRoomNameLen
		WriteUn(pHRoomInfo, 0); //OpenFlag

		len = pHRoomInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11062, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2HCGetHRoomStatus(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseC2HCGetHRoomStatus(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //Status
	Write8(p, 0); //Num

	len = p - buf;
	SendToClient(Client, 11063, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2HCSwitchHRoomStatus(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	bool Status = Read8(p);

}

void ResponseC2HCSwitchHRoomStatus(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //Status

	len = p - buf;
	SendToClient(Client, 11064, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2HCInviteWeddingGuest(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	bool GuestNum = Read8(p);
	UINT[] GuestUin[] = Read32(p);

}

void ResponseC2HCInviteWeddingGuest(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 11065, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2HCReportQTEAction(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT QTEActionSeq = Read32(p);
	bool Result = Read8(p);

}

void ResponseC2HCReportQTEAction(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //QTEActionSeq
	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 11066, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2HCPickupItem(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT ItemPositionIdx = Read16(p);

}

void ResponseC2HCPickupItem(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //ItemPositionIdx
	Write32(p, 0); //ItemType
	{ //Item
		BYTE* pItem = p;
		Write16(pItem, 0); //len

		Write32(pItem, 0); //ItemID
		Write32(pItem, 0); //ItemNum
		Write32(pItem, 0); //AvailPeriod
		Write8(pItem, 0); //Status
		WriteUn(pItem, 0); //ObtainTime
		Write32(pItem, 0); //OtherAttribute
		Write16(pItem, 0); //ItemType

		len = pItem - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11067, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2HCKickPlayer(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT DstUin = Read32(p);

}

void ResponseC2HCKickPlayer(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //DstUin

	len = p - buf;
	SendToClient(Client, 11068, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2CKickPlayer(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT DstUin = Read32(p);

}

void ResponseC2CKickplayer(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //DstUin

	len = p - buf;
	SendToClient(Client, 1670, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyC2CLeaveRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //RoomID
	Write32(p, 0); //Time
	Write8(p, 0); //Reason

	len = p - buf;
	SendToClient(Client, 1671, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestC2HCGetAllGenItems(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseC2HCGetAllGenItems(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //ItemNum
	for (size_t i = 0; i < n; i++)
	{ //Item
		BYTE* pItem = p;
		Write16(pItem, 0); //len

		Write32(pItem, 0); //ItemID
		Write16(pItem, 0); //ItemPositionIdx
		Write32(pItem, 0); //ItemType

		len = pItem - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11069, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyHC2CWeddingStatus(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //Status
	Write32(p, 0); //TimePass
	Write32(p, 0); //LeftTime
	Write32(p, 0); //TotalTimePass
	Write32(p, 0); //TotalLeftTime
	Write8(p, 0); //Num
	Write8(p, 0); //InfoLen

	len = p - buf;
	SendToClient(Client, 11070, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyHC2CQTEEvent(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //QTEActionSeq
	Write8(p, 0); //ActionKeyNum
	Write32(p, 0); //MaxInterval

	len = p - buf;
	SendToClient(Client, 11071, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyHC2CQTEResult(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //QTEActionSeq
	Write16(p, 0); //Result

	len = p - buf;
	SendToClient(Client, 11076, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyHC2CGenItemEvent(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //ItemNum
	for (size_t i = 0; i < n; i++)
	{ //Item
		BYTE* pItem = p;
		Write16(pItem, 0); //len

		Write32(pItem, 0); //ItemID
		Write16(pItem, 0); //ItemPositionIdx
		Write32(pItem, 0); //ItemType

		len = pItem - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11072, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyHC2CPickUpItem(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //PlayerUin
	Write16(p, 0); //ItemPositionIdx
	Write32(p, 0); //ItemType
	WriteString(p, 0); //NickName[]

	len = p - buf;
	SendToClient(Client, 11073, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyHC2CWeddingBroadcast(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //ContentLen

	len = p - buf;
	SendToClient(Client, 11074, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyHC2CLeaveHRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //HRoomID
	Write32(p, 0); //Time
	Write8(p, 0); //Reason
	{ //StatInfo
		BYTE* pStatInfo = p;
		Write16(pStatInfo, 0); //len

		Write8(pStatInfo, 0); //Type
		Write16(pStatInfo, 0); //AttendNum
		Write16(pStatInfo, 0); //TotalItemNum1
		Write16(pStatInfo, 0); //TotalItemNum2
		Write8(pStatInfo, 0); //Num
		for (size_t i = 0; i < n; i++)
		{ //PlayerStatInfo
			BYTE* pPlayerStatInfo = pStatInfo;
			Write16(pPlayerStatInfo, 0); //len

			Write8(pPlayerStatInfo, 0); //NameLen
			Write16(pPlayerStatInfo, 0); //ItemNum1

			len = pPlayerStatInfo - pStatInfo;
			Set16(pStatInfo, (WORD)len);
			pStatInfo += len;
		}

		len = pStatInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11075, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetGuildMemberList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	char Type = Read8(p);

}

void ResponseGetGuildMemberList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	WriteUn(p, 0); //Uin
	Write16(p, 0); //MemberNum
	for (size_t i = 0; i < n; i++)
	{ //Member
		BYTE* pMember = p;
		Write16(pMember, 0); //len

		Write32(pMember, 0); //Uin
		WriteString(pMember, 0); //NickName[]
		Write8(pMember, 0); //OnlineFlag
		Write32(pMember, 0); //Score
		Write32(pMember, 0); //LastLogin
		Write32(pMember, 0); //LastEnlistedTime
		Write8(pMember, 0); //EnlistFlag
		Write32(pMember, 0); //Duty
		Write32(pMember, 0); //Prosperity
		Write32(pMember, 0); //JoinGuildTime

		len = pMember - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //Type
	WriteString(p, 0); //GuildName[]

	len = p - buf;
	SendToClient(Client, 15037, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GCancelHRoomBooking(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseC2GCancelHRoomBooking(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 11049, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestKartRefitInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	U Time = ReadU(p);

}

void ResponseKartRefitInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write16(p, 0); //KartNum
	for (size_t i = 0; i < n; i++)
	{ //KartRefitInfo
		BYTE* pKartRefitInfo = p;
		Write16(pKartRefitInfo, 0); //len

		Write32(pKartRefitInfo, 0); //Uin
		Write32(pKartRefitInfo, 0); //KartId
		Write32(pKartRefitInfo, 0); //RefitCout
		Write16(pKartRefitInfo, 0); //MaxFlags
		Write16(pKartRefitInfo, 0); //WWeight
		Write16(pKartRefitInfo, 0); //SpeedWeight
		Write16(pKartRefitInfo, 0); //JetWeight
		Write16(pKartRefitInfo, 0); //SJetWeight
		Write16(pKartRefitInfo, 0); //AccuWeight
		Write32(pKartRefitInfo, 0); //ShapeRefitCount
		Write32(pKartRefitInfo, 0); //KartHeadRefitItemID
		Write32(pKartRefitInfo, 0); //KartTailRefitItemID
		Write32(pKartRefitInfo, 0); //KartFlankRefitItemID
		Write32(pKartRefitInfo, 0); //KartTireRefitItemID
		{ //KartRefitExInfo
			BYTE* pKartRefitExInfo = pKartRefitInfo;
			Write16(pKartRefitExInfo, 0); //len

			Write8(pKartRefitExInfo, 0); //SpeedRefitStar
			Write8(pKartRefitExInfo, 0); //JetRefitStar
			Write8(pKartRefitExInfo, 0); //SJetRefitStar
			Write8(pKartRefitExInfo, 0); //AccuRefitStar
			Write8(pKartRefitExInfo, 0); //SpeedAddRatio
			Write8(pKartRefitExInfo, 0); //JetAddRatio
			Write8(pKartRefitExInfo, 0); //SJetAddRatio
			Write8(pKartRefitExInfo, 0); //AccuAddRatio

			len = pKartRefitExInfo - pKartRefitInfo;
			Set16(pKartRefitInfo, (WORD)len);
			pKartRefitInfo += len;
		}
		Write32(pKartRefitInfo, 0); //SecondRefitCount
		Write16(pKartRefitInfo, 0); //Speed2Weight
		Write16(pKartRefitInfo, 0); //DriftVecWeight
		Write16(pKartRefitInfo, 0); //AdditionalZSpeedWeight
		Write16(pKartRefitInfo, 0); //AntiCollisionWeight
		Write16(pKartRefitInfo, 0); //LuckyValue
		Write16(pKartRefitInfo, 0); //RefitLuckyValueMaxWeight
		Write32(pKartRefitInfo, 0); //ShapeSuitID
		Write8(pKartRefitInfo, 0); //LegendSuitLevel
		Write32(pKartRefitInfo, 0); //LegendSuitLevelChoice
		Write32(pKartRefitInfo, 0); //ShapeLegendSuitID

		len = pKartRefitInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //MaxLuckyWeight
	Write32(p, 0); //LuckyValue
	Write32(p, 0); //MaxLuckyValue
	Write8(p, 0); //LevelNum
	for (size_t i = 0; i < n; i++)
	{ //LuckyValueInfo
		BYTE* pLuckyValueInfo = p;
		Write16(pLuckyValueInfo, 0); //len

		Write32(pLuckyValueInfo, 0); //Level
		Write32(pLuckyValueInfo, 0); //LuckyValue

		len = pLuckyValueInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasMoreInfo

	len = p - buf;
	SendToClient(Client, 271, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void ResponseKartRefitInfoMoreInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //KartNum
	for (size_t i = 0; i < n; i++)
	{ //KartRefitInfo
		BYTE* pKartRefitInfo = p;
		Write16(pKartRefitInfo, 0); //len

		Write32(pKartRefitInfo, 0); //Uin
		Write32(pKartRefitInfo, 0); //KartId
		Write32(pKartRefitInfo, 0); //RefitCout
		Write16(pKartRefitInfo, 0); //MaxFlags
		Write16(pKartRefitInfo, 0); //WWeight
		Write16(pKartRefitInfo, 0); //SpeedWeight
		Write16(pKartRefitInfo, 0); //JetWeight
		Write16(pKartRefitInfo, 0); //SJetWeight
		Write16(pKartRefitInfo, 0); //AccuWeight
		Write32(pKartRefitInfo, 0); //ShapeRefitCount
		Write32(pKartRefitInfo, 0); //KartHeadRefitItemID
		Write32(pKartRefitInfo, 0); //KartTailRefitItemID
		Write32(pKartRefitInfo, 0); //KartFlankRefitItemID
		Write32(pKartRefitInfo, 0); //KartTireRefitItemID
		{ //KartRefitExInfo
			BYTE* pKartRefitExInfo = pKartRefitInfo;
			Write16(pKartRefitExInfo, 0); //len

			Write8(pKartRefitExInfo, 0); //SpeedRefitStar
			Write8(pKartRefitExInfo, 0); //JetRefitStar
			Write8(pKartRefitExInfo, 0); //SJetRefitStar
			Write8(pKartRefitExInfo, 0); //AccuRefitStar
			Write8(pKartRefitExInfo, 0); //SpeedAddRatio
			Write8(pKartRefitExInfo, 0); //JetAddRatio
			Write8(pKartRefitExInfo, 0); //SJetAddRatio
			Write8(pKartRefitExInfo, 0); //AccuAddRatio

			len = pKartRefitExInfo - pKartRefitInfo;
			Set16(pKartRefitInfo, (WORD)len);
			pKartRefitInfo += len;
		}
		Write32(pKartRefitInfo, 0); //SecondRefitCount
		Write16(pKartRefitInfo, 0); //Speed2Weight
		Write16(pKartRefitInfo, 0); //DriftVecWeight
		Write16(pKartRefitInfo, 0); //AdditionalZSpeedWeight
		Write16(pKartRefitInfo, 0); //AntiCollisionWeight
		Write16(pKartRefitInfo, 0); //LuckyValue
		Write16(pKartRefitInfo, 0); //RefitLuckyValueMaxWeight
		Write32(pKartRefitInfo, 0); //ShapeSuitID
		Write8(pKartRefitInfo, 0); //LegendSuitLevel
		Write32(pKartRefitInfo, 0); //LegendSuitLevelChoice
		Write32(pKartRefitInfo, 0); //ShapeLegendSuitID

		len = pKartRefitInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasNext

	len = p - buf;
	SendToClient(Client, 318, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestShapeRefit(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	U Time = ReadU(p);
	int KartItemID = Read32(p);
	int RefitItemID = Read32(p);
	UCHAR KartNameLen = Read8(p);

}

void ResponseShapeRefit(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen
	Write32(p, 0); //KartItemID
	Write32(p, 0); //RefitItemID
	Write8(p, 0); //RefitLocation
	{ //KartRefitExInfo
		BYTE* pKartRefitExInfo = p;
		Write16(pKartRefitExInfo, 0); //len

		Write8(pKartRefitExInfo, 0); //SpeedRefitStar
		Write8(pKartRefitExInfo, 0); //JetRefitStar
		Write8(pKartRefitExInfo, 0); //SJetRefitStar
		Write8(pKartRefitExInfo, 0); //AccuRefitStar
		Write8(pKartRefitExInfo, 0); //SpeedAddRatio
		Write8(pKartRefitExInfo, 0); //JetAddRatio
		Write8(pKartRefitExInfo, 0); //SJetAddRatio
		Write8(pKartRefitExInfo, 0); //AccuAddRatio

		len = pKartRefitExInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 272, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestSaveShapeRefit(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	U Time = ReadU(p);
	int KartItemID = Read32(p);
	UCHAR RefitItemNum = Read8(p);
	int[] RefitItemID[] = Read32(p);
	int ShapeSuitID = Read32(p);

}

void ResponseSaveShapeRefit(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen
	Write32(p, 0); //KartItemID
	{ //KartRefitExInfo
		BYTE* pKartRefitExInfo = p;
		Write16(pKartRefitExInfo, 0); //len

		Write8(pKartRefitExInfo, 0); //SpeedRefitStar
		Write8(pKartRefitExInfo, 0); //JetRefitStar
		Write8(pKartRefitExInfo, 0); //SJetRefitStar
		Write8(pKartRefitExInfo, 0); //AccuRefitStar
		Write8(pKartRefitExInfo, 0); //SpeedAddRatio
		Write8(pKartRefitExInfo, 0); //JetAddRatio
		Write8(pKartRefitExInfo, 0); //SJetAddRatio
		Write8(pKartRefitExInfo, 0); //AccuAddRatio

		len = pKartRefitExInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //RefitItemNum
	Write32(p, 0); //RefitItemID[]
	Write32(p, 0); //ShapeSuitID
	{ //RefitClientInfo
		BYTE* pRefitClientInfo = p;
		Write16(pRefitClientInfo, 0); //len

		Write32(pRefitClientInfo, 0); //Uin
		Write32(pRefitClientInfo, 0); //KartId
		Write32(pRefitClientInfo, 0); //RefitCout
		Write16(pRefitClientInfo, 0); //MaxFlags
		Write16(pRefitClientInfo, 0); //WWeight
		Write16(pRefitClientInfo, 0); //SpeedWeight
		Write16(pRefitClientInfo, 0); //JetWeight
		Write16(pRefitClientInfo, 0); //SJetWeight
		Write16(pRefitClientInfo, 0); //AccuWeight
		Write32(pRefitClientInfo, 0); //ShapeRefitCount
		Write32(pRefitClientInfo, 0); //KartHeadRefitItemID
		Write32(pRefitClientInfo, 0); //KartTailRefitItemID
		Write32(pRefitClientInfo, 0); //KartFlankRefitItemID
		Write32(pRefitClientInfo, 0); //KartTireRefitItemID
		{ //KartRefitExInfo
			BYTE* pKartRefitExInfo = pRefitClientInfo;
			Write16(pKartRefitExInfo, 0); //len

			Write8(pKartRefitExInfo, 0); //SpeedRefitStar
			Write8(pKartRefitExInfo, 0); //JetRefitStar
			Write8(pKartRefitExInfo, 0); //SJetRefitStar
			Write8(pKartRefitExInfo, 0); //AccuRefitStar
			Write8(pKartRefitExInfo, 0); //SpeedAddRatio
			Write8(pKartRefitExInfo, 0); //JetAddRatio
			Write8(pKartRefitExInfo, 0); //SJetAddRatio
			Write8(pKartRefitExInfo, 0); //AccuAddRatio

			len = pKartRefitExInfo - pRefitClientInfo;
			Set16(pRefitClientInfo, (WORD)len);
			pRefitClientInfo += len;
		}
		Write32(pRefitClientInfo, 0); //SecondRefitCount
		Write16(pRefitClientInfo, 0); //Speed2Weight
		Write16(pRefitClientInfo, 0); //DriftVecWeight
		Write16(pRefitClientInfo, 0); //AdditionalZSpeedWeight
		Write16(pRefitClientInfo, 0); //AntiCollisionWeight
		Write16(pRefitClientInfo, 0); //LuckyValue
		Write16(pRefitClientInfo, 0); //RefitLuckyValueMaxWeight
		Write32(pRefitClientInfo, 0); //ShapeSuitID
		Write8(pRefitClientInfo, 0); //LegendSuitLevel
		Write32(pRefitClientInfo, 0); //LegendSuitLevelChoice
		Write32(pRefitClientInfo, 0); //ShapeLegendSuitID

		len = pRefitClientInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 316, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetShapeRefitCfg(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	U Time = ReadU(p);

}

void ResponseGetShapeRefitCfg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //KartShapeRefitSuitNum
	for (size_t i = 0; i < n; i++)
	{ //ShapeRefitSuit
		BYTE* pShapeRefitSuit = p;
		Write16(pShapeRefitSuit, 0); //len

		Write32(pShapeRefitSuit, 0); //KartID
		Write8(pShapeRefitSuit, 0); //KarNameLen
		Write8(pShapeRefitSuit, 0); //RefitItemNum
		Write32(pShapeRefitSuit, 0); //RefitItem[]
		Write8(pShapeRefitSuit, 0); //EffectNum
		for (size_t i = 0; i < n; i++)
		{ //RefitEffects
			BYTE* pRefitEffects = pShapeRefitSuit;
			Write16(pRefitEffects, 0); //len

			Write16(pRefitEffects, 0); //EffectID
			Write8(pRefitEffects, 0); //Level
			Write32(pRefitEffects, 0); //Value1
			Write32(pRefitEffects, 0); //Value2
			Write8(pRefitEffects, 0); //ResourceLen
			Write8(pRefitEffects, 0); //EffectResLen
			Write8(pRefitEffects, 0); //Grade

			len = pRefitEffects - pShapeRefitSuit;
			Set16(pShapeRefitSuit, (WORD)len);
			pShapeRefitSuit += len;
		}
		Write16(pShapeRefitSuit, 0); //Grade
		Write16(pShapeRefitSuit, 0); //DressPoint
		Write16(pShapeRefitSuit, 0); //CarLibraryCollectValue
		Write8(pShapeRefitSuit, 0); //RefitModifyNum
		for (size_t i = 0; i < n; i++)
		{ //RefitModify
			BYTE* pRefitModify = pShapeRefitSuit;
			Write16(pRefitModify, 0); //len

			Write16(pRefitModify, 0); //RefitID
			Write8(pRefitModify, 0); //RefitModify
			Write32(pRefitModify, 0); //RefitLimitInc
			Write32(pRefitModify, 0); //RefitInc

			len = pRefitModify - pShapeRefitSuit;
			Set16(pShapeRefitSuit, (WORD)len);
			pShapeRefitSuit += len;
		}
		Write8(pShapeRefitSuit, 0); //HasTurnModify
		for (size_t i = 0; i < n; i++)
		{ //TurnModify
			BYTE* pTurnModify = pShapeRefitSuit;
			Write16(pTurnModify, 0); //len

			Write32(pTurnModify, 0); //BaseTurnRate
			Write32(pTurnModify, 0); //VolatileTurnRate
			Write32(pTurnModify, 0); //MaxTurnSpeed
			Write32(pTurnModify, 0); //MinTurnSpeed
			Write32(pTurnModify, 0); //MaxAccuTime
			Write32(pTurnModify, 0); //BaseAccuRate
			Write32(pTurnModify, 0); //MaxAffectSpeed

			len = pTurnModify - pShapeRefitSuit;
			Set16(pShapeRefitSuit, (WORD)len);
			pShapeRefitSuit += len;
		}
		Write32(pShapeRefitSuit, 0); //ShapeSuitID
		Write8(pShapeRefitSuit, 0); //RefitAddtionNum
		Write32(pShapeRefitSuit, 0); //RefitAddition[]
		Write8(pShapeRefitSuit, 0); //GradeResourceLen

		len = pShapeRefitSuit - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //KartShapeRefitLegendNum
	for (size_t i = 0; i < n; i++)
	{ //ShapeRefitLegend
		BYTE* pShapeRefitLegend = p;
		Write16(pShapeRefitLegend, 0); //len

		Write32(pShapeRefitLegend, 0); //KartID
		Write8(pShapeRefitLegend, 0); //KarNameLen
		Write16(pShapeRefitLegend, 0); //Grade
		Write8(pShapeRefitLegend, 0); //GradeResourceLen
		Write8(pShapeRefitLegend, 0); //LevelNum
		for (size_t i = 0; i < n; i++)
		{ //LevelCfg
			BYTE* pLevelCfg = pShapeRefitLegend;
			Write16(pLevelCfg, 0); //len

			Write8(pLevelCfg, 0); //Level
			Write8(pLevelCfg, 0); //RefitItemNum
			Write32(pLevelCfg, 0); //RefitItem[]
			Write8(pLevelCfg, 0); //EffectNum
			for (size_t i = 0; i < n; i++)
			{ //RefitEffects
				BYTE* pRefitEffects = pLevelCfg;
				Write16(pRefitEffects, 0); //len

				Write16(pRefitEffects, 0); //EffectID
				Write8(pRefitEffects, 0); //Level
				Write32(pRefitEffects, 0); //Value1
				Write32(pRefitEffects, 0); //Value2
				Write8(pRefitEffects, 0); //ResourceLen
				Write8(pRefitEffects, 0); //EffectResLen
				Write8(pRefitEffects, 0); //Grade

				len = pRefitEffects - pLevelCfg;
				Set16(pLevelCfg, (WORD)len);
				pLevelCfg += len;
			}
			Write16(pLevelCfg, 0); //DressPoint
			Write16(pLevelCfg, 0); //CarLibraryCollectValue
			Write8(pLevelCfg, 0); //RefitModifyNum
			for (size_t i = 0; i < n; i++)
			{ //RefitModify
				BYTE* pRefitModify = pLevelCfg;
				Write16(pRefitModify, 0); //len

				Write16(pRefitModify, 0); //RefitID
				Write8(pRefitModify, 0); //RefitModify
				Write32(pRefitModify, 0); //RefitLimitInc
				Write32(pRefitModify, 0); //RefitInc

				len = pRefitModify - pLevelCfg;
				Set16(pLevelCfg, (WORD)len);
				pLevelCfg += len;
			}
			Write8(pLevelCfg, 0); //HasTurnModify
			for (size_t i = 0; i < n; i++)
			{ //TurnModify
				BYTE* pTurnModify = pLevelCfg;
				Write16(pTurnModify, 0); //len

				Write32(pTurnModify, 0); //BaseTurnRate
				Write32(pTurnModify, 0); //VolatileTurnRate
				Write32(pTurnModify, 0); //MaxTurnSpeed
				Write32(pTurnModify, 0); //MinTurnSpeed
				Write32(pTurnModify, 0); //MaxAccuTime
				Write32(pTurnModify, 0); //BaseAccuRate
				Write32(pTurnModify, 0); //MaxAffectSpeed

				len = pTurnModify - pLevelCfg;
				Set16(pLevelCfg, (WORD)len);
				pLevelCfg += len;
			}
			Write32(pLevelCfg, 0); //ShapeSuitID
			Write8(pLevelCfg, 0); //ConsumeNum
			for (size_t i = 0; i < n; i++)
			{ //ConsumInfo
				BYTE* pConsumInfo = pLevelCfg;
				Write16(pConsumInfo, 0); //len

				Write32(pConsumInfo, 0); //ItemID
				Write32(pConsumInfo, 0); //ItemNum
				Write32(pConsumInfo, 0); //ItemPeriod

				len = pConsumInfo - pLevelCfg;
				Set16(pLevelCfg, (WORD)len);
				pLevelCfg += len;
			}

			len = pLevelCfg - pShapeRefitLegend;
			Set16(pShapeRefitLegend, (WORD)len);
			pShapeRefitLegend += len;
		}
		Write32(pShapeRefitLegend, 0); //ShapeSuitID
		{ //MaxConsumInfo
			BYTE* pMaxConsumInfo = pShapeRefitLegend;
			Write16(pMaxConsumInfo, 0); //len

			Write32(pMaxConsumInfo, 0); //ItemID
			Write32(pMaxConsumInfo, 0); //ItemNum
			Write32(pMaxConsumInfo, 0); //ItemPeriod

			len = pMaxConsumInfo - pShapeRefitLegend;
			Set16(pShapeRefitLegend, (WORD)len);
			pShapeRefitLegend += len;
		}
		Write8(pShapeRefitLegend, 0); //LegendSkinType

		len = pShapeRefitLegend - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 317, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestShapeLegendOperate(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	U Time = ReadU(p);
	UCHAR OpType = Read8(p);
	int ShapeID = Read32(p);
	UCHAR ShapeLevel = Read8(p);
	int NewShowChoice = Read32(p);

}

void ResponseShapeLegendOperate(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen
	Write8(p, 0); //OpType
	Write16(p, 0); //ShapeNum
	for (size_t i = 0; i < n; i++)
	{ //ShapeInfo
		BYTE* pShapeInfo = p;
		Write16(pShapeInfo, 0); //len

		Write32(pShapeInfo, 0); //ShapeID
		Write8(pShapeInfo, 0); //ShapeLevel
		Write32(pShapeInfo, 0); //ShowChoice

		len = pShapeInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //ShapeID
	Write8(p, 0); //ShapeLevel
	Write8(p, 0); //HasRefit
	for (size_t i = 0; i < n; i++)
	{ //RefitClientInfo
		BYTE* pRefitClientInfo = p;
		Write16(pRefitClientInfo, 0); //len

		Write32(pRefitClientInfo, 0); //Uin
		Write32(pRefitClientInfo, 0); //KartId
		Write32(pRefitClientInfo, 0); //RefitCout
		Write16(pRefitClientInfo, 0); //MaxFlags
		Write16(pRefitClientInfo, 0); //WWeight
		Write16(pRefitClientInfo, 0); //SpeedWeight
		Write16(pRefitClientInfo, 0); //JetWeight
		Write16(pRefitClientInfo, 0); //SJetWeight
		Write16(pRefitClientInfo, 0); //AccuWeight
		Write32(pRefitClientInfo, 0); //ShapeRefitCount
		Write32(pRefitClientInfo, 0); //KartHeadRefitItemID
		Write32(pRefitClientInfo, 0); //KartTailRefitItemID
		Write32(pRefitClientInfo, 0); //KartFlankRefitItemID
		Write32(pRefitClientInfo, 0); //KartTireRefitItemID
		{ //KartRefitExInfo
			BYTE* pKartRefitExInfo = pRefitClientInfo;
			Write16(pKartRefitExInfo, 0); //len

			Write8(pKartRefitExInfo, 0); //SpeedRefitStar
			Write8(pKartRefitExInfo, 0); //JetRefitStar
			Write8(pKartRefitExInfo, 0); //SJetRefitStar
			Write8(pKartRefitExInfo, 0); //AccuRefitStar
			Write8(pKartRefitExInfo, 0); //SpeedAddRatio
			Write8(pKartRefitExInfo, 0); //JetAddRatio
			Write8(pKartRefitExInfo, 0); //SJetAddRatio
			Write8(pKartRefitExInfo, 0); //AccuAddRatio

			len = pKartRefitExInfo - pRefitClientInfo;
			Set16(pRefitClientInfo, (WORD)len);
			pRefitClientInfo += len;
		}
		Write32(pRefitClientInfo, 0); //SecondRefitCount
		Write16(pRefitClientInfo, 0); //Speed2Weight
		Write16(pRefitClientInfo, 0); //DriftVecWeight
		Write16(pRefitClientInfo, 0); //AdditionalZSpeedWeight
		Write16(pRefitClientInfo, 0); //AntiCollisionWeight
		Write16(pRefitClientInfo, 0); //LuckyValue
		Write16(pRefitClientInfo, 0); //RefitLuckyValueMaxWeight
		Write32(pRefitClientInfo, 0); //ShapeSuitID
		Write8(pRefitClientInfo, 0); //LegendSuitLevel
		Write32(pRefitClientInfo, 0); //LegendSuitLevelChoice
		Write32(pRefitClientInfo, 0); //ShapeLegendSuitID

		len = pRefitClientInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //NewShowChoice
	Write32(p, 0); //DirectMaxLevelShapeID
	Write32(p, 0); //DirectMaxShapePreLevel

	len = p - buf;
	SendToClient(Client, 319, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestCancelShapeRefit(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	U Time = ReadU(p);
	int KartItemID = Read32(p);
	int CancelRefitItemID = Read32(p);
	char CancelRefitLocation = Read8(p);
	UCHAR KartNameLen = Read8(p);

}

void ResponseCancelShapeRefit(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen
	Write32(p, 0); //KartItemID
	Write32(p, 0); //CancelRefitItemID
	Write8(p, 0); //CancelRefitLocation
	{ //KartRefitExInfo
		BYTE* pKartRefitExInfo = p;
		Write16(pKartRefitExInfo, 0); //len

		Write8(pKartRefitExInfo, 0); //SpeedRefitStar
		Write8(pKartRefitExInfo, 0); //JetRefitStar
		Write8(pKartRefitExInfo, 0); //SJetRefitStar
		Write8(pKartRefitExInfo, 0); //AccuRefitStar
		Write8(pKartRefitExInfo, 0); //SpeedAddRatio
		Write8(pKartRefitExInfo, 0); //JetAddRatio
		Write8(pKartRefitExInfo, 0); //SJetAddRatio
		Write8(pKartRefitExInfo, 0); //AccuAddRatio

		len = pKartRefitExInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 273, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestCheckGuanJiaStatus(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	U Time = ReadU(p);
	BYTE[] GUID[] = Read8(p);
	UINT Version = Read32(p);
	UCHAR OpeateType = Read8(p);
	UCHAR IsGuanJiaOnLine = Read8(p);

}

void ResponseCheckGuanJiaStatus(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 651, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestSNSRegister(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	{ //SNSBaseInfo
		BYTE* pSNSBaseInfo = p;
		len = Read16(pSNSBaseInfo);

		UINT Uin = Read32(pSNSBaseInfo);
		UINT RegisterTime = Read32(pSNSBaseInfo);
		UCHAR Gender = Read8(pSNSBaseInfo);
		USHORT BornYear = Read16(pSNSBaseInfo);
		UCHAR Zodiac = Read8(pSNSBaseInfo);
		UINT LocaleCode = Read32(pSNSBaseInfo);
		UINT Flag = Read32(pSNSBaseInfo);
		Un tLastReportTime = ReadUn(pSNSBaseInfo);

		p += len;
	}

}

void ResponseSNSRegister(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	{ //SNSBaseInfo
		BYTE* pSNSBaseInfo = p;
		Write16(pSNSBaseInfo, 0); //len

		Write32(pSNSBaseInfo, 0); //Uin
		Write32(pSNSBaseInfo, 0); //RegisterTime
		Write8(pSNSBaseInfo, 0); //Gender
		Write16(pSNSBaseInfo, 0); //BornYear
		Write8(pSNSBaseInfo, 0); //Zodiac
		Write32(pSNSBaseInfo, 0); //LocaleCode
		Write32(pSNSBaseInfo, 0); //Flag
		WriteUn(pSNSBaseInfo, 0); //tLastReportTime

		len = pSNSBaseInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 10850, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestQuitSNS(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseQuitSNS(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 10851, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestUpdateSNSInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	{ //SNSBaseInfo
		BYTE* pSNSBaseInfo = p;
		len = Read16(pSNSBaseInfo);

		UINT Uin = Read32(pSNSBaseInfo);
		UINT RegisterTime = Read32(pSNSBaseInfo);
		UCHAR Gender = Read8(pSNSBaseInfo);
		USHORT BornYear = Read16(pSNSBaseInfo);
		UCHAR Zodiac = Read8(pSNSBaseInfo);
		UINT LocaleCode = Read32(pSNSBaseInfo);
		UINT Flag = Read32(pSNSBaseInfo);
		Un tLastReportTime = ReadUn(pSNSBaseInfo);

		p += len;
	}

}

void ResponseUpdateSNSInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //HasInfo
	for (size_t i = 0; i < n; i++)
	{ //SNSBaseInfo
		BYTE* pSNSBaseInfo = p;
		Write16(pSNSBaseInfo, 0); //len

		Write32(pSNSBaseInfo, 0); //Uin
		Write32(pSNSBaseInfo, 0); //RegisterTime
		Write8(pSNSBaseInfo, 0); //Gender
		Write16(pSNSBaseInfo, 0); //BornYear
		Write8(pSNSBaseInfo, 0); //Zodiac
		Write32(pSNSBaseInfo, 0); //LocaleCode
		Write32(pSNSBaseInfo, 0); //Flag
		WriteUn(pSNSBaseInfo, 0); //tLastReportTime

		len = pSNSBaseInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 10852, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetPlayerSNSInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR Type = Read8(p);
	UINT TgtUin = Read32(p);

}

void ResponseGetPlayerSNSInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultId
	Write32(p, 0); //TgtUin
	Write8(p, 0); //Type
	Write8(p, 0); //HasInfo
	for (size_t i = 0; i < n; i++)
	{ //SNSInfo
		BYTE* pSNSInfo = p;
		Write16(pSNSInfo, 0); //len

		Write32(pSNSInfo, 0); //Uin
		Write32(pSNSInfo, 0); //RegisterTime
		Write8(pSNSInfo, 0); //Gender
		Write16(pSNSInfo, 0); //BornYear
		Write8(pSNSInfo, 0); //Zodiac
		Write32(pSNSInfo, 0); //LocaleCode
		Write32(pSNSInfo, 0); //Flag
		WriteUn(pSNSInfo, 0); //tLastReportTime

		len = pSNSInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 10853, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestInviteEnterSNSGame(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT InviteeUin = Read32(p);
	char[] InviteeName[] = ReadString(p);

}

void ResponseInviteEnterSNSGame(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultId
	Write32(p, 0); //InviteeUin
	WriteString(p, 0); //InviteeName[]

	len = p - buf;
	SendToClient(Client, 10854, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyInvitedSNSGame(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //SrcSvrID
	Write32(p, 0); //InviterUin
	WriteString(p, 0); //InviterName[]

	len = p - buf;
	SendToClient(Client, 10855, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void AckInvitedSNSGame(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	short SrcSvrID = Read16(p);
	UINT InviterUin = Read32(p);
	char[] InviterName[] = ReadString(p);
	UCHAR IsAccept = Read8(p);

}

void NotifyEnterSNSGame(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //RivalUin
	{ //SNSServerInfo
		BYTE* pSNSServerInfo = p;
		Write16(pSNSServerInfo, 0); //len

		Write16(pSNSServerInfo, 0); //SvrID
		WriteU(pSNSServerInfo, 0); //ExtenalIP
		Write8(pSNSServerInfo, 0); //ExtTcpPortNum
		Write16(pSNSServerInfo, 0); //ExternalTcpPort[]
		Write8(pSNSServerInfo, 0); //ExtUdpPortNum
		Write16(pSNSServerInfo, 0); //ExternalUdpPort[]

		len = pSNSServerInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 10856, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestEnterSNSGame(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT RivalUin = Read32(p);
	UCHAR SnsMatchType = Read8(p);

}

void ResponseEnterSNSGame(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultId

	len = p - buf;
	SendToClient(Client, 10857, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestAllocSNSServer(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR AllocReason = Read8(p);

}

void ResponseAllocSNSServer(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultId
	Write8(p, 0); //AllocReason
	Write8(p, 0); //HasSNSServer
	for (size_t i = 0; i < n; i++)
	{ //SNSServerInfo
		BYTE* pSNSServerInfo = p;
		Write16(pSNSServerInfo, 0); //len

		Write16(pSNSServerInfo, 0); //SvrID
		WriteU(pSNSServerInfo, 0); //ExtenalIP
		Write8(pSNSServerInfo, 0); //ExtTcpPortNum
		Write16(pSNSServerInfo, 0); //ExternalTcpPort[]
		Write8(pSNSServerInfo, 0); //ExtUdpPortNum
		Write16(pSNSServerInfo, 0); //ExternalUdpPort[]

		len = pSNSServerInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 10858, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestMatchSNSGame(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR MatchType = Read8(p);

}

void ResponseMatchSNSGame(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultId

	len = p - buf;
	SendToClient(Client, 10859, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyMatchSNSGameResult(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultId
	Write32(p, 0); //RivalUin

	len = p - buf;
	SendToClient(Client, 10860, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetSNSBroadcast(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	{ //SessionData
		BYTE* pSessionData = p;
		len = Read16(pSessionData);

		UINT SystemCurPage = Read32(pSessionData);
		UCHAR SystemCurLocLvl = Read8(pSessionData);
		UCHAR SystemCurAgeLvl = Read8(pSessionData);
		UINT LocaleCurPage = Read32(pSessionData);
		UCHAR LocaleCurLocLvl = Read8(pSessionData);
		UINT CondCurPage = Read32(pSessionData);
		UCHAR CondCurZodiacLvl = Read8(pSessionData);
		UCHAR CondCurAgeLvl = Read8(pSessionData);
		UCHAR CondCurLocLvl = Read8(pSessionData);
		UCHAR CondCurGenderLvl = Read8(pSessionData);
		UCHAR CondCurLvlLvl = Read8(pSessionData);
		UINT BroadcastCurPage = Read32(pSessionData);
		UCHAR SystemCurTab = Read8(pSessionData);
		UCHAR LocaleCurTab = Read8(pSessionData);
		UCHAR CondCurTab = Read8(pSessionData);
		UCHAR BroadcastCurTab = Read8(pSessionData);

		p += len;
	}

}

void ResponseGetSNSBroadcast(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //SystemBCNum
	for (size_t i = 0; i < n; i++)
	{ //Content
		BYTE* pContent = p;
		Write16(pContent, 0); //len

		Write16(pContent, 0); //ContentLen

		len = pContent - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //Num
	for (size_t i = 0; i < n; i++)
	{ //SNSBCInfo
		BYTE* pSNSBCInfo = p;
		Write16(pSNSBCInfo, 0); //len

		Write8(pSNSBCInfo, 0); //Type
		{ //PlayerSNSInfo
			BYTE* pPlayerSNSInfo = pSNSBCInfo;
			Write16(pPlayerSNSInfo, 0); //len

			WriteString(pPlayerSNSInfo, 0); //Name[]
			{ //BaseInfo
				BYTE* pBaseInfo = pPlayerSNSInfo;
				Write16(pBaseInfo, 0); //len

				Write32(pBaseInfo, 0); //Uin
				Write32(pBaseInfo, 0); //RegisterTime
				Write8(pBaseInfo, 0); //Gender
				Write16(pBaseInfo, 0); //BornYear
				Write8(pBaseInfo, 0); //Zodiac
				Write32(pBaseInfo, 0); //LocaleCode
				Write32(pBaseInfo, 0); //Flag
				WriteUn(pBaseInfo, 0); //tLastReportTime

				len = pBaseInfo - pPlayerSNSInfo;
				Set16(pPlayerSNSInfo, (WORD)len);
				pPlayerSNSInfo += len;
			}
			Write32(pPlayerSNSInfo, 0); //Exp
			Write32(pPlayerSNSInfo, 0); //RightFlag

			len = pPlayerSNSInfo - pSNSBCInfo;
			Set16(pSNSBCInfo, (WORD)len);
			pSNSBCInfo += len;
		}

		len = pSNSBCInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //SessionData
		BYTE* pSessionData = p;
		Write16(pSessionData, 0); //len

		Write32(pSessionData, 0); //SystemCurPage
		Write8(pSessionData, 0); //SystemCurLocLvl
		Write8(pSessionData, 0); //SystemCurAgeLvl
		Write32(pSessionData, 0); //LocaleCurPage
		Write8(pSessionData, 0); //LocaleCurLocLvl
		Write32(pSessionData, 0); //CondCurPage
		Write8(pSessionData, 0); //CondCurZodiacLvl
		Write8(pSessionData, 0); //CondCurAgeLvl
		Write8(pSessionData, 0); //CondCurLocLvl
		Write8(pSessionData, 0); //CondCurGenderLvl
		Write8(pSessionData, 0); //CondCurLvlLvl
		Write32(pSessionData, 0); //BroadcastCurPage
		Write8(pSessionData, 0); //SystemCurTab
		Write8(pSessionData, 0); //LocaleCurTab
		Write8(pSessionData, 0); //CondCurTab
		Write8(pSessionData, 0); //BroadcastCurTab

		len = pSessionData - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 10861, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestSNSRecommand(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR Type = Read8(p);
	{ //Session
		BYTE* pSession = p;
		len = Read16(pSession);

		UINT SystemCurPage = Read32(pSession);
		UCHAR SystemCurLocLvl = Read8(pSession);
		UCHAR SystemCurAgeLvl = Read8(pSession);
		UINT LocaleCurPage = Read32(pSession);
		UCHAR LocaleCurLocLvl = Read8(pSession);
		UINT CondCurPage = Read32(pSession);
		UCHAR CondCurZodiacLvl = Read8(pSession);
		UCHAR CondCurAgeLvl = Read8(pSession);
		UCHAR CondCurLocLvl = Read8(pSession);
		UCHAR CondCurGenderLvl = Read8(pSession);
		UCHAR CondCurLvlLvl = Read8(pSession);
		UINT BroadcastCurPage = Read32(pSession);
		UCHAR SystemCurTab = Read8(pSession);
		UCHAR LocaleCurTab = Read8(pSession);
		UCHAR CondCurTab = Read8(pSession);
		UCHAR BroadcastCurTab = Read8(pSession);

		p += len;
	}
	UCHAR HasCond = Read8(p);
	for (size_t i = 0; i < n; i++)
	{ //Cond
		BYTE* pCond = p;
		len = Read16(pCond);

		UCHAR Gender = Read8(pCond);
		UCHAR AgeUpperBound = Read8(pCond);
		UCHAR AgeLowerBound = Read8(pCond);
		UCHAR Zodiac = Read8(pCond);
		UINT Locale = Read32(pCond);
		UINT LowerExp = Read32(pCond);
		UINT UpperExp = Read32(pCond);

		p += len;
	}

}

void ResponseSNSRecommand(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //Type
	{ //Session
		BYTE* pSession = p;
		Write16(pSession, 0); //len

		Write32(pSession, 0); //SystemCurPage
		Write8(pSession, 0); //SystemCurLocLvl
		Write8(pSession, 0); //SystemCurAgeLvl
		Write32(pSession, 0); //LocaleCurPage
		Write8(pSession, 0); //LocaleCurLocLvl
		Write32(pSession, 0); //CondCurPage
		Write8(pSession, 0); //CondCurZodiacLvl
		Write8(pSession, 0); //CondCurAgeLvl
		Write8(pSession, 0); //CondCurLocLvl
		Write8(pSession, 0); //CondCurGenderLvl
		Write8(pSession, 0); //CondCurLvlLvl
		Write32(pSession, 0); //BroadcastCurPage
		Write8(pSession, 0); //SystemCurTab
		Write8(pSession, 0); //LocaleCurTab
		Write8(pSession, 0); //CondCurTab
		Write8(pSession, 0); //BroadcastCurTab

		len = pSession - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasCond
	for (size_t i = 0; i < n; i++)
	{ //Cond
		BYTE* pCond = p;
		Write16(pCond, 0); //len

		Write8(pCond, 0); //Gender
		Write8(pCond, 0); //AgeUpperBound
		Write8(pCond, 0); //AgeLowerBound
		Write8(pCond, 0); //Zodiac
		Write32(pCond, 0); //Locale
		Write32(pCond, 0); //LowerExp
		Write32(pCond, 0); //UpperExp

		len = pCond - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //Num
	for (size_t i = 0; i < n; i++)
	{ //PlayerInfo
		BYTE* pPlayerInfo = p;
		Write16(pPlayerInfo, 0); //len

		WriteString(pPlayerInfo, 0); //Name[]
		{ //BaseInfo
			BYTE* pBaseInfo = pPlayerInfo;
			Write16(pBaseInfo, 0); //len

			Write32(pBaseInfo, 0); //Uin
			Write32(pBaseInfo, 0); //RegisterTime
			Write8(pBaseInfo, 0); //Gender
			Write16(pBaseInfo, 0); //BornYear
			Write8(pBaseInfo, 0); //Zodiac
			Write32(pBaseInfo, 0); //LocaleCode
			Write32(pBaseInfo, 0); //Flag
			WriteUn(pBaseInfo, 0); //tLastReportTime

			len = pBaseInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		Write32(pPlayerInfo, 0); //Exp
		Write32(pPlayerInfo, 0); //RightFlag

		len = pPlayerInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 10862, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestCancelMatchSNSGame(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseCancelMatchSNSGame(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 10863, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestSNSLoverMatch(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseSNSLoverMatch(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 10864, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestCancelSNSLoverMatch(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseCancelSNSLoverMatch(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 10865, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifySNSLoverMatchResult(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //HasInfo
	for (size_t i = 0; i < n; i++)
	{ //Info
		BYTE* pInfo = p;
		Write16(pInfo, 0); //len

		WriteString(pInfo, 0); //Name[]
		{ //BaseInfo
			BYTE* pBaseInfo = pInfo;
			Write16(pBaseInfo, 0); //len

			Write32(pBaseInfo, 0); //Uin
			Write32(pBaseInfo, 0); //RegisterTime
			Write8(pBaseInfo, 0); //Gender
			Write16(pBaseInfo, 0); //BornYear
			Write8(pBaseInfo, 0); //Zodiac
			Write32(pBaseInfo, 0); //LocaleCode
			Write32(pBaseInfo, 0); //Flag
			WriteUn(pBaseInfo, 0); //tLastReportTime

			len = pBaseInfo - pInfo;
			Set16(pInfo, (WORD)len);
			pInfo += len;
		}
		Write32(pInfo, 0); //Exp
		Write32(pInfo, 0); //RightFlag

		len = pInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 10866, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifySnsGameInviteFailed(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ReasonId
	Write32(p, 0); //InviterUin
	Write32(p, 0); //InviteeUin

	len = p - buf;
	SendToClient(Client, 10867, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestReportSNSPlayer(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT TgtUin = Read32(p);

}

void ResponseReportSNSPlayer(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 10868, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestUpdateSNSFlag(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR IsSet = Read8(p);
	UINT Flag = Read32(p);

}

void ResponseUpdateSNSFlag(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //NewFlag

	len = p - buf;
	SendToClient(Client, 10869, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetPlayerSignature(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR Type = Read8(p);
	UINT TgtUin = Read32(p);

}

void ResponseGetPlayerSignature(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //Type
	Write32(p, 0); //DstUin
	Write8(p, 0); //Len

	len = p - buf;
	SendToClient(Client, 378, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestChangeRecommandStatus(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR Idle = Read8(p);

}

void ResponseChangeRecommandStatus(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 275, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyRecommandResult(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //RcmdType
	{ //PlayerSNSInfo
		BYTE* pPlayerSNSInfo = p;
		Write16(pPlayerSNSInfo, 0); //len

		WriteString(pPlayerSNSInfo, 0); //Name[]
		{ //BaseInfo
			BYTE* pBaseInfo = pPlayerSNSInfo;
			Write16(pBaseInfo, 0); //len

			Write32(pBaseInfo, 0); //Uin
			Write32(pBaseInfo, 0); //RegisterTime
			Write8(pBaseInfo, 0); //Gender
			Write16(pBaseInfo, 0); //BornYear
			Write8(pBaseInfo, 0); //Zodiac
			Write32(pBaseInfo, 0); //LocaleCode
			Write32(pBaseInfo, 0); //Flag
			WriteUn(pBaseInfo, 0); //tLastReportTime

			len = pBaseInfo - pPlayerSNSInfo;
			Set16(pPlayerSNSInfo, (WORD)len);
			pPlayerSNSInfo += len;
		}
		Write32(pPlayerSNSInfo, 0); //Exp
		Write32(pPlayerSNSInfo, 0); //RightFlag

		len = pPlayerSNSInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 276, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestReportSnsPanelOpenCount(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT OpenCount = Read32(p);

}

void RequestC2GGetChallengeInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	U Time = ReadU(p);

}

void ResponseC2GGetChallengeInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //CostDayPoint
	Write16(p, 0); //DayPoint
	Write16(p, 0); //DayGuildPoint
	Write16(p, 0); //CostDayCheer
	Write16(p, 0); //DayCheer
	Write32(p, 0); //CheerValue

	len = p - buf;
	SendToClient(Client, 11210, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GGetGuildChallengeInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	U Time = ReadU(p);
	UINT DstGuildID = Read32(p);
	UCHAR GetExInfo = Read8(p);
	UCHAR GetLog = Read8(p);
	UCHAR Type = Read8(p);

}

void ResponseC2GGetGuildChallengeInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //DstGuildID
	{ //Info
		BYTE* pInfo = p;
		Write16(pInfo, 0); //len

		Write16(pInfo, 0); //MapID
		Write16(pInfo, 0); //Rank
		Write32(pInfo, 0); //UseTime
		Write32(pInfo, 0); //HeroUin
		Write32(pInfo, 0); //KartID
		Write8(pInfo, 0); //HeroNameLen
		Write32(pInfo, 0); //Victory
		Write32(pInfo, 0); //Failure
		Write32(pInfo, 0); //DayChallenge
		Write16(pInfo, 0); //RecentMapID
		Write16(pInfo, 0); //RecentRankID
		Write32(pInfo, 0); //CheerValue
		Write32(pInfo, 0); //DayCheerCnt
		Write32(pInfo, 0); //DayCheerValue

		len = pInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //Addition
		BYTE* pAddition = p;
		Write16(pAddition, 0); //len

		Write16(pAddition, 0); //ExpAddition
		Write16(pAddition, 0); //WageAddition

		len = pAddition - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasExInfo
	for (size_t i = 0; i < n; i++)
	{ //ExInfo
		BYTE* pExInfo = p;
		Write16(pExInfo, 0); //len

		Write16(pExInfo, 0); //LastSeasonMapID
		Write16(pExInfo, 0); //LastSeasonRank
		Write16(pExInfo, 0); //HistoryBestMapID
		Write16(pExInfo, 0); //HistoryBestRank
		Write32(pExInfo, 0); //TotalVictory
		Write32(pExInfo, 0); //TotalFailure
		Write32(pExInfo, 0); //HateGuildID

		len = pExInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //LogNum
	for (size_t i = 0; i < n; i++)
	{ //Log
		BYTE* pLog = p;
		Write16(pLog, 0); //len

		Write16(pLog, 0); //SeasonID
		Write8(pLog, 0); //Type
		Write32(pLog, 0); //SrcGuildID
		WriteString(pLog, 0); //SrcGuildName[]
		Write32(pLog, 0); //Uin
		WriteString(pLog, 0); //NickName[]
		Write32(pLog, 0); //Kart
		Write16(pLog, 0); //MapID
		Write16(pLog, 0); //RankID
		Write32(pLog, 0); //UseTime
		Write32(pLog, 0); //Time

		len = pLog - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //Type

	len = p - buf;
	SendToClient(Client, 11211, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GGetMapsChallengeInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	U Time = ReadU(p);

}

void ResponseC2GGetMapsChallengeInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //MapNum
	for (size_t i = 0; i < n; i++)
	{ //MapStatus
		BYTE* pMapStatus = p;
		Write16(pMapStatus, 0); //len

		Write16(pMapStatus, 0); //MapID
		Write32(pMapStatus, 0); //ChallengeCnt
		Write16(pMapStatus, 0); //FreeRank
		Write32(pMapStatus, 0); //MaxFiniTime
		Write32(pMapStatus, 0); //MinFiniTime

		len = pMapStatus - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11212, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GGetMapChallengeRank(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	U Time = ReadU(p);
	USHORT MapID = Read16(p);
	USHORT StartRank = Read16(p);
	USHORT EndRank = Read16(p);

}

void ResponseC2GGetMapChallengeRank(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write16(p, 0); //MapID
	Write16(p, 0); //StartRank
	Write16(p, 0); //EndRank
	Write16(p, 0); //TotalCount
	Write16(p, 0); //Count
	for (size_t i = 0; i < n; i++)
	{ //MapRankEntry
		BYTE* pMapRankEntry = p;
		Write16(pMapRankEntry, 0); //len

		Write16(pMapRankEntry, 0); //MapID
		Write16(pMapRankEntry, 0); //Rank
		Write16(pMapRankEntry, 0); //Uin
		Write8(pMapRankEntry, 0); //NameLen
		Write32(pMapRankEntry, 0); //GuildID
		Write8(pMapRankEntry, 0); //GuildNameLen
		Write32(pMapRankEntry, 0); //UseTime
		Write32(pMapRankEntry, 0); //KartID
		Write32(pMapRankEntry, 0); //ShadowFileSize
		Write8(pMapRankEntry, 0); //FileMd5[]
		Write16(pMapRankEntry, 0); //UUidLen
		Write16(pMapRankEntry, 0); //LastUUidLen
		Write32(pMapRankEntry, 0); //UpdateTime
		Write8(pMapRankEntry, 0); //Status
		Write32(pMapRankEntry, 0); //ReportedNum
		Write32(pMapRankEntry, 0); //KeepCnt
		Write32(pMapRankEntry, 0); //ChallengeCnt
		Write8(pMapRankEntry, 0); //EmpMode

		len = pMapRankEntry - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //OtherCount
	for (size_t i = 0; i < n; i++)
	{ //RankState
		BYTE* pRankState = p;
		Write16(pRankState, 0); //len

		Write8(pRankState, 0); //LeapNum

		len = pRankState - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11213, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GGetRecentChallengeMsg(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	U Time = ReadU(p);

}

void ResponseC2GGetRecentChallengeMsg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write8(p, 0); //MsgNum
	for (size_t i = 0; i < n; i++)
	{ //Msg
		BYTE* pMsg = p;
		Write16(pMsg, 0); //len

		Write8(pMsg, 0); //Type
		Write32(pMsg, 0); //Uin
		Write32(pMsg, 0); //GuildID
		Write8(pMsg, 0); //GuildNameLen
		Write8(pMsg, 0); //NameLen
		Write16(pMsg, 0); //SrcMapID
		Write16(pMsg, 0); //SrcRank
		Write32(pMsg, 0); //KartID
		Write16(pMsg, 0); //MapID
		Write16(pMsg, 0); //Rank
		Write32(pMsg, 0); //UseTime
		Write32(pMsg, 0); //Leaps
		Write32(pMsg, 0); //DstGuildID
		Write8(pMsg, 0); //DstGuildNameLen

		len = pMsg - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11214, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyG2CGuildChallengeMsg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	{ //Msg
		BYTE* pMsg = p;
		Write16(pMsg, 0); //len

		Write8(pMsg, 0); //Type
		Write32(pMsg, 0); //Uin
		Write32(pMsg, 0); //GuildID
		Write8(pMsg, 0); //GuildNameLen
		Write8(pMsg, 0); //NameLen
		Write16(pMsg, 0); //SrcMapID
		Write16(pMsg, 0); //SrcRank
		Write32(pMsg, 0); //KartID
		Write16(pMsg, 0); //MapID
		Write16(pMsg, 0); //Rank
		Write32(pMsg, 0); //UseTime
		Write32(pMsg, 0); //Leaps
		Write32(pMsg, 0); //DstGuildID
		Write8(pMsg, 0); //DstGuildNameLen

		len = pMsg - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11215, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestC2GGetMapOwner(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	U Time = ReadU(p);
	USHORT MapID = Read16(p);
	bool Lastest = Read8(p);

}

void ResponseC2GGetMapOwner(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //MapID
	{ //Brief
		BYTE* pBrief = p;
		Write16(pBrief, 0); //len

		Write16(pBrief, 0); //MapID
		Write32(pBrief, 0); //ChallengeCnt
		Write16(pBrief, 0); //FreeRank
		Write32(pBrief, 0); //MaxFiniTime
		Write32(pBrief, 0); //MinFiniTime

		len = pBrief - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasOwner
	for (size_t i = 0; i < n; i++)
	{ //MapOwner
		BYTE* pMapOwner = p;
		Write16(pMapOwner, 0); //len

		Write16(pMapOwner, 0); //Rank
		Write32(pMapOwner, 0); //Uin
		Write8(pMapOwner, 0); //NameLen
		Write32(pMapOwner, 0); //GuildID
		Write8(pMapOwner, 0); //GuildNameLen
		Write32(pMapOwner, 0); //UseTime
		Write32(pMapOwner, 0); //KartID
		Write16(pMapOwner, 0); //UUidLen

		len = pMapOwner - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11216, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GChallenge(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	U Time = ReadU(p);
	USHORT MapID = Read16(p);
	USHORT Rank = Read16(p);
	UCHAR FileMd5Len = Read8(p);

}

void ResponseC2GChallenge(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen
	Write32(p, 0); //Uin
	Write16(p, 0); //MapID
	Write16(p, 0); //Rank
	Write16(p, 0); //LeapCnt
	Write8(p, 0); //QQHelpCardMeet
	Write32(p, 0); //KubiCost
	Write16(p, 0); //QQHelpCardCost
	Write8(p, 0); //HasRankEntry
	for (size_t i = 0; i < n; i++)
	{ //RankEntry
		BYTE* pRankEntry = p;
		Write16(pRankEntry, 0); //len

		Write16(pRankEntry, 0); //MapID
		Write16(pRankEntry, 0); //Rank
		Write16(pRankEntry, 0); //Uin
		Write8(pRankEntry, 0); //NameLen
		Write32(pRankEntry, 0); //GuildID
		Write8(pRankEntry, 0); //GuildNameLen
		Write32(pRankEntry, 0); //UseTime
		Write32(pRankEntry, 0); //KartID
		Write32(pRankEntry, 0); //ShadowFileSize
		Write8(pRankEntry, 0); //FileMd5[]
		Write16(pRankEntry, 0); //UUidLen
		Write16(pRankEntry, 0); //LastUUidLen
		Write32(pRankEntry, 0); //UpdateTime
		Write8(pRankEntry, 0); //Status
		Write32(pRankEntry, 0); //ReportedNum
		Write32(pRankEntry, 0); //KeepCnt
		Write32(pRankEntry, 0); //ChallengeCnt
		Write8(pRankEntry, 0); //EmpMode

		len = pRankEntry - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasStatus
	for (size_t i = 0; i < n; i++)
	{ //QueueStatus
		BYTE* pQueueStatus = p;
		Write16(pQueueStatus, 0); //len

		Write8(pQueueStatus, 0); //FreeRank
		Write16(pQueueStatus, 0); //WaitLoadNum
		Write16(pQueueStatus, 0); //LoadNum
		Write16(pQueueStatus, 0); //WaitChallengeNum
		Write16(pQueueStatus, 0); //ChallengeNum
		Write16(pQueueStatus, 0); //WaitSendNum

		len = pQueueStatus - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //CreditStarLev

	len = p - buf;
	SendToClient(Client, 11217, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GCancelChallenge(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	U Time = ReadU(p);

}

void ResponseC2GCancelChallenge(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin

	len = p - buf;
	SendToClient(Client, 11218, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyG2CLoadChallengeFile(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //LeapCnt
	Write8(p, 0); //QQHelpCardMeet
	Write32(p, 0); //KubiCost
	Write16(p, 0); //QQHelpCardCost
	{ //RankEntry
		BYTE* pRankEntry = p;
		Write16(pRankEntry, 0); //len

		Write16(pRankEntry, 0); //MapID
		Write16(pRankEntry, 0); //Rank
		Write16(pRankEntry, 0); //Uin
		Write8(pRankEntry, 0); //NameLen
		Write32(pRankEntry, 0); //GuildID
		Write8(pRankEntry, 0); //GuildNameLen
		Write32(pRankEntry, 0); //UseTime
		Write32(pRankEntry, 0); //KartID
		Write32(pRankEntry, 0); //ShadowFileSize
		Write8(pRankEntry, 0); //FileMd5[]
		Write16(pRankEntry, 0); //UUidLen
		Write16(pRankEntry, 0); //LastUUidLen
		Write32(pRankEntry, 0); //UpdateTime
		Write8(pRankEntry, 0); //Status
		Write32(pRankEntry, 0); //ReportedNum
		Write32(pRankEntry, 0); //KeepCnt
		Write32(pRankEntry, 0); //ChallengeCnt
		Write8(pRankEntry, 0); //EmpMode

		len = pRankEntry - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //QueueStatus
		BYTE* pQueueStatus = p;
		Write16(pQueueStatus, 0); //len

		Write8(pQueueStatus, 0); //FreeRank
		Write16(pQueueStatus, 0); //WaitLoadNum
		Write16(pQueueStatus, 0); //LoadNum
		Write16(pQueueStatus, 0); //WaitChallengeNum
		Write16(pQueueStatus, 0); //ChallengeNum
		Write16(pQueueStatus, 0); //WaitSendNum

		len = pQueueStatus - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //UrlLen

	len = p - buf;
	SendToClient(Client, 11219, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyC2GLoadChallengeFileResult(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	WriteU(p, 0); //Time
	Write16(p, 0); //ResultID
	Write8(p, 0); //FileMd5Len
	Write8(p, 0); //Cmd
	Write16(p, 0); //GameType
	Write16(p, 0); //PointID

	len = p - buf;
	SendToClient(Client, 11220, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyG2CStartChallenge(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //LeapCnt
	Write32(p, 0); //KubiCost
	Write8(p, 0); //QQHelpCardMeet
	Write16(p, 0); //QQHelpCardCost
	{ //RankEntry
		BYTE* pRankEntry = p;
		Write16(pRankEntry, 0); //len

		Write16(pRankEntry, 0); //MapID
		Write16(pRankEntry, 0); //Rank
		Write16(pRankEntry, 0); //Uin
		Write8(pRankEntry, 0); //NameLen
		Write32(pRankEntry, 0); //GuildID
		Write8(pRankEntry, 0); //GuildNameLen
		Write32(pRankEntry, 0); //UseTime
		Write32(pRankEntry, 0); //KartID
		Write32(pRankEntry, 0); //ShadowFileSize
		Write8(pRankEntry, 0); //FileMd5[]
		Write16(pRankEntry, 0); //UUidLen
		Write16(pRankEntry, 0); //LastUUidLen
		Write32(pRankEntry, 0); //UpdateTime
		Write8(pRankEntry, 0); //Status
		Write32(pRankEntry, 0); //ReportedNum
		Write32(pRankEntry, 0); //KeepCnt
		Write32(pRankEntry, 0); //ChallengeCnt
		Write8(pRankEntry, 0); //EmpMode

		len = pRankEntry - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //QueueStatus
		BYTE* pQueueStatus = p;
		Write16(pQueueStatus, 0); //len

		Write8(pQueueStatus, 0); //FreeRank
		Write16(pQueueStatus, 0); //WaitLoadNum
		Write16(pQueueStatus, 0); //LoadNum
		Write16(pQueueStatus, 0); //WaitChallengeNum
		Write16(pQueueStatus, 0); //ChallengeNum
		Write16(pQueueStatus, 0); //WaitSendNum

		len = pQueueStatus - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //PreUpdateRankLimit
	Write16(p, 0); //SelfMapID
	Write16(p, 0); //CanNotUseqqhelpcardDaysBeforeFreezeDate

	len = p - buf;
	SendToClient(Client, 11221, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyC2GStartChallengeResult(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	WriteU(p, 0); //Time
	Write8(p, 0); //Ok
	Write8(p, 0); //FileMd5Len

	len = p - buf;
	SendToClient(Client, 11222, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyC2GChallengeBegin(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //NormalLoadTime
	Write32(p, 0); //MapID
	WriteString(p, 0); //MapHash[]
	WriteUn(p, 0); //GameID
	WriteUn(p, 0); //Seed
	Write16(p, 0); //TotalMapRound
	Write32(p, 0); //TimeLimit

	len = p - buf;
	SendToClient(Client, 11223, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyG2CChallengeResult(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //Result
	Write8(p, 0); //ReasonLen
	Write8(p, 0); //HasResult
	for (size_t i = 0; i < n; i++)
	{ //Result
		BYTE* pResult = p;
		Write16(pResult, 0); //len

		Write8(pResult, 0); //PreUpdateRankLimit
		Write16(pResult, 0); //LeapCnt
		Write16(pResult, 0); //QQHelpCardCost
		WriteUn(pResult, 0); //FinTime
		Write32(pResult, 0); //ChallengeLimitTime
		{ //Award
			BYTE* pAward = pResult;
			Write16(pAward, 0); //len

			Write32(pAward, 0); //SuperMoney
			Write32(pAward, 0); //Coupons
			Write32(pAward, 0); //GuildScore
			Write32(pAward, 0); //ItemID
			Write16(pAward, 0); //AwardStrLen
			Write32(pAward, 0); //TotalSuperMoney
			Write32(pAward, 0); //TotalCoupons

			len = pAward - pResult;
			Set16(pResult, (WORD)len);
			pResult += len;
		}
		Write16(pResult, 0); //CanNotUseqqhelpcardDaysBeforeFreezeDate

		len = pResult - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11224, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestC2GUpdateChallengeRank(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	U Time = ReadU(p);
	UCHAR ExpectArea = Read8(p);

}

void ResponseC2GUpdateChallengeRank(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 11225, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GCancelUpdateChallengeRank(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	U Time = ReadU(p);

}

void ResponseC2GCancelUpdateChallengeRank(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 11226, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyG2CUpLoadChallengeFile(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //UuidLen
	Write16(p, 0); //AuthInfoLen
	{ //PhyInfo
		BYTE* pPhyInfo = p;
		Write16(pPhyInfo, 0); //len

		WriteU(pPhyInfo, 0); //ExtenalIP
		Write8(pPhyInfo, 0); //ExtTcpPortNum
		Write16(pPhyInfo, 0); //ExternalTcpPort[]
		Write8(pPhyInfo, 0); //ExtUdpPortNum
		Write16(pPhyInfo, 0); //ExternalUdpPort[]

		len = pPhyInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //Cmd

	len = p - buf;
	SendToClient(Client, 11227, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyG2CUpdateChallengeRankResult(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //Result
	Write8(p, 0); //ReasonLen
	Write8(p, 0); //HasResult
	for (size_t i = 0; i < n; i++)
	{ //Result
		BYTE* pResult = p;
		Write16(pResult, 0); //len

		{ //Award
			BYTE* pAward = pResult;
			Write16(pAward, 0); //len

			Write32(pAward, 0); //SuperMoney
			Write32(pAward, 0); //Coupons
			Write32(pAward, 0); //GuildScore
			Write32(pAward, 0); //ItemID
			Write16(pAward, 0); //AwardStrLen
			Write32(pAward, 0); //TotalSuperMoney
			Write32(pAward, 0); //TotalCoupons

			len = pAward - pResult;
			Set16(pResult, (WORD)len);
			pResult += len;
		}

		len = pResult - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11228, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestC2GLoadFile(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	U Time = ReadU(p);
	UCHAR Cmd = Read8(p);
	USHORT UuidLen = Read16(p);

}

void ResponseC2GLoadFile(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write8(p, 0); //Cmd
	Write16(p, 0); //UrlLen

	len = p - buf;
	SendToClient(Client, 11229, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GChallengeMapRecommend(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	U Time = ReadU(p);

}

void ResponseC2GChallengeMapRecommend(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //SelfRecommend
	for (size_t i = 0; i < n; i++)
	{ //SelfRecommend
		BYTE* pSelfRecommend = p;
		Write16(pSelfRecommend, 0); //len

		Write16(pSelfRecommend, 0); //MapID
		Write32(pSelfRecommend, 0); //ChallengeCnt
		Write16(pSelfRecommend, 0); //FreeRank
		Write32(pSelfRecommend, 0); //MaxFiniTime
		Write32(pSelfRecommend, 0); //MinFiniTime

		len = pSelfRecommend - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //HotRecommend
	for (size_t i = 0; i < n; i++)
	{ //HotRecommend
		BYTE* pHotRecommend = p;
		Write16(pHotRecommend, 0); //len

		Write16(pHotRecommend, 0); //MapID
		Write32(pHotRecommend, 0); //ChallengeCnt
		Write16(pHotRecommend, 0); //FreeRank
		Write32(pHotRecommend, 0); //MaxFiniTime
		Write32(pHotRecommend, 0); //MinFiniTime

		len = pHotRecommend - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //ColdRecommend
	for (size_t i = 0; i < n; i++)
	{ //ColdRecommend
		BYTE* pColdRecommend = p;
		Write16(pColdRecommend, 0); //len

		Write16(pColdRecommend, 0); //MapID
		Write32(pColdRecommend, 0); //ChallengeCnt
		Write16(pColdRecommend, 0); //FreeRank
		Write32(pColdRecommend, 0); //MaxFiniTime
		Write32(pColdRecommend, 0); //MinFiniTime

		len = pColdRecommend - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //SimilarRecommend
	for (size_t i = 0; i < n; i++)
	{ //SimilarRecommend
		BYTE* pSimilarRecommend = p;
		Write16(pSimilarRecommend, 0); //len

		Write16(pSimilarRecommend, 0); //MapID
		Write32(pSimilarRecommend, 0); //ChallengeCnt
		Write16(pSimilarRecommend, 0); //FreeRank
		Write32(pSimilarRecommend, 0); //MaxFiniTime
		Write32(pSimilarRecommend, 0); //MinFiniTime

		len = pSimilarRecommend - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11230, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GChallengeRankRecommend(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	U Time = ReadU(p);

}

void ResponseC2GChallengeRankRecommend(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //Num
	for (size_t i = 0; i < n; i++)
	{ //RankRecommend
		BYTE* pRankRecommend = p;
		Write16(pRankRecommend, 0); //len

		Write16(pRankRecommend, 0); //MapID
		Write16(pRankRecommend, 0); //Rank
		Write8(pRankRecommend, 0); //Type

		len = pRankRecommend - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11231, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyG2CChallengeRankRecommendDetail(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //Num
	for (size_t i = 0; i < n; i++)
	{ //RankRecommend
		BYTE* pRankRecommend = p;
		Write16(pRankRecommend, 0); //len

		Write16(pRankRecommend, 0); //MapID
		Write16(pRankRecommend, 0); //Num
		for (size_t i = 0; i < n; i++)
		{ //RankBrief
			BYTE* pRankBrief = pRankRecommend;
			Write16(pRankBrief, 0); //len

			Write16(pRankBrief, 0); //Rank
			Write32(pRankBrief, 0); //Uin
			Write8(pRankBrief, 0); //NameLen
			Write32(pRankBrief, 0); //GuildID
			Write8(pRankBrief, 0); //GuildNameLen
			Write32(pRankBrief, 0); //UseTime
			Write32(pRankBrief, 0); //KartID
			Write16(pRankBrief, 0); //UUidLen

			len = pRankBrief - pRankRecommend;
			Set16(pRankRecommend, (WORD)len);
			pRankRecommend += len;
		}

		len = pRankRecommend - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11232, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestC2GChallengeCfg(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	U Time = ReadU(p);
	UINT CliAwardVer = Read32(p);
	UINT CliMapVer = Read32(p);
	UINT CliNormalMsgVer = Read32(p);
	UINT CliTemporaryMsgVer = Read32(p);

}

void ResponseC2GChallengeCfg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	{ //BaseCfg
		BYTE* pBaseCfg = p;
		Write16(pBaseCfg, 0); //len

		Write16(pBaseCfg, 0); //SeasonID
		Write32(pBaseCfg, 0); //OpenDate
		Write32(pBaseCfg, 0); //CloseDate
		Write32(pBaseCfg, 0); //OpenTime
		Write32(pBaseCfg, 0); //CloseTime
		Write32(pBaseCfg, 0); //FreezeDate

		len = pBaseCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //SvrAwardVer
	Write8(p, 0); //AwardNum
	for (size_t i = 0; i < n; i++)
	{ //AwardEntry
		BYTE* pAwardEntry = p;
		Write16(pAwardEntry, 0); //len

		Write16(pAwardEntry, 0); //HighRank
		Write16(pAwardEntry, 0); //LowRank
		{ //ChallengeAwardCfg
			BYTE* pChallengeAwardCfg = pAwardEntry;
			Write16(pChallengeAwardCfg, 0); //len

			Write32(pChallengeAwardCfg, 0); //SuperMoney
			Write32(pChallengeAwardCfg, 0); //Coupons
			Write32(pChallengeAwardCfg, 0); //GuildScore
			Write16(pChallengeAwardCfg, 0); //GetBoxPro
			Write32(pChallengeAwardCfg, 0); //ItemID
			Write16(pChallengeAwardCfg, 0); //AwardStrLen

			len = pChallengeAwardCfg - pAwardEntry;
			Set16(pAwardEntry, (WORD)len);
			pAwardEntry += len;
		}
		{ //UpdateRankAwardCfg
			BYTE* pUpdateRankAwardCfg = pAwardEntry;
			Write16(pUpdateRankAwardCfg, 0); //len

			Write32(pUpdateRankAwardCfg, 0); //SuperMoney
			Write32(pUpdateRankAwardCfg, 0); //Coupons
			Write32(pUpdateRankAwardCfg, 0); //GuildScore
			Write16(pUpdateRankAwardCfg, 0); //GetBoxPro
			Write32(pUpdateRankAwardCfg, 0); //ItemID
			Write16(pUpdateRankAwardCfg, 0); //AwardStrLen

			len = pUpdateRankAwardCfg - pAwardEntry;
			Set16(pAwardEntry, (WORD)len);
			pAwardEntry += len;
		}
		Write8(pAwardEntry, 0); //MemTitleLen
		Write16(pAwardEntry, 0); //ExpAdd
		Write16(pAwardEntry, 0); //WageAdd
		Write8(pAwardEntry, 0); //GuildTitleLen

		len = pAwardEntry - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //SvrMapVer
	Write16(p, 0); //MapNum
	for (size_t i = 0; i < n; i++)
	{ //MapEntry
		BYTE* pMapEntry = p;
		Write16(pMapEntry, 0); //len

		Write16(pMapEntry, 0); //MapID
		Write8(pMapEntry, 0); //Open
		Write8(pMapEntry, 0); //New

		len = pMapEntry - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //SvrNormalMsgVer
	Write8(p, 0); //NormalNum
	for (size_t i = 0; i < n; i++)
	{ //Normal
		BYTE* pNormal = p;
		Write16(pNormal, 0); //len

		Write16(pNormal, 0); //Len

		len = pNormal - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //SvrTemporaryMsgVer
	Write8(p, 0); //TemporaryNum
	for (size_t i = 0; i < n; i++)
	{ //Temporary
		BYTE* pTemporary = p;
		Write16(pTemporary, 0); //len

		Write16(pTemporary, 0); //Len

		len = pTemporary - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //TotalRank

	len = p - buf;
	SendToClient(Client, 11233, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GChallengeReport(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	U Time = ReadU(p);
	UCHAR Type = Read8(p);
	USHORT MapID = Read16(p);
	USHORT RankID = Read16(p);
	USHORT UuidLen = Read16(p);
	UINT DstUin = Read32(p);
	char[] DstNickName[] = ReadString(p);

}

void ResponseC2GChallengeReport(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen
	Write8(p, 0); //Type

	len = p - buf;
	SendToClient(Client, 11234, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyAppellationList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //AppellationNum
	for (size_t i = 0; i < n; i++)
	{ //Record
		BYTE* pRecord = p;
		Write16(pRecord, 0); //len

		Write8(pRecord, 0); //Type
		Write8(pRecord, 0); //Level
		Write8(pRecord, 0); //Status
		Write8(pRecord, 0); //Difficulty
		Write32(pRecord, 0); //MapId
		Write32(pRecord, 0); //Value

		len = pRecord - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 1616, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestWearAppellation(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR Type = Read8(p);

}

void ResponseWearAppellation(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultId
	Write8(p, 0); //Type

	len = p - buf;
	SendToClient(Client, 1618, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestUnwearAppellation(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR Type = Read8(p);

}

void ResponseUnwearAppellation(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultId
	Write8(p, 0); //Type

	len = p - buf;
	SendToClient(Client, 1619, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyUpdateAppellation(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //AddNum
	for (size_t i = 0; i < n; i++)
	{ //AddRecord
		BYTE* pAddRecord = p;
		Write16(pAddRecord, 0); //len

		Write8(pAddRecord, 0); //Type
		Write8(pAddRecord, 0); //Level
		Write8(pAddRecord, 0); //Status
		Write8(pAddRecord, 0); //Difficulty
		Write32(pAddRecord, 0); //MapId
		Write32(pAddRecord, 0); //Value

		len = pAddRecord - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //DelNum
	for (size_t i = 0; i < n; i++)
	{ //DelRecord
		BYTE* pDelRecord = p;
		Write16(pDelRecord, 0); //len

		Write8(pDelRecord, 0); //Type
		Write8(pDelRecord, 0); //Level
		Write8(pDelRecord, 0); //Status
		Write8(pDelRecord, 0); //Difficulty
		Write32(pDelRecord, 0); //MapId
		Write32(pDelRecord, 0); //Value

		len = pDelRecord - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //UpdateNum
	for (size_t i = 0; i < n; i++)
	{ //UpdateRecord
		BYTE* pUpdateRecord = p;
		Write16(pUpdateRecord, 0); //len

		Write8(pUpdateRecord, 0); //Type
		Write8(pUpdateRecord, 0); //Level
		Write8(pUpdateRecord, 0); //Status
		Write8(pUpdateRecord, 0); //Difficulty
		Write32(pUpdateRecord, 0); //MapId
		Write32(pUpdateRecord, 0); //Value

		len = pUpdateRecord - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HaveMoneyExpAward
	for (size_t i = 0; i < n; i++)
	{ //AwardMoneyExp
		BYTE* pAwardMoneyExp = p;
		Write16(pAwardMoneyExp, 0); //len

		Write32(pAwardMoneyExp, 0); //Money
		Write32(pAwardMoneyExp, 0); //SuperMoney
		Write32(pAwardMoneyExp, 0); //Exp
		Write32(pAwardMoneyExp, 0); //Charm
		Write32(pAwardMoneyExp, 0); //DanceExp
		Write32(pAwardMoneyExp, 0); //Coupons
		Write32(pAwardMoneyExp, 0); //Admiration
		Write32(pAwardMoneyExp, 0); //LuckMoney
		Write32(pAwardMoneyExp, 0); //TeamWorkExp
		Write32(pAwardMoneyExp, 0); //AchievePoint
		Write32(pAwardMoneyExp, 0); //ConsumeScore
		Write32(pAwardMoneyExp, 0); //HistoryConsumeScore
		Write32(pAwardMoneyExp, 0); //LadderMatchAchievePoint
		Write32(pAwardMoneyExp, 0); //SpeedBean
		Write32(pAwardMoneyExp, 0); //SpeedCoin

		len = pAwardMoneyExp - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //AwardItemNum
	for (size_t i = 0; i < n; i++)
	{ //AwardItem
		BYTE* pAwardItem = p;
		Write16(pAwardItem, 0); //len

		Write32(pAwardItem, 0); //ItemID
		Write32(pAwardItem, 0); //ItemNum
		Write32(pAwardItem, 0); //AvailPeriod
		Write8(pAwardItem, 0); //Status
		WriteUn(pAwardItem, 0); //ObtainTime
		Write32(pAwardItem, 0); //OtherAttribute
		Write16(pAwardItem, 0); //ItemType

		len = pAwardItem - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 1620, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyCurrentAppellationInRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write8(p, 0); //HaveAppellation
	for (size_t i = 0; i < n; i++)
	{ //CurAppellation
		BYTE* pCurAppellation = p;
		Write16(pCurAppellation, 0); //len

		Write8(pCurAppellation, 0); //Type
		Write8(pCurAppellation, 0); //Level
		Write8(pCurAppellation, 0); //Status
		Write8(pCurAppellation, 0); //Difficulty
		Write32(pCurAppellation, 0); //MapId
		Write32(pCurAppellation, 0); //Value

		len = pCurAppellation - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 1621, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestKartMaintenance(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int KartID = Read32(p);
	UCHAR Type = Read8(p);

}

void ResponseKartMaintenance(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //KartID
	Write8(p, 0); //Type
	Write32(p, 0); //CurPeriod
	Write32(p, 0); //IncPeriod

	len = p - buf;
	SendToClient(Client, 10910, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestConsoleCmd(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT MsgLen = Read16(p);

}

void ResponseConsoleCmd(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //MsgLen

	len = p - buf;
	SendToClient(Client, 652, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestReportNewPlayerTutorStatistic(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	Un Time = ReadUn(p);
	UINT TaskID = Read32(p);

}

void RequestGetPhantomN2O(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT LapTime = Read32(p);
	int[] CurPosition[] = Read32(p);
	USHORT Idx = Read16(p);

}

void NotifyGetPhantomN2O(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //Idx

	len = p - buf;
	SendToClient(Client, 10916, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestStartPhantomN2OJet(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT LapTime = Read32(p);
	USHORT JetType = Read16(p);
	UINT SJetSeq = Read32(p);

}

void RequestEndPhantomN2OJet(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT LapTime = Read32(p);
	USHORT JetType = Read16(p);
	UINT SJetSeq = Read32(p);

}

void NotifyClientUpdateNobleInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	{ //NobleInfo
		BYTE* pNobleInfo = p;
		Write16(pNobleInfo, 0); //len

		Write32(pNobleInfo, 0); //NobleID
		Write8(pNobleInfo, 0); //NobleLevel
		Write32(pNobleInfo, 0); //NoblePoint
		Write32(pNobleInfo, 0); //NobleLeftDays

		len = pNobleInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 961, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyClientUpdateEmperorInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write8(p, 0); //OpenType
	{ //EmperorInfo
		BYTE* pEmperorInfo = p;
		Write16(pEmperorInfo, 0); //len

		Write8(pEmperorInfo, 0); //EmperorLevel
		Write32(pEmperorInfo, 0); //EmperorPoint
		Write32(pEmperorInfo, 0); //EmperorLeftDays
		Write8(pEmperorInfo, 0); //EmperorGrowRate

		len = pEmperorInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //EmperorOtherInfo
		BYTE* pEmperorOtherInfo = p;
		Write16(pEmperorOtherInfo, 0); //len

		Write32(pEmperorOtherInfo, 0); //ExpiredTime
		Write8(pEmperorOtherInfo, 0); //ShowExpireTips

		len = pEmperorOtherInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 978, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyCustomMapList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	{ //CustomMapList
		BYTE* pCustomMapList = p;
		Write16(pCustomMapList, 0); //len

		Write8(pCustomMapList, 0); //RandType
		Write8(pCustomMapList, 0); //MapNum
		Write32(pCustomMapList, 0); //MapList[]
		Write8(pCustomMapList, 0); //MapType

		len = pCustomMapList - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 631, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestUpdateCustomMapList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	{ //CustomMapList
		BYTE* pCustomMapList = p;
		len = Read16(pCustomMapList);

		UCHAR RandType = Read8(pCustomMapList);
		UCHAR MapNum = Read8(pCustomMapList);
		UINT[] MapList[] = Read32(pCustomMapList);
		UCHAR MapType = Read8(pCustomMapList);

		p += len;
	}

}

void ResponseUpdateCustomMapList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 1651, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestChangeFishingStatus(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR FishingStatus = Read8(p);

}

void ResponseChangeFishingStatus(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //FishingStatus

	len = p - buf;
	SendToClient(Client, 11400, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyChangeFishingStatus(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write8(p, 0); //FishingStatus

	len = p - buf;
	SendToClient(Client, 11401, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyFishingResult(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	{ //FishingAward
		BYTE* pFishingAward = p;
		Write16(pFishingAward, 0); //len

		Write8(pFishingAward, 0); //FishingAwardType
		Write32(pFishingAward, 0); //AwardItemID
		Write8(pFishingAward, 0); //AwardItemNum

		len = pFishingAward - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11402, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyDragonBallQTEBegin(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin

	len = p - buf;
	SendToClient(Client, 11403, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestReportDragonBallQTEResult(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT ResultID = Read16(p);

}

void RequestRoastFish(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int ExchangeID = Read32(p);
	USHORT ExchangeTimes = Read16(p);

}

void ResponseRoastFish(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 11405, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyFBInitInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //TotalTime
	Write8(p, 0); //TargetNum
	for (size_t i = 0; i < n; i++)
	{ //Target
		BYTE* pTarget = p;
		Write16(pTarget, 0); //len

		{ //ID
			BYTE* pID = pTarget;
			Write16(pID, 0); //len

			Write8(pID, 0); //Type
			Write32(pID, 0); //ID

			len = pID - pTarget;
			Set16(pTarget, (WORD)len);
			pTarget += len;
		}
		{ //StaticInfo
			BYTE* pStaticInfo = pTarget;
			Write16(pStaticInfo, 0); //len

			Write32(pStaticInfo, 0); //MaxHP
			Write32(pStaticInfo, 0); //Rate

			len = pStaticInfo - pTarget;
			Set16(pTarget, (WORD)len);
			pTarget += len;
		}
		{ //DynamicInfo
			BYTE* pDynamicInfo = pTarget;
			Write16(pDynamicInfo, 0); //len

			Write32(pDynamicInfo, 0); //HP
			Write8(pDynamicInfo, 0); //Status
			Write8(pDynamicInfo, 0); //DeadTimes
			Write8(pDynamicInfo, 0); //Flag
			Write32(pDynamicInfo, 0); //Damage

			len = pDynamicInfo - pTarget;
			Set16(pTarget, (WORD)len);
			pTarget += len;
		}

		len = pTarget - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11362, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestFBReportTrigger(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int TriggerID = Read32(p);
	int TriggerPara = Read32(p);

}

void RequestFBReportPlayerEvent(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int SkillID = Read32(p);
	int GPID = Read32(p);

}

void RequestFBReportBossEvent(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int SkillID = Read32(p);
	int SkillPower = Read32(p);
	int SkillPara = Read32(p);
	int SkillNum = Read32(p);

}

void NotifyFBPlayerEvent(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //Time
	Write32(p, 0); //SkillID
	Write32(p, 0); //GPID

	len = p - buf;
	SendToClient(Client, 11366, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyFBBossEvent(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //Time
	Write32(p, 0); //SkillID
	Write32(p, 0); //SkillPower
	Write32(p, 0); //SkillPara

	len = p - buf;
	SendToClient(Client, 11367, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyFBAction(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //ActionID
	Write8(p, 0); //TargetNum
	for (size_t i = 0; i < n; i++)
	{ //Target
		BYTE* pTarget = p;
		Write16(pTarget, 0); //len

		Write8(pTarget, 0); //Type
		Write32(pTarget, 0); //ID

		len = pTarget - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //ActionPara

	len = p - buf;
	SendToClient(Client, 11368, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyFBStatus(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //TWValue
	Write32(p, 0); //SrcUin
	Write8(p, 0); //TargetNum
	for (size_t i = 0; i < n; i++)
	{ //ChangeInfo
		BYTE* pChangeInfo = p;
		Write16(pChangeInfo, 0); //len

		{ //ID
			BYTE* pID = pChangeInfo;
			Write16(pID, 0); //len

			Write8(pID, 0); //Type
			Write32(pID, 0); //ID

			len = pID - pChangeInfo;
			Set16(pChangeInfo, (WORD)len);
			pChangeInfo += len;
		}
		{ //DynamicInfo
			BYTE* pDynamicInfo = pChangeInfo;
			Write16(pDynamicInfo, 0); //len

			Write32(pDynamicInfo, 0); //HP
			Write8(pDynamicInfo, 0); //Status
			Write8(pDynamicInfo, 0); //DeadTimes
			Write8(pDynamicInfo, 0); //Flag
			Write32(pDynamicInfo, 0); //Damage

			len = pDynamicInfo - pChangeInfo;
			Set16(pChangeInfo, (WORD)len);
			pChangeInfo += len;
		}

		len = pChangeInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11369, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyFBRaceOver(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //Result
	{ //RoomInfo
		BYTE* pRoomInfo = p;
		Write16(pRoomInfo, 0); //len

		Write8(pRoomInfo, 0); //AvailableLev
		Write8(pRoomInfo, 0); //Lev
		Write8(pRoomInfo, 0); //SubLev
		Write32(pRoomInfo, 0); //BossID
		Write8(pRoomInfo, 0); //FBSeason

		len = pRoomInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //PlayerNum
	for (size_t i = 0; i < n; i++)
	{ //Score
		BYTE* pScore = p;
		Write16(pScore, 0); //len

		Write32(pScore, 0); //Uin
		Write8(pScore, 0); //Flag
		Write8(pScore, 0); //Rank
		Write32(pScore, 0); //Damage
		Write32(pScore, 0); //MoneyInc
		Write32(pScore, 0); //MoneyTotal
		Write32(pScore, 0); //ExpInc
		Write32(pScore, 0); //ExpTotal
		Write8(pScore, 0); //AwardItemNum
		for (size_t i = 0; i < n; i++)
		{ //AwardItems
			BYTE* pAwardItems = pScore;
			Write16(pAwardItems, 0); //len

			Write32(pAwardItems, 0); //ItemID
			Write32(pAwardItems, 0); //ItemNum
			Write32(pAwardItems, 0); //AvailPeriod
			Write8(pAwardItems, 0); //Status
			WriteUn(pAwardItems, 0); //ObtainTime
			Write32(pAwardItems, 0); //OtherAttribute
			Write16(pAwardItems, 0); //ItemType

			len = pAwardItems - pScore;
			Set16(pScore, (WORD)len);
			pScore += len;
		}
		Write8(pScore, 0); //HasBattleModeResult
		for (size_t i = 0; i < n; i++)
		{ //BattleModeResult
			BYTE* pBattleModeResult = pScore;
			Write16(pBattleModeResult, 0); //len

			Write32(pBattleModeResult, 0); //Score
			Write32(pBattleModeResult, 0); //MaximumBatter
			Write32(pBattleModeResult, 0); //KillLittleMonstersNum

			len = pBattleModeResult - pScore;
			Set16(pScore, (WORD)len);
			pScore += len;
		}
		Write8(pScore, 0); //HasYuLeJiaNianHuaComputeData
		for (size_t i = 0; i < n; i++)
		{ //YuLeJiaNianHuaComputeData
			BYTE* pYuLeJiaNianHuaComputeData = pScore;
			Write16(pYuLeJiaNianHuaComputeData, 0); //len

			Write32(pYuLeJiaNianHuaComputeData, 0); //AwardScore
			Write8(pYuLeJiaNianHuaComputeData, 0); //Recommend
			Write8(pYuLeJiaNianHuaComputeData, 0); //ScoreDouble
			Write8(pYuLeJiaNianHuaComputeData, 0); //GuaJi

			len = pYuLeJiaNianHuaComputeData - pScore;
			Set16(pScore, (WORD)len);
			pScore += len;
		}

		len = pScore - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //KickOffPlayerNumber
	for (size_t i = 0; i < n; i++)
	{ //KickOffPlayer
		BYTE* pKickOffPlayer = p;
		Write16(pKickOffPlayer, 0); //len

		Write32(pKickOffPlayer, 0); //Uin
		WriteString(pKickOffPlayer, 0); //NickName[]
		Write8(pKickOffPlayer, 0); //Gender
		Write8(pKickOffPlayer, 0); //TeamID
		Write8(pKickOffPlayer, 0); //Country

		len = pKickOffPlayer - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11370, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyFBGenPropBox(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //PropPositionNO

	len = p - buf;
	SendToClient(Client, 11371, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetPlayerEventCfg(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetPlayerEventCfg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //GetFriendsEventInterval
	Write32(p, 0); //GetOtherEventInterval
	Write32(p, 0); //FilterTimeLimit

	len = p - buf;
	SendToClient(Client, 11451, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetPlayerEvent(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR TargetType = Read8(p);
	UCHAR TimeType = Read8(p);
	USHORT TarGetNum = Read16(p);
	for (size_t i = 0; i < n; i++)
	{ //TarGetInfo
		BYTE* pTarGetInfo = p;
		len = Read16(pTarGetInfo);

		UINT Uin = Read32(pTarGetInfo);
		UINT EventID = Read32(pTarGetInfo);

		p += len;
	}

}

void ResponseGetPlayerEvent(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //TargetType
	Write8(p, 0); //TimeType
	Write16(p, 0); //Num
	for (size_t i = 0; i < n; i++)
	{ //Event
		BYTE* pEvent = p;
		Write16(pEvent, 0); //len

		Write32(pEvent, 0); //Uin
		Write8(pEvent, 0); //Type
		Write32(pEvent, 0); //EventID
		Write8(pEvent, 0); //IntNum
		Write32(pEvent, 0); //Para[]
		Write8(pEvent, 0); //ShortNum
		Write16(pEvent, 0); //Para[]
		WriteU(pEvent, 0); //StrNum
		for (size_t i = 0; i < n; i++)
		{ //Para
			BYTE* pPara = pEvent;
			Write16(pPara, 0); //len

			WriteString(pPara, 0); //Str[]

			len = pPara - pEvent;
			Set16(pEvent, (WORD)len);
			pEvent += len;
		}
		Write32(pEvent, 0); //Time

		len = pEvent - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11452, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestReadPlayerEvent(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT TarGetNum = Read16(p);
	for (size_t i = 0; i < n; i++)
	{ //TarGetInfo
		BYTE* pTarGetInfo = p;
		len = Read16(pTarGetInfo);

		UINT Uin = Read32(pTarGetInfo);
		UINT EventID = Read32(pTarGetInfo);

		p += len;
	}

}

void ResponseReadPlayerEvent(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 11453, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestChangeFocus(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR Op = Read8(p);
	UINT FriendUin = Read32(p);
	UCHAR FriendFlag = Read8(p);

}

void ResponseChangeFocus(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //Op
	Write32(p, 0); //FriendUin
	Write8(p, 0); //FriendFlag

	len = p - buf;
	SendToClient(Client, 11454, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestStartChallengeFriend(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	UINT DstUin = Read32(p);
	int DstMapID = Read32(p);
	UINT DstTime = Read32(p);

}

void ResponseStartChallengeFriend(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //DstUin
	Write32(p, 0); //DstMapID
	Write32(p, 0); //DstTime

	len = p - buf;
	SendToClient(Client, 11455, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestEndChallengeFriend(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	UINT DstUin = Read32(p);
	int DstMapID = Read32(p);
	UINT DstTime = Read32(p);
	int Time = Read32(p);
	char[] DstName[] = ReadString(p);

}

void ResponseEndChallengeFriend(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 11456, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifySpeed2Cfg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //MapEffectMaskNum
	for (size_t i = 0; i < n; i++)
	{ //MapEffectMask
		BYTE* pMapEffectMask = p;
		Write16(pMapEffectMask, 0); //len

		Write16(pMapEffectMask, 0); //MapID
		Write32(pMapEffectMask, 0); //EffectMask

		len = pMapEffectMask - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //Speed2ShopLimit
	Write32(p, 0); //OpenFlag

	len = p - buf;
	SendToClient(Client, 11358, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestChangeModel(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	BYTE NewModel = Read8(p);
	UCHAR UseType = Read8(p);

}

void ResponseChangeModel(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen
	Write8(p, 0); //NewModel
	Write8(p, 0); //UseType
	Write8(p, 0); //TDCExcluItemNum
	Write32(p, 0); //TDCExclusiveItemID[]

	len = p - buf;
	SendToClient(Client, 277, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyChangeModel(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write8(p, 0); //NewModel
	Write8(p, 0); //TDCExcluItemNum
	Write32(p, 0); //TDCExclusiveItemID[]

	len = p - buf;
	SendToClient(Client, 278, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestEnlistGuildMember(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT DstUin = Read32(p);

}

void ResponseEnlistGuildMember(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write32(p, 0); //DstUin
	Write8(p, 0); //EnlistNum
	Write8(p, 0); //MaxAwardNum
	Write8(p, 0); //HasAward
	Write32(p, 0); //AwardExp
	Write32(p, 0); //AwardGuildScore

	len = p - buf;
	SendToClient(Client, 300, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestModifyGuildName(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	char[] DstGuildName[] = ReadString(p);

}

void ResponseModifyGuildName(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen
	WriteString(p, 0); //DstGuildName[]

	len = p - buf;
	SendToClient(Client, 288, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyGUMCModifyGuildName(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //DstGuildID
	WriteString(p, 0); //DstGuildName[]

	len = p - buf;
	SendToClient(Client, 15235, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetSpringInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetSpringInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //LeftSpringTime
	Write16(p, 0); //LeftBatheCount

	len = p - buf;
	SendToClient(Client, 280, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestEnterSpring(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseEnterSpring(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 281, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestLeaveSpring(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseLeaveSpring(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 282, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyLeaveSpring(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin

	len = p - buf;
	SendToClient(Client, 287, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifySpringHoleInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //SpringHoleNum
	for (size_t i = 0; i < n; i++)
	{ //SpringHole
		BYTE* pSpringHole = p;
		Write16(pSpringHole, 0); //len

		Write32(pSpringHole, 0); //Posion[]

		len = pSpringHole - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 283, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyBatheAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	{ //Award
		BYTE* pAward = p;
		Write16(pAward, 0); //len

		Write32(pAward, 0); //Exp
		Write32(pAward, 0); //Money
		Write32(pAward, 0); //SuperMoney
		Write16(pAward, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAward;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write32(pAward, 0); //Coupons
		Write32(pAward, 0); //GuildPoint
		Write32(pAward, 0); //LuckMoney
		Write8(pAward, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAward;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write32(pAward, 0); //SpeedCoin

		len = pAward - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //LeftBatheCount

	len = p - buf;
	SendToClient(Client, 284, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyOutDoorEggDisappear(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //EggNumber
	for (size_t i = 0; i < n; i++)
	{ //EggInfo
		BYTE* pEggInfo = p;
		Write16(pEggInfo, 0); //len

		WriteUn(pEggInfo, 0); //EggPosition
		Write32(pEggInfo, 0); //EggTypeID

		len = pEggInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 285, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyEnterSpring(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin

	len = p - buf;
	SendToClient(Client, 286, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestCrashModeIncEgg(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT LapTime = Read32(p);
	UCHAR Type = Read8(p);
	UCHAR IncNum = Read8(p);
	UCHAR TotalNum = Read8(p);

}

void RequestCrashModeDecEgg(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT LapTime = Read32(p);
	UCHAR Type = Read8(p);
	UCHAR DecNum = Read8(p);
	UCHAR TotalNum = Read8(p);

}

void RequestChangeCrashModeSponsor(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR SponsorID = Read8(p);

}

void ResponseChangeCrashModeSponsor(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //CurSponsorID

	len = p - buf;
	SendToClient(Client, 10922, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestWorldOnlineInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseWorldOnlineInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //UpdateOnlineInfoInterval
	{ //Info
		BYTE* pInfo = p;
		Write16(pInfo, 0); //len

		Write8(pInfo, 0); //CountryCount
		for (size_t i = 0; i < n; i++)
		{ //CountryInfo
			BYTE* pCountryInfo = pInfo;
			Write16(pCountryInfo, 0); //len

			Write8(pCountryInfo, 0); //CountryID
			Write8(pCountryInfo, 0); //ChannelNum
			for (size_t i = 0; i < n; i++)
			{ //ChannelInfo
				BYTE* pChannelInfo = pCountryInfo;
				Write16(pChannelInfo, 0); //len

				Write8(pChannelInfo, 0); //ChannelID
				Write8(pChannelInfo, 0); //IDCNum
				for (size_t i = 0; i < n; i++)
				{ //IDCServerInfo
					BYTE* pIDCServerInfo = pChannelInfo;
					Write16(pIDCServerInfo, 0); //len

					Write16(pIDCServerInfo, 0); //LocationID
					Write8(pIDCServerInfo, 0); //GameServerNum
					for (size_t i = 0; i < n; i++)
					{ //GameServerInfo
						BYTE* pGameServerInfo = pIDCServerInfo;
						Write16(pGameServerInfo, 0); //len

						Write32(pGameServerInfo, 0); //ServerID
						Write16(pGameServerInfo, 0); //MaxPlayerNum
						Write16(pGameServerInfo, 0); //CurrentPlayerNum
						Write8(pGameServerInfo, 0); //PlayerIncPerSec
						Write32(pGameServerInfo, 0); //ServerIP
						Write16(pGameServerInfo, 0); //TcpPort
						Write16(pGameServerInfo, 0); //UdpPort
						Write32(pGameServerInfo, 0); //RandomKey
						Write8(pGameServerInfo, 0); //IsDisabledLogin
						Write8(pGameServerInfo, 0); //HasMultiIPInfo
						for (size_t i = 0; i < n; i++)
						{ //MultiIPInfo
							BYTE* pMultiIPInfo = pGameServerInfo;
							Write16(pMultiIPInfo, 0); //len

							Write8(pMultiIPInfo, 0); //IPCount
							Write32(pMultiIPInfo, 0); //ServerIP[]
							Write8(pMultiIPInfo, 0); //DomainLen

							len = pMultiIPInfo - pGameServerInfo;
							Set16(pGameServerInfo, (WORD)len);
							pGameServerInfo += len;
						}

						len = pGameServerInfo - pIDCServerInfo;
						Set16(pIDCServerInfo, (WORD)len);
						pIDCServerInfo += len;
					}

					len = pIDCServerInfo - pChannelInfo;
					Set16(pChannelInfo, (WORD)len);
					pChannelInfo += len;
				}

				len = pChannelInfo - pCountryInfo;
				Set16(pCountryInfo, (WORD)len);
				pCountryInfo += len;
			}

			len = pCountryInfo - pInfo;
			Set16(pInfo, (WORD)len);
			pInfo += len;
		}
		Write8(pInfo, 0); //BorderServerCount
		for (size_t i = 0; i < n; i++)
		{ //BorderServerInfo
			BYTE* pBorderServerInfo = pInfo;
			Write16(pBorderServerInfo, 0); //len

			Write16(pBorderServerInfo, 0); //LocationID
			{ //OnlineInfo
				BYTE* pOnlineInfo = pBorderServerInfo;
				Write16(pOnlineInfo, 0); //len

				Write32(pOnlineInfo, 0); //ServerID
				Write16(pOnlineInfo, 0); //MaxPlayerNum
				Write16(pOnlineInfo, 0); //CurrentPlayerNum
				Write8(pOnlineInfo, 0); //PlayerIncPerSec
				Write32(pOnlineInfo, 0); //ServerIP
				Write16(pOnlineInfo, 0); //TcpPort
				Write16(pOnlineInfo, 0); //UdpPort
				Write32(pOnlineInfo, 0); //RandomKey
				Write8(pOnlineInfo, 0); //IsDisabledLogin
				Write8(pOnlineInfo, 0); //HasMultiIPInfo
				for (size_t i = 0; i < n; i++)
				{ //MultiIPInfo
					BYTE* pMultiIPInfo = pOnlineInfo;
					Write16(pMultiIPInfo, 0); //len

					Write8(pMultiIPInfo, 0); //IPCount
					Write32(pMultiIPInfo, 0); //ServerIP[]
					Write8(pMultiIPInfo, 0); //DomainLen

					len = pMultiIPInfo - pOnlineInfo;
					Set16(pOnlineInfo, (WORD)len);
					pOnlineInfo += len;
				}

				len = pOnlineInfo - pBorderServerInfo;
				Set16(pBorderServerInfo, (WORD)len);
				pBorderServerInfo += len;
			}

			len = pBorderServerInfo - pInfo;
			Set16(pInfo, (WORD)len);
			pInfo += len;
		}
		Write8(pInfo, 0); //MatchServerCount
		for (size_t i = 0; i < n; i++)
		{ //MatchServerInfo
			BYTE* pMatchServerInfo = pInfo;
			Write16(pMatchServerInfo, 0); //len

			Write16(pMatchServerInfo, 0); //LocationID
			{ //OnlineInfo
				BYTE* pOnlineInfo = pMatchServerInfo;
				Write16(pOnlineInfo, 0); //len

				Write32(pOnlineInfo, 0); //ServerID
				Write16(pOnlineInfo, 0); //MaxPlayerNum
				Write16(pOnlineInfo, 0); //CurrentPlayerNum
				Write8(pOnlineInfo, 0); //PlayerIncPerSec
				Write32(pOnlineInfo, 0); //ServerIP
				Write16(pOnlineInfo, 0); //TcpPort
				Write16(pOnlineInfo, 0); //UdpPort
				Write32(pOnlineInfo, 0); //RandomKey
				Write8(pOnlineInfo, 0); //IsDisabledLogin
				Write8(pOnlineInfo, 0); //HasMultiIPInfo
				for (size_t i = 0; i < n; i++)
				{ //MultiIPInfo
					BYTE* pMultiIPInfo = pOnlineInfo;
					Write16(pMultiIPInfo, 0); //len

					Write8(pMultiIPInfo, 0); //IPCount
					Write32(pMultiIPInfo, 0); //ServerIP[]
					Write8(pMultiIPInfo, 0); //DomainLen

					len = pMultiIPInfo - pOnlineInfo;
					Set16(pOnlineInfo, (WORD)len);
					pOnlineInfo += len;
				}

				len = pOnlineInfo - pMatchServerInfo;
				Set16(pMatchServerInfo, (WORD)len);
				pMatchServerInfo += len;
			}

			len = pMatchServerInfo - pInfo;
			Set16(pInfo, (WORD)len);
			pInfo += len;
		}
		Write8(pInfo, 0); //RelaxServerCount
		for (size_t i = 0; i < n; i++)
		{ //RelaxServerInfo
			BYTE* pRelaxServerInfo = pInfo;
			Write16(pRelaxServerInfo, 0); //len

			Write16(pRelaxServerInfo, 0); //LocationID
			{ //OnlineInfo
				BYTE* pOnlineInfo = pRelaxServerInfo;
				Write16(pOnlineInfo, 0); //len

				Write32(pOnlineInfo, 0); //ServerID
				Write16(pOnlineInfo, 0); //MaxPlayerNum
				Write16(pOnlineInfo, 0); //CurrentPlayerNum
				Write8(pOnlineInfo, 0); //PlayerIncPerSec
				Write32(pOnlineInfo, 0); //ServerIP
				Write16(pOnlineInfo, 0); //TcpPort
				Write16(pOnlineInfo, 0); //UdpPort
				Write32(pOnlineInfo, 0); //RandomKey
				Write8(pOnlineInfo, 0); //IsDisabledLogin
				Write8(pOnlineInfo, 0); //HasMultiIPInfo
				for (size_t i = 0; i < n; i++)
				{ //MultiIPInfo
					BYTE* pMultiIPInfo = pOnlineInfo;
					Write16(pMultiIPInfo, 0); //len

					Write8(pMultiIPInfo, 0); //IPCount
					Write32(pMultiIPInfo, 0); //ServerIP[]
					Write8(pMultiIPInfo, 0); //DomainLen

					len = pMultiIPInfo - pOnlineInfo;
					Set16(pOnlineInfo, (WORD)len);
					pOnlineInfo += len;
				}

				len = pOnlineInfo - pRelaxServerInfo;
				Set16(pRelaxServerInfo, (WORD)len);
				pRelaxServerInfo += len;
			}

			len = pRelaxServerInfo - pInfo;
			Set16(pInfo, (WORD)len);
			pInfo += len;
		}
		Write8(pInfo, 0); //TeamServerCount
		for (size_t i = 0; i < n; i++)
		{ //TeamServerInfo
			BYTE* pTeamServerInfo = pInfo;
			Write16(pTeamServerInfo, 0); //len

			Write16(pTeamServerInfo, 0); //LocationID
			{ //OnlineInfo
				BYTE* pOnlineInfo = pTeamServerInfo;
				Write16(pOnlineInfo, 0); //len

				Write32(pOnlineInfo, 0); //ServerID
				Write16(pOnlineInfo, 0); //MaxPlayerNum
				Write16(pOnlineInfo, 0); //CurrentPlayerNum
				Write8(pOnlineInfo, 0); //PlayerIncPerSec
				Write32(pOnlineInfo, 0); //ServerIP
				Write16(pOnlineInfo, 0); //TcpPort
				Write16(pOnlineInfo, 0); //UdpPort
				Write32(pOnlineInfo, 0); //RandomKey
				Write8(pOnlineInfo, 0); //IsDisabledLogin
				Write8(pOnlineInfo, 0); //HasMultiIPInfo
				for (size_t i = 0; i < n; i++)
				{ //MultiIPInfo
					BYTE* pMultiIPInfo = pOnlineInfo;
					Write16(pMultiIPInfo, 0); //len

					Write8(pMultiIPInfo, 0); //IPCount
					Write32(pMultiIPInfo, 0); //ServerIP[]
					Write8(pMultiIPInfo, 0); //DomainLen

					len = pMultiIPInfo - pOnlineInfo;
					Set16(pOnlineInfo, (WORD)len);
					pOnlineInfo += len;
				}

				len = pOnlineInfo - pTeamServerInfo;
				Set16(pTeamServerInfo, (WORD)len);
				pTeamServerInfo += len;
			}

			len = pTeamServerInfo - pInfo;
			Set16(pInfo, (WORD)len);
			pInfo += len;
		}
		Write8(pInfo, 0); //DanceServerCount
		for (size_t i = 0; i < n; i++)
		{ //DanceServerInfo
			BYTE* pDanceServerInfo = pInfo;
			Write16(pDanceServerInfo, 0); //len

			Write16(pDanceServerInfo, 0); //LocationID
			{ //OnlineInfo
				BYTE* pOnlineInfo = pDanceServerInfo;
				Write16(pOnlineInfo, 0); //len

				Write32(pOnlineInfo, 0); //ServerID
				Write16(pOnlineInfo, 0); //MaxPlayerNum
				Write16(pOnlineInfo, 0); //CurrentPlayerNum
				Write8(pOnlineInfo, 0); //PlayerIncPerSec
				Write32(pOnlineInfo, 0); //ServerIP
				Write16(pOnlineInfo, 0); //TcpPort
				Write16(pOnlineInfo, 0); //UdpPort
				Write32(pOnlineInfo, 0); //RandomKey
				Write8(pOnlineInfo, 0); //IsDisabledLogin
				Write8(pOnlineInfo, 0); //HasMultiIPInfo
				for (size_t i = 0; i < n; i++)
				{ //MultiIPInfo
					BYTE* pMultiIPInfo = pOnlineInfo;
					Write16(pMultiIPInfo, 0); //len

					Write8(pMultiIPInfo, 0); //IPCount
					Write32(pMultiIPInfo, 0); //ServerIP[]
					Write8(pMultiIPInfo, 0); //DomainLen

					len = pMultiIPInfo - pOnlineInfo;
					Set16(pOnlineInfo, (WORD)len);
					pOnlineInfo += len;
				}

				len = pOnlineInfo - pDanceServerInfo;
				Set16(pDanceServerInfo, (WORD)len);
				pDanceServerInfo += len;
			}

			len = pDanceServerInfo - pInfo;
			Set16(pInfo, (WORD)len);
			pInfo += len;
		}
		Write8(pInfo, 0); //SlideServerCount
		for (size_t i = 0; i < n; i++)
		{ //SlideServerInfo
			BYTE* pSlideServerInfo = pInfo;
			Write16(pSlideServerInfo, 0); //len

			Write16(pSlideServerInfo, 0); //LocationID
			{ //OnlineInfo
				BYTE* pOnlineInfo = pSlideServerInfo;
				Write16(pOnlineInfo, 0); //len

				Write32(pOnlineInfo, 0); //ServerID
				Write16(pOnlineInfo, 0); //MaxPlayerNum
				Write16(pOnlineInfo, 0); //CurrentPlayerNum
				Write8(pOnlineInfo, 0); //PlayerIncPerSec
				Write32(pOnlineInfo, 0); //ServerIP
				Write16(pOnlineInfo, 0); //TcpPort
				Write16(pOnlineInfo, 0); //UdpPort
				Write32(pOnlineInfo, 0); //RandomKey
				Write8(pOnlineInfo, 0); //IsDisabledLogin
				Write8(pOnlineInfo, 0); //HasMultiIPInfo
				for (size_t i = 0; i < n; i++)
				{ //MultiIPInfo
					BYTE* pMultiIPInfo = pOnlineInfo;
					Write16(pMultiIPInfo, 0); //len

					Write8(pMultiIPInfo, 0); //IPCount
					Write32(pMultiIPInfo, 0); //ServerIP[]
					Write8(pMultiIPInfo, 0); //DomainLen

					len = pMultiIPInfo - pOnlineInfo;
					Set16(pOnlineInfo, (WORD)len);
					pOnlineInfo += len;
				}

				len = pOnlineInfo - pSlideServerInfo;
				Set16(pSlideServerInfo, (WORD)len);
				pSlideServerInfo += len;
			}

			len = pSlideServerInfo - pInfo;
			Set16(pInfo, (WORD)len);
			pInfo += len;
		}
		Write8(pInfo, 0); //FBServerCount
		for (size_t i = 0; i < n; i++)
		{ //FBServerInfo
			BYTE* pFBServerInfo = pInfo;
			Write16(pFBServerInfo, 0); //len

			Write16(pFBServerInfo, 0); //LocationID
			{ //OnlineInfo
				BYTE* pOnlineInfo = pFBServerInfo;
				Write16(pOnlineInfo, 0); //len

				Write32(pOnlineInfo, 0); //ServerID
				Write16(pOnlineInfo, 0); //MaxPlayerNum
				Write16(pOnlineInfo, 0); //CurrentPlayerNum
				Write8(pOnlineInfo, 0); //PlayerIncPerSec
				Write32(pOnlineInfo, 0); //ServerIP
				Write16(pOnlineInfo, 0); //TcpPort
				Write16(pOnlineInfo, 0); //UdpPort
				Write32(pOnlineInfo, 0); //RandomKey
				Write8(pOnlineInfo, 0); //IsDisabledLogin
				Write8(pOnlineInfo, 0); //HasMultiIPInfo
				for (size_t i = 0; i < n; i++)
				{ //MultiIPInfo
					BYTE* pMultiIPInfo = pOnlineInfo;
					Write16(pMultiIPInfo, 0); //len

					Write8(pMultiIPInfo, 0); //IPCount
					Write32(pMultiIPInfo, 0); //ServerIP[]
					Write8(pMultiIPInfo, 0); //DomainLen

					len = pMultiIPInfo - pOnlineInfo;
					Set16(pOnlineInfo, (WORD)len);
					pOnlineInfo += len;
				}

				len = pOnlineInfo - pFBServerInfo;
				Set16(pFBServerInfo, (WORD)len);
				pFBServerInfo += len;
			}

			len = pFBServerInfo - pInfo;
			Set16(pInfo, (WORD)len);
			pInfo += len;
		}
		Write8(pInfo, 0); //WlMatchSvrCount
		for (size_t i = 0; i < n; i++)
		{ //WlMatchSvrInfo
			BYTE* pWlMatchSvrInfo = pInfo;
			Write16(pWlMatchSvrInfo, 0); //len

			Write16(pWlMatchSvrInfo, 0); //LocationID
			{ //OnlineInfo
				BYTE* pOnlineInfo = pWlMatchSvrInfo;
				Write16(pOnlineInfo, 0); //len

				Write32(pOnlineInfo, 0); //ServerID
				Write16(pOnlineInfo, 0); //MaxPlayerNum
				Write16(pOnlineInfo, 0); //CurrentPlayerNum
				Write8(pOnlineInfo, 0); //PlayerIncPerSec
				Write32(pOnlineInfo, 0); //ServerIP
				Write16(pOnlineInfo, 0); //TcpPort
				Write16(pOnlineInfo, 0); //UdpPort
				Write32(pOnlineInfo, 0); //RandomKey
				Write8(pOnlineInfo, 0); //IsDisabledLogin
				Write8(pOnlineInfo, 0); //HasMultiIPInfo
				for (size_t i = 0; i < n; i++)
				{ //MultiIPInfo
					BYTE* pMultiIPInfo = pOnlineInfo;
					Write16(pMultiIPInfo, 0); //len

					Write8(pMultiIPInfo, 0); //IPCount
					Write32(pMultiIPInfo, 0); //ServerIP[]
					Write8(pMultiIPInfo, 0); //DomainLen

					len = pMultiIPInfo - pOnlineInfo;
					Set16(pOnlineInfo, (WORD)len);
					pOnlineInfo += len;
				}

				len = pOnlineInfo - pWlMatchSvrInfo;
				Set16(pWlMatchSvrInfo, (WORD)len);
				pWlMatchSvrInfo += len;
			}

			len = pWlMatchSvrInfo - pInfo;
			Set16(pInfo, (WORD)len);
			pInfo += len;
		}
		Write8(pInfo, 0); //SkateServerCount
		for (size_t i = 0; i < n; i++)
		{ //SkateServerInfo
			BYTE* pSkateServerInfo = pInfo;
			Write16(pSkateServerInfo, 0); //len

			Write16(pSkateServerInfo, 0); //LocationID
			{ //OnlineInfo
				BYTE* pOnlineInfo = pSkateServerInfo;
				Write16(pOnlineInfo, 0); //len

				Write32(pOnlineInfo, 0); //ServerID
				Write16(pOnlineInfo, 0); //MaxPlayerNum
				Write16(pOnlineInfo, 0); //CurrentPlayerNum
				Write8(pOnlineInfo, 0); //PlayerIncPerSec
				Write32(pOnlineInfo, 0); //ServerIP
				Write16(pOnlineInfo, 0); //TcpPort
				Write16(pOnlineInfo, 0); //UdpPort
				Write32(pOnlineInfo, 0); //RandomKey
				Write8(pOnlineInfo, 0); //IsDisabledLogin
				Write8(pOnlineInfo, 0); //HasMultiIPInfo
				for (size_t i = 0; i < n; i++)
				{ //MultiIPInfo
					BYTE* pMultiIPInfo = pOnlineInfo;
					Write16(pMultiIPInfo, 0); //len

					Write8(pMultiIPInfo, 0); //IPCount
					Write32(pMultiIPInfo, 0); //ServerIP[]
					Write8(pMultiIPInfo, 0); //DomainLen

					len = pMultiIPInfo - pOnlineInfo;
					Set16(pOnlineInfo, (WORD)len);
					pOnlineInfo += len;
				}

				len = pOnlineInfo - pSkateServerInfo;
				Set16(pSkateServerInfo, (WORD)len);
				pSkateServerInfo += len;
			}

			len = pSkateServerInfo - pInfo;
			Set16(pInfo, (WORD)len);
			pInfo += len;
		}
		Write8(pInfo, 0); //MRServerCount
		for (size_t i = 0; i < n; i++)
		{ //MRServerInfo
			BYTE* pMRServerInfo = pInfo;
			Write16(pMRServerInfo, 0); //len

			Write16(pMRServerInfo, 0); //LocationID
			{ //OnlineInfo
				BYTE* pOnlineInfo = pMRServerInfo;
				Write16(pOnlineInfo, 0); //len

				Write32(pOnlineInfo, 0); //ServerID
				Write16(pOnlineInfo, 0); //MaxPlayerNum
				Write16(pOnlineInfo, 0); //CurrentPlayerNum
				Write8(pOnlineInfo, 0); //PlayerIncPerSec
				Write32(pOnlineInfo, 0); //ServerIP
				Write16(pOnlineInfo, 0); //TcpPort
				Write16(pOnlineInfo, 0); //UdpPort
				Write32(pOnlineInfo, 0); //RandomKey
				Write8(pOnlineInfo, 0); //IsDisabledLogin
				Write8(pOnlineInfo, 0); //HasMultiIPInfo
				for (size_t i = 0; i < n; i++)
				{ //MultiIPInfo
					BYTE* pMultiIPInfo = pOnlineInfo;
					Write16(pMultiIPInfo, 0); //len

					Write8(pMultiIPInfo, 0); //IPCount
					Write32(pMultiIPInfo, 0); //ServerIP[]
					Write8(pMultiIPInfo, 0); //DomainLen

					len = pMultiIPInfo - pOnlineInfo;
					Set16(pOnlineInfo, (WORD)len);
					pOnlineInfo += len;
				}

				len = pOnlineInfo - pMRServerInfo;
				Set16(pMRServerInfo, (WORD)len);
				pMRServerInfo += len;
			}

			len = pMRServerInfo - pInfo;
			Set16(pInfo, (WORD)len);
			pInfo += len;
		}
		Write8(pInfo, 0); //NpcServerCount
		for (size_t i = 0; i < n; i++)
		{ //NpcServerInfo
			BYTE* pNpcServerInfo = pInfo;
			Write16(pNpcServerInfo, 0); //len

			Write16(pNpcServerInfo, 0); //LocationID
			{ //OnlineInfo
				BYTE* pOnlineInfo = pNpcServerInfo;
				Write16(pOnlineInfo, 0); //len

				Write32(pOnlineInfo, 0); //ServerID
				Write16(pOnlineInfo, 0); //MaxPlayerNum
				Write16(pOnlineInfo, 0); //CurrentPlayerNum
				Write8(pOnlineInfo, 0); //PlayerIncPerSec
				Write32(pOnlineInfo, 0); //ServerIP
				Write16(pOnlineInfo, 0); //TcpPort
				Write16(pOnlineInfo, 0); //UdpPort
				Write32(pOnlineInfo, 0); //RandomKey
				Write8(pOnlineInfo, 0); //IsDisabledLogin
				Write8(pOnlineInfo, 0); //HasMultiIPInfo
				for (size_t i = 0; i < n; i++)
				{ //MultiIPInfo
					BYTE* pMultiIPInfo = pOnlineInfo;
					Write16(pMultiIPInfo, 0); //len

					Write8(pMultiIPInfo, 0); //IPCount
					Write32(pMultiIPInfo, 0); //ServerIP[]
					Write8(pMultiIPInfo, 0); //DomainLen

					len = pMultiIPInfo - pOnlineInfo;
					Set16(pOnlineInfo, (WORD)len);
					pOnlineInfo += len;
				}

				len = pOnlineInfo - pNpcServerInfo;
				Set16(pNpcServerInfo, (WORD)len);
				pNpcServerInfo += len;
			}

			len = pNpcServerInfo - pInfo;
			Set16(pInfo, (WORD)len);
			pInfo += len;
		}

		len = pInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 1400, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GGetSpecialTaskData(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseC2GGetSpecialTaskData(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //Num
	for (size_t i = 0; i < n; i++)
	{ //Data
		BYTE* pData = p;
		Write16(pData, 0); //len

		Write32(pData, 0); //TaskID
		Write8(pData, 0); //Num
		for (size_t i = 0; i < n; i++)
		{ //Data
			BYTE* pData = pData;
			Write16(pData, 0); //len

			Write8(pData, 0); //Num
			for (size_t i = 0; i < n; i++)
			{ //Data
				BYTE* pData = pData;
				Write16(pData, 0); //len

				Write8(pData, 0); //Num
				Write32(pData, 0); //ID[]

				len = pData - pData;
				Set16(pData, (WORD)len);
				pData += len;
			}

			len = pData - pData;
			Set16(pData, (WORD)len);
			pData += len;
		}

		len = pData - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 231, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GUpdateSpecialTaskProgress(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int TaskID = Read32(p);
	int Progress = Read32(p);

}

void ResponseC2GUpdateSpecialTaskProgress(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //Result

	len = p - buf;
	SendToClient(Client, 232, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyFizzStarTaskComplete(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	{ //FizzStarTaskResult
		BYTE* pFizzStarTaskResult = p;
		Write16(pFizzStarTaskResult, 0); //len

		Write32(pFizzStarTaskResult, 0); //Uin
		Write32(pFizzStarTaskResult, 0); //TaskId
		Write8(pFizzStarTaskResult, 0); //FizzStarTaskFinishResult
		Write8(pFizzStarTaskResult, 0); //HasFriendAddition
		Write32(pFizzStarTaskResult, 0); //LeftTaskAwardMultipleCount

		len = pFizzStarTaskResult - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11598, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyUpdateGuildScore(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //GuildSocreInc
	Write16(p, 0); //PrefixStringLen

	len = p - buf;
	SendToClient(Client, 12041, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestUseSpecialProp(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	short PropID = Read16(p);
	int PropIndex = Read32(p);
	bool ActiveTriggerFlag = Read8(p);

}

void ResponseUseSpecialProp(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write16(p, 0); //PropID
	Write32(p, 0); //PropIndex
	Write8(p, 0); //ActiveTriggerFlag

	len = p - buf;
	SendToClient(Client, 11636, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyUseSpecialProp(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //PropID
	Write32(p, 0); //PropIndex
	Write8(p, 0); //ActiveTriggerFlag

	len = p - buf;
	SendToClient(Client, 11637, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyCrazyPropAchieve(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write8(p, 0); //CrazyPropAchieveNum
	Write32(p, 0); //CrazyPropAchieve[]

	len = p - buf;
	SendToClient(Client, 11638, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyMusicBlackList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //AddressNum
	for (size_t i = 0; i < n; i++)
	{ //Address
		BYTE* pAddress = p;
		Write16(pAddress, 0); //len

		Write16(pAddress, 0); //Len

		len = pAddress - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //IDNum
	Write32(p, 0); //ID[]

	len = p - buf;
	SendToClient(Client, 952, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyPopularityChange(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //DstUin
	Write32(p, 0); //TotoalPopularity
	Write32(p, 0); //ChangePopularity

	len = p - buf;
	SendToClient(Client, 1701, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyPlayerUpdateLadderMatchInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	{ //PlayerLDMBaseInfo
		BYTE* pPlayerLDMBaseInfo = p;
		Write16(pPlayerLDMBaseInfo, 0); //len

		Write8(pPlayerLDMBaseInfo, 0); //Grade
		Write32(pPlayerLDMBaseInfo, 0); //Score
		Write32(pPlayerLDMBaseInfo, 0); //MaxScore
		Write32(pPlayerLDMBaseInfo, 0); //MaxGrade

		len = pPlayerLDMBaseInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //PlayerLDMDetailInfo
		BYTE* pPlayerLDMDetailInfo = p;
		Write16(pPlayerLDMDetailInfo, 0); //len

		Write8(pPlayerLDMDetailInfo, 0); //NextGrade
		Write32(pPlayerLDMDetailInfo, 0); //NextGradeLeftScore
		{ //RankInfo
			BYTE* pRankInfo = pPlayerLDMDetailInfo;
			Write16(pRankInfo, 0); //len

			Write8(pRankInfo, 0); //RankType
			Write8(pRankInfo, 0); //RankValue

			len = pRankInfo - pPlayerLDMDetailInfo;
			Set16(pPlayerLDMDetailInfo, (WORD)len);
			pPlayerLDMDetailInfo += len;
		}
		Write8(pPlayerLDMDetailInfo, 0); //BadgeType
		Write32(pPlayerLDMDetailInfo, 0); //MatchCount
		Write32(pPlayerLDMDetailInfo, 0); //WinCount
		Write32(pPlayerLDMDetailInfo, 0); //WinStreakCount
		Write32(pPlayerLDMDetailInfo, 0); //MaxWinStreakCount
		Write32(pPlayerLDMDetailInfo, 0); //CollisionCount
		Write32(pPlayerLDMDetailInfo, 0); //BeatCount

		len = pPlayerLDMDetailInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 13050, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyFreeForbiddenMode(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //Time

	len = p - buf;
	SendToClient(Client, 13064, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestEnterWonderLandMap(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	int Time = Read32(p);
	UINT WonderId = Read32(p);
	UINT CityId = Read32(p);

}

void ResponseEnterWonderLandMap(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultId
	Write32(p, 0); //WonderId
	Write32(p, 0); //CityId
	Write16(p, 0); //MapId
	WriteU(p, 0); //HasMoveInfo
	for (size_t i = 0; i < n; i++)
	{ //MoveInfo
		BYTE* pMoveInfo = p;
		Write16(pMoveInfo, 0); //len

		Write32(pMoveInfo, 0); //Uin
		Write8(pMoveInfo, 0); //WalkStatue
		Write32(pMoveInfo, 0); //Posion[]
		Write32(pMoveInfo, 0); //Ori[]
		Write32(pMoveInfo, 0); //AttachUin
		Write32(pMoveInfo, 0); //WalkExtState
		Write8(pMoveInfo, 0); //Nums
		Write32(pMoveInfo, 0); //PermitSitHorsePetUins[]
		Write32(pMoveInfo, 0); //EquipedPetID
		Write32(pMoveInfo, 0); //EquipedPetStatus
		Write32(pMoveInfo, 0); //PetPKResultStatus
		Write16(pMoveInfo, 0); //HeroMajorState
		Write16(pMoveInfo, 0); //HorsePetStatus

		len = pMoveInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //BuildingNum
	for (size_t i = 0; i < n; i++)
	{ //BuildingInfo
		BYTE* pBuildingInfo = p;
		Write16(pBuildingInfo, 0); //len

		Write32(pBuildingInfo, 0); //WlId
		Write32(pBuildingInfo, 0); //CityId
		Write32(pBuildingInfo, 0); //BuildingID
		Write8(pBuildingInfo, 0); //BuildingLevel
		Write8(pBuildingInfo, 0); //BuildingStatus
		Write32(pBuildingInfo, 0); //StartTime
		Write32(pBuildingInfo, 0); //EndTime
		Write32(pBuildingInfo, 0); //LeftTime
		Write8(pBuildingInfo, 0); //OpenAttribute

		len = pBuildingInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //Master_Uin
	WriteString(p, 0); //WonderLandNameLen
	Write8(p, 0); //ReasonLen
	Write16(p, 0); //Capacity
	Write32(p, 0); //QTRoomID
	Write32(p, 0); //WishTreeLev
	WriteU(p, 0); //TransCastCash
	WriteU(p, 0); //ReportCurPosInterval
	Write32(p, 0); //EnterWLRoomContrLimit
	Write8(p, 0); //LingShouActivityFlag

	len = p - buf;
	SendToClient(Client, 866, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestExitWonderLandMap(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	int Time = Read32(p);

}

void ResponseExitWonderLandMap(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultId
	Write32(p, 0); //WonderId
	Write32(p, 0); //CityId

	len = p - buf;
	SendToClient(Client, 867, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyEnterViewList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ViewActorNum
	for (size_t i = 0; i < n; i++)
	{ //ViemActor
		BYTE* pViemActor = p;
		Write16(pViemActor, 0); //len

		Write32(pViemActor, 0); //Uin
		{ //MoveInfo
			BYTE* pMoveInfo = pViemActor;
			Write16(pMoveInfo, 0); //len

			Write32(pMoveInfo, 0); //Uin
			Write8(pMoveInfo, 0); //WalkStatue
			Write32(pMoveInfo, 0); //Posion[]
			Write32(pMoveInfo, 0); //Ori[]
			Write32(pMoveInfo, 0); //AttachUin
			Write32(pMoveInfo, 0); //WalkExtState
			Write8(pMoveInfo, 0); //Nums
			Write32(pMoveInfo, 0); //PermitSitHorsePetUins[]
			Write32(pMoveInfo, 0); //EquipedPetID
			Write32(pMoveInfo, 0); //EquipedPetStatus
			Write32(pMoveInfo, 0); //PetPKResultStatus
			Write16(pMoveInfo, 0); //HeroMajorState
			Write16(pMoveInfo, 0); //HorsePetStatus

			len = pMoveInfo - pViemActor;
			Set16(pViemActor, (WORD)len);
			pViemActor += len;
		}
		{ //VisibleInfo
			BYTE* pVisibleInfo = pViemActor;
			Write16(pVisibleInfo, 0); //len

			WriteUn(pVisibleInfo, 0); //Uin
			WriteUn(pVisibleInfo, 0); //Identity
			Write8(pVisibleInfo, 0); //SeatID
			Write8(pVisibleInfo, 0); //TeamID
			Write16(pVisibleInfo, 0); //PlayerID
			Write8(pVisibleInfo, 0); //Status
			{ //PlayerDBBaseInfo
				BYTE* pPlayerDBBaseInfo = pVisibleInfo;
				Write16(pPlayerDBBaseInfo, 0); //len

				WriteString(pPlayerDBBaseInfo, 0); //NickName[]
				Write8(pPlayerDBBaseInfo, 0); //Gender
				Write8(pPlayerDBBaseInfo, 0); //Country
				Write32(pPlayerDBBaseInfo, 0); //License
				WriteUn(pPlayerDBBaseInfo, 0); //Experience
				Write32(pPlayerDBBaseInfo, 0); //SuperMoney
				Write32(pPlayerDBBaseInfo, 0); //Money
				WriteUn(pPlayerDBBaseInfo, 0); //WinNum
				Write32(pPlayerDBBaseInfo, 0); //SecondNum
				Write32(pPlayerDBBaseInfo, 0); //ThirdNum
				WriteUn(pPlayerDBBaseInfo, 0); //TotalNum
				Write32(pPlayerDBBaseInfo, 0); //CurHonor
				Write32(pPlayerDBBaseInfo, 0); //TotalHonor
				Write32(pPlayerDBBaseInfo, 0); //TodayHonor
				Write32(pPlayerDBBaseInfo, 0); //RelaxTime
				Write32(pPlayerDBBaseInfo, 0); //MonthDurationBefore
				Write32(pPlayerDBBaseInfo, 0); //MonthDurationCur
				Write32(pPlayerDBBaseInfo, 0); //Charm
				Write32(pPlayerDBBaseInfo, 0); //DurationGame
				Write32(pPlayerDBBaseInfo, 0); //DanceExp
				Write32(pPlayerDBBaseInfo, 0); //Coupons
				Write32(pPlayerDBBaseInfo, 0); //Admiration
				Write32(pPlayerDBBaseInfo, 0); //LuckMoney
				Write32(pPlayerDBBaseInfo, 0); //TeamWorkExp
				Write32(pPlayerDBBaseInfo, 0); //AchievePoint
				Write32(pPlayerDBBaseInfo, 0); //RegTime
				WriteString(pPlayerDBBaseInfo, 0); //Signature[]
				Write32(pPlayerDBBaseInfo, 0); //LuckyMatchPoint
				Write32(pPlayerDBBaseInfo, 0); //LuckyMatchNum
				Write16(pPlayerDBBaseInfo, 0); //LuckyMatchFirstNum
				Write8(pPlayerDBBaseInfo, 0); //LuckyMatchBestRand
				Write32(pPlayerDBBaseInfo, 0); //LuckyMatchWinNum
				Write32(pPlayerDBBaseInfo, 0); //FizzPointTotal
				Write16(pPlayerDBBaseInfo, 0); //FizzPointDaily
				Write16(pPlayerDBBaseInfo, 0); //FizzPointWeekly
				Write16(pPlayerDBBaseInfo, 0); //FizzPointLastWeek
				Write8(pPlayerDBBaseInfo, 0); //FizzLotteryStatus
				Write32(pPlayerDBBaseInfo, 0); //FizzLastUpdateTime
				Write32(pPlayerDBBaseInfo, 0); //SNSLocaleCode
				Write32(pPlayerDBBaseInfo, 0); //AuctionRightUnlockTime
				Write8(pPlayerDBBaseInfo, 0); //ReserveFlag
				Write32(pPlayerDBBaseInfo, 0); //CurConsumeScore
				Write32(pPlayerDBBaseInfo, 0); //HistoryConsumeScore
				Write8(pPlayerDBBaseInfo, 0); //CrashModeSponsorID
				Write32(pPlayerDBBaseInfo, 0); //Popularity
				Write32(pPlayerDBBaseInfo, 0); //LadderMatchAchievePoint
				Write32(pPlayerDBBaseInfo, 0); //Cash
				Write32(pPlayerDBBaseInfo, 0); //PlayerGPMIdentity
				Write32(pPlayerDBBaseInfo, 0); //PointTotalScore
				WriteUn(pPlayerDBBaseInfo, 0); //totalMapMedalNum
				WriteUn(pPlayerDBBaseInfo, 0); //lastMapMedalNum
				WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalNum
				WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalSeasonId
				WriteUn(pPlayerDBBaseInfo, 0); //lastClearMapMedalTime
				WriteUn(pPlayerDBBaseInfo, 0); //max2048Score
				WriteUn(pPlayerDBBaseInfo, 0); //curPlay2048LeftNum
				Write32(pPlayerDBBaseInfo, 0); //CheerValue
				Write16(pPlayerDBBaseInfo, 0); //SeasonID
				Write32(pPlayerDBBaseInfo, 0); //LastCheerValue
				Write32(pPlayerDBBaseInfo, 0); //SpeedBean
				Write32(pPlayerDBBaseInfo, 0); //SpeedCoin

				len = pPlayerDBBaseInfo - pVisibleInfo;
				Set16(pVisibleInfo, (WORD)len);
				pVisibleInfo += len;
			}
			{ //PlayerGuildInfo
				BYTE* pPlayerGuildInfo = pVisibleInfo;
				Write16(pPlayerGuildInfo, 0); //len

				WriteString(pPlayerGuildInfo, 0); //GuildName[]
				Write16(pPlayerGuildInfo, 0); //Duty
				Write32(pPlayerGuildInfo, 0); //GuildID
				Write32(pPlayerGuildInfo, 0); //Right
				Write32(pPlayerGuildInfo, 0); //Medal
				Write32(pPlayerGuildInfo, 0); //Contribute
				WriteString(pPlayerGuildInfo, 0); //DutyTitle[]

				len = pPlayerGuildInfo - pVisibleInfo;
				Set16(pVisibleInfo, (WORD)len);
				pVisibleInfo += len;
			}
			Write16(pVisibleInfo, 0); //EquipedItemNum
			for (size_t i = 0; i < n; i++)
			{ //PlayerItemInfo
				BYTE* pPlayerItemInfo = pVisibleInfo;
				Write16(pPlayerItemInfo, 0); //len

				Write32(pPlayerItemInfo, 0); //ItemID
				Write32(pPlayerItemInfo, 0); //ItemNum
				Write32(pPlayerItemInfo, 0); //AvailPeriod
				Write8(pPlayerItemInfo, 0); //Status
				WriteUn(pPlayerItemInfo, 0); //ObtainTime
				Write32(pPlayerItemInfo, 0); //OtherAttribute
				Write16(pPlayerItemInfo, 0); //ItemType

				len = pPlayerItemInfo - pVisibleInfo;
				Set16(pVisibleInfo, (WORD)len);
				pVisibleInfo += len;
			}
			Write16(pVisibleInfo, 0); //PetNum
			for (size_t i = 0; i < n; i++)
			{ //PetInfo
				BYTE* pPetInfo = pVisibleInfo;
				Write16(pPetInfo, 0); //len

				Write32(pPetInfo, 0); //Uin
				Write32(pPetInfo, 0); //PetId
				WriteString(pPetInfo, 0); //PetName[]
				Write8(pPetInfo, 0); //IsProper
				Write16(pPetInfo, 0); //Level
				Write8(pPetInfo, 0); //Status
				Write16(pPetInfo, 0); //PetSkillNum
				for (size_t i = 0; i < n; i++)
				{ //PetSkillList
					BYTE* pPetSkillList = pPetInfo;
					Write16(pPetSkillList, 0); //len

					Write16(pPetSkillList, 0); //SkillID
					Write8(pPetSkillList, 0); //Status
					Write8(pPetSkillList, 0); //Active
					Write32(pPetSkillList, 0); //Value

					len = pPetSkillList - pPetInfo;
					Set16(pPetInfo, (WORD)len);
					pPetInfo += len;
				}
				Write32(pPetInfo, 0); //StrengLevel
				Write8(pPetInfo, 0); //TopStatus
				{ //CommonInfo
					BYTE* pCommonInfo = pPetInfo;
					Write16(pCommonInfo, 0); //len

					Write32(pCommonInfo, 0); //HuanHuaLevel
					Write8(pCommonInfo, 0); //CanHuanHua

					len = pCommonInfo - pPetInfo;
					Set16(pPetInfo, (WORD)len);
					pPetInfo += len;
				}
				Write16(pPetInfo, 0); //PKStar
				Write32(pPetInfo, 0); //PetSkinID

				len = pPetInfo - pVisibleInfo;
				Set16(pVisibleInfo, (WORD)len);
				pVisibleInfo += len;
			}
			{ //PlayerGuildMatchInfo
				BYTE* pPlayerGuildMatchInfo = pVisibleInfo;
				Write16(pPlayerGuildMatchInfo, 0); //len

				Write32(pPlayerGuildMatchInfo, 0); //SelfPoint
				Write32(pPlayerGuildMatchInfo, 0); //WinNum
				Write32(pPlayerGuildMatchInfo, 0); //TotalNum

				len = pPlayerGuildMatchInfo - pVisibleInfo;
				Set16(pVisibleInfo, (WORD)len);
				pVisibleInfo += len;
			}
			Write8(pVisibleInfo, 0); //IsInTopList
			Write8(pVisibleInfo, 0); //LoverRaceOrPro
			Write8(pVisibleInfo, 0); //TmpEffectNum
			Write32(pVisibleInfo, 0); //TmpEffectItems[]
			Write8(pVisibleInfo, 0); //OBState
			Write8(pVisibleInfo, 0); //DebutOrX5
			Write8(pVisibleInfo, 0); //RandKeyFlag
			WriteUn(pVisibleInfo, 0); //VipFlag
			Write8(pVisibleInfo, 0); //HaveAppellation
			for (size_t i = 0; i < n; i++)
			{ //CurAppellation
				BYTE* pCurAppellation = pVisibleInfo;
				Write16(pCurAppellation, 0); //len

				Write8(pCurAppellation, 0); //Type
				Write8(pCurAppellation, 0); //Level
				Write8(pCurAppellation, 0); //Status
				Write8(pCurAppellation, 0); //Difficulty
				Write32(pCurAppellation, 0); //MapId
				Write32(pCurAppellation, 0); //Value

				len = pCurAppellation - pVisibleInfo;
				Set16(pVisibleInfo, (WORD)len);
				pVisibleInfo += len;
			}
			{ //NobleInfo
				BYTE* pNobleInfo = pVisibleInfo;
				Write16(pNobleInfo, 0); //len

				Write32(pNobleInfo, 0); //NobleID
				Write8(pNobleInfo, 0); //NobleLevel
				Write32(pNobleInfo, 0); //NoblePoint
				Write32(pNobleInfo, 0); //NobleLeftDays

				len = pNobleInfo - pVisibleInfo;
				Set16(pVisibleInfo, (WORD)len);
				pVisibleInfo += len;
			}
			Write8(pVisibleInfo, 0); //HasCarryWizard
			for (size_t i = 0; i < n; i++)
			{ //CarryWizardInfo
				BYTE* pCarryWizardInfo = pVisibleInfo;
				Write16(pCarryWizardInfo, 0); //len

				Write16(pCarryWizardInfo, 0); //WizardID
				WriteString(pCarryWizardInfo, 0); //NickName[]
				Write16(pCarryWizardInfo, 0); //WizardType
				Write8(pCarryWizardInfo, 0); //Order
				Write8(pCarryWizardInfo, 0); //EvolutionBranch
				Write8(pCarryWizardInfo, 0); //IsHuanHua

				len = pCarryWizardInfo - pVisibleInfo;
				Set16(pVisibleInfo, (WORD)len);
				pVisibleInfo += len;
			}
			{ //GuildVipBaseInfo
				BYTE* pGuildVipBaseInfo = pVisibleInfo;
				Write16(pGuildVipBaseInfo, 0); //len

				Write8(pGuildVipBaseInfo, 0); //GuildVipLevel
				Write32(pGuildVipBaseInfo, 0); //GuildVipPoint

				len = pGuildVipBaseInfo - pVisibleInfo;
				Set16(pVisibleInfo, (WORD)len);
				pVisibleInfo += len;
			}
			Write32(pVisibleInfo, 0); //ExFlag
			Write8(pVisibleInfo, 0); //HaveLDMBaseInfo
			for (size_t i = 0; i < n; i++)
			{ //PlayerLDMBaseInfo
				BYTE* pPlayerLDMBaseInfo = pVisibleInfo;
				Write16(pPlayerLDMBaseInfo, 0); //len

				Write8(pPlayerLDMBaseInfo, 0); //Grade
				Write32(pPlayerLDMBaseInfo, 0); //Score
				Write32(pPlayerLDMBaseInfo, 0); //MaxScore
				Write32(pPlayerLDMBaseInfo, 0); //MaxGrade

				len = pPlayerLDMBaseInfo - pVisibleInfo;
				Set16(pVisibleInfo, (WORD)len);
				pVisibleInfo += len;
			}
			Write8(pVisibleInfo, 0); //HasWl
			for (size_t i = 0; i < n; i++)
			{ //PlayerWlVisibleInfo
				BYTE* pPlayerWlVisibleInfo = pVisibleInfo;
				Write16(pPlayerWlVisibleInfo, 0); //len

				Write32(pPlayerWlVisibleInfo, 0); //WonderLandID
				WriteString(pPlayerWlVisibleInfo, 0); //WonderLandName[]
				Write16(pPlayerWlVisibleInfo, 0); //WonderLandDuty
				Write8(pPlayerWlVisibleInfo, 0); //SubType
				Write8(pPlayerWlVisibleInfo, 0); //GuildGrade

				len = pPlayerWlVisibleInfo - pVisibleInfo;
				Set16(pVisibleInfo, (WORD)len);
				pVisibleInfo += len;
			}
			Write8(pVisibleInfo, 0); //HasLoverVip
			for (size_t i = 0; i < n; i++)
			{ //LoverVipInfo
				BYTE* pLoverVipInfo = pVisibleInfo;
				Write16(pLoverVipInfo, 0); //len

				Write8(pLoverVipInfo, 0); //LoverVipLevel
				Write32(pLoverVipInfo, 0); //LoverVipPoint
				Write8(pLoverVipInfo, 0); //GrowRate

				len = pLoverVipInfo - pVisibleInfo;
				Set16(pVisibleInfo, (WORD)len);
				pVisibleInfo += len;
			}
			Write8(pVisibleInfo, 0); //HasBattleModeSkillInfoList
			for (size_t i = 0; i < n; i++)
			{ //BattleModeSkillInfoList
				BYTE* pBattleModeSkillInfoList = pVisibleInfo;
				Write16(pBattleModeSkillInfoList, 0); //len

				Write8(pBattleModeSkillInfoList, 0); //SkillNum
				for (size_t i = 0; i < n; i++)
				{ //SkillInfo
					BYTE* pSkillInfo = pBattleModeSkillInfoList;
					Write16(pSkillInfo, 0); //len

					Write16(pSkillInfo, 0); //SkillId
					Write8(pSkillInfo, 0); //SkillLevel

					len = pSkillInfo - pBattleModeSkillInfoList;
					Set16(pBattleModeSkillInfoList, (WORD)len);
					pBattleModeSkillInfoList += len;
				}

				len = pBattleModeSkillInfoList - pVisibleInfo;
				Set16(pVisibleInfo, (WORD)len);
				pVisibleInfo += len;
			}
			Write8(pVisibleInfo, 0); //HasGarden
			for (size_t i = 0; i < n; i++)
			{ //PersonalGardenBaseInfo
				BYTE* pPersonalGardenBaseInfo = pVisibleInfo;
				Write16(pPersonalGardenBaseInfo, 0); //len

				Write8(pPersonalGardenBaseInfo, 0); //GardenLevel
				Write32(pPersonalGardenBaseInfo, 0); //GardenPoint
				Write8(pPersonalGardenBaseInfo, 0); //GrowRate
				Write32(pPersonalGardenBaseInfo, 0); //GardenExpireTime
				{ //SimpleInfo
					BYTE* pSimpleInfo = pPersonalGardenBaseInfo;
					Write16(pSimpleInfo, 0); //len

					Write32(pSimpleInfo, 0); //WeekPopularity
					Write32(pSimpleInfo, 0); //TotalPopularity
					Write32(pSimpleInfo, 0); //LastUpdatePopularityTime
					Write8(pSimpleInfo, 0); //PrivateType

					len = pSimpleInfo - pPersonalGardenBaseInfo;
					Set16(pPersonalGardenBaseInfo, (WORD)len);
					pPersonalGardenBaseInfo += len;
				}

				len = pPersonalGardenBaseInfo - pVisibleInfo;
				Set16(pVisibleInfo, (WORD)len);
				pVisibleInfo += len;
			}
			{ //ConsumeVipInfo
				BYTE* pConsumeVipInfo = pVisibleInfo;
				Write16(pConsumeVipInfo, 0); //len

				WriteUn(pConsumeVipInfo, 0); //VipLevel
				WriteUn(pConsumeVipInfo, 0); //CharmValueOfMonth
				WriteUn(pConsumeVipInfo, 0); //SearchTreasureNums
				WriteUn(pConsumeVipInfo, 0); //GetTreasureNums

				len = pConsumeVipInfo - pVisibleInfo;
				Set16(pVisibleInfo, (WORD)len);
				pVisibleInfo += len;
			}
			Write8(pVisibleInfo, 0); //HaveBaby
			{ //LoverBabyInfo
				BYTE* pLoverBabyInfo = pVisibleInfo;
				Write16(pLoverBabyInfo, 0); //len

				Write32(pLoverBabyInfo, 0); //LoverBabyID
				Write32(pLoverBabyInfo, 0); //ItemID
				Write32(pLoverBabyInfo, 0); //GrowValue
				Write32(pLoverBabyInfo, 0); //MentalValue
				Write32(pLoverBabyInfo, 0); //BabyProfileLevel
				Write32(pLoverBabyInfo, 0); //StrengthLevel
				Write32(pLoverBabyInfo, 0); //GrowLevel
				WriteString(pLoverBabyInfo, 0); //LoveBabyNickName[]
				Write16(pLoverBabyInfo, 0); //LoverBabyStat
				Write16(pLoverBabyInfo, 0); //LoverBabyEquipStat
				Write16(pLoverBabyInfo, 0); //LoverBabyTransferdStatus

				len = pLoverBabyInfo - pVisibleInfo;
				Set16(pVisibleInfo, (WORD)len);
				pVisibleInfo += len;
			}
			{ //EmperorInfo
				BYTE* pEmperorInfo = pVisibleInfo;
				Write16(pEmperorInfo, 0); //len

				Write8(pEmperorInfo, 0); //EmperorLevel
				Write32(pEmperorInfo, 0); //EmperorPoint
				Write32(pEmperorInfo, 0); //EmperorLeftDays
				Write8(pEmperorInfo, 0); //EmperorGrowRate

				len = pEmperorInfo - pVisibleInfo;
				Set16(pVisibleInfo, (WORD)len);
				pVisibleInfo += len;
			}
			Write16(pVisibleInfo, 0); //RaceCardNums
			for (size_t i = 0; i < n; i++)
			{ //RaceCardAddValueInfo
				BYTE* pRaceCardAddValueInfo = pVisibleInfo;
				Write16(pRaceCardAddValueInfo, 0); //len

				Write32(pRaceCardAddValueInfo, 0); //RaceCardID
				Write32(pRaceCardAddValueInfo, 0); //AddValue

				len = pRaceCardAddValueInfo - pVisibleInfo;
				Set16(pVisibleInfo, (WORD)len);
				pVisibleInfo += len;
			}
			{ //GansterScoreInfo
				BYTE* pGansterScoreInfo = pVisibleInfo;
				Write16(pGansterScoreInfo, 0); //len

				Write32(pGansterScoreInfo, 0); //GansterSeasonID
				Write32(pGansterScoreInfo, 0); //GansterScore
				Write32(pGansterScoreInfo, 0); //PoliceScore
				Write32(pGansterScoreInfo, 0); //TotalGansterScore

				len = pGansterScoreInfo - pVisibleInfo;
				Set16(pVisibleInfo, (WORD)len);
				pVisibleInfo += len;
			}
			Write32(pVisibleInfo, 0); //OlympicId
			Write32(pVisibleInfo, 0); //NPCEliminateWinTimes
			Write8(pVisibleInfo, 0); //OriginTeamID
			Write8(pVisibleInfo, 0); //NxNpc
			Write16(pVisibleInfo, 0); //NxNpcAILevel
			{ //EquippedActiveKartInfo
				BYTE* pEquippedActiveKartInfo = pVisibleInfo;
				Write16(pEquippedActiveKartInfo, 0); //len

				Write8(pEquippedActiveKartInfo, 0); //HaveActiveInfo
				Write32(pEquippedActiveKartInfo, 0); //KartID
				Write32(pEquippedActiveKartInfo, 0); //ActiveLevel

				len = pEquippedActiveKartInfo - pVisibleInfo;
				Set16(pVisibleInfo, (WORD)len);
				pVisibleInfo += len;
			}
			Write8(pVisibleInfo, 0); //SpecialActivityStatus
			Write8(pVisibleInfo, 0); //AreaID
			Write8(pVisibleInfo, 0); //HaveRaiseSecondBaby
			{ //SecondLoverBabyInfo
				BYTE* pSecondLoverBabyInfo = pVisibleInfo;
				Write16(pSecondLoverBabyInfo, 0); //len

				Write32(pSecondLoverBabyInfo, 0); //LoverBabyID
				Write32(pSecondLoverBabyInfo, 0); //ItemID
				Write32(pSecondLoverBabyInfo, 0); //GrowValue
				Write32(pSecondLoverBabyInfo, 0); //MentalValue
				Write32(pSecondLoverBabyInfo, 0); //BabyProfileLevel
				Write32(pSecondLoverBabyInfo, 0); //StrengthLevel
				Write32(pSecondLoverBabyInfo, 0); //GrowLevel
				WriteString(pSecondLoverBabyInfo, 0); //LoveBabyNickName[]
				Write16(pSecondLoverBabyInfo, 0); //LoverBabyStat
				Write16(pSecondLoverBabyInfo, 0); //LoverBabyEquipStat
				Write16(pSecondLoverBabyInfo, 0); //LoverBabyTransferdStatus

				len = pSecondLoverBabyInfo - pVisibleInfo;
				Set16(pVisibleInfo, (WORD)len);
				pVisibleInfo += len;
			}
			Write8(pVisibleInfo, 0); //HasRankedMatchInfo
			for (size_t i = 0; i < n; i++)
			{ //RankedMatchGradeInfo
				BYTE* pRankedMatchGradeInfo = pVisibleInfo;
				Write16(pRankedMatchGradeInfo, 0); //len

				Write32(pRankedMatchGradeInfo, 0); //GradeLevel
				Write32(pRankedMatchGradeInfo, 0); //ChildLevel
				Write32(pRankedMatchGradeInfo, 0); //GradeScore
				Write32(pRankedMatchGradeInfo, 0); //MaxGradeScore
				Write32(pRankedMatchGradeInfo, 0); //TotalScore

				len = pRankedMatchGradeInfo - pVisibleInfo;
				Set16(pVisibleInfo, (WORD)len);
				pVisibleInfo += len;
			}
			Write8(pVisibleInfo, 0); //HasHuanLingChangeInfo
			for (size_t i = 0; i < n; i++)
			{ //HuanLingSuitInfo
				BYTE* pHuanLingSuitInfo = pVisibleInfo;
				Write16(pHuanLingSuitInfo, 0); //len

				Write32(pHuanLingSuitInfo, 0); //SuitID
				Write8(pHuanLingSuitInfo, 0); //ChangeLevel

				len = pHuanLingSuitInfo - pVisibleInfo;
				Set16(pVisibleInfo, (WORD)len);
				pVisibleInfo += len;
			}
			Write8(pVisibleInfo, 0); //EquipSealType
			Write16(pVisibleInfo, 0); //Role
			Write8(pVisibleInfo, 0); //SpecialActivityIDNum
			Write8(pVisibleInfo, 0); //CrewID
			Write8(pVisibleInfo, 0); //SpecialActivityInfoNum
			for (size_t i = 0; i < n; i++)
			{ //SpecialActivityInfo
				BYTE* pSpecialActivityInfo = pVisibleInfo;
				Write16(pSpecialActivityInfo, 0); //len

				Write8(pSpecialActivityInfo, 0); //ProfessionLicenseInfoNum
				for (size_t i = 0; i < n; i++)
				{ //ProfessionLicenseInfo
					BYTE* pProfessionLicenseInfo = pSpecialActivityInfo;
					Write16(pProfessionLicenseInfo, 0); //len

					Write8(pProfessionLicenseInfo, 0); //BigLevel
					Write8(pProfessionLicenseInfo, 0); //SmallLevel

					len = pProfessionLicenseInfo - pSpecialActivityInfo;
					Set16(pSpecialActivityInfo, (WORD)len);
					pSpecialActivityInfo += len;
				}

				len = pSpecialActivityInfo - pVisibleInfo;
				Set16(pVisibleInfo, (WORD)len);
				pVisibleInfo += len;
			}
			Write8(pVisibleInfo, 0); //ParaNum
			Write32(pVisibleInfo, 0); //ParaList[]
			Write8(pVisibleInfo, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemOrder
				BYTE* pItemOrder = pVisibleInfo;
				Write16(pItemOrder, 0); //len

				Write32(pItemOrder, 0); //KartID
				Write32(pItemOrder, 0); //Order
				Write32(pItemOrder, 0); //BackGroundID

				len = pItemOrder - pVisibleInfo;
				Set16(pVisibleInfo, (WORD)len);
				pVisibleInfo += len;
			}
			Write8(pVisibleInfo, 0); //TDCExcluItemNum
			Write32(pVisibleInfo, 0); //TDCExclusiveItemID[]
			Write8(pVisibleInfo, 0); //EquipNiChangItemNum
			for (size_t i = 0; i < n; i++)
			{ //NiChangPavilionEquipItemInfo
				BYTE* pNiChangPavilionEquipItemInfo = pVisibleInfo;
				Write16(pNiChangPavilionEquipItemInfo, 0); //len

				Write32(pNiChangPavilionEquipItemInfo, 0); //ItemId
				Write16(pNiChangPavilionEquipItemInfo, 0); //CurrentEquipColorationPlanId

				len = pNiChangPavilionEquipItemInfo - pVisibleInfo;
				Set16(pVisibleInfo, (WORD)len);
				pVisibleInfo += len;
			}
			Write8(pVisibleInfo, 0); //TestKartGameType
			Write32(pVisibleInfo, 0); //GameTestKartID
			Write8(pVisibleInfo, 0); //HasStarsFightingInfo
			for (size_t i = 0; i < n; i++)
			{ //StarsFightingInfo
				BYTE* pStarsFightingInfo = pVisibleInfo;
				Write16(pStarsFightingInfo, 0); //len

				Write32(pStarsFightingInfo, 0); //Star
				Write32(pStarsFightingInfo, 0); //StarVal
				Write32(pStarsFightingInfo, 0); //StarsFightingStarLevel

				len = pStarsFightingInfo - pVisibleInfo;
				Set16(pVisibleInfo, (WORD)len);
				pVisibleInfo += len;
			}
			Write8(pVisibleInfo, 0); //RoomBGSetting

			len = pVisibleInfo - pViemActor;
			Set16(pViemActor, (WORD)len);
			pViemActor += len;
		}
		{ //otherInfo
			BYTE* potherInfo = pViemActor;
			Write16(potherInfo, 0); //len

			Write32(potherInfo, 0); //EquipedHammer

			len = potherInfo - pViemActor;
			Set16(pViemActor, (WORD)len);
			pViemActor += len;
		}

		len = pViemActor - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HaveMore

	len = p - buf;
	SendToClient(Client, 869, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyLeaveViewList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ViewActorNum
	Write32(p, 0); //ViewActorUin[]

	len = p - buf;
	SendToClient(Client, 870, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyClearViewList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;


	len = p - buf;
	SendToClient(Client, 871, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyPlayerListOfEnterWlCity(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //WlId
	Write32(p, 0); //CityId
	Write32(p, 0); //PlayerNum
	for (size_t i = 0; i < n; i++)
	{ //PlayerList
		BYTE* pPlayerList = p;
		Write16(pPlayerList, 0); //len

		WriteUn(pPlayerList, 0); //Uin
		WriteUn(pPlayerList, 0); //Identity
		WriteString(pPlayerList, 0); //NickName[]
		Write8(pPlayerList, 0); //Gender
		Write32(pPlayerList, 0); //Charm
		WriteUn(pPlayerList, 0); //Experience
		Write32(pPlayerList, 0); //CurHonor
		WriteUn(pPlayerList, 0); //VipFlag
		Write32(pPlayerList, 0); //WlId
		Write32(pPlayerList, 0); //WlDuty
		Write32(pPlayerList, 0); //License
		{ //NobleInfo
			BYTE* pNobleInfo = pPlayerList;
			Write16(pNobleInfo, 0); //len

			Write32(pNobleInfo, 0); //NobleID
			Write8(pNobleInfo, 0); //NobleLevel
			Write32(pNobleInfo, 0); //NoblePoint
			Write32(pNobleInfo, 0); //NobleLeftDays

			len = pNobleInfo - pPlayerList;
			Set16(pPlayerList, (WORD)len);
			pPlayerList += len;
		}
		{ //GuildVipBaseInfo
			BYTE* pGuildVipBaseInfo = pPlayerList;
			Write16(pGuildVipBaseInfo, 0); //len

			Write8(pGuildVipBaseInfo, 0); //GuildVipLevel
			Write32(pGuildVipBaseInfo, 0); //GuildVipPoint

			len = pGuildVipBaseInfo - pPlayerList;
			Set16(pPlayerList, (WORD)len);
			pPlayerList += len;
		}
		Write8(pPlayerList, 0); //HasLoverVip
		for (size_t i = 0; i < n; i++)
		{ //LoverVipInfo
			BYTE* pLoverVipInfo = pPlayerList;
			Write16(pLoverVipInfo, 0); //len

			Write8(pLoverVipInfo, 0); //LoverVipLevel
			Write32(pLoverVipInfo, 0); //LoverVipPoint
			Write8(pLoverVipInfo, 0); //GrowRate

			len = pLoverVipInfo - pPlayerList;
			Set16(pPlayerList, (WORD)len);
			pPlayerList += len;
		}
		Write8(pPlayerList, 0); //GardenLevel
		{ //EmperorInfo
			BYTE* pEmperorInfo = pPlayerList;
			Write16(pEmperorInfo, 0); //len

			Write8(pEmperorInfo, 0); //EmperorLevel
			Write32(pEmperorInfo, 0); //EmperorPoint
			Write32(pEmperorInfo, 0); //EmperorLeftDays
			Write8(pEmperorInfo, 0); //EmperorGrowRate

			len = pEmperorInfo - pPlayerList;
			Set16(pPlayerList, (WORD)len);
			pPlayerList += len;
		}
		{ //ConsumeVipInfo
			BYTE* pConsumeVipInfo = pPlayerList;
			Write16(pConsumeVipInfo, 0); //len

			WriteUn(pConsumeVipInfo, 0); //VipLevel
			WriteUn(pConsumeVipInfo, 0); //CharmValueOfMonth
			WriteUn(pConsumeVipInfo, 0); //SearchTreasureNums
			WriteUn(pConsumeVipInfo, 0); //GetTreasureNums

			len = pConsumeVipInfo - pPlayerList;
			Set16(pPlayerList, (WORD)len);
			pPlayerList += len;
		}

		len = pPlayerList - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 872, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyPlayerListOfExitWlCity(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //WlId
	Write32(p, 0); //CityId
	Write32(p, 0); //PlayerNum
	Write(p, 0); //PlayerUinList[]

	len = p - buf;
	SendToClient(Client, 873, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestWonderLandInnerToplist(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT TopType = Read16(p);

}

void ResponseWonderLandInnerToplist(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //GetInterVal
	Write16(p, 0); //TopType
	Write16(p, 0); //Num
	for (size_t i = 0; i < n; i++)
	{ //TopListItem
		BYTE* pTopListItem = p;
		Write16(pTopListItem, 0); //len

		Write32(pTopListItem, 0); //Uin
		Write8(pTopListItem, 0); //NameLen
		Write32(pTopListItem, 0); //Value

		len = pTopListItem - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //MasterUin

	len = p - buf;
	SendToClient(Client, 977, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GCreateWonderLand(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	char[] WonderLandName[] = ReadString(p);
	bool ExecuterNum = Read8(p);
	[] Executer[] = Read(p);
	bool UseDonate = Read8(p);

}

void ResponseC2GCreateWonderLand(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen
	WriteString(p, 0); //WonderLandName[]
	Write32(p, 0); //WonderLandID
	Write8(p, 0); //ExecuterNum
	Write(p, 0); //Executer[]
	Write8(p, 0); //UseDonate

	len = p - buf;
	SendToClient(Client, 881, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyC2GCreateWonderLandResult(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //LeaderUin
	WriteString(p, 0); //GuildLeaderName[]
	WriteString(p, 0); //WonderLandName[]
	Write32(p, 0); //WonderLandID
	Write8(p, 0); //ExecuterNum
	Write(p, 0); //Executer[]

	len = p - buf;
	SendToClient(Client, 882, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyC2GBriefWonderLandInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	WriteString(p, 0); //WonderLandName[]
	Write32(p, 0); //WonderLandID
	Write8(p, 0); //GuildType
	Write8(p, 0); //GuildGrade
	Write32(p, 0); //GuildContribute
	Write32(p, 0); //WlLevel
	Write16(p, 0); //WonderLandDuty
	Write32(p, 0); //WonderLandRight
	Write32(p, 0); //QTRoomID

	len = p - buf;
	SendToClient(Client, 880, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetWonderLandGameSvrInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	int Time = Read32(p);
	UINT WonderLandId = Read32(p);
	UINT CityId = Read32(p);
	UCHAR HasLastWLSvrInfo = Read8(p);
	for (size_t i = 0; i < n; i++)
	{ //WLSvrInfo
		BYTE* pWLSvrInfo = p;
		len = Read16(pWLSvrInfo);

		short SvrId = Read16(pWLSvrInfo);
		UINT SvrIP = Read32(pWLSvrInfo);
		UCHAR TcpPortNum = Read8(pWLSvrInfo);
		USHORT TcpPort[] = Read16(pWLSvrInfo);
		UCHAR UdpPortNum = Read8(pWLSvrInfo);
		USHORT UdpPort[] = Read16(pWLSvrInfo);

		p += len;
	}

}

void ResponseGetWonderLandGameSvrInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultId
	Write32(p, 0); //WonderLandId
	Write32(p, 0); //CityId
	Write8(p, 0); //HasWLSvrInfo
	for (size_t i = 0; i < n; i++)
	{ //WLSvrInfo
		BYTE* pWLSvrInfo = p;
		Write16(pWLSvrInfo, 0); //len

		Write16(pWLSvrInfo, 0); //SvrId
		Write32(pWLSvrInfo, 0); //SvrIP
		Write8(pWLSvrInfo, 0); //TcpPortNum
		Write16(pWLSvrInfo, 0); //TcpPort[]
		Write8(pWLSvrInfo, 0); //UdpPortNum
		Write16(pWLSvrInfo, 0); //UdpPort[]

		len = pWLSvrInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 889, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GApplyJoinWonderLand(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT DstWonderLandID = Read32(p);

}

void ResponseC2GApplyJoinWonderLand(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen
	Write32(p, 0); //DstWonderLandID
	WriteString(p, 0); //DstWonderLandName[]

	len = p - buf;
	SendToClient(Client, 883, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyC2GApplyJoinWonderLand(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //ApplyUin
	WriteString(p, 0); //ApplyNickName[]
	Write32(p, 0); //ApplyGuildID
	WriteString(p, 0); //ApplyGuildName[]

	len = p - buf;
	SendToClient(Client, 884, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestC2GReplyJoinWonderLand(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT ApplyUin = Read32(p);
	char[] ApplyNickName[] = ReadString(p);
	UINT ApplyGuildID = Read32(p);
	char[] ApplyGuildName[] = ReadString(p);
	short ResultID = Read16(p);

}

void ResponseC2GReplyJoinWonderLand(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen
	Write32(p, 0); //ApplyUin
	WriteString(p, 0); //ApplyNickName[]
	Write32(p, 0); //ApplyGuildID
	WriteString(p, 0); //ApplyGuildName[]

	len = p - buf;
	SendToClient(Client, 885, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyAddToWonderLandResult(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //ApplyUin
	WriteString(p, 0); //ApplyNickName[]
	Write32(p, 0); //ApplyGuildID
	WriteString(p, 0); //ApplyGuildName[]
	WriteString(p, 0); //DstWonderLandName[]
	Write32(p, 0); //DstWonderLandID

	len = p - buf;
	SendToClient(Client, 886, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestC2GWonderLandDetail(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseC2GWonderLandDetail(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen
	Write8(p, 0); //HasWonderLand
	for (size_t i = 0; i < n; i++)
	{ //WonderLandDescInfo
		BYTE* pWonderLandDescInfo = p;
		Write16(pWonderLandDescInfo, 0); //len

		Write32(pWonderLandDescInfo, 0); //WonderLandID
		WriteString(pWonderLandDescInfo, 0); //WonderLandName[]
		Write32(pWonderLandDescInfo, 0); //CrystalNum
		Write32(pWonderLandDescInfo, 0); //Activity
		Write32(pWonderLandDescInfo, 0); //Prosperity
		Write16(pWonderLandDescInfo, 0); //NotesLen
		Write16(pWonderLandDescInfo, 0); //DescLen
		Write32(pWonderLandDescInfo, 0); //CreateTime
		Write32(pWonderLandDescInfo, 0); //Attribute
		Write32(pWonderLandDescInfo, 0); //WlLevel
		Write32(pWonderLandDescInfo, 0); //WishTreeExp
		Write32(pWonderLandDescInfo, 0); //WishTreeWaterCnt
		Write32(pWonderLandDescInfo, 0); //WishTreeLastWaterTime
		Write32(pWonderLandDescInfo, 0); //EnterWLRoomContrLimit

		len = pWonderLandDescInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //MemberGuildNum
	for (size_t i = 0; i < n; i++)
	{ //MemberGuild
		BYTE* pMemberGuild = p;
		Write16(pMemberGuild, 0); //len

		Write32(pMemberGuild, 0); //GuildId
		Write32(pMemberGuild, 0); //JoinTime
		Write8(pMemberGuild, 0); //SubGuildType
		Write32(pMemberGuild, 0); //Contribute
		Write32(pMemberGuild, 0); //LastWeekContribute
		Write32(pMemberGuild, 0); //WeekContribute
		Write8(pMemberGuild, 0); //Grade

		len = pMemberGuild - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasDuty
	for (size_t i = 0; i < n; i++)
	{ //Duty
		BYTE* pDuty = p;
		Write16(pDuty, 0); //len

		Write16(pDuty, 0); //Dutys[]

		len = pDuty - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasAutoJoinCond
	for (size_t i = 0; i < n; i++)
	{ //AutoJoinCond
		BYTE* pAutoJoinCond = p;
		Write16(pAutoJoinCond, 0); //len

		Write16(pAutoJoinCond, 0); //GuildLevel
		Write32(pAutoJoinCond, 0); //GuildScore
		Write32(pAutoJoinCond, 0); //GuildProsperity
		Write16(pAutoJoinCond, 0); //MemberNum

		len = pAutoJoinCond - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //QTRoomID
	Write16(p, 0); //WlCapcity
	Write32(p, 0); //WlMatchScore
	Write16(p, 0); //MstNum
	Write16(p, 0); //CurMstType
	Write32(p, 0); //CurMstExp
	WriteU(p, 0); //BuildingNum
	for (size_t i = 0; i < n; i++)
	{ //BuildingInfo
		BYTE* pBuildingInfo = p;
		Write16(pBuildingInfo, 0); //len

		Write32(pBuildingInfo, 0); //BuildingId
		Write32(pBuildingInfo, 0); //BuildingLevel
		Write32(pBuildingInfo, 0); //BuildingStatus
		Write32(pBuildingInfo, 0); //OpenAttribute
		Write32(pBuildingInfo, 0); //StartTime
		Write32(pBuildingInfo, 0); //EndTime
		Write32(pBuildingInfo, 0); //UpgradeFinished

		len = pBuildingInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //CurMstStyle
	Write32(p, 0); //TotalWlDegree
	Write32(p, 0); //WeeklyWlDegree
	Write32(p, 0); //WeeklyMatchScore
	Write32(p, 0); //TotalMatchScore
	Write32(p, 0); //Cash
	Write32(p, 0); //WlWeeklyMatchScore
	Write32(p, 0); //WlFetionLeftCnt

	len = p - buf;
	SendToClient(Client, 887, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GWonderLandGuildInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT GuildNum = Read16(p);
	UINT[] GuildId[] = Read32(p);

}

void ResponseC2GWonderLandGuildInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen
	Write16(p, 0); //GuildNum
	for (size_t i = 0; i < n; i++)
	{ //GuildDescInfo
		BYTE* pGuildDescInfo = p;
		Write16(pGuildDescInfo, 0); //len

		Write32(pGuildDescInfo, 0); //GuildID
		WriteString(pGuildDescInfo, 0); //Name[]
		{ //LeaderInfo
			BYTE* pLeaderInfo = pGuildDescInfo;
			Write16(pLeaderInfo, 0); //len

			Write32(pLeaderInfo, 0); //Uin
			WriteString(pLeaderInfo, 0); //NickName[]
			Write16(pLeaderInfo, 0); //Duty
			Write8(pLeaderInfo, 0); //OnlineFlag
			WriteUn(pLeaderInfo, 0); //LastLogin
			Write32(pLeaderInfo, 0); //MemProsperity
			Write32(pLeaderInfo, 0); //LastEnlistedTime
			Write8(pLeaderInfo, 0); //EnlistFlag
			Write16(pLeaderInfo, 0); //WonderLandDuty
			Write32(pLeaderInfo, 0); //TotalWlDegree
			Write32(pLeaderInfo, 0); //WeeklyWlDegree
			Write32(pLeaderInfo, 0); //Donate
			Write32(pLeaderInfo, 0); //SeasonZhanxun
			Write32(pLeaderInfo, 0); //WeeklyContributeValue
			Write32(pLeaderInfo, 0); //WeeklyProsperContributeValue
			Write32(pLeaderInfo, 0); //MonthlyProsperContributeValue
			Write32(pLeaderInfo, 0); //CommonParas[]
			Write32(pLeaderInfo, 0); //TimeJoinedGuild
			Write8(pLeaderInfo, 0); //AppliedChampionship

			len = pLeaderInfo - pGuildDescInfo;
			Set16(pGuildDescInfo, (WORD)len);
			pGuildDescInfo += len;
		}
		Write16(pGuildDescInfo, 0); //NotesLen
		Write16(pGuildDescInfo, 0); //DescLen
		Write32(pGuildDescInfo, 0); //Level
		Write32(pGuildDescInfo, 0); //Score
		Write32(pGuildDescInfo, 0); //CreateTime
		Write16(pGuildDescInfo, 0); //Attribute
		Write16(pGuildDescInfo, 0); //MaxMember
		Write16(pGuildDescInfo, 0); //CurrentMember
		Write16(pGuildDescInfo, 0); //TeamAddition
		Write16(pGuildDescInfo, 0); //YesterdayMaxOnline
		Write16(pGuildDescInfo, 0); //HistoryMaxOnline
		Write32(pGuildDescInfo, 0); //HistoryMaxOnlineTime
		Write32(pGuildDescInfo, 0); //Prosperity
		Write16(pGuildDescInfo, 0); //Level
		{ //GuildEnlistCond
			BYTE* pGuildEnlistCond = pGuildDescInfo;
			Write16(pGuildEnlistCond, 0); //len

			Write32(pGuildEnlistCond, 0); //ProsperityCondition
			Write32(pGuildEnlistCond, 0); //JoinTotalCondition
			Write32(pGuildEnlistCond, 0); //HonorCondition
			Write32(pGuildEnlistCond, 0); //CharmCondition
			Write32(pGuildEnlistCond, 0); //DanceExpCondition
			Write32(pGuildEnlistCond, 0); //SkillPointCondition
			Write32(pGuildEnlistCond, 0); //ExpLevelCondition
			Write32(pGuildEnlistCond, 0); //ApplyExpLevelCondition
			Write8(pGuildEnlistCond, 0); //EnlistType

			len = pGuildEnlistCond - pGuildDescInfo;
			Set16(pGuildDescInfo, (WORD)len);
			pGuildDescInfo += len;
		}
		Write8(pGuildDescInfo, 0); //NewGuildType
		Write32(pGuildDescInfo, 0); //GuildQQGroup
		{ //WorkDayActiveTimeSeg
			BYTE* pWorkDayActiveTimeSeg = pGuildDescInfo;
			Write16(pWorkDayActiveTimeSeg, 0); //len

			Write16(pWorkDayActiveTimeSeg, 0); //BeginTimeInt
			Write16(pWorkDayActiveTimeSeg, 0); //EndTimeInt

			len = pWorkDayActiveTimeSeg - pGuildDescInfo;
			Set16(pGuildDescInfo, (WORD)len);
			pGuildDescInfo += len;
		}
		{ //WeekendActiveTimeSeg
			BYTE* pWeekendActiveTimeSeg = pGuildDescInfo;
			Write16(pWeekendActiveTimeSeg, 0); //len

			Write16(pWeekendActiveTimeSeg, 0); //BeginTimeInt
			Write16(pWeekendActiveTimeSeg, 0); //EndTimeInt

			len = pWeekendActiveTimeSeg - pGuildDescInfo;
			Set16(pGuildDescInfo, (WORD)len);
			pGuildDescInfo += len;
		}
		Write32(pGuildDescInfo, 0); //LastEnlistTime
		Write8(pGuildDescInfo, 0); //EnlistNum
		Write32(pGuildDescInfo, 0); //LastModGuildNameTime
		Write32(pGuildDescInfo, 0); //WonderLandID
		WriteUn(pGuildDescInfo, 0); //UiCurDonate
		Write32(pGuildDescInfo, 0); //LastDayCheerValue
		Write32(pGuildDescInfo, 0); //LastDayCheerCnt
		{ //BorderMatchInfo
			BYTE* pBorderMatchInfo = pGuildDescInfo;
			Write16(pBorderMatchInfo, 0); //len

			Write32(pBorderMatchInfo, 0); //Honor
			Write32(pBorderMatchInfo, 0); //SeasonHonor
			Write32(pBorderMatchInfo, 0); //SeasonZhanxunFirstUin
			Write32(pBorderMatchInfo, 0); //SeasonZhanxun
			WriteString(pBorderMatchInfo, 0); //SeasonZhanxunFirstNickName[]

			len = pBorderMatchInfo - pGuildDescInfo;
			Set16(pGuildDescInfo, (WORD)len);
			pGuildDescInfo += len;
		}
		{ //CardOtherInfo
			BYTE* pCardOtherInfo = pGuildDescInfo;
			Write16(pCardOtherInfo, 0); //len

			Write32(pCardOtherInfo, 0); //MainZone1
			Write32(pCardOtherInfo, 0); //MainZone2
			Write32(pCardOtherInfo, 0); //MainMode1
			Write32(pCardOtherInfo, 0); //MainMode2
			Write32(pCardOtherInfo, 0); //OtherInterest1
			Write32(pCardOtherInfo, 0); //OtherInterest2

			len = pCardOtherInfo - pGuildDescInfo;
			Set16(pGuildDescInfo, (WORD)len);
			pGuildDescInfo += len;
		}

		len = pGuildDescInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 888, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GRemoveWonderlandGuild(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	bool RemoveType = Read8(p);
	UINT DstGuildID = Read32(p);
	char[] DstGuildName[] = ReadString(p);

}

void ResponseC2GRemoveWonderlandGuild(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen
	Write8(p, 0); //RemoveType
	Write32(p, 0); //DstGuildID

	len = p - buf;
	SendToClient(Client, 890, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyG2CRemoveWonderlandGuild(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //RemoveType
	Write32(p, 0); //SrcUin
	WriteString(p, 0); //SrcNickName[]
	Write32(p, 0); //DstGuildID
	WriteString(p, 0); //DstGuildName[]
	WriteU(p, 0); //AddCash

	len = p - buf;
	SendToClient(Client, 891, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyG2CRemoveWonderlandPlayer(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //RemoveType
	Write32(p, 0); //SrcUin
	WriteString(p, 0); //SrcNickName[]
	Write32(p, 0); //DstGuildID
	WriteString(p, 0); //DstGuildName[]

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestC2GCheckWonderLandName(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	char[] DstWonderLandName[] = ReadString(p);

}

void ResponseC2GCheckWonderLandName(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen
	WriteString(p, 0); //DstWonderLandName[]

	len = p - buf;
	SendToClient(Client, 895, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GFindWonderland(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT DstWonderLandID = Read32(p);
	char[] DstWonderLandName[] = ReadString(p);
	bool CliFindDlg = Read8(p);

}

void ResponseC2GFindWonderland(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen
	Write8(p, 0); //HasWonderLand
	for (size_t i = 0; i < n; i++)
	{ //WonderLandDescInfo
		BYTE* pWonderLandDescInfo = p;
		Write16(pWonderLandDescInfo, 0); //len

		Write32(pWonderLandDescInfo, 0); //WonderLandID
		WriteString(pWonderLandDescInfo, 0); //WonderLandName[]
		Write32(pWonderLandDescInfo, 0); //CrystalNum
		Write32(pWonderLandDescInfo, 0); //Activity
		Write32(pWonderLandDescInfo, 0); //Prosperity
		Write16(pWonderLandDescInfo, 0); //NotesLen
		Write16(pWonderLandDescInfo, 0); //DescLen
		Write32(pWonderLandDescInfo, 0); //CreateTime
		Write32(pWonderLandDescInfo, 0); //Attribute
		Write32(pWonderLandDescInfo, 0); //WlLevel
		Write32(pWonderLandDescInfo, 0); //WishTreeExp
		Write32(pWonderLandDescInfo, 0); //WishTreeWaterCnt
		Write32(pWonderLandDescInfo, 0); //WishTreeLastWaterTime
		Write32(pWonderLandDescInfo, 0); //EnterWLRoomContrLimit

		len = pWonderLandDescInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //MemberGuildNum
	for (size_t i = 0; i < n; i++)
	{ //MemberGuild
		BYTE* pMemberGuild = p;
		Write16(pMemberGuild, 0); //len

		Write32(pMemberGuild, 0); //GuildId
		Write32(pMemberGuild, 0); //JoinTime
		Write8(pMemberGuild, 0); //SubGuildType
		Write32(pMemberGuild, 0); //Contribute
		Write32(pMemberGuild, 0); //LastWeekContribute
		Write32(pMemberGuild, 0); //WeekContribute
		Write8(pMemberGuild, 0); //Grade

		len = pMemberGuild - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //CliFindDlg
	WriteU(p, 0); //BuildingNum
	for (size_t i = 0; i < n; i++)
	{ //BuildingInfo
		BYTE* pBuildingInfo = p;
		Write16(pBuildingInfo, 0); //len

		Write32(pBuildingInfo, 0); //BuildingId
		Write32(pBuildingInfo, 0); //BuildingLevel
		Write32(pBuildingInfo, 0); //BuildingStatus
		Write32(pBuildingInfo, 0); //OpenAttribute
		Write32(pBuildingInfo, 0); //StartTime
		Write32(pBuildingInfo, 0); //EndTime
		Write32(pBuildingInfo, 0); //UpgradeFinished

		len = pBuildingInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //WlCapcity
	Write32(p, 0); //MatchScore
	Write16(p, 0); //MstNum
	Write16(p, 0); //CurMstType
	Write32(p, 0); //CurMstExp
	Write16(p, 0); //CurMstStyle

	len = p - buf;
	SendToClient(Client, 896, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GFindWonderLandGuildInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT GuildNum = Read16(p);
	UINT[] GuildId[] = Read32(p);
	bool CliFindDlg = Read8(p);

}

void ResponseC2GFindWonderLandGuildInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen
	Write16(p, 0); //GuildNum
	for (size_t i = 0; i < n; i++)
	{ //GuildBriefInfo
		BYTE* pGuildBriefInfo = p;
		Write16(pGuildBriefInfo, 0); //len

		Write32(pGuildBriefInfo, 0); //GuildID
		WriteString(pGuildBriefInfo, 0); //Name[]
		{ //LeaderInfo
			BYTE* pLeaderInfo = pGuildBriefInfo;
			Write16(pLeaderInfo, 0); //len

			Write32(pLeaderInfo, 0); //Uin
			WriteString(pLeaderInfo, 0); //NickName[]
			Write16(pLeaderInfo, 0); //Duty
			Write8(pLeaderInfo, 0); //OnlineFlag
			WriteUn(pLeaderInfo, 0); //LastLogin
			Write32(pLeaderInfo, 0); //MemProsperity
			Write32(pLeaderInfo, 0); //LastEnlistedTime
			Write8(pLeaderInfo, 0); //EnlistFlag
			Write16(pLeaderInfo, 0); //WonderLandDuty
			Write32(pLeaderInfo, 0); //TotalWlDegree
			Write32(pLeaderInfo, 0); //WeeklyWlDegree
			Write32(pLeaderInfo, 0); //Donate
			Write32(pLeaderInfo, 0); //SeasonZhanxun
			Write32(pLeaderInfo, 0); //WeeklyContributeValue
			Write32(pLeaderInfo, 0); //WeeklyProsperContributeValue
			Write32(pLeaderInfo, 0); //MonthlyProsperContributeValue
			Write32(pLeaderInfo, 0); //CommonParas[]
			Write32(pLeaderInfo, 0); //TimeJoinedGuild
			Write8(pLeaderInfo, 0); //AppliedChampionship

			len = pLeaderInfo - pGuildBriefInfo;
			Set16(pGuildBriefInfo, (WORD)len);
			pGuildBriefInfo += len;
		}
		Write16(pGuildBriefInfo, 0); //MaxMember
		Write16(pGuildBriefInfo, 0); //CurrentMember

		len = pGuildBriefInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //CliFindDlg

	len = p - buf;
	SendToClient(Client, 919, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GGetWonderlandList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT StartIdx = Read32(p);
	UINT WonderLandCount = Read32(p);
	bool ListType = Read8(p);

}

void ResponseC2GGetWonderlandList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen
	Write32(p, 0); //StartIdx
	Write32(p, 0); //WonderLandCount
	Write32(p, 0); //TotalCount
	Write32(p, 0); //Count
	for (size_t i = 0; i < n; i++)
	{ //TopListItem
		BYTE* pTopListItem = p;
		Write16(pTopListItem, 0); //len

		Write32(pTopListItem, 0); //WonderLandID
		WriteString(pTopListItem, 0); //WonderLandName[]
		Write32(pTopListItem, 0); //Value

		len = pTopListItem - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ListType

	len = p - buf;
	SendToClient(Client, 897, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GGetWonderlandSummaryInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT Count = Read32(p);
	[] DstWonderLandID[] = Read(p);
	bool ListType = Read8(p);

}

void ResponseC2GGetWonderlandSummaryInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Count
	for (size_t i = 0; i < n; i++)
	{ //WonderLandSummaryInfo
		BYTE* pWonderLandSummaryInfo = p;
		Write16(pWonderLandSummaryInfo, 0); //len

		Write32(pWonderLandSummaryInfo, 0); //WonderLandID
		WriteString(pWonderLandSummaryInfo, 0); //WonderLandName[]
		Write32(pWonderLandSummaryInfo, 0); //Level
		Write32(pWonderLandSummaryInfo, 0); //MaxGuildNum
		Write32(pWonderLandSummaryInfo, 0); //CurrentGuildNum
		Write32(pWonderLandSummaryInfo, 0); //Activity
		Write32(pWonderLandSummaryInfo, 0); //Attribute
		Write32(pWonderLandSummaryInfo, 0); //CrystalNum
		Write32(pWonderLandSummaryInfo, 0); //Prosperity
		Write32(pWonderLandSummaryInfo, 0); //MatchScore
		WriteU(pWonderLandSummaryInfo, 0); //WlCityCapacity
		WriteU(pWonderLandSummaryInfo, 0); //WlCityCurPersonNum
		WriteUn(pWonderLandSummaryInfo, 0); //lingShouStatus

		len = pWonderLandSummaryInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ListType

	len = p - buf;
	SendToClient(Client, 898, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GChangeWonderlandPlayerDuty(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT DstUin = Read32(p);
	UINT DstGuildID = Read32(p);
	USHORT DstNewDuty = Read16(p);

}

void ResponseC2GChangeWonderlandPlayerDuty(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen
	Write32(p, 0); //Uin
	Write16(p, 0); //NewDuty
	Write32(p, 0); //NewRight
	Write32(p, 0); //DstUin
	Write32(p, 0); //DstGuildID
	Write16(p, 0); //DstNewDuty

	len = p - buf;
	SendToClient(Client, 893, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyG2CChangeWonderlandPlayerDuty(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //DstGuildID
	Write32(p, 0); //DstUin
	Write16(p, 0); //DstNewDuty
	Write32(p, 0); //DstNewDutyRight

	len = p - buf;
	SendToClient(Client, 894, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestC2GModifyWonderlandDutyRight(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT Duty = Read16(p);
	UINT Right = Read32(p);

}

void ResponseC2GModifyWonderlandDutyRight(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //Duty
	Write32(p, 0); //Right

	len = p - buf;
	SendToClient(Client, 925, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyC2GModifyWonderlandDutyRight(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //Duty
	Write32(p, 0); //Right

	len = p - buf;
	SendToClient(Client, 937, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestC2GModifyWonderlandRecruitSetting(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT NewAttr = Read32(p);
	bool HasAutoJoinCond = Read8(p);
	for (size_t i = 0; i < n; i++)
	{ //AutoJoinCond
		BYTE* pAutoJoinCond = p;
		len = Read16(pAutoJoinCond);

		USHORT GuildLevel = Read16(pAutoJoinCond);
		UINT GuildScore = Read32(pAutoJoinCond);
		UINT GuildProsperity = Read32(pAutoJoinCond);
		USHORT MemberNum = Read16(pAutoJoinCond);

		p += len;
	}

}

void ResponseC2GModifyWonderlandRecruitSetting(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //NewAttr
	Write8(p, 0); //HasAutoJoinCond
	for (size_t i = 0; i < n; i++)
	{ //AutoJoinCond
		BYTE* pAutoJoinCond = p;
		Write16(pAutoJoinCond, 0); //len

		Write16(pAutoJoinCond, 0); //GuildLevel
		Write32(pAutoJoinCond, 0); //GuildScore
		Write32(pAutoJoinCond, 0); //GuildProsperity
		Write16(pAutoJoinCond, 0); //MemberNum

		len = pAutoJoinCond - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 926, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GModifyWonderlandAttri(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT NewAttr = Read32(p);
	UINT EnterWLRoomContrLimit = Read32(p);

}

void ResponseC2GModifyWonderlandAttri(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //NewAttr
	Write32(p, 0); //EnterWLRoomContrLimit

	len = p - buf;
	SendToClient(Client, 927, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GModifyWonderlandNotes(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT NotesLen = Read16(p);

}

void ResponseC2GModifyWonderlandNotes(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //NotesLen
	Write16(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 928, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GModifyWonderlandDescs(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT DescLen = Read16(p);

}

void ResponseC2GModifyWonderlandDescs(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //DescLen
	Write16(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 929, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GModifyGuildPlayerFlag(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT DstUin = Read32(p);
	UINT Flag = Read32(p);
	UINT Value = Read32(p);

}

void ResponseC2GModifyGuildPlayerFlag(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //DstUin
	Write32(p, 0); //Flag
	Write32(p, 0); //Value

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GGetWLMstInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT ID = Read16(p);
	bool GetType = Read8(p);

}

void ResponseC2GGetWLMstInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //GetType
	Write16(p, 0); //Num
	for (size_t i = 0; i < n; i++)
	{ //WLMonsterInfo
		BYTE* pWLMonsterInfo = p;
		Write16(pWLMonsterInfo, 0); //len

		Write16(pWLMonsterInfo, 0); //ID
		WriteString(pWLMonsterInfo, 0); //NickName[]
		Write16(pWLMonsterInfo, 0); //Type
		Write16(pWLMonsterInfo, 0); //Style
		Write32(pWLMonsterInfo, 0); //Experience
		Write8(pWLMonsterInfo, 0); //Flag
		Write8(pWLMonsterInfo, 0); //Status
		Write32(pWLMonsterInfo, 0); //EndTime
		Write32(pWLMonsterInfo, 0); //LeftTime

		len = pWLMonsterInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //MstEggNum
	for (size_t i = 0; i < n; i++)
	{ //MstEggs
		BYTE* pMstEggs = p;
		Write16(pMstEggs, 0); //len

		Write32(pMstEggs, 0); //ItemID
		Write32(pMstEggs, 0); //Posion[]

		len = pMstEggs - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 938, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyC2GUpdateWLMstInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ID
	{ //WlMonsterValueInfo
		BYTE* pWlMonsterValueInfo = p;
		Write16(pWlMonsterValueInfo, 0); //len

		Write32(pWlMonsterValueInfo, 0); //Experience

		len = pWlMonsterValueInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 939, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestC2GCheckNameDirty(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	char[] Name[] = ReadString(p);

}

void ResponseC2GCheckNameDirty(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 940, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GChangeWLMstName(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT ID = Read16(p);
	char[] Name[] = ReadString(p);

}

void ResponseC2GChangeWLMstName(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //ID
	WriteString(p, 0); //Name[]

	len = p - buf;
	SendToClient(Client, 960, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GInitWLMonsterEgg(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT Type = Read16(p);
	char[] Name[] = ReadString(p);

}

void ResponseC2GInitWLMonsterEgg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //ID
	Write16(p, 0); //Type
	WriteString(p, 0); //Name[]

	len = p - buf;
	SendToClient(Client, 953, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyC2GInitWLMonsterEgg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ID
	Write16(p, 0); //Type
	WriteString(p, 0); //Name[]
	Write32(p, 0); //LeftTime

	len = p - buf;
	SendToClient(Client, 954, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestC2GEvolutionWLMst(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT ID = Read16(p);

}

void ResponseC2GEvolutionWLMst(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //ID
	Write16(p, 0); //Style
	{ //WlMonsterValueInfo
		BYTE* pWlMonsterValueInfo = p;
		Write16(pWlMonsterValueInfo, 0); //len

		Write32(pWlMonsterValueInfo, 0); //Experience

		len = pWlMonsterValueInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 955, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyC2GEvolutionWLMst(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ID
	Write16(p, 0); //Style
	{ //WlMonsterValueInfo
		BYTE* pWlMonsterValueInfo = p;
		Write16(pWlMonsterValueInfo, 0); //len

		Write32(pWlMonsterValueInfo, 0); //Experience

		len = pWlMonsterValueInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //LeftTime

	len = p - buf;
	SendToClient(Client, 956, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyC2GEvolutionWLMstFinish(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ID
	Write16(p, 0); //Style
	{ //WlMonsterValueInfo
		BYTE* pWlMonsterValueInfo = p;
		Write16(pWlMonsterValueInfo, 0); //len

		Write32(pWlMonsterValueInfo, 0); //Experience

		len = pWlMonsterValueInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 957, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestC2GFeedWLMst(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT ID = Read16(p);
	UINT FeedItemID = Read32(p);

}

void ResponseC2GFeedWLMst(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //Award
	for (size_t i = 0; i < n; i++)
	{ //MutualAward
		BYTE* pMutualAward = p;
		Write16(pMutualAward, 0); //len

		Write32(pMutualAward, 0); //IncWlMstExperience
		Write32(pMutualAward, 0); //TotalWlMstExperience
		Write32(pMutualAward, 0); //IncExperience
		Write32(pMutualAward, 0); //TotalExperience
		Write32(pMutualAward, 0); //IncWlDegree
		Write32(pMutualAward, 0); //TotalWlDegree
		Write32(pMutualAward, 0); //WeeklyWlDegree

		len = pMutualAward - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //MstIncExpType

	len = p - buf;
	SendToClient(Client, 958, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GCareWLMst(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT ID = Read16(p);
	int[] GenEggPosion[] = Read32(p);

}

void ResponseC2GCareWLMst(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //Award
	for (size_t i = 0; i < n; i++)
	{ //MutualAward
		BYTE* pMutualAward = p;
		Write16(pMutualAward, 0); //len

		Write32(pMutualAward, 0); //IncWlMstExperience
		Write32(pMutualAward, 0); //TotalWlMstExperience
		Write32(pMutualAward, 0); //IncExperience
		Write32(pMutualAward, 0); //TotalExperience
		Write32(pMutualAward, 0); //IncWlDegree
		Write32(pMutualAward, 0); //TotalWlDegree
		Write32(pMutualAward, 0); //WeeklyWlDegree

		len = pMutualAward - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 959, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestDonateEnergyMstEvolution(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT MstID = Read16(p);
	UINT CashNum = Read32(p);

}

void ResponseDonateEnergyMstEvolution(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //MstID
	Write32(p, 0); //CashNum
	Write32(p, 0); //TotalCashNum
	Write32(p, 0); //ContributionNum
	Write32(p, 0); //TotalWlDegree
	Write32(p, 0); //WeeklyWlDegree
	Write32(p, 0); //LeftTime

	len = p - buf;
	SendToClient(Client, 966, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestPickRoomGenItem(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	bool ItemType = Read8(p);
	{ //ItemInfo
		BYTE* pItemInfo = p;
		len = Read16(pItemInfo);

		int ItemID = Read32(pItemInfo);
		int[] Posion[] = Read32(pItemInfo);

		p += len;
	}

}

void ResponsePickRoomGenItem(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	WriteUn(p, 0); //Uin
	Write8(p, 0); //ItemType
	{ //ItemInfo
		BYTE* pItemInfo = p;
		Write16(pItemInfo, 0); //len

		Write32(pItemInfo, 0); //ItemID
		Write32(pItemInfo, 0); //Posion[]

		len = pItemInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //UseItemID
	Write32(p, 0); //UseItemNum
	Write8(p, 0); //IncInfo
	for (size_t i = 0; i < n; i++)
	{ //IncInfo
		BYTE* pIncInfo = p;
		Write16(pIncInfo, 0); //len

		Write32(pIncInfo, 0); //Money
		Write32(pIncInfo, 0); //SuperMoney
		Write32(pIncInfo, 0); //Exp
		Write32(pIncInfo, 0); //Charm
		Write32(pIncInfo, 0); //DanceExp
		Write32(pIncInfo, 0); //Coupons
		Write32(pIncInfo, 0); //Admiration
		Write32(pIncInfo, 0); //LuckMoney
		Write32(pIncInfo, 0); //TeamWorkExp
		Write32(pIncInfo, 0); //AchievePoint
		Write32(pIncInfo, 0); //ConsumeScore
		Write32(pIncInfo, 0); //HistoryConsumeScore
		Write32(pIncInfo, 0); //LadderMatchAchievePoint
		Write32(pIncInfo, 0); //SpeedBean
		Write32(pIncInfo, 0); //SpeedCoin

		len = pIncInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //ItemNum
	for (size_t i = 0; i < n; i++)
	{ //AddItemInfo
		BYTE* pAddItemInfo = p;
		Write16(pAddItemInfo, 0); //len

		Write32(pAddItemInfo, 0); //ItemID
		Write32(pAddItemInfo, 0); //ItemNum
		Write32(pAddItemInfo, 0); //AvailPeriod
		Write8(pAddItemInfo, 0); //Status
		WriteUn(pAddItemInfo, 0); //ObtainTime
		Write32(pAddItemInfo, 0); //OtherAttribute
		Write16(pAddItemInfo, 0); //ItemType

		len = pAddItemInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 967, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyPickRoomGenItem(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //Uin
	Write8(p, 0); //ItemType
	{ //ItemInfo
		BYTE* pItemInfo = p;
		Write16(pItemInfo, 0); //len

		Write32(pItemInfo, 0); //ItemID
		Write32(pItemInfo, 0); //Posion[]

		len = pItemInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 968, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyRoomGenItem(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //All
	Write8(p, 0); //ItemType
	Write16(p, 0); //ItemNum
	for (size_t i = 0; i < n; i++)
	{ //Items
		BYTE* pItems = p;
		Write16(pItems, 0); //len

		Write32(pItems, 0); //ItemID
		Write32(pItems, 0); //Posion[]

		len = pItems - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 969, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestC2GUpdateWlMstFlag(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT ID = Read16(p);
	bool Flag = Read8(p);

}

void ResponseC2GUpdateWlMstFlag(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //ID
	Write8(p, 0); //Flag

	len = p - buf;
	SendToClient(Client, 974, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyC2GUpdateWlMstFlag(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ID
	Write8(p, 0); //Flag

	len = p - buf;
	SendToClient(Client, 975, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetWonderLandBuildingInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetWonderLandBuildingInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen
	Write16(p, 0); //BuildingNum
	for (size_t i = 0; i < n; i++)
	{ //BuildingInfo
		BYTE* pBuildingInfo = p;
		Write16(pBuildingInfo, 0); //len

		Write32(pBuildingInfo, 0); //WlId
		Write32(pBuildingInfo, 0); //CityId
		Write32(pBuildingInfo, 0); //BuildingID
		Write8(pBuildingInfo, 0); //BuildingLevel
		Write8(pBuildingInfo, 0); //BuildingStatus
		Write32(pBuildingInfo, 0); //StartTime
		Write32(pBuildingInfo, 0); //EndTime
		Write32(pBuildingInfo, 0); //LeftTime
		Write8(pBuildingInfo, 0); //OpenAttribute

		len = pBuildingInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 899, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestUpgradeWonderLandBuilding(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT WlId = Read32(p);
	UINT DstCityId = Read32(p);
	UINT DstBuildingID = Read32(p);

}

void ResponseUpgradeWonderLandBuilding(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen
	Write32(p, 0); //WlId
	Write32(p, 0); //DstCityId
	Write32(p, 0); //DstBuildingID
	WriteU(p, 0); //HasBuildingInfo
	for (size_t i = 0; i < n; i++)
	{ //BuildingInfo
		BYTE* pBuildingInfo = p;
		Write16(pBuildingInfo, 0); //len

		Write32(pBuildingInfo, 0); //WlId
		Write32(pBuildingInfo, 0); //CityId
		Write32(pBuildingInfo, 0); //BuildingID
		Write8(pBuildingInfo, 0); //BuildingLevel
		Write8(pBuildingInfo, 0); //BuildingStatus
		Write32(pBuildingInfo, 0); //StartTime
		Write32(pBuildingInfo, 0); //EndTime
		Write32(pBuildingInfo, 0); //LeftTime
		Write8(pBuildingInfo, 0); //OpenAttribute

		len = pBuildingInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 915, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestDonateEnergy(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT WlId = Read32(p);
	UINT CityId = Read32(p);
	UINT BuildingID = Read32(p);
	UINT EnergyNum = Read32(p);

}

void ResponseDonateEnergy(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen
	Write32(p, 0); //WlId
	Write32(p, 0); //DstCityId
	Write32(p, 0); //DstBuildingID
	Write32(p, 0); //EnergyNum
	Write32(p, 0); //CashNum
	Write32(p, 0); //TotalCashNum
	Write32(p, 0); //ContributionNum
	Write32(p, 0); //TotalContributionNum
	Write32(p, 0); //LeftTime

	len = p - buf;
	SendToClient(Client, 916, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyUpgradeWonderLandBuildingFinished(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //WlId
	Write32(p, 0); //DstCityId
	Write32(p, 0); //DstBuildingID
	Write8(p, 0); //BuildingLevel

	len = p - buf;
	SendToClient(Client, 917, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestSetWonderLandBuildingAttribute(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT WlId = Read32(p);
	UINT DstCityId = Read32(p);
	UINT DstBuildingID = Read32(p);
	bool OpenAttribute = Read8(p);

}

void ResponseSetWonderLandBuildingAttribute(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen
	Write32(p, 0); //WlId
	Write32(p, 0); //DstCityId
	Write32(p, 0); //DstBuildingID
	Write8(p, 0); //OpenAttribute

	len = p - buf;
	SendToClient(Client, 918, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyUpdateWlBuilding(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	{ //Building
		BYTE* pBuilding = p;
		Write16(pBuilding, 0); //len

		Write32(pBuilding, 0); //WlId
		Write32(pBuilding, 0); //CityId
		Write32(pBuilding, 0); //BuildingID
		Write8(pBuilding, 0); //BuildingLevel
		Write8(pBuilding, 0); //BuildingStatus
		Write32(pBuilding, 0); //StartTime
		Write32(pBuilding, 0); //EndTime
		Write32(pBuilding, 0); //LeftTime
		Write8(pBuilding, 0); //OpenAttribute

		len = pBuilding - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 914, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyClientWlCapacityChanage(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //WlId
	Write32(p, 0); //CityId
	Write16(p, 0); //NewCapacity
	Write32(p, 0); //LeftWaitTime
	Write8(p, 0); //IsCapacityAdd

	len = p - buf;
	SendToClient(Client, 979, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestC2GGetRecommendWLList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseC2GGetRecommendWLList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Count
	for (size_t i = 0; i < n; i++)
	{ //WonderLandSummaryInfo
		BYTE* pWonderLandSummaryInfo = p;
		Write16(pWonderLandSummaryInfo, 0); //len

		Write32(pWonderLandSummaryInfo, 0); //WonderLandID
		WriteString(pWonderLandSummaryInfo, 0); //WonderLandName[]
		Write32(pWonderLandSummaryInfo, 0); //Level
		Write32(pWonderLandSummaryInfo, 0); //MaxGuildNum
		Write32(pWonderLandSummaryInfo, 0); //CurrentGuildNum
		Write32(pWonderLandSummaryInfo, 0); //Activity
		Write32(pWonderLandSummaryInfo, 0); //Attribute
		Write32(pWonderLandSummaryInfo, 0); //CrystalNum
		Write32(pWonderLandSummaryInfo, 0); //Prosperity
		Write32(pWonderLandSummaryInfo, 0); //MatchScore
		WriteU(pWonderLandSummaryInfo, 0); //WlCityCapacity
		WriteU(pWonderLandSummaryInfo, 0); //WlCityCurPersonNum
		WriteUn(pWonderLandSummaryInfo, 0); //lingShouStatus

		len = pWonderLandSummaryInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 983, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GGetRecommendWlGuildList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseC2GGetRecommendWlGuildList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Count
	for (size_t i = 0; i < n; i++)
	{ //GuildDescInfo
		BYTE* pGuildDescInfo = p;
		Write16(pGuildDescInfo, 0); //len

		Write32(pGuildDescInfo, 0); //GuildID
		WriteString(pGuildDescInfo, 0); //Name[]
		Write32(pGuildDescInfo, 0); //Level
		Write32(pGuildDescInfo, 0); //Score
		Write32(pGuildDescInfo, 0); //CreateTime
		Write16(pGuildDescInfo, 0); //Attribute
		Write16(pGuildDescInfo, 0); //MaxMember
		Write16(pGuildDescInfo, 0); //CurrentMember
		Write32(pGuildDescInfo, 0); //Prosperity
		Write16(pGuildDescInfo, 0); //Level
		{ //GuildEnlistCond
			BYTE* pGuildEnlistCond = pGuildDescInfo;
			Write16(pGuildEnlistCond, 0); //len

			Write32(pGuildEnlistCond, 0); //ProsperityCondition
			Write32(pGuildEnlistCond, 0); //JoinTotalCondition
			Write32(pGuildEnlistCond, 0); //HonorCondition
			Write32(pGuildEnlistCond, 0); //CharmCondition
			Write32(pGuildEnlistCond, 0); //DanceExpCondition
			Write32(pGuildEnlistCond, 0); //SkillPointCondition
			Write32(pGuildEnlistCond, 0); //ExpLevelCondition
			Write32(pGuildEnlistCond, 0); //ApplyExpLevelCondition
			Write8(pGuildEnlistCond, 0); //EnlistType

			len = pGuildEnlistCond - pGuildDescInfo;
			Set16(pGuildDescInfo, (WORD)len);
			pGuildDescInfo += len;
		}
		Write8(pGuildDescInfo, 0); //SubType
		{ //CardOtherInfo
			BYTE* pCardOtherInfo = pGuildDescInfo;
			Write16(pCardOtherInfo, 0); //len

			Write32(pCardOtherInfo, 0); //MainZone1
			Write32(pCardOtherInfo, 0); //MainZone2
			Write32(pCardOtherInfo, 0); //MainMode1
			Write32(pCardOtherInfo, 0); //MainMode2
			Write32(pCardOtherInfo, 0); //OtherInterest1
			Write32(pCardOtherInfo, 0); //OtherInterest2

			len = pCardOtherInfo - pGuildDescInfo;
			Set16(pGuildDescInfo, (WORD)len);
			pGuildDescInfo += len;
		}
		Write16(pGuildDescInfo, 0); //DescLen
		Write32(pGuildDescInfo, 0); //WeekProsper
		Write32(pGuildDescInfo, 0); //GuildQQGroup
		Write8(pGuildDescInfo, 0); //RecommendType
		Write16(pGuildDescInfo, 0); //FriendNums
		Write16(pGuildDescInfo, 0); //DCRecommendIndex

		len = pGuildDescInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 984, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetRecommendWlCityList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	U Uin = ReadU(p);
	int Time = Read32(p);

}

void ResponseGetRecommendWlCityList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteU(p, 0); //ResultId
	WriteU(p, 0); //Num
	for (size_t i = 0; i < n; i++)
	{ //WlCityList
		BYTE* pWlCityList = p;
		Write16(pWlCityList, 0); //len

		Write32(pWlCityList, 0); //WlId
		Write32(pWlCityList, 0); //CityId

		len = pWlCityList - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 991, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestBanWlTalk(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	U SrcUin = ReadU(p);
	int Time = Read32(p);
	U DstUin = ReadU(p);
	U DstGuildId = ReadU(p);
	U BanTime = ReadU(p);

}

void ResponseBanWlTalk(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteU(p, 0); //ResultId
	WriteU(p, 0); //DstUin

	len = p - buf;
	SendToClient(Client, 992, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestQueryWlWelfareInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	U Uin = ReadU(p);
	int Time = Read32(p);

}

void ResponseQueryWlWelfareInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteU(p, 0); //ResultId
	WriteU(p, 0); //HasWelfareInfo
	for (size_t i = 0; i < n; i++)
	{ //WelfareInfo
		BYTE* pWelfareInfo = p;
		Write16(pWelfareInfo, 0); //len

		WriteU(pWelfareInfo, 0); //CanGetWelfareForS
		WriteU(pWelfareInfo, 0); //CanGetWelfareOfBox1
		WriteU(pWelfareInfo, 0); //NeedDegreeOfBox1
		WriteU(pWelfareInfo, 0); //CanGetWelfareOfBox2
		WriteU(pWelfareInfo, 0); //NeedDegreeOfBox2
		WriteU(pWelfareInfo, 0); //CanGetWelfareOfBox3
		WriteU(pWelfareInfo, 0); //NeedDegreeOfBox3
		WriteU(pWelfareInfo, 0); //AppellationAdd

		len = pWelfareInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 990, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetWlWelfare(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	U Uin = ReadU(p);
	int Time = Read32(p);
	U WelfareId = ReadU(p);

}

void ResponseGetWlWelfare(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteU(p, 0); //ResultId
	WriteU(p, 0); //WelfareId
	WriteU(p, 0); //IncCash

	len = p - buf;
	SendToClient(Client, 985, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestQueryWlBonusInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	U Uin = ReadU(p);
	int Time = Read32(p);

}

void ResponseQueryWlBonusInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteU(p, 0); //ResultId
	WriteU(p, 0); //HasWlBonusInfo
	for (size_t i = 0; i < n; i++)
	{ //WlBonusInfo
		BYTE* pWlBonusInfo = p;
		Write16(pWlBonusInfo, 0); //len

		WriteU(pWlBonusInfo, 0); //TotalTimesByCrystal
		WriteU(pWlBonusInfo, 0); //LeftTimesByCrystal
		WriteU(pWlBonusInfo, 0); //TotalTimesByCard
		WriteU(pWlBonusInfo, 0); //LeftTimesByCard
		WriteU(pWlBonusInfo, 0); //CanGetWlBonus
		WriteU(pWlBonusInfo, 0); //CanStartWlBonus
		WriteU(pWlBonusInfo, 0); //NeedCrystalForStartWlBonus

		len = pWlBonusInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 986, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestStartWlBonus(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	U Uin = ReadU(p);
	int Time = Read32(p);
	U StartWlBonusType = ReadU(p);

}

void ResponseStartWlBonus(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteU(p, 0); //ResultId
	WriteU(p, 0); //IncCash

	len = p - buf;
	SendToClient(Client, 987, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetWlBonus(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	U Uin = ReadU(p);
	int Time = Read32(p);

}

void ResponseGetWlBonus(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteU(p, 0); //ResultId
	WriteU(p, 0); //IncCash

	len = p - buf;
	SendToClient(Client, 988, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestKickFromWlRoom(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT DstUin = Read32(p);

}

void ResponseKickFromWlRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 874, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyKickFromWlRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ReasonID

	len = p - buf;
	SendToClient(Client, 875, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGuildDonate(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT DonateValue = Read32(p);

}

void ResponseGuildDonate(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //DonateValue
	Write32(p, 0); //CurGuildDonateValue

	len = p - buf;
	SendToClient(Client, 997, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyGS2CUserVisionOnNPC(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	{ //NPCMapInfo
		BYTE* pNPCMapInfo = p;
		Write16(pNPCMapInfo, 0); //len

		Write32(pNPCMapInfo, 0); //WLGid
		Write32(pNPCMapInfo, 0); //CityId
		Write32(pNPCMapInfo, 0); //MapId

		len = pNPCMapInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //NPCNum
	for (size_t i = 0; i < n; i++)
	{ //NPCVisionList
		BYTE* pNPCVisionList = p;
		Write16(pNPCVisionList, 0); //len

		Write32(pNPCVisionList, 0); //ActType
		Write32(pNPCVisionList, 0); //ActivityType
		{ //NPCInfo
			BYTE* pNPCInfo = pNPCVisionList;
			Write16(pNPCInfo, 0); //len

			Write32(pNPCInfo, 0); //NPCGid
			WriteString(pNPCInfo, 0); //WLNPCName[]
			Write32(pNPCInfo, 0); //WLNPCType
			Write32(pNPCInfo, 0); //AwardPara
			{ //Position
				BYTE* pPosition = pNPCInfo;
				Write16(pPosition, 0); //len

				Write32(pPosition, 0); //X
				Write32(pPosition, 0); //Y
				Write32(pPosition, 0); //Z

				len = pPosition - pNPCInfo;
				Set16(pNPCInfo, (WORD)len);
				pNPCInfo += len;
			}
			Write32(pNPCInfo, 0); //Blood
			Write32(pNPCInfo, 0); //TotalBlood
			Write32(pNPCInfo, 0); //Status
			Write32(pNPCInfo, 0); //LifeTime

			len = pNPCInfo - pNPCVisionList;
			Set16(pNPCVisionList, (WORD)len);
			pNPCVisionList += len;
		}

		len = pNPCVisionList - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 13001, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyGS2CUpdateNPCAttr(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	{ //NPCMapInfo
		BYTE* pNPCMapInfo = p;
		Write16(pNPCMapInfo, 0); //len

		Write32(pNPCMapInfo, 0); //WLGid
		Write32(pNPCMapInfo, 0); //CityId
		Write32(pNPCMapInfo, 0); //MapId

		len = pNPCMapInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //UpdateNum
	for (size_t i = 0; i < n; i++)
	{ //AttrList
		BYTE* pAttrList = p;
		Write16(pAttrList, 0); //len

		Write32(pAttrList, 0); //NPCGid
		Write32(pAttrList, 0); //AttrType
		Write32(pAttrList, 0); //AttrValue

		len = pAttrList - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 13002, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGSUserActOnNPC(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	{ //NPCMapInfo
		BYTE* pNPCMapInfo = p;
		len = Read16(pNPCMapInfo);

		UINT WLGid = Read32(pNPCMapInfo);
		UINT CityId = Read32(pNPCMapInfo);
		UINT MapId = Read32(pNPCMapInfo);

		p += len;
	}
	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT ActType = Read32(p);
	UINT ToolID = Read32(p);
	UINT NPCID = Read32(p);
	UINT ActivityType = Read32(p);

}

void ResponseGSUserActOnNPC(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	{ //NPCMapInfo
		BYTE* pNPCMapInfo = p;
		Write16(pNPCMapInfo, 0); //len

		Write32(pNPCMapInfo, 0); //WLGid
		Write32(pNPCMapInfo, 0); //CityId
		Write32(pNPCMapInfo, 0); //MapId

		len = pNPCMapInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //ActType
	Write32(p, 0); //NPCID
	Write32(p, 0); //ResultID
	Write32(p, 0); //ResultLen
	{ //AwardInfo
		BYTE* pAwardInfo = p;
		Write16(pAwardInfo, 0); //len

		Write32(pAwardInfo, 0); //Contribution
		Write32(pAwardInfo, 0); //Experience
		Write32(pAwardInfo, 0); //Money
		Write32(pAwardInfo, 0); //Coupons
		WriteUn(pAwardInfo, 0); //itemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAwardInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAwardInfo;
			Set16(pAwardInfo, (WORD)len);
			pAwardInfo += len;
		}

		len = pAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //ActivityType

	len = p - buf;
	SendToClient(Client, 13003, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyGS2CUserActOnNPC(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	{ //NPCMapInfo
		BYTE* pNPCMapInfo = p;
		Write16(pNPCMapInfo, 0); //len

		Write32(pNPCMapInfo, 0); //WLGid
		Write32(pNPCMapInfo, 0); //CityId
		Write32(pNPCMapInfo, 0); //MapId

		len = pNPCMapInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //UserUin
	Write32(p, 0); //ActType
	Write32(p, 0); //NPCID
	Write32(p, 0); //ResultID
	{ //AwardInfo
		BYTE* pAwardInfo = p;
		Write16(pAwardInfo, 0); //len

		Write32(pAwardInfo, 0); //Contribution
		Write32(pAwardInfo, 0); //Experience
		Write32(pAwardInfo, 0); //Money
		Write32(pAwardInfo, 0); //Coupons
		WriteUn(pAwardInfo, 0); //itemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAwardInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAwardInfo;
			Set16(pAwardInfo, (WORD)len);
			pAwardInfo += len;
		}

		len = pAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 13004, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyGS2CUserActionResult(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	{ //NPCMapInfo
		BYTE* pNPCMapInfo = p;
		Write16(pNPCMapInfo, 0); //len

		Write32(pNPCMapInfo, 0); //WLGid
		Write32(pNPCMapInfo, 0); //CityId
		Write32(pNPCMapInfo, 0); //MapId

		len = pNPCMapInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //NPCID
	Write32(p, 0); //ActType
	Write32(p, 0); //ResultID
	{ //AwardInfo
		BYTE* pAwardInfo = p;
		Write16(pAwardInfo, 0); //len

		Write32(pAwardInfo, 0); //Contribution
		Write32(pAwardInfo, 0); //Experience
		Write32(pAwardInfo, 0); //Money
		Write32(pAwardInfo, 0); //Coupons
		WriteUn(pAwardInfo, 0); //itemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAwardInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAwardInfo;
			Set16(pAwardInfo, (WORD)len);
			pAwardInfo += len;
		}

		len = pAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 13005, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyGS2CCatchTraitorSettle(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //KillHeaderUin
	WriteString(p, 0); //KillHeaderName[]
	Write32(p, 0); //KillNormalTraitorNum
	Write32(p, 0); //TotalTraitorNum
	Write32(p, 0); //WlCrystalNum
	{ //UserRecord
		BYTE* pUserRecord = p;
		Write16(pUserRecord, 0); //len

		WriteUn(pUserRecord, 0); //uszIsKillHeader
		Write32(pUserRecord, 0); //KillTraitorNum
		Write32(pUserRecord, 0); //Contribution

		len = pUserRecord - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //RankNum
	for (size_t i = 0; i < n; i++)
	{ //RankList
		BYTE* pRankList = p;
		Write16(pRankList, 0); //len

		Write32(pRankList, 0); //UserUin
		WriteString(pRankList, 0); //UserName[]
		Write32(pRankList, 0); //UCTANum

		len = pRankList - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 13006, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGSGetCatchTraitorInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT ActivityType = Read32(p);

}

void ResponseGSGetCatchTraitorInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //ResultId
	Write32(p, 0); //CatchedNum
	Write32(p, 0); //TotalNum
	Write32(p, 0); //CatchedHeaderNum
	Write32(p, 0); //TotalHeaderNum

	len = p - buf;
	SendToClient(Client, 13107, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void ResponseGSBeginCatchTraitor(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //ResultId

	len = p - buf;
	SendToClient(Client, 13007, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestUserApplyInMaze(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT ActivityType = Read32(p);

}

void ResponseUserApplyInMaze(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //ResultId
	Write32(p, 0); //DoorBit
	Write32(p, 0); //ActivityType
	Write32(p, 0); //GetedChestNum
	Write32(p, 0); //PermitChestNum

	len = p - buf;
	SendToClient(Client, 13008, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestUserApplyOutMaze(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT ActivityType = Read32(p);

}

void ResponseUserApplyOutMaze(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //ResultId
	Write32(p, 0); //ActivityType

	len = p - buf;
	SendToClient(Client, 13009, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyUserOutMaze(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //ReasonId
	Write32(p, 0); //ActivityType

	len = p - buf;
	SendToClient(Client, 13106, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyWlNpcMove(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //NPCID
	{ //SrcPos
		BYTE* pSrcPos = p;
		Write16(pSrcPos, 0); //len

		Write32(pSrcPos, 0); //X
		Write32(pSrcPos, 0); //Y
		Write32(pSrcPos, 0); //Z

		len = pSrcPos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //DstPos
		BYTE* pDstPos = p;
		Write16(pDstPos, 0); //len

		Write32(pDstPos, 0); //X
		Write32(pDstPos, 0); //Y
		Write32(pDstPos, 0); //Z

		len = pDstPos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //MoveType

	len = p - buf;
	SendToClient(Client, 13108, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyWlNpcAttackPlayer(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //NPCID
	Write32(p, 0); //GetHitUin
	Write32(p, 0); //AttackType

	len = p - buf;
	SendToClient(Client, 13109, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyAttackBeastSettle(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //LastHitUin
	WriteString(p, 0); //LastHitName[]
	Write32(p, 0); //LastHitExtCoupons
	Write32(p, 0); //LastHitExtChest
	Write32(p, 0); //TimeConsume
	Write32(p, 0); //HittedBlood
	Write32(p, 0); //GetCoupons
	Write32(p, 0); //GetExtCoupons
	Write32(p, 0); //GetChest
	Write32(p, 0); //CrystalOre

	len = p - buf;
	SendToClient(Client, 13114, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyWlNpcCarryCoupons(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //NPCID
	Write32(p, 0); //Coupons

	len = p - buf;
	SendToClient(Client, 13116, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestC2GGetWlQTRoomList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	Un Time = ReadUn(p);
	bool TlvNum = Read8(p);

}

void ResponseC2GGetWlQTRoomList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //MessageLen
	Write8(p, 0); //RoomNum
	for (size_t i = 0; i < n; i++)
	{ //RoomList
		BYTE* pRoomList = p;
		Write16(pRoomList, 0); //len

		Write8(pRoomList, 0); //TlvNum
		for (size_t i = 0; i < n; i++)
		{ //TlvValue
			BYTE* pTlvValue = pRoomList;
			Write16(pTlvValue, 0); //len

			Write8(pTlvValue, 0); //Tid
			Write16(pTlvValue, 0); //Len

			len = pTlvValue - pRoomList;
			Set16(pRoomList, (WORD)len);
			pRoomList += len;
		}

		len = pRoomList - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 980, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GCreateWlQTRoom(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	Un Time = ReadUn(p);
	USHORT NameLen = Read16(p);
	bool Type = Read8(p);

}

void ResponseC2GCreateWlQTRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //MessageLen
	Write32(p, 0); //RoomID

	len = p - buf;
	SendToClient(Client, 981, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GSetWlQTRoom(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	Un Time = ReadUn(p);
	UINT RoomID = Read32(p);

}

void ResponseC2GSetWlQTRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //RoomID

	len = p - buf;
	SendToClient(Client, 982, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void ResponseWishTreeInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Result
	{ //WishTreeBaseInfo
		BYTE* pWishTreeBaseInfo = p;
		Write16(pWishTreeBaseInfo, 0); //len

		Write32(pWishTreeBaseInfo, 0); //WishTreeExp
		Write32(pWishTreeBaseInfo, 0); //WaterNum
		Write32(pWishTreeBaseInfo, 0); //LastWaterTime

		len = pWishTreeBaseInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //Info
		BYTE* pInfo = p;
		Write16(pInfo, 0); //len

		Write(pInfo, 0); //Num
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pInfo;
			Set16(pInfo, (WORD)len);
			pInfo += len;
		}
		WriteUn(pInfo, 0); //astcostNum
		for (size_t i = 0; i < n; i++)
		{ //ItemCost
			BYTE* pItemCost = pInfo;
			Write16(pItemCost, 0); //len

			Write32(pItemCost, 0); //CashCost
			Write32(pItemCost, 0); //ItemCost

			len = pItemCost - pInfo;
			Set16(pInfo, (WORD)len);
			pInfo += len;
		}

		len = pInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //BCNum
	for (size_t i = 0; i < n; i++)
	{ //BC
		BYTE* pBC = p;
		Write16(pBC, 0); //len

		Write16(pBC, 0); //ContentLen

		len = pBC - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //ItemNum
	for (size_t i = 0; i < n; i++)
	{ //ItemInfo
		BYTE* pItemInfo = p;
		Write16(pItemInfo, 0); //len

		Write32(pItemInfo, 0); //ItemID
		Write32(pItemInfo, 0); //ItemNum
		Write32(pItemInfo, 0); //AvailPeriod
		Write8(pItemInfo, 0); //Status
		WriteUn(pItemInfo, 0); //ObtainTime
		Write32(pItemInfo, 0); //OtherAttribute
		Write16(pItemInfo, 0); //ItemType

		len = pItemInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 12196, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void ResponseWishTreeWater(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Result
	Write32(p, 0); //Uin
	{ //WishTreeBaseInfo
		BYTE* pWishTreeBaseInfo = p;
		Write16(pWishTreeBaseInfo, 0); //len

		Write32(pWishTreeBaseInfo, 0); //WishTreeExp
		Write32(pWishTreeBaseInfo, 0); //WaterNum
		Write32(pWishTreeBaseInfo, 0); //LastWaterTime

		len = pWishTreeBaseInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //Info
		BYTE* pInfo = p;
		Write16(pInfo, 0); //len

		Write(pInfo, 0); //Num
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pInfo;
			Set16(pInfo, (WORD)len);
			pInfo += len;
		}
		WriteUn(pInfo, 0); //astcostNum
		for (size_t i = 0; i < n; i++)
		{ //ItemCost
			BYTE* pItemCost = pInfo;
			Write16(pItemCost, 0); //len

			Write32(pItemCost, 0); //CashCost
			Write32(pItemCost, 0); //ItemCost

			len = pItemCost - pInfo;
			Set16(pInfo, (WORD)len);
			pInfo += len;
		}

		len = pInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //Cash

	len = p - buf;
	SendToClient(Client, 12197, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void ResponseWishTreeBuyCommodity(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //HasItem
	for (size_t i = 0; i < n; i++)
	{ //ItemInfo
		BYTE* pItemInfo = p;
		Write16(pItemInfo, 0); //len

		Write32(pItemInfo, 0); //ItemID
		Write32(pItemInfo, 0); //ItemNum
		Write32(pItemInfo, 0); //AvailPeriod
		Write8(pItemInfo, 0); //Status
		WriteUn(pItemInfo, 0); //ObtainTime
		Write32(pItemInfo, 0); //OtherAttribute
		Write16(pItemInfo, 0); //ItemType

		len = pItemInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasCost
	for (size_t i = 0; i < n; i++)
	{ //RandCost
		BYTE* pRandCost = p;
		Write16(pRandCost, 0); //len

		Write32(pRandCost, 0); //CashCost
		Write32(pRandCost, 0); //ItemCost

		len = pRandCost - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 12198, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyWishTreeBaseInfoChangeInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //IsLvUp
	{ //WishTreeBaseInfo
		BYTE* pWishTreeBaseInfo = p;
		Write16(pWishTreeBaseInfo, 0); //len

		Write32(pWishTreeBaseInfo, 0); //WishTreeExp
		Write32(pWishTreeBaseInfo, 0); //WaterNum
		Write32(pWishTreeBaseInfo, 0); //LastWaterTime

		len = pWishTreeBaseInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //Level

	len = p - buf;
	SendToClient(Client, 12199, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestC2SSearchKartAltas(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT DstUin = Read32(p);

}

void ResponseC2SearchKartAltas(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Result
	Write32(p, 0); //DstUin
	Write16(p, 0); //ItemNum
	for (size_t i = 0; i < n; i++)
	{ //ItemInfoArray
		BYTE* pItemInfoArray = p;
		Write16(pItemInfoArray, 0); //len

		Write32(pItemInfoArray, 0); //ItemID
		Write32(pItemInfoArray, 0); //RefitCout
		{ //AltasCurKartAttr
			BYTE* pAltasCurKartAttr = pItemInfoArray;
			Write16(pAltasCurKartAttr, 0); //len

			Write32(pAltasCurKartAttr, 0); //Uin
			Write32(pAltasCurKartAttr, 0); //KartId
			Write32(pAltasCurKartAttr, 0); //RefitCout
			Write16(pAltasCurKartAttr, 0); //MaxFlags
			Write16(pAltasCurKartAttr, 0); //WWeight
			Write16(pAltasCurKartAttr, 0); //SpeedWeight
			Write16(pAltasCurKartAttr, 0); //JetWeight
			Write16(pAltasCurKartAttr, 0); //SJetWeight
			Write16(pAltasCurKartAttr, 0); //AccuWeight
			Write32(pAltasCurKartAttr, 0); //ShapeRefitCount
			Write32(pAltasCurKartAttr, 0); //KartHeadRefitItemID
			Write32(pAltasCurKartAttr, 0); //KartTailRefitItemID
			Write32(pAltasCurKartAttr, 0); //KartFlankRefitItemID
			Write32(pAltasCurKartAttr, 0); //KartTireRefitItemID
			{ //KartRefitExInfo
				BYTE* pKartRefitExInfo = pAltasCurKartAttr;
				Write16(pKartRefitExInfo, 0); //len

				Write8(pKartRefitExInfo, 0); //SpeedRefitStar
				Write8(pKartRefitExInfo, 0); //JetRefitStar
				Write8(pKartRefitExInfo, 0); //SJetRefitStar
				Write8(pKartRefitExInfo, 0); //AccuRefitStar
				Write8(pKartRefitExInfo, 0); //SpeedAddRatio
				Write8(pKartRefitExInfo, 0); //JetAddRatio
				Write8(pKartRefitExInfo, 0); //SJetAddRatio
				Write8(pKartRefitExInfo, 0); //AccuAddRatio

				len = pKartRefitExInfo - pAltasCurKartAttr;
				Set16(pAltasCurKartAttr, (WORD)len);
				pAltasCurKartAttr += len;
			}
			Write32(pAltasCurKartAttr, 0); //SecondRefitCount
			Write16(pAltasCurKartAttr, 0); //Speed2Weight
			Write16(pAltasCurKartAttr, 0); //DriftVecWeight
			Write16(pAltasCurKartAttr, 0); //AdditionalZSpeedWeight
			Write16(pAltasCurKartAttr, 0); //AntiCollisionWeight
			Write16(pAltasCurKartAttr, 0); //LuckyValue
			Write16(pAltasCurKartAttr, 0); //RefitLuckyValueMaxWeight
			Write32(pAltasCurKartAttr, 0); //ShapeSuitID
			Write8(pAltasCurKartAttr, 0); //LegendSuitLevel
			Write32(pAltasCurKartAttr, 0); //LegendSuitLevelChoice
			Write32(pAltasCurKartAttr, 0); //ShapeLegendSuitID

			len = pAltasCurKartAttr - pItemInfoArray;
			Set16(pItemInfoArray, (WORD)len);
			pItemInfoArray += len;
		}
		{ //AltasKartStoneGrooveInfo
			BYTE* pAltasKartStoneGrooveInfo = pItemInfoArray;
			Write16(pAltasKartStoneGrooveInfo, 0); //len

			Write32(pAltasKartStoneGrooveInfo, 0); //KartID
			Write32(pAltasKartStoneGrooveInfo, 0); //StoneGrooveNum
			for (size_t i = 0; i < n; i++)
			{ //StoneGrooveInfo
				BYTE* pStoneGrooveInfo = pAltasKartStoneGrooveInfo;
				Write16(pStoneGrooveInfo, 0); //len

				Write32(pStoneGrooveInfo, 0); //StoneUseOccaType
				Write32(pStoneGrooveInfo, 0); //SkillStoneID

				len = pStoneGrooveInfo - pAltasKartStoneGrooveInfo;
				Set16(pAltasKartStoneGrooveInfo, (WORD)len);
				pAltasKartStoneGrooveInfo += len;
			}

			len = pAltasKartStoneGrooveInfo - pItemInfoArray;
			Set16(pItemInfoArray, (WORD)len);
			pItemInfoArray += len;
		}
		{ //AltasKartActiveLevelInfo
			BYTE* pAltasKartActiveLevelInfo = pItemInfoArray;
			Write16(pAltasKartActiveLevelInfo, 0); //len

			Write32(pAltasKartActiveLevelInfo, 0); //KartType
			Write32(pAltasKartActiveLevelInfo, 0); //ItemID
			Write32(pAltasKartActiveLevelInfo, 0); //ActiveLevel

			len = pAltasKartActiveLevelInfo - pItemInfoArray;
			Set16(pItemInfoArray, (WORD)len);
			pItemInfoArray += len;
		}

		len = pItemInfoArray - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasMoreInfo

	len = p - buf;
	SendToClient(Client, 13705, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void ResponseC2SearchKartAltasMoreInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //DstUin
	Write16(p, 0); //ItemNum
	for (size_t i = 0; i < n; i++)
	{ //ItemInfoArray
		BYTE* pItemInfoArray = p;
		Write16(pItemInfoArray, 0); //len

		Write32(pItemInfoArray, 0); //ItemID
		Write32(pItemInfoArray, 0); //RefitCout
		{ //AltasCurKartAttr
			BYTE* pAltasCurKartAttr = pItemInfoArray;
			Write16(pAltasCurKartAttr, 0); //len

			Write32(pAltasCurKartAttr, 0); //Uin
			Write32(pAltasCurKartAttr, 0); //KartId
			Write32(pAltasCurKartAttr, 0); //RefitCout
			Write16(pAltasCurKartAttr, 0); //MaxFlags
			Write16(pAltasCurKartAttr, 0); //WWeight
			Write16(pAltasCurKartAttr, 0); //SpeedWeight
			Write16(pAltasCurKartAttr, 0); //JetWeight
			Write16(pAltasCurKartAttr, 0); //SJetWeight
			Write16(pAltasCurKartAttr, 0); //AccuWeight
			Write32(pAltasCurKartAttr, 0); //ShapeRefitCount
			Write32(pAltasCurKartAttr, 0); //KartHeadRefitItemID
			Write32(pAltasCurKartAttr, 0); //KartTailRefitItemID
			Write32(pAltasCurKartAttr, 0); //KartFlankRefitItemID
			Write32(pAltasCurKartAttr, 0); //KartTireRefitItemID
			{ //KartRefitExInfo
				BYTE* pKartRefitExInfo = pAltasCurKartAttr;
				Write16(pKartRefitExInfo, 0); //len

				Write8(pKartRefitExInfo, 0); //SpeedRefitStar
				Write8(pKartRefitExInfo, 0); //JetRefitStar
				Write8(pKartRefitExInfo, 0); //SJetRefitStar
				Write8(pKartRefitExInfo, 0); //AccuRefitStar
				Write8(pKartRefitExInfo, 0); //SpeedAddRatio
				Write8(pKartRefitExInfo, 0); //JetAddRatio
				Write8(pKartRefitExInfo, 0); //SJetAddRatio
				Write8(pKartRefitExInfo, 0); //AccuAddRatio

				len = pKartRefitExInfo - pAltasCurKartAttr;
				Set16(pAltasCurKartAttr, (WORD)len);
				pAltasCurKartAttr += len;
			}
			Write32(pAltasCurKartAttr, 0); //SecondRefitCount
			Write16(pAltasCurKartAttr, 0); //Speed2Weight
			Write16(pAltasCurKartAttr, 0); //DriftVecWeight
			Write16(pAltasCurKartAttr, 0); //AdditionalZSpeedWeight
			Write16(pAltasCurKartAttr, 0); //AntiCollisionWeight
			Write16(pAltasCurKartAttr, 0); //LuckyValue
			Write16(pAltasCurKartAttr, 0); //RefitLuckyValueMaxWeight
			Write32(pAltasCurKartAttr, 0); //ShapeSuitID
			Write8(pAltasCurKartAttr, 0); //LegendSuitLevel
			Write32(pAltasCurKartAttr, 0); //LegendSuitLevelChoice
			Write32(pAltasCurKartAttr, 0); //ShapeLegendSuitID

			len = pAltasCurKartAttr - pItemInfoArray;
			Set16(pItemInfoArray, (WORD)len);
			pItemInfoArray += len;
		}
		{ //AltasKartStoneGrooveInfo
			BYTE* pAltasKartStoneGrooveInfo = pItemInfoArray;
			Write16(pAltasKartStoneGrooveInfo, 0); //len

			Write32(pAltasKartStoneGrooveInfo, 0); //KartID
			Write32(pAltasKartStoneGrooveInfo, 0); //StoneGrooveNum
			for (size_t i = 0; i < n; i++)
			{ //StoneGrooveInfo
				BYTE* pStoneGrooveInfo = pAltasKartStoneGrooveInfo;
				Write16(pStoneGrooveInfo, 0); //len

				Write32(pStoneGrooveInfo, 0); //StoneUseOccaType
				Write32(pStoneGrooveInfo, 0); //SkillStoneID

				len = pStoneGrooveInfo - pAltasKartStoneGrooveInfo;
				Set16(pAltasKartStoneGrooveInfo, (WORD)len);
				pAltasKartStoneGrooveInfo += len;
			}

			len = pAltasKartStoneGrooveInfo - pItemInfoArray;
			Set16(pItemInfoArray, (WORD)len);
			pItemInfoArray += len;
		}
		{ //AltasKartActiveLevelInfo
			BYTE* pAltasKartActiveLevelInfo = pItemInfoArray;
			Write16(pAltasKartActiveLevelInfo, 0); //len

			Write32(pAltasKartActiveLevelInfo, 0); //KartType
			Write32(pAltasKartActiveLevelInfo, 0); //ItemID
			Write32(pAltasKartActiveLevelInfo, 0); //ActiveLevel

			len = pAltasKartActiveLevelInfo - pItemInfoArray;
			Set16(pItemInfoArray, (WORD)len);
			pItemInfoArray += len;
		}

		len = pItemInfoArray - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasNext

	len = p - buf;
	SendToClient(Client, 13703, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyS2CMyKartAltas(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ItemNum
	for (size_t i = 0; i < n; i++)
	{ //ItemInfoArray
		BYTE* pItemInfoArray = p;
		Write16(pItemInfoArray, 0); //len

		Write32(pItemInfoArray, 0); //ItemID
		Write32(pItemInfoArray, 0); //RefitCout
		{ //AltasCurKartAttr
			BYTE* pAltasCurKartAttr = pItemInfoArray;
			Write16(pAltasCurKartAttr, 0); //len

			Write32(pAltasCurKartAttr, 0); //Uin
			Write32(pAltasCurKartAttr, 0); //KartId
			Write32(pAltasCurKartAttr, 0); //RefitCout
			Write16(pAltasCurKartAttr, 0); //MaxFlags
			Write16(pAltasCurKartAttr, 0); //WWeight
			Write16(pAltasCurKartAttr, 0); //SpeedWeight
			Write16(pAltasCurKartAttr, 0); //JetWeight
			Write16(pAltasCurKartAttr, 0); //SJetWeight
			Write16(pAltasCurKartAttr, 0); //AccuWeight
			Write32(pAltasCurKartAttr, 0); //ShapeRefitCount
			Write32(pAltasCurKartAttr, 0); //KartHeadRefitItemID
			Write32(pAltasCurKartAttr, 0); //KartTailRefitItemID
			Write32(pAltasCurKartAttr, 0); //KartFlankRefitItemID
			Write32(pAltasCurKartAttr, 0); //KartTireRefitItemID
			{ //KartRefitExInfo
				BYTE* pKartRefitExInfo = pAltasCurKartAttr;
				Write16(pKartRefitExInfo, 0); //len

				Write8(pKartRefitExInfo, 0); //SpeedRefitStar
				Write8(pKartRefitExInfo, 0); //JetRefitStar
				Write8(pKartRefitExInfo, 0); //SJetRefitStar
				Write8(pKartRefitExInfo, 0); //AccuRefitStar
				Write8(pKartRefitExInfo, 0); //SpeedAddRatio
				Write8(pKartRefitExInfo, 0); //JetAddRatio
				Write8(pKartRefitExInfo, 0); //SJetAddRatio
				Write8(pKartRefitExInfo, 0); //AccuAddRatio

				len = pKartRefitExInfo - pAltasCurKartAttr;
				Set16(pAltasCurKartAttr, (WORD)len);
				pAltasCurKartAttr += len;
			}
			Write32(pAltasCurKartAttr, 0); //SecondRefitCount
			Write16(pAltasCurKartAttr, 0); //Speed2Weight
			Write16(pAltasCurKartAttr, 0); //DriftVecWeight
			Write16(pAltasCurKartAttr, 0); //AdditionalZSpeedWeight
			Write16(pAltasCurKartAttr, 0); //AntiCollisionWeight
			Write16(pAltasCurKartAttr, 0); //LuckyValue
			Write16(pAltasCurKartAttr, 0); //RefitLuckyValueMaxWeight
			Write32(pAltasCurKartAttr, 0); //ShapeSuitID
			Write8(pAltasCurKartAttr, 0); //LegendSuitLevel
			Write32(pAltasCurKartAttr, 0); //LegendSuitLevelChoice
			Write32(pAltasCurKartAttr, 0); //ShapeLegendSuitID

			len = pAltasCurKartAttr - pItemInfoArray;
			Set16(pItemInfoArray, (WORD)len);
			pItemInfoArray += len;
		}
		{ //AltasKartStoneGrooveInfo
			BYTE* pAltasKartStoneGrooveInfo = pItemInfoArray;
			Write16(pAltasKartStoneGrooveInfo, 0); //len

			Write32(pAltasKartStoneGrooveInfo, 0); //KartID
			Write32(pAltasKartStoneGrooveInfo, 0); //StoneGrooveNum
			for (size_t i = 0; i < n; i++)
			{ //StoneGrooveInfo
				BYTE* pStoneGrooveInfo = pAltasKartStoneGrooveInfo;
				Write16(pStoneGrooveInfo, 0); //len

				Write32(pStoneGrooveInfo, 0); //StoneUseOccaType
				Write32(pStoneGrooveInfo, 0); //SkillStoneID

				len = pStoneGrooveInfo - pAltasKartStoneGrooveInfo;
				Set16(pAltasKartStoneGrooveInfo, (WORD)len);
				pAltasKartStoneGrooveInfo += len;
			}

			len = pAltasKartStoneGrooveInfo - pItemInfoArray;
			Set16(pItemInfoArray, (WORD)len);
			pItemInfoArray += len;
		}
		{ //AltasKartActiveLevelInfo
			BYTE* pAltasKartActiveLevelInfo = pItemInfoArray;
			Write16(pAltasKartActiveLevelInfo, 0); //len

			Write32(pAltasKartActiveLevelInfo, 0); //KartType
			Write32(pAltasKartActiveLevelInfo, 0); //ItemID
			Write32(pAltasKartActiveLevelInfo, 0); //ActiveLevel

			len = pAltasKartActiveLevelInfo - pItemInfoArray;
			Set16(pItemInfoArray, (WORD)len);
			pItemInfoArray += len;
		}

		len = pItemInfoArray - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasMoreInfo

	len = p - buf;
	SendToClient(Client, 13706, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyS2CMyKartAltasMoreInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ItemNum
	for (size_t i = 0; i < n; i++)
	{ //ItemInfoArray
		BYTE* pItemInfoArray = p;
		Write16(pItemInfoArray, 0); //len

		Write32(pItemInfoArray, 0); //ItemID
		Write32(pItemInfoArray, 0); //RefitCout
		{ //AltasCurKartAttr
			BYTE* pAltasCurKartAttr = pItemInfoArray;
			Write16(pAltasCurKartAttr, 0); //len

			Write32(pAltasCurKartAttr, 0); //Uin
			Write32(pAltasCurKartAttr, 0); //KartId
			Write32(pAltasCurKartAttr, 0); //RefitCout
			Write16(pAltasCurKartAttr, 0); //MaxFlags
			Write16(pAltasCurKartAttr, 0); //WWeight
			Write16(pAltasCurKartAttr, 0); //SpeedWeight
			Write16(pAltasCurKartAttr, 0); //JetWeight
			Write16(pAltasCurKartAttr, 0); //SJetWeight
			Write16(pAltasCurKartAttr, 0); //AccuWeight
			Write32(pAltasCurKartAttr, 0); //ShapeRefitCount
			Write32(pAltasCurKartAttr, 0); //KartHeadRefitItemID
			Write32(pAltasCurKartAttr, 0); //KartTailRefitItemID
			Write32(pAltasCurKartAttr, 0); //KartFlankRefitItemID
			Write32(pAltasCurKartAttr, 0); //KartTireRefitItemID
			{ //KartRefitExInfo
				BYTE* pKartRefitExInfo = pAltasCurKartAttr;
				Write16(pKartRefitExInfo, 0); //len

				Write8(pKartRefitExInfo, 0); //SpeedRefitStar
				Write8(pKartRefitExInfo, 0); //JetRefitStar
				Write8(pKartRefitExInfo, 0); //SJetRefitStar
				Write8(pKartRefitExInfo, 0); //AccuRefitStar
				Write8(pKartRefitExInfo, 0); //SpeedAddRatio
				Write8(pKartRefitExInfo, 0); //JetAddRatio
				Write8(pKartRefitExInfo, 0); //SJetAddRatio
				Write8(pKartRefitExInfo, 0); //AccuAddRatio

				len = pKartRefitExInfo - pAltasCurKartAttr;
				Set16(pAltasCurKartAttr, (WORD)len);
				pAltasCurKartAttr += len;
			}
			Write32(pAltasCurKartAttr, 0); //SecondRefitCount
			Write16(pAltasCurKartAttr, 0); //Speed2Weight
			Write16(pAltasCurKartAttr, 0); //DriftVecWeight
			Write16(pAltasCurKartAttr, 0); //AdditionalZSpeedWeight
			Write16(pAltasCurKartAttr, 0); //AntiCollisionWeight
			Write16(pAltasCurKartAttr, 0); //LuckyValue
			Write16(pAltasCurKartAttr, 0); //RefitLuckyValueMaxWeight
			Write32(pAltasCurKartAttr, 0); //ShapeSuitID
			Write8(pAltasCurKartAttr, 0); //LegendSuitLevel
			Write32(pAltasCurKartAttr, 0); //LegendSuitLevelChoice
			Write32(pAltasCurKartAttr, 0); //ShapeLegendSuitID

			len = pAltasCurKartAttr - pItemInfoArray;
			Set16(pItemInfoArray, (WORD)len);
			pItemInfoArray += len;
		}
		{ //AltasKartStoneGrooveInfo
			BYTE* pAltasKartStoneGrooveInfo = pItemInfoArray;
			Write16(pAltasKartStoneGrooveInfo, 0); //len

			Write32(pAltasKartStoneGrooveInfo, 0); //KartID
			Write32(pAltasKartStoneGrooveInfo, 0); //StoneGrooveNum
			for (size_t i = 0; i < n; i++)
			{ //StoneGrooveInfo
				BYTE* pStoneGrooveInfo = pAltasKartStoneGrooveInfo;
				Write16(pStoneGrooveInfo, 0); //len

				Write32(pStoneGrooveInfo, 0); //StoneUseOccaType
				Write32(pStoneGrooveInfo, 0); //SkillStoneID

				len = pStoneGrooveInfo - pAltasKartStoneGrooveInfo;
				Set16(pAltasKartStoneGrooveInfo, (WORD)len);
				pAltasKartStoneGrooveInfo += len;
			}

			len = pAltasKartStoneGrooveInfo - pItemInfoArray;
			Set16(pItemInfoArray, (WORD)len);
			pItemInfoArray += len;
		}
		{ //AltasKartActiveLevelInfo
			BYTE* pAltasKartActiveLevelInfo = pItemInfoArray;
			Write16(pAltasKartActiveLevelInfo, 0); //len

			Write32(pAltasKartActiveLevelInfo, 0); //KartType
			Write32(pAltasKartActiveLevelInfo, 0); //ItemID
			Write32(pAltasKartActiveLevelInfo, 0); //ActiveLevel

			len = pAltasKartActiveLevelInfo - pItemInfoArray;
			Set16(pItemInfoArray, (WORD)len);
			pItemInfoArray += len;
		}

		len = pItemInfoArray - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasNext

	len = p - buf;
	SendToClient(Client, 13704, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestC2SGetKartAltasConfig(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT CfgVersion = Read32(p);

}

void ResponseC2SGetKartAltasConfig(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //CfgVersion
	Write8(p, 0); //Result
	Write16(p, 0); //KartAltasCfgNum
	for (size_t i = 0; i < n; i++)
	{ //KartAltasConfig
		BYTE* pKartAltasConfig = p;
		Write16(pKartAltasConfig, 0); //len

		Write32(pKartAltasConfig, 0); //ItemID
		WriteUn(pKartAltasConfig, 0); //KartAltasUrlLen
		Write32(pKartAltasConfig, 0); //KartJetNum

		len = pKartAltasConfig - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 13710, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2STakePartInCarnival(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseC2STakePartInCarnival(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //Result
	Write32(p, 0); //MapID
	Write32(p, 0); //TakeInNum
	Write32(p, 0); //BestScore
	WriteUn(p, 0); //us8TypeNum
	for (size_t i = 0; i < n; i++)
	{ //Carnival_info
		BYTE* pCarnival_info = p;
		Write16(pCarnival_info, 0); //len

		Write32(pCarnival_info, 0); //FinishTime
		Write32(pCarnival_info, 0); //Carnival_Status
		{ //TaskAwardInfo
			BYTE* pTaskAwardInfo = pCarnival_info;
			Write16(pTaskAwardInfo, 0); //len

			Write32(pTaskAwardInfo, 0); //AwardMoney
			Write32(pTaskAwardInfo, 0); //TotalMoney
			Write32(pTaskAwardInfo, 0); //AwardSuperMoney
			Write32(pTaskAwardInfo, 0); //TotalSuperMoney
			Write32(pTaskAwardInfo, 0); //AwardExp
			Write32(pTaskAwardInfo, 0); //TotalExp
			Write32(pTaskAwardInfo, 0); //AwardItemNum
			for (size_t i = 0; i < n; i++)
			{ //AwardItemInfo
				BYTE* pAwardItemInfo = pTaskAwardInfo;
				Write16(pAwardItemInfo, 0); //len

				Write32(pAwardItemInfo, 0); //ItemID
				Write32(pAwardItemInfo, 0); //ItemNum
				Write32(pAwardItemInfo, 0); //AvailPeriod
				Write8(pAwardItemInfo, 0); //Status
				WriteUn(pAwardItemInfo, 0); //ObtainTime
				Write32(pAwardItemInfo, 0); //OtherAttribute
				Write16(pAwardItemInfo, 0); //ItemType

				len = pAwardItemInfo - pTaskAwardInfo;
				Set16(pTaskAwardInfo, (WORD)len);
				pTaskAwardInfo += len;
			}
			Write32(pTaskAwardInfo, 0); //AwardCoupons
			Write32(pTaskAwardInfo, 0); //TotalCoupons
			Write32(pTaskAwardInfo, 0); //AwardLuckMoney
			Write32(pTaskAwardInfo, 0); //TotalLuckMoney
			Write32(pTaskAwardInfo, 0); //AwardTeamWorkExp
			Write32(pTaskAwardInfo, 0); //TotalTeamWorkExp
			Write32(pTaskAwardInfo, 0); //AwardWlCash
			Write32(pTaskAwardInfo, 0); //AwardWlCrystal
			Write32(pTaskAwardInfo, 0); //AwardWlDegree
			Write32(pTaskAwardInfo, 0); //ChumCircleActivity
			Write32(pTaskAwardInfo, 0); //GuildScore
			Write16(pTaskAwardInfo, 0); //AppellcationID
			Write16(pTaskAwardInfo, 0); //ScoreJingJi
			Write8(pTaskAwardInfo, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pTaskAwardInfo;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pTaskAwardInfo;
				Set16(pTaskAwardInfo, (WORD)len);
				pTaskAwardInfo += len;
			}
			Write32(pTaskAwardInfo, 0); //LiveExp
			Write32(pTaskAwardInfo, 0); //AwardSpeedCoin
			Write32(pTaskAwardInfo, 0); //TotalSpeedCoin

			len = pTaskAwardInfo - pCarnival_info;
			Set16(pCarnival_info, (WORD)len);
			pCarnival_info += len;
		}
		Write32(pCarnival_info, 0); //CarnivalTaskID

		len = pCarnival_info - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 13077, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifySMCCarnivalGameResult(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write8(p, 0); //IsSuccess
	Write32(p, 0); //TaskSetNum
	for (size_t i = 0; i < n; i++)
	{ //CarnivalGameResultInfo
		BYTE* pCarnivalGameResultInfo = p;
		Write16(pCarnivalGameResultInfo, 0); //len

		Write32(pCarnivalGameResultInfo, 0); //TaskID
		{ //TaskAward
			BYTE* pTaskAward = pCarnivalGameResultInfo;
			Write16(pTaskAward, 0); //len

			Write32(pTaskAward, 0); //AwardMoney
			Write32(pTaskAward, 0); //TotalMoney
			Write32(pTaskAward, 0); //AwardSuperMoney
			Write32(pTaskAward, 0); //TotalSuperMoney
			Write32(pTaskAward, 0); //AwardExp
			Write32(pTaskAward, 0); //TotalExp
			Write32(pTaskAward, 0); //AwardItemNum
			for (size_t i = 0; i < n; i++)
			{ //AwardItemInfo
				BYTE* pAwardItemInfo = pTaskAward;
				Write16(pAwardItemInfo, 0); //len

				Write32(pAwardItemInfo, 0); //ItemID
				Write32(pAwardItemInfo, 0); //ItemNum
				Write32(pAwardItemInfo, 0); //AvailPeriod
				Write8(pAwardItemInfo, 0); //Status
				WriteUn(pAwardItemInfo, 0); //ObtainTime
				Write32(pAwardItemInfo, 0); //OtherAttribute
				Write16(pAwardItemInfo, 0); //ItemType

				len = pAwardItemInfo - pTaskAward;
				Set16(pTaskAward, (WORD)len);
				pTaskAward += len;
			}
			Write32(pTaskAward, 0); //AwardCoupons
			Write32(pTaskAward, 0); //TotalCoupons
			Write32(pTaskAward, 0); //AwardLuckMoney
			Write32(pTaskAward, 0); //TotalLuckMoney
			Write32(pTaskAward, 0); //AwardTeamWorkExp
			Write32(pTaskAward, 0); //TotalTeamWorkExp
			Write32(pTaskAward, 0); //AwardWlCash
			Write32(pTaskAward, 0); //AwardWlCrystal
			Write32(pTaskAward, 0); //AwardWlDegree
			Write32(pTaskAward, 0); //ChumCircleActivity
			Write32(pTaskAward, 0); //GuildScore
			Write16(pTaskAward, 0); //AppellcationID
			Write16(pTaskAward, 0); //ScoreJingJi
			Write8(pTaskAward, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pTaskAward;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pTaskAward;
				Set16(pTaskAward, (WORD)len);
				pTaskAward += len;
			}
			Write32(pTaskAward, 0); //LiveExp
			Write32(pTaskAward, 0); //AwardSpeedCoin
			Write32(pTaskAward, 0); //TotalSpeedCoin

			len = pTaskAward - pCarnivalGameResultInfo;
			Set16(pCarnivalGameResultInfo, (WORD)len);
			pCarnivalGameResultInfo += len;
		}

		len = pCarnivalGameResultInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //FinishTime

	len = p - buf;
	SendToClient(Client, 13080, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestPointCfg(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT PointID = Read16(p);
	UCHAR Contex = Read8(p);
	USHORT GameType = Read16(p);

}

void ResponsePointCfg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //Num
	for (size_t i = 0; i < n; i++)
	{ //SynCliPointCfg
		BYTE* pSynCliPointCfg = p;
		Write16(pSynCliPointCfg, 0); //len

		Write16(pSynCliPointCfg, 0); //PointID
		Write8(pSynCliPointCfg, 0); //PointType
		Write8(pSynCliPointCfg, 0); //FileMd5Len
		Write16(pSynCliPointCfg, 0); //Len
		Write8(pSynCliPointCfg, 0); //FinSpecType
		Write32(pSynCliPointCfg, 0); //TimeLimit
		Write8(pSynCliPointCfg, 0); //RankLimit
		Write32(pSynCliPointCfg, 0); //SkillLimit
		Write32(pSynCliPointCfg, 0); //MaxStar
		Write32(pSynCliPointCfg, 0); //StarScoreLim[]
		Write16(pSynCliPointCfg, 0); //GameType
		Write16(pSynCliPointCfg, 0); //LogicType
		Write16(pSynCliPointCfg, 0); //ExtMapNum
		Write32(pSynCliPointCfg, 0); //ExtMapList[]
		Write8(pSynCliPointCfg, 0); //ScoreType
		Write16(pSynCliPointCfg, 0); //UnlockStars
		Write(pSynCliPointCfg, 0); //FinishLimit[]
		Write32(pSynCliPointCfg, 0); //TaskID
		Write16(pSynCliPointCfg, 0); //UsePropLv
		Write8(pSynCliPointCfg, 0); //ChallengeIdx
		Write8(pSynCliPointCfg, 0); //Boss
		Write32(pSynCliPointCfg, 0); //BoxID
		Write8(pSynCliPointCfg, 0); //UnlockType
		Write8(pSynCliPointCfg, 0); //UnlockValue
		Write16(pSynCliPointCfg, 0); //FlyMapPercent
		Write16(pSynCliPointCfg, 0); //BigPointNum
		Write8(pSynCliPointCfg, 0); //BranchPoint
		Write8(pSynCliPointCfg, 0); //HasGivenDress
		for (size_t i = 0; i < n; i++)
		{ //NpcGivenDressInfo
			BYTE* pNpcGivenDressInfo = pSynCliPointCfg;
			Write16(pNpcGivenDressInfo, 0); //len

			Write32(pNpcGivenDressInfo, 0); //RoleID
			Write32(pNpcGivenDressInfo, 0); //HairID
			Write32(pNpcGivenDressInfo, 0); //FaceID
			Write32(pNpcGivenDressInfo, 0); //GlassID
			Write32(pNpcGivenDressInfo, 0); //CoatID
			Write32(pNpcGivenDressInfo, 0); //GloveID
			Write32(pNpcGivenDressInfo, 0); //TrousersID
			Write32(pNpcGivenDressInfo, 0); //PersonarID
			Write32(pNpcGivenDressInfo, 0); //TattooID
			Write32(pNpcGivenDressInfo, 0); //WingID
			Write32(pNpcGivenDressInfo, 0); //DecoratorID
			Write32(pNpcGivenDressInfo, 0); //KartID
			Write32(pNpcGivenDressInfo, 0); //ColorID
			Write32(pNpcGivenDressInfo, 0); //TrackID
			Write32(pNpcGivenDressInfo, 0); //EffectID
			Write32(pNpcGivenDressInfo, 0); //BrandID
			Write32(pNpcGivenDressInfo, 0); //TailID

			len = pNpcGivenDressInfo - pSynCliPointCfg;
			Set16(pSynCliPointCfg, (WORD)len);
			pSynCliPointCfg += len;
		}
		Write8(pSynCliPointCfg, 0); //AvailRoleNum
		Write8(pSynCliPointCfg, 0); //ChapterAwardNum
		for (size_t i = 0; i < n; i++)
		{ //ChapterAward
			BYTE* pChapterAward = pSynCliPointCfg;
			Write16(pChapterAward, 0); //len

			Write32(pChapterAward, 0); //AwardMoney
			Write32(pChapterAward, 0); //TotalMoney
			Write32(pChapterAward, 0); //AwardSuperMoney
			Write32(pChapterAward, 0); //TotalSuperMoney
			Write32(pChapterAward, 0); //AwardExp
			Write32(pChapterAward, 0); //TotalExp
			Write32(pChapterAward, 0); //AwardItemNum
			for (size_t i = 0; i < n; i++)
			{ //AwardItemInfo
				BYTE* pAwardItemInfo = pChapterAward;
				Write16(pAwardItemInfo, 0); //len

				Write32(pAwardItemInfo, 0); //ItemID
				Write32(pAwardItemInfo, 0); //ItemNum
				Write32(pAwardItemInfo, 0); //AvailPeriod
				Write8(pAwardItemInfo, 0); //Status
				WriteUn(pAwardItemInfo, 0); //ObtainTime
				Write32(pAwardItemInfo, 0); //OtherAttribute
				Write16(pAwardItemInfo, 0); //ItemType

				len = pAwardItemInfo - pChapterAward;
				Set16(pChapterAward, (WORD)len);
				pChapterAward += len;
			}
			Write32(pChapterAward, 0); //AwardCoupons
			Write32(pChapterAward, 0); //TotalCoupons
			Write32(pChapterAward, 0); //AwardLuckMoney
			Write32(pChapterAward, 0); //TotalLuckMoney
			Write32(pChapterAward, 0); //AwardTeamWorkExp
			Write32(pChapterAward, 0); //TotalTeamWorkExp
			Write32(pChapterAward, 0); //AwardWlCash
			Write32(pChapterAward, 0); //AwardWlCrystal
			Write32(pChapterAward, 0); //AwardWlDegree
			Write32(pChapterAward, 0); //ChumCircleActivity
			Write32(pChapterAward, 0); //GuildScore
			Write16(pChapterAward, 0); //AppellcationID
			Write16(pChapterAward, 0); //ScoreJingJi
			Write8(pChapterAward, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pChapterAward;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pChapterAward;
				Set16(pChapterAward, (WORD)len);
				pChapterAward += len;
			}
			Write32(pChapterAward, 0); //LiveExp
			Write32(pChapterAward, 0); //AwardSpeedCoin
			Write32(pChapterAward, 0); //TotalSpeedCoin

			len = pChapterAward - pSynCliPointCfg;
			Set16(pSynCliPointCfg, (WORD)len);
			pSynCliPointCfg += len;
		}

		len = pSynCliPointCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //Contex
	Write16(p, 0); //GameType
	Write32(p, 0); //StarHistory
	Write32(p, 0); //StarCur
	Write8(p, 0); //HasMoreInfo
	Write16(p, 0); //DailyReSelectPointTimes
	Write32(p, 0); //FinalBoxID
	Write8(p, 0); //FinalBoxFragmentNum
	Write16(p, 0); //CarNum
	for (size_t i = 0; i < n; i++)
	{ //CarInfo
		BYTE* pCarInfo = p;
		Write16(pCarInfo, 0); //len

		Write32(pCarInfo, 0); //Index
		Write32(pCarInfo, 0); //KartID
		Write8(pCarInfo, 0); //NumPhys
		for (size_t i = 0; i < n; i++)
		{ //PointChallengePhys
			BYTE* pPointChallengePhys = pCarInfo;
			Write16(pPointChallengePhys, 0); //len

			Write8(pPointChallengePhys, 0); //Idx
			Write16(pPointChallengePhys, 0); //Value

			len = pPointChallengePhys - pCarInfo;
			Set16(pCarInfo, (WORD)len);
			pCarInfo += len;
		}
		Write8(pCarInfo, 0); //NumStone
		for (size_t i = 0; i < n; i++)
		{ //StoneInfo
			BYTE* pStoneInfo = pCarInfo;
			Write16(pStoneInfo, 0); //len

			Write32(pStoneInfo, 0); //StoneUseOccaType
			Write32(pStoneInfo, 0); //SkillStoneID

			len = pStoneInfo - pCarInfo;
			Set16(pCarInfo, (WORD)len);
			pCarInfo += len;
		}

		len = pCarInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasOtherCfg
	for (size_t i = 0; i < n; i++)
	{ //OtherCfg
		BYTE* pOtherCfg = p;
		Write16(pOtherCfg, 0); //len

		Write32(pOtherCfg, 0); //SlotNum
		for (size_t i = 0; i < n; i++)
		{ //SlotCfg
			BYTE* pSlotCfg = pOtherCfg;
			Write16(pSlotCfg, 0); //len

			Write32(pSlotCfg, 0); //SlotIndex
			Write16(pSlotCfg, 0); //SkillType
			Write16(pSlotCfg, 0); //CarIndex
			Write16(pSlotCfg, 0); //NextSlotNum
			Write(pSlotCfg, 0); //NextSlot[]
			Write16(pSlotCfg, 0); //SkillNum
			for (size_t i = 0; i < n; i++)
			{ //SkillCfg
				BYTE* pSkillCfg = pSlotCfg;
				Write16(pSkillCfg, 0); //len

				Write32(pSkillCfg, 0); //SkillType
				Write32(pSkillCfg, 0); //ID
				Write32(pSkillCfg, 0); //Value

				len = pSkillCfg - pSlotCfg;
				Set16(pSlotCfg, (WORD)len);
				pSlotCfg += len;
			}

			len = pSlotCfg - pOtherCfg;
			Set16(pOtherCfg, (WORD)len);
			pOtherCfg += len;
		}

		len = pOtherCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //InOpenTime

	len = p - buf;
	SendToClient(Client, 13711, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void ResponsePointCfgMoreInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //Num
	for (size_t i = 0; i < n; i++)
	{ //SynCliPointCfg
		BYTE* pSynCliPointCfg = p;
		Write16(pSynCliPointCfg, 0); //len

		Write16(pSynCliPointCfg, 0); //PointID
		Write8(pSynCliPointCfg, 0); //PointType
		Write8(pSynCliPointCfg, 0); //FileMd5Len
		Write16(pSynCliPointCfg, 0); //Len
		Write8(pSynCliPointCfg, 0); //FinSpecType
		Write32(pSynCliPointCfg, 0); //TimeLimit
		Write8(pSynCliPointCfg, 0); //RankLimit
		Write32(pSynCliPointCfg, 0); //SkillLimit
		Write32(pSynCliPointCfg, 0); //MaxStar
		Write32(pSynCliPointCfg, 0); //StarScoreLim[]
		Write16(pSynCliPointCfg, 0); //GameType
		Write16(pSynCliPointCfg, 0); //LogicType
		Write16(pSynCliPointCfg, 0); //ExtMapNum
		Write32(pSynCliPointCfg, 0); //ExtMapList[]
		Write8(pSynCliPointCfg, 0); //ScoreType
		Write16(pSynCliPointCfg, 0); //UnlockStars
		Write(pSynCliPointCfg, 0); //FinishLimit[]
		Write32(pSynCliPointCfg, 0); //TaskID
		Write16(pSynCliPointCfg, 0); //UsePropLv
		Write8(pSynCliPointCfg, 0); //ChallengeIdx
		Write8(pSynCliPointCfg, 0); //Boss
		Write32(pSynCliPointCfg, 0); //BoxID
		Write8(pSynCliPointCfg, 0); //UnlockType
		Write8(pSynCliPointCfg, 0); //UnlockValue
		Write16(pSynCliPointCfg, 0); //FlyMapPercent
		Write16(pSynCliPointCfg, 0); //BigPointNum
		Write8(pSynCliPointCfg, 0); //BranchPoint
		Write8(pSynCliPointCfg, 0); //HasGivenDress
		for (size_t i = 0; i < n; i++)
		{ //NpcGivenDressInfo
			BYTE* pNpcGivenDressInfo = pSynCliPointCfg;
			Write16(pNpcGivenDressInfo, 0); //len

			Write32(pNpcGivenDressInfo, 0); //RoleID
			Write32(pNpcGivenDressInfo, 0); //HairID
			Write32(pNpcGivenDressInfo, 0); //FaceID
			Write32(pNpcGivenDressInfo, 0); //GlassID
			Write32(pNpcGivenDressInfo, 0); //CoatID
			Write32(pNpcGivenDressInfo, 0); //GloveID
			Write32(pNpcGivenDressInfo, 0); //TrousersID
			Write32(pNpcGivenDressInfo, 0); //PersonarID
			Write32(pNpcGivenDressInfo, 0); //TattooID
			Write32(pNpcGivenDressInfo, 0); //WingID
			Write32(pNpcGivenDressInfo, 0); //DecoratorID
			Write32(pNpcGivenDressInfo, 0); //KartID
			Write32(pNpcGivenDressInfo, 0); //ColorID
			Write32(pNpcGivenDressInfo, 0); //TrackID
			Write32(pNpcGivenDressInfo, 0); //EffectID
			Write32(pNpcGivenDressInfo, 0); //BrandID
			Write32(pNpcGivenDressInfo, 0); //TailID

			len = pNpcGivenDressInfo - pSynCliPointCfg;
			Set16(pSynCliPointCfg, (WORD)len);
			pSynCliPointCfg += len;
		}
		Write8(pSynCliPointCfg, 0); //AvailRoleNum
		Write8(pSynCliPointCfg, 0); //ChapterAwardNum
		for (size_t i = 0; i < n; i++)
		{ //ChapterAward
			BYTE* pChapterAward = pSynCliPointCfg;
			Write16(pChapterAward, 0); //len

			Write32(pChapterAward, 0); //AwardMoney
			Write32(pChapterAward, 0); //TotalMoney
			Write32(pChapterAward, 0); //AwardSuperMoney
			Write32(pChapterAward, 0); //TotalSuperMoney
			Write32(pChapterAward, 0); //AwardExp
			Write32(pChapterAward, 0); //TotalExp
			Write32(pChapterAward, 0); //AwardItemNum
			for (size_t i = 0; i < n; i++)
			{ //AwardItemInfo
				BYTE* pAwardItemInfo = pChapterAward;
				Write16(pAwardItemInfo, 0); //len

				Write32(pAwardItemInfo, 0); //ItemID
				Write32(pAwardItemInfo, 0); //ItemNum
				Write32(pAwardItemInfo, 0); //AvailPeriod
				Write8(pAwardItemInfo, 0); //Status
				WriteUn(pAwardItemInfo, 0); //ObtainTime
				Write32(pAwardItemInfo, 0); //OtherAttribute
				Write16(pAwardItemInfo, 0); //ItemType

				len = pAwardItemInfo - pChapterAward;
				Set16(pChapterAward, (WORD)len);
				pChapterAward += len;
			}
			Write32(pChapterAward, 0); //AwardCoupons
			Write32(pChapterAward, 0); //TotalCoupons
			Write32(pChapterAward, 0); //AwardLuckMoney
			Write32(pChapterAward, 0); //TotalLuckMoney
			Write32(pChapterAward, 0); //AwardTeamWorkExp
			Write32(pChapterAward, 0); //TotalTeamWorkExp
			Write32(pChapterAward, 0); //AwardWlCash
			Write32(pChapterAward, 0); //AwardWlCrystal
			Write32(pChapterAward, 0); //AwardWlDegree
			Write32(pChapterAward, 0); //ChumCircleActivity
			Write32(pChapterAward, 0); //GuildScore
			Write16(pChapterAward, 0); //AppellcationID
			Write16(pChapterAward, 0); //ScoreJingJi
			Write8(pChapterAward, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pChapterAward;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pChapterAward;
				Set16(pChapterAward, (WORD)len);
				pChapterAward += len;
			}
			Write32(pChapterAward, 0); //LiveExp
			Write32(pChapterAward, 0); //AwardSpeedCoin
			Write32(pChapterAward, 0); //TotalSpeedCoin

			len = pChapterAward - pSynCliPointCfg;
			Set16(pSynCliPointCfg, (WORD)len);
			pSynCliPointCfg += len;
		}

		len = pSynCliPointCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //GameType
	Write8(p, 0); //HasNext

	len = p - buf;
	SendToClient(Client, 13763, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestPointChallengeInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT GameType = Read16(p);

}

void ResponsePointChallengeInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //Num
	for (size_t i = 0; i < n; i++)
	{ //PointInfo
		BYTE* pPointInfo = p;
		Write16(pPointInfo, 0); //len

		Write16(pPointInfo, 0); //PointID
		Write32(pPointInfo, 0); //MaxFinishStar
		Write32(pPointInfo, 0); //MaxScore
		Write8(pPointInfo, 0); //Unlock
		Write16(pPointInfo, 0); //GeneralID
		Write16(pPointInfo, 0); //UuidLen
		Write8(pPointInfo, 0); //FragmentGetFlag[]
		Write8(pPointInfo, 0); //AwardStatus

		len = pPointInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //GameType
	Write16(p, 0); //DailyRemainReSelectPointTimes
	Write8(p, 0); //FragmentNum
	Write8(p, 0); //FinalAwardStatus
	Write8(p, 0); //HasOtherInfo
	for (size_t i = 0; i < n; i++)
	{ //OtherInfo
		BYTE* pOtherInfo = p;
		Write16(pOtherInfo, 0); //len

		Write16(pOtherInfo, 0); //CarIndex
		Write16(pOtherInfo, 0); //SkillNum
		for (size_t i = 0; i < n; i++)
		{ //SkillInfo
			BYTE* pSkillInfo = pOtherInfo;
			Write16(pSkillInfo, 0); //len

			Write32(pSkillInfo, 0); //SkillType
			Write32(pSkillInfo, 0); //SkillLevel
			Write32(pSkillInfo, 0); //SkillNum

			len = pSkillInfo - pOtherInfo;
			Set16(pOtherInfo, (WORD)len);
			pOtherInfo += len;
		}
		Write32(pOtherInfo, 0); //SlotNum
		for (size_t i = 0; i < n; i++)
		{ //SlotInfo
			BYTE* pSlotInfo = pOtherInfo;
			Write16(pSlotInfo, 0); //len

			Write32(pSlotInfo, 0); //SlotIndex
			Write16(pSlotInfo, 0); //SkillType

			len = pSlotInfo - pOtherInfo;
			Set16(pOtherInfo, (WORD)len);
			pOtherInfo += len;
		}

		len = pOtherInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 13712, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestPointChallengeChooseCar(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT GameType = Read16(p);
	USHORT CarIndex = Read16(p);

}

void ResponsePointChallengeChooseCar(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write16(p, 0); //GameType
	Write16(p, 0); //CarIndex

	len = p - buf;
	SendToClient(Client, 28232, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestStartPointChallenge(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT PointID = Read16(p);
	USHORT GameType = Read16(p);
	USHORT SkillType = Read16(p);

}

void ResponseStartPointChallenge(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //PointID
	Write16(p, 0); //GameType

	len = p - buf;
	SendToClient(Client, 13713, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyPointChallengeResult(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //Result
	Write8(p, 0); //FailReason
	WriteUn(p, 0); //UseTime
	Write32(p, 0); //IncScore
	Write32(p, 0); //TotalScore
	Write32(p, 0); //FinStar
	Write8(p, 0); //AwardFlag
	Write8(p, 0); //HasAward
	for (size_t i = 0; i < n; i++)
	{ //Award
		BYTE* pAward = p;
		Write16(pAward, 0); //len

		Write32(pAward, 0); //AwardMoney
		Write32(pAward, 0); //TotalMoney
		Write32(pAward, 0); //AwardSuperMoney
		Write32(pAward, 0); //TotalSuperMoney
		Write32(pAward, 0); //AwardExp
		Write32(pAward, 0); //TotalExp
		Write32(pAward, 0); //AwardItemNum
		for (size_t i = 0; i < n; i++)
		{ //AwardItemInfo
			BYTE* pAwardItemInfo = pAward;
			Write16(pAwardItemInfo, 0); //len

			Write32(pAwardItemInfo, 0); //ItemID
			Write32(pAwardItemInfo, 0); //ItemNum
			Write32(pAwardItemInfo, 0); //AvailPeriod
			Write8(pAwardItemInfo, 0); //Status
			WriteUn(pAwardItemInfo, 0); //ObtainTime
			Write32(pAwardItemInfo, 0); //OtherAttribute
			Write16(pAwardItemInfo, 0); //ItemType

			len = pAwardItemInfo - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write32(pAward, 0); //AwardCoupons
		Write32(pAward, 0); //TotalCoupons
		Write32(pAward, 0); //AwardLuckMoney
		Write32(pAward, 0); //TotalLuckMoney
		Write32(pAward, 0); //AwardTeamWorkExp
		Write32(pAward, 0); //TotalTeamWorkExp
		Write32(pAward, 0); //AwardWlCash
		Write32(pAward, 0); //AwardWlCrystal
		Write32(pAward, 0); //AwardWlDegree
		Write32(pAward, 0); //ChumCircleActivity
		Write32(pAward, 0); //GuildScore
		Write16(pAward, 0); //AppellcationID
		Write16(pAward, 0); //ScoreJingJi
		Write8(pAward, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAward;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write32(pAward, 0); //LiveExp
		Write32(pAward, 0); //AwardSpeedCoin
		Write32(pAward, 0); //TotalSpeedCoin

		len = pAward - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //PointID
	Write16(p, 0); //GameType
	Write16(p, 0); //FinishResultLen
	Write8(p, 0); //LastStar
	Write8(p, 0); //FragmentGetFlag[]
	Write8(p, 0); //UploadFile
	Write16(p, 0); //SkillNum
	for (size_t i = 0; i < n; i++)
	{ //SkillCfg
		BYTE* pSkillCfg = p;
		Write16(pSkillCfg, 0); //len

		Write32(pSkillCfg, 0); //SkillType
		Write32(pSkillCfg, 0); //ID
		Write32(pSkillCfg, 0); //Value

		len = pSkillCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasQsLabEndGameExtData
	for (size_t i = 0; i < n; i++)
	{ //QsLabEndGameExtData
		BYTE* pQsLabEndGameExtData = p;
		Write16(pQsLabEndGameExtData, 0); //len

		Write8(pQsLabEndGameExtData, 0); //HasDropBuffBox
		Write16(pQsLabEndGameExtData, 0); //AddStarNum
		Write16(pQsLabEndGameExtData, 0); //ExtraStarNum
		Write16(pQsLabEndGameExtData, 0); //Point
		Write16(pQsLabEndGameExtData, 0); //BossID
		Write16(pQsLabEndGameExtData, 0); //GridId
		Write8(pQsLabEndGameExtData, 0); //FirstTime

		len = pQsLabEndGameExtData - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 13714, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestQuitPointChallenge(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void RequestSelectPoint(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT GameType = Read16(p);
	USHORT BigPointNum = Read16(p);
	USHORT PointNum = Read16(p);
	USHORT[] PointIDs[] = Read16(p);
	USHORT SpeedMemoryPointNum = Read16(p);
	USHORT[] SpeedMemoryPointIDs[] = Read16(p);

}

void ResponseSelectPoint(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //GameType
	Write16(p, 0); //BigPointNum
	Write16(p, 0); //Num
	for (size_t i = 0; i < n; i++)
	{ //PointInfo
		BYTE* pPointInfo = p;
		Write16(pPointInfo, 0); //len

		Write16(pPointInfo, 0); //PointID
		Write32(pPointInfo, 0); //MaxFinishStar
		Write32(pPointInfo, 0); //MaxScore
		Write8(pPointInfo, 0); //Unlock
		Write16(pPointInfo, 0); //GeneralID
		Write16(pPointInfo, 0); //UuidLen
		Write8(pPointInfo, 0); //FragmentGetFlag[]
		Write8(pPointInfo, 0); //AwardStatus

		len = pPointInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 13764, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestReSelectOnePoint(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT GameType = Read16(p);
	USHORT BigPointNum = Read16(p);
	USHORT SrcPointID = Read16(p);
	USHORT DstPointID = Read16(p);

}

void ResponseReSelectOnePoint(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //GameType
	Write16(p, 0); //BigPointNum
	Write16(p, 0); //SrcPointID
	Write16(p, 0); //DstPointID
	Write16(p, 0); //DailyRemainReSelectPointTimes
	Write16(p, 0); //Num
	for (size_t i = 0; i < n; i++)
	{ //PointInfo
		BYTE* pPointInfo = p;
		Write16(pPointInfo, 0); //len

		Write16(pPointInfo, 0); //PointID
		Write32(pPointInfo, 0); //MaxFinishStar
		Write32(pPointInfo, 0); //MaxScore
		Write8(pPointInfo, 0); //Unlock
		Write16(pPointInfo, 0); //GeneralID
		Write16(pPointInfo, 0); //UuidLen
		Write8(pPointInfo, 0); //FragmentGetFlag[]
		Write8(pPointInfo, 0); //AwardStatus

		len = pPointInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 13765, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetOneFragment(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT GameType = Read16(p);
	USHORT PointID = Read16(p);
	USHORT Idx = Read16(p);
	{ //Position
		BYTE* pPosition = p;
		len = Read16(pPosition);

		UINT Idx = Read32(pPosition);
		int[] Postion[] = Read32(pPosition);

		p += len;
	}

}

void ResponseGetOneFragment(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //GameType
	Write16(p, 0); //PointID
	Write16(p, 0); //Idx

	len = p - buf;
	SendToClient(Client, 13766, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestReportRoomChat(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	Un DstUin = ReadUn(p);
	char[] DstNickName[] = ReadString(p);
	short ContentLength = Read16(p);

}

void NotifyFirstRechargeCfg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write8(p, 0); //CanGainAward
	{ //FirstExchangeAwardInfo
		BYTE* pFirstExchangeAwardInfo = p;
		Write16(pFirstExchangeAwardInfo, 0); //len

		Write32(pFirstExchangeAwardInfo, 0); //Money
		Write32(pFirstExchangeAwardInfo, 0); //SuperMoney
		Write32(pFirstExchangeAwardInfo, 0); //Experience
		Write16(pFirstExchangeAwardInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pFirstExchangeAwardInfo;
			Write16(pItemInfo, 0); //len

			Write16(pItemInfo, 0); //GenderItemNum
			Write32(pItemInfo, 0); //ItemID[]
			Write16(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write16(pItemInfo, 0); //BroadcastType
			Write16(pItemInfo, 0); //BroadcastFlag
			Write8(pItemInfo, 0); //ShowPriority
			Write8(pItemInfo, 0); //ItemType
			Write8(pItemInfo, 0); //IgnoreItem
			Write32(pItemInfo, 0); //LimitPara
			Write8(pItemInfo, 0); //SpecialAwardCtrlType
			Write8(pItemInfo, 0); //AwardCtrlType

			len = pItemInfo - pFirstExchangeAwardInfo;
			Set16(pFirstExchangeAwardInfo, (WORD)len);
			pFirstExchangeAwardInfo += len;
		}

		len = pFirstExchangeAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 13722, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestFirstRechargeAarwd(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseFirstRechargeAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	WriteUn(p, 0); //us16ResultID

	len = p - buf;
	SendToClient(Client, 13721, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyClientUpdateLoverVipInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	{ //LoverVipBaseInfo
		BYTE* pLoverVipBaseInfo = p;
		Write16(pLoverVipBaseInfo, 0); //len

		Write8(pLoverVipBaseInfo, 0); //LoverVipLevel
		Write32(pLoverVipBaseInfo, 0); //LoverVipPoint
		Write8(pLoverVipBaseInfo, 0); //GrowRate

		len = pLoverVipBaseInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //LoverVipOtherInfo
		BYTE* pLoverVipOtherInfo = p;
		Write16(pLoverVipOtherInfo, 0); //len

		Write32(pLoverVipOtherInfo, 0); //LoverVipLeftDays
		Write8(pLoverVipOtherInfo, 0); //CanReceiveGift
		Write8(pLoverVipOtherInfo, 0); //ShowExpireTips

		len = pLoverVipOtherInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 13800, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyClientLoverVipExpireInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //LoverUin
	Write32(p, 0); //LoverVipLeftDays

	len = p - buf;
	SendToClient(Client, 13801, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestReceiveLoverVipGift(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseReceiveLoverVipGift(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	{ //GiftAward
		BYTE* pGiftAward = p;
		Write16(pGiftAward, 0); //len

		Write32(pGiftAward, 0); //Exp
		Write32(pGiftAward, 0); //Money
		Write32(pGiftAward, 0); //SuperMoney
		Write16(pGiftAward, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pGiftAward;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pGiftAward;
			Set16(pGiftAward, (WORD)len);
			pGiftAward += len;
		}
		Write32(pGiftAward, 0); //Coupons
		Write32(pGiftAward, 0); //GuildPoint
		Write32(pGiftAward, 0); //LuckMoney
		Write8(pGiftAward, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pGiftAward;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pGiftAward;
			Set16(pGiftAward, (WORD)len);
			pGiftAward += len;
		}
		Write32(pGiftAward, 0); //SpeedCoin

		len = pGiftAward - p;
		Set16(p, (WORD)len);
		p += len;
	}
	for (size_t i = 0; i < n; i++)
	{ //OtherAwardList
		BYTE* pOtherAwardList = p;
		Write16(pOtherAwardList, 0); //len

		Write32(pOtherAwardList, 0); //Exp
		Write32(pOtherAwardList, 0); //Money
		Write32(pOtherAwardList, 0); //SuperMoney
		Write16(pOtherAwardList, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pOtherAwardList;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pOtherAwardList;
			Set16(pOtherAwardList, (WORD)len);
			pOtherAwardList += len;
		}
		Write32(pOtherAwardList, 0); //Coupons
		Write32(pOtherAwardList, 0); //GuildPoint
		Write32(pOtherAwardList, 0); //LuckMoney
		Write8(pOtherAwardList, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pOtherAwardList;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pOtherAwardList;
			Set16(pOtherAwardList, (WORD)len);
			pOtherAwardList += len;
		}
		Write32(pOtherAwardList, 0); //SpeedCoin

		len = pOtherAwardList - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 13802, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestRefreshLoverTarotAward(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseRefreshLoverTarotAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	for (size_t i = 0; i < n; i++)
	{ //AwardList
		BYTE* pAwardList = p;
		Write16(pAwardList, 0); //len

		Write32(pAwardList, 0); //Exp
		Write32(pAwardList, 0); //Money
		Write32(pAwardList, 0); //SuperMoney
		Write16(pAwardList, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAwardList;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAwardList;
			Set16(pAwardList, (WORD)len);
			pAwardList += len;
		}
		Write32(pAwardList, 0); //Coupons
		Write32(pAwardList, 0); //GuildPoint
		Write32(pAwardList, 0); //LuckMoney
		Write8(pAwardList, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAwardList;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAwardList;
			Set16(pAwardList, (WORD)len);
			pAwardList += len;
		}
		Write32(pAwardList, 0); //SpeedCoin

		len = pAwardList - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 13803, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetLoverTarotAward(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR Index = Read8(p);

}

void ResponseGetLoverTarotAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	{ //Award
		BYTE* pAward = p;
		Write16(pAward, 0); //len

		Write32(pAward, 0); //Exp
		Write32(pAward, 0); //Money
		Write32(pAward, 0); //SuperMoney
		Write16(pAward, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAward;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write32(pAward, 0); //Coupons
		Write32(pAward, 0); //GuildPoint
		Write32(pAward, 0); //LuckMoney
		Write8(pAward, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAward;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write32(pAward, 0); //SpeedCoin

		len = pAward - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //ReasonLen
	Write8(p, 0); //CurLeftNum
	Write8(p, 0); //Index

	len = p - buf;
	SendToClient(Client, 13804, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetLoverTarotBroadcast(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetLoverTarotBroadcast(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //BCNum
	for (size_t i = 0; i < n; i++)
	{ //BCList
		BYTE* pBCList = p;
		Write16(pBCList, 0); //len

		Write16(pBCList, 0); //ContentLen

		len = pBCList - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 13805, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetControlItemInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un uin = ReadUn(p);
	Un time = ReadUn(p);

}

void ResponseGetControlItemInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //resultId
	WriteUn(p, 0); //awardNum
	for (size_t i = 0; i < n; i++)
	{ //awardInfo
		BYTE* pawardInfo = p;
		Write16(pawardInfo, 0); //len

		Write32(pawardInfo, 0); //Type
		Write32(pawardInfo, 0); //SpecialFlag
		Write16(pawardInfo, 0); //ControlledItemNum
		for (size_t i = 0; i < n; i++)
		{ //ControlledItemInfo
			BYTE* pControlledItemInfo = pawardInfo;
			Write16(pControlledItemInfo, 0); //len

			Write32(pControlledItemInfo, 0); //MaxUseNum
			Write32(pControlledItemInfo, 0); //CurrUsedNum
			Write32(pControlledItemInfo, 0); //ItemID

			len = pControlledItemInfo - pawardInfo;
			Set16(pawardInfo, (WORD)len);
			pawardInfo += len;
		}

		len = pawardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestAddItem(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un uin = ReadUn(p);
	Un time = ReadUn(p);
	{ //item
		BYTE* pitem = p;
		len = Read16(pitem);

		int ItemID = Read32(pitem);
		int ItemNum = Read32(pitem);
		int AvailPeriod = Read32(pitem);
		bool Status = Read8(pitem);
		Un ObtainTime = ReadUn(pitem);
		int OtherAttribute = Read32(pitem);
		USHORT ItemType = Read16(pitem);

		p += len;
	}

}

void ResponseAddItem(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //resultId

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetNextGuessFigureQuestion(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un uin = ReadUn(p);
	Un time = ReadUn(p);

}

void ResponseGetNextGuessFigureQuestion(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //resultId
	WriteUn(p, 0); //hasQuestion
	WriteUn(p, 0); //todayAnswerRightNum
	WriteUn(p, 0); //todayLeftQuesionNum
	WriteUn(p, 0); //totalAnswerRightNum

	len = p - buf;
	SendToClient(Client, 20011, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestAnswerGuessFigureQuestion(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un uin = ReadUn(p);
	Un time = ReadUn(p);
	Un answerLen = ReadUn(p);

}

void ResponseAnswerGuessFigureQuestion(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //resultId
	WriteUn(p, 0); //addExperience

	len = p - buf;
	SendToClient(Client, 20012, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetHelpForGuessFigureQuestion(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un uin = ReadUn(p);
	Un time = ReadUn(p);

}

void ResponseGetHelpForGuessFigureQuestion(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //resultId

	len = p - buf;
	SendToClient(Client, 20013, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyGetHelpForGuessFigureQuestion(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //uin
	WriteUn(p, 0); //NickName[]

	len = p - buf;
	SendToClient(Client, 20014, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyShareGuessFigureQuestionAnswer(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //uin
	WriteUn(p, 0); //continueRightNum

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void AckShareGuessFigureQuestionAnswer(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un uin = ReadUn(p);
	Un time = ReadUn(p);

}

void NotifyS2CGodFortuneStatus(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //8GodFortuneStatus
	Write16(p, 0); //GodFortuneNpcId
	WriteUn(p, 0); //8NpcGodFortuneType

	len = p - buf;
	SendToClient(Client, 20025, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyS2CGodFortunePackage(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //FortunePacNum
	for (size_t i = 0; i < n; i++)
	{ //GodFortunePacInfo
		BYTE* pGodFortunePacInfo = p;
		Write16(pGodFortunePacInfo, 0); //len

		WriteUn(pGodFortunePacInfo, 0); //FortunePacIndexID
		WriteUn(pGodFortunePacInfo, 0); //FortunePacBoxId

		len = pGodFortunePacInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 20026, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestC2SPickUpFortunePac(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT FortunePackIndexID = Read32(p);

}

void ResponseC2SPickUpFortunePac(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //Result
	{ //GodFortunePac
		BYTE* pGodFortunePac = p;
		Write16(pGodFortunePac, 0); //len

		WriteUn(pGodFortunePac, 0); //FortunePacIndexID
		WriteUn(pGodFortunePac, 0); //FortunePacBoxId

		len = pGodFortunePac - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 20027, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyS2CPackageBeenPickUp(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //PickUin
	Write32(p, 0); //FortunePackIndexID

	len = p - buf;
	SendToClient(Client, 20028, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyS2CEnterGodFortuneActivity(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //GodFortuneNpcId
	WriteUn(p, 0); //8NpcGodFortuneType
	Write16(p, 0); //FortunePacNum
	for (size_t i = 0; i < n; i++)
	{ //GodFortunePacInfo
		BYTE* pGodFortunePacInfo = p;
		Write16(pGodFortunePacInfo, 0); //len

		WriteUn(pGodFortunePacInfo, 0); //FortunePacIndexID
		WriteUn(pGodFortunePacInfo, 0); //FortunePacBoxId

		len = pGodFortunePacInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 20029, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyClientTips(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //tipsLen
	Write8(p, 0); //TipsType

	len = p - buf;
	SendToClient(Client, 20030, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestClientReportDataMinintLog(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un uin = ReadUn(p);
	Un time = ReadUn(p);
	Un logContentLen = ReadUn(p);

}

void RequestGetBattleModeCarSkillInfoList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	int CarID = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetBattleModeCarSkillInfoList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write32(p, 0); //CarID
	{ //BattleModeSkillInfoList
		BYTE* pBattleModeSkillInfoList = p;
		Write16(pBattleModeSkillInfoList, 0); //len

		Write8(pBattleModeSkillInfoList, 0); //SkillNum
		for (size_t i = 0; i < n; i++)
		{ //SkillInfo
			BYTE* pSkillInfo = pBattleModeSkillInfoList;
			Write16(pSkillInfo, 0); //len

			Write16(pSkillInfo, 0); //SkillId
			Write8(pSkillInfo, 0); //SkillLevel

			len = pSkillInfo - pBattleModeSkillInfoList;
			Set16(pBattleModeSkillInfoList, (WORD)len);
			pBattleModeSkillInfoList += len;
		}

		len = pBattleModeSkillInfoList - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 10929, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetBattleModeRoleSkillInfoList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetBattleModeRoleSkillInfoList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	{ //BattleModeSkillInfoList
		BYTE* pBattleModeSkillInfoList = p;
		Write16(pBattleModeSkillInfoList, 0); //len

		Write8(pBattleModeSkillInfoList, 0); //SkillNum
		for (size_t i = 0; i < n; i++)
		{ //SkillInfo
			BYTE* pSkillInfo = pBattleModeSkillInfoList;
			Write16(pSkillInfo, 0); //len

			Write16(pSkillInfo, 0); //SkillId
			Write8(pSkillInfo, 0); //SkillLevel

			len = pSkillInfo - pBattleModeSkillInfoList;
			Set16(pBattleModeSkillInfoList, (WORD)len);
			pBattleModeSkillInfoList += len;
		}

		len = pBattleModeSkillInfoList - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 10930, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestSkillStrengthenBattleModeCar(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	int CarID = Read32(p);
	short SkillId = Read16(p);
	UINT Time = Read32(p);

}

void ResponseSkillStrengthenBattleModeCar(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //CarID
	{ //SkillInfo
		BYTE* pSkillInfo = p;
		Write16(pSkillInfo, 0); //len

		Write16(pSkillInfo, 0); //SkillId
		Write8(pSkillInfo, 0); //SkillLevel

		len = pSkillInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 10931, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestSkillStrengthenBattleModeRole(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	short SkillId = Read16(p);
	UINT Time = Read32(p);

}

void ResponseSkillStrengthenBattleModeRole(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	{ //SkillInfo
		BYTE* pSkillInfo = p;
		Write16(pSkillInfo, 0); //len

		Write16(pSkillInfo, 0); //SkillId
		Write8(pSkillInfo, 0); //SkillLevel

		len = pSkillInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 10932, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GGetBattleModeConfig(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT CfgVersion = Read32(p);

}

void ResponseC2GGetBattleModeConfig(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //CfgVersion
	Write8(p, 0); //Result
	Write32(p, 0); //FragmentItemID
	Write32(p, 0); //FragmentItemID2
	Write32(p, 0); //FragmentItemID3
	Write8(p, 0); //SkillInfoCfgNum
	for (size_t i = 0; i < n; i++)
	{ //BattleModeSkillInfoCfg
		BYTE* pBattleModeSkillInfoCfg = p;
		Write16(pBattleModeSkillInfoCfg, 0); //len

		Write16(pBattleModeSkillInfoCfg, 0); //SkillId
		Write8(pBattleModeSkillInfoCfg, 0); //SkillLevelNum
		for (size_t i = 0; i < n; i++)
		{ //LevelElementCfg
			BYTE* pLevelElementCfg = pBattleModeSkillInfoCfg;
			Write16(pLevelElementCfg, 0); //len

			Write8(pLevelElementCfg, 0); //SkillLevel
			Write32(pLevelElementCfg, 0); //FragmentCost
			Write32(pLevelElementCfg, 0); //FragmentCost2
			Write32(pLevelElementCfg, 0); //FragmentCost3
			Write32(pLevelElementCfg, 0); //SkillParam1
			Write32(pLevelElementCfg, 0); //SkillParam2
			Write32(pLevelElementCfg, 0); //SkillParam3
			Write32(pLevelElementCfg, 0); //CombatPower
			Write32(pLevelElementCfg, 0); //BaseFactor

			len = pLevelElementCfg - pBattleModeSkillInfoCfg;
			Set16(pBattleModeSkillInfoCfg, (WORD)len);
			pBattleModeSkillInfoCfg += len;
		}

		len = pBattleModeSkillInfoCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //DayPveScoreRankAwardCfgNum
	for (size_t i = 0; i < n; i++)
	{ //DayPveScoreRankAwardCfg
		BYTE* pDayPveScoreRankAwardCfg = p;
		Write16(pDayPveScoreRankAwardCfg, 0); //len

		Write32(pDayPveScoreRankAwardCfg, 0); //RankUpper
		{ //Award
			BYTE* pAward = pDayPveScoreRankAwardCfg;
			Write16(pAward, 0); //len

			Write32(pAward, 0); //Exp
			Write32(pAward, 0); //Money
			Write32(pAward, 0); //SuperMoney
			Write16(pAward, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAward;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAward;
				Set16(pAward, (WORD)len);
				pAward += len;
			}
			Write32(pAward, 0); //Coupons
			Write32(pAward, 0); //GuildPoint
			Write32(pAward, 0); //LuckMoney
			Write8(pAward, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAward;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAward;
				Set16(pAward, (WORD)len);
				pAward += len;
			}
			Write32(pAward, 0); //SpeedCoin

			len = pAward - pDayPveScoreRankAwardCfg;
			Set16(pDayPveScoreRankAwardCfg, (WORD)len);
			pDayPveScoreRankAwardCfg += len;
		}

		len = pDayPveScoreRankAwardCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HistoryPveScoreRankAwardCfgNum
	for (size_t i = 0; i < n; i++)
	{ //HistoryPveScoreRankAwardCfg
		BYTE* pHistoryPveScoreRankAwardCfg = p;
		Write16(pHistoryPveScoreRankAwardCfg, 0); //len

		Write32(pHistoryPveScoreRankAwardCfg, 0); //RankUpper
		{ //Award
			BYTE* pAward = pHistoryPveScoreRankAwardCfg;
			Write16(pAward, 0); //len

			Write32(pAward, 0); //Exp
			Write32(pAward, 0); //Money
			Write32(pAward, 0); //SuperMoney
			Write16(pAward, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAward;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAward;
				Set16(pAward, (WORD)len);
				pAward += len;
			}
			Write32(pAward, 0); //Coupons
			Write32(pAward, 0); //GuildPoint
			Write32(pAward, 0); //LuckMoney
			Write8(pAward, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAward;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAward;
				Set16(pAward, (WORD)len);
				pAward += len;
			}
			Write32(pAward, 0); //SpeedCoin

			len = pAward - pHistoryPveScoreRankAwardCfg;
			Set16(pHistoryPveScoreRankAwardCfg, (WORD)len);
			pHistoryPveScoreRankAwardCfg += len;
		}

		len = pHistoryPveScoreRankAwardCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasYuLeJiaNianHuaInfo
	for (size_t i = 0; i < n; i++)
	{ //YuLeJiaNianHuaInfo
		BYTE* pYuLeJiaNianHuaInfo = p;
		Write16(pYuLeJiaNianHuaInfo, 0); //len

		Write32(pYuLeJiaNianHuaInfo, 0); //Mode
		Write32(pYuLeJiaNianHuaInfo, 0); //Score
		Write8(pYuLeJiaNianHuaInfo, 0); //RankRangNum
		Write32(pYuLeJiaNianHuaInfo, 0); //RankRange[]
		Write8(pYuLeJiaNianHuaInfo, 0); //RankScoreNum
		Write32(pYuLeJiaNianHuaInfo, 0); //RankScore[]
		Write8(pYuLeJiaNianHuaInfo, 0); //InRecommend
		Write8(pYuLeJiaNianHuaInfo, 0); //InDoubleScore

		len = pYuLeJiaNianHuaInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 10933, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GGetBattleModeScoreList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseC2GGetBattleModeScoreList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //FriendNum
	Write32(p, 0); //Score[]
	Write16(p, 0); //LastSeasonFriendNum
	Write32(p, 0); //LastSeasonScore[]
	Write32(p, 0); //PeriodLeftTime

	len = p - buf;
	SendToClient(Client, 10934, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2SReceiveTimesExperience(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT ReceiveTime = Read32(p);

}

void ResponseC2SReceiveTimesExperience(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Result
	Write32(p, 0); //SurplusTime
	Write32(p, 0); //UseSurplusTime

	len = p - buf;
	SendToClient(Client, 20040, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2SFrostThawTimesExperience(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT Action = Read32(p);

}

void ResponseC2SFrostThawTimesExperience(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Result

	len = p - buf;
	SendToClient(Client, 20041, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2SGetTimesExperienceInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseC2SGetTimesExperienceInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Result
	Write32(p, 0); //SurplusTime
	Write32(p, 0); //UseSurplusTime
	Write32(p, 0); //Multiple
	Write32(p, 0); //Status
	Write32(p, 0); //ExtralTime
	Write32(p, 0); //PlayerTag
	Write32(p, 0); //MaxExpTime
	Write32(p, 0); //BaseTime
	Write32(p, 0); //ServerTime

	len = p - buf;
	SendToClient(Client, 20042, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2SUpdateDayUpgradeInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int SurTime = Read32(p);
	int Multiple = Read32(p);
	int StartTime = Read32(p);
	int Status = Read32(p);
	int UseTime = Read32(p);

}

void ResponseC2SUpdateDayUpgradeInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Result

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyClientPop(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Type
	Write16(p, 0); //URLLen

	len = p - buf;
	SendToClient(Client, 20045, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestRedPacketPresentInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseRedPacketPresentInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //PresentedOtherCnt
	Write16(p, 0); //LeftPresentOtherCnt
	Write16(p, 0); //Num
	Write32(p, 0); //PresentedList[]
	Write8(p, 0); //CharmLimit
	Write32(p, 0); //CharmLimit

	len = p - buf;
	SendToClient(Client, 20046, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestPresentFriendRedPacket(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT Num = Read16(p);
	UINT[] FriendUin[] = Read32(p);
	USHORT InfoLen = Read16(p);

}

void ResponsePresentFriendRedPacket(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //HasAward
	for (size_t i = 0; i < n; i++)
	{ //Award
		BYTE* pAward = p;
		Write16(pAward, 0); //len

		Write32(pAward, 0); //AwardMoney
		Write32(pAward, 0); //TotalMoney
		Write32(pAward, 0); //AwardSuperMoney
		Write32(pAward, 0); //TotalSuperMoney
		Write32(pAward, 0); //AwardExp
		Write32(pAward, 0); //TotalExp
		Write32(pAward, 0); //AwardItemNum
		for (size_t i = 0; i < n; i++)
		{ //AwardItemInfo
			BYTE* pAwardItemInfo = pAward;
			Write16(pAwardItemInfo, 0); //len

			Write32(pAwardItemInfo, 0); //ItemID
			Write32(pAwardItemInfo, 0); //ItemNum
			Write32(pAwardItemInfo, 0); //AvailPeriod
			Write8(pAwardItemInfo, 0); //Status
			WriteUn(pAwardItemInfo, 0); //ObtainTime
			Write32(pAwardItemInfo, 0); //OtherAttribute
			Write16(pAwardItemInfo, 0); //ItemType

			len = pAwardItemInfo - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write32(pAward, 0); //AwardCoupons
		Write32(pAward, 0); //TotalCoupons
		Write32(pAward, 0); //AwardLuckMoney
		Write32(pAward, 0); //TotalLuckMoney
		Write32(pAward, 0); //AwardTeamWorkExp
		Write32(pAward, 0); //TotalTeamWorkExp
		Write32(pAward, 0); //AwardWlCash
		Write32(pAward, 0); //AwardWlCrystal
		Write32(pAward, 0); //AwardWlDegree
		Write32(pAward, 0); //ChumCircleActivity
		Write32(pAward, 0); //GuildScore
		Write16(pAward, 0); //AppellcationID
		Write16(pAward, 0); //ScoreJingJi
		Write8(pAward, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAward;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write32(pAward, 0); //LiveExp
		Write32(pAward, 0); //AwardSpeedCoin
		Write32(pAward, 0); //TotalSpeedCoin

		len = pAward - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //PresentedOtherCnt
	Write16(p, 0); //LeftPresentOtherCnt
	Write16(p, 0); //Num
	Write32(p, 0); //PresentedList[]
	Write16(p, 0); //LimitNum
	Write32(p, 0); //LimitUin[]

	len = p - buf;
	SendToClient(Client, 20047, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyReduceCouponsDayConsumeInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //ItemType
	Write16(p, 0); //Num
	for (size_t i = 0; i < n; i++)
	{ //Info
		BYTE* pInfo = p;
		Write16(pInfo, 0); //len

		Write32(pInfo, 0); //ItemID
		Write32(pInfo, 0); //ConsumeNum

		len = pInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 20050, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyFBMonsterRefresh(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //GenCheckPointID
	Write16(p, 0); //MonsterNum
	for (size_t i = 0; i < n; i++)
	{ //MonsterList
		BYTE* pMonsterList = p;
		Write16(pMonsterList, 0); //len

		Write32(pMonsterList, 0); //ID
		Write16(pMonsterList, 0); //HP
		Write16(pMonsterList, 0); //Type
		Write16(pMonsterList, 0); //BornIdx
		Write16(pMonsterList, 0); //Lev
		Write16(pMonsterList, 0); //SubType

		len = pMonsterList - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //RefreshType

	len = p - buf;
	SendToClient(Client, 20070, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestFBReportMonsterEvent(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR EventCount = Read8(p);
	for (size_t i = 0; i < n; i++)
	{ //EventList
		BYTE* pEventList = p;
		len = Read16(pEventList);

		int SkillID = Read32(pEventList);
		int SkillPower = Read32(pEventList);
		int MonsterID = Read32(pEventList);
		UCHAR ComboNum = Read8(pEventList);

		p += len;
	}

}

void NotifyFBScoreEvent(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //EventType
	Write32(p, 0); //ScoreInc
	Write32(p, 0); //ScoreTotal

	len = p - buf;
	SendToClient(Client, 20073, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyFBUpdateMonsterInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //MonsterNum
	for (size_t i = 0; i < n; i++)
	{ //MonsterInfo
		BYTE* pMonsterInfo = p;
		Write16(pMonsterInfo, 0); //len

		Write32(pMonsterInfo, 0); //ID
		Write16(pMonsterInfo, 0); //HP
		Write16(pMonsterInfo, 0); //Type
		Write16(pMonsterInfo, 0); //BornIdx
		Write16(pMonsterInfo, 0); //Lev
		Write16(pMonsterInfo, 0); //SubType

		len = pMonsterInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 20072, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestFBReportCurrentCP(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int CheckPointID = Read32(p);

}

void RequestGetRecommendItemList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un uin = ReadUn(p);
	Un time = ReadUn(p);
	Un sceneId = ReadUn(p);
	Un dataType[] = ReadUn(p);
	Un dataBegin = ReadUn(p);
	Un dataEnd = ReadUn(p);

}

void ResponseGetRecommendItemList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //resultId
	WriteUn(p, 0); //propNum
	for (size_t i = 0; i < n; i++)
	{ //props
		BYTE* pprops = p;
		Write16(pprops, 0); //len

		WriteUn(pprops, 0); //id
		WriteUn(pprops, 0); //mainType
		WriteUn(pprops, 0); //type
		WriteUn(pprops, 0); //algo

		len = pprops - p;
		Set16(p, (WORD)len);
		p += len;
	}
	WriteUn(p, 0); //totalNum

	len = p - buf;
	SendToClient(Client, 20075, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestCanGetRecommendItemList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un uin = ReadUn(p);
	Un time = ReadUn(p);

}

void ResponseCanGetRecommendItemList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //canGetItemList

	len = p - buf;
	SendToClient(Client, 20076, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyTaskPresentAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //IsPhysical
	Write16(p, 0); //ResultLen
	Write32(p, 0); //AwardId

	len = p - buf;
	SendToClient(Client, 20048, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestSaveDataForPresent(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT ReportUin = Read32(p);
	USHORT ZipLen = Read16(p);
	USHORT TelNumLen = Read16(p);
	USHORT NameLen = Read16(p);
	USHORT AddressLen = Read16(p);

}

void ResponseSaveDataForPresent(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //ResultId

	len = p - buf;
	SendToClient(Client, 20049, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestAddToMatchQueue(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un uin = ReadUn(p);
	Un time = ReadUn(p);
	Un matchQueueType = ReadUn(p);
	Un para1 = ReadUn(p);
	UCHAR IsAllArea = Read8(p);
	Un paraNum = ReadUn(p);
	Un paraList[] = ReadUn(p);
	int MapID = Read32(p);

}

void ResponseAddToMatchQueue(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //resultId
	WriteUn(p, 0); //reasonLen
	WriteUn(p, 0); //matchQueueType
	Write32(p, 0); //Para0
	Write8(p, 0); //IsAllArea
	Write32(p, 0); //MapID

	len = p - buf;
	SendToClient(Client, 20079, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestCancelMatchQueue(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un uin = ReadUn(p);
	Un time = ReadUn(p);
	Un matchQueueType = ReadUn(p);
	UCHAR IsAllArea = Read8(p);

}

void ResponseCancelMatchQueue(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //uin
	WriteUn(p, 0); //time
	WriteUn(p, 0); //resultId
	WriteUn(p, 0); //reasonLen
	WriteUn(p, 0); //matchQueueType
	Write8(p, 0); //IsAllArea

	len = p - buf;
	SendToClient(Client, 20080, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyMatchResult(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //resultId
	Write16(p, 0); //reasonLen
	Write8(p, 0); //matchQueueType
	Write8(p, 1); //hasEnterInfo
	for (size_t i = 0; i < n; i++)
	{ //enterInfo
		BYTE* penterInfo = p;
		Write16(penterInfo, 0); //len 0x42

		{ //addrInfo
			BYTE* paddrInfo = penterInfo;
			Write16(paddrInfo, 0); //len 0x3a

			Write16(paddrInfo, 0); //svrId 0x0202
			Write32(paddrInfo, 0); //svrIP 0xCE5C6C71(4字节整数形式转换ip)
			Write8(paddrInfo, 0); //tcpPortNum 0x3
			Write16(paddrInfo, 0); //tcpPort[] 0x274a 0x274b 0x274c
			Write8(paddrInfo, 0); //udpPortNum 0x1
			Write16(paddrInfo, 0); //udpPort[] 0x274a
			Write8(paddrInfo, 0); //HasMultiIPInfo 0x1
			for (size_t i = 0; i < n; i++)
			{ //MultiIPInfo
				BYTE* pMultiIPInfo = paddrInfo;
				Write16(pMultiIPInfo, 0); //len 0x27

				Write8(pMultiIPInfo, 0); //IPCount 0x4
				Write32(pMultiIPInfo, 0); //ServerIP[]0xce 5c 6c 71 0xe4 36 f1 3d 0x9e 03 35 70 0x77 e8 f4 6d
				Write8(pMultiIPInfo, 0); //DomainLen 0x13
				//0x64 78 32 70 76 70 2e 73 70 65 65 64 2e 71 71 2e 63 6f 6d
				len = pMultiIPInfo - paddrInfo;
				Set16(paddrInfo, (WORD)len);
				paddrInfo += len;
			}

			len = paddrInfo - penterInfo;
			Set16(penterInfo, (WORD)len);
			penterInfo += len;
		}
		Write32(penterInfo, 0); //roomId 0x00 00 02 eb
		Write16(penterInfo, 0); //SceneID 0x0

		len = penterInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	//00 00 00 ff 00 01 00 00 01 2e 53 40 ce 01 10 9d 8a 04 64 b2 56 00 00 00 01 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 6b 61 

	Write32(p, 0); //mapID 0x00 00 00 ff
	Write16(p, 0); //MatchedRoomType 0x00 01
	Write16(p, 0); //TeamMatchType 0x00 00
	Write8(p, 0); //PVPType 0x01
	Write32(p, 0); //PVPKey 0x2e 53 40 ce
	Write32(p, 0); //GameSeqIDHigh 0x01 10 9d 8a
	Write32(p, 0); //GameSeqIDLow 0x04 64 b2 56
	Write16(p, 0); //ForceTransCount0x00 00
	Write32(p, 0); //ForceTransMsgID[]
	Write16(p, 0); //PlayerMatchingType 0x00 01
	Write8(p, 0); //paraNum
	Write32(p, 0); //paraList[]

	len = p - buf;
	SendToClient(Client, 20081, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestEnterMatchRoom(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un uin = ReadUn(p);
	Un time = ReadUn(p);
	Un roomId = ReadUn(p);

}

void ResponseEnterMatchRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //resultId
	WriteUn(p, 0); //reasonLen
	Write8(p, 0); //HasMemoryRaceInfo
	for (size_t i = 0; i < n; i++)
	{ //Info
		BYTE* pInfo = p;
		Write16(pInfo, 0); //len

		Write32(pInfo, 0); //Year
		Write32(pInfo, 0); //KartNum
		for (size_t i = 0; i < n; i++)
		{ //Kart
			BYTE* pKart = pInfo;
			Write16(pKart, 0); //len

			Write32(pKart, 0); //Uin
			Write32(pKart, 0); //KartId
			Write32(pKart, 0); //RefitCout
			Write16(pKart, 0); //MaxFlags
			Write16(pKart, 0); //WWeight
			Write16(pKart, 0); //SpeedWeight
			Write16(pKart, 0); //JetWeight
			Write16(pKart, 0); //SJetWeight
			Write16(pKart, 0); //AccuWeight
			Write32(pKart, 0); //ShapeRefitCount
			Write32(pKart, 0); //KartHeadRefitItemID
			Write32(pKart, 0); //KartTailRefitItemID
			Write32(pKart, 0); //KartFlankRefitItemID
			Write32(pKart, 0); //KartTireRefitItemID
			{ //KartRefitExInfo
				BYTE* pKartRefitExInfo = pKart;
				Write16(pKartRefitExInfo, 0); //len

				Write8(pKartRefitExInfo, 0); //SpeedRefitStar
				Write8(pKartRefitExInfo, 0); //JetRefitStar
				Write8(pKartRefitExInfo, 0); //SJetRefitStar
				Write8(pKartRefitExInfo, 0); //AccuRefitStar
				Write8(pKartRefitExInfo, 0); //SpeedAddRatio
				Write8(pKartRefitExInfo, 0); //JetAddRatio
				Write8(pKartRefitExInfo, 0); //SJetAddRatio
				Write8(pKartRefitExInfo, 0); //AccuAddRatio

				len = pKartRefitExInfo - pKart;
				Set16(pKart, (WORD)len);
				pKart += len;
			}
			Write32(pKart, 0); //SecondRefitCount
			Write16(pKart, 0); //Speed2Weight
			Write16(pKart, 0); //DriftVecWeight
			Write16(pKart, 0); //AdditionalZSpeedWeight
			Write16(pKart, 0); //AntiCollisionWeight
			Write16(pKart, 0); //LuckyValue
			Write16(pKart, 0); //RefitLuckyValueMaxWeight
			Write32(pKart, 0); //ShapeSuitID
			Write8(pKart, 0); //LegendSuitLevel
			Write32(pKart, 0); //LegendSuitLevelChoice
			Write32(pKart, 0); //ShapeLegendSuitID

			len = pKart - pInfo;
			Set16(pInfo, (WORD)len);
			pInfo += len;
		}
		Write32(pInfo, 0); //SuitNum
		for (size_t i = 0; i < n; i++)
		{ //Suit
			BYTE* pSuit = pInfo;
			Write16(pSuit, 0); //len

			Write16(pSuit, 0); //Idx
			Write16(pSuit, 0); //ItemNum
			Write32(pSuit, 0); //ItemID[]

			len = pSuit - pInfo;
			Set16(pInfo, (WORD)len);
			pInfo += len;
		}
		Write32(pInfo, 0); //RandSuitIdx

		len = pInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 20082, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetBorderGameCondition(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un uin = ReadUn(p);
	Un time = ReadUn(p);

}

void NotifyFBPlayerLevInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //Lev[]

	len = p - buf;
	SendToClient(Client, 20069, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetPetShowInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int PetID = Read32(p);
	short GetAllPetShowInfo = Read16(p);

}

void ResponseGetPetShowInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //PetNums
	for (size_t i = 0; i < n; i++)
	{ //PetShowInfos
		BYTE* pPetShowInfos = p;
		Write16(pPetShowInfos, 0); //len

		{ //BaseInfo
			BYTE* pBaseInfo = pPetShowInfos;
			Write16(pBaseInfo, 0); //len

			Write32(pBaseInfo, 0); //PetID
			Write32(pBaseInfo, 0); //FullLevel
			Write32(pBaseInfo, 0); //StrengthFullLevel
			Write16(pBaseInfo, 0); //CanRide
			Write16(pBaseInfo, 0); //RidePetType
			Write16(pBaseInfo, 0); //BaseInfoNums
			for (size_t i = 0; i < n; i++)
			{ //ShowBaseInfos
				BYTE* pShowBaseInfos = pBaseInfo;
				Write16(pShowBaseInfos, 0); //len

				Write32(pShowBaseInfos, 0); //SkillID
				Write32(pShowBaseInfos, 0); //SKillFullLevelValue
				Write32(pShowBaseInfos, 0); //StrengthFullLevelValue

				len = pShowBaseInfos - pBaseInfo;
				Set16(pBaseInfo, (WORD)len);
				pBaseInfo += len;
			}

			len = pBaseInfo - pPetShowInfos;
			Set16(pPetShowInfos, (WORD)len);
			pPetShowInfos += len;
		}
		{ //OpenNewSkillInfo
			BYTE* pOpenNewSkillInfo = pPetShowInfos;
			Write16(pOpenNewSkillInfo, 0); //len

			Write32(pOpenNewSkillInfo, 0); //PetID
			Write16(pOpenNewSkillInfo, 0); //OpenSkillNums
			for (size_t i = 0; i < n; i++)
			{ //OpenSKillInfos
				BYTE* pOpenSKillInfos = pOpenNewSkillInfo;
				Write16(pOpenSKillInfos, 0); //len

				Write32(pOpenSKillInfos, 0); //OpenLevel
				Write16(pOpenSKillInfos, 0); //SkillID
				Write32(pOpenSKillInfos, 0); //AddValue

				len = pOpenSKillInfos - pOpenNewSkillInfo;
				Set16(pOpenNewSkillInfo, (WORD)len);
				pOpenNewSkillInfo += len;
			}

			len = pOpenNewSkillInfo - pPetShowInfos;
			Set16(pPetShowInfos, (WORD)len);
			pPetShowInfos += len;
		}

		len = pPetShowInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasMoreInfo

	len = p - buf;
	SendToClient(Client, 24426, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void ResponseGetPetShowMoreInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //PetNums
	for (size_t i = 0; i < n; i++)
	{ //PetShowInfos
		BYTE* pPetShowInfos = p;
		Write16(pPetShowInfos, 0); //len

		{ //BaseInfo
			BYTE* pBaseInfo = pPetShowInfos;
			Write16(pBaseInfo, 0); //len

			Write32(pBaseInfo, 0); //PetID
			Write32(pBaseInfo, 0); //FullLevel
			Write32(pBaseInfo, 0); //StrengthFullLevel
			Write16(pBaseInfo, 0); //CanRide
			Write16(pBaseInfo, 0); //RidePetType
			Write16(pBaseInfo, 0); //BaseInfoNums
			for (size_t i = 0; i < n; i++)
			{ //ShowBaseInfos
				BYTE* pShowBaseInfos = pBaseInfo;
				Write16(pShowBaseInfos, 0); //len

				Write32(pShowBaseInfos, 0); //SkillID
				Write32(pShowBaseInfos, 0); //SKillFullLevelValue
				Write32(pShowBaseInfos, 0); //StrengthFullLevelValue

				len = pShowBaseInfos - pBaseInfo;
				Set16(pBaseInfo, (WORD)len);
				pBaseInfo += len;
			}

			len = pBaseInfo - pPetShowInfos;
			Set16(pPetShowInfos, (WORD)len);
			pPetShowInfos += len;
		}
		{ //OpenNewSkillInfo
			BYTE* pOpenNewSkillInfo = pPetShowInfos;
			Write16(pOpenNewSkillInfo, 0); //len

			Write32(pOpenNewSkillInfo, 0); //PetID
			Write16(pOpenNewSkillInfo, 0); //OpenSkillNums
			for (size_t i = 0; i < n; i++)
			{ //OpenSKillInfos
				BYTE* pOpenSKillInfos = pOpenNewSkillInfo;
				Write16(pOpenSKillInfos, 0); //len

				Write32(pOpenSKillInfos, 0); //OpenLevel
				Write16(pOpenSKillInfos, 0); //SkillID
				Write32(pOpenSKillInfos, 0); //AddValue

				len = pOpenSKillInfos - pOpenNewSkillInfo;
				Set16(pOpenNewSkillInfo, (WORD)len);
				pOpenNewSkillInfo += len;
			}

			len = pOpenNewSkillInfo - pPetShowInfos;
			Set16(pPetShowInfos, (WORD)len);
			pPetShowInfos += len;
		}

		len = pPetShowInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasNext

	len = p - buf;
	SendToClient(Client, 24527, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetPetInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT PetNum = Read16(p);
	int[] PetIDList[] = Read32(p);

}

void ResponseGetPetInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //PetNum
	for (size_t i = 0; i < n; i++)
	{ //PetInfo
		BYTE* pPetInfo = p;
		Write16(pPetInfo, 0); //len

		Write32(pPetInfo, 0); //Uin
		Write32(pPetInfo, 0); //PetId
		WriteString(pPetInfo, 0); //PetName[]
		Write8(pPetInfo, 0); //IsProper
		Write16(pPetInfo, 0); //LevelLimit
		Write16(pPetInfo, 0); //Level
		Write32(pPetInfo, 0); //CurLevelExp
		Write32(pPetInfo, 0); //CurLevelMaxExp
		Write8(pPetInfo, 0); //Status
		Write16(pPetInfo, 0); //PL
		Write16(pPetInfo, 0); //TotalPL
		Write16(pPetInfo, 0); //PetSkillNum
		for (size_t i = 0; i < n; i++)
		{ //PetSkillList
			BYTE* pPetSkillList = pPetInfo;
			Write16(pPetSkillList, 0); //len

			Write16(pPetSkillList, 0); //SkillID
			Write8(pPetSkillList, 0); //Status
			Write8(pPetSkillList, 0); //Active
			Write32(pPetSkillList, 0); //Value

			len = pPetSkillList - pPetInfo;
			Set16(pPetInfo, (WORD)len);
			pPetInfo += len;
		}
		Write32(pPetInfo, 0); //StrengLevel
		Write8(pPetInfo, 0); //TopStatus
		{ //CommonInfo
			BYTE* pCommonInfo = pPetInfo;
			Write16(pCommonInfo, 0); //len

			Write32(pCommonInfo, 0); //HuanHuaLevel
			Write8(pCommonInfo, 0); //CanHuanHua

			len = pCommonInfo - pPetInfo;
			Set16(pPetInfo, (WORD)len);
			pPetInfo += len;
		}

		len = pPetInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24528, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyPetStrengCfgInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //StrengCardId
	Write32(p, 0); //PetStrengNum
	for (size_t i = 0; i < n; i++)
	{ //PetStrengInfos
		BYTE* pPetStrengInfos = p;
		Write16(pPetStrengInfos, 0); //len

		Write32(pPetStrengInfos, 0); //Petid
		Write32(pPetStrengInfos, 0); //LevelNum
		for (size_t i = 0; i < n; i++)
		{ //PetStrengLevels
			BYTE* pPetStrengLevels = pPetStrengInfos;
			Write16(pPetStrengLevels, 0); //len

			Write32(pPetStrengLevels, 0); //Level
			Write32(pPetStrengLevels, 0); //SuccProb
			Write32(pPetStrengLevels, 0); //ConsCardNum
			Write32(pPetStrengLevels, 0); //ConsSuperMoney
			Write32(pPetStrengLevels, 0); //SkillNum
			for (size_t i = 0; i < n; i++)
			{ //SkillInfos
				BYTE* pSkillInfos = pPetStrengLevels;
				Write16(pSkillInfos, 0); //len

				Write16(pSkillInfos, 0); //SkillID
				Write8(pSkillInfos, 0); //Status
				Write8(pSkillInfos, 0); //Active
				Write32(pSkillInfos, 0); //Value

				len = pSkillInfos - pPetStrengLevels;
				Set16(pPetStrengLevels, (WORD)len);
				pPetStrengLevels += len;
			}
			Write8(pPetStrengLevels, 0); //Type
			Write32(pPetStrengLevels, 0); //HuanHuaItemPeriod
			Write32(pPetStrengLevels, 0); //BeginDate
			Write32(pPetStrengLevels, 0); //BeginTime
			Write32(pPetStrengLevels, 0); //BonusProb
			Write32(pPetStrengLevels, 0); //BonusProbBeginDate
			Write32(pPetStrengLevels, 0); //BonusProbBeginTime
			Write32(pPetStrengLevels, 0); //BonusProbEndDate
			Write32(pPetStrengLevels, 0); //BonusProbEndTime
			Write32(pPetStrengLevels, 0); //BaojiBeginNum
			Write32(pPetStrengLevels, 0); //BaojiInc

			len = pPetStrengLevels - pPetStrengInfos;
			Set16(pPetStrengInfos, (WORD)len);
			pPetStrengInfos += len;
		}
		Write32(pPetStrengInfos, 0); //HuanHuaItemID

		len = pPetStrengInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasMoreInfo

	len = p - buf;
	SendToClient(Client, 20100, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyPetStrengCfgMoreInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //PetStrengNum
	for (size_t i = 0; i < n; i++)
	{ //PetStrengInfos
		BYTE* pPetStrengInfos = p;
		Write16(pPetStrengInfos, 0); //len

		Write32(pPetStrengInfos, 0); //Petid
		Write32(pPetStrengInfos, 0); //LevelNum
		for (size_t i = 0; i < n; i++)
		{ //PetStrengLevels
			BYTE* pPetStrengLevels = pPetStrengInfos;
			Write16(pPetStrengLevels, 0); //len

			Write32(pPetStrengLevels, 0); //Level
			Write32(pPetStrengLevels, 0); //SuccProb
			Write32(pPetStrengLevels, 0); //ConsCardNum
			Write32(pPetStrengLevels, 0); //ConsSuperMoney
			Write32(pPetStrengLevels, 0); //SkillNum
			for (size_t i = 0; i < n; i++)
			{ //SkillInfos
				BYTE* pSkillInfos = pPetStrengLevels;
				Write16(pSkillInfos, 0); //len

				Write16(pSkillInfos, 0); //SkillID
				Write8(pSkillInfos, 0); //Status
				Write8(pSkillInfos, 0); //Active
				Write32(pSkillInfos, 0); //Value

				len = pSkillInfos - pPetStrengLevels;
				Set16(pPetStrengLevels, (WORD)len);
				pPetStrengLevels += len;
			}
			Write8(pPetStrengLevels, 0); //Type
			Write32(pPetStrengLevels, 0); //HuanHuaItemPeriod
			Write32(pPetStrengLevels, 0); //BeginDate
			Write32(pPetStrengLevels, 0); //BeginTime
			Write32(pPetStrengLevels, 0); //BonusProb
			Write32(pPetStrengLevels, 0); //BonusProbBeginDate
			Write32(pPetStrengLevels, 0); //BonusProbBeginTime
			Write32(pPetStrengLevels, 0); //BonusProbEndDate
			Write32(pPetStrengLevels, 0); //BonusProbEndTime
			Write32(pPetStrengLevels, 0); //BaojiBeginNum
			Write32(pPetStrengLevels, 0); //BaojiInc

			len = pPetStrengLevels - pPetStrengInfos;
			Set16(pPetStrengInfos, (WORD)len);
			pPetStrengInfos += len;
		}
		Write32(pPetStrengInfos, 0); //HuanHuaItemID

		len = pPetStrengInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasNext

	len = p - buf;
	SendToClient(Client, 28228, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyPetStrengPetID(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //PetNum
	Write32(p, 0); //PetID[]

	len = p - buf;
	SendToClient(Client, 24074, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyPetHuanHuaCfgInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //StrengCardId
	Write32(p, 0); //PetStrengNum
	for (size_t i = 0; i < n; i++)
	{ //PetStrengInfos
		BYTE* pPetStrengInfos = p;
		Write16(pPetStrengInfos, 0); //len

		Write32(pPetStrengInfos, 0); //Petid
		Write32(pPetStrengInfos, 0); //LevelNum
		for (size_t i = 0; i < n; i++)
		{ //PetStrengLevels
			BYTE* pPetStrengLevels = pPetStrengInfos;
			Write16(pPetStrengLevels, 0); //len

			Write32(pPetStrengLevels, 0); //Level
			Write32(pPetStrengLevels, 0); //SuccProb
			Write32(pPetStrengLevels, 0); //ConsCardNum
			Write32(pPetStrengLevels, 0); //ConsSuperMoney
			Write32(pPetStrengLevels, 0); //SkillNum
			for (size_t i = 0; i < n; i++)
			{ //SkillInfos
				BYTE* pSkillInfos = pPetStrengLevels;
				Write16(pSkillInfos, 0); //len

				Write16(pSkillInfos, 0); //SkillID
				Write8(pSkillInfos, 0); //Status
				Write8(pSkillInfos, 0); //Active
				Write32(pSkillInfos, 0); //Value

				len = pSkillInfos - pPetStrengLevels;
				Set16(pPetStrengLevels, (WORD)len);
				pPetStrengLevels += len;
			}
			Write8(pPetStrengLevels, 0); //Type
			Write32(pPetStrengLevels, 0); //HuanHuaItemPeriod
			Write32(pPetStrengLevels, 0); //BeginDate
			Write32(pPetStrengLevels, 0); //BeginTime
			Write32(pPetStrengLevels, 0); //BonusProb
			Write32(pPetStrengLevels, 0); //BonusProbBeginDate
			Write32(pPetStrengLevels, 0); //BonusProbBeginTime
			Write32(pPetStrengLevels, 0); //BonusProbEndDate
			Write32(pPetStrengLevels, 0); //BonusProbEndTime
			Write32(pPetStrengLevels, 0); //BaojiBeginNum
			Write32(pPetStrengLevels, 0); //BaojiInc

			len = pPetStrengLevels - pPetStrengInfos;
			Set16(pPetStrengInfos, (WORD)len);
			pPetStrengInfos += len;
		}
		Write32(pPetStrengInfos, 0); //HuanHuaItemID

		len = pPetStrengInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24073, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestPetStrengthen(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	Un petId = ReadUn(p);
	UCHAR Type = Read8(p);
	UCHAR Batch = Read8(p);

}

void ResponsePetStrengthen(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //ResultId
	Write32(p, 0); //Level
	{ //FailAward
		BYTE* pFailAward = p;
		Write16(pFailAward, 0); //len

		Write32(pFailAward, 0); //AwardMoney
		Write32(pFailAward, 0); //TotalMoney
		Write32(pFailAward, 0); //AwardSuperMoney
		Write32(pFailAward, 0); //TotalSuperMoney
		Write32(pFailAward, 0); //AwardExp
		Write32(pFailAward, 0); //TotalExp
		Write32(pFailAward, 0); //AwardItemNum
		for (size_t i = 0; i < n; i++)
		{ //AwardItemInfo
			BYTE* pAwardItemInfo = pFailAward;
			Write16(pAwardItemInfo, 0); //len

			Write32(pAwardItemInfo, 0); //ItemID
			Write32(pAwardItemInfo, 0); //ItemNum
			Write32(pAwardItemInfo, 0); //AvailPeriod
			Write8(pAwardItemInfo, 0); //Status
			WriteUn(pAwardItemInfo, 0); //ObtainTime
			Write32(pAwardItemInfo, 0); //OtherAttribute
			Write16(pAwardItemInfo, 0); //ItemType

			len = pAwardItemInfo - pFailAward;
			Set16(pFailAward, (WORD)len);
			pFailAward += len;
		}
		Write32(pFailAward, 0); //AwardCoupons
		Write32(pFailAward, 0); //TotalCoupons
		Write32(pFailAward, 0); //AwardLuckMoney
		Write32(pFailAward, 0); //TotalLuckMoney
		Write32(pFailAward, 0); //AwardTeamWorkExp
		Write32(pFailAward, 0); //TotalTeamWorkExp
		Write32(pFailAward, 0); //AwardWlCash
		Write32(pFailAward, 0); //AwardWlCrystal
		Write32(pFailAward, 0); //AwardWlDegree
		Write32(pFailAward, 0); //ChumCircleActivity
		Write32(pFailAward, 0); //GuildScore
		Write16(pFailAward, 0); //AppellcationID
		Write16(pFailAward, 0); //ScoreJingJi
		Write8(pFailAward, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pFailAward;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pFailAward;
			Set16(pFailAward, (WORD)len);
			pFailAward += len;
		}
		Write32(pFailAward, 0); //LiveExp
		Write32(pFailAward, 0); //AwardSpeedCoin
		Write32(pFailAward, 0); //TotalSpeedCoin

		len = pFailAward - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //Type
	WriteUn(p, 0); //petId
	Write32(p, 0); //BeginDate
	Write32(p, 0); //BeginTime

	len = p - buf;
	SendToClient(Client, 20101, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyMapMedalInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //mapNum
	for (size_t i = 0; i < n; i++)
	{ //medalInfo
		BYTE* pmedalInfo = p;
		Write16(pmedalInfo, 0); //len

		WriteUn(pmedalInfo, 0); //mapId
		WriteUn(pmedalInfo, 0); //medalTypeNum
		for (size_t i = 0; i < n; i++)
		{ //infoByType
			BYTE* pinfoByType = pmedalInfo;
			Write16(pinfoByType, 0); //len

			WriteUn(pinfoByType, 0); //medalType
			WriteUn(pinfoByType, 0); //medalNum
			for (size_t i = 0; i < n; i++)
			{ //statusInfo
				BYTE* pstatusInfo = pinfoByType;
				Write16(pstatusInfo, 0); //len

				WriteUn(pstatusInfo, 0); //conditionStatus
				WriteUn(pstatusInfo, 0); //curProgress

				len = pstatusInfo - pinfoByType;
				Set16(pinfoByType, (WORD)len);
				pinfoByType += len;
			}

			len = pinfoByType - pmedalInfo;
			Set16(pmedalInfo, (WORD)len);
			pmedalInfo += len;
		}

		len = pmedalInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 20084, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyUpdateMapMedalInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //mapId
	{ //infoByType
		BYTE* pinfoByType = p;
		Write16(pinfoByType, 0); //len

		WriteUn(pinfoByType, 0); //medalType
		WriteUn(pinfoByType, 0); //medalNum
		for (size_t i = 0; i < n; i++)
		{ //statusInfo
			BYTE* pstatusInfo = pinfoByType;
			Write16(pstatusInfo, 0); //len

			WriteUn(pstatusInfo, 0); //conditionStatus
			WriteUn(pstatusInfo, 0); //curProgress

			len = pstatusInfo - pinfoByType;
			Set16(pinfoByType, (WORD)len);
			pinfoByType += len;
		}

		len = pinfoByType - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 20085, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetMapMedalCfg(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un uin = ReadUn(p);
	Un time = ReadUn(p);
	Un curVersion = ReadUn(p);

}

void ResponseGetMapMedalCfg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //svrVersion
	WriteUn(p, 0); //mapNum
	for (size_t i = 0; i < n; i++)
	{ //medalCfg
		BYTE* pmedalCfg = p;
		Write16(pmedalCfg, 0); //len

		WriteUn(pmedalCfg, 0); //mapId
		WriteUn(pmedalCfg, 0); //beginTime
		WriteUn(pmedalCfg, 0); //endTime
		WriteUn(pmedalCfg, 0); //medalTypeNum
		for (size_t i = 0; i < n; i++)
		{ //conditionByType
			BYTE* pconditionByType = pmedalCfg;
			Write16(pconditionByType, 0); //len

			WriteUn(pconditionByType, 0); //medalType
			for (size_t i = 0; i < n; i++)
			{ //condition
				BYTE* pcondition = pconditionByType;
				Write16(pcondition, 0); //len

				WriteUn(pcondition, 0); //gameSubMode
				WriteUn(pcondition, 0); //needFriend
				WriteUn(pcondition, 0); //collisionNum
				WriteUn(pcondition, 0); //doubleJetNum
				WriteUn(pcondition, 0); //driftNum
				WriteUn(pcondition, 0); //nitrogenNum
				WriteUn(pcondition, 0); //propNum
				WriteUn(pcondition, 0); //playerNum
				WriteUn(pcondition, 0); //rankNum
				WriteUn(pcondition, 0); //finishTime
				WriteUn(pcondition, 0); //finishNum
				WriteUn(pcondition, 0); //expMulti
				WriteUn(pcondition, 0); //WSingleJetCount
				WriteUn(pcondition, 0); //WCWJetCount
				WriteUn(pcondition, 0); //CWWJetCount

				len = pcondition - pconditionByType;
				Set16(pconditionByType, (WORD)len);
				pconditionByType += len;
			}

			len = pconditionByType - pmedalCfg;
			Set16(pmedalCfg, (WORD)len);
			pmedalCfg += len;
		}

		len = pmedalCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	WriteUn(p, 0); //isOpen
	WriteUn(p, 0); //endTime

	len = p - buf;
	SendToClient(Client, 20086, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyClearMapMedalAllInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //uin

	len = p - buf;
	SendToClient(Client, 20087, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetVipLv7Item(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un uin = ReadUn(p);
	Un time = ReadUn(p);

}

void ResponseGetVipLv7Item(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ExRightFlag[]

	len = p - buf;
	SendToClient(Client, 20102, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestReportCommonAction(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	USHORT ActionID = Read16(p);
	UCHAR ParaNum = Read8(p);
	int[] Para[] = Read32(p);

}

void NotifyAvatarSynthesisCfg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	{ //AvatarSynthesisCfg
		BYTE* pAvatarSynthesisCfg = p;
		Write16(pAvatarSynthesisCfg, 0); //len

		{ //SynthesisComm
			BYTE* pSynthesisComm = pAvatarSynthesisCfg;
			Write16(pSynthesisComm, 0); //len

			Write32(pSynthesisComm, 0); //LowSynItemId
			Write32(pSynthesisComm, 0); //LowSynItemProb
			Write32(pSynthesisComm, 0); //LowClientProb
			Write32(pSynthesisComm, 0); //MiddSynItemId
			Write32(pSynthesisComm, 0); //MiddSynItemProb
			Write32(pSynthesisComm, 0); //MiddClientProb
			Write32(pSynthesisComm, 0); //HighSynItemId
			Write32(pSynthesisComm, 0); //HighSynItemProb
			Write32(pSynthesisComm, 0); //HighClientProb
			Write32(pSynthesisComm, 0); //PetLowSynId
			Write32(pSynthesisComm, 0); //PetLowSynProb
			Write32(pSynthesisComm, 0); //PetLowClientProb
			Write32(pSynthesisComm, 0); //PetMiddSynId
			Write32(pSynthesisComm, 0); //PetMiddSynProb
			Write32(pSynthesisComm, 0); //PetMiddClientProb
			Write32(pSynthesisComm, 0); //PetHighSynId
			Write32(pSynthesisComm, 0); //PetHighSynProb
			Write32(pSynthesisComm, 0); //PetHighClientProb
			Write32(pSynthesisComm, 0); //LuckyStoneId
			Write32(pSynthesisComm, 0); //MaxLuckyStoneNum
			Write32(pSynthesisComm, 0); //LuckyStoneProb
			Write32(pSynthesisComm, 0); //LuckyStoneClentProb
			Write32(pSynthesisComm, 0); //AdvanceConsItemId
			Write32(pSynthesisComm, 0); //BlackListNum
			Write32(pSynthesisComm, 0); //BlackList[]
			{ //LowSynTempProbCfg
				BYTE* pLowSynTempProbCfg = pSynthesisComm;
				Write16(pLowSynTempProbCfg, 0); //len

				Write32(pLowSynTempProbCfg, 0); //Probality
				Write32(pLowSynTempProbCfg, 0); //ShowProbality
				Write32(pLowSynTempProbCfg, 0); //BeginDate
				Write32(pLowSynTempProbCfg, 0); //BeginTime
				Write32(pLowSynTempProbCfg, 0); //EndDate
				Write32(pLowSynTempProbCfg, 0); //EndTime

				len = pLowSynTempProbCfg - pSynthesisComm;
				Set16(pSynthesisComm, (WORD)len);
				pSynthesisComm += len;
			}
			{ //MidSynTempProbCfg
				BYTE* pMidSynTempProbCfg = pSynthesisComm;
				Write16(pMidSynTempProbCfg, 0); //len

				Write32(pMidSynTempProbCfg, 0); //Probality
				Write32(pMidSynTempProbCfg, 0); //ShowProbality
				Write32(pMidSynTempProbCfg, 0); //BeginDate
				Write32(pMidSynTempProbCfg, 0); //BeginTime
				Write32(pMidSynTempProbCfg, 0); //EndDate
				Write32(pMidSynTempProbCfg, 0); //EndTime

				len = pMidSynTempProbCfg - pSynthesisComm;
				Set16(pSynthesisComm, (WORD)len);
				pSynthesisComm += len;
			}
			{ //HighSynTempProbCfg
				BYTE* pHighSynTempProbCfg = pSynthesisComm;
				Write16(pHighSynTempProbCfg, 0); //len

				Write32(pHighSynTempProbCfg, 0); //Probality
				Write32(pHighSynTempProbCfg, 0); //ShowProbality
				Write32(pHighSynTempProbCfg, 0); //BeginDate
				Write32(pHighSynTempProbCfg, 0); //BeginTime
				Write32(pHighSynTempProbCfg, 0); //EndDate
				Write32(pHighSynTempProbCfg, 0); //EndTime

				len = pHighSynTempProbCfg - pSynthesisComm;
				Set16(pSynthesisComm, (WORD)len);
				pSynthesisComm += len;
			}
			{ //LowPetTempProbCfg
				BYTE* pLowPetTempProbCfg = pSynthesisComm;
				Write16(pLowPetTempProbCfg, 0); //len

				Write32(pLowPetTempProbCfg, 0); //Probality
				Write32(pLowPetTempProbCfg, 0); //ShowProbality
				Write32(pLowPetTempProbCfg, 0); //BeginDate
				Write32(pLowPetTempProbCfg, 0); //BeginTime
				Write32(pLowPetTempProbCfg, 0); //EndDate
				Write32(pLowPetTempProbCfg, 0); //EndTime

				len = pLowPetTempProbCfg - pSynthesisComm;
				Set16(pSynthesisComm, (WORD)len);
				pSynthesisComm += len;
			}
			{ //MidPetTempProbCfg
				BYTE* pMidPetTempProbCfg = pSynthesisComm;
				Write16(pMidPetTempProbCfg, 0); //len

				Write32(pMidPetTempProbCfg, 0); //Probality
				Write32(pMidPetTempProbCfg, 0); //ShowProbality
				Write32(pMidPetTempProbCfg, 0); //BeginDate
				Write32(pMidPetTempProbCfg, 0); //BeginTime
				Write32(pMidPetTempProbCfg, 0); //EndDate
				Write32(pMidPetTempProbCfg, 0); //EndTime

				len = pMidPetTempProbCfg - pSynthesisComm;
				Set16(pSynthesisComm, (WORD)len);
				pSynthesisComm += len;
			}
			{ //HighPetTempProbCfg
				BYTE* pHighPetTempProbCfg = pSynthesisComm;
				Write16(pHighPetTempProbCfg, 0); //len

				Write32(pHighPetTempProbCfg, 0); //Probality
				Write32(pHighPetTempProbCfg, 0); //ShowProbality
				Write32(pHighPetTempProbCfg, 0); //BeginDate
				Write32(pHighPetTempProbCfg, 0); //BeginTime
				Write32(pHighPetTempProbCfg, 0); //EndDate
				Write32(pHighPetTempProbCfg, 0); //EndTime

				len = pHighPetTempProbCfg - pSynthesisComm;
				Set16(pSynthesisComm, (WORD)len);
				pSynthesisComm += len;
			}

			len = pSynthesisComm - pAvatarSynthesisCfg;
			Set16(pAvatarSynthesisCfg, (WORD)len);
			pAvatarSynthesisCfg += len;
		}
		Write32(pAvatarSynthesisCfg, 0); //SynAvatarNum
		for (size_t i = 0; i < n; i++)
		{ //AvatarSynthesises
			BYTE* pAvatarSynthesises = pAvatarSynthesisCfg;
			Write16(pAvatarSynthesises, 0); //len

			Write32(pAvatarSynthesises, 0); //DstItemId
			Write32(pAvatarSynthesises, 0); //AdvancedItemId
			Write32(pAvatarSynthesises, 0); //AdvanceConsNum
			Write32(pAvatarSynthesises, 0); //AdvanceSuperMoney
			Write32(pAvatarSynthesises, 0); //ReduceProb
			Write32(pAvatarSynthesises, 0); //ComponentsNum
			for (size_t i = 0; i < n; i++)
			{ //Components
				BYTE* pComponents = pAvatarSynthesises;
				Write16(pComponents, 0); //len

				Write32(pComponents, 0); //ComponentType
				Write32(pComponents, 0); //SuccProb
				Write32(pComponents, 0); //ClientProb
				Write32(pComponents, 0); //ProduceSynItemId
				Write32(pComponents, 0); //AvailPeriod
				Write32(pComponents, 0); //FormulaNum
				for (size_t i = 0; i < n; i++)
				{ //Formulas
					BYTE* pFormulas = pComponents;
					Write16(pFormulas, 0); //len

					Write32(pFormulas, 0); //SrcItemNum
					Write32(pFormulas, 0); //TypeNum
					Write32(pFormulas, 0); //TypeList[]

					len = pFormulas - pComponents;
					Set16(pComponents, (WORD)len);
					pComponents += len;
				}

				len = pComponents - pAvatarSynthesises;
				Set16(pAvatarSynthesises, (WORD)len);
				pAvatarSynthesises += len;
			}

			len = pAvatarSynthesises - pAvatarSynthesisCfg;
			Set16(pAvatarSynthesisCfg, (WORD)len);
			pAvatarSynthesisCfg += len;
		}

		len = pAvatarSynthesisCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 20103, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestAvatarSynthesize(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int SyntheItemId = Read32(p);
	int Type = Read32(p);
	int ComponentType = Read32(p);
	int SrcItemNum = Read32(p);
	int SrcItemIdList[] = Read32(p);
	int LuckyStoneNum = Read32(p);
	int SynthesizeItemID = Read32(p);

}

void ResponseAvatarSynthesize(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //ResultId
	Write32(p, 0); //SuccItemId
	Write32(p, 0); //ComponentType
	Write32(p, 0); //Type
	{ //FailedAward
		BYTE* pFailedAward = p;
		Write16(pFailedAward, 0); //len

		Write32(pFailedAward, 0); //AwardMoney
		Write32(pFailedAward, 0); //TotalMoney
		Write32(pFailedAward, 0); //AwardSuperMoney
		Write32(pFailedAward, 0); //TotalSuperMoney
		Write32(pFailedAward, 0); //AwardExp
		Write32(pFailedAward, 0); //TotalExp
		Write32(pFailedAward, 0); //AwardItemNum
		for (size_t i = 0; i < n; i++)
		{ //AwardItemInfo
			BYTE* pAwardItemInfo = pFailedAward;
			Write16(pAwardItemInfo, 0); //len

			Write32(pAwardItemInfo, 0); //ItemID
			Write32(pAwardItemInfo, 0); //ItemNum
			Write32(pAwardItemInfo, 0); //AvailPeriod
			Write8(pAwardItemInfo, 0); //Status
			WriteUn(pAwardItemInfo, 0); //ObtainTime
			Write32(pAwardItemInfo, 0); //OtherAttribute
			Write16(pAwardItemInfo, 0); //ItemType

			len = pAwardItemInfo - pFailedAward;
			Set16(pFailedAward, (WORD)len);
			pFailedAward += len;
		}
		Write32(pFailedAward, 0); //AwardCoupons
		Write32(pFailedAward, 0); //TotalCoupons
		Write32(pFailedAward, 0); //AwardLuckMoney
		Write32(pFailedAward, 0); //TotalLuckMoney
		Write32(pFailedAward, 0); //AwardTeamWorkExp
		Write32(pFailedAward, 0); //TotalTeamWorkExp
		Write32(pFailedAward, 0); //AwardWlCash
		Write32(pFailedAward, 0); //AwardWlCrystal
		Write32(pFailedAward, 0); //AwardWlDegree
		Write32(pFailedAward, 0); //ChumCircleActivity
		Write32(pFailedAward, 0); //GuildScore
		Write16(pFailedAward, 0); //AppellcationID
		Write16(pFailedAward, 0); //ScoreJingJi
		Write8(pFailedAward, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pFailedAward;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pFailedAward;
			Set16(pFailedAward, (WORD)len);
			pFailedAward += len;
		}
		Write32(pFailedAward, 0); //LiveExp
		Write32(pFailedAward, 0); //AwardSpeedCoin
		Write32(pFailedAward, 0); //TotalSpeedCoin

		len = pFailedAward - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 20104, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestAvatarAdvance(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int AdvanceItemId = Read32(p);

}

void ResponseAvatarAdvance(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //ResultId
	Write32(p, 0); //AdvanceItemId

	len = p - buf;
	SendToClient(Client, 20105, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyLingShouResultToKeeper(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //uin
	WriteUn(p, 0); //isVictory
	WriteUn(p, 0); //defenseCount
	WriteUn(p, 0); //hasAward
	for (size_t i = 0; i < n; i++)
	{ //award
		BYTE* paward = p;
		Write16(paward, 0); //len

		WriteUn(paward, 0); //wlDegree
		WriteUn(paward, 0); //wlCash

		len = paward - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 13117, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyLingShouResultToIntruder(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //uin
	WriteUn(p, 0); //attackBlood
	{ //award
		BYTE* paward = p;
		Write16(paward, 0); //len

		WriteUn(paward, 0); //superMoney
		WriteUn(paward, 0); //lingShouBoxNum
		WriteUn(paward, 0); //crystalNum

		len = paward - p;
		Set16(p, (WORD)len);
		p += len;
	}
	WriteUn(p, 0); //hasFinalIntruder
	for (size_t i = 0; i < n; i++)
	{ //finalIntruderInfo
		BYTE* pfinalIntruderInfo = p;
		Write16(pfinalIntruderInfo, 0); //len

		WriteUn(pfinalIntruderInfo, 0); //NickName[]
		{ //extraAward
			BYTE* pextraAward = pfinalIntruderInfo;
			Write16(pextraAward, 0); //len

			WriteUn(pextraAward, 0); //superMoney
			WriteUn(pextraAward, 0); //lingShouBoxNum
			WriteUn(pextraAward, 0); //crystalNum

			len = pextraAward - pfinalIntruderInfo;
			Set16(pfinalIntruderInfo, (WORD)len);
			pfinalIntruderInfo += len;
		}

		len = pfinalIntruderInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 13118, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestVipDetailInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT ReqUin = Read32(p);

}

void ResponseVipDetailInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //Time
	Write16(p, 0); //ResultID
	Write32(p, 0); //ReqUin
	{ //VipInfo
		BYTE* pVipInfo = p;
		Write16(pVipInfo, 0); //len

		Write16(pVipInfo, 0); //VipLevel
		Write16(pVipInfo, 0); //VipGrowRate
		Write32(pVipInfo, 0); //VipPoint
		Write32(pVipInfo, 0); //VipExpiredTime
		Write32(pVipInfo, 0); //VipExpiredTime_5y
		Write32(pVipInfo, 0); //PointRank

		len = pVipInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 20106, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestReportPlayer(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	U Time = ReadU(p);
	UINT DstUin = Read32(p);
	char[] DstNickName[] = ReadString(p);
	short ReportType = Read16(p);
	short ReportSecType = Read16(p);
	USHORT WorldID = Read16(p);
	USHORT ExtraLen = Read16(p);
	UINT Extra[] = Read32(p);
	USHORT DescLen = Read16(p);
	USHORT BaseMode = Read16(p);
	UINT GameType = Read32(p);
	USHORT ContentLen = Read16(p);
	USHORT RecordGameType = Read16(p);

}

void ResponseReportPlayer(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	WriteU(p, 0); //Time
	Write32(p, 0); //DstUin
	Write16(p, 0); //ReportType
	Write16(p, 0); //ReportSecType
	Write16(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 20107, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGet2048AwardInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un uin = ReadUn(p);
	Un time = ReadUn(p);

}

void ResponseGet2048AwardInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //uin
	WriteUn(p, 0); //awardInfoNum
	for (size_t i = 0; i < n; i++)
	{ //awardInfo
		BYTE* pawardInfo = p;
		Write16(pawardInfo, 0); //len

		WriteUn(pawardInfo, 0); //number
		{ //award
			BYTE* paward = pawardInfo;
			Write16(paward, 0); //len

			Write32(paward, 0); //AwardMoney
			Write32(paward, 0); //TotalMoney
			Write32(paward, 0); //AwardSuperMoney
			Write32(paward, 0); //TotalSuperMoney
			Write32(paward, 0); //AwardExp
			Write32(paward, 0); //TotalExp
			Write32(paward, 0); //AwardItemNum
			for (size_t i = 0; i < n; i++)
			{ //AwardItemInfo
				BYTE* pAwardItemInfo = paward;
				Write16(pAwardItemInfo, 0); //len

				Write32(pAwardItemInfo, 0); //ItemID
				Write32(pAwardItemInfo, 0); //ItemNum
				Write32(pAwardItemInfo, 0); //AvailPeriod
				Write8(pAwardItemInfo, 0); //Status
				WriteUn(pAwardItemInfo, 0); //ObtainTime
				Write32(pAwardItemInfo, 0); //OtherAttribute
				Write16(pAwardItemInfo, 0); //ItemType

				len = pAwardItemInfo - paward;
				Set16(paward, (WORD)len);
				paward += len;
			}
			Write32(paward, 0); //AwardCoupons
			Write32(paward, 0); //TotalCoupons
			Write32(paward, 0); //AwardLuckMoney
			Write32(paward, 0); //TotalLuckMoney
			Write32(paward, 0); //AwardTeamWorkExp
			Write32(paward, 0); //TotalTeamWorkExp
			Write32(paward, 0); //AwardWlCash
			Write32(paward, 0); //AwardWlCrystal
			Write32(paward, 0); //AwardWlDegree
			Write32(paward, 0); //ChumCircleActivity
			Write32(paward, 0); //GuildScore
			Write16(paward, 0); //AppellcationID
			Write16(paward, 0); //ScoreJingJi
			Write8(paward, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = paward;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - paward;
				Set16(paward, (WORD)len);
				paward += len;
			}
			Write32(paward, 0); //LiveExp
			Write32(paward, 0); //AwardSpeedCoin
			Write32(paward, 0); //TotalSpeedCoin

			len = paward - pawardInfo;
			Set16(pawardInfo, (WORD)len);
			pawardInfo += len;
		}

		len = pawardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 13119, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestReport2048Result(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un uin = ReadUn(p);
	Un time = ReadUn(p);
	Un number = ReadUn(p);
	Un score = ReadUn(p);
	Un costTime = ReadUn(p);

}

void ResponseReport2048Result(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //hasAward
	for (size_t i = 0; i < n; i++)
	{ //award
		BYTE* paward = p;
		Write16(paward, 0); //len

		Write32(paward, 0); //AwardMoney
		Write32(paward, 0); //TotalMoney
		Write32(paward, 0); //AwardSuperMoney
		Write32(paward, 0); //TotalSuperMoney
		Write32(paward, 0); //AwardExp
		Write32(paward, 0); //TotalExp
		Write32(paward, 0); //AwardItemNum
		for (size_t i = 0; i < n; i++)
		{ //AwardItemInfo
			BYTE* pAwardItemInfo = paward;
			Write16(pAwardItemInfo, 0); //len

			Write32(pAwardItemInfo, 0); //ItemID
			Write32(pAwardItemInfo, 0); //ItemNum
			Write32(pAwardItemInfo, 0); //AvailPeriod
			Write8(pAwardItemInfo, 0); //Status
			WriteUn(pAwardItemInfo, 0); //ObtainTime
			Write32(pAwardItemInfo, 0); //OtherAttribute
			Write16(pAwardItemInfo, 0); //ItemType

			len = pAwardItemInfo - paward;
			Set16(paward, (WORD)len);
			paward += len;
		}
		Write32(paward, 0); //AwardCoupons
		Write32(paward, 0); //TotalCoupons
		Write32(paward, 0); //AwardLuckMoney
		Write32(paward, 0); //TotalLuckMoney
		Write32(paward, 0); //AwardTeamWorkExp
		Write32(paward, 0); //TotalTeamWorkExp
		Write32(paward, 0); //AwardWlCash
		Write32(paward, 0); //AwardWlCrystal
		Write32(paward, 0); //AwardWlDegree
		Write32(paward, 0); //ChumCircleActivity
		Write32(paward, 0); //GuildScore
		Write16(paward, 0); //AppellcationID
		Write16(paward, 0); //ScoreJingJi
		Write8(paward, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = paward;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - paward;
			Set16(paward, (WORD)len);
			paward += len;
		}
		Write32(paward, 0); //LiveExp
		Write32(paward, 0); //AwardSpeedCoin
		Write32(paward, 0); //TotalSpeedCoin

		len = paward - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 13122, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyServerLog(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //LogLen

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyG2CChumCircleBriefInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write8(p, 0); //HasBriefInfo
	for (size_t i = 0; i < n; i++)
	{ //BriefInfo
		BYTE* pBriefInfo = p;
		Write16(pBriefInfo, 0); //len

		Write32(pBriefInfo, 0); //Uin
		Write8(pBriefInfo, 0); //Duty
		Write32(pBriefInfo, 0); //JoinTime
		Write32(pBriefInfo, 0); //ChumCircleID
		WriteString(pBriefInfo, 0); //ChumCircleName[]
		Write32(pBriefInfo, 0); //MasterUin
		Write16(pBriefInfo, 0); //Num
		Write(pBriefInfo, 0); //MemberUin[]
		Write32(pBriefInfo, 0); //Grade
		Write32(pBriefInfo, 0); //Activity
		Write16(pBriefInfo, 0); //BranchNums
		for (size_t i = 0; i < n; i++)
		{ //BranchInfo
			BYTE* pBranchInfo = pBriefInfo;
			Write16(pBranchInfo, 0); //len

			WriteUn(pBranchInfo, 0); //idx
			WriteUn(pBranchInfo, 0); //grade
			WriteUn(pBranchInfo, 0); //contribute

			len = pBranchInfo - pBriefInfo;
			Set16(pBriefInfo, (WORD)len);
			pBriefInfo += len;
		}
		Write32(pBriefInfo, 0); //Energy
		Write32(pBriefInfo, 0); //Score
		Write32(pBriefInfo, 0); //TodayEnergy
		Write32(pBriefInfo, 0); //LastTodayEnergyUpdateTime
		Write32(pBriefInfo, 0); //OnlineActivityUpdateTime

		len = pBriefInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //CurCircleID

	len = p - buf;
	SendToClient(Client, 15400, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetChumCircleDetailInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetChumCircleDetailInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write8(p, 0); //HasDesInfo
	for (size_t i = 0; i < n; i++)
	{ //DesInfo
		BYTE* pDesInfo = p;
		Write16(pDesInfo, 0); //len

		WriteString(pDesInfo, 0); //Name[]
		Write32(pDesInfo, 0); //Attribute
		Write32(pDesInfo, 0); //CreateTime
		Write32(pDesInfo, 0); //Grade
		Write32(pDesInfo, 0); //Activity
		Write16(pDesInfo, 0); //BranchNums
		for (size_t i = 0; i < n; i++)
		{ //BranchInfo
			BYTE* pBranchInfo = pDesInfo;
			Write16(pBranchInfo, 0); //len

			WriteUn(pBranchInfo, 0); //idx
			WriteUn(pBranchInfo, 0); //grade
			WriteUn(pBranchInfo, 0); //contribute

			len = pBranchInfo - pDesInfo;
			Set16(pDesInfo, (WORD)len);
			pDesInfo += len;
		}
		Write32(pDesInfo, 0); //MemLimit

		len = pDesInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //Num
	for (size_t i = 0; i < n; i++)
	{ //MemberInfo
		BYTE* pMemberInfo = p;
		Write16(pMemberInfo, 0); //len

		Write32(pMemberInfo, 0); //Uin
		WriteString(pMemberInfo, 0); //Name[]
		Write8(pMemberInfo, 0); //Duty
		Write32(pMemberInfo, 0); //JoinTime
		Write8(pMemberInfo, 0); //Online
		Write32(pMemberInfo, 0); //Energy
		Write32(pMemberInfo, 0); //Score
		Write32(pMemberInfo, 0); //Contributes[]
		Write32(pMemberInfo, 0); //LastLoginTime
		Write32(pMemberInfo, 0); //TodayEnergy
		Write32(pMemberInfo, 0); //TodayEnergyUpdateTime

		len = pMemberInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 15401, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestCreateChumCircle(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	{ //CreateInfo
		BYTE* pCreateInfo = p;
		len = Read16(pCreateInfo);

		UINT SrcUin = Read32(pCreateInfo);
		char[] SrcName[] = ReadString(pCreateInfo);
		USHORT NameLen = Read16(pCreateInfo);
		bool BeInvited = Read8(pCreateInfo);
		[] BeInvited[] = Read(pCreateInfo);

		p += len;
	}

}

void ResponseCreateChumCircle(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	{ //CreateInfo
		BYTE* pCreateInfo = p;
		Write16(pCreateInfo, 0); //len

		Write32(pCreateInfo, 0); //SrcUin
		WriteString(pCreateInfo, 0); //SrcName[]
		Write16(pCreateInfo, 0); //NameLen
		Write8(pCreateInfo, 0); //BeInvited
		Write(pCreateInfo, 0); //BeInvited[]

		len = pCreateInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 15402, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyInvitedCreateChumCircle(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //DstUin
	{ //CreateInfo
		BYTE* pCreateInfo = p;
		Write16(pCreateInfo, 0); //len

		Write32(pCreateInfo, 0); //SrcUin
		WriteString(pCreateInfo, 0); //SrcName[]
		Write16(pCreateInfo, 0); //NameLen
		Write8(pCreateInfo, 0); //BeInvited
		Write(pCreateInfo, 0); //BeInvited[]

		len = pCreateInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 15403, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestReplyInviteCreateChumCircle(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	bool Agree = Read8(p);
	{ //CreateInfo
		BYTE* pCreateInfo = p;
		len = Read16(pCreateInfo);

		UINT SrcUin = Read32(pCreateInfo);
		char[] SrcName[] = ReadString(pCreateInfo);
		USHORT NameLen = Read16(pCreateInfo);
		bool BeInvited = Read8(pCreateInfo);
		[] BeInvited[] = Read(pCreateInfo);

		p += len;
	}

}

void ResponseReplyInviteCreateChumCircle(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	{ //CreateInfo
		BYTE* pCreateInfo = p;
		Write16(pCreateInfo, 0); //len

		Write32(pCreateInfo, 0); //SrcUin
		WriteString(pCreateInfo, 0); //SrcName[]
		Write16(pCreateInfo, 0); //NameLen
		Write8(pCreateInfo, 0); //BeInvited
		Write(pCreateInfo, 0); //BeInvited[]

		len = pCreateInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 15404, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyReplyInviteCreateChumCircle(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //ReplyUin
	Write8(p, 0); //Agree
	{ //CreateInfo
		BYTE* pCreateInfo = p;
		Write16(pCreateInfo, 0); //len

		Write32(pCreateInfo, 0); //SrcUin
		WriteString(pCreateInfo, 0); //SrcName[]
		Write16(pCreateInfo, 0); //NameLen
		Write8(pCreateInfo, 0); //BeInvited
		Write(pCreateInfo, 0); //BeInvited[]

		len = pCreateInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	WriteString(p, 0); //ReplyName[]

	len = p - buf;
	SendToClient(Client, 15405, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyCreateChumCircleResult(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //DstUin
	{ //CreateMoreInfo
		BYTE* pCreateMoreInfo = p;
		Write16(pCreateMoreInfo, 0); //len

		Write32(pCreateMoreInfo, 0); //SrcUin
		WriteString(pCreateMoreInfo, 0); //SrcName[]
		Write32(pCreateMoreInfo, 0); //ReplyUin
		WriteString(pCreateMoreInfo, 0); //ReplyName[]
		Write32(pCreateMoreInfo, 0); //ChumCirCleID
		Write16(pCreateMoreInfo, 0); //NameLen
		Write8(pCreateMoreInfo, 0); //BeInvited
		Write(pCreateMoreInfo, 0); //BeInvited[]

		len = pCreateMoreInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 15406, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestInviteJoinChumCircle(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT DstUin = Read32(p);

}

void ResponseInviteJoinChumCircle(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write32(p, 0); //DstUin

	len = p - buf;
	SendToClient(Client, 15407, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyInviteJoinChumCircle(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //DstUin
	{ //InviteInfo
		BYTE* pInviteInfo = p;
		Write16(pInviteInfo, 0); //len

		Write32(pInviteInfo, 0); //SrcUin
		WriteString(pInviteInfo, 0); //SrcName[]
		Write32(pInviteInfo, 0); //ChumCircleID
		Write16(pInviteInfo, 0); //NameLen

		len = pInviteInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 15408, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestReplyInviteJoinChumCircle(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	bool Agree = Read8(p);
	{ //InviteInfo
		BYTE* pInviteInfo = p;
		len = Read16(pInviteInfo);

		UINT SrcUin = Read32(pInviteInfo);
		char[] SrcName[] = ReadString(pInviteInfo);
		UINT ChumCircleID = Read32(pInviteInfo);
		USHORT NameLen = Read16(pInviteInfo);

		p += len;
	}

}

void ResponseReplyInviteJoinChumCircle(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write8(p, 0); //Agree
	{ //InviteInfo
		BYTE* pInviteInfo = p;
		Write16(pInviteInfo, 0); //len

		Write32(pInviteInfo, 0); //SrcUin
		WriteString(pInviteInfo, 0); //SrcName[]
		Write32(pInviteInfo, 0); //ChumCircleID
		Write16(pInviteInfo, 0); //NameLen

		len = pInviteInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 15409, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyReplyInviteJoinChumCircle(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //ReplyUin
	WriteString(p, 0); //ReplyName[]
	Write8(p, 0); //Agree

	len = p - buf;
	SendToClient(Client, 15410, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyJoinChumCircleResult(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //DstUin
	Write32(p, 0); //JoinUin
	WriteString(p, 0); //JoinName[]
	{ //InviteInfo
		BYTE* pInviteInfo = p;
		Write16(pInviteInfo, 0); //len

		Write32(pInviteInfo, 0); //SrcUin
		WriteString(pInviteInfo, 0); //SrcName[]
		Write32(pInviteInfo, 0); //ChumCircleID
		Write16(pInviteInfo, 0); //NameLen

		len = pInviteInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 15411, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestApplyJoinChumCircle(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT DstUin = Read32(p);
	UINT DstChumCircleID = Read32(p);

}

void ResponseApplyJoinChumCircle(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 15423, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyApplyJoinChumCircle(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //ApplyUin
	WriteString(p, 0); //ApplyNickName[]

	len = p - buf;
	SendToClient(Client, 15424, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestReplyApplyJoinChumCircle(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT ApplyUin = Read32(p);
	char[] ApplyNickName[] = ReadString(p);
	bool Agree = Read8(p);

}

void ResponseReplyApplyJoinChumCircle(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 15425, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyReplyApplyJoinChumCircle(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //ReplyUin
	WriteString(p, 0); //ReplyNickName[]
	Write8(p, 0); //Agree

	len = p - buf;
	SendToClient(Client, 15426, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestRemoveChumCircleMember(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT SrcUin = Read32(p);
	UINT Time = Read32(p);
	UINT DstUin = Read32(p);
	UINT RemoveType = Read32(p);
	bool Confirm = Read8(p);

}

void ResponseRemoveChumCircleMember(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //SrcUin
	Write32(p, 0); //DstUin
	Write32(p, 0); //RemoveType

	len = p - buf;
	SendToClient(Client, 15412, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyRemoveChumCircleMember(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //SrcUin
	WriteString(p, 0); //SrcName[]
	Write32(p, 0); //DstUin
	WriteString(p, 0); //DstName[]
	Write32(p, 0); //ChumCircleID
	Write16(p, 0); //NameLen
	Write32(p, 0); //RemoveType

	len = p - buf;
	SendToClient(Client, 15413, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestChangeChumCircleDuty(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT SrcUin = Read32(p);
	UINT Time = Read32(p);
	UINT DstUin = Read32(p);
	bool DstDuty = Read8(p);

}

void ResponseChangeChumCircleDuty(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //SrcUin
	Write32(p, 0); //DstUin
	Write8(p, 0); //DstDuty
	Write16(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 15414, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyChangeChumCircleDuty(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //SrcUin
	WriteString(p, 0); //SrcName[]
	Write32(p, 0); //DstUin
	WriteString(p, 0); //DstName[]
	Write32(p, 0); //ChumCircleID
	Write16(p, 0); //NameLen
	Write8(p, 0); //DstDuty

	len = p - buf;
	SendToClient(Client, 15415, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestCheckChumCircleName(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	char[] ChumCircleName[] = ReadString(p);

}

void ResponseCheckChumCircleName(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	WriteString(p, 0); //ChumCircleName[]

	len = p - buf;
	SendToClient(Client, 15416, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestInviteJoinChumCircleFriendList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	bool InviteJoin = Read8(p);
	USHORT Num = Read16(p);
	[] Uin[] = Read(p);

}

void ResponseInviteJoinChumCircleFriendList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //InviteJoin
	Write16(p, 0); //Num
	Write(p, 0); //Uin[]

	len = p - buf;
	SendToClient(Client, 15417, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetFriendChumCircleRecommendList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT StartPage = Read16(p);

}

void ResponseGetFriendChumCircleRecommendList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //StartPage
	Write16(p, 0); //Num
	for (size_t i = 0; i < n; i++)
	{ //PlayerChumCircleID
		BYTE* pPlayerChumCircleID = p;
		Write16(pPlayerChumCircleID, 0); //len

		Write32(pPlayerChumCircleID, 0); //Uin
		Write32(pPlayerChumCircleID, 0); //ChumcircleID

		len = pPlayerChumCircleID - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //MaxPage

	len = p - buf;
	SendToClient(Client, 15421, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyFriendChumCircleRecommendDetail(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //Num
	for (size_t i = 0; i < n; i++)
	{ //PlayerChumCircleInfo
		BYTE* pPlayerChumCircleInfo = p;
		Write16(pPlayerChumCircleInfo, 0); //len

		Write32(pPlayerChumCircleInfo, 0); //Uin
		Write8(pPlayerChumCircleInfo, 0); //NickNameLen
		Write32(pPlayerChumCircleInfo, 0); //ChumCircleID
		Write8(pPlayerChumCircleInfo, 0); //NameLen
		Write8(pPlayerChumCircleInfo, 0); //CurMemNum
		Write8(pPlayerChumCircleInfo, 0); //MemLimit
		Write32(pPlayerChumCircleInfo, 0); //Activity
		Write8(pPlayerChumCircleInfo, 0); //Duty

		len = pPlayerChumCircleInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 15422, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestExpandChumCircle(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseExpandChumCircle(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //CurLimit

	len = p - buf;
	SendToClient(Client, 15418, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestSetChumCircleNickName(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	{ //DstNickName
		BYTE* pDstNickName = p;
		len = Read16(pDstNickName);

		UINT DstUin = Read32(pDstNickName);
		bool NickNameLen = Read8(pDstNickName);

		p += len;
	}

}

void ResponseSetChumCircleNickName(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	{ //DstNickName
		BYTE* pDstNickName = p;
		Write16(pDstNickName, 0); //len

		Write32(pDstNickName, 0); //DstUin
		Write8(pDstNickName, 0); //NickNameLen

		len = pDstNickName - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 15419, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetChumCircleNickName(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetChumCircleNickName(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //Num
	for (size_t i = 0; i < n; i++)
	{ //ChumCircleNickName
		BYTE* pChumCircleNickName = p;
		Write16(pChumCircleNickName, 0); //len

		Write32(pChumCircleNickName, 0); //DstUin
		Write8(pChumCircleNickName, 0); //NickNameLen

		len = pChumCircleNickName - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 15420, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyChumCircleSkillActivited(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //SrcUin
	Write32(p, 0); //DestUin
	Write32(p, 0); //SkillID
	Write32(p, 0); //SkillNums
	Write16(p, 0); //ItemNums
	Write32(p, 0); //Items[]

	len = p - buf;
	SendToClient(Client, 21005, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestReportChumCircleSkillActive(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT SkillID = Read32(p);
	UCHAR ParaNums = Read8(p);
	UINT[] Paras[] = Read32(p);

}

void RequestDonateChumCircleEnergy(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT BranchIdx = Read32(p);
	UINT EnergyDonate = Read32(p);

}

void ResponseDonateChumCircleEnergy(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //SrcUin
	Write32(p, 0); //Energy
	Write32(p, 0); //Score
	Write32(p, 0); //BranchIdx
	Write32(p, 0); //ChangeBranchContribute

	len = p - buf;
	SendToClient(Client, 21003, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestUpgradeChumCircle(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseUpgradeChumCircle(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Grade

	len = p - buf;
	SendToClient(Client, 21002, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyChumCircleChangeInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Grade
	Write16(p, 0); //BranchNums
	for (size_t i = 0; i < n; i++)
	{ //BranchInfo
		BYTE* pBranchInfo = p;
		Write16(pBranchInfo, 0); //len

		WriteUn(pBranchInfo, 0); //idx
		WriteUn(pBranchInfo, 0); //grade
		WriteUn(pBranchInfo, 0); //contribute

		len = pBranchInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 21006, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyChumCirclePlayerChangeInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Energy

	len = p - buf;
	SendToClient(Client, 21007, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyChumCircleCfg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //UpgradeNums
	for (size_t i = 0; i < n; i++)
	{ //UpdateInfo
		BYTE* pUpdateInfo = p;
		Write16(pUpdateInfo, 0); //len

		Write32(pUpdateInfo, 0); //Grade
		Write8(pUpdateInfo, 0); //UpdateItemNums
		for (size_t i = 0; i < n; i++)
		{ //UpdateItemInfo
			BYTE* pUpdateItemInfo = pUpdateInfo;
			Write16(pUpdateItemInfo, 0); //len

			Write32(pUpdateItemInfo, 0); //ItemID
			Write32(pUpdateItemInfo, 0); //ItemNum

			len = pUpdateItemInfo - pUpdateInfo;
			Set16(pUpdateInfo, (WORD)len);
			pUpdateInfo += len;
		}

		len = pUpdateInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //InviteCreateDegree
	Write32(p, 0); //InviteJoinDegree

	len = p - buf;
	SendToClient(Client, 21001, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGoInHand(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT DstUin = Read32(p);

}

void ResponseGoInHand(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultId

	len = p - buf;
	SendToClient(Client, 20109, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyPlayerAcceptInHand(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //SrcUin

	len = p - buf;
	SendToClient(Client, 20110, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestAcceptInHand(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT ResultId = Read16(p);
	int SrcOffSet = Read32(p);
	int DstOffSet = Read32(p);

}

void ResponseAcceptInHand(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultId

	len = p - buf;
	SendToClient(Client, 20111, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyInHandResult(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultId
	Write32(p, 0); //SrcUin
	Write32(p, 0); //DstUin
	Write32(p, 0); //SrcOffSet
	Write32(p, 0); //DstOffSet

	len = p - buf;
	SendToClient(Client, 20112, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestReportQTEValue(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT QTETimes = Read16(p);
	USHORT QTEValue = Read16(p);

}

void ResponseReportQTEValue(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultId

	len = p - buf;
	SendToClient(Client, 20113, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyInHandEnd(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //SrcUin
	Write32(p, 0); //DstUin

	len = p - buf;
	SendToClient(Client, 20114, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyPlayerAllowInvite(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //Type

	len = p - buf;
	SendToClient(Client, 20115, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyPlayerQTEResult(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //QTEResult
	Write32(p, 0); //LoveValue
	Write16(p, 0); //OtherQTERes

	len = p - buf;
	SendToClient(Client, 20116, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifySkateLoveAdd(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //Value

	len = p - buf;
	SendToClient(Client, 20117, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestReportClientAntibotData(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	bool HasRpcsData = Read8(p);
	for (size_t i = 0; i < n; i++)
	{ //RpcsData
		BYTE* pRpcsData = p;
		len = Read16(pRpcsData);

		int CodeItegrity = Read32(pRpcsData);
		int SendLaPkg = Read32(pRpcsData);
		int SendDataToSvr = Read32(pRpcsData);
		int[] AbnormalData[] = Read32(pRpcsData);
		int RpcsFlag = Read32(pRpcsData);

		p += len;
	}

}

void RequestChangePetEquipStatus(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int PetID = Read32(p);
	bool NewStatus = Read8(p);

}

void ResponseChangePetEquipStatus(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //NewStatus
	Write16(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 15398, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetPlayerNonSaleItemInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetPlayerNonSaleItemInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultId
	Write32(p, 0); //Uin
	{ //ClientPlayerNonSaleItemInfoList
		BYTE* pClientPlayerNonSaleItemInfoList = p;
		Write16(pClientPlayerNonSaleItemInfoList, 0); //len

		Write32(pClientPlayerNonSaleItemInfoList, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //PlayerNonSaleItemInfo
			BYTE* pPlayerNonSaleItemInfo = pClientPlayerNonSaleItemInfoList;
			Write16(pPlayerNonSaleItemInfo, 0); //len

			Write32(pPlayerNonSaleItemInfo, 0); //ItemID
			Write32(pPlayerNonSaleItemInfo, 0); //FocusCount
			Write32(pPlayerNonSaleItemInfo, 0); //FocusTime

			len = pPlayerNonSaleItemInfo - pClientPlayerNonSaleItemInfoList;
			Set16(pClientPlayerNonSaleItemInfoList, (WORD)len);
			pClientPlayerNonSaleItemInfoList += len;
		}

		len = pClientPlayerNonSaleItemInfoList - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 20125, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetShopNonSaleInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetShopNonSaleInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultId
	Write32(p, 0); //Uin
	Write32(p, 0); //TotalShopNonSaleItemCount
	Write32(p, 0); //ItemNum
	for (size_t i = 0; i < n; i++)
	{ //ShopNonSaleItemInfo
		BYTE* pShopNonSaleItemInfo = p;
		Write16(pShopNonSaleItemInfo, 0); //len

		Write32(pShopNonSaleItemInfo, 0); //ItemID
		Write32(pShopNonSaleItemInfo, 0); //FocusCount

		len = pShopNonSaleItemInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //Seq
	Write8(p, 0); //HasClientPlayerNonSaleItemInfoList
	for (size_t i = 0; i < n; i++)
	{ //ClientPlayerNonSaleItemInfoList
		BYTE* pClientPlayerNonSaleItemInfoList = p;
		Write16(pClientPlayerNonSaleItemInfoList, 0); //len

		Write32(pClientPlayerNonSaleItemInfoList, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //PlayerNonSaleItemInfo
			BYTE* pPlayerNonSaleItemInfo = pClientPlayerNonSaleItemInfoList;
			Write16(pPlayerNonSaleItemInfo, 0); //len

			Write32(pPlayerNonSaleItemInfo, 0); //ItemID
			Write32(pPlayerNonSaleItemInfo, 0); //FocusCount
			Write32(pPlayerNonSaleItemInfo, 0); //FocusTime

			len = pPlayerNonSaleItemInfo - pClientPlayerNonSaleItemInfoList;
			Set16(pClientPlayerNonSaleItemInfoList, (WORD)len);
			pClientPlayerNonSaleItemInfoList += len;
		}

		len = pClientPlayerNonSaleItemInfoList - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 20126, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestFocusNonSaleItem(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int ItemID = Read32(p);
	char FocusType = Read8(p);

}

void ResponseFocusNonSaleItem(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultId
	Write32(p, 0); //Uin
	Write32(p, 0); //ItemID
	Write8(p, 0); //FocusType

	len = p - buf;
	SendToClient(Client, 20127, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetNonSaleItemConsumeItemList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int SrcItemID = Read32(p);

}

void ResponseGetNonSaleItemConsumeItemList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultId
	Write32(p, 0); //Uin
	Write32(p, 0); //SrcItemID
	Write32(p, 0); //ConsumNum
	Write32(p, 0); //ConsumeItem[]

	len = p - buf;
	SendToClient(Client, 20128, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyPlayerNoSaleProduceList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //Num
	for (size_t i = 0; i < n; i++)
	{ //NoSalePrdList
		BYTE* pNoSalePrdList = p;
		Write16(pNoSalePrdList, 0); //len

		Write32(pNoSalePrdList, 0); //SrcItemId
		Write32(pNoSalePrdList, 0); //PrdItemId
		Write32(pNoSalePrdList, 0); //BeginSellTime

		len = pNoSalePrdList - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 20129, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyCompetitionSystemConfig(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //CompetitionCount
	for (size_t i = 0; i < n; i++)
	{ //Competition
		BYTE* pCompetition = p;
		Write16(pCompetition, 0); //len

		Write8(pCompetition, 0); //ID
		Write8(pCompetition, 0); //Status
		Write16(pCompetition, 0); //DescriptionLen
		Write8(pCompetition, 0); //Order

		len = pCompetition - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 20133, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestShuttleGetProp(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	bool CurrentRank = Read8(p);

}

void ResponseShuttleGetProp(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //ResultId
	Write32(p, 0); //Uin
	Write16(p, 0); //PropId
	Write32(p, 0); //PropIdx

	len = p - buf;
	SendToClient(Client, 20134, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestShuttleChangleMapMode(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR SpeFlag = Read8(p);

}

void ResponseShuttleChangleMapMode(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //ResultId
	Write8(p, 0); //SpeFlag

	len = p - buf;
	SendToClient(Client, 20135, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyShuttleChangleMapMode(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //SpeFlag

	len = p - buf;
	SendToClient(Client, 20136, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestEnterPersonalGarden(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR RoomType = Read8(p);
	UINT RoomKey = Read32(p);

}

void ResponseEnterPersonalGarden(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultId
	Write32(p, 0); //Uin
	Write32(p, 0); //RoomKey
	Write16(p, 0); //ChatRoomID
	{ //AddrInfo
		BYTE* pAddrInfo = p;
		Write16(pAddrInfo, 0); //len

		WriteUn(pAddrInfo, 0); //svrId
		WriteUn(pAddrInfo, 0); //svrIP
		WriteUn(pAddrInfo, 0); //tcpPortNum
		WriteUn(pAddrInfo, 0); //tcpPort[]
		WriteUn(pAddrInfo, 0); //udpPortNum
		WriteUn(pAddrInfo, 0); //udpPort[]
		Write8(pAddrInfo, 0); //HasMultiIPInfo
		for (size_t i = 0; i < n; i++)
		{ //MultiIPInfo
			BYTE* pMultiIPInfo = pAddrInfo;
			Write16(pMultiIPInfo, 0); //len

			Write8(pMultiIPInfo, 0); //IPCount
			Write32(pMultiIPInfo, 0); //ServerIP[]
			Write8(pMultiIPInfo, 0); //DomainLen

			len = pMultiIPInfo - pAddrInfo;
			Set16(pAddrInfo, (WORD)len);
			pAddrInfo += len;
		}

		len = pAddrInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 20137, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestUnlockParkingLot(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR CarIndex = Read8(p);

}

void ResponseUnlockParkingLot(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultId
	Write8(p, 0); //CarIndex

	len = p - buf;
	SendToClient(Client, 20139, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestPersonalGardenParking(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR OptType = Read8(p);
	UCHAR CarIndex = Read8(p);
	UINT CarItemId = Read32(p);

}

void ResponsePersonalGardenParking(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultId
	Write32(p, 0); //Uin
	Write8(p, 0); //OptType
	Write8(p, 0); //CarIndex
	Write32(p, 0); //CarItemId
	Write32(p, 0); //ParkingTime
	Write8(p, 0); //SurplusParkNum

	len = p - buf;
	SendToClient(Client, 20140, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetParkingAwards(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR CarIndex = Read8(p);

}

void ResponseGetParkingAwards(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultId
	Write8(p, 0); //CarIndex
	Write32(p, 0); //AwardItemId
	Write8(p, 0); //Popularity

	len = p - buf;
	SendToClient(Client, 20141, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestUnlockStockingLot(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR PetIndex = Read8(p);

}

void ResponseUnlockStockingLot(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultId
	Write8(p, 0); //PetIndex

	len = p - buf;
	SendToClient(Client, 20143, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestPersonalGardenStocking(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR PetIndex = Read8(p);
	UINT PetItemId = Read32(p);

}

void ResponsePersonalGardenStocking(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultId
	Write32(p, 0); //Uin
	{ //GardenPetInfo
		BYTE* pGardenPetInfo = p;
		Write16(pGardenPetInfo, 0); //len

		Write8(pGardenPetInfo, 0); //Index
		Write8(pGardenPetInfo, 0); //Type
		Write32(pGardenPetInfo, 0); //PetID
		Write32(pGardenPetInfo, 0); //ShowTime
		Write16(pGardenPetInfo, 0); //PetLevel
		Write8(pGardenPetInfo, 0); //Status

		len = pGardenPetInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 20144, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyChangeStockingStatus(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	{ //GardenPetInfo
		BYTE* pGardenPetInfo = p;
		Write16(pGardenPetInfo, 0); //len

		Write8(pGardenPetInfo, 0); //Index
		Write8(pGardenPetInfo, 0); //Type
		Write32(pGardenPetInfo, 0); //PetID
		Write32(pGardenPetInfo, 0); //ShowTime
		Write16(pGardenPetInfo, 0); //PetLevel
		Write8(pGardenPetInfo, 0); //Status

		len = pGardenPetInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 20147, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyClientPersonalGardenCfg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //PrivilegeNum
	for (size_t i = 0; i < n; i++)
	{ //Privilege
		BYTE* pPrivilege = p;
		Write16(pPrivilege, 0); //len

		Write32(pPrivilege, 0); //Type
		Write32(pPrivilege, 0); //Value[]

		len = pPrivilege - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //ParkingBlacklist
		BYTE* pParkingBlacklist = p;
		Write16(pParkingBlacklist, 0); //len

		Write16(pParkingBlacklist, 0); //BlackNum
		Write32(pParkingBlacklist, 0); //BlaskList[]

		len = pParkingBlacklist - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //UnlockCost
	Write32(p, 0); //UpgradeBuildingLevelCost
	Write32(p, 0); //ParkingTimeout
	Write32(p, 0); //DefaultOutParkNum
	Write32(p, 0); //DefaultDayParkOtherNum
	Write32(p, 0); //ShowRubberDuckLevel

	len = p - buf;
	SendToClient(Client, 20145, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyClientChangeParkingInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //RoomKey
	{ //ParkingInfo
		BYTE* pParkingInfo = p;
		Write16(pParkingInfo, 0); //len

		Write8(pParkingInfo, 0); //Index
		Write8(pParkingInfo, 0); //Type
		Write32(pParkingInfo, 0); //KartID
		Write32(pParkingInfo, 0); //Uin
		WriteString(pParkingInfo, 0); //NickName[]
		Write32(pParkingInfo, 0); //ParkingTime
		Write32(pParkingInfo, 0); //RefitCount

		len = pParkingInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 20148, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetGardenParkingMap(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetGardenParkingMap(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	{ //FriendGardenParkingMapList
		BYTE* pFriendGardenParkingMapList = p;
		Write16(pFriendGardenParkingMapList, 0); //len

		Write8(pFriendGardenParkingMapList, 0); //ParkingNum
		for (size_t i = 0; i < n; i++)
		{ //FriendGardenParkingMapList
			BYTE* pFriendGardenParkingMapList = pFriendGardenParkingMapList;
			Write16(pFriendGardenParkingMapList, 0); //len

			Write32(pFriendGardenParkingMapList, 0); //KartID
			Write32(pFriendGardenParkingMapList, 0); //FriendUin
			Write8(pFriendGardenParkingMapList, 0); //FriendParkingIndex
			Write32(pFriendGardenParkingMapList, 0); //ParkingTime

			len = pFriendGardenParkingMapList - pFriendGardenParkingMapList;
			Set16(pFriendGardenParkingMapList, (WORD)len);
			pFriendGardenParkingMapList += len;
		}

		len = pFriendGardenParkingMapList - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 20149, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetBatchPlayerGardenInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	short PlayerNum = Read16(p);
	UINT[] Player[] = Read32(p);

}

void ResponseGetBatchPlayerGardenInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write16(p, 0); //PlayerNum
	for (size_t i = 0; i < n; i++)
	{ //GardenBatchInfo
		BYTE* pGardenBatchInfo = p;
		Write16(pGardenBatchInfo, 0); //len

		Write32(pGardenBatchInfo, 0); //OwnerUin
		Write32(pGardenBatchInfo, 0); //CurrentPlayerNum
		Write32(pGardenBatchInfo, 0); //TotalPlayerNum
		Write8(pGardenBatchInfo, 0); //PrivateType
		Write8(pGardenBatchInfo, 0); //GardenLevel
		Write8(pGardenBatchInfo, 0); //IsFriend

		len = pGardenBatchInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 20146, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GGetGardenActivityInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseC2GGetGardenActivityInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	{ //GardenActivityInfoList
		BYTE* pGardenActivityInfoList = p;
		Write16(pGardenActivityInfoList, 0); //len

		Write16(pGardenActivityInfoList, 0); //Num
		for (size_t i = 0; i < n; i++)
		{ //GardenActivityInfo
			BYTE* pGardenActivityInfo = pGardenActivityInfoList;
			Write16(pGardenActivityInfo, 0); //len

			Write32(pGardenActivityInfo, 0); //Time
			Write32(pGardenActivityInfo, 0); //Uin
			WriteString(pGardenActivityInfo, 0); //NickName[]
			Write32(pGardenActivityInfo, 0); //KartId
			Write32(pGardenActivityInfo, 0); //GardenOwnerUin
			WriteString(pGardenActivityInfo, 0); //GardenOwnerNickName[]
			Write32(pGardenActivityInfo, 0); //ParkingHours
			Write32(pGardenActivityInfo, 0); //IncPopularity
			Write8(pGardenActivityInfo, 0); //HasAwardItem
			Write32(pGardenActivityInfo, 0); //ItemId[]
			Write8(pGardenActivityInfo, 0); //FirstReceivedFlag

			len = pGardenActivityInfo - pGardenActivityInfoList;
			Set16(pGardenActivityInfoList, (WORD)len);
			pGardenActivityInfoList += len;
		}

		len = pGardenActivityInfoList - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 20150, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestChangeGardenRight(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR Type = Read8(p);

}

void ResponseChangeGardenRight(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //ResultId

	len = p - buf;
	SendToClient(Client, 20151, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestUpgradeGardenBuildingLevel(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR NewLevel = Read8(p);

}

void ResponseUpgradeGardenBuildingLevel(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //ResultId
	Write8(p, 0); //NewLevel

	len = p - buf;
	SendToClient(Client, 20153, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetGardenRecommendList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR RoomType = Read8(p);
	UINT Contex = Read32(p);
	USHORT RoomNum = Read16(p);

}

void ResponseGetGardenRecommendList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultId
	Write8(p, 0); //RoomType
	Write32(p, 0); //Contex
	Write16(p, 0); //RoomNum
	for (size_t i = 0; i < n; i++)
	{ //RoomList
		BYTE* pRoomList = p;
		Write16(pRoomList, 0); //len

		Write8(pRoomList, 0); //RoomType
		Write32(pRoomList, 0); //RoomKey
		Write32(pRoomList, 0); //RoomID
		WriteString(pRoomList, 0); //GardenName[]
		Write32(pRoomList, 0); //RoomAttr[]

		len = pRoomList - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	
	
	
	SendToClient(Client, 20152, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyClientUpdatePersonalGardenBaseInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	{ //BaseInfo
		BYTE* pBaseInfo = p;
		Write16(pBaseInfo, 0); //len

		Write8(pBaseInfo, 0); //GardenLevel
		Write32(pBaseInfo, 0); //GardenPoint
		Write8(pBaseInfo, 0); //GrowRate
		Write32(pBaseInfo, 0); //GardenExpireTime
		{ //SimpleInfo
			BYTE* pSimpleInfo = pBaseInfo;
			Write16(pSimpleInfo, 0); //len

			Write32(pSimpleInfo, 0); //WeekPopularity
			Write32(pSimpleInfo, 0); //TotalPopularity
			Write32(pSimpleInfo, 0); //LastUpdatePopularityTime
			Write8(pSimpleInfo, 0); //PrivateType

			len = pSimpleInfo - pBaseInfo;
			Set16(pBaseInfo, (WORD)len);
			pBaseInfo += len;
		}

		len = pBaseInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 20301, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestChangeRubberDuckState(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	bool ChangeState = Read8(p);

}

void ResponseChangeRubberDuckState(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write8(p, 0); //ChangeState

	len = p - buf;
	SendToClient(Client, 20154, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyChangeRubberDuckState(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write8(p, 0); //State

	len = p - buf;
	SendToClient(Client, 20155, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifySnowFrozenTimeInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //Huodonging
	Write32(p, 0); //NextHuodongStartTime
	Write32(p, 0); //HuodongEndTime

	len = p - buf;
	SendToClient(Client, 21013, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyIceBegin(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //RewardMaxNum
	Write32(p, 0); //EndLeft
	Write32(p, 0); //EndIceNum
	Write8(p, 0); //NewBornNpcNum
	for (size_t i = 0; i < n; i++)
	{ //aucNewBornNpcPosInfo
		BYTE* paucNewBornNpcPosInfo = p;
		Write16(paucNewBornNpcPosInfo, 0); //len

		Write32(paucNewBornNpcPosInfo, 0); //Position[]
		Write32(paucNewBornNpcPosInfo, 0); //Position2[]

		len = paucNewBornNpcPosInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 21010, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyIceEndInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //SelfWin
	Write8(p, 0); //WinSide
	Write32(p, 0); //GodLeft
	Write32(p, 0); //UpNums[]

	len = p - buf;
	SendToClient(Client, 21012, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyIceAllInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //PlayerNum
	for (size_t i = 0; i < n; i++)
	{ //PlayerInfo
		BYTE* pPlayerInfo = p;
		Write16(pPlayerInfo, 0); //len

		Write32(pPlayerInfo, 0); //Uin
		Write32(pPlayerInfo, 0); //PkUin
		Write16(pPlayerInfo, 0); //RewardNum
		Write16(pPlayerInfo, 0); //GodLeft
		Write8(pPlayerInfo, 0); //Status
		Write8(pPlayerInfo, 0); //NextAliasStatus
		Write8(pPlayerInfo, 0); //Side

		len = pPlayerInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //UpNums[]

	len = p - buf;
	SendToClient(Client, 21011, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetIceBlock(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetIceBlock(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //ResultID
	Write16(p, 0); //PlayerNum
	for (size_t i = 0; i < n; i++)
	{ //PlayerInfo
		BYTE* pPlayerInfo = p;
		Write16(pPlayerInfo, 0); //len

		Write32(pPlayerInfo, 0); //Uin
		Write32(pPlayerInfo, 0); //PkUin
		Write16(pPlayerInfo, 0); //RewardNum
		Write16(pPlayerInfo, 0); //GodLeft
		Write8(pPlayerInfo, 0); //Status
		Write8(pPlayerInfo, 0); //NextAliasStatus
		Write8(pPlayerInfo, 0); //Side

		len = pPlayerInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 21008, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestUpIceBlock(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseUpIceBlock(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //ResultID
	Write32(p, 0); //RewardItemID
	Write16(p, 0); //PlayerNum
	for (size_t i = 0; i < n; i++)
	{ //PlayerInfo
		BYTE* pPlayerInfo = p;
		Write16(pPlayerInfo, 0); //len

		Write32(pPlayerInfo, 0); //Uin
		Write32(pPlayerInfo, 0); //PkUin
		Write16(pPlayerInfo, 0); //RewardNum
		Write16(pPlayerInfo, 0); //GodLeft
		Write8(pPlayerInfo, 0); //Status
		Write8(pPlayerInfo, 0); //NextAliasStatus
		Write8(pPlayerInfo, 0); //Side

		len = pPlayerInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 21009, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyConsumeGiftBagInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write8(p, 0); //IsOpen
	Write32(p, 0); //ConsumeCount
	Write32(p, 0); //ConsumeGiftBagNum
	for (size_t i = 0; i < n; i++)
	{ //PlayerConsumeGiftBag
		BYTE* pPlayerConsumeGiftBag = p;
		Write16(pPlayerConsumeGiftBag, 0); //len

		Write32(pPlayerConsumeGiftBag, 0); //Year
		Write8(pPlayerConsumeGiftBag, 0); //Month
		Write8(pPlayerConsumeGiftBag, 0); //Level
		Write32(pPlayerConsumeGiftBag, 0); //ConsumeCount
		Write8(pPlayerConsumeGiftBag, 0); //IsAwardGot
		{ //Award
			BYTE* pAward = pPlayerConsumeGiftBag;
			Write16(pAward, 0); //len

			Write32(pAward, 0); //Exp
			Write32(pAward, 0); //Money
			Write32(pAward, 0); //SuperMoney
			Write16(pAward, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAward;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAward;
				Set16(pAward, (WORD)len);
				pAward += len;
			}
			Write32(pAward, 0); //Coupons
			Write32(pAward, 0); //GuildPoint
			Write32(pAward, 0); //LuckMoney
			Write8(pAward, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAward;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAward;
				Set16(pAward, (WORD)len);
				pAward += len;
			}
			Write32(pAward, 0); //SpeedCoin

			len = pAward - pPlayerConsumeGiftBag;
			Set16(pPlayerConsumeGiftBag, (WORD)len);
			pPlayerConsumeGiftBag += len;
		}

		len = pPlayerConsumeGiftBag - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24006, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetConsumeGiftBagAward(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR Level = Read8(p);

}

void ResponseGetConsumeGiftBagAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen
	Write32(p, 0); //Uin
	Write8(p, 0); //Level

	len = p - buf;
	SendToClient(Client, 24007, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyConsumeCountChange(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //ConsumeCount

	len = p - buf;
	SendToClient(Client, 24008, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyRelaxRoomAdvertisement(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //IsOpen
	Write16(p, 0); //URLLen
	WriteString(p, 0); //URL[]
	Write8(p, 0); //RelaxRoomNum

	len = p - buf;
	SendToClient(Client, 24009, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetSecondPassInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void NotifySecondPassInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write8(p, 0); //Status
	Write8(p, 0); //Verify
	Write32(p, 0); //FrozenLeftSeconds
	Write32(p, 0); //FrozenSeconds

	len = p - buf;
	SendToClient(Client, 21015, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifySecondPassReClose(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write8(p, 0); //Status

	len = p - buf;
	SendToClient(Client, 21016, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestOpSecondPass(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	char Op = Read8(p);
	char[] CurPass[] = ReadString(p);
	char[] NewPass[] = ReadString(p);

}

void ResponseOpSecondPass(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write8(p, 0); //Op
	Write8(p, 0); //Status
	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 21017, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifySecondPassOpNotAllowed(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write8(p, 0); //CheckType
	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 21018, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetGameBaseRecordList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	short BaseGameMode = Read16(p);

}

void ResponseGetGameBaseRecordList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultId
	Write32(p, 0); //Uin
	Write16(p, 0); //BaseGameMode
	{ //GameBaseRecordList
		BYTE* pGameBaseRecordList = p;
		Write16(pGameBaseRecordList, 0); //len

		Write16(pGameBaseRecordList, 0); //BaseGameMode
		Write16(pGameBaseRecordList, 0); //Num
		for (size_t i = 0; i < n; i++)
		{ //GameBaseRecord
			BYTE* pGameBaseRecord = pGameBaseRecordList;
			Write16(pGameBaseRecord, 0); //len

			Write32(pGameBaseRecord, 0); //MapID
			Write16(pGameBaseRecord, 0); //Rank
			Write32(pGameBaseRecord, 0); //FinTime
			Write32(pGameBaseRecord, 0); //DetailRecordID
			Write32(pGameBaseRecord, 0); //GameType

			len = pGameBaseRecord - pGameBaseRecordList;
			Set16(pGameBaseRecordList, (WORD)len);
			pGameBaseRecordList += len;
		}

		len = pGameBaseRecordList - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 1702, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetGameDetailRecordList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	short BaseGameMode = Read16(p);
	UINT DetailRecordID = Read32(p);

}

void ResponseGetGameDetailRecordList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultId
	Write32(p, 0); //Uin
	Write16(p, 0); //BaseGameMode
	Write32(p, 0); //DetailRecordID
	{ //GameDetailRecordList
		BYTE* pGameDetailRecordList = p;
		Write16(pGameDetailRecordList, 0); //len

		Write16(pGameDetailRecordList, 0); //Num
		for (size_t i = 0; i < n; i++)
		{ //GameDetailRecord
			BYTE* pGameDetailRecord = pGameDetailRecordList;
			Write16(pGameDetailRecord, 0); //len

			Write32(pGameDetailRecord, 0); //Uin
			WriteString(pGameDetailRecord, 0); //NickName[]
			Write32(pGameDetailRecord, 0); //KartId
			WriteUn(pGameDetailRecord, 0); //FinTime
			Write32(pGameDetailRecord, 0); //HighestSpeed
			Write32(pGameDetailRecord, 0); //AverageSpeed
			Write32(pGameDetailRecord, 0); //CollisionCount
			Write32(pGameDetailRecord, 0); //N2OGatherCount
			Write32(pGameDetailRecord, 0); //JetTime
			Write32(pGameDetailRecord, 0); //ChaoJiQiBu
			Write32(pGameDetailRecord, 0); //ZhuangQiangDianPen
			Write32(pGameDetailRecord, 0); //DriftCount
			Write32(pGameDetailRecord, 0); //SmallJetCount
			Write32(pGameDetailRecord, 0); //DoubleJetCount
			Write32(pGameDetailRecord, 0); //FlyJetCount
			Write32(pGameDetailRecord, 0); //FallJetCount
			Write32(pGameDetailRecord, 0); //DuanWeiQiBu
			Write32(pGameDetailRecord, 0); //DuanWeiDoubleJetCount
			Write32(pGameDetailRecord, 0); //LinkJetCount
			Write32(pGameDetailRecord, 0); //WCJetCount
			Write32(pGameDetailRecord, 0); //CeShenDriftCount
			Write32(pGameDetailRecord, 0); //ShuaiWeiDriftCount
			Write32(pGameDetailRecord, 0); //CWWJetCount
			Write32(pGameDetailRecord, 0); //XiaoGuaCount
			WriteUn(pGameDetailRecord, 0); //teamID
			Write32(pGameDetailRecord, 0); //FastCornersNum
			Write16(pGameDetailRecord, 0); //DiffCornerNum
			Write32(pGameDetailRecord, 0); //FastCornerDetailInfo[]
			Write16(pGameDetailRecord, 0); //WSingleJetCount
			Write16(pGameDetailRecord, 0); //WCWJetCount
			Write16(pGameDetailRecord, 0); //CWWJetCount
			Write16(pGameDetailRecord, 0); //CeShenJetCount
			Write16(pGameDetailRecord, 0); //ShuaiWeiJetCount
			Write16(pGameDetailRecord, 0); //RankedMatchGrade
			Write16(pGameDetailRecord, 0); //DuanWeiPiaoYi
			Write16(pGameDetailRecord, 0); //DuanWeiJet
			Write16(pGameDetailRecord, 0); //OutOfTurnQuickly
			Write16(pGameDetailRecord, 0); //Launch
			Write16(pGameDetailRecord, 0); //HitWaterDrift
			Write16(pGameDetailRecord, 0); //OutWaterJet
			Write16(pGameDetailRecord, 0); //N2DriftContinue
			Write16(pGameDetailRecord, 0); //WaveFlyJet
			Write16(pGameDetailRecord, 0); //WorldID
			Write8(pGameDetailRecord, 0); //Npc
			Write32(pGameDetailRecord, 0); //GameSeq
			Write32(pGameDetailRecord, 0); //Time

			len = pGameDetailRecord - pGameDetailRecordList;
			Set16(pGameDetailRecordList, (WORD)len);
			pGameDetailRecordList += len;
		}

		len = pGameDetailRecordList - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 1703, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGameDetailRecordCheatingReport(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	short BaseGameMode = Read16(p);
	{ //GameDetailRecord
		BYTE* pGameDetailRecord = p;
		len = Read16(pGameDetailRecord);

		UINT Uin = Read32(pGameDetailRecord);
		char[] NickName[] = ReadString(pGameDetailRecord);
		int KartId = Read32(pGameDetailRecord);
		Un FinTime = ReadUn(pGameDetailRecord);
		UINT HighestSpeed = Read32(pGameDetailRecord);
		UINT AverageSpeed = Read32(pGameDetailRecord);
		UINT CollisionCount = Read32(pGameDetailRecord);
		UINT N2OGatherCount = Read32(pGameDetailRecord);
		UINT JetTime = Read32(pGameDetailRecord);
		UINT ChaoJiQiBu = Read32(pGameDetailRecord);
		UINT ZhuangQiangDianPen = Read32(pGameDetailRecord);
		UINT DriftCount = Read32(pGameDetailRecord);
		UINT SmallJetCount = Read32(pGameDetailRecord);
		UINT DoubleJetCount = Read32(pGameDetailRecord);
		UINT FlyJetCount = Read32(pGameDetailRecord);
		UINT FallJetCount = Read32(pGameDetailRecord);
		UINT DuanWeiQiBu = Read32(pGameDetailRecord);
		UINT DuanWeiDoubleJetCount = Read32(pGameDetailRecord);
		UINT LinkJetCount = Read32(pGameDetailRecord);
		UINT WCJetCount = Read32(pGameDetailRecord);
		UINT CeShenDriftCount = Read32(pGameDetailRecord);
		UINT ShuaiWeiDriftCount = Read32(pGameDetailRecord);
		UINT CWWJetCount = Read32(pGameDetailRecord);
		UINT XiaoGuaCount = Read32(pGameDetailRecord);
		Un teamID = ReadUn(pGameDetailRecord);
		UINT FastCornersNum = Read32(pGameDetailRecord);
		USHORT DiffCornerNum = Read16(pGameDetailRecord);
		UINT FastCornerDetailInfo[] = Read32(pGameDetailRecord);
		USHORT WSingleJetCount = Read16(pGameDetailRecord);
		USHORT WCWJetCount = Read16(pGameDetailRecord);
		USHORT CWWJetCount = Read16(pGameDetailRecord);
		USHORT CeShenJetCount = Read16(pGameDetailRecord);
		USHORT ShuaiWeiJetCount = Read16(pGameDetailRecord);
		short RankedMatchGrade = Read16(pGameDetailRecord);
		USHORT DuanWeiPiaoYi = Read16(pGameDetailRecord);
		USHORT DuanWeiJet = Read16(pGameDetailRecord);
		USHORT OutOfTurnQuickly = Read16(pGameDetailRecord);
		USHORT Launch = Read16(pGameDetailRecord);
		USHORT HitWaterDrift = Read16(pGameDetailRecord);
		USHORT OutWaterJet = Read16(pGameDetailRecord);
		USHORT N2DriftContinue = Read16(pGameDetailRecord);
		USHORT WaveFlyJet = Read16(pGameDetailRecord);
		USHORT WorldID = Read16(pGameDetailRecord);
		UCHAR Npc = Read8(pGameDetailRecord);
		UINT GameSeq = Read32(pGameDetailRecord);
		UINT Time = Read32(pGameDetailRecord);

		p += len;
	}
	int GameType = Read32(p);
	USHORT UinNum = Read16(p);
	UINT UinList[] = Read32(p);
	UCHAR ReportRecordUrl = Read8(p);
	USHORT ShadowUrlLen = Read16(p);
	UINT ReportCheatingUin = Read32(p);
	short ReportType = Read16(p);
	short ReportSecType = Read16(p);
	USHORT WorldID = Read16(p);
	USHORT DescLen = Read16(p);

}

void RequestShuttleUserSelectMap(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR MapNum = Read8(p);
	for (size_t i = 0; i < n; i++)
	{ //ShuttleMapList
		BYTE* pShuttleMapList = p;
		len = Read16(pShuttleMapList);

		int MapID = Read32(pShuttleMapList);
		USHORT BeginIdx = Read16(pShuttleMapList);
		USHORT EndIdx = Read16(pShuttleMapList);
		UCHAR Reverse = Read8(pShuttleMapList);
		USHORT BeginCheckPointIdx = Read16(pShuttleMapList);

		p += len;
	}

}

void ResponseShuttleUserSelectMap(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultId
	Write32(p, 0); //Uin
	Write8(p, 0); //MapNum
	for (size_t i = 0; i < n; i++)
	{ //ShuttleMapList
		BYTE* pShuttleMapList = p;
		Write16(pShuttleMapList, 0); //len

		Write32(pShuttleMapList, 0); //MapID
		Write16(pShuttleMapList, 0); //BeginIdx
		Write16(pShuttleMapList, 0); //EndIdx
		Write8(pShuttleMapList, 0); //Reverse
		Write16(pShuttleMapList, 0); //BeginCheckPointIdx

		len = pShuttleMapList - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 1705, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyShuttleUserSelectMap(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //MapNum
	for (size_t i = 0; i < n; i++)
	{ //ShuttleMapList
		BYTE* pShuttleMapList = p;
		Write16(pShuttleMapList, 0); //len

		Write32(pShuttleMapList, 0); //MapID
		Write16(pShuttleMapList, 0); //BeginIdx
		Write16(pShuttleMapList, 0); //EndIdx
		Write8(pShuttleMapList, 0); //Reverse
		Write16(pShuttleMapList, 0); //BeginCheckPointIdx

		len = pShuttleMapList - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 1706, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyShuttleScoreWeek(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //ShuttleScoreWeek

	len = p - buf;
	SendToClient(Client, 1711, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyWeeklyRecommendModeAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	{ //AwardToClient
		BYTE* pAwardToClient = p;
		Write16(pAwardToClient, 0); //len

		Write32(pAwardToClient, 0); //Exp
		Write32(pAwardToClient, 0); //Money
		Write32(pAwardToClient, 0); //SuperMoney
		Write16(pAwardToClient, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAwardToClient;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAwardToClient;
			Set16(pAwardToClient, (WORD)len);
			pAwardToClient += len;
		}
		Write32(pAwardToClient, 0); //Coupons
		Write32(pAwardToClient, 0); //GuildPoint
		Write32(pAwardToClient, 0); //LuckMoney
		Write8(pAwardToClient, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAwardToClient;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAwardToClient;
			Set16(pAwardToClient, (WORD)len);
			pAwardToClient += len;
		}
		Write32(pAwardToClient, 0); //SpeedCoin

		len = pAwardToClient - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 1712, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestWeeklyRecommendModeTriggerInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int TriggerType = Read32(p);
	int AddCount = Read32(p);

}

void NotifyDynamicCode(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write8(p, 0); //DynamicNum
	for (size_t i = 0; i < n; i++)
	{ //Dynamic
		BYTE* pDynamic = p;
		Write16(pDynamic, 0); //len

		Write32(pDynamic, 0); //FileNameLen
		Write32(pDynamic, 0); //FileContentLen
		Write32(pDynamic, 0); //DescInfoLen

		len = pDynamic - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 21032, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetRecommendTask(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetRecommendTask(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //CanChange
	Write8(p, 0); //Num
	for (size_t i = 0; i < n; i++)
	{ //Tasks
		BYTE* pTasks = p;
		Write16(pTasks, 0); //len

		Write32(pTasks, 0); //TaskID
		Write8(pTasks, 0); //IsFixed

		len = pTasks - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 21033, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestRecommendTaskChange(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int TaskID = Read32(p);

}

void ResponseRecommendTaskChange(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //TaskID
	{ //NewTaskInfo
		BYTE* pNewTaskInfo = p;
		Write16(pNewTaskInfo, 0); //len

		Write32(pNewTaskInfo, 0); //TaskID
		Write8(pNewTaskInfo, 0); //IsFixed

		len = pNewTaskInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 21029, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetLottoryItemAwardCfg(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int ItemID = Read32(p);

}

void ResponseGetLottoryItemAwardCfg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultId
	Write32(p, 0); //Uin
	Write16(p, 0); //ItemNum
	for (size_t i = 0; i < n; i++)
	{ //LottoryAwardItem
		BYTE* pLottoryAwardItem = p;
		Write16(pLottoryAwardItem, 0); //len

		Write32(pLottoryAwardItem, 0); //ItemID
		Write32(pLottoryAwardItem, 0); //Num
		Write32(pLottoryAwardItem, 0); //Period
		Write16(pLottoryAwardItem, 0); //ItemType

		len = pLottoryAwardItem - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 1714, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestUseLottoryItem(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int ItemID = Read32(p);
	USHORT ItemNum = Read16(p);

}

void ResponseUseLottoryItem(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultId
	Write32(p, 0); //Uin
	Write16(p, 0); //ItemNum
	for (size_t i = 0; i < n; i++)
	{ //LottoryAwardItem
		BYTE* pLottoryAwardItem = p;
		Write16(pLottoryAwardItem, 0); //len

		Write32(pLottoryAwardItem, 0); //ItemID
		Write32(pLottoryAwardItem, 0); //Num
		Write32(pLottoryAwardItem, 0); //Period
		Write16(pLottoryAwardItem, 0); //ItemType

		len = pLottoryAwardItem - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 1715, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestSecondRefitKart(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	U Time = ReadU(p);
	int KartItemID = Read32(p);
	int RefitItemID = Read32(p);
	short RefitTimes = Read16(p);
	UCHAR KartNameLen = Read8(p);

}

void ResponseSecondRefitKart(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //KartItemID
	Write32(p, 0); //RefitItemID
	Write16(p, 0); //RefitTimes
	Write16(p, 0); //ResponseIdx
	Write8(p, 0); //LastIdx
	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen
	{ //Increasement
		BYTE* pIncreasement = p;
		Write16(pIncreasement, 0); //len

		Write32(pIncreasement, 0); //Uin
		Write32(pIncreasement, 0); //KartId
		Write32(pIncreasement, 0); //RefitCout
		Write16(pIncreasement, 0); //MaxFlags
		Write16(pIncreasement, 0); //WWeight
		Write16(pIncreasement, 0); //SpeedWeight
		Write16(pIncreasement, 0); //JetWeight
		Write16(pIncreasement, 0); //SJetWeight
		Write16(pIncreasement, 0); //AccuWeight
		Write32(pIncreasement, 0); //ShapeRefitCount
		Write32(pIncreasement, 0); //KartHeadRefitItemID
		Write32(pIncreasement, 0); //KartTailRefitItemID
		Write32(pIncreasement, 0); //KartFlankRefitItemID
		Write32(pIncreasement, 0); //KartTireRefitItemID
		Write32(pIncreasement, 0); //SecondRefitCount
		Write16(pIncreasement, 0); //Speed2Weight
		Write16(pIncreasement, 0); //DriftVecWeight
		Write16(pIncreasement, 0); //AdditionalZSpeedWeight
		Write16(pIncreasement, 0); //AntiCollisionWeight
		Write16(pIncreasement, 0); //LuckyValue
		Write16(pIncreasement, 0); //RefitLuckyValueMaxWeight
		Write32(pIncreasement, 0); //ShapeSuitID
		Write8(pIncreasement, 0); //LegendSuitLevel
		Write32(pIncreasement, 0); //LegendSuitLevelChoice
		Write32(pIncreasement, 0); //ShapeLegendSuitID

		len = pIncreasement - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //CurAttr
		BYTE* pCurAttr = p;
		Write16(pCurAttr, 0); //len

		Write32(pCurAttr, 0); //Uin
		Write32(pCurAttr, 0); //KartId
		Write32(pCurAttr, 0); //RefitCout
		Write16(pCurAttr, 0); //MaxFlags
		Write16(pCurAttr, 0); //WWeight
		Write16(pCurAttr, 0); //SpeedWeight
		Write16(pCurAttr, 0); //JetWeight
		Write16(pCurAttr, 0); //SJetWeight
		Write16(pCurAttr, 0); //AccuWeight
		Write32(pCurAttr, 0); //ShapeRefitCount
		Write32(pCurAttr, 0); //KartHeadRefitItemID
		Write32(pCurAttr, 0); //KartTailRefitItemID
		Write32(pCurAttr, 0); //KartFlankRefitItemID
		Write32(pCurAttr, 0); //KartTireRefitItemID
		Write32(pCurAttr, 0); //SecondRefitCount
		Write16(pCurAttr, 0); //Speed2Weight
		Write16(pCurAttr, 0); //DriftVecWeight
		Write16(pCurAttr, 0); //AdditionalZSpeedWeight
		Write16(pCurAttr, 0); //AntiCollisionWeight
		Write16(pCurAttr, 0); //LuckyValue
		Write16(pCurAttr, 0); //RefitLuckyValueMaxWeight
		Write32(pCurAttr, 0); //ShapeSuitID
		Write8(pCurAttr, 0); //LegendSuitLevel
		Write32(pCurAttr, 0); //LegendSuitLevelChoice
		Write32(pCurAttr, 0); //ShapeLegendSuitID

		len = pCurAttr - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //ExpAward
	Write32(p, 0); //RefitFragmentItemID
	Write32(p, 0); //RefitFragmentItemNum

	len = p - buf;
	SendToClient(Client, 21110, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestSecondGetKartRefitLimitCfg(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseSecondGetKartRefitLimitCfg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	{ //KartRefitLimitCfg
		BYTE* pKartRefitLimitCfg = p;
		Write16(pKartRefitLimitCfg, 0); //len

		Write16(pKartRefitLimitCfg, 0); //OpenKartTypeNum
		Write32(pKartRefitLimitCfg, 0); //OpenKartTypeList[]
		Write32(pKartRefitLimitCfg, 0); //MinFormerRefitTime
		Write16(pKartRefitLimitCfg, 0); //ExcludeKartTypeNum
		Write32(pKartRefitLimitCfg, 0); //ExcludeKartTypeList[]
		Write16(pKartRefitLimitCfg, 0); //ForbidListNum
		Write32(pKartRefitLimitCfg, 0); //ForbidRefitKartID[]

		len = pKartRefitLimitCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //RefitItemWeightTypeCfg
		BYTE* pRefitItemWeightTypeCfg = p;
		Write16(pRefitItemWeightTypeCfg, 0); //len

		Write8(pRefitItemWeightTypeCfg, 0); //TypeNum
		for (size_t i = 0; i < n; i++)
		{ //ItemWeightLevel
			BYTE* pItemWeightLevel = pRefitItemWeightTypeCfg;
			Write16(pItemWeightLevel, 0); //len

			Write8(pItemWeightLevel, 0); //ItemWeightLevel
			Write16(pItemWeightLevel, 0); //MinWeight
			Write16(pItemWeightLevel, 0); //MaxWeight
			Write16(pItemWeightLevel, 0); //ExpAward

			len = pItemWeightLevel - pRefitItemWeightTypeCfg;
			Set16(pRefitItemWeightTypeCfg, (WORD)len);
			pRefitItemWeightTypeCfg += len;
		}

		len = pRefitItemWeightTypeCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //RefitItemCfg
		BYTE* pRefitItemCfg = p;
		Write16(pRefitItemCfg, 0); //len

		Write16(pRefitItemCfg, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //RefitItem
			BYTE* pRefitItem = pRefitItemCfg;
			Write16(pRefitItem, 0); //len

			Write32(pRefitItem, 0); //ItemID
			Write8(pRefitItem, 0); //ItemType
			Write8(pRefitItem, 0); //ItemWeightLevel
			Write16(pRefitItem, 0); //Value
			Write32(pRefitItem, 0); //FragmentItemID
			Write32(pRefitItem, 0); //FragmentNumToOneItem
			Write16(pRefitItem, 0); //IsItemOpen

			len = pRefitItem - pRefitItemCfg;
			Set16(pRefitItemCfg, (WORD)len);
			pRefitItemCfg += len;
		}

		len = pRefitItemCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 21111, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetGuildOnlineAwardCoupons(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	Un GuildID = ReadUn(p);

}

void ResponseGetGuildOnlineAwardCoupons(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	WriteUn(p, 0); //GuildID
	WriteUn(p, 0); //RegisterOpenTime
	WriteUn(p, 0); //RegisterCloseTime
	WriteUn(p, 0); //ReceiveOpenTime
	WriteUn(p, 0); //ReceiveCloseTime
	WriteUn(p, 0); //RegisterPlayerNums
	WriteUn(p, 0); //MaxCouponNums
	WriteUn(p, 0); //RegisterState
	WriteUn(p, 0); //ReceiveState
	Write16(p, 0); //ResultID
	WriteUn(p, 0); //couponNums
	WriteString(p, 0); //Reason[]
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 16050, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestPlayerGuildRegister(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	Un GuildID = ReadUn(p);
	Un MaxGuildCouponNums = ReadUn(p);
	Un RegisterCouponsFactor = ReadUn(p);

}

void ResponsePlayerGuildRegister(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	WriteUn(p, 0); //GuildID
	Write16(p, 0); //ResultID
	Write16(p, 0); //PlayerID
	Write16(p, 0); //CurSvrID
	WriteUn(p, 0); //CurrentCanReceCoupons
	WriteString(p, 0); //Reason[]
	Write8(p, 0); //ReasonLen
	Write32(p, 0); //RegisterUseNums

	len = p - buf;
	SendToClient(Client, 16044, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestPlayerReceiveGuildAward(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	Un GuildID = ReadUn(p);
	Un CouponsNumToBeReceived = ReadUn(p);

}

void ResponsePlayerReceiveGuildAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	WriteUn(p, 0); //GuildID
	Write16(p, 0); //ResultID
	Write16(p, 0); //PlayerID
	Write16(p, 0); //CurSvrID
	WriteUn(p, 0); //FinalAwardCoupons
	WriteString(p, 0); //Reason[]
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 16046, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestUpdateGuildOnlineAward(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	Un couponNums = ReadUn(p);

}

void ResponseUpdateGuildOnlineAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	WriteUn(p, 0); //couponNums
	Write16(p, 0); //ResultID
	WriteString(p, 0); //Reason[]
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 16048, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyDaLeDouEnergy(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //Energy
	Write8(p, 0); //CritFlag

	len = p - buf;
	SendToClient(Client, 307, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestDaLeDouEnergyStrengthenProp(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseDaLeDouEnergyStrengthenProp(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultId
	Write32(p, 0); //Uin

	len = p - buf;
	SendToClient(Client, 308, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestDaLeDouSelectProp(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	short PropID = Read16(p);

}

void ResponseDaLeDouSelectProp(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultId
	Write32(p, 0); //Uin
	Write16(p, 0); //PropID
	Write32(p, 0); //PropIndex

	len = p - buf;
	SendToClient(Client, 309, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestDaLeDouSurpass(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT DstUin = Read32(p);

}

void NotifyDaLeDouBuf(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //DaLeDouTriggerType
	Write32(p, 0); //LifeTime

	len = p - buf;
	SendToClient(Client, 310, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestReportCurrentDistanceToEnd(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT DistanceToEnd = Read32(p);
	UINT DstNPCID = Read32(p);
	short CurRound = Read16(p);
	int[] CurrentPosition[] = Read32(p);
	int[] CurrentCheckPoint[] = Read32(p);
	UINT Para0 = Read32(p);
	UINT DistanceFromBegin = Read32(p);

}

void NotifyRecommendRelation(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write8(p, 0); //TypeNum
	for (size_t i = 0; i < n; i++)
	{ //TypeInfo
		BYTE* pTypeInfo = p;
		Write16(pTypeInfo, 0); //len

		Write32(pTypeInfo, 0); //Type
		Write32(pTypeInfo, 0); //SubType
		Write16(pTypeInfo, 0); //NameLen
		Write16(pTypeInfo, 0); //DescLen
		Write8(pTypeInfo, 0); //GetRewardStatus
		Write8(pTypeInfo, 0); //AwardNum
		for (size_t i = 0; i < n; i++)
		{ //AwardInfo
			BYTE* pAwardInfo = pTypeInfo;
			Write16(pAwardInfo, 0); //len

			{ //TaskAward
				BYTE* pTaskAward = pAwardInfo;
				Write16(pTaskAward, 0); //len

				Write32(pTaskAward, 0); //AwardMoney
				Write32(pTaskAward, 0); //TotalMoney
				Write32(pTaskAward, 0); //AwardSuperMoney
				Write32(pTaskAward, 0); //TotalSuperMoney
				Write32(pTaskAward, 0); //AwardExp
				Write32(pTaskAward, 0); //TotalExp
				Write32(pTaskAward, 0); //AwardItemNum
				for (size_t i = 0; i < n; i++)
				{ //AwardItemInfo
					BYTE* pAwardItemInfo = pTaskAward;
					Write16(pAwardItemInfo, 0); //len

					Write32(pAwardItemInfo, 0); //ItemID
					Write32(pAwardItemInfo, 0); //ItemNum
					Write32(pAwardItemInfo, 0); //AvailPeriod
					Write8(pAwardItemInfo, 0); //Status
					WriteUn(pAwardItemInfo, 0); //ObtainTime
					Write32(pAwardItemInfo, 0); //OtherAttribute
					Write16(pAwardItemInfo, 0); //ItemType

					len = pAwardItemInfo - pTaskAward;
					Set16(pTaskAward, (WORD)len);
					pTaskAward += len;
				}
				Write32(pTaskAward, 0); //AwardCoupons
				Write32(pTaskAward, 0); //TotalCoupons
				Write32(pTaskAward, 0); //AwardLuckMoney
				Write32(pTaskAward, 0); //TotalLuckMoney
				Write32(pTaskAward, 0); //AwardTeamWorkExp
				Write32(pTaskAward, 0); //TotalTeamWorkExp
				Write32(pTaskAward, 0); //AwardWlCash
				Write32(pTaskAward, 0); //AwardWlCrystal
				Write32(pTaskAward, 0); //AwardWlDegree
				Write32(pTaskAward, 0); //ChumCircleActivity
				Write32(pTaskAward, 0); //GuildScore
				Write16(pTaskAward, 0); //AppellcationID
				Write16(pTaskAward, 0); //ScoreJingJi
				Write8(pTaskAward, 0); //ExtendInfoNum
				for (size_t i = 0; i < n; i++)
				{ //ExtendInfoAward
					BYTE* pExtendInfoAward = pTaskAward;
					Write16(pExtendInfoAward, 0); //len

					Write16(pExtendInfoAward, 0); //Key
					Write32(pExtendInfoAward, 0); //AddValue
					Write32(pExtendInfoAward, 0); //TotalValue
					Write8(pExtendInfoAward, 0); //ShowPriority
					Write16(pExtendInfoAward, 0); //BuyNeedScore
					Write8(pExtendInfoAward, 0); //OneMatchMaxNum

					len = pExtendInfoAward - pTaskAward;
					Set16(pTaskAward, (WORD)len);
					pTaskAward += len;
				}
				Write32(pTaskAward, 0); //LiveExp
				Write32(pTaskAward, 0); //AwardSpeedCoin
				Write32(pTaskAward, 0); //TotalSpeedCoin

				len = pTaskAward - pAwardInfo;
				Set16(pAwardInfo, (WORD)len);
				pAwardInfo += len;
			}

			len = pAwardInfo - pTypeInfo;
			Set16(pTypeInfo, (WORD)len);
			pTypeInfo += len;
		}
		Write8(pTypeInfo, 0); //TopShow
		Write32(pTypeInfo, 0); //StayLeft
		Write16(pTypeInfo, 0); //UrlLen

		len = pTypeInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 21112, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetRecommendRelationItem(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	int ItemID = Read32(p);

}

void ResponseGetRecommnedRelationItem(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uim
	Write32(p, 0); //ItemID
	Write8(p, 0); //RelationItemNum
	Write32(p, 0); //RelationItems[]

	len = p - buf;
	SendToClient(Client, 21113, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestBuyFinancialProduct(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	Un ProductID = ReadUn(p);

}

void ResponseBuyFinancialProduct(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	WriteUn(p, 0); //ProductID
	WriteUn(p, 0); //ResultId

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestFinancialProductBuyStatInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);

}

void ResponseFinancialProductBuyStatInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	WriteUn(p, 0); //FinancialActivityOpenTime
	WriteUn(p, 0); //FinancialActivityCloseTime
	WriteUn(p, 0); //tipsInfoOne[]
	WriteUn(p, 0); //tipsInfoTwo[]
	WriteUn(p, 0); //tipsInfoThree[]
	WriteUn(p, 0); //ProductNums
	for (size_t i = 0; i < n; i++)
	{ //FinancialProductInfos
		BYTE* pFinancialProductInfos = p;
		Write16(pFinancialProductInfos, 0); //len

		WriteUn(pFinancialProductInfos, 0); //ProductID
		WriteUn(pFinancialProductInfos, 0); //TotalValue
		WriteUn(pFinancialProductInfos, 0); //DiscountValue
		Write32(pFinancialProductInfos, 0); //ProductType
		WriteUn(pFinancialProductInfos, 0); //isBuy
		WriteUn(pFinancialProductInfos, 0); //isOutOfDate
		WriteUn(pFinancialProductInfos, 0); //isReceived
		WriteUn(pFinancialProductInfos, 0); //isReceiveAll
		WriteUn(pFinancialProductInfos, 0); //ReceiveAwardNums
		WriteUn(pFinancialProductInfos, 0); //CanReceiveAwardNumsByNow
		WriteUn(pFinancialProductInfos, 0); //RemainReceiveAwardNums
		WriteUn(pFinancialProductInfos, 0); //FinancialEndTime
		WriteUn(pFinancialProductInfos, 0); //extraInfoOne[]
		Write16(pFinancialProductInfos, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //AwardItemInfos
			BYTE* pAwardItemInfos = pFinancialProductInfos;
			Write16(pAwardItemInfos, 0); //len

			WriteUn(pAwardItemInfos, 0); //itemID
			WriteUn(pAwardItemInfos, 0); //itemNums
			Write32(pAwardItemInfos, 0); //AvailPeriod

			len = pAwardItemInfos - pFinancialProductInfos;
			Set16(pFinancialProductInfos, (WORD)len);
			pFinancialProductInfos += len;
		}

		len = pFinancialProductInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyFinancialProductBuyStatToClient(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	WriteUn(p, 0); //FinancialActivityOpenTime
	WriteUn(p, 0); //FinancialActivityCloseTime
	{ //FinancialProductInfo
		BYTE* pFinancialProductInfo = p;
		Write16(pFinancialProductInfo, 0); //len

		WriteUn(pFinancialProductInfo, 0); //ProductID
		WriteUn(pFinancialProductInfo, 0); //TotalValue
		WriteUn(pFinancialProductInfo, 0); //DiscountValue
		Write32(pFinancialProductInfo, 0); //ProductType
		WriteUn(pFinancialProductInfo, 0); //isBuy
		WriteUn(pFinancialProductInfo, 0); //isOutOfDate
		WriteUn(pFinancialProductInfo, 0); //isReceived
		WriteUn(pFinancialProductInfo, 0); //isReceiveAll
		WriteUn(pFinancialProductInfo, 0); //ReceiveAwardNums
		WriteUn(pFinancialProductInfo, 0); //CanReceiveAwardNumsByNow
		WriteUn(pFinancialProductInfo, 0); //RemainReceiveAwardNums
		WriteUn(pFinancialProductInfo, 0); //FinancialEndTime
		WriteUn(pFinancialProductInfo, 0); //extraInfoOne[]
		Write16(pFinancialProductInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //AwardItemInfos
			BYTE* pAwardItemInfos = pFinancialProductInfo;
			Write16(pAwardItemInfos, 0); //len

			WriteUn(pAwardItemInfos, 0); //itemID
			WriteUn(pAwardItemInfos, 0); //itemNums
			Write32(pAwardItemInfos, 0); //AvailPeriod

			len = pAwardItemInfos - pFinancialProductInfo;
			Set16(pFinancialProductInfo, (WORD)len);
			pFinancialProductInfo += len;
		}

		len = pFinancialProductInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestReceiveFinancialProductAward(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	Un productID = ReadUn(p);

}

void ResponseReceiveFinancialProductAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	WriteUn(p, 0); //resultId
	Write32(p, 0); //AwardDays
	Write32(p, 0); //ProductType
	WriteUn(p, 0); //itemNums
	for (size_t i = 0; i < n; i++)
	{ //awardItemInfo
		BYTE* pawardItemInfo = p;
		Write16(pawardItemInfo, 0); //len

		WriteUn(pawardItemInfo, 0); //itemID
		WriteUn(pawardItemInfo, 0); //itemNums
		Write32(pawardItemInfo, 0); //AvailPeriod

		len = pawardItemInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestReportCommonEvent(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR EventType = Read8(p);
	int EventID = Read32(p);
	UCHAR ParaNum = Read8(p);
	int[] Para[] = Read32(p);

}

void RequestGetActivityCenterInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	U Time = ReadU(p);

}

void ResponseGetActivityCenterInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //TotalActivity
	Write32(p, 0); //CurrentWeekActivity
	Write32(p, 0); //LastWeekActivity
	Write32(p, 0); //CurrentDayActivity
	Write32(p, 0); //ActivityAppellcation
	Write32(p, 0); //ActivityLevel
	Write32(p, 0); //NextLevelActivity
	{ //DailyActivityBox
		BYTE* pDailyActivityBox = p;
		Write16(pDailyActivityBox, 0); //len

		Write32(pDailyActivityBox, 0); //Day
		Write32(pDailyActivityBox, 0); //BoxNum
		for (size_t i = 0; i < n; i++)
		{ //ActivityBox
			BYTE* pActivityBox = pDailyActivityBox;
			Write16(pActivityBox, 0); //len

			Write32(pActivityBox, 0); //BoxLevel
			Write32(pActivityBox, 0); //BoxType
			Write32(pActivityBox, 0); //ActivityType
			Write32(pActivityBox, 0); //NeedActivityNum
			Write32(pActivityBox, 0); //BoxStatus
			Write32(pActivityBox, 0); //BoxID
			for (size_t i = 0; i < n; i++)
			{ //Award
				BYTE* pAward = pActivityBox;
				Write16(pAward, 0); //len

				Write32(pAward, 0); //Exp
				Write32(pAward, 0); //Money
				Write32(pAward, 0); //SuperMoney
				Write16(pAward, 0); //ItemNum
				for (size_t i = 0; i < n; i++)
				{ //ItemInfo
					BYTE* pItemInfo = pAward;
					Write16(pItemInfo, 0); //len

					Write32(pItemInfo, 0); //ItemID
					Write32(pItemInfo, 0); //ItemNum
					Write32(pItemInfo, 0); //AvailPeriod
					Write8(pItemInfo, 0); //Status
					WriteUn(pItemInfo, 0); //ObtainTime
					Write32(pItemInfo, 0); //OtherAttribute
					Write16(pItemInfo, 0); //ItemType

					len = pItemInfo - pAward;
					Set16(pAward, (WORD)len);
					pAward += len;
				}
				Write32(pAward, 0); //Coupons
				Write32(pAward, 0); //GuildPoint
				Write32(pAward, 0); //LuckMoney
				Write8(pAward, 0); //ExtendInfoNum
				for (size_t i = 0; i < n; i++)
				{ //ExtendInfoAward
					BYTE* pExtendInfoAward = pAward;
					Write16(pExtendInfoAward, 0); //len

					Write16(pExtendInfoAward, 0); //Key
					Write32(pExtendInfoAward, 0); //AddValue
					Write32(pExtendInfoAward, 0); //TotalValue
					Write8(pExtendInfoAward, 0); //ShowPriority
					Write16(pExtendInfoAward, 0); //BuyNeedScore
					Write8(pExtendInfoAward, 0); //OneMatchMaxNum

					len = pExtendInfoAward - pAward;
					Set16(pAward, (WORD)len);
					pAward += len;
				}
				Write32(pAward, 0); //SpeedCoin

				len = pAward - pActivityBox;
				Set16(pActivityBox, (WORD)len);
				pActivityBox += len;
			}
			{ //PreviewAward
				BYTE* pPreviewAward = pActivityBox;
				Write16(pPreviewAward, 0); //len

				Write32(pPreviewAward, 0); //SuperMoney
				Write32(pPreviewAward, 0); //Coupons
				Write16(pPreviewAward, 0); //ItemNum
				Write32(pPreviewAward, 0); //ItemID[]

				len = pPreviewAward - pActivityBox;
				Set16(pActivityBox, (WORD)len);
				pActivityBox += len;
			}
			Write32(pActivityBox, 0); //PresetBoxID
			Write8(pActivityBox, 0); //HasActiveAward

			len = pActivityBox - pDailyActivityBox;
			Set16(pDailyActivityBox, (WORD)len);
			pDailyActivityBox += len;
		}

		len = pDailyActivityBox - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //ActivityTaskCfg
		BYTE* pActivityTaskCfg = p;
		Write16(pActivityTaskCfg, 0); //len

		Write32(pActivityTaskCfg, 0); //TabNum
		for (size_t i = 0; i < n; i++)
		{ //ActivityTaskTab
			BYTE* pActivityTaskTab = pActivityTaskCfg;
			Write16(pActivityTaskTab, 0); //len

			Write32(pActivityTaskTab, 0); //TabOrder
			Write32(pActivityTaskTab, 0); //TabType
			Write32(pActivityTaskTab, 0); //Show
			Write32(pActivityTaskTab, 0); //TaskNum
			for (size_t i = 0; i < n; i++)
			{ //ActivityTask
				BYTE* pActivityTask = pActivityTaskTab;
				Write16(pActivityTask, 0); //len

				Write32(pActivityTask, 0); //TaskID
				Write32(pActivityTask, 0); //ActivityAward
				Write16(pActivityTask, 0); //ChildTaskNum
				Write32(pActivityTask, 0); //ChildTaskID[]

				len = pActivityTask - pActivityTaskTab;
				Set16(pActivityTaskTab, (WORD)len);
				pActivityTaskTab += len;
			}

			len = pActivityTaskTab - pActivityTaskCfg;
			Set16(pActivityTaskCfg, (WORD)len);
			pActivityTaskCfg += len;
		}

		len = pActivityTaskCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //BCNum
	for (size_t i = 0; i < n; i++)
	{ //BC
		BYTE* pBC = p;
		Write16(pBC, 0); //len

		Write16(pBC, 0); //ContentLen

		len = pBC - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //CurrentWeekActivityUsed
	{ //MultipleTimeCfg
		BYTE* pMultipleTimeCfg = p;
		Write16(pMultipleTimeCfg, 0); //len

		Write32(pMultipleTimeCfg, 0); //BeginTime
		Write32(pMultipleTimeCfg, 0); //EndTime
		Write16(pMultipleTimeCfg, 0); //MultiValue

		len = pMultipleTimeCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //CurrentWeekActivityForLotto
	Write8(p, 0); //LottoItemNum
	Write32(p, 0); //LottoItemID[]

	len = p - buf;
	SendToClient(Client, 24029, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestOpenActivityBox(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	U Time = ReadU(p);
	UINT BoxLevel = Read32(p);

}

void ResponseOpenActivityBox(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen
	Write32(p, 0); //Uin
	Write32(p, 0); //BoxLevel
	Write8(p, 0); //HasAward
	for (size_t i = 0; i < n; i++)
	{ //AwardInfo
		BYTE* pAwardInfo = p;
		Write16(pAwardInfo, 0); //len

		Write32(pAwardInfo, 0); //Exp
		Write32(pAwardInfo, 0); //Money
		Write32(pAwardInfo, 0); //SuperMoney
		Write16(pAwardInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAwardInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAwardInfo;
			Set16(pAwardInfo, (WORD)len);
			pAwardInfo += len;
		}
		Write32(pAwardInfo, 0); //Coupons
		Write32(pAwardInfo, 0); //GuildPoint
		Write32(pAwardInfo, 0); //LuckMoney
		Write8(pAwardInfo, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAwardInfo;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAwardInfo;
			Set16(pAwardInfo, (WORD)len);
			pAwardInfo += len;
		}
		Write32(pAwardInfo, 0); //SpeedCoin

		len = pAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24030, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyActivityCenterInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //TotalActivity
	Write32(p, 0); //CurrentWeekActivity
	Write32(p, 0); //LastWeekActivity
	Write32(p, 0); //CurrentDayActivity
	Write32(p, 0); //ActivityAppellcation
	Write32(p, 0); //ActivityLevel
	Write32(p, 0); //NextLevelActivity
	{ //DailyActivityBox
		BYTE* pDailyActivityBox = p;
		Write16(pDailyActivityBox, 0); //len

		Write32(pDailyActivityBox, 0); //Day
		Write32(pDailyActivityBox, 0); //BoxNum
		for (size_t i = 0; i < n; i++)
		{ //ActivityBox
			BYTE* pActivityBox = pDailyActivityBox;
			Write16(pActivityBox, 0); //len

			Write32(pActivityBox, 0); //BoxLevel
			Write32(pActivityBox, 0); //BoxType
			Write32(pActivityBox, 0); //ActivityType
			Write32(pActivityBox, 0); //NeedActivityNum
			Write32(pActivityBox, 0); //BoxStatus
			Write32(pActivityBox, 0); //BoxID
			for (size_t i = 0; i < n; i++)
			{ //Award
				BYTE* pAward = pActivityBox;
				Write16(pAward, 0); //len

				Write32(pAward, 0); //Exp
				Write32(pAward, 0); //Money
				Write32(pAward, 0); //SuperMoney
				Write16(pAward, 0); //ItemNum
				for (size_t i = 0; i < n; i++)
				{ //ItemInfo
					BYTE* pItemInfo = pAward;
					Write16(pItemInfo, 0); //len

					Write32(pItemInfo, 0); //ItemID
					Write32(pItemInfo, 0); //ItemNum
					Write32(pItemInfo, 0); //AvailPeriod
					Write8(pItemInfo, 0); //Status
					WriteUn(pItemInfo, 0); //ObtainTime
					Write32(pItemInfo, 0); //OtherAttribute
					Write16(pItemInfo, 0); //ItemType

					len = pItemInfo - pAward;
					Set16(pAward, (WORD)len);
					pAward += len;
				}
				Write32(pAward, 0); //Coupons
				Write32(pAward, 0); //GuildPoint
				Write32(pAward, 0); //LuckMoney
				Write8(pAward, 0); //ExtendInfoNum
				for (size_t i = 0; i < n; i++)
				{ //ExtendInfoAward
					BYTE* pExtendInfoAward = pAward;
					Write16(pExtendInfoAward, 0); //len

					Write16(pExtendInfoAward, 0); //Key
					Write32(pExtendInfoAward, 0); //AddValue
					Write32(pExtendInfoAward, 0); //TotalValue
					Write8(pExtendInfoAward, 0); //ShowPriority
					Write16(pExtendInfoAward, 0); //BuyNeedScore
					Write8(pExtendInfoAward, 0); //OneMatchMaxNum

					len = pExtendInfoAward - pAward;
					Set16(pAward, (WORD)len);
					pAward += len;
				}
				Write32(pAward, 0); //SpeedCoin

				len = pAward - pActivityBox;
				Set16(pActivityBox, (WORD)len);
				pActivityBox += len;
			}
			{ //PreviewAward
				BYTE* pPreviewAward = pActivityBox;
				Write16(pPreviewAward, 0); //len

				Write32(pPreviewAward, 0); //SuperMoney
				Write32(pPreviewAward, 0); //Coupons
				Write16(pPreviewAward, 0); //ItemNum
				Write32(pPreviewAward, 0); //ItemID[]

				len = pPreviewAward - pActivityBox;
				Set16(pActivityBox, (WORD)len);
				pActivityBox += len;
			}
			Write32(pActivityBox, 0); //PresetBoxID
			Write8(pActivityBox, 0); //HasActiveAward

			len = pActivityBox - pDailyActivityBox;
			Set16(pDailyActivityBox, (WORD)len);
			pDailyActivityBox += len;
		}

		len = pDailyActivityBox - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //ActivityTaskCfg
		BYTE* pActivityTaskCfg = p;
		Write16(pActivityTaskCfg, 0); //len

		Write32(pActivityTaskCfg, 0); //TabNum
		for (size_t i = 0; i < n; i++)
		{ //ActivityTaskTab
			BYTE* pActivityTaskTab = pActivityTaskCfg;
			Write16(pActivityTaskTab, 0); //len

			Write32(pActivityTaskTab, 0); //TabOrder
			Write32(pActivityTaskTab, 0); //TabType
			Write32(pActivityTaskTab, 0); //Show
			Write32(pActivityTaskTab, 0); //TaskNum
			for (size_t i = 0; i < n; i++)
			{ //ActivityTask
				BYTE* pActivityTask = pActivityTaskTab;
				Write16(pActivityTask, 0); //len

				Write32(pActivityTask, 0); //TaskID
				Write32(pActivityTask, 0); //ActivityAward
				Write16(pActivityTask, 0); //ChildTaskNum
				Write32(pActivityTask, 0); //ChildTaskID[]

				len = pActivityTask - pActivityTaskTab;
				Set16(pActivityTaskTab, (WORD)len);
				pActivityTaskTab += len;
			}

			len = pActivityTaskTab - pActivityTaskCfg;
			Set16(pActivityTaskCfg, (WORD)len);
			pActivityTaskCfg += len;
		}

		len = pActivityTaskCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //BCNum
	for (size_t i = 0; i < n; i++)
	{ //BC
		BYTE* pBC = p;
		Write16(pBC, 0); //len

		Write16(pBC, 0); //ContentLen

		len = pBC - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //CurrentWeekActivityUsed
	{ //MultipleTimeCfg
		BYTE* pMultipleTimeCfg = p;
		Write16(pMultipleTimeCfg, 0); //len

		Write32(pMultipleTimeCfg, 0); //BeginTime
		Write32(pMultipleTimeCfg, 0); //EndTime
		Write16(pMultipleTimeCfg, 0); //MultiValue

		len = pMultipleTimeCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //CurrentWeekActivityForLotto
	Write8(p, 0); //LottoItemNum
	Write32(p, 0); //LottoItemID[]

	len = p - buf;
	SendToClient(Client, 24031, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetPrivilegeIntroInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);

}

void ResponseGetPrivilegeIntroInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //CharmValueOfMonth
	Write32(p, 0); //VipLevel
	WriteUn(p, 0); //PrivilegeInfoNums
	for (size_t i = 0; i < n; i++)
	{ //PrivilegeInfos
		BYTE* pPrivilegeInfos = p;
		Write16(pPrivilegeInfos, 0); //len

		WriteUn(pPrivilegeInfos, 0); //NextLevelCharmVlaue
		WriteUn(pPrivilegeInfos, 0); //SearchTreasureNums
		WriteUn(pPrivilegeInfos, 0); //GetTreasureNums
		WriteUn(pPrivilegeInfos, 0); //CritCardNums
		WriteUn(pPrivilegeInfos, 0); //MechLargerCardNums
		WriteUn(pPrivilegeInfos, 0); //MallBuyLevel
		WriteUn(pPrivilegeInfos, 0); //HasAlreadyReceived
		WriteUn(pPrivilegeInfos, 0); //AwardItemNums
		for (size_t i = 0; i < n; i++)
		{ //FirstReachLevelItemInfos
			BYTE* pFirstReachLevelItemInfos = pPrivilegeInfos;
			Write16(pFirstReachLevelItemInfos, 0); //len

			WriteUn(pFirstReachLevelItemInfos, 0); //itemID
			WriteUn(pFirstReachLevelItemInfos, 0); //itemNums
			Write32(pFirstReachLevelItemInfos, 0); //AvailPeriod
			WriteUn(pFirstReachLevelItemInfos, 0); //isBestQuality

			len = pFirstReachLevelItemInfos - pPrivilegeInfos;
			Set16(pPrivilegeInfos, (WORD)len);
			pPrivilegeInfos += len;
		}

		len = pPrivilegeInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	WriteUn(p, 0); //AnouncementInfo[]

	len = p - buf;
	SendToClient(Client, 16055, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestReceiveFirstReachLevelAward(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT VipLevel = Read32(p);

}

void ResponseReceiveFirstReachLevelAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //VipLevel
	WriteUn(p, 0); //resultId

	len = p - buf;
	SendToClient(Client, 16056, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetExclusiveSpeedWayInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);

}

void ResponseGetExclusiveSpeedWayInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	WriteUn(p, 0); //SearchTreasureAwardItemNums
	WriteUn(p, 0); //SpeedWayNums
	for (size_t i = 0; i < n; i++)
	{ //SpeedWayInfo
		BYTE* pSpeedWayInfo = p;
		Write16(pSpeedWayInfo, 0); //len

		WriteUn(pSpeedWayInfo, 0); //MapID
		WriteUn(pSpeedWayInfo, 0); //FreeSearchCostCouponNums
		WriteUn(pSpeedWayInfo, 0); //FastSearchCostCouponNums
		WriteUn(pSpeedWayInfo, 0); //FastSearchCostTreasureSearchCouponNums
		WriteUn(pSpeedWayInfo, 0); //SpeedWayOpenStat
		WriteUn(pSpeedWayInfo, 0); //SpeedWayOpenVipLevel
		WriteUn(pSpeedWayInfo, 0); //AwardItemNums
		for (size_t i = 0; i < n; i++)
		{ //SearchTreasureAwardItems
			BYTE* pSearchTreasureAwardItems = pSpeedWayInfo;
			Write16(pSearchTreasureAwardItems, 0); //len

			WriteUn(pSearchTreasureAwardItems, 0); //itemID
			WriteUn(pSearchTreasureAwardItems, 0); //itemNums
			Write32(pSearchTreasureAwardItems, 0); //AvailPeriod
			WriteUn(pSearchTreasureAwardItems, 0); //isBestQuality

			len = pSearchTreasureAwardItems - pSpeedWayInfo;
			Set16(pSpeedWayInfo, (WORD)len);
			pSpeedWayInfo += len;
		}

		len = pSpeedWayInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	WriteUn(p, 0); //SearchTreasureRuleInfo[]

	len = p - buf;
	SendToClient(Client, 16060, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestFreeSearchTreasure(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	Un mapID = ReadUn(p);

}

void ResponseFreeSearchTresure(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	WriteUn(p, 0); //taskID
	WriteUn(p, 0); //remainFreeSearchNums
	WriteUn(p, 0); //resultId

	len = p - buf;
	SendToClient(Client, 16057, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestFastSearchTreasureInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);

}

void ResponseFastSearchTreasureInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	WriteUn(p, 0); //costCouponsNums
	Write32(p, 0); //AwardNums
	for (size_t i = 0; i < n; i++)
	{ //FastSearchTreasureAwardInfos
		BYTE* pFastSearchTreasureAwardInfos = p;
		Write16(pFastSearchTreasureAwardInfos, 0); //len

		WriteUn(pFastSearchTreasureAwardInfos, 0); //itemID
		WriteUn(pFastSearchTreasureAwardInfos, 0); //itemNums
		Write32(pFastSearchTreasureAwardInfos, 0); //AvailPeriod
		WriteUn(pFastSearchTreasureAwardInfos, 0); //isBestQuality

		len = pFastSearchTreasureAwardInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 16058, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestStartFastSearchTreasure(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	Un mapID = ReadUn(p);
	Un searchNums = ReadUn(p);

}

void ResponseStartFastSearchTreasure(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	WriteUn(p, 0); //remainSearchTreasureCoupNums
	WriteUn(p, 0); //resultId
	Write32(p, 0); //AwardNums
	for (size_t i = 0; i < n; i++)
	{ //FastSearchTreasureAwardInfos
		BYTE* pFastSearchTreasureAwardInfos = p;
		Write16(pFastSearchTreasureAwardInfos, 0); //len

		WriteUn(pFastSearchTreasureAwardInfos, 0); //itemID
		WriteUn(pFastSearchTreasureAwardInfos, 0); //itemNums
		Write32(pFastSearchTreasureAwardInfos, 0); //AvailPeriod
		WriteUn(pFastSearchTreasureAwardInfos, 0); //isBestQuality

		len = pFastSearchTreasureAwardInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 16059, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestBuyConsumeVipPrivilegeItem(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	Un ItemLevel = ReadUn(p);

}

void ResponseBuyConsumsVipPrivilegeItem(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	WriteUn(p, 0); //buyReturnCode

	len = p - buf;
	SendToClient(Client, 16061, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyClientUpdateConsumeVipRealteInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	{ //ConsumeVipRelateInfo
		BYTE* pConsumeVipRelateInfo = p;
		Write16(pConsumeVipRelateInfo, 0); //len

		WriteUn(pConsumeVipRelateInfo, 0); //VipLevel
		WriteUn(pConsumeVipRelateInfo, 0); //CharmValueOfMonth
		WriteUn(pConsumeVipRelateInfo, 0); //SearchTreasureNums
		WriteUn(pConsumeVipRelateInfo, 0); //GetTreasureNums

		len = pConsumeVipRelateInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 16062, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetFreeSearchTreasureAward(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	Un mapID = ReadUn(p);

}

void ResponseGetFreeSearchTreasureAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	WriteUn(p, 0); //resultId
	Write32(p, 0); //AwardNums
	for (size_t i = 0; i < n; i++)
	{ //FreeSearchTreasureAwardInfos
		BYTE* pFreeSearchTreasureAwardInfos = p;
		Write16(pFreeSearchTreasureAwardInfos, 0); //len

		WriteUn(pFreeSearchTreasureAwardInfos, 0); //itemID
		WriteUn(pFreeSearchTreasureAwardInfos, 0); //itemNums
		Write32(pFreeSearchTreasureAwardInfos, 0); //AvailPeriod
		WriteUn(pFreeSearchTreasureAwardInfos, 0); //isBestQuality

		len = pFreeSearchTreasureAwardInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 16063, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyPresentItemInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //MaxPresentNum
	Write32(p, 0); //ItemNum

	len = p - buf;
	SendToClient(Client, 24033, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestPresentItem(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT DstUin = Read32(p);
	{ //PresentItem
		BYTE* pPresentItem = p;
		len = Read16(pPresentItem);

		int ItemID = Read32(pPresentItem);
		int ItemNum = Read32(pPresentItem);
		int ItemPeriod = Read32(pPresentItem);

		p += len;
	}

}

void ResponsePresentItem(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen
	Write32(p, 0); //Uin
	Write32(p, 0); //DstUin
	{ //PresentItem
		BYTE* pPresentItem = p;
		Write16(pPresentItem, 0); //len

		Write32(pPresentItem, 0); //ItemID
		Write32(pPresentItem, 0); //ItemNum
		Write32(pPresentItem, 0); //ItemPeriod

		len = pPresentItem - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24034, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGSvrdFullServiceBugletInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	{ //fullServiceBugletInfo
		BYTE* pfullServiceBugletInfo = p;
		len = Read16(pfullServiceBugletInfo);

		Un SrcUin = ReadUn(pfullServiceBugletInfo);
		char[] SrcNickName[] = ReadString(pfullServiceBugletInfo);
		char[] SrcGuildName[] = ReadString(pfullServiceBugletInfo);
		bool Gender = Read8(pfullServiceBugletInfo);
		short ContentLength = Read16(pfullServiceBugletInfo);
		bool BugletType = Read8(pfullServiceBugletInfo);
		UINT Identify = Read32(pfullServiceBugletInfo);
		Un VipFlag = ReadUn(pfullServiceBugletInfo);
		U Contentid[] = ReadU(pfullServiceBugletInfo);
		{ //NobleInfo
			BYTE* pNobleInfo = pfullServiceBugletInfo;
			len = Read16(pNobleInfo);

			UINT NobleID = Read32(pNobleInfo);
			UCHAR NobleLevel = Read8(pNobleInfo);
			UINT NoblePoint = Read32(pNobleInfo);
			UINT NobleLeftDays = Read32(pNobleInfo);

			pfullServiceBugletInfo += len;
		}
		{ //GuildVipBaseInfo
			BYTE* pGuildVipBaseInfo = pfullServiceBugletInfo;
			len = Read16(pGuildVipBaseInfo);

			UCHAR GuildVipLevel = Read8(pGuildVipBaseInfo);
			UINT GuildVipPoint = Read32(pGuildVipBaseInfo);

			pfullServiceBugletInfo += len;
		}
		UCHAR HasLoverVip = Read8(pfullServiceBugletInfo);
		for (size_t i = 0; i < n; i++)
		{ //LoverVipInfo
			BYTE* pLoverVipInfo = pfullServiceBugletInfo;
			len = Read16(pLoverVipInfo);

			UCHAR LoverVipLevel = Read8(pLoverVipInfo);
			UINT LoverVipPoint = Read32(pLoverVipInfo);
			UCHAR GrowRate = Read8(pLoverVipInfo);

			pfullServiceBugletInfo += len;
		}
		UCHAR GardenLevel = Read8(pfullServiceBugletInfo);
		Un ConsumeVipLevel = ReadUn(pfullServiceBugletInfo);
		{ //EmperorInfo
			BYTE* pEmperorInfo = pfullServiceBugletInfo;
			len = Read16(pEmperorInfo);

			UCHAR EmperorLevel = Read8(pEmperorInfo);
			UINT EmperorPoint = Read32(pEmperorInfo);
			UINT EmperorLeftDays = Read32(pEmperorInfo);
			UCHAR EmperorGrowRate = Read8(pEmperorInfo);

			pfullServiceBugletInfo += len;
		}
		UCHAR HasCarLottoryRecord = Read8(pfullServiceBugletInfo);
		for (size_t i = 0; i < n; i++)
		{ //CarLottoryRecord
			BYTE* pCarLottoryRecord = pfullServiceBugletInfo;
			len = Read16(pCarLottoryRecord);

			UINT AwardTime = Read32(pCarLottoryRecord);
			int ItemID = Read32(pCarLottoryRecord);
			int ItemNum = Read32(pCarLottoryRecord);
			int AvailPeriod = Read32(pCarLottoryRecord);

			pfullServiceBugletInfo += len;
		}

		p += len;
	}
	bool AssigneServer = Read8(p);
	for (size_t i = 0; i < n; i++)
	{ //ServerInfo
		BYTE* pServerInfo = p;
		len = Read16(pServerInfo);

		UCHAR AssignServerNum = Read8(pServerInfo);
		UINT ServerFE[] = Read32(pServerInfo);

		p += len;
	}

}

void NotifyFullServiceBugletInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	{ //fullServiceBugletInfo
		BYTE* pfullServiceBugletInfo = p;
		Write16(pfullServiceBugletInfo, 0); //len

		WriteUn(pfullServiceBugletInfo, 0); //SrcUin
		WriteString(pfullServiceBugletInfo, 0); //SrcNickName[]
		WriteString(pfullServiceBugletInfo, 0); //SrcGuildName[]
		Write8(pfullServiceBugletInfo, 0); //Gender
		Write16(pfullServiceBugletInfo, 0); //ContentLength
		Write8(pfullServiceBugletInfo, 0); //BugletType
		Write32(pfullServiceBugletInfo, 0); //Identify
		WriteUn(pfullServiceBugletInfo, 0); //VipFlag
		WriteU(pfullServiceBugletInfo, 0); //Contentid[]
		{ //NobleInfo
			BYTE* pNobleInfo = pfullServiceBugletInfo;
			Write16(pNobleInfo, 0); //len

			Write32(pNobleInfo, 0); //NobleID
			Write8(pNobleInfo, 0); //NobleLevel
			Write32(pNobleInfo, 0); //NoblePoint
			Write32(pNobleInfo, 0); //NobleLeftDays

			len = pNobleInfo - pfullServiceBugletInfo;
			Set16(pfullServiceBugletInfo, (WORD)len);
			pfullServiceBugletInfo += len;
		}
		{ //GuildVipBaseInfo
			BYTE* pGuildVipBaseInfo = pfullServiceBugletInfo;
			Write16(pGuildVipBaseInfo, 0); //len

			Write8(pGuildVipBaseInfo, 0); //GuildVipLevel
			Write32(pGuildVipBaseInfo, 0); //GuildVipPoint

			len = pGuildVipBaseInfo - pfullServiceBugletInfo;
			Set16(pfullServiceBugletInfo, (WORD)len);
			pfullServiceBugletInfo += len;
		}
		Write8(pfullServiceBugletInfo, 0); //HasLoverVip
		for (size_t i = 0; i < n; i++)
		{ //LoverVipInfo
			BYTE* pLoverVipInfo = pfullServiceBugletInfo;
			Write16(pLoverVipInfo, 0); //len

			Write8(pLoverVipInfo, 0); //LoverVipLevel
			Write32(pLoverVipInfo, 0); //LoverVipPoint
			Write8(pLoverVipInfo, 0); //GrowRate

			len = pLoverVipInfo - pfullServiceBugletInfo;
			Set16(pfullServiceBugletInfo, (WORD)len);
			pfullServiceBugletInfo += len;
		}
		Write8(pfullServiceBugletInfo, 0); //GardenLevel
		WriteUn(pfullServiceBugletInfo, 0); //ConsumeVipLevel
		{ //EmperorInfo
			BYTE* pEmperorInfo = pfullServiceBugletInfo;
			Write16(pEmperorInfo, 0); //len

			Write8(pEmperorInfo, 0); //EmperorLevel
			Write32(pEmperorInfo, 0); //EmperorPoint
			Write32(pEmperorInfo, 0); //EmperorLeftDays
			Write8(pEmperorInfo, 0); //EmperorGrowRate

			len = pEmperorInfo - pfullServiceBugletInfo;
			Set16(pfullServiceBugletInfo, (WORD)len);
			pfullServiceBugletInfo += len;
		}
		Write8(pfullServiceBugletInfo, 0); //HasCarLottoryRecord
		for (size_t i = 0; i < n; i++)
		{ //CarLottoryRecord
			BYTE* pCarLottoryRecord = pfullServiceBugletInfo;
			Write16(pCarLottoryRecord, 0); //len

			Write32(pCarLottoryRecord, 0); //AwardTime
			Write32(pCarLottoryRecord, 0); //ItemID
			Write32(pCarLottoryRecord, 0); //ItemNum
			Write32(pCarLottoryRecord, 0); //AvailPeriod

			len = pCarLottoryRecord - pfullServiceBugletInfo;
			Set16(pfullServiceBugletInfo, (WORD)len);
			pfullServiceBugletInfo += len;
		}

		len = pfullServiceBugletInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestWakeKartInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT WakeKartID = Read32(p);

}

void ResponseWakeKartInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //KartID
	Write16(p, 0); //WakeResult
	Write16(p, 0); //CanExchange
	WriteUn(p, 0); //isCanCrit
	Write16(p, 0); //WakedLevel
	Write16(p, 0); //AccAddValue
	Write16(p, 0); //JetAddValue
	Write16(p, 0); //SpeedAddValue
	Write16(p, 0); //SJetAddValue
	Write16(p, 0); //NextLevelAccAddValue
	Write16(p, 0); //NextLevelJetAddValue
	Write16(p, 0); //NextLevelSpeedAddValue
	Write16(p, 0); //NextLevelSJetAddValue
	Write16(p, 0); //CostSuperMoney
	Write16(p, 0); //CostWakeCoupons
	Write16(p, 0); //NeedItemNums
	Write32(p, 0); //NeedItemID[]
	Write16(p, 0); //AwardItemNums
	for (size_t i = 0; i < n; i++)
	{ //KartWakeAwardItems
		BYTE* pKartWakeAwardItems = p;
		Write16(pKartWakeAwardItems, 0); //len

		WriteUn(pKartWakeAwardItems, 0); //itemID
		WriteUn(pKartWakeAwardItems, 0); //itemNums
		Write32(pKartWakeAwardItems, 0); //AvailPeriod
		WriteUn(pKartWakeAwardItems, 0); //isBestQuality

		len = pKartWakeAwardItems - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 16066, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetSpecifiedWakeKartInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT WakeKartID = Read32(p);

}

void ResponseGetSpecifiedWakeKartInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //KartID
	Write16(p, 0); //ResultID
	{ //WakeKartInfo
		BYTE* pWakeKartInfo = p;
		Write16(pWakeKartInfo, 0); //len

		Write32(pWakeKartInfo, 0); //Uin
		Write32(pWakeKartInfo, 0); //KartID
		Write32(pWakeKartInfo, 0); //KartType
		WriteUn(pWakeKartInfo, 0); //critProgress
		Write16(pWakeKartInfo, 0); //CanExchange
		WriteUn(pWakeKartInfo, 0); //isCanCrit
		WriteUn(pWakeKartInfo, 0); //isWaked
		WriteUn(pWakeKartInfo, 0); //isExchanged
		WriteUn(pWakeKartInfo, 0); //currentWakeLevel
		WriteUn(pWakeKartInfo, 0); //wakeType
		WriteUn(pWakeKartInfo, 0); //wakeKartType
		Write16(pWakeKartInfo, 0); //JetAddValue
		Write16(pWakeKartInfo, 0); //SpeedAddValue
		Write16(pWakeKartInfo, 0); //SJetAddValue
		Write16(pWakeKartInfo, 0); //AccAddValue
		Write16(pWakeKartInfo, 0); //NextLevelJetAddValue
		Write16(pWakeKartInfo, 0); //NextLevelAccAddValue
		Write16(pWakeKartInfo, 0); //NextLevelSpeedAddValue
		Write16(pWakeKartInfo, 0); //NextLevelSJetAddValue
		Write16(pWakeKartInfo, 0); //CostSuperMoney
		Write16(pWakeKartInfo, 0); //CostWakeCoupons
		Write16(pWakeKartInfo, 0); //NeedItemNums
		Write32(pWakeKartInfo, 0); //NeedItemID[]

		len = pWakeKartInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 16067, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetAllWakeKartInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);

}

void ResponseGetAllWakeKartInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //WakeKartInfoNums
	for (size_t i = 0; i < n; i++)
	{ //WakeKartInfos
		BYTE* pWakeKartInfos = p;
		Write16(pWakeKartInfos, 0); //len

		Write32(pWakeKartInfos, 0); //Uin
		Write32(pWakeKartInfos, 0); //KartID
		Write32(pWakeKartInfos, 0); //KartType
		WriteUn(pWakeKartInfos, 0); //critProgress
		Write16(pWakeKartInfos, 0); //CanExchange
		WriteUn(pWakeKartInfos, 0); //isCanCrit
		WriteUn(pWakeKartInfos, 0); //isWaked
		WriteUn(pWakeKartInfos, 0); //isExchanged
		WriteUn(pWakeKartInfos, 0); //currentWakeLevel
		WriteUn(pWakeKartInfos, 0); //wakeType
		WriteUn(pWakeKartInfos, 0); //wakeKartType
		Write16(pWakeKartInfos, 0); //JetAddValue
		Write16(pWakeKartInfos, 0); //SpeedAddValue
		Write16(pWakeKartInfos, 0); //SJetAddValue
		Write16(pWakeKartInfos, 0); //AccAddValue
		Write16(pWakeKartInfos, 0); //NextLevelJetAddValue
		Write16(pWakeKartInfos, 0); //NextLevelAccAddValue
		Write16(pWakeKartInfos, 0); //NextLevelSpeedAddValue
		Write16(pWakeKartInfos, 0); //NextLevelSJetAddValue
		Write16(pWakeKartInfos, 0); //CostSuperMoney
		Write16(pWakeKartInfos, 0); //CostWakeCoupons
		Write16(pWakeKartInfos, 0); //NeedItemNums
		Write32(pWakeKartInfos, 0); //NeedItemID[]

		len = pWakeKartInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	WriteString(p, 0); //NoteInfo[]

	len = p - buf;
	SendToClient(Client, 16068, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestKartPartCritInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT KartID = Read32(p);

}

void ResponseKartPartCritInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //KartID
	Write16(p, 0); //CritResult
	WriteUn(p, 0); //isCanCrit
	Write16(p, 0); //AwardItemNum
	for (size_t i = 0; i < n; i++)
	{ //KartWakeAwardItems
		BYTE* pKartWakeAwardItems = p;
		Write16(pKartWakeAwardItems, 0); //len

		WriteUn(pKartWakeAwardItems, 0); //itemID
		WriteUn(pKartWakeAwardItems, 0); //itemNums
		Write32(pKartWakeAwardItems, 0); //AvailPeriod
		WriteUn(pKartWakeAwardItems, 0); //isBestQuality

		len = pKartWakeAwardItems - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 16069, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestExchangeWakedKartInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT WakeKartID = Read32(p);

}

void ResponseExchangeWakedKartInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //WakeKartID
	Write16(p, 0); //ExchangeResult

	len = p - buf;
	SendToClient(Client, 16070, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyPlayerLimitedWakeKartInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	WriteUn(p, 0); //uilimitInfoNums
	for (size_t i = 0; i < n; i++)
	{ //wakeKartLimitedItemToKartInfos
		BYTE* pwakeKartLimitedItemToKartInfos = p;
		Write16(pwakeKartLimitedItemToKartInfos, 0); //len

		Write32(pwakeKartLimitedItemToKartInfos, 0); //LimitedItemID
		Write32(pwakeKartLimitedItemToKartInfos, 0); //KartID

		len = pwakeKartLimitedItemToKartInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 16072, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyPlayerRaceCardAddInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //RaceCardNums
	for (size_t i = 0; i < n; i++)
	{ //RaceCardAddValueInfo
		BYTE* pRaceCardAddValueInfo = p;
		Write16(pRaceCardAddValueInfo, 0); //len

		Write32(pRaceCardAddValueInfo, 0); //RaceCardID
		Write32(pRaceCardAddValueInfo, 0); //AddValue

		len = pRaceCardAddValueInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 16077, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyPlayerEquippedWakedKartAddAttributeValueInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //KartID
	Write16(p, 0); //AccAddValue
	Write16(p, 0); //SpeedAddValue
	Write16(p, 0); //JetAddValue
	Write16(p, 0); //SJetAddValue

	len = p - buf;
	SendToClient(Client, 16074, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyDBPlayerKartWakeInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //KartNums
	for (size_t i = 0; i < n; i++)
	{ //WakeKartInfo
		BYTE* pWakeKartInfo = p;
		Write16(pWakeKartInfo, 0); //len

		Write32(pWakeKartInfo, 0); //Uin
		Write32(pWakeKartInfo, 0); //KartID
		Write32(pWakeKartInfo, 0); //KartType
		Write32(pWakeKartInfo, 0); //CurrentCostMoney
		WriteUn(pWakeKartInfo, 0); //critProgress
		WriteUn(pWakeKartInfo, 0); //isWaked
		WriteUn(pWakeKartInfo, 0); //isExchanged
		WriteUn(pWakeKartInfo, 0); //currentWakeLevel
		WriteUn(pWakeKartInfo, 0); //wakeType
		WriteUn(pWakeKartInfo, 0); //wakeKartType
		Write16(pWakeKartInfo, 0); //WeightAddValue
		Write16(pWakeKartInfo, 0); //JetAddValue
		Write16(pWakeKartInfo, 0); //SpeedAddValue
		Write16(pWakeKartInfo, 0); //SJetAddValue
		Write16(pWakeKartInfo, 0); //AccAddValue
		Write16(pWakeKartInfo, 0); //FinalJetAddValue
		Write16(pWakeKartInfo, 0); //FinalSpeedAddValue
		Write16(pWakeKartInfo, 0); //FinalSJetAddValue
		Write16(pWakeKartInfo, 0); //FinalAccAddValue
		Write32(pWakeKartInfo, 0); //CritLevelOneCostMoney
		Write32(pWakeKartInfo, 0); //CritLevelTwoCostMoney
		Write32(pWakeKartInfo, 0); //CritLevelThreeCostMoney

		len = pWakeKartInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestDBUpdatePlayerKartWakeInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT KartID = Read32(p);
	{ //WakeKartInfo
		BYTE* pWakeKartInfo = p;
		len = Read16(pWakeKartInfo);

		UINT Uin = Read32(pWakeKartInfo);
		UINT KartID = Read32(pWakeKartInfo);
		UINT KartType = Read32(pWakeKartInfo);
		UINT CurrentCostMoney = Read32(pWakeKartInfo);
		Un critProgress = ReadUn(pWakeKartInfo);
		Un isWaked = ReadUn(pWakeKartInfo);
		Un isExchanged = ReadUn(pWakeKartInfo);
		Un currentWakeLevel = ReadUn(pWakeKartInfo);
		Un wakeType = ReadUn(pWakeKartInfo);
		Un wakeKartType = ReadUn(pWakeKartInfo);
		short WeightAddValue = Read16(pWakeKartInfo);
		short JetAddValue = Read16(pWakeKartInfo);
		short SpeedAddValue = Read16(pWakeKartInfo);
		short SJetAddValue = Read16(pWakeKartInfo);
		short AccAddValue = Read16(pWakeKartInfo);
		short FinalJetAddValue = Read16(pWakeKartInfo);
		short FinalSpeedAddValue = Read16(pWakeKartInfo);
		short FinalSJetAddValue = Read16(pWakeKartInfo);
		short FinalAccAddValue = Read16(pWakeKartInfo);
		UINT CritLevelOneCostMoney = Read32(pWakeKartInfo);
		UINT CritLevelTwoCostMoney = Read32(pWakeKartInfo);
		UINT CritLevelThreeCostMoney = Read32(pWakeKartInfo);

		p += len;
	}

}

void RequestDBDeletePlayerKartWakeInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT KartID = Read32(p);

}

void NotifyRaceCardChangeInfoInRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //ChangedUin
	Write16(p, 0); //RaceCardNums
	for (size_t i = 0; i < n; i++)
	{ //RaceCardAddValueInfo
		BYTE* pRaceCardAddValueInfo = p;
		Write16(pRaceCardAddValueInfo, 0); //len

		Write32(pRaceCardAddValueInfo, 0); //RaceCardID
		Write32(pRaceCardAddValueInfo, 0); //AddValue

		len = pRaceCardAddValueInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 16075, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestWorldEscapeInviteList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR Type = Read8(p);

}

void ResponseWorldEscapeInviteList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write8(p, 0); //InfoNum
	for (size_t i = 0; i < n; i++)
	{ //Infos
		BYTE* pInfos = p;
		Write16(pInfos, 0); //len

		Write32(pInfos, 0); //Uin
		WriteString(pInfos, 0); //NickName[]
		Write8(pInfos, 0); //Flag
		Write32(pInfos, 0); //Experience
		Write8(pInfos, 0); //Sort

		len = pInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24046, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetDropInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetDropInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen
	Write32(p, 0); //ItemId
	Write32(p, 0); //TotalDropCount
	Write32(p, 0); //ParticipatedPlayerNum
	Write32(p, 0); //TimeLeftToOpenLottery
	Write32(p, 0); //LotteryNum
	for (size_t i = 0; i < n; i++)
	{ //DropLotteryAwardInfo
		BYTE* pDropLotteryAwardInfo = p;
		Write16(pDropLotteryAwardInfo, 0); //len

		{ //Award
			BYTE* pAward = pDropLotteryAwardInfo;
			Write16(pAward, 0); //len

			Write32(pAward, 0); //Exp
			Write32(pAward, 0); //Money
			Write32(pAward, 0); //SuperMoney
			Write16(pAward, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAward;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAward;
				Set16(pAward, (WORD)len);
				pAward += len;
			}
			Write32(pAward, 0); //Coupons
			Write32(pAward, 0); //GuildPoint
			Write32(pAward, 0); //LuckMoney
			Write8(pAward, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAward;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAward;
				Set16(pAward, (WORD)len);
				pAward += len;
			}
			Write32(pAward, 0); //SpeedCoin

			len = pAward - pDropLotteryAwardInfo;
			Set16(pDropLotteryAwardInfo, (WORD)len);
			pDropLotteryAwardInfo += len;
		}
		Write32(pDropLotteryAwardInfo, 0); //LotteryPlayerCount
		Write32(pDropLotteryAwardInfo, 0); //LotteryTime
		Write8(pDropLotteryAwardInfo, 0); //LotteryStatus
		Write8(pDropLotteryAwardInfo, 0); //SelfLotteryStatus
		Write32(pDropLotteryAwardInfo, 0); //DemandOfDropsToOpenLottery
		Write32(pDropLotteryAwardInfo, 0); //DropsInWishingWell

		len = pDropLotteryAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //BroadCastLen

	len = p - buf;
	SendToClient(Client, 24043, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetDropList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT LotteryTime = Read32(p);

}

void ResponseGetDropList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen
	{ //DropLotteryMemberListForList
		BYTE* pDropLotteryMemberListForList = p;
		Write16(pDropLotteryMemberListForList, 0); //len

		Write32(pDropLotteryMemberListForList, 0); //MemberNum
		for (size_t i = 0; i < n; i++)
		{ //DropLotteryMemberInfoForList
			BYTE* pDropLotteryMemberInfoForList = pDropLotteryMemberListForList;
			Write16(pDropLotteryMemberInfoForList, 0); //len

			Write32(pDropLotteryMemberInfoForList, 0); //Uin
			WriteString(pDropLotteryMemberInfoForList, 0); //NickName[]
			Write32(pDropLotteryMemberInfoForList, 0); //Charm

			len = pDropLotteryMemberInfoForList - pDropLotteryMemberListForList;
			Set16(pDropLotteryMemberListForList, (WORD)len);
			pDropLotteryMemberListForList += len;
		}

		len = pDropLotteryMemberListForList - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24045, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestBatchDeleteItem(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int ItemNum = Read32(p);
	int[] ItemID[] = Read32(p);

}

void ResponseBatchDeleteItem(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	WriteUn(p, 0); //SuccessDeleteItemNum
	Write32(p, 0); //SuccessDeleteItemID[]
	WriteUn(p, 0); //FailDeleteItemNum
	for (size_t i = 0; i < n; i++)
	{ //FailDeleteItemInfo
		BYTE* pFailDeleteItemInfo = p;
		Write16(pFailDeleteItemInfo, 0); //len

		Write32(pFailDeleteItemInfo, 0); //ItemID
		Write8(pFailDeleteItemInfo, 0); //ReasonLen

		len = pFailDeleteItemInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 21035, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestDoWareHouseOperationBatch(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int ItemNum = Read32(p);
	int[] ItemID[] = Read32(p);
	bool OpType = Read8(p);

}

void ResponseWareHouseOperationBatch(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write8(p, 0); //OpType
	Write32(p, 0); //SuccessItemNum
	for (size_t i = 0; i < n; i++)
	{ //SuccessPlayerDBItemInfo
		BYTE* pSuccessPlayerDBItemInfo = p;
		Write16(pSuccessPlayerDBItemInfo, 0); //len

		Write32(pSuccessPlayerDBItemInfo, 0); //ItemID
		Write32(pSuccessPlayerDBItemInfo, 0); //ItemNum
		Write32(pSuccessPlayerDBItemInfo, 0); //AvailPeriod
		Write8(pSuccessPlayerDBItemInfo, 0); //Status
		WriteUn(pSuccessPlayerDBItemInfo, 0); //ObtainTime
		Write32(pSuccessPlayerDBItemInfo, 0); //OtherAttribute
		Write16(pSuccessPlayerDBItemInfo, 0); //ItemType

		len = pSuccessPlayerDBItemInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //FailItemNum
	for (size_t i = 0; i < n; i++)
	{ //FailBatchOperationInfo
		BYTE* pFailBatchOperationInfo = p;
		Write16(pFailBatchOperationInfo, 0); //len

		Write16(pFailBatchOperationInfo, 0); //ResultID
		{ //ItemInfo
			BYTE* pItemInfo = pFailBatchOperationInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pFailBatchOperationInfo;
			Set16(pFailBatchOperationInfo, (WORD)len);
			pFailBatchOperationInfo += len;
		}

		len = pFailBatchOperationInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 21036, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestTestMsgRTT(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT SockTime = Read32(p);
	USHORT SockIndex = Read16(p);
	UINT TcpRecvSec = Read32(p);
	UINT TcpRecvUSec = Read32(p);
	UINT GsvrdRecvSec = Read32(p);
	UINT GsvrdRecvUSec = Read32(p);

}

void ResponseTestMsgRTT(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //TcpRecvSec
	Write32(p, 0); //TcpRecvUSec
	Write32(p, 0); //GsvrdRecvSec
	Write32(p, 0); //GsvrdRecvUSec
	Write32(p, 0); //GsvrdEventSec
	Write32(p, 0); //GsvrdEventUSec
	Write32(p, 0); //GsvrdSendSec
	Write32(p, 0); //GsvrdSendUSec
	Write32(p, 0); //TcpSendSec
	Write32(p, 0); //TcpSendUSec
	Write32(p, 0); //SockTime
	Write16(p, 0); //SockIndex

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GGetPlayerStatus(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT Num = Read16(p);
	UINT[] Uins[] = Read32(p);

}

void ResponseC2GGetPlayerStatus(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //Num
	for (size_t i = 0; i < n; i++)
	{ //PlayerStatus
		BYTE* pPlayerStatus = p;
		Write16(pPlayerStatus, 0); //len

		Write32(pPlayerStatus, 0); //Uin
		Write8(pPlayerStatus, 0); //IsOnLine
		Write32(pPlayerStatus, 0); //PlayerStatus
		Write16(pPlayerStatus, 0); //ServerType
		Write8(pPlayerStatus, 0); //GVoiceState

		len = pPlayerStatus - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24053, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GModifyFriendRemarkName(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	{ //FriendOtherInfo
		BYTE* pFriendOtherInfo = p;
		len = Read16(pFriendOtherInfo);

		UINT FriendUin = Read32(pFriendOtherInfo);
		UCHAR RemarkNameLen = Read8(pFriendOtherInfo);

		p += len;
	}

}

void ResponseC2GModifyFriendRemarkName(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	{ //FriendOtherInfo
		BYTE* pFriendOtherInfo = p;
		Write16(pFriendOtherInfo, 0); //len

		Write32(pFriendOtherInfo, 0); //FriendUin
		Write8(pFriendOtherInfo, 0); //RemarkNameLen

		len = pFriendOtherInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24051, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyG2CFriendRemarkName(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //Num
	for (size_t i = 0; i < n; i++)
	{ //FriendOtherInfos
		BYTE* pFriendOtherInfos = p;
		Write16(pFriendOtherInfos, 0); //len

		Write32(pFriendOtherInfos, 0); //FriendUin
		Write8(pFriendOtherInfos, 0); //RemarkNameLen

		len = pFriendOtherInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24052, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestG2DOpFriendRemarkName(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR Op = Read8(p);

}

void ResponseG2DOpFriendRemarkName(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write32(p, 0); //Time
	Write8(p, 0); //Op

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GFriendRemarkName(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void RequestStoreGameMode(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int FavBtnNum = Read32(p);
	UINT StoreFavIndex[] = Read32(p);

}

void ResponseStoreGameMode(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write32(p, 0); //FavBtnNum
	Write32(p, 0); //StoreFavIndex[]

	len = p - buf;
	SendToClient(Client, 24056, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyStoredGameMode(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //FavBtnNum
	Write32(p, 0); //StoreGameModeFlag[]

	len = p - buf;
	SendToClient(Client, 24071, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyGangsterCfg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	{ //GangsterCfg
		BYTE* pGangsterCfg = p;
		Write16(pGangsterCfg, 0); //len

		{ //BaseCfg
			BYTE* pBaseCfg = pGangsterCfg;
			Write16(pBaseCfg, 0); //len

			Write32(pBaseCfg, 0); //EnableCreateRoomFlag
			Write32(pBaseCfg, 0); //InitGansterHp
			Write32(pBaseCfg, 0); //InitPoliceHp
			Write32(pBaseCfg, 0); //GansterRebornWaitTime
			Write32(pBaseCfg, 0); //GansterImmuneTime
			Write32(pBaseCfg, 0); //PoliceRebornWaitTime
			Write32(pBaseCfg, 0); //PoliceImmuneTime
			Write32(pBaseCfg, 0); //AddEnergyByStrikeDoor
			Write32(pBaseCfg, 0); //AddEnergyByStrikeCar
			Write32(pBaseCfg, 0); //DropHpToEnergyRate
			Write32(pBaseCfg, 0); //MaxEnergy
			Write32(pBaseCfg, 0); //GansterAddScoreByKill
			Write32(pBaseCfg, 0); //PoliceDeductScoreForDead
			Write32(pBaseCfg, 0); //GansterAddScoreByCrossRound
			Write32(pBaseCfg, 0); //PoliceAddScoreByKill
			Write32(pBaseCfg, 0); //PoliceAddScoreByCrossRound
			Write32(pBaseCfg, 0); //GansterResetPointNum
			Write32(pBaseCfg, 0); //PoliceResetPointNum
			Write32(pBaseCfg, 0); //PkDistance
			Write32(pBaseCfg, 0); //PkPrepareTime
			Write32(pBaseCfg, 0); //PkHoldonTime
			Write32(pBaseCfg, 0); //GansterPkOverLoserDropHp
			Write32(pBaseCfg, 0); //PolicePkOverLoserDropHp
			Write32(pBaseCfg, 0); //PkDropHpPerSecondGanster
			Write32(pBaseCfg, 0); //GansterRiskCompensationDistance
			Write32(pBaseCfg, 0); //GansterRiskCompensationDropHpPerSecond
			Write32(pBaseCfg, 0); //GansterRiskCompensationIncN20Rate
			Write32(pBaseCfg, 0); //PoliceRiskCompensationDistance
			Write32(pBaseCfg, 0); //PoliceRiskCompensationDropHpPerSecond
			Write32(pBaseCfg, 0); //PoliceRiskCompensationIncN20Rate
			Write32(pBaseCfg, 0); //GansterRaceBeginCountDownTime
			Write32(pBaseCfg, 0); //GansterMatchShowTime
			Write32(pBaseCfg, 0); //WinTeamScore
			Write32(pBaseCfg, 0); //DeductPoliceScoreByLeave
			Write32(pBaseCfg, 0); //DeductGansterScoreByLeave
			Write32(pBaseCfg, 0); //MultipleResult
			Write32(pBaseCfg, 0); //MaxFragmentOneDay
			Write32(pBaseCfg, 0); //MaxMultipleGameOneDay
			Write32(pBaseCfg, 0); //FragmentItemId
			Write32(pBaseCfg, 0); //LoseStreakCountThreshold
			Write32(pBaseCfg, 0); //DriftActiveProDensityLevel
			Write32(pBaseCfg, 0); //Helicopter_Missile_Count
			Write32(pBaseCfg, 0); //Helicopter_SwordEff_Count
			Write32(pBaseCfg, 0); //PKingSpeed_Space
			Write32(pBaseCfg, 0); //PKingSpeed_NO2Add
			Write32(pBaseCfg, 0); //PKingSpeed_RecoverTime
			Write32(pBaseCfg, 0); //PKingSpeed_NO2
			Write32(pBaseCfg, 0); //PKingSpeed_Normal
			Write32(pBaseCfg, 0); //PK_JumpToResult_Time
			Write32(pBaseCfg, 0); //Helicopter_Missile_LifeTime
			Write32(pBaseCfg, 0); //Helicopter_Show_Time
			Write32(pBaseCfg, 0); //Helicopter_Attack_Time
			Write32(pBaseCfg, 0); //Helicopter_Full_Limit_Time
			Write32(pBaseCfg, 0); //Helicopter_Attack_SpaceTime
			Write32(pBaseCfg, 0); //Helicopter_Explode_Height
			Write32(pBaseCfg, 0); //Skill_Gun_SpeedFator
			Write32(pBaseCfg, 0); //PKLeaveDistance
			Write32(pBaseCfg, 0); //SkillBeginDeltaTime
			Write32(pBaseCfg, 0); //MultipleGameBeginTime
			Write32(pBaseCfg, 0); //MultipleGameEndTime
			WriteUn(pBaseCfg, 0); //isMultipleTime
			Write32(pBaseCfg, 0); //MultiPleAwardPowering
			Write32(pBaseCfg, 0); //MultipleAwardTimes

			len = pBaseCfg - pGangsterCfg;
			Set16(pGangsterCfg, (WORD)len);
			pGangsterCfg += len;
		}
		Write32(pGangsterCfg, 0); //MapCfgNum
		for (size_t i = 0; i < n; i++)
		{ //MapCfg
			BYTE* pMapCfg = pGangsterCfg;
			Write16(pMapCfg, 0); //len

			Write32(pMapCfg, 0); //MapId
			Write32(pMapCfg, 0); //MinGameTime
			Write32(pMapCfg, 0); //MaxGameTime
			Write32(pMapCfg, 0); //PoliceFinishScore
			Write32(pMapCfg, 0); //GansterFinishMapRound
			Write32(pMapCfg, 0); //PoliceAddScoreByGansterLeave
			Write32(pMapCfg, 0); //Weight
			Write32(pMapCfg, 0); //MatchIndentifyFlag
			Write32(pMapCfg, 0); //Priority

			len = pMapCfg - pGangsterCfg;
			Set16(pGangsterCfg, (WORD)len);
			pGangsterCfg += len;
		}
		Write32(pGangsterCfg, 0); //SkillCfgNum
		for (size_t i = 0; i < n; i++)
		{ //SkillCfg
			BYTE* pSkillCfg = pGangsterCfg;
			Write16(pSkillCfg, 0); //len

			Write32(pSkillCfg, 0); //SkillId
			Write32(pSkillCfg, 0); //SkillAffectType
			Write32(pSkillCfg, 0); //Indentify
			Write32(pSkillCfg, 0); //ColdTime
			Write32(pSkillCfg, 0); //LifeTime
			Write32(pSkillCfg, 0); //AffectTime
			Write32(pSkillCfg, 0); //BloodHurt
			Write32(pSkillCfg, 0); //SpeedDrop
			Write32(pSkillCfg, 0); //ProtectRate

			len = pSkillCfg - pGangsterCfg;
			Set16(pGangsterCfg, (WORD)len);
			pGangsterCfg += len;
		}
		Write32(pGangsterCfg, 0); //SeasonCfgNum
		for (size_t i = 0; i < n; i++)
		{ //SeasonCfg
			BYTE* pSeasonCfg = pGangsterCfg;
			Write16(pSeasonCfg, 0); //len

			Write32(pSeasonCfg, 0); //SeasonId
			Write32(pSeasonCfg, 0); //OpenDate
			Write32(pSeasonCfg, 0); //CloseDate
			Write32(pSeasonCfg, 0); //OpneTimeCfgNum
			for (size_t i = 0; i < n; i++)
			{ //GangsterOpenTimeCfg
				BYTE* pGangsterOpenTimeCfg = pSeasonCfg;
				Write16(pGangsterOpenTimeCfg, 0); //len

				Write32(pGangsterOpenTimeCfg, 0); //OpenTime
				Write32(pGangsterOpenTimeCfg, 0); //CloseTime

				len = pGangsterOpenTimeCfg - pSeasonCfg;
				Set16(pSeasonCfg, (WORD)len);
				pSeasonCfg += len;
			}

			len = pSeasonCfg - pGangsterCfg;
			Set16(pGangsterCfg, (WORD)len);
			pGangsterCfg += len;
		}
		Write32(pGangsterCfg, 0); //ResultCfgNum
		for (size_t i = 0; i < n; i++)
		{ //ResultCfg
			BYTE* pResultCfg = pGangsterCfg;
			Write16(pResultCfg, 0); //len

			Write32(pResultCfg, 0); //PlayerNum
			Write32(pResultCfg, 0); //WinTeamBaseExp
			Write32(pResultCfg, 0); //LoseTeamBaseExp
			Write32(pResultCfg, 0); //WinTeamBaseFragment
			Write32(pResultCfg, 0); //LoseTeamBaseFragment
			{ //PoliceTeamWinExtra
				BYTE* pPoliceTeamWinExtra = pResultCfg;
				Write16(pPoliceTeamWinExtra, 0); //len

				Write32(pPoliceTeamWinExtra, 0); //PolicePlayerExtraNum
				for (size_t i = 0; i < n; i++)
				{ //PolicePlayerExtra
					BYTE* pPolicePlayerExtra = pPoliceTeamWinExtra;
					Write16(pPolicePlayerExtra, 0); //len

					Write32(pPolicePlayerExtra, 0); //HighKillPercent
					Write32(pPolicePlayerExtra, 0); //ExtraExp
					Write32(pPolicePlayerExtra, 0); //ExtraFragment

					len = pPolicePlayerExtra - pPoliceTeamWinExtra;
					Set16(pPoliceTeamWinExtra, (WORD)len);
					pPoliceTeamWinExtra += len;
				}
				Write32(pPoliceTeamWinExtra, 0); //GangsterPlayerExtraNum
				for (size_t i = 0; i < n; i++)
				{ //GangsterPlayerExtra
					BYTE* pGangsterPlayerExtra = pPoliceTeamWinExtra;
					Write16(pGangsterPlayerExtra, 0); //len

					Write32(pGangsterPlayerExtra, 0); //LowDeadPercent
					Write32(pGangsterPlayerExtra, 0); //ExtraExp
					Write32(pGangsterPlayerExtra, 0); //ExtraFragment

					len = pGangsterPlayerExtra - pPoliceTeamWinExtra;
					Set16(pPoliceTeamWinExtra, (WORD)len);
					pPoliceTeamWinExtra += len;
				}

				len = pPoliceTeamWinExtra - pResultCfg;
				Set16(pResultCfg, (WORD)len);
				pResultCfg += len;
			}
			{ //GangsterTeamWinExtra
				BYTE* pGangsterTeamWinExtra = pResultCfg;
				Write16(pGangsterTeamWinExtra, 0); //len

				Write32(pGangsterTeamWinExtra, 0); //PolicePlayerExtraNum
				for (size_t i = 0; i < n; i++)
				{ //PolicePlayerExtra
					BYTE* pPolicePlayerExtra = pGangsterTeamWinExtra;
					Write16(pPolicePlayerExtra, 0); //len

					Write32(pPolicePlayerExtra, 0); //HighKillPercent
					Write32(pPolicePlayerExtra, 0); //ExtraExp
					Write32(pPolicePlayerExtra, 0); //ExtraFragment

					len = pPolicePlayerExtra - pGangsterTeamWinExtra;
					Set16(pGangsterTeamWinExtra, (WORD)len);
					pGangsterTeamWinExtra += len;
				}
				Write32(pGangsterTeamWinExtra, 0); //GangsterPlayerExtraNum
				for (size_t i = 0; i < n; i++)
				{ //GangsterPlayerExtra
					BYTE* pGangsterPlayerExtra = pGangsterTeamWinExtra;
					Write16(pGangsterPlayerExtra, 0); //len

					Write32(pGangsterPlayerExtra, 0); //LowDeadPercent
					Write32(pGangsterPlayerExtra, 0); //ExtraExp
					Write32(pGangsterPlayerExtra, 0); //ExtraFragment

					len = pGangsterPlayerExtra - pGangsterTeamWinExtra;
					Set16(pGangsterTeamWinExtra, (WORD)len);
					pGangsterTeamWinExtra += len;
				}

				len = pGangsterTeamWinExtra - pResultCfg;
				Set16(pResultCfg, (WORD)len);
				pResultCfg += len;
			}

			len = pResultCfg - pGangsterCfg;
			Set16(pGangsterCfg, (WORD)len);
			pGangsterCfg += len;
		}
		Write32(pGangsterCfg, 0); //ExchangeCfgNum
		for (size_t i = 0; i < n; i++)
		{ //ExchangeCfg
			BYTE* pExchangeCfg = pGangsterCfg;
			Write16(pExchangeCfg, 0); //len

			Write32(pExchangeCfg, 0); //Level
			Write32(pExchangeCfg, 0); //MaxExchangeTimes
			Write32(pExchangeCfg, 0); //ConsumeFragmentNum
			Write32(pExchangeCfg, 0); //AwardId

			len = pExchangeCfg - pGangsterCfg;
			Set16(pGangsterCfg, (WORD)len);
			pGangsterCfg += len;
		}

		len = pGangsterCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 653, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestUseGangsterSkillBegin(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	short Skill = Read16(p);
	UINT DstUin = Read32(p);

}

void ResponseUseGangsterSkillBegin(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write16(p, 0); //Skill
	Write32(p, 0); //DstUin
	Write32(p, 0); //SkillIndex

	len = p - buf;
	SendToClient(Client, 657, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyUseGangsterSkillBegin(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //Skill
	Write32(p, 0); //DstUin
	Write32(p, 0); //SkillIndex

	len = p - buf;
	SendToClient(Client, 658, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyUseGangsterSkillOver(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //Time
	Write16(p, 0); //Skill
	Write32(p, 0); //DstUin
	Write32(p, 0); //SkillIndex

	len = p - buf;
	SendToClient(Client, 669, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestUseGangsterSkillOver(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	short Skill = Read16(p);
	UINT DstUin = Read32(p);
	int SkillIndex = Read32(p);

}

void RequestGangsterSkillEffectResult(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT SrcUin = Read32(p);
	short Skill = Read16(p);
	int SkillIndex = Read32(p);
	short EffectResult = Read16(p);

}

void NotifyGangsterSkillEffectResult(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //Time
	Write16(p, 0); //Skill
	Write32(p, 0); //SkillIndex
	Write16(p, 0); //EffectResult
	Write32(p, 0); //SrcUin

	len = p - buf;
	SendToClient(Client, 660, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestReportGangsterEvent(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int Indentity = Read32(p);
	int EventType = Read32(p);

}

void RequestGangsterPKBegin(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT DstUin = Read32(p);

}

void ResponseGangsterPKBegin(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write32(p, 0); //DstUin

	len = p - buf;
	SendToClient(Client, 662, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyGangsterPKBegin(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //DstUin

	len = p - buf;
	SendToClient(Client, 663, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyGangsterPKOver(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //DstUin

	len = p - buf;
	SendToClient(Client, 664, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGangsterPKResult(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT PKCount = Read32(p);
	UINT OtherUin = Read32(p);
	UINT OtherPKCount = Read32(p);

}

void ResponseGangsterPKResult(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write32(p, 0); //PKCount
	Write32(p, 0); //OtherUin
	Write32(p, 0); //OtherPKCount

	len = p - buf;
	SendToClient(Client, 665, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyGangsterPKResult(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //PKCount
	Write32(p, 0); //OtherUin
	Write32(p, 0); //OtherPKCount

	len = p - buf;
	SendToClient(Client, 666, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyGangsterPlayerBlood(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //Blood
	Write32(p, 0); //SrcUin

	len = p - buf;
	SendToClient(Client, 667, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyGangsterPlayerScore(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //TotalScore
	Write32(p, 0); //ChangeScore
	Write32(p, 0); //Indentity
	Write32(p, 0); //TeamScore
	Write8(p, 0); //Reason
	Write32(p, 0); //OtherUin
	Write8(p, 0); //IsOnlyTeamScore

	len = p - buf;
	SendToClient(Client, 668, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyGangsterPlayerEnergy(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //Energy

	len = p - buf;
	SendToClient(Client, 654, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGangsterRiskCompensationBegin(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT SrcUin = Read32(p);

}

void ResponseGangsterRiskCompensationBegin(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write32(p, 0); //Time
	Write32(p, 0); //SrcUin

	len = p - buf;
	SendToClient(Client, 670, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGangsterInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGangsterInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write32(p, 0); //Time
	Write32(p, 0); //MultipleDayLeftTimes
	Write32(p, 0); //ExchangeCount[]
	Write32(p, 0); //LoseStreakCount

	len = p - buf;
	SendToClient(Client, 673, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGangsterExchange(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT ScoreLevel = Read32(p);

}

void ResponseGangsterExchange(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write32(p, 0); //Time
	Write32(p, 0); //ItemID
	Write32(p, 0); //ItemNum
	Write32(p, 0); //AvailPeriod

	len = p - buf;
	SendToClient(Client, 674, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGangsterRiskCompensationOver(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT SrcUin = Read32(p);

}

void ResponseGangsterRiskCompensationOver(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write32(p, 0); //Time
	Write32(p, 0); //SrcUin

	len = p - buf;
	SendToClient(Client, 671, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyGangsterMatchShow(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //GansterMatchShowTime

	len = p - buf;
	SendToClient(Client, 672, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyGansterScoreInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	{ //GansterScoreInfo
		BYTE* pGansterScoreInfo = p;
		Write16(pGansterScoreInfo, 0); //len

		Write32(pGansterScoreInfo, 0); //GansterSeasonID
		Write32(pGansterScoreInfo, 0); //GansterScore
		Write32(pGansterScoreInfo, 0); //PoliceScore
		Write32(pGansterScoreInfo, 0); //TotalGansterScore

		len = pGansterScoreInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 675, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyNPCEliminateInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //NPCEliminateWinTimes

	len = p - buf;
	SendToClient(Client, 677, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGMDGetRedEnvelopeInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	USHORT RedEnvelopeID = Read16(p);

}

void ResponseGMDGetRedEnvelopeInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write16(p, 0); //RedEnvelopeID
	Write16(p, 0); //SendNum
	for (size_t i = 0; i < n; i++)
	{ //SendRedEnvelopeInfo
		BYTE* pSendRedEnvelopeInfo = p;
		Write16(pSendRedEnvelopeInfo, 0); //len

		Write32(pSendRedEnvelopeInfo, 0); //Uin
		Write16(pSendRedEnvelopeInfo, 0); //ID
		Write8(pSendRedEnvelopeInfo, 0); //Type
		Write32(pSendRedEnvelopeInfo, 0); //OtherUin
		WriteString(pSendRedEnvelopeInfo, 0); //NickName[]
		Write8(pSendRedEnvelopeInfo, 0); //Source
		Write8(pSendRedEnvelopeInfo, 0); //Status
		Write32(pSendRedEnvelopeInfo, 0); //Value
		Write32(pSendRedEnvelopeInfo, 0); //RecvTime
		Write32(pSendRedEnvelopeInfo, 0); //OpenTime

		len = pSendRedEnvelopeInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //RecvNum
	for (size_t i = 0; i < n; i++)
	{ //RecvRedEnvelopeInfo
		BYTE* pRecvRedEnvelopeInfo = p;
		Write16(pRecvRedEnvelopeInfo, 0); //len

		Write32(pRecvRedEnvelopeInfo, 0); //Uin
		Write16(pRecvRedEnvelopeInfo, 0); //ID
		Write8(pRecvRedEnvelopeInfo, 0); //Type
		Write32(pRecvRedEnvelopeInfo, 0); //OtherUin
		WriteString(pRecvRedEnvelopeInfo, 0); //NickName[]
		Write8(pRecvRedEnvelopeInfo, 0); //Source
		Write8(pRecvRedEnvelopeInfo, 0); //Status
		Write32(pRecvRedEnvelopeInfo, 0); //Value
		Write32(pRecvRedEnvelopeInfo, 0); //RecvTime
		Write32(pRecvRedEnvelopeInfo, 0); //OpenTime

		len = pRecvRedEnvelopeInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyDBUpdateRedEnvelopeInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	{ //RedEnvelopeInfo
		BYTE* pRedEnvelopeInfo = p;
		Write16(pRedEnvelopeInfo, 0); //len

		Write32(pRedEnvelopeInfo, 0); //Uin
		Write16(pRedEnvelopeInfo, 0); //ID
		Write8(pRedEnvelopeInfo, 0); //Type
		Write32(pRedEnvelopeInfo, 0); //OtherUin
		WriteString(pRedEnvelopeInfo, 0); //NickName[]
		Write8(pRedEnvelopeInfo, 0); //Source
		Write8(pRedEnvelopeInfo, 0); //Status
		Write32(pRedEnvelopeInfo, 0); //Value
		Write32(pRedEnvelopeInfo, 0); //RecvTime
		Write32(pRedEnvelopeInfo, 0); //OpenTime

		len = pRedEnvelopeInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyRedEnvelopeInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write8(p, 0); //Open
	Write16(p, 0); //RedEnvelopeID
	Write16(p, 0); //CanSendNum
	Write16(p, 0); //SentNum
	Write16(p, 0); //OnceSendNum
	Write32(p, 0); //SupermoneyOnce
	Write32(p, 0); //SupermoneySend
	Write32(p, 0); //SupermoneyRecv
	Write16(p, 0); //TitleLength
	Write16(p, 0); //RecvNum
	for (size_t i = 0; i < n; i++)
	{ //RecvRedEnvelopeInfo
		BYTE* pRecvRedEnvelopeInfo = p;
		Write16(pRecvRedEnvelopeInfo, 0); //len

		Write32(pRecvRedEnvelopeInfo, 0); //Uin
		Write16(pRecvRedEnvelopeInfo, 0); //ID
		Write8(pRecvRedEnvelopeInfo, 0); //Type
		Write32(pRecvRedEnvelopeInfo, 0); //OtherUin
		WriteString(pRecvRedEnvelopeInfo, 0); //NickName[]
		Write8(pRecvRedEnvelopeInfo, 0); //Source
		Write8(pRecvRedEnvelopeInfo, 0); //Status
		Write32(pRecvRedEnvelopeInfo, 0); //Value
		Write32(pRecvRedEnvelopeInfo, 0); //RecvTime
		Write32(pRecvRedEnvelopeInfo, 0); //OpenTime

		len = pRecvRedEnvelopeInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24061, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetRedEnvelopeFriendInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetRedEnvelopeFriendInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen
	Write32(p, 0); //Uin
	Write16(p, 0); //FriendNum
	for (size_t i = 0; i < n; i++)
	{ //FriendInfo
		BYTE* pFriendInfo = p;
		Write16(pFriendInfo, 0); //len

		Write32(pFriendInfo, 0); //Uin
		WriteString(pFriendInfo, 0); //NickName[]
		Write8(pFriendInfo, 0); //Status

		len = pFriendInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24062, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGMGatherGetFriendSimpleInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT FriendNum = Read16(p);
	UINT[] FriendUin[] = Read32(p);

}

void ResponseGMGatherGetFriendSimpleInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write32(p, 0); //Time
	Write16(p, 0); //FriendNum
	for (size_t i = 0; i < n; i++)
	{ //FriendSimpleInfo
		BYTE* pFriendSimpleInfo = p;
		Write16(pFriendSimpleInfo, 0); //len

		Write32(pFriendSimpleInfo, 0); //Uin
		Write8(pFriendSimpleInfo, 0); //IsOnLine
		WriteString(pFriendSimpleInfo, 0); //NickName[]
		Write32(pFriendSimpleInfo, 0); //Degree

		len = pFriendSimpleInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGatherMPIDBGetFriendSimpleInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Seq = Read32(p);
	UINT Time = Read32(p);
	UINT Uin = Read32(p);
	USHORT FriendNum = Read16(p);
	UINT[] FriendUin[] = Read32(p);

}

void ResponseGatherMPIDBGetFriendSimpleInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Seq
	Write32(p, 0); //Time
	Write32(p, 0); //Uin
	Write16(p, 0); //FriendNum
	for (size_t i = 0; i < n; i++)
	{ //FriendSimpleInfo
		BYTE* pFriendSimpleInfo = p;
		Write16(pFriendSimpleInfo, 0); //len

		Write32(pFriendSimpleInfo, 0); //Uin
		Write8(pFriendSimpleInfo, 0); //IsOnLine
		WriteString(pFriendSimpleInfo, 0); //NickName[]
		Write32(pFriendSimpleInfo, 0); //Degree

		len = pFriendSimpleInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestCMSSendRedEnvelope(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT RedEnvelopeID = Read16(p);
	USHORT Num = Read16(p);
	UINT[] Uins[] = Read32(p);

}

void ResponseCMSSendRedEnvelope(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen
	Write32(p, 0); //Uin
	Write16(p, 0); //RedEnvelopeID
	Write32(p, 0); //FriendUin
	Write8(p, 0); //Status
	Write16(p, 0); //SentNum
	Write32(p, 0); //SupermoneySend

	len = p - buf;
	SendToClient(Client, 24063, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGMGSendEnvelope(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT RedEnvelopeID = Read16(p);
	UINT FriendUin = Read32(p);
	USHORT CanRecvNum = Read16(p);
	char[] NickName[] = ReadString(p);

}

void ResponseGMGSendEnvelope(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write16(p, 0); //RedEnvelopeID
	Write32(p, 0); //FriendUin
	Write8(p, 0); //Status

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestOpenRedEnvelope(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT RedEnvelopeID = Read16(p);
	UINT FriendUin = Read32(p);

}

void ResponseOpenRedEnvelope(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen
	Write32(p, 0); //Uin
	Write16(p, 0); //RedEnvelopeID
	Write32(p, 0); //FriendUin
	Write32(p, 0); //Value
	Write32(p, 0); //SupermoneyRecv
	Write16(p, 0); //TitleLength

	len = p - buf;
	SendToClient(Client, 24065, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyAddRedEnvelopeInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //Num
	for (size_t i = 0; i < n; i++)
	{ //RedEnvelopeInfo
		BYTE* pRedEnvelopeInfo = p;
		Write16(pRedEnvelopeInfo, 0); //len

		Write32(pRedEnvelopeInfo, 0); //Uin
		Write16(pRedEnvelopeInfo, 0); //ID
		Write8(pRedEnvelopeInfo, 0); //Type
		Write32(pRedEnvelopeInfo, 0); //OtherUin
		WriteString(pRedEnvelopeInfo, 0); //NickName[]
		Write8(pRedEnvelopeInfo, 0); //Source
		Write8(pRedEnvelopeInfo, 0); //Status
		Write32(pRedEnvelopeInfo, 0); //Value
		Write32(pRedEnvelopeInfo, 0); //RecvTime
		Write32(pRedEnvelopeInfo, 0); //OpenTime

		len = pRedEnvelopeInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24066, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestLeyouyouGetInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseLeyouyouGetInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen
	Write32(p, 0); //ItemId
	Write32(p, 0); //MyPropNum
	Write32(p, 0); //BonusNum
	Write32(p, 0); //BonusStatus
	Write32(p, 0); //ActivityBeginTime
	Write32(p, 0); //ActivityCloseTime
	Write32(p, 0); //AwardNum
	for (size_t i = 0; i < n; i++)
	{ //LeyouyouAward
		BYTE* pLeyouyouAward = p;
		Write16(pLeyouyouAward, 0); //len

		Write32(pLeyouyouAward, 0); //Type
		Write32(pLeyouyouAward, 0); //IsBest
		Write32(pLeyouyouAward, 0); //CanPreview
		Write32(pLeyouyouAward, 0); //ShowID
		Write32(pLeyouyouAward, 0); //PropNumNeededToGetAward
		Write32(pLeyouyouAward, 0); //GetAwardBegin
		Write32(pLeyouyouAward, 0); //GetAwardClose
		Write32(pLeyouyouAward, 0); //Status
		{ //Award
			BYTE* pAward = pLeyouyouAward;
			Write16(pAward, 0); //len

			Write32(pAward, 0); //Exp
			Write32(pAward, 0); //Money
			Write32(pAward, 0); //SuperMoney
			Write16(pAward, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAward;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAward;
				Set16(pAward, (WORD)len);
				pAward += len;
			}
			Write32(pAward, 0); //Coupons
			Write32(pAward, 0); //GuildPoint
			Write32(pAward, 0); //LuckMoney
			Write8(pAward, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAward;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAward;
				Set16(pAward, (WORD)len);
				pAward += len;
			}
			Write32(pAward, 0); //SpeedCoin

			len = pAward - pLeyouyouAward;
			Set16(pLeyouyouAward, (WORD)len);
			pLeyouyouAward += len;
		}

		len = pLeyouyouAward - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24057, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestLeyouyouGetDailyBonus(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseLeyouyouGetDailyBonus(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 24058, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestLeyouyouGetAward(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR AwardIdx = Read8(p);

}

void ResponseLeyouyouGetAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen
	Write8(p, 0); //HasAward
	for (size_t i = 0; i < n; i++)
	{ //AwardToClient
		BYTE* pAwardToClient = p;
		Write16(pAwardToClient, 0); //len

		Write32(pAwardToClient, 0); //Exp
		Write32(pAwardToClient, 0); //Money
		Write32(pAwardToClient, 0); //SuperMoney
		Write16(pAwardToClient, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAwardToClient;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAwardToClient;
			Set16(pAwardToClient, (WORD)len);
			pAwardToClient += len;
		}
		Write32(pAwardToClient, 0); //Coupons
		Write32(pAwardToClient, 0); //GuildPoint
		Write32(pAwardToClient, 0); //LuckMoney
		Write8(pAwardToClient, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAwardToClient;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAwardToClient;
			Set16(pAwardToClient, (WORD)len);
			pAwardToClient += len;
		}
		Write32(pAwardToClient, 0); //SpeedCoin

		len = pAwardToClient - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24059, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestReturnGetInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseReturnGetInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write32(p, 0); //TimeLeft
	{ //LuckyAward
		BYTE* pLuckyAward = p;
		Write16(pLuckyAward, 0); //len

		Write32(pLuckyAward, 0); //Type
		Write32(pLuckyAward, 0); //Status
		Write32(pLuckyAward, 0); //AwardNum
		for (size_t i = 0; i < n; i++)
		{ //BaseAward
			BYTE* pBaseAward = pLuckyAward;
			Write16(pBaseAward, 0); //len

			Write32(pBaseAward, 0); //IsBest
			{ //Award
				BYTE* pAward = pBaseAward;
				Write16(pAward, 0); //len

				Write32(pAward, 0); //Exp
				Write32(pAward, 0); //Money
				Write32(pAward, 0); //SuperMoney
				Write16(pAward, 0); //ItemNum
				for (size_t i = 0; i < n; i++)
				{ //ItemInfo
					BYTE* pItemInfo = pAward;
					Write16(pItemInfo, 0); //len

					Write32(pItemInfo, 0); //ItemID
					Write32(pItemInfo, 0); //ItemNum
					Write32(pItemInfo, 0); //AvailPeriod
					Write8(pItemInfo, 0); //Status
					WriteUn(pItemInfo, 0); //ObtainTime
					Write32(pItemInfo, 0); //OtherAttribute
					Write16(pItemInfo, 0); //ItemType

					len = pItemInfo - pAward;
					Set16(pAward, (WORD)len);
					pAward += len;
				}
				Write32(pAward, 0); //Coupons
				Write32(pAward, 0); //GuildPoint
				Write32(pAward, 0); //LuckMoney
				Write8(pAward, 0); //ExtendInfoNum
				for (size_t i = 0; i < n; i++)
				{ //ExtendInfoAward
					BYTE* pExtendInfoAward = pAward;
					Write16(pExtendInfoAward, 0); //len

					Write16(pExtendInfoAward, 0); //Key
					Write32(pExtendInfoAward, 0); //AddValue
					Write32(pExtendInfoAward, 0); //TotalValue
					Write8(pExtendInfoAward, 0); //ShowPriority
					Write16(pExtendInfoAward, 0); //BuyNeedScore
					Write8(pExtendInfoAward, 0); //OneMatchMaxNum

					len = pExtendInfoAward - pAward;
					Set16(pAward, (WORD)len);
					pAward += len;
				}
				Write32(pAward, 0); //SpeedCoin

				len = pAward - pBaseAward;
				Set16(pBaseAward, (WORD)len);
				pBaseAward += len;
			}

			len = pBaseAward - pLuckyAward;
			Set16(pLuckyAward, (WORD)len);
			pLuckyAward += len;
		}

		len = pLuckyAward - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //OnlineAwardNum
	for (size_t i = 0; i < n; i++)
	{ //OnlineAward
		BYTE* pOnlineAward = p;
		Write16(pOnlineAward, 0); //len

		Write32(pOnlineAward, 0); //Type
		Write32(pOnlineAward, 0); //Status
		Write32(pOnlineAward, 0); //Index
		Write32(pOnlineAward, 0); //OnlineTimeNeeded
		{ //BaseAward
			BYTE* pBaseAward = pOnlineAward;
			Write16(pBaseAward, 0); //len

			Write32(pBaseAward, 0); //IsBest
			{ //Award
				BYTE* pAward = pBaseAward;
				Write16(pAward, 0); //len

				Write32(pAward, 0); //Exp
				Write32(pAward, 0); //Money
				Write32(pAward, 0); //SuperMoney
				Write16(pAward, 0); //ItemNum
				for (size_t i = 0; i < n; i++)
				{ //ItemInfo
					BYTE* pItemInfo = pAward;
					Write16(pItemInfo, 0); //len

					Write32(pItemInfo, 0); //ItemID
					Write32(pItemInfo, 0); //ItemNum
					Write32(pItemInfo, 0); //AvailPeriod
					Write8(pItemInfo, 0); //Status
					WriteUn(pItemInfo, 0); //ObtainTime
					Write32(pItemInfo, 0); //OtherAttribute
					Write16(pItemInfo, 0); //ItemType

					len = pItemInfo - pAward;
					Set16(pAward, (WORD)len);
					pAward += len;
				}
				Write32(pAward, 0); //Coupons
				Write32(pAward, 0); //GuildPoint
				Write32(pAward, 0); //LuckMoney
				Write8(pAward, 0); //ExtendInfoNum
				for (size_t i = 0; i < n; i++)
				{ //ExtendInfoAward
					BYTE* pExtendInfoAward = pAward;
					Write16(pExtendInfoAward, 0); //len

					Write16(pExtendInfoAward, 0); //Key
					Write32(pExtendInfoAward, 0); //AddValue
					Write32(pExtendInfoAward, 0); //TotalValue
					Write8(pExtendInfoAward, 0); //ShowPriority
					Write16(pExtendInfoAward, 0); //BuyNeedScore
					Write8(pExtendInfoAward, 0); //OneMatchMaxNum

					len = pExtendInfoAward - pAward;
					Set16(pAward, (WORD)len);
					pAward += len;
				}
				Write32(pAward, 0); //SpeedCoin

				len = pAward - pBaseAward;
				Set16(pBaseAward, (WORD)len);
				pBaseAward += len;
			}

			len = pBaseAward - pOnlineAward;
			Set16(pOnlineAward, (WORD)len);
			pOnlineAward += len;
		}

		len = pOnlineAward - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //AlreadyLoginNum

	len = p - buf;
	SendToClient(Client, 24206, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestRoomMiniGameGuessCarAction(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR GameAction = Read8(p);
	UCHAR AnswerLen = Read8(p);
	short[] AnswerIdx[] = Read16(p);

}

void ResponseRoomMiniGameGuessCarAction(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen
	Write8(p, 0); //GameAction
	Write8(p, 0); //LeftHelpNum

	len = p - buf;
	SendToClient(Client, 24207, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyRoomMiniGameGuessCarInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write8(p, 0); //InfoType
	Write8(p, 0); //PlayerNum
	for (size_t i = 0; i < n; i++)
	{ //PlayerInfo
		BYTE* pPlayerInfo = p;
		Write16(pPlayerInfo, 0); //len

		Write32(pPlayerInfo, 0); //Uin
		Write16(pPlayerInfo, 0); //Score
		Write16(pPlayerInfo, 0); //CostTime
		Write8(pPlayerInfo, 0); //Status
		Write8(pPlayerInfo, 0); //LeftHelpNum

		len = pPlayerInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //CurRound
	Write8(p, 0); //LeftRound
	Write8(p, 0); //GameSatus
	Write8(p, 0); //LeftCountDownTime
	Write32(p, 0); //CurRoundCarId
	Write8(p, 0); //AnswerContentLen
	Write8(p, 0); //ScorePlayerNum
	for (size_t i = 0; i < n; i++)
	{ //PlayerScoreInfo
		BYTE* pPlayerScoreInfo = p;
		Write16(pPlayerScoreInfo, 0); //len

		Write32(pPlayerScoreInfo, 0); //Uin
		Write16(pPlayerScoreInfo, 0); //Score
		Write16(pPlayerScoreInfo, 0); //CostTime
		Write32(pPlayerScoreInfo, 0); //IncSuperMoney
		Write32(pPlayerScoreInfo, 0); //IncExp
		Write8(pPlayerScoreInfo, 0); //IsSuperMoneyLimited

		len = pPlayerScoreInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //IsScoreInvalid
	Write8(p, 0); //ThemeNameLen

	len = p - buf;
	SendToClient(Client, 24208, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestRoomMiniGameGuessFingerAction(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR GameAction = Read8(p);
	UINT DstUin = Read32(p);

}

void ResponseRoomMiniGameGuessFingerAction(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen
	Write8(p, 0); //GameAction
	Write16(p, 0); //LeftCountDownTime

	len = p - buf;
	SendToClient(Client, 24211, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyRoomMiniGameGuessFingerInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write8(p, 0); //InfoType
	Write32(p, 0); //DstUin
	Write32(p, 0); //WinUin
	Write8(p, 0); //WinGesture
	Write32(p, 0); //FailUin
	Write8(p, 0); //FailGesture
	Write32(p, 0); //WinBoxID
	Write16(p, 0); //MaxWinBoxIDNum

	len = p - buf;
	SendToClient(Client, 24212, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void Notify3DRoomPlayerActiveness(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //ActivenessNow
	Write32(p, 0); //ActivenessTotal
	Write8(p, 0); //BoxOpenFlag

	len = p - buf;
	SendToClient(Client, 24213, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void Request3DRoomReportCurrentObservePlayer(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT RacerUin = Read32(p);

}

void Notify3DRoomIncreaseP2P(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //ObserverUin
	Write8(p, 0); //Type

	len = p - buf;
	SendToClient(Client, 24217, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestDancePrepareStartGame(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseDancePrepareStartGame(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 24220, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestDanceBattleAction(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT Type = Read32(p);
	UINT InviteSrcUin = Read32(p);
	UINT InviteDstUin = Read32(p);
	UINT ReportPIndex = Read32(p);

}

void ResponseDanceBattleAction(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //Type
	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 24221, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyDanceBattleEvent(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //EventID
	Write32(p, 0); //InviteSrcUin
	Write32(p, 0); //InviteDstUin
	Write8(p, 0); //HasRoundInfo
	for (size_t i = 0; i < n; i++)
	{ //RoundInfo
		BYTE* pRoundInfo = p;
		Write16(pRoundInfo, 0); //len

		Write32(pRoundInfo, 0); //RoundIdx
		Write32(pRoundInfo, 0); //Time
		Write8(pRoundInfo, 0); //BeatNum
		Write8(pRoundInfo, 0); //Beat[]

		len = pRoundInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ScorePlayerNum
	for (size_t i = 0; i < n; i++)
	{ //PlayerResult
		BYTE* pPlayerResult = p;
		Write16(pPlayerResult, 0); //len

		Write32(pPlayerResult, 0); //Uin
		Write32(pPlayerResult, 0); //ScoreInc
		Write32(pPlayerResult, 0); //ScoreTotal
		Write32(pPlayerResult, 0); //DanceDanceScore

		len = pPlayerResult - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //LogicID

	len = p - buf;
	SendToClient(Client, 24222, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyDanceDanceInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //DanceDanceScore
	Write32(p, 0); //DanceDanceBoxNum
	for (size_t i = 0; i < n; i++)
	{ //STDanceDanceBoxInfo
		BYTE* pSTDanceDanceBoxInfo = p;
		Write16(pSTDanceDanceBoxInfo, 0); //len

		Write32(pSTDanceDanceBoxInfo, 0); //Idx
		Write32(pSTDanceDanceBoxInfo, 0); //ScoreNeeded
		Write32(pSTDanceDanceBoxInfo, 0); //Status
		{ //Award
			BYTE* pAward = pSTDanceDanceBoxInfo;
			Write16(pAward, 0); //len

			Write32(pAward, 0); //Exp
			Write32(pAward, 0); //Money
			Write32(pAward, 0); //SuperMoney
			Write16(pAward, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAward;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAward;
				Set16(pAward, (WORD)len);
				pAward += len;
			}
			Write32(pAward, 0); //Coupons
			Write32(pAward, 0); //GuildPoint
			Write32(pAward, 0); //LuckMoney
			Write8(pAward, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAward;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAward;
				Set16(pAward, (WORD)len);
				pAward += len;
			}
			Write32(pAward, 0); //SpeedCoin

			len = pAward - pSTDanceDanceBoxInfo;
			Set16(pSTDanceDanceBoxInfo, (WORD)len);
			pSTDanceDanceBoxInfo += len;
		}

		len = pSTDanceDanceBoxInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //BattleAward
	Write32(p, 0); //BattleWinnerAward
	Write32(p, 0); //DanceAward

	len = p - buf;
	SendToClient(Client, 24223, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestDanceSongZan(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT SongID = Read16(p);
	UINT Type = Read32(p);

}

void ResponseDanceSongZan(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write16(p, 0); //SongID
	Write32(p, 0); //Type
	Write32(p, 0); //TotalZanNum
	Write32(p, 0); //ZanAlready

	len = p - buf;
	SendToClient(Client, 24224, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestZhanbuCommonInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseZhanbuCommonInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write32(p, 0); //ZhanbuInfoNum
	for (size_t i = 0; i < n; i++)
	{ //ZhanbuInfo
		BYTE* pZhanbuInfo = p;
		Write16(pZhanbuInfo, 0); //len

		Write32(pZhanbuInfo, 0); //ZhanbuType
		Write32(pZhanbuInfo, 0); //CrystalItemID
		Write32(pZhanbuInfo, 0); //FreeCDTime
		Write32(pZhanbuInfo, 0); //SurpriseAward
		Write32(pZhanbuInfo, 0); //ZhanbuAwardNum
		for (size_t i = 0; i < n; i++)
		{ //ZhanbuAward
			BYTE* pZhanbuAward = pZhanbuInfo;
			Write16(pZhanbuAward, 0); //len

			Write32(pZhanbuAward, 0); //FemaleItem
			Write32(pZhanbuAward, 0); //MaleItem
			Write32(pZhanbuAward, 0); //ItemNum
			Write32(pZhanbuAward, 0); //AvailPeriod
			Write32(pZhanbuAward, 0); //Probability
			{ //AwardToClient
				BYTE* pAwardToClient = pZhanbuAward;
				Write16(pAwardToClient, 0); //len

				Write32(pAwardToClient, 0); //Exp
				Write32(pAwardToClient, 0); //Money
				Write32(pAwardToClient, 0); //SuperMoney
				Write16(pAwardToClient, 0); //ItemNum
				for (size_t i = 0; i < n; i++)
				{ //ItemInfo
					BYTE* pItemInfo = pAwardToClient;
					Write16(pItemInfo, 0); //len

					Write32(pItemInfo, 0); //ItemID
					Write32(pItemInfo, 0); //ItemNum
					Write32(pItemInfo, 0); //AvailPeriod
					Write8(pItemInfo, 0); //Status
					WriteUn(pItemInfo, 0); //ObtainTime
					Write32(pItemInfo, 0); //OtherAttribute
					Write16(pItemInfo, 0); //ItemType

					len = pItemInfo - pAwardToClient;
					Set16(pAwardToClient, (WORD)len);
					pAwardToClient += len;
				}
				Write32(pAwardToClient, 0); //Coupons
				Write32(pAwardToClient, 0); //GuildPoint
				Write32(pAwardToClient, 0); //LuckMoney
				Write8(pAwardToClient, 0); //ExtendInfoNum
				for (size_t i = 0; i < n; i++)
				{ //ExtendInfoAward
					BYTE* pExtendInfoAward = pAwardToClient;
					Write16(pExtendInfoAward, 0); //len

					Write16(pExtendInfoAward, 0); //Key
					Write32(pExtendInfoAward, 0); //AddValue
					Write32(pExtendInfoAward, 0); //TotalValue
					Write8(pExtendInfoAward, 0); //ShowPriority
					Write16(pExtendInfoAward, 0); //BuyNeedScore
					Write8(pExtendInfoAward, 0); //OneMatchMaxNum

					len = pExtendInfoAward - pAwardToClient;
					Set16(pAwardToClient, (WORD)len);
					pAwardToClient += len;
				}
				Write32(pAwardToClient, 0); //SpeedCoin

				len = pAwardToClient - pZhanbuAward;
				Set16(pZhanbuAward, (WORD)len);
				pZhanbuAward += len;
			}
			Write32(pZhanbuAward, 0); //Quality
			Write32(pZhanbuAward, 0); //IsBest
			Write32(pZhanbuAward, 0); //SpecialAwardCtrlType
			Write32(pZhanbuAward, 0); //AwardCtrlType

			len = pZhanbuAward - pZhanbuInfo;
			Set16(pZhanbuInfo, (WORD)len);
			pZhanbuInfo += len;
		}
		{ //DefaultAward
			BYTE* pDefaultAward = pZhanbuInfo;
			Write16(pDefaultAward, 0); //len

			Write32(pDefaultAward, 0); //FemaleItem
			Write32(pDefaultAward, 0); //MaleItem
			Write32(pDefaultAward, 0); //ItemNum
			Write32(pDefaultAward, 0); //AvailPeriod
			Write32(pDefaultAward, 0); //Probability
			{ //AwardToClient
				BYTE* pAwardToClient = pDefaultAward;
				Write16(pAwardToClient, 0); //len

				Write32(pAwardToClient, 0); //Exp
				Write32(pAwardToClient, 0); //Money
				Write32(pAwardToClient, 0); //SuperMoney
				Write16(pAwardToClient, 0); //ItemNum
				for (size_t i = 0; i < n; i++)
				{ //ItemInfo
					BYTE* pItemInfo = pAwardToClient;
					Write16(pItemInfo, 0); //len

					Write32(pItemInfo, 0); //ItemID
					Write32(pItemInfo, 0); //ItemNum
					Write32(pItemInfo, 0); //AvailPeriod
					Write8(pItemInfo, 0); //Status
					WriteUn(pItemInfo, 0); //ObtainTime
					Write32(pItemInfo, 0); //OtherAttribute
					Write16(pItemInfo, 0); //ItemType

					len = pItemInfo - pAwardToClient;
					Set16(pAwardToClient, (WORD)len);
					pAwardToClient += len;
				}
				Write32(pAwardToClient, 0); //Coupons
				Write32(pAwardToClient, 0); //GuildPoint
				Write32(pAwardToClient, 0); //LuckMoney
				Write8(pAwardToClient, 0); //ExtendInfoNum
				for (size_t i = 0; i < n; i++)
				{ //ExtendInfoAward
					BYTE* pExtendInfoAward = pAwardToClient;
					Write16(pExtendInfoAward, 0); //len

					Write16(pExtendInfoAward, 0); //Key
					Write32(pExtendInfoAward, 0); //AddValue
					Write32(pExtendInfoAward, 0); //TotalValue
					Write8(pExtendInfoAward, 0); //ShowPriority
					Write16(pExtendInfoAward, 0); //BuyNeedScore
					Write8(pExtendInfoAward, 0); //OneMatchMaxNum

					len = pExtendInfoAward - pAwardToClient;
					Set16(pAwardToClient, (WORD)len);
					pAwardToClient += len;
				}
				Write32(pAwardToClient, 0); //SpeedCoin

				len = pAwardToClient - pDefaultAward;
				Set16(pDefaultAward, (WORD)len);
				pDefaultAward += len;
			}
			Write32(pDefaultAward, 0); //Quality
			Write32(pDefaultAward, 0); //IsBest
			Write32(pDefaultAward, 0); //SpecialAwardCtrlType
			Write32(pDefaultAward, 0); //AwardCtrlType

			len = pDefaultAward - pZhanbuInfo;
			Set16(pZhanbuInfo, (WORD)len);
			pZhanbuInfo += len;
		}
		Write32(pZhanbuInfo, 0); //ZhanbuBetInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ZhanbuBetInfo
			BYTE* pZhanbuBetInfo = pZhanbuInfo;
			Write16(pZhanbuBetInfo, 0); //len

			Write32(pZhanbuBetInfo, 0); //Index
			Write32(pZhanbuBetInfo, 0); //Cost
			Write32(pZhanbuBetInfo, 0); //Times
			Write32(pZhanbuBetInfo, 0); //CanEnjoyFree

			len = pZhanbuBetInfo - pZhanbuInfo;
			Set16(pZhanbuInfo, (WORD)len);
			pZhanbuInfo += len;
		}
		Write32(pZhanbuInfo, 0); //ZhanbuBonusAwardNum
		for (size_t i = 0; i < n; i++)
		{ //ZhanbuBonusAward
			BYTE* pZhanbuBonusAward = pZhanbuInfo;
			Write16(pZhanbuBonusAward, 0); //len

			Write32(pZhanbuBonusAward, 0); //Index
			Write32(pZhanbuBonusAward, 0); //BoxID
			Write32(pZhanbuBonusAward, 0); //Condition
			{ //AwardToClient
				BYTE* pAwardToClient = pZhanbuBonusAward;
				Write16(pAwardToClient, 0); //len

				Write32(pAwardToClient, 0); //Exp
				Write32(pAwardToClient, 0); //Money
				Write32(pAwardToClient, 0); //SuperMoney
				Write16(pAwardToClient, 0); //ItemNum
				for (size_t i = 0; i < n; i++)
				{ //ItemInfo
					BYTE* pItemInfo = pAwardToClient;
					Write16(pItemInfo, 0); //len

					Write32(pItemInfo, 0); //ItemID
					Write32(pItemInfo, 0); //ItemNum
					Write32(pItemInfo, 0); //AvailPeriod
					Write8(pItemInfo, 0); //Status
					WriteUn(pItemInfo, 0); //ObtainTime
					Write32(pItemInfo, 0); //OtherAttribute
					Write16(pItemInfo, 0); //ItemType

					len = pItemInfo - pAwardToClient;
					Set16(pAwardToClient, (WORD)len);
					pAwardToClient += len;
				}
				Write32(pAwardToClient, 0); //Coupons
				Write32(pAwardToClient, 0); //GuildPoint
				Write32(pAwardToClient, 0); //LuckMoney
				Write8(pAwardToClient, 0); //ExtendInfoNum
				for (size_t i = 0; i < n; i++)
				{ //ExtendInfoAward
					BYTE* pExtendInfoAward = pAwardToClient;
					Write16(pExtendInfoAward, 0); //len

					Write16(pExtendInfoAward, 0); //Key
					Write32(pExtendInfoAward, 0); //AddValue
					Write32(pExtendInfoAward, 0); //TotalValue
					Write8(pExtendInfoAward, 0); //ShowPriority
					Write16(pExtendInfoAward, 0); //BuyNeedScore
					Write8(pExtendInfoAward, 0); //OneMatchMaxNum

					len = pExtendInfoAward - pAwardToClient;
					Set16(pAwardToClient, (WORD)len);
					pAwardToClient += len;
				}
				Write32(pAwardToClient, 0); //SpeedCoin

				len = pAwardToClient - pZhanbuBonusAward;
				Set16(pZhanbuBonusAward, (WORD)len);
				pZhanbuBonusAward += len;
			}

			len = pZhanbuBonusAward - pZhanbuInfo;
			Set16(pZhanbuInfo, (WORD)len);
			pZhanbuInfo += len;
		}

		len = pZhanbuInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24226, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestZhanbuBet(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT ZhanbuType = Read32(p);
	UINT ZhanbuBetIndex = Read32(p);

}

void ResponseZhanbuBet(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write32(p, 0); //ZhanbuType
	Write32(p, 0); //ZhanbuBetIndex
	Write32(p, 0); //ZhanbuAwardNum
	for (size_t i = 0; i < n; i++)
	{ //ZhanbuAward
		BYTE* pZhanbuAward = p;
		Write16(pZhanbuAward, 0); //len

		Write32(pZhanbuAward, 0); //FemaleItem
		Write32(pZhanbuAward, 0); //MaleItem
		Write32(pZhanbuAward, 0); //ItemNum
		Write32(pZhanbuAward, 0); //AvailPeriod
		Write32(pZhanbuAward, 0); //Probability
		{ //AwardToClient
			BYTE* pAwardToClient = pZhanbuAward;
			Write16(pAwardToClient, 0); //len

			Write32(pAwardToClient, 0); //Exp
			Write32(pAwardToClient, 0); //Money
			Write32(pAwardToClient, 0); //SuperMoney
			Write16(pAwardToClient, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAwardToClient;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAwardToClient;
				Set16(pAwardToClient, (WORD)len);
				pAwardToClient += len;
			}
			Write32(pAwardToClient, 0); //Coupons
			Write32(pAwardToClient, 0); //GuildPoint
			Write32(pAwardToClient, 0); //LuckMoney
			Write8(pAwardToClient, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAwardToClient;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAwardToClient;
				Set16(pAwardToClient, (WORD)len);
				pAwardToClient += len;
			}
			Write32(pAwardToClient, 0); //SpeedCoin

			len = pAwardToClient - pZhanbuAward;
			Set16(pZhanbuAward, (WORD)len);
			pZhanbuAward += len;
		}
		Write32(pZhanbuAward, 0); //Quality
		Write32(pZhanbuAward, 0); //IsBest
		Write32(pZhanbuAward, 0); //SpecialAwardCtrlType
		Write32(pZhanbuAward, 0); //AwardCtrlType

		len = pZhanbuAward - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //HasSurpriseAward
	for (size_t i = 0; i < n; i++)
	{ //SurpriseAward
		BYTE* pSurpriseAward = p;
		Write16(pSurpriseAward, 0); //len

		Write32(pSurpriseAward, 0); //Exp
		Write32(pSurpriseAward, 0); //Money
		Write32(pSurpriseAward, 0); //SuperMoney
		Write16(pSurpriseAward, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pSurpriseAward;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pSurpriseAward;
			Set16(pSurpriseAward, (WORD)len);
			pSurpriseAward += len;
		}
		Write32(pSurpriseAward, 0); //Coupons
		Write32(pSurpriseAward, 0); //GuildPoint
		Write32(pSurpriseAward, 0); //LuckMoney
		Write8(pSurpriseAward, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pSurpriseAward;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pSurpriseAward;
			Set16(pSurpriseAward, (WORD)len);
			pSurpriseAward += len;
		}
		Write32(pSurpriseAward, 0); //SpeedCoin

		len = pSurpriseAward - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24228, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestZhanbuGetBuf(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT ChosenIndex = Read32(p);

}

void ResponseZhanbuGetBuf(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write32(p, 0); //ChosenIndex
	Write32(p, 0); //BufNum
	for (size_t i = 0; i < n; i++)
	{ //Buf
		BYTE* pBuf = p;
		Write16(pBuf, 0); //len

		Write32(pBuf, 0); //Idx
		Write32(pBuf, 0); //Type
		Write32(pBuf, 0); //Level
		Write32(pBuf, 0); //SubType
		Write32(pBuf, 0); //Time
		Write32(pBuf, 0); //CostValueNum
		Write32(pBuf, 0); //CostValue[]
		Write32(pBuf, 0); //ProbValue
		Write32(pBuf, 0); //CrystalValue

		len = pBuf - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24229, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyZhanbuCurrentInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //ZhanbuCurrentInfoNum
	for (size_t i = 0; i < n; i++)
	{ //ZhanbuCurrentInfo
		BYTE* pZhanbuCurrentInfo = p;
		Write16(pZhanbuCurrentInfo, 0); //len

		Write32(pZhanbuCurrentInfo, 0); //ZhanbuType
		Write32(pZhanbuCurrentInfo, 0); //ZhanbuCrystalNum
		Write32(pZhanbuCurrentInfo, 0); //ZhanbuBufCrystalNum
		Write32(pZhanbuCurrentInfo, 0); //ZhanbuBonusNum
		for (size_t i = 0; i < n; i++)
		{ //ZhanbuBonusInfo
			BYTE* pZhanbuBonusInfo = pZhanbuCurrentInfo;
			Write16(pZhanbuBonusInfo, 0); //len

			Write32(pZhanbuBonusInfo, 0); //Status
			Write32(pZhanbuBonusInfo, 0); //Needed

			len = pZhanbuBonusInfo - pZhanbuCurrentInfo;
			Set16(pZhanbuCurrentInfo, (WORD)len);
			pZhanbuCurrentInfo += len;
		}
		Write32(pZhanbuCurrentInfo, 0); //HasFreeInfo
		Write32(pZhanbuCurrentInfo, 0); //TimeLeftToEnjoyFree
		Write32(pZhanbuCurrentInfo, 0); //WeekPlayerNum
		Write32(pZhanbuCurrentInfo, 0); //WeekParticipateStatus

		len = pZhanbuCurrentInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //HasBuf
	for (size_t i = 0; i < n; i++)
	{ //Buf
		BYTE* pBuf = p;
		Write16(pBuf, 0); //len

		Write32(pBuf, 0); //Idx
		Write32(pBuf, 0); //Type
		Write32(pBuf, 0); //Level
		Write32(pBuf, 0); //SubType
		Write32(pBuf, 0); //Time
		Write32(pBuf, 0); //CostValueNum
		Write32(pBuf, 0); //CostValue[]
		Write32(pBuf, 0); //ProbValue
		Write32(pBuf, 0); //CrystalValue

		len = pBuf - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //BufTimeLeft

	len = p - buf;
	SendToClient(Client, 24227, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestZhanbuEnjoyFreeInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseZhanbuEnjoyFreeInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write32(p, 0); //TimeLeftToEnjoyFree

	len = p - buf;
	SendToClient(Client, 24230, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyTalkRoomEmojiInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	{ //EmojiInfo
		BYTE* pEmojiInfo = p;
		Write16(pEmojiInfo, 0); //len

		Write32(pEmojiInfo, 0); //EmojiNum
		for (size_t i = 0; i < n; i++)
		{ //Emoji
			BYTE* pEmoji = pEmojiInfo;
			Write16(pEmoji, 0); //len

			Write32(pEmoji, 0); //ID
			Write32(pEmoji, 0); //Type
			Write32(pEmoji, 0); //Condition
			Write32(pEmoji, 0); //CurrentCondition

			len = pEmoji - pEmojiInfo;
			Set16(pEmojiInfo, (WORD)len);
			pEmojiInfo += len;
		}

		len = pEmojiInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24231, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestTalkRoomTarotAction(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT Type = Read32(p);
	UINT InviteSrcUin = Read32(p);
	UINT InviteDstUin = Read32(p);
	UINT CardID = Read32(p);

}

void ResponseTalkRoomTarotAction(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //Type
	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 24232, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyTalkRoomTarotEvent(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //EventID
	Write32(p, 0); //InviteSrcUin
	Write32(p, 0); //InviteDstUin
	Write8(p, 0); //HasGameInfo
	for (size_t i = 0; i < n; i++)
	{ //GameInfo
		BYTE* pGameInfo = p;
		Write16(pGameInfo, 0); //len

		Write32(pGameInfo, 0); //Time
		Write8(pGameInfo, 0); //CardNum
		Write16(pGameInfo, 0); //CardID[]

		len = pGameInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasResultInfo
	for (size_t i = 0; i < n; i++)
	{ //ResultInfo
		BYTE* pResultInfo = p;
		Write16(pResultInfo, 0); //len

		Write16(pResultInfo, 0); //ResultID
		Write32(pResultInfo, 0); //InviteSrcUin
		Write32(pResultInfo, 0); //InviteSrcCardID
		Write32(pResultInfo, 0); //InviteDstUin
		Write32(pResultInfo, 0); //InviteDstCardID
		Write16(pResultInfo, 0); //MessageLen
		Write8(pResultInfo, 0); //Effect

		len = pResultInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24233, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestTalkRoomSpyAction(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT Type = Read32(p);
	UINT SpyUin = Read32(p);

}

void ResponseTalkRoomSpyAction(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //Type
	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 24234, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyTalkRoomSpyEvent(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //EventID
	Write16(p, 0); //ResultID
	Write32(p, 0); //StageIndex
	Write16(p, 0); //PlayerNum
	for (size_t i = 0; i < n; i++)
	{ //PlayerInfoToClient
		BYTE* pPlayerInfoToClient = p;
		Write16(pPlayerInfoToClient, 0); //len

		Write32(pPlayerInfoToClient, 0); //Uin
		WriteString(pPlayerInfoToClient, 0); //NickName[]
		Write8(pPlayerInfoToClient, 0); //IsSpy
		Write8(pPlayerInfoToClient, 0); //Status
		Write32(pPlayerInfoToClient, 0); //BeChosenNum
		for (size_t i = 0; i < n; i++)
		{ //Voter
			BYTE* pVoter = pPlayerInfoToClient;
			Write16(pVoter, 0); //len

			Write32(pVoter, 0); //Uin
			WriteString(pVoter, 0); //NickName[]

			len = pVoter - pPlayerInfoToClient;
			Set16(pPlayerInfoToClient, (WORD)len);
			pPlayerInfoToClient += len;
		}

		len = pPlayerInfoToClient - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasStagePrepare
	for (size_t i = 0; i < n; i++)
	{ //StagePrepare
		BYTE* pStagePrepare = p;
		Write16(pStagePrepare, 0); //len

		Write32(pStagePrepare, 0); //Time
		{ //Hint
			BYTE* pHint = pStagePrepare;
			Write16(pHint, 0); //len

			Write16(pHint, 0); //NormalHintLen
			Write16(pHint, 0); //SpyHintLen

			len = pHint - pStagePrepare;
			Set16(pStagePrepare, (WORD)len);
			pStagePrepare += len;
		}

		len = pStagePrepare - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasRoundTalk
	for (size_t i = 0; i < n; i++)
	{ //RoundTalk
		BYTE* pRoundTalk = p;
		Write16(pRoundTalk, 0); //len

		Write32(pRoundTalk, 0); //Time

		len = pRoundTalk - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasStageChoose
	for (size_t i = 0; i < n; i++)
	{ //StageChoose
		BYTE* pStageChoose = p;
		Write16(pStageChoose, 0); //len

		Write32(pStageChoose, 0); //Time

		len = pStageChoose - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasStageResult
	for (size_t i = 0; i < n; i++)
	{ //StageResult
		BYTE* pStageResult = p;
		Write16(pStageResult, 0); //len

		Write32(pStageResult, 0); //Uin
		WriteString(pStageResult, 0); //NickName[]

		len = pStageResult - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasGameResult
	for (size_t i = 0; i < n; i++)
	{ //GameResult
		BYTE* pGameResult = p;
		Write16(pGameResult, 0); //len

		Write32(pGameResult, 0); //GameResult
		{ //Hint
			BYTE* pHint = pGameResult;
			Write16(pHint, 0); //len

			Write16(pHint, 0); //NormalHintLen
			Write16(pHint, 0); //SpyHintLen

			len = pHint - pGameResult;
			Set16(pGameResult, (WORD)len);
			pGameResult += len;
		}

		len = pGameResult - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //PlayerLimitToStartGame

	len = p - buf;
	SendToClient(Client, 24235, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestStartTimerChallenge(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT MapID = Read32(p);
	UINT PropNum = Read32(p);
	for (size_t i = 0; i < n; i++)
	{ //Prop
		BYTE* pProp = p;
		len = Read16(pProp);

		UINT ID = Read32(pProp);
		UINT Num = Read32(pProp);

		p += len;
	}
	int JumpLevel = Read32(p);

}

void ResponseStartTimerChallenge(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 24236, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestReportTimerChallengeEvent(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT EventID = Read32(p);
	UINT ContactCPNum = Read32(p);
	for (size_t i = 0; i < n; i++)
	{ //ContactCP
		BYTE* pContactCP = p;
		len = Read16(pContactCP);

		int Element = Read32(pContactCP);
		int Checkpoint = Read32(pContactCP);
		int Para0 = Read32(pContactCP);
		int Para1 = Read32(pContactCP);

		p += len;
	}

}

void ResponseReportTimerChallengeEvent(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //EventID
	Write32(p, 0); //HasJumpInfo
	for (size_t i = 0; i < n; i++)
	{ //JumpInfo
		BYTE* pJumpInfo = p;
		Write16(pJumpInfo, 0); //len

		{ //JumpCfg
			BYTE* pJumpCfg = pJumpInfo;
			Write16(pJumpCfg, 0); //len

			Write32(pJumpCfg, 0); //JumpNum
			for (size_t i = 0; i < n; i++)
			{ //JumpDetail
				BYTE* pJumpDetail = pJumpCfg;
				Write16(pJumpDetail, 0); //len

				Write32(pJumpDetail, 0); //WeekLevel
				Write32(pJumpDetail, 0); //JumpLevel
				Write32(pJumpDetail, 0); //JumpScore

				len = pJumpDetail - pJumpCfg;
				Set16(pJumpCfg, (WORD)len);
				pJumpCfg += len;
			}

			len = pJumpCfg - pJumpInfo;
			Set16(pJumpInfo, (WORD)len);
			pJumpInfo += len;
		}
		Write32(pJumpInfo, 0); //Index
		Write32(pJumpInfo, 0); //WeekHighestTongGuanNum

		len = pJumpInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24237, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyTimerChallengeEvent(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //EventID
	Write32(p, 0); //CurrentLevel
	Write32(p, 0); //RecoverNum
	Write32(p, 0); //TimeAdd
	Write32(p, 0); //TimeNow
	Write32(p, 0); //ScoreAdd
	Write32(p, 0); //ScoreNow
	Write32(p, 0); //HasAward
	for (size_t i = 0; i < n; i++)
	{ //Award
		BYTE* pAward = p;
		Write16(pAward, 0); //len

		Write32(pAward, 0); //Exp
		Write32(pAward, 0); //Money
		Write32(pAward, 0); //SuperMoney
		Write16(pAward, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAward;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write32(pAward, 0); //Coupons
		Write32(pAward, 0); //GuildPoint
		Write32(pAward, 0); //LuckMoney
		Write8(pAward, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAward;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write32(pAward, 0); //SpeedCoin

		len = pAward - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //HasResult
	for (size_t i = 0; i < n; i++)
	{ //Result
		BYTE* pResult = p;
		Write16(pResult, 0); //len

		Write32(pResult, 0); //CoinNum
		Write32(pResult, 0); //LeftTime
		Write32(pResult, 0); //Level
		Write32(pResult, 0); //Score
		Write32(pResult, 0); //CoinNumScore
		Write32(pResult, 0); //LeftTimeScore
		Write32(pResult, 0); //LevelScore

		len = pResult - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24238, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyTimerChallengeCommonInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	{ //TimerChallengeInfo
		BYTE* pTimerChallengeInfo = p;
		Write16(pTimerChallengeInfo, 0); //len

		Write32(pTimerChallengeInfo, 0); //PropNum
		for (size_t i = 0; i < n; i++)
		{ //Prop
			BYTE* pProp = pTimerChallengeInfo;
			Write16(pProp, 0); //len

			Write32(pProp, 0); //ID
			Write32(pProp, 0); //Num

			len = pProp - pTimerChallengeInfo;
			Set16(pTimerChallengeInfo, (WORD)len);
			pTimerChallengeInfo += len;
		}
		Write32(pTimerChallengeInfo, 0); //JiaShiKaTime
		Write32(pTimerChallengeInfo, 0); //TrackElementNum
		for (size_t i = 0; i < n; i++)
		{ //TrackElement
			BYTE* pTrackElement = pTimerChallengeInfo;
			Write16(pTrackElement, 0); //len

			Write8(pTrackElement, 0); //Type
			Write8(pTrackElement, 0); //CheckpointNum
			Write8(pTrackElement, 0); //Checkpoint[]
			Write32(pTrackElement, 0); //CarID
			Write16(pTrackElement, 0); //ReverseTimeLimit
			Write8(pTrackElement, 0); //CoinFrequence
			Write8(pTrackElement, 0); //CoinNumLimit
			Write8(pTrackElement, 0); //ShadowID

			len = pTrackElement - pTimerChallengeInfo;
			Set16(pTimerChallengeInfo, (WORD)len);
			pTimerChallengeInfo += len;
		}
		{ //Award
			BYTE* pAward = pTimerChallengeInfo;
			Write16(pAward, 0); //len

			Write8(pAward, 0); //ScoreAwardNum
			for (size_t i = 0; i < n; i++)
			{ //ScoreAwardCfg
				BYTE* pScoreAwardCfg = pAward;
				Write16(pScoreAwardCfg, 0); //len

				Write8(pScoreAwardCfg, 0); //Type
				Write32(pScoreAwardCfg, 0); //StartScore
				{ //AwardInfo
					BYTE* pAwardInfo = pScoreAwardCfg;
					Write16(pAwardInfo, 0); //len

					Write32(pAwardInfo, 0); //Exp
					Write32(pAwardInfo, 0); //Money
					Write32(pAwardInfo, 0); //SuperMoney
					Write16(pAwardInfo, 0); //ItemNum
					for (size_t i = 0; i < n; i++)
					{ //ItemInfo
						BYTE* pItemInfo = pAwardInfo;
						Write16(pItemInfo, 0); //len

						Write32(pItemInfo, 0); //ItemID
						Write32(pItemInfo, 0); //ItemNum
						Write32(pItemInfo, 0); //AvailPeriod
						Write8(pItemInfo, 0); //Status
						WriteUn(pItemInfo, 0); //ObtainTime
						Write32(pItemInfo, 0); //OtherAttribute
						Write16(pItemInfo, 0); //ItemType

						len = pItemInfo - pAwardInfo;
						Set16(pAwardInfo, (WORD)len);
						pAwardInfo += len;
					}
					Write32(pAwardInfo, 0); //Coupons
					Write32(pAwardInfo, 0); //GuildPoint
					Write32(pAwardInfo, 0); //LuckMoney
					Write8(pAwardInfo, 0); //ExtendInfoNum
					for (size_t i = 0; i < n; i++)
					{ //ExtendInfoAward
						BYTE* pExtendInfoAward = pAwardInfo;
						Write16(pExtendInfoAward, 0); //len

						Write16(pExtendInfoAward, 0); //Key
						Write32(pExtendInfoAward, 0); //AddValue
						Write32(pExtendInfoAward, 0); //TotalValue
						Write8(pExtendInfoAward, 0); //ShowPriority
						Write16(pExtendInfoAward, 0); //BuyNeedScore
						Write8(pExtendInfoAward, 0); //OneMatchMaxNum

						len = pExtendInfoAward - pAwardInfo;
						Set16(pAwardInfo, (WORD)len);
						pAwardInfo += len;
					}
					Write32(pAwardInfo, 0); //SpeedCoin

					len = pAwardInfo - pScoreAwardCfg;
					Set16(pScoreAwardCfg, (WORD)len);
					pScoreAwardCfg += len;
				}
				Write8(pScoreAwardCfg, 0); //Status
				Write16(pScoreAwardCfg, 0); //ResultID
				Write16(pScoreAwardCfg, 0); //HasMoreInfo
				for (size_t i = 0; i < n; i++)
				{ //MoreInfo
					BYTE* pMoreInfo = pScoreAwardCfg;
					Write16(pMoreInfo, 0); //len

					Write16(pMoreInfo, 0); //AlreayGetNum
					Write16(pMoreInfo, 0); //MaxGetNum
					Write32(pMoreInfo, 0); //ItemID
					Write32(pMoreInfo, 0); //TimeStart
					Write32(pMoreInfo, 0); //TimeEnd
					Write32(pMoreInfo, 0); //NextAddNumLeftTime
					Write8(pMoreInfo, 0); //Num
					for (size_t i = 0; i < n; i++)
					{ //ComsumeItemArray
						BYTE* pComsumeItemArray = pMoreInfo;
						Write16(pComsumeItemArray, 0); //len

						Write32(pComsumeItemArray, 0); //ItemID
						Write32(pComsumeItemArray, 0); //StartScore
						Write32(pComsumeItemArray, 0); //DiscountStartScore

						len = pComsumeItemArray - pMoreInfo;
						Set16(pMoreInfo, (WORD)len);
						pMoreInfo += len;
					}
					Write8(pMoreInfo, 0); //ClientParaNum
					Write32(pMoreInfo, 0); //ClientParas[]
					Write32(pMoreInfo, 0); //DiscountTimeStart
					Write32(pMoreInfo, 0); //DiscountTimeEnd
					Write8(pMoreInfo, 0); //DiscountStatus
					Write32(pMoreInfo, 0); //LimitPara
					Write8(pMoreInfo, 0); //ItemExchangeType
					Write8(pMoreInfo, 0); //ItemLabelType
					Write16(pMoreInfo, 0); //ShowPriority
					Write8(pMoreInfo, 0); //Para0
					Write32(pMoreInfo, 0); //LastUpdateTime

					len = pMoreInfo - pScoreAwardCfg;
					Set16(pScoreAwardCfg, (WORD)len);
					pScoreAwardCfg += len;
				}
				Write32(pScoreAwardCfg, 0); //PosKey
				Write8(pScoreAwardCfg, 0); //AwardIdx
				Write8(pScoreAwardCfg, 0); //LabelStatus
				Write8(pScoreAwardCfg, 0); //ExtraAwardNum
				for (size_t i = 0; i < n; i++)
				{ //ExtraAwardInfo
					BYTE* pExtraAwardInfo = pScoreAwardCfg;
					Write16(pExtraAwardInfo, 0); //len

					Write32(pExtraAwardInfo, 0); //Exp
					Write32(pExtraAwardInfo, 0); //Money
					Write32(pExtraAwardInfo, 0); //SuperMoney
					Write16(pExtraAwardInfo, 0); //ItemNum
					for (size_t i = 0; i < n; i++)
					{ //ItemInfo
						BYTE* pItemInfo = pExtraAwardInfo;
						Write16(pItemInfo, 0); //len

						Write32(pItemInfo, 0); //ItemID
						Write32(pItemInfo, 0); //ItemNum
						Write32(pItemInfo, 0); //AvailPeriod
						Write8(pItemInfo, 0); //Status
						WriteUn(pItemInfo, 0); //ObtainTime
						Write32(pItemInfo, 0); //OtherAttribute
						Write16(pItemInfo, 0); //ItemType

						len = pItemInfo - pExtraAwardInfo;
						Set16(pExtraAwardInfo, (WORD)len);
						pExtraAwardInfo += len;
					}
					Write32(pExtraAwardInfo, 0); //Coupons
					Write32(pExtraAwardInfo, 0); //GuildPoint
					Write32(pExtraAwardInfo, 0); //LuckMoney
					Write8(pExtraAwardInfo, 0); //ExtendInfoNum
					for (size_t i = 0; i < n; i++)
					{ //ExtendInfoAward
						BYTE* pExtendInfoAward = pExtraAwardInfo;
						Write16(pExtendInfoAward, 0); //len

						Write16(pExtendInfoAward, 0); //Key
						Write32(pExtendInfoAward, 0); //AddValue
						Write32(pExtendInfoAward, 0); //TotalValue
						Write8(pExtendInfoAward, 0); //ShowPriority
						Write16(pExtendInfoAward, 0); //BuyNeedScore
						Write8(pExtendInfoAward, 0); //OneMatchMaxNum

						len = pExtendInfoAward - pExtraAwardInfo;
						Set16(pExtraAwardInfo, (WORD)len);
						pExtraAwardInfo += len;
					}
					Write32(pExtraAwardInfo, 0); //SpeedCoin

					len = pExtraAwardInfo - pScoreAwardCfg;
					Set16(pScoreAwardCfg, (WORD)len);
					pScoreAwardCfg += len;
				}

				len = pScoreAwardCfg - pAward;
				Set16(pAward, (WORD)len);
				pAward += len;
			}

			len = pAward - pTimerChallengeInfo;
			Set16(pTimerChallengeInfo, (WORD)len);
			pTimerChallengeInfo += len;
		}
		Write32(pTimerChallengeInfo, 0); //ZuiHouYiBoLevel
		Write32(pTimerChallengeInfo, 0); //ZuiHouYiBoTime
		Write32(pTimerChallengeInfo, 0); //JumpLevel

		len = pTimerChallengeInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24239, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestReportTimerChallenge2ndEvent(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT EventID = Read32(p);
	UINT ContactCPNum = Read32(p);
	for (size_t i = 0; i < n; i++)
	{ //ContactCP
		BYTE* pContactCP = p;
		len = Read16(pContactCP);

		int Element = Read32(pContactCP);
		int Checkpoint = Read32(pContactCP);
		int Para0 = Read32(pContactCP);
		int Para1 = Read32(pContactCP);

		p += len;
	}
	UINT ReportCallType = Read32(p);
	UCHAR CommonParaNum = Read8(p);
	int CommonPara[] = Read32(p);

}

void ResponseReportTimerChallenge2ndEvent(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //EventID
	Write16(p, 0); //ResultID
	Write32(p, 0); //HasJumpInfo
	for (size_t i = 0; i < n; i++)
	{ //JumpInfo
		BYTE* pJumpInfo = p;
		Write16(pJumpInfo, 0); //len

		Write32(pJumpInfo, 0); //PlayerNum
		for (size_t i = 0; i < n; i++)
		{ //PlayerJumpInfo
			BYTE* pPlayerJumpInfo = pJumpInfo;
			Write16(pPlayerJumpInfo, 0); //len

			Write32(pPlayerJumpInfo, 0); //Uin
			Write32(pPlayerJumpInfo, 0); //Jumplevel
			Write32(pPlayerJumpInfo, 0); //WeekHighestTongGuanNum
			Write32(pPlayerJumpInfo, 0); //BonusJumplevel
			Write32(pPlayerJumpInfo, 0); //HistoryMaxTongGuanNum

			len = pPlayerJumpInfo - pJumpInfo;
			Set16(pJumpInfo, (WORD)len);
			pJumpInfo += len;
		}
		Write32(pJumpInfo, 0); //JumpLevel

		len = pJumpInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //Para1

	len = p - buf;
	SendToClient(Client, 24254, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyTimerChallenge2ndEvent(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //EventID
	Write32(p, 0); //CurrentLevel
	Write32(p, 0); //TimeAdd
	Write32(p, 0); //TimeNow
	Write32(p, 0); //RoundRaceLeftTime
	Write32(p, 0); //StartJumpLevel
	Write32(p, 0); //HandoverUin
	Write32(p, 0); //HandoverPlayTime
	Write32(p, 0); //HandoverJumpLevel
	Write32(p, 0); //HandoverJumpTime
	Write32(p, 0); //ZuiHouYiBoLevel
	Write32(p, 0); //ZuiHouYiBoTime
	Write32(p, 0); //PlaneTime
	Write32(p, 0); //PlaneNum
	Write32(p, 0); //PlaneEnergy
	Write32(p, 0); //PlaneEnergyAdd
	Write32(p, 0); //PlaneEnergyMax
	Write32(p, 0); //HasResult
	for (size_t i = 0; i < n; i++)
	{ //Result
		BYTE* pResult = p;
		Write16(pResult, 0); //len

		{ //MergedResult
			BYTE* pMergedResult = pResult;
			Write16(pMergedResult, 0); //len

			Write32(pMergedResult, 0); //Uin
			Write8(pMergedResult, 0); //NameLen
			Write32(pMergedResult, 0); //RecoverNum
			Write32(pMergedResult, 0); //CrossLevelNum
			Write32(pMergedResult, 0); //RaceTime
			Write32(pMergedResult, 0); //HistoryLevel
			Write32(pMergedResult, 0); //JumpLevel
			Write32(pMergedResult, 0); //AwardActiveValue
			Write8(pMergedResult, 0); //IsHang

			len = pMergedResult - pResult;
			Set16(pResult, (WORD)len);
			pResult += len;
		}
		Write32(pResult, 0); //PlayerNum
		for (size_t i = 0; i < n; i++)
		{ //PlayerResult
			BYTE* pPlayerResult = pResult;
			Write16(pPlayerResult, 0); //len

			Write32(pPlayerResult, 0); //Uin
			Write8(pPlayerResult, 0); //NameLen
			Write32(pPlayerResult, 0); //RecoverNum
			Write32(pPlayerResult, 0); //CrossLevelNum
			Write32(pPlayerResult, 0); //RaceTime
			Write32(pPlayerResult, 0); //HistoryLevel
			Write32(pPlayerResult, 0); //JumpLevel
			Write32(pPlayerResult, 0); //AwardActiveValue
			Write8(pPlayerResult, 0); //IsHang

			len = pPlayerResult - pResult;
			Set16(pResult, (WORD)len);
			pResult += len;
		}

		len = pResult - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //HasCallCfg
	for (size_t i = 0; i < n; i++)
	{ //CallCfg
		BYTE* pCallCfg = p;
		Write16(pCallCfg, 0); //len

		Write32(pCallCfg, 0); //StartCallTime
		Write32(pCallCfg, 0); //CallDurationTime
		Write32(pCallCfg, 0); //CallIntervalTime
		Write32(pCallCfg, 0); //ScoreNum
		Write(pCallCfg, 0); //Score[]
		Write32(pCallCfg, 0); //AwardNum
		for (size_t i = 0; i < n; i++)
		{ //Award
			BYTE* pAward = pCallCfg;
			Write16(pAward, 0); //len

			Write32(pAward, 0); //Score
			Write32(pAward, 0); //Time
			Write32(pAward, 0); //N2O

			len = pAward - pCallCfg;
			Set16(pCallCfg, (WORD)len);
			pCallCfg += len;
		}

		len = pCallCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //ParaNum
	Write32(p, 0); //Para[]
	Write8(p, 0); //TriggerCallBuff
	for (size_t i = 0; i < n; i++)
	{ //FeatureStatusInfo
		BYTE* pFeatureStatusInfo = p;
		Write16(pFeatureStatusInfo, 0); //len

		Write32(pFeatureStatusInfo, 0); //StatusGenType
		Write32(pFeatureStatusInfo, 0); //StatusGenTypeParaNum
		Write32(pFeatureStatusInfo, 0); //StatusGenTypePara[]
		Write32(pFeatureStatusInfo, 0); //StatusEndType
		Write32(pFeatureStatusInfo, 0); //StatusEndTypePara
		{ //StatusAtomEndTriggerData
			BYTE* pStatusAtomEndTriggerData = pFeatureStatusInfo;
			Write16(pStatusAtomEndTriggerData, 0); //len

			Write32(pStatusAtomEndTriggerData, 0); //TriggerID
			Write32(pStatusAtomEndTriggerData, 0); //TriggerParaNum
			Write32(pStatusAtomEndTriggerData, 0); //TriggerPara[]

			len = pStatusAtomEndTriggerData - pFeatureStatusInfo;
			Set16(pFeatureStatusInfo, (WORD)len);
			pFeatureStatusInfo += len;
		}
		Write32(pFeatureStatusInfo, 0); //StatusAtomID
		Write32(pFeatureStatusInfo, 0); //StatusAtomParaNum
		Write32(pFeatureStatusInfo, 0); //StatusAtomPara[]
		Write8(pFeatureStatusInfo, 0); //ForwardAccelNum
		for (size_t i = 0; i < n; i++)
		{ //ForwardAccel
			BYTE* pForwardAccel = pFeatureStatusInfo;
			Write16(pForwardAccel, 0); //len

			WriteUn(pForwardAccel, 0); //ForwardAccelLimitPara[]

			len = pForwardAccel - pFeatureStatusInfo;
			Set16(pFeatureStatusInfo, (WORD)len);
			pFeatureStatusInfo += len;
		}

		len = pFeatureStatusInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //EffectGameBuffInfo
		BYTE* pEffectGameBuffInfo = p;
		Write16(pEffectGameBuffInfo, 0); //len

		Write16(pEffectGameBuffInfo, 0); //BuffID
		Write8(pEffectGameBuffInfo, 0); //FeatureID
		Write8(pEffectGameBuffInfo, 0); //BuffLevel
		Write8(pEffectGameBuffInfo, 0); //IsIcon

		len = pEffectGameBuffInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24255, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyTimerChallenge2ndCommonInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	{ //TimerChallengeInfo
		BYTE* pTimerChallengeInfo = p;
		Write16(pTimerChallengeInfo, 0); //len

		Write32(pTimerChallengeInfo, 0); //TrackElementNum
		for (size_t i = 0; i < n; i++)
		{ //TrackElement
			BYTE* pTrackElement = pTimerChallengeInfo;
			Write16(pTrackElement, 0); //len

			Write8(pTrackElement, 0); //Type
			Write8(pTrackElement, 0); //CheckpointNum
			Write8(pTrackElement, 0); //Checkpoint[]
			Write32(pTrackElement, 0); //CarID
			Write16(pTrackElement, 0); //ReverseTimeLimit
			Write8(pTrackElement, 0); //CoinFrequence
			Write8(pTrackElement, 0); //CoinNumLimit
			Write8(pTrackElement, 0); //ShadowID

			len = pTrackElement - pTimerChallengeInfo;
			Set16(pTimerChallengeInfo, (WORD)len);
			pTimerChallengeInfo += len;
		}
		{ //Award
			BYTE* pAward = pTimerChallengeInfo;
			Write16(pAward, 0); //len

			Write8(pAward, 0); //ScoreAwardNum
			for (size_t i = 0; i < n; i++)
			{ //ScoreAwardCfg
				BYTE* pScoreAwardCfg = pAward;
				Write16(pScoreAwardCfg, 0); //len

				Write8(pScoreAwardCfg, 0); //Type
				Write32(pScoreAwardCfg, 0); //StartScore
				{ //AwardInfo
					BYTE* pAwardInfo = pScoreAwardCfg;
					Write16(pAwardInfo, 0); //len

					Write32(pAwardInfo, 0); //Exp
					Write32(pAwardInfo, 0); //Money
					Write32(pAwardInfo, 0); //SuperMoney
					Write16(pAwardInfo, 0); //ItemNum
					for (size_t i = 0; i < n; i++)
					{ //ItemInfo
						BYTE* pItemInfo = pAwardInfo;
						Write16(pItemInfo, 0); //len

						Write32(pItemInfo, 0); //ItemID
						Write32(pItemInfo, 0); //ItemNum
						Write32(pItemInfo, 0); //AvailPeriod
						Write8(pItemInfo, 0); //Status
						WriteUn(pItemInfo, 0); //ObtainTime
						Write32(pItemInfo, 0); //OtherAttribute
						Write16(pItemInfo, 0); //ItemType

						len = pItemInfo - pAwardInfo;
						Set16(pAwardInfo, (WORD)len);
						pAwardInfo += len;
					}
					Write32(pAwardInfo, 0); //Coupons
					Write32(pAwardInfo, 0); //GuildPoint
					Write32(pAwardInfo, 0); //LuckMoney
					Write8(pAwardInfo, 0); //ExtendInfoNum
					for (size_t i = 0; i < n; i++)
					{ //ExtendInfoAward
						BYTE* pExtendInfoAward = pAwardInfo;
						Write16(pExtendInfoAward, 0); //len

						Write16(pExtendInfoAward, 0); //Key
						Write32(pExtendInfoAward, 0); //AddValue
						Write32(pExtendInfoAward, 0); //TotalValue
						Write8(pExtendInfoAward, 0); //ShowPriority
						Write16(pExtendInfoAward, 0); //BuyNeedScore
						Write8(pExtendInfoAward, 0); //OneMatchMaxNum

						len = pExtendInfoAward - pAwardInfo;
						Set16(pAwardInfo, (WORD)len);
						pAwardInfo += len;
					}
					Write32(pAwardInfo, 0); //SpeedCoin

					len = pAwardInfo - pScoreAwardCfg;
					Set16(pScoreAwardCfg, (WORD)len);
					pScoreAwardCfg += len;
				}
				Write8(pScoreAwardCfg, 0); //Status
				Write16(pScoreAwardCfg, 0); //ResultID
				Write16(pScoreAwardCfg, 0); //HasMoreInfo
				for (size_t i = 0; i < n; i++)
				{ //MoreInfo
					BYTE* pMoreInfo = pScoreAwardCfg;
					Write16(pMoreInfo, 0); //len

					Write16(pMoreInfo, 0); //AlreayGetNum
					Write16(pMoreInfo, 0); //MaxGetNum
					Write32(pMoreInfo, 0); //ItemID
					Write32(pMoreInfo, 0); //TimeStart
					Write32(pMoreInfo, 0); //TimeEnd
					Write32(pMoreInfo, 0); //NextAddNumLeftTime
					Write8(pMoreInfo, 0); //Num
					for (size_t i = 0; i < n; i++)
					{ //ComsumeItemArray
						BYTE* pComsumeItemArray = pMoreInfo;
						Write16(pComsumeItemArray, 0); //len

						Write32(pComsumeItemArray, 0); //ItemID
						Write32(pComsumeItemArray, 0); //StartScore
						Write32(pComsumeItemArray, 0); //DiscountStartScore

						len = pComsumeItemArray - pMoreInfo;
						Set16(pMoreInfo, (WORD)len);
						pMoreInfo += len;
					}
					Write8(pMoreInfo, 0); //ClientParaNum
					Write32(pMoreInfo, 0); //ClientParas[]
					Write32(pMoreInfo, 0); //DiscountTimeStart
					Write32(pMoreInfo, 0); //DiscountTimeEnd
					Write8(pMoreInfo, 0); //DiscountStatus
					Write32(pMoreInfo, 0); //LimitPara
					Write8(pMoreInfo, 0); //ItemExchangeType
					Write8(pMoreInfo, 0); //ItemLabelType
					Write16(pMoreInfo, 0); //ShowPriority
					Write8(pMoreInfo, 0); //Para0
					Write32(pMoreInfo, 0); //LastUpdateTime

					len = pMoreInfo - pScoreAwardCfg;
					Set16(pScoreAwardCfg, (WORD)len);
					pScoreAwardCfg += len;
				}
				Write32(pScoreAwardCfg, 0); //PosKey
				Write8(pScoreAwardCfg, 0); //AwardIdx
				Write8(pScoreAwardCfg, 0); //LabelStatus
				Write8(pScoreAwardCfg, 0); //ExtraAwardNum
				for (size_t i = 0; i < n; i++)
				{ //ExtraAwardInfo
					BYTE* pExtraAwardInfo = pScoreAwardCfg;
					Write16(pExtraAwardInfo, 0); //len

					Write32(pExtraAwardInfo, 0); //Exp
					Write32(pExtraAwardInfo, 0); //Money
					Write32(pExtraAwardInfo, 0); //SuperMoney
					Write16(pExtraAwardInfo, 0); //ItemNum
					for (size_t i = 0; i < n; i++)
					{ //ItemInfo
						BYTE* pItemInfo = pExtraAwardInfo;
						Write16(pItemInfo, 0); //len

						Write32(pItemInfo, 0); //ItemID
						Write32(pItemInfo, 0); //ItemNum
						Write32(pItemInfo, 0); //AvailPeriod
						Write8(pItemInfo, 0); //Status
						WriteUn(pItemInfo, 0); //ObtainTime
						Write32(pItemInfo, 0); //OtherAttribute
						Write16(pItemInfo, 0); //ItemType

						len = pItemInfo - pExtraAwardInfo;
						Set16(pExtraAwardInfo, (WORD)len);
						pExtraAwardInfo += len;
					}
					Write32(pExtraAwardInfo, 0); //Coupons
					Write32(pExtraAwardInfo, 0); //GuildPoint
					Write32(pExtraAwardInfo, 0); //LuckMoney
					Write8(pExtraAwardInfo, 0); //ExtendInfoNum
					for (size_t i = 0; i < n; i++)
					{ //ExtendInfoAward
						BYTE* pExtendInfoAward = pExtraAwardInfo;
						Write16(pExtendInfoAward, 0); //len

						Write16(pExtendInfoAward, 0); //Key
						Write32(pExtendInfoAward, 0); //AddValue
						Write32(pExtendInfoAward, 0); //TotalValue
						Write8(pExtendInfoAward, 0); //ShowPriority
						Write16(pExtendInfoAward, 0); //BuyNeedScore
						Write8(pExtendInfoAward, 0); //OneMatchMaxNum

						len = pExtendInfoAward - pExtraAwardInfo;
						Set16(pExtraAwardInfo, (WORD)len);
						pExtraAwardInfo += len;
					}
					Write32(pExtraAwardInfo, 0); //SpeedCoin

					len = pExtraAwardInfo - pScoreAwardCfg;
					Set16(pScoreAwardCfg, (WORD)len);
					pScoreAwardCfg += len;
				}

				len = pScoreAwardCfg - pAward;
				Set16(pAward, (WORD)len);
				pAward += len;
			}

			len = pAward - pTimerChallengeInfo;
			Set16(pTimerChallengeInfo, (WORD)len);
			pTimerChallengeInfo += len;
		}
		Write32(pTimerChallengeInfo, 0); //GetZuiHouYiBo
		Write32(pTimerChallengeInfo, 0); //ZuiHouYiBoLevel
		Write32(pTimerChallengeInfo, 0); //ZuiHouYiBoTime

		len = pTimerChallengeInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //PlaneTime
	Write32(p, 0); //EnableManualRecover
	Write8(p, 0); //TriggerProb
	Write8(p, 0); //NoTriggerN
	Write8(p, 0); //ASDSwitch
	Write32(p, 0); //FishSkillCDTime
	Write32(p, 0); //FishProtect
	Write32(p, 0); //DragonProtect
	Write32(p, 0); //DragonFlyTime

	len = p - buf;
	SendToClient(Client, 24256, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyLuckyRecruitListFromDC(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	{ //LuckyRecruitListFromDC
		BYTE* pLuckyRecruitListFromDC = p;
		Write16(pLuckyRecruitListFromDC, 0); //len

		WriteString(pLuckyRecruitListFromDC, 0); //RecommendIDStr[]
		Write16(pLuckyRecruitListFromDC, 0); //FriendNum
		for (size_t i = 0; i < n; i++)
		{ //FriendInfo
			BYTE* pFriendInfo = pLuckyRecruitListFromDC;
			Write16(pFriendInfo, 0); //len

			Write32(pFriendInfo, 0); //Uin
			Write32(pFriendInfo, 0); //Type

			len = pFriendInfo - pLuckyRecruitListFromDC;
			Set16(pLuckyRecruitListFromDC, (WORD)len);
			pLuckyRecruitListFromDC += len;
		}

		len = pLuckyRecruitListFromDC - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24242, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestSaveKeyTranslateInfoNew(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	{ //KeyTranslateInfo
		BYTE* pKeyTranslateInfo = p;
		len = Read16(pKeyTranslateInfo);

		UCHAR KeyTranslateDefaultKeyNum1 = Read8(pKeyTranslateInfo);
		UCHAR KeyTranslateNewKeyNum1 = Read8(pKeyTranslateInfo);
		UCHAR KeyTranslateDefaultKeyNum2 = Read8(pKeyTranslateInfo);
		UCHAR KeyTranslateNewKeyNum2 = Read8(pKeyTranslateInfo);

		p += len;
	}
	UCHAR SaveType = Read8(p);

}

void ResponseSaveKeyTranslateInfoNew(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen
	Write8(p, 0); //SaveType

	len = p - buf;
	SendToClient(Client, 24214, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetKeyTranslateInfoNew(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetKeyTranslateInfoNew(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen
	{ //KeyTranslateInfo
		BYTE* pKeyTranslateInfo = p;
		Write16(pKeyTranslateInfo, 0); //len

		Write8(pKeyTranslateInfo, 0); //KeyTranslateDefaultKeyNum1
		Write8(pKeyTranslateInfo, 0); //KeyTranslateNewKeyNum1
		Write8(pKeyTranslateInfo, 0); //KeyTranslateDefaultKeyNum2
		Write8(pKeyTranslateInfo, 0); //KeyTranslateNewKeyNum2

		len = pKeyTranslateInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24215, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestHideAndSeekOperate(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR Operate = Read8(p);
	UCHAR SkillID = Read8(p);
	UINT DstUin = Read32(p);
	UCHAR PropBoxID = Read8(p);
	UCHAR HasAnimalDupInfo = Read8(p);
	for (size_t i = 0; i < n; i++)
	{ //AnimalDupInfo
		BYTE* pAnimalDupInfo = p;
		len = Read16(pAnimalDupInfo);

		{ //AnimalDstPos
			BYTE* pAnimalDstPos = pAnimalDupInfo;
			len = Read16(pAnimalDstPos);

			int X = Read32(pAnimalDstPos);
			int Y = Read32(pAnimalDstPos);
			int Z = Read32(pAnimalDstPos);

			pAnimalDupInfo += len;
		}
		UCHAR AnimalDupNum = Read8(pAnimalDupInfo);
		for (size_t i = 0; i < n; i++)
		{ //AnimalDupPos
			BYTE* pAnimalDupPos = pAnimalDupInfo;
			len = Read16(pAnimalDupPos);

			UCHAR PositionNum = Read8(pAnimalDupPos);
			for (size_t i = 0; i < n; i++)
			{ //SkillDstPos
				BYTE* pSkillDstPos = pAnimalDupPos;
				len = Read16(pSkillDstPos);

				int X = Read32(pSkillDstPos);
				int Y = Read32(pSkillDstPos);
				int Z = Read32(pSkillDstPos);

				pAnimalDupPos += len;
			}

			pAnimalDupInfo += len;
		}

		p += len;
	}
	UCHAR PickRoleID = Read8(p);
	UCHAR HasRader = Read8(p);
	for (size_t i = 0; i < n; i++)
	{ //RaderPos
		BYTE* pRaderPos = p;
		len = Read16(pRaderPos);

		int X = Read32(pRaderPos);
		int Y = Read32(pRaderPos);
		int Z = Read32(pRaderPos);

		p += len;
	}
	UCHAR OtherRelatedNum = Read8(p);
	UINT[] OtherRelatedUin[] = Read32(p);
	UCHAR HasPosition = Read8(p);
	for (size_t i = 0; i < n; i++)
	{ //PositionInfo
		BYTE* pPositionInfo = p;
		len = Read16(pPositionInfo);

		int[] Posion[] = Read32(pPositionInfo);
		int[] Ori[] = Read32(pPositionInfo);

		p += len;
	}

}

void ResponsetHideAndSeekOperate(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen
	Write8(p, 0); //Operate
	Write8(p, 0); //SkillID
	Write32(p, 0); //DstUin
	Write8(p, 0); //PropBoxID
	Write16(p, 0); //SkillCDTime
	Write16(p, 0); //SkillValidTime
	Write8(p, 0); //PickRoleID

	len = p - buf;
	SendToClient(Client, 24218, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyHideAndSeekStatus(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write8(p, 0); //GameStatus
	Write32(p, 0); //SpeedRate
	Write8(p, 0); //PlayerNum
	for (size_t i = 0; i < n; i++)
	{ //PlayerInfo
		BYTE* pPlayerInfo = p;
		Write16(pPlayerInfo, 0); //len

		Write32(pPlayerInfo, 0); //Uin
		Write8(pPlayerInfo, 0); //BornPointIdx
		Write8(pPlayerInfo, 0); //Role
		Write32(pPlayerInfo, 0); //Score
		Write8(pPlayerInfo, 0); //Visible
		Write32(pPlayerInfo, 0); //SpeedRate
		Write8(pPlayerInfo, 0); //SNChangeRoleNum
		Write32(pPlayerInfo, 0); //SNChangeRoleList[]
		Write8(pPlayerInfo, 0); //SNChangeRole
		Write8(pPlayerInfo, 0); //Status
		Write8(pPlayerInfo, 0); //Life
		Write8(pPlayerInfo, 0); //HasRader
		for (size_t i = 0; i < n; i++)
		{ //RaderPos
			BYTE* pRaderPos = pPlayerInfo;
			Write16(pRaderPos, 0); //len

			Write32(pRaderPos, 0); //X
			Write32(pRaderPos, 0); //Y
			Write32(pRaderPos, 0); //Z

			len = pRaderPos - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		Write32(pPlayerInfo, 0); //AliveTime
		Write8(pPlayerInfo, 0); //ArrestCnt
		Write8(pPlayerInfo, 0); //ArrestNum
		for (size_t i = 0; i < n; i++)
		{ //ArrestInfo
			BYTE* pArrestInfo = pPlayerInfo;
			Write16(pArrestInfo, 0); //len

			Write32(pArrestInfo, 0); //Uin
			Write32(pArrestInfo, 0); //ArrestCnt
			WriteString(pArrestInfo, 0); //NickName[]

			len = pArrestInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		Write8(pPlayerInfo, 0); //HasRebirthPos
		for (size_t i = 0; i < n; i++)
		{ //RebirthPos
			BYTE* pRebirthPos = pPlayerInfo;
			Write16(pRebirthPos, 0); //len

			Write32(pRebirthPos, 0); //Posion[]
			Write32(pRebirthPos, 0); //Ori[]

			len = pRebirthPos - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		Write8(pPlayerInfo, 0); //IsPlayAgain
		Write8(pPlayerInfo, 0); //IsWinGame
		Write8(pPlayerInfo, 0); //ParaNum
		Write32(pPlayerInfo, 0); //Paras[]

		len = pPlayerInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //PropBoxNum
	Write16(p, 0); //StageSpan
	Write8(p, 0); //WinRole
	Write8(p, 0); //Reason
	Write32(p, 0); //RelatedUin
	Write8(p, 0); //OtherRelatedNum
	Write32(p, 0); //OtherRelatedUin[]
	Write8(p, 0); //TotalArrest
	Write8(p, 0); //HasCfg
	for (size_t i = 0; i < n; i++)
	{ //NotifyCfg
		BYTE* pNotifyCfg = p;
		Write16(pNotifyCfg, 0); //len

		Write8(pNotifyCfg, 0); //Target
		Write32(pNotifyCfg, 0); //DetectRadius
		Write32(pNotifyCfg, 0); //AttackRadius
		Write32(pNotifyCfg, 0); //AttackAngleRatio
		Write32(pNotifyCfg, 0); //ArrestedLyingTime
		Write32(pNotifyCfg, 0); //AnimalDefaultMoveSpeed
		Write32(pNotifyCfg, 0); //CatDefaultMoveSpeed
		Write32(pNotifyCfg, 0); //ClientReportPosFreq
		Write32(pNotifyCfg, 0); //EnableSNUseInVisibleInEscape
		Write32(pNotifyCfg, 0); //InVisibleStepMilSec
		Write32(pNotifyCfg, 0); //AnimalDisappearTransTime
		Write32(pNotifyCfg, 0); //AnimalShowTransTime
		Write32(pNotifyCfg, 0); //InVisibleStepMilSec_Hide

		len = pNotifyCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24219, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyHideAndSeekSmallAnimalDup(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //SmallAnimalUin
	Write8(p, 0); //DupSpeedRate
	{ //AnimalDupInfo
		BYTE* pAnimalDupInfo = p;
		Write16(pAnimalDupInfo, 0); //len

		{ //AnimalDstPos
			BYTE* pAnimalDstPos = pAnimalDupInfo;
			Write16(pAnimalDstPos, 0); //len

			Write32(pAnimalDstPos, 0); //X
			Write32(pAnimalDstPos, 0); //Y
			Write32(pAnimalDstPos, 0); //Z

			len = pAnimalDstPos - pAnimalDupInfo;
			Set16(pAnimalDupInfo, (WORD)len);
			pAnimalDupInfo += len;
		}
		Write8(pAnimalDupInfo, 0); //AnimalDupNum
		for (size_t i = 0; i < n; i++)
		{ //AnimalDupPos
			BYTE* pAnimalDupPos = pAnimalDupInfo;
			Write16(pAnimalDupPos, 0); //len

			Write8(pAnimalDupPos, 0); //PositionNum
			for (size_t i = 0; i < n; i++)
			{ //SkillDstPos
				BYTE* pSkillDstPos = pAnimalDupPos;
				Write16(pSkillDstPos, 0); //len

				Write32(pSkillDstPos, 0); //X
				Write32(pSkillDstPos, 0); //Y
				Write32(pSkillDstPos, 0); //Z

				len = pSkillDstPos - pAnimalDupPos;
				Set16(pAnimalDupPos, (WORD)len);
				pAnimalDupPos += len;
			}

			len = pAnimalDupPos - pAnimalDupInfo;
			Set16(pAnimalDupInfo, (WORD)len);
			pAnimalDupInfo += len;
		}

		len = pAnimalDupInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //ShadowPetLifeTime

	len = p - buf;
	SendToClient(Client, 24225, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestCrystalFightingOperate(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR Operate = Read8(p);
	UCHAR SkillID = Read8(p);
	UCHAR PropIdx = Read8(p);
	UCHAR DstUinNum = Read8(p);
	UINT DstUinList[] = Read32(p);
	UCHAR HasPosition = Read8(p);
	for (size_t i = 0; i < n; i++)
	{ //PositionInfo
		BYTE* pPositionInfo = p;
		len = Read16(pPositionInfo);

		int[] Posion[] = Read32(pPositionInfo);
		int[] Ori[] = Read32(pPositionInfo);

		p += len;
	}
	UCHAR CrystalPosition = Read8(p);
	for (size_t i = 0; i < n; i++)
	{ //CrystalPositionInfo
		BYTE* pCrystalPositionInfo = p;
		len = Read16(pCrystalPositionInfo);

		int[] Posion[] = Read32(pCrystalPositionInfo);

		p += len;
	}
	UCHAR GetCrystalNum = Read8(p);
	USHORT GetCrystalIdxList[] = Read16(p);
	USHORT ClientSkillID = Read16(p);

}

void ResponseCrystalFightingOperate(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen
	Write8(p, 0); //Operate
	Write8(p, 0); //SkillID
	Write8(p, 0); //PropIdx
	Write16(p, 0); //SkillCDTime
	Write16(p, 0); //SkillValidTime
	Write8(p, 0); //DstUinNum
	Write32(p, 0); //DstUinList[]
	Write8(p, 0); //HasRebirthPos
	for (size_t i = 0; i < n; i++)
	{ //RebirthPos
		BYTE* pRebirthPos = p;
		Write16(pRebirthPos, 0); //len

		Write32(pRebirthPos, 0); //Posion[]
		Write32(pRebirthPos, 0); //Ori[]

		len = pRebirthPos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //ClientSkillID
	Write8(p, 0); //ParaNum
	Write32(p, 0); //ParaList[]
	Write8(p, 0); //DstNPCNum
	Write32(p, 0); //DstNPCList[]

	len = p - buf;
	SendToClient(Client, 24244, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyHCrystalFightingStatus(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write8(p, 0); //GameStatus
	Write16(p, 0); //StageSpan
	Write8(p, 0); //PlayerNum
	for (size_t i = 0; i < n; i++)
	{ //PlayerInfo
		BYTE* pPlayerInfo = p;
		Write16(pPlayerInfo, 0); //len

		Write32(pPlayerInfo, 0); //Uin
		Write16(pPlayerInfo, 0); //CrystalNum
		Write16(pPlayerInfo, 0); //Status
		Write16(pPlayerInfo, 0); //MaxHP
		Write16(pPlayerInfo, 0); //HP
		Write16(pPlayerInfo, 0); //Exp
		Write8(pPlayerInfo, 0); //Level
		Write16(pPlayerInfo, 0); //ChangeStatus
		Write8(pPlayerInfo, 0); //ConKill

		len = pPlayerInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //CrystalNum
	Write16(p, 0); //CrystalList[]
	Write8(p, 0); //CrystalInfoNum
	for (size_t i = 0; i < n; i++)
	{ //CrystalInfoList
		BYTE* pCrystalInfoList = p;
		Write16(pCrystalInfoList, 0); //len

		Write8(pCrystalInfoList, 0); //CrystalType
		Write16(pCrystalInfoList, 0); //CrystalIdx
		Write32(pCrystalInfoList, 0); //Posion[]
		Write16(pCrystalInfoList, 0); //CrystalNum

		len = pCrystalInfoList - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //SrcUin
	Write32(p, 0); //Para1
	Write32(p, 0); //Para1
	Write8(p, 0); //Kill
	Write8(p, 0); //Death
	Write8(p, 0); //Assist
	Write16(p, 0); //Energy
	Write16(p, 0); //Speed
	Write8(p, 0); //AwardNum
	for (size_t i = 0; i < n; i++)
	{ //AwardInfo
		BYTE* pAwardInfo = p;
		Write16(pAwardInfo, 0); //len

		Write8(pAwardInfo, 0); //TeamID
		Write8(pAwardInfo, 0); //Rank
		Write32(pAwardInfo, 0); //Uin
		Write16(pAwardInfo, 0); //Score
		Write8(pAwardInfo, 0); //Kill
		Write8(pAwardInfo, 0); //Death
		Write8(pAwardInfo, 0); //Assist
		Write8(pAwardInfo, 0); //IsMVP
		Write8(pAwardInfo, 0); //AwardLevel
		{ //Award
			BYTE* pAward = pAwardInfo;
			Write16(pAward, 0); //len

			Write32(pAward, 0); //Exp
			Write32(pAward, 0); //Money
			Write32(pAward, 0); //SuperMoney
			Write16(pAward, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAward;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAward;
				Set16(pAward, (WORD)len);
				pAward += len;
			}
			Write32(pAward, 0); //Coupons
			Write32(pAward, 0); //GuildPoint
			Write32(pAward, 0); //LuckMoney
			Write8(pAward, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAward;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAward;
				Set16(pAward, (WORD)len);
				pAward += len;
			}
			Write32(pAward, 0); //SpeedCoin

			len = pAward - pAwardInfo;
			Set16(pAwardInfo, (WORD)len);
			pAwardInfo += len;
		}
		Write8(pAwardInfo, 0); //IsPlayAgain
		Write8(pAwardInfo, 0); //IsOffLine
		Write8(pAwardInfo, 0); //NameLen
		Write8(pAwardInfo, 0); //AreaID

		len = pAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //AssisNum
	Write32(p, 0); //AssistUin[]

	len = p - buf;
	SendToClient(Client, 24245, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyChatGameUseSkill(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ClientSkillID
	Write8(p, 0); //HasPosition
	for (size_t i = 0; i < n; i++)
	{ //PositionInfo
		BYTE* pPositionInfo = p;
		Write16(pPositionInfo, 0); //len

		Write32(pPositionInfo, 0); //Posion[]
		Write32(pPositionInfo, 0); //Ori[]

		len = pPositionInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //SrcUin
	Write8(p, 0); //DstUinNum
	Write32(p, 0); //DstUinList[]
	Write8(p, 0); //DstNPCNum
	Write32(p, 0); //DstNPCList[]

	len = p - buf;
	SendToClient(Client, 459, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestHuanLingSuitChange(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR Operate = Read8(p);
	int SuitID = Read32(p);

}

void ResponsetHuanLingSuitChange(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write8(p, 0); //SuitNum
	for (size_t i = 0; i < n; i++)
	{ //SuitInfo
		BYTE* pSuitInfo = p;
		Write16(pSuitInfo, 0); //len

		Write32(pSuitInfo, 0); //SuitID
		Write8(pSuitInfo, 0); //ChangeLevel

		len = pSuitInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //OriEquipedItemNum
	Write32(p, 0); //OriEquipedItemID[]

	len = p - buf;
	SendToClient(Client, 24247, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestPRGetInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponsePRGetInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen
	Write32(p, 0); //AwardNum
	for (size_t i = 0; i < n; i++)
	{ //PRAward
		BYTE* pPRAward = p;
		Write16(pPRAward, 0); //len

		Write32(pPRAward, 0); //Type
		Write32(pPRAward, 0); //Status
		{ //Award
			BYTE* pAward = pPRAward;
			Write16(pAward, 0); //len

			Write32(pAward, 0); //Exp
			Write32(pAward, 0); //Money
			Write32(pAward, 0); //SuperMoney
			Write16(pAward, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAward;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAward;
				Set16(pAward, (WORD)len);
				pAward += len;
			}
			Write32(pAward, 0); //Coupons
			Write32(pAward, 0); //GuildPoint
			Write32(pAward, 0); //LuckMoney
			Write8(pAward, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAward;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAward;
				Set16(pAward, (WORD)len);
				pAward += len;
			}
			Write32(pAward, 0); //SpeedCoin

			len = pAward - pPRAward;
			Set16(pPRAward, (WORD)len);
			pPRAward += len;
		}

		len = pPRAward - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24085, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestPRGetAward(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR AwardIdx = Read8(p);

}

void ResponsePRGetAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen
	Write8(p, 0); //HasAward
	for (size_t i = 0; i < n; i++)
	{ //AwardToClient
		BYTE* pAwardToClient = p;
		Write16(pAwardToClient, 0); //len

		Write32(pAwardToClient, 0); //Exp
		Write32(pAwardToClient, 0); //Money
		Write32(pAwardToClient, 0); //SuperMoney
		Write16(pAwardToClient, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAwardToClient;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAwardToClient;
			Set16(pAwardToClient, (WORD)len);
			pAwardToClient += len;
		}
		Write32(pAwardToClient, 0); //Coupons
		Write32(pAwardToClient, 0); //GuildPoint
		Write32(pAwardToClient, 0); //LuckMoney
		Write8(pAwardToClient, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAwardToClient;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAwardToClient;
			Set16(pAwardToClient, (WORD)len);
			pAwardToClient += len;
		}
		Write32(pAwardToClient, 0); //SpeedCoin

		len = pAwardToClient - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24086, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestSpringFlowerCommonCfg(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseSpringFlowerCommonCfg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	{ //CommonCfg
		BYTE* pCommonCfg = p;
		Write16(pCommonCfg, 0); //len

		Write32(pCommonCfg, 0); //ActivityDateBegin
		Write32(pCommonCfg, 0); //ActivityDateEnd
		Write32(pCommonCfg, 0); //ActivityTimeBegin
		Write32(pCommonCfg, 0); //ActivityTimeEnd
		Write32(pCommonCfg, 0); //AllowPlantDateBegin
		Write32(pCommonCfg, 0); //AllowPlantDateEnd
		Write32(pCommonCfg, 0); //AllowPlantTimeBegin
		Write32(pCommonCfg, 0); //AllowPlantTimeEnd
		Write32(pCommonCfg, 0); //HuaMiID
		Write8(pCommonCfg, 0); //SeedCfgNum
		for (size_t i = 0; i < n; i++)
		{ //SeedCfgInfo
			BYTE* pSeedCfgInfo = pCommonCfg;
			Write16(pSeedCfgInfo, 0); //len

			Write8(pSeedCfgInfo, 0); //SeedType
			Write32(pSeedCfgInfo, 0); //SeedID
			Write32(pSeedCfgInfo, 0); //GrowTime
			Write32(pSeedCfgInfo, 0); //HarvestBoxID
			Write32(pSeedCfgInfo, 0); //HarvestTimes
			Write32(pSeedCfgInfo, 0); //HarvestBlessPoint
			Write32(pSeedCfgInfo, 0); //HarvestHuaMiNum

			len = pSeedCfgInfo - pCommonCfg;
			Set16(pCommonCfg, (WORD)len);
			pCommonCfg += len;
		}
		Write8(pCommonCfg, 0); //SeedTaskNum
		for (size_t i = 0; i < n; i++)
		{ //SeedTaskInfo
			BYTE* pSeedTaskInfo = pCommonCfg;
			Write16(pSeedTaskInfo, 0); //len

			Write32(pSeedTaskInfo, 0); //TaskID

			len = pSeedTaskInfo - pCommonCfg;
			Set16(pCommonCfg, (WORD)len);
			pCommonCfg += len;
		}
		Write32(pCommonCfg, 0); //NeedShowItemNums
		for (size_t i = 0; i < n; i++)
		{ //ArrayItemInfo
			BYTE* pArrayItemInfo = pCommonCfg;
			Write16(pArrayItemInfo, 0); //len

			Write32(pArrayItemInfo, 0); //ItemID[]
			Write32(pArrayItemInfo, 0); //AvailPeriod
			Write32(pArrayItemInfo, 0); //ItemNums
			Write8(pArrayItemInfo, 0); //BestItem

			len = pArrayItemInfo - pCommonCfg;
			Set16(pCommonCfg, (WORD)len);
			pCommonCfg += len;
		}

		len = pCommonCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestSpringFlowerPlayerInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseSpringFlowerPlayerInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write8(p, 0); //PotNum
	for (size_t i = 0; i < n; i++)
	{ //PotInfo
		BYTE* pPotInfo = p;
		Write16(pPotInfo, 0); //len

		Write8(pPotInfo, 0); //PotID
		Write8(pPotInfo, 0); //SeedType
		Write32(pPotInfo, 0); //PlantTime
		Write32(pPotInfo, 0); //LeftTimeToGrow

		len = pPotInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //BlessPoint
	Write32(p, 0); //PlantNumInCurrentSeason

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestSpringFlowerPlant(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR PlantType = Read8(p);
	UCHAR PotID = Read8(p);
	char SeedType = Read8(p);

}

void ResponseSpringFlowerPlant(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write8(p, 0); //PlantType
	Write8(p, 0); //PotID
	Write8(p, 0); //SeedType
	Write8(p, 0); //HasAward
	for (size_t i = 0; i < n; i++)
	{ //Award
		BYTE* pAward = p;
		Write16(pAward, 0); //len

		Write32(pAward, 0); //BlessPoint
		{ //ItemAward
			BYTE* pItemAward = pAward;
			Write16(pItemAward, 0); //len

			Write32(pItemAward, 0); //Exp
			Write32(pItemAward, 0); //Money
			Write32(pItemAward, 0); //SuperMoney
			Write16(pItemAward, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pItemAward;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pItemAward;
				Set16(pItemAward, (WORD)len);
				pItemAward += len;
			}
			Write32(pItemAward, 0); //Coupons
			Write32(pItemAward, 0); //GuildPoint
			Write32(pItemAward, 0); //LuckMoney
			Write8(pItemAward, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pItemAward;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pItemAward;
				Set16(pItemAward, (WORD)len);
				pItemAward += len;
			}
			Write32(pItemAward, 0); //SpeedCoin

			len = pItemAward - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}

		len = pAward - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestQuickRPC(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	{ //Head
		BYTE* pHead = p;
		len = Read16(pHead);

		UINT Uin = Read32(pHead);
		UINT Time = Read32(pHead);
		BYTE Version = Read8(pHead);
		BYTE Compress = Read8(pHead);
		BYTE OptLength = Read8(pHead);

		p += len;
	}
	{ //Body
		BYTE* pBody = p;
		len = Read16(pBody);

		USHORT MsgLen = Read16(pBody);

		p += len;
	}

}

void ResponseQuickRPC(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	{ //Head
		BYTE* pHead = p;
		Write16(pHead, 0); //len

		Write32(pHead, 0); //Uin
		Write32(pHead, 0); //Time
		Write8(pHead, 0); //Version
		Write8(pHead, 0); //Compress
		Write8(pHead, 0); //OptLength

		len = pHead - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //Body
		BYTE* pBody = p;
		Write16(pBody, 0); //len

		Write16(pBody, 0); //MsgLen

		len = pBody - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24251, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2SGetCosInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT InfoType = Read32(p);
	UINT FeatureID = Read32(p);
	UINT OperateType = Read32(p);
	int PathLen = Read32(p);

}

void NotifyCosInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //InfoType
	Write32(p, 0); //PathLen

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void ResponseC2SGetCosInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write32(p, 0); //InfoType
	Write32(p, 0); //FeatureID
	Write32(p, 0); //OperateType
	Write32(p, 0); //FullPathLen
	Write32(p, 0); //SignatureLen

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestG2MiscGetCosInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT InfoType = Read32(p);
	UINT FeatureID = Read32(p);
	UINT OperateType = Read32(p);
	int BucketIDLen = Read32(p);
	int PathLen = Read32(p);

}

void ResponseG2MiscGetCosInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write32(p, 0); //InfoType
	Write32(p, 0); //FeatureID
	Write32(p, 0); //OperateType
	Write32(p, 0); //BucketIDLen
	Write32(p, 0); //PathLen
	Write32(p, 0); //SignatureLen

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyServerRecordUploadInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //MapID
	Write32(p, 0); //FinishTime
	WriteString(p, 0); //ShadowPath[]

	len = p - buf;
	SendToClient(Client, 2105, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyServerRecordUrlInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //MapID
	Write32(p, 0); //FinishTime
	Write16(p, 0); //PathLen
	Write32(p, 0); //RecordMode

	len = p - buf;
	SendToClient(Client, 2106, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyShadowNPCInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //ShadowNpcNum
	for (size_t i = 0; i < n; i++)
	{ //ShadowNPCInfo
		BYTE* pShadowNPCInfo = p;
		Write16(pShadowNPCInfo, 0); //len

		Write32(pShadowNPCInfo, 0); //HostUin
		Write32(pShadowNPCInfo, 0); //NpcUin
		WriteString(pShadowNPCInfo, 0); //ShadowPath[]
		WriteString(pShadowNPCInfo, 0); //ShadowMd5[]
		Write32(pShadowNPCInfo, 0); //ShadowUin
		Write8(pShadowNPCInfo, 0); //Type
		Write8(pShadowNPCInfo, 0); //ActionAILevel

		len = pShadowNPCInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 2104, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestReportServerRecordEvent(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT EventType = Read32(p);
	UINT ParaNum = Read32(p);
	int[] Paras[] = Read32(p);
	UINT StrLen = Read32(p);

}

void RequestThanksgivingGetVoteInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseThanksgivingGetVoteInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //RuleLen
	Write32(p, 0); //VoteNumPerType
	Write32(p, 0); //AwardNum
	for (size_t i = 0; i < n; i++)
	{ //Award
		BYTE* pAward = p;
		Write16(pAward, 0); //len

		Write32(pAward, 0); //Status
		Write32(pAward, 0); //Type
		Write32(pAward, 0); //Idx
		Write32(pAward, 0); //VoteNumNow
		{ //Award
			BYTE* pAward = pAward;
			Write16(pAward, 0); //len

			Write32(pAward, 0); //Exp
			Write32(pAward, 0); //Money
			Write32(pAward, 0); //SuperMoney
			Write16(pAward, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAward;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAward;
				Set16(pAward, (WORD)len);
				pAward += len;
			}
			Write32(pAward, 0); //Coupons
			Write32(pAward, 0); //GuildPoint
			Write32(pAward, 0); //LuckMoney
			Write8(pAward, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAward;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAward;
				Set16(pAward, (WORD)len);
				pAward += len;
			}
			Write32(pAward, 0); //SpeedCoin

			len = pAward - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}

		len = pAward - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24198, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestThanksgivingVote(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT VoteType = Read32(p);
	UINT VoteIdx = Read32(p);

}

void ResponseThanksgivingVote(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 24300, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestOpenJiaNianHuaDlg(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT TopListVer = Read32(p);

}

void RequestGetJiaNianHuaTiliInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetJiaNianHuaTiliInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	{ //TiliInfo
		BYTE* pTiliInfo = p;
		Write16(pTiliInfo, 0); //len

		Write32(pTiliInfo, 0); //Tili
		Write32(pTiliInfo, 0); //TiliTotal
		Write32(pTiliInfo, 0); //TiliLeftSeconds

		len = pTiliInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24079, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void ResponseOpenJiaNianHuaDlg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //CanStartResultID
	{ //TiliInfo
		BYTE* pTiliInfo = p;
		Write16(pTiliInfo, 0); //len

		Write32(pTiliInfo, 0); //Tili
		Write32(pTiliInfo, 0); //TiliTotal
		Write32(pTiliInfo, 0); //TiliLeftSeconds

		len = pTiliInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //Score
	Write32(p, 0); //MatchNum
	Write32(p, 0); //MatchSuccNum
	Write32(p, 0); //BestTime
	Write32(p, 0); //TopListVer
	Write32(p, 0); //TiliRecoverSeconds
	Write8(p, 0); //PersonAwardNum
	for (size_t i = 0; i < n; i++)
	{ //PersonAwardInfo
		BYTE* pPersonAwardInfo = p;
		Write16(pPersonAwardInfo, 0); //len

		Write8(pPersonAwardInfo, 0); //Status

		len = pPersonAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ScoreAwardNum
	for (size_t i = 0; i < n; i++)
	{ //ScoreAwardInfo
		BYTE* pScoreAwardInfo = p;
		Write16(pScoreAwardInfo, 0); //len

		Write8(pScoreAwardInfo, 0); //Status
		Write16(pScoreAwardInfo, 0); //ResultID

		len = pScoreAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //ScoreTotal
	Write32(p, 0); //NextSeasonStartTime

	len = p - buf;
	SendToClient(Client, 24075, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void ResponseJiaNianHuaCfg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //TaskID
	Write8(p, 0); //PersonAwardNum
	for (size_t i = 0; i < n; i++)
	{ //PersonAwardCfg
		BYTE* pPersonAwardCfg = p;
		Write16(pPersonAwardCfg, 0); //len

		Write32(pPersonAwardCfg, 0); //Time
		{ //AwardFirst
			BYTE* pAwardFirst = pPersonAwardCfg;
			Write16(pAwardFirst, 0); //len

			Write32(pAwardFirst, 0); //Exp
			Write32(pAwardFirst, 0); //Money
			Write32(pAwardFirst, 0); //SuperMoney
			Write16(pAwardFirst, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAwardFirst;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAwardFirst;
				Set16(pAwardFirst, (WORD)len);
				pAwardFirst += len;
			}
			Write32(pAwardFirst, 0); //Coupons
			Write32(pAwardFirst, 0); //GuildPoint
			Write32(pAwardFirst, 0); //LuckMoney
			Write8(pAwardFirst, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAwardFirst;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAwardFirst;
				Set16(pAwardFirst, (WORD)len);
				pAwardFirst += len;
			}
			Write32(pAwardFirst, 0); //SpeedCoin

			len = pAwardFirst - pPersonAwardCfg;
			Set16(pPersonAwardCfg, (WORD)len);
			pPersonAwardCfg += len;
		}
		{ //AwardOther
			BYTE* pAwardOther = pPersonAwardCfg;
			Write16(pAwardOther, 0); //len

			Write32(pAwardOther, 0); //Exp
			Write32(pAwardOther, 0); //Money
			Write32(pAwardOther, 0); //SuperMoney
			Write16(pAwardOther, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAwardOther;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAwardOther;
				Set16(pAwardOther, (WORD)len);
				pAwardOther += len;
			}
			Write32(pAwardOther, 0); //Coupons
			Write32(pAwardOther, 0); //GuildPoint
			Write32(pAwardOther, 0); //LuckMoney
			Write8(pAwardOther, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAwardOther;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAwardOther;
				Set16(pAwardOther, (WORD)len);
				pAwardOther += len;
			}
			Write32(pAwardOther, 0); //SpeedCoin

			len = pAwardOther - pPersonAwardCfg;
			Set16(pPersonAwardCfg, (WORD)len);
			pPersonAwardCfg += len;
		}
		Write32(pPersonAwardCfg, 0); //Score

		len = pPersonAwardCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ScoreAwardNum
	for (size_t i = 0; i < n; i++)
	{ //ScoreAwardCfg
		BYTE* pScoreAwardCfg = p;
		Write16(pScoreAwardCfg, 0); //len

		Write8(pScoreAwardCfg, 0); //Type
		Write32(pScoreAwardCfg, 0); //StartScore
		{ //AwardInfo
			BYTE* pAwardInfo = pScoreAwardCfg;
			Write16(pAwardInfo, 0); //len

			Write32(pAwardInfo, 0); //Exp
			Write32(pAwardInfo, 0); //Money
			Write32(pAwardInfo, 0); //SuperMoney
			Write16(pAwardInfo, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAwardInfo;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAwardInfo;
				Set16(pAwardInfo, (WORD)len);
				pAwardInfo += len;
			}
			Write32(pAwardInfo, 0); //Coupons
			Write32(pAwardInfo, 0); //GuildPoint
			Write32(pAwardInfo, 0); //LuckMoney
			Write8(pAwardInfo, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAwardInfo;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAwardInfo;
				Set16(pAwardInfo, (WORD)len);
				pAwardInfo += len;
			}
			Write32(pAwardInfo, 0); //SpeedCoin

			len = pAwardInfo - pScoreAwardCfg;
			Set16(pScoreAwardCfg, (WORD)len);
			pScoreAwardCfg += len;
		}

		len = pScoreAwardCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //OpenDayNum
	Write32(p, 0); //FrozenSeconds
	Write16(p, 0); //ResultID
	Write16(p, 0); //CanStartResultID

	len = p - buf;
	SendToClient(Client, 24076, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void ResponseGetJiaNianHuaTopList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //TopListVer
	Write16(p, 0); //Num
	for (size_t i = 0; i < n; i++)
	{ //Infos
		BYTE* pInfos = p;
		Write16(pInfos, 0); //len

		Write32(pInfos, 0); //Uin
		Write16(pInfos, 0); //OrderNum
		Write8(pInfos, 0); //NameLen
		Write8(pInfos, 0); //AreaID
		Write32(pInfos, 0); //Score

		len = pInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24077, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetJiaNianHuaAward(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR AwardIdx = Read8(p);

}

void ResponseGetJiaNianHuaAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	{ //Award
		BYTE* pAward = p;
		Write16(pAward, 0); //len

		Write32(pAward, 0); //Exp
		Write32(pAward, 0); //Money
		Write32(pAward, 0); //SuperMoney
		Write16(pAward, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAward;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write32(pAward, 0); //Coupons
		Write32(pAward, 0); //GuildPoint
		Write32(pAward, 0); //LuckMoney
		Write8(pAward, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAward;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write32(pAward, 0); //SpeedCoin

		len = pAward - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //AwardIdx

	len = p - buf;
	SendToClient(Client, 24078, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyGroupBuyingrCfg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	{ //GroupBuyingCfg
		BYTE* pGroupBuyingCfg = p;
		Write16(pGroupBuyingCfg, 0); //len

		Write32(pGroupBuyingCfg, 0); //AwardCfgNum
		for (size_t i = 0; i < n; i++)
		{ //GroupBuyingAwardCfg
			BYTE* pGroupBuyingAwardCfg = pGroupBuyingCfg;
			Write16(pGroupBuyingAwardCfg, 0); //len

			Write32(pGroupBuyingAwardCfg, 0); //TotalPlayerCount
			{ //AwardItemInfo
				BYTE* pAwardItemInfo = pGroupBuyingAwardCfg;
				Write16(pAwardItemInfo, 0); //len

				Write16(pAwardItemInfo, 0); //GenderItemNum
				Write32(pAwardItemInfo, 0); //ItemID[]
				Write16(pAwardItemInfo, 0); //ItemNum
				Write32(pAwardItemInfo, 0); //AvailPeriod
				Write16(pAwardItemInfo, 0); //BroadcastType
				Write16(pAwardItemInfo, 0); //BroadcastFlag
				Write8(pAwardItemInfo, 0); //ShowPriority
				Write8(pAwardItemInfo, 0); //ItemType
				Write8(pAwardItemInfo, 0); //IgnoreItem
				Write32(pAwardItemInfo, 0); //LimitPara
				Write8(pAwardItemInfo, 0); //SpecialAwardCtrlType
				Write8(pAwardItemInfo, 0); //AwardCtrlType

				len = pAwardItemInfo - pGroupBuyingAwardCfg;
				Set16(pGroupBuyingAwardCfg, (WORD)len);
				pGroupBuyingAwardCfg += len;
			}

			len = pGroupBuyingAwardCfg - pGroupBuyingCfg;
			Set16(pGroupBuyingCfg, (WORD)len);
			pGroupBuyingCfg += len;
		}
		Write16(pGroupBuyingCfg, 0); //TotalAnnualFestivalTurnOnFlag
		Write16(pGroupBuyingCfg, 0); //AnnualFestivalTurnOnFlag[]
		Write16(pGroupBuyingCfg, 0); //AnnualFestivalPriority[]
		{ //OpenDateTime
			BYTE* pOpenDateTime = pGroupBuyingCfg;
			Write16(pOpenDateTime, 0); //len

			Write32(pOpenDateTime, 0); //OpenDate
			Write32(pOpenDateTime, 0); //OpenTime
			Write32(pOpenDateTime, 0); //CloseDate
			Write32(pOpenDateTime, 0); //CloseTime
			Write32(pOpenDateTime, 0); //Open
			Write32(pOpenDateTime, 0); //Close
			Write32(pOpenDateTime, 0); //OpenDate
			Write32(pOpenDateTime, 0); //OpenTime
			Write32(pOpenDateTime, 0); //CloseDate
			Write32(pOpenDateTime, 0); //CloseTime
			Write32(pOpenDateTime, 0); //Open
			Write32(pOpenDateTime, 0); //Close

			len = pOpenDateTime - pGroupBuyingCfg;
			Set16(pGroupBuyingCfg, (WORD)len);
			pGroupBuyingCfg += len;
		}

		len = pGroupBuyingCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //OpenDate
	Write32(p, 0); //CloseDate
	Write32(p, 0); //FreezeDate
	Write32(p, 0); //OpneTimeCfgNum
	for (size_t i = 0; i < n; i++)
	{ //GangsterOpenTimeCfg
		BYTE* pGangsterOpenTimeCfg = p;
		Write16(pGangsterOpenTimeCfg, 0); //len

		Write32(pGangsterOpenTimeCfg, 0); //OpenTime
		Write32(pGangsterOpenTimeCfg, 0); //CloseTime

		len = pGangsterOpenTimeCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 680, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetGroupBuyingInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetGroupBuyingInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write32(p, 0); //Time
	Write32(p, 0); //TotalPlayerCount
	Write32(p, 0); //ParticipateCount
	Write32(p, 0); //ReceiveAwardStatus

	len = p - buf;
	SendToClient(Client, 681, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGroupBuyingReceiveAward(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int AwardIndex = Read32(p);

}

void ResponseGroupBuyingReceiveAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write32(p, 0); //Time
	Write32(p, 0); //AwardIndex
	Write32(p, 0); //ItemID
	Write32(p, 0); //ItemNum
	Write32(p, 0); //AvailPeriod

	len = p - buf;
	SendToClient(Client, 682, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetZhanxunExchangeInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetZhanxunExchangeInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //GuildZhanxun
	Write32(p, 0); //PersonalZhanxun
	Write32(p, 0); //MedalItemID
	Write32(p, 0); //Num
	for (size_t i = 0; i < n; i++)
	{ //ItemList
		BYTE* pItemList = p;
		Write16(pItemList, 0); //len

		Write32(pItemList, 0); //ID
		Write32(pItemList, 0); //MaxExchangeTimes
		Write32(pItemList, 0); //NeedGuildZhanxunNum
		Write32(pItemList, 0); //NeedPersonalZhanxunNum
		Write32(pItemList, 0); //NeedMedalNum
		Write32(pItemList, 0); //ItemID
		Write32(pItemList, 0); //ItemNum
		Write32(pItemList, 0); //AvailPeriod

		len = pItemList - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24080, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestZhanxunExchange(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT ID = Read32(p);

}

void ResponseZhanxunExchange(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen
	Write32(p, 0); //Uin
	{ //Item
		BYTE* pItem = p;
		Write16(pItem, 0); //len

		Write32(pItem, 0); //ID
		Write32(pItem, 0); //MaxExchangeTimes
		Write32(pItem, 0); //NeedGuildZhanxunNum
		Write32(pItem, 0); //NeedPersonalZhanxunNum
		Write32(pItem, 0); //NeedMedalNum
		Write32(pItem, 0); //ItemID
		Write32(pItem, 0); //ItemNum
		Write32(pItem, 0); //AvailPeriod

		len = pItem - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24081, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetMemberList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	char Type = Read8(p);
	char Other = Read8(p);
	UINT Source = Read32(p);
	UINT Param0 = Read32(p);

}

void ResponseGetMemberList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen
	Write32(p, 0); //Uin
	Write16(p, 0); //Num
	for (size_t i = 0; i < n; i++)
	{ //MemberInfo
		BYTE* pMemberInfo = p;
		Write16(pMemberInfo, 0); //len

		Write32(pMemberInfo, 0); //Uin
		WriteString(pMemberInfo, 0); //NickName[]
		Write8(pMemberInfo, 0); //Status
		Write32(pMemberInfo, 0); //Para0
		Write32(pMemberInfo, 0); //Para1
		Write32(pMemberInfo, 0); //Para2
		WriteString(pMemberInfo, 0); //StrPara0[]

		len = pMemberInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //Type
	Write32(p, 0); //Source
	Write8(p, 0); //Other
	Write32(p, 0); //Param0

	len = p - buf;
	SendToClient(Client, 24185, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyModifyGuildNotes(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //NotesLen
	WriteString(p, 0); //Notes[]

	len = p - buf;
	SendToClient(Client, 24083, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyJoinGuildGuildNotes(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //NotesLen
	WriteString(p, 0); //Notes[]

	len = p - buf;
	SendToClient(Client, 24084, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestOperateGuildBlackList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	char OperateType = Read8(p);
	UINT GuildID = Read32(p);
	short OperateNums = Read16(p);
	[] OperateUin[] = Read(p);

}

void ResponseOperateGuildBlackList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //GuildID
	Write16(p, 0); //ResultID
	Write16(p, 0); //SearchResultNums
	Write32(p, 0); //Uins[]

	len = p - buf;
	SendToClient(Client, 24184, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGuildLeisureAreaBlackListInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT GuildID = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGuildLeisureAreaBlackListInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //GuildID
	Write16(p, 0); //ListNums
	for (size_t i = 0; i < n; i++)
	{ //BlackListInfos
		BYTE* pBlackListInfos = p;
		Write16(pBlackListInfos, 0); //len

		Write32(pBlackListInfos, 0); //Uin
		WriteString(pBlackListInfos, 0); //NickName[]

		len = pBlackListInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24302, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyPlayerOutGuildLeisureAreaInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin

	len = p - buf;
	SendToClient(Client, 24303, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestCheckCanInGuildLeisureAreaInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT GuildID = Read32(p);
	UINT Time = Read32(p);

}

void ResponseCheckCanInGuildLeisureAreaInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 24304, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestOpenShopBuyLimitDlg(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void RequestG2AWGetShopBuyLimit(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Time = Read32(p);

}

void ResponseG2AWGetShopBuyLimit(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //Nums
	for (size_t i = 0; i < n; i++)
	{ //Info
		BYTE* pInfo = p;
		Write16(pInfo, 0); //len

		Write8(pInfo, 0); //Open
		Write32(pInfo, 0); //StartTime
		Write32(pInfo, 0); //EndTime
		Write8(pInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //PriceIdx
			Write32(pItemInfo, 0); //LeftNum
			Write32(pItemInfo, 0); //TotalNum
			Write8(pItemInfo, 0); //Discount
			Write8(pItemInfo, 0); //Status

			len = pItemInfo - pInfo;
			Set16(pInfo, (WORD)len);
			pInfo += len;
		}
		Write32(pInfo, 0); //SeasonID

		len = pInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void ResponseOpenShopBuyLimitDlg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write8(p, 0); //Nums
	for (size_t i = 0; i < n; i++)
	{ //Info
		BYTE* pInfo = p;
		Write16(pInfo, 0); //len

		Write8(pInfo, 0); //Open
		Write32(pInfo, 0); //StartTime
		Write32(pInfo, 0); //EndTime
		Write8(pInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //PriceIdx
			Write32(pItemInfo, 0); //LeftNum
			Write32(pItemInfo, 0); //TotalNum
			Write8(pItemInfo, 0); //Discount
			Write8(pItemInfo, 0); //Status

			len = pItemInfo - pInfo;
			Set16(pInfo, (WORD)len);
			pInfo += len;
		}
		Write32(pInfo, 0); //SeasonID

		len = pInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //TextNum
	Write32(p, 0); //ClientRefreshMinTime

	len = p - buf;
	SendToClient(Client, 24197, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetAward(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR AwardType = Read8(p);
	UCHAR Index = Read8(p);
	UCHAR IndexType = Read8(p);

}

void ResponseGetAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write8(p, 0); //AwardType
	Write8(p, 0); //Index
	{ //Award
		BYTE* pAward = p;
		Write16(pAward, 0); //len

		Write32(pAward, 0); //Exp
		Write32(pAward, 0); //Money
		Write32(pAward, 0); //SuperMoney
		Write16(pAward, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAward;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write32(pAward, 0); //Coupons
		Write32(pAward, 0); //GuildPoint
		Write32(pAward, 0); //LuckMoney
		Write8(pAward, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAward;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write32(pAward, 0); //SpeedCoin

		len = pAward - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //IndexType

	len = p - buf;
	SendToClient(Client, 24308, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestDoActiveKartInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT KartID = Read32(p);
	UINT ActiveItemID = Read32(p);
	UINT ActiveNums = Read32(p);

}

void ResponseDoActiveKartInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //KartID
	Write16(p, 0); //ResultID
	Write16(p, 0); //ActiveSuccNums
	Write16(p, 0); //ActiveFailedNums
	Write16(p, 0); //CurrentActiveLevel
	Write16(p, 0); //AwardItemNum
	for (size_t i = 0; i < n; i++)
	{ //ActiveFailedAwardItemInfo
		BYTE* pActiveFailedAwardItemInfo = p;
		Write16(pActiveFailedAwardItemInfo, 0); //len

		WriteUn(pActiveFailedAwardItemInfo, 0); //itemID
		WriteUn(pActiveFailedAwardItemInfo, 0); //itemNums
		Write32(pActiveFailedAwardItemInfo, 0); //AvailPeriod

		len = pActiveFailedAwardItemInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //LuckValue
	Write32(p, 0); //TotalLuckValue

	len = p - buf;
	SendToClient(Client, 24310, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetActivedKartInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT KartID = Read32(p);

}

void ResponseGetActivedKartInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //KartID
	Write16(p, 0); //ResultID
	Write32(p, 0); //LuckyFactor
	Write16(p, 0); //CurrentActiveLevel

	len = p - buf;
	SendToClient(Client, 24311, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifySpeicifiedKartActivedSkillInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;


	len = p - buf;
	SendToClient(Client, 24312, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyKartActiveCfgInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //EnergySourceNums
	for (size_t i = 0; i < n; i++)
	{ //EnergySourceInfo
		BYTE* pEnergySourceInfo = p;
		Write16(pEnergySourceInfo, 0); //len

		Write16(pEnergySourceInfo, 0); //SourceClass
		Write16(pEnergySourceInfo, 0); //ActiveProbability
		Write32(pEnergySourceInfo, 0); //ItemID

		len = pEnergySourceInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //ForbiddenActiveKartNums
	Write32(p, 0); //ForbiddenKartID[]
	Write16(p, 0); //ActiveKartNums
	Write32(p, 0); //ActiveKartID[]

	len = p - buf;
	SendToClient(Client, 24313, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyPlayerAllActiveKartInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //KartNums
	for (size_t i = 0; i < n; i++)
	{ //ActiveKartInfo
		BYTE* pActiveKartInfo = p;
		Write16(pActiveKartInfo, 0); //len

		Write32(pActiveKartInfo, 0); //KartType
		Write32(pActiveKartInfo, 0); //ItemID
		Write32(pActiveKartInfo, 0); //ActiveLevel

		len = pActiveKartInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24338, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyClientHasJiaNianHuaGroupAwardNotReceived(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 24339, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetTowerChallengeCommonCfg(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetTowerChallengeCommonCfg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //DailyWorshipNum
	Write32(p, 0); //DailyTiliNum
	Write32(p, 0); //SeasonID
	{ //RandomCfgToClient
		BYTE* pRandomCfgToClient = p;
		Write16(pRandomCfgToClient, 0); //len

		Write32(pRandomCfgToClient, 0); //LevelNum
		for (size_t i = 0; i < n; i++)
		{ //RandomLevel
			BYTE* pRandomLevel = pRandomCfgToClient;
			Write16(pRandomLevel, 0); //len

			Write8(pRandomLevel, 0); //LevelID
			Write8(pRandomLevel, 0); //LevelDifficulty
			Write32(pRandomLevel, 0); //Theme
			Write32(pRandomLevel, 0); //LevelTaskNum
			for (size_t i = 0; i < n; i++)
			{ //RandomLevelTask
				BYTE* pRandomLevelTask = pRandomLevel;
				Write16(pRandomLevelTask, 0); //len

				Write8(pRandomLevelTask, 0); //LevelTaskID
				Write32(pRandomLevelTask, 0); //TaskID
				Write32(pRandomLevelTask, 0); //MapID
				Write32(pRandomLevelTask, 0); //SpecialFlag
				for (size_t i = 0; i < n; i++)
				{ //JudgeStarCondition
					BYTE* pJudgeStarCondition = pRandomLevelTask;
					Write16(pJudgeStarCondition, 0); //len

					Write32(pJudgeStarCondition, 0); //Type
					Write32(pJudgeStarCondition, 0); //ConditionNum

					len = pJudgeStarCondition - pRandomLevelTask;
					Set16(pRandomLevelTask, (WORD)len);
					pRandomLevelTask += len;
				}
				Write32(pRandomLevelTask, 0); //TrackElementNum
				for (size_t i = 0; i < n; i++)
				{ //TrackElement
					BYTE* pTrackElement = pRandomLevelTask;
					Write16(pTrackElement, 0); //len

					Write8(pTrackElement, 0); //Type
					Write8(pTrackElement, 0); //CheckpointNum
					Write8(pTrackElement, 0); //Checkpoint[]
					Write32(pTrackElement, 0); //CarID
					Write16(pTrackElement, 0); //ReverseTimeLimit
					Write8(pTrackElement, 0); //CoinFrequence
					Write8(pTrackElement, 0); //CoinNumLimit
					Write8(pTrackElement, 0); //ShadowID

					len = pTrackElement - pRandomLevelTask;
					Set16(pRandomLevelTask, (WORD)len);
					pRandomLevelTask += len;
				}

				len = pRandomLevelTask - pRandomLevel;
				Set16(pRandomLevel, (WORD)len);
				pRandomLevel += len;
			}

			len = pRandomLevel - pRandomCfgToClient;
			Set16(pRandomCfgToClient, (WORD)len);
			pRandomCfgToClient += len;
		}

		len = pRandomCfgToClient - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //LuckyColor
	Write8(p, 0); //TiliCostJump1
	Write8(p, 0); //TiliCostJump10

	len = p - buf;
	SendToClient(Client, 24316, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetTowerChallengePersonalInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetTowerChallengePersonalInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write32(p, 0); //LocaleCode
	Write32(p, 0); //StarCoinsNum
	Write32(p, 0); //TotalCleardLevelNum
	Write32(p, 0); //Score
	Write16(p, 0); //LevelNum
	for (size_t i = 0; i < n; i++)
	{ //LevelInfo
		BYTE* pLevelInfo = p;
		Write16(pLevelInfo, 0); //len

		Write8(pLevelInfo, 0); //LevelID
		Write32(pLevelInfo, 0); //LevelTaskNum
		for (size_t i = 0; i < n; i++)
		{ //LevelTaskInfo
			BYTE* pLevelTaskInfo = pLevelInfo;
			Write16(pLevelTaskInfo, 0); //len

			Write8(pLevelTaskInfo, 0); //LevelTaskID
			Write8(pLevelTaskInfo, 0); //StarNum
			Write32(pLevelTaskInfo, 0); //Score

			len = pLevelTaskInfo - pLevelInfo;
			Set16(pLevelInfo, (WORD)len);
			pLevelInfo += len;
		}

		len = pLevelInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //TiliNumNow
	{ //LightInfo
		BYTE* pLightInfo = p;
		Write16(pLightInfo, 0); //len

		Write32(pLightInfo, 0); //Num
		for (size_t i = 0; i < n; i++)
		{ //LightInfo
			BYTE* pLightInfo = pLightInfo;
			Write16(pLightInfo, 0); //len

			Write8(pLightInfo, 0); //Color
			Write8(pLightInfo, 0); //IsLightOn
			Write32(pLightInfo, 0); //Uin
			WriteString(pLightInfo, 0); //NickName[]

			len = pLightInfo - pLightInfo;
			Set16(pLightInfo, (WORD)len);
			pLightInfo += len;
		}

		len = pLightInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //LeftWorshipNum
	Write32(p, 0); //LevelBoxNum
	for (size_t i = 0; i < n; i++)
	{ //LevelBox
		BYTE* pLevelBox = p;
		Write16(pLevelBox, 0); //len

		Write8(pLevelBox, 0); //LevelID
		Write8(pLevelBox, 0); //Bonus
		Write8(pLevelBox, 0); //BoxNum
		for (size_t i = 0; i < n; i++)
		{ //LevelBox
			BYTE* pLevelBox = pLevelBox;
			Write16(pLevelBox, 0); //len

			Write8(pLevelBox, 0); //Index
			Write8(pLevelBox, 0); //Status
			{ //Award
				BYTE* pAward = pLevelBox;
				Write16(pAward, 0); //len

				Write32(pAward, 0); //Exp
				Write32(pAward, 0); //Money
				Write32(pAward, 0); //SuperMoney
				Write16(pAward, 0); //ItemNum
				for (size_t i = 0; i < n; i++)
				{ //ItemInfo
					BYTE* pItemInfo = pAward;
					Write16(pItemInfo, 0); //len

					Write32(pItemInfo, 0); //ItemID
					Write32(pItemInfo, 0); //ItemNum
					Write32(pItemInfo, 0); //AvailPeriod
					Write8(pItemInfo, 0); //Status
					WriteUn(pItemInfo, 0); //ObtainTime
					Write32(pItemInfo, 0); //OtherAttribute
					Write16(pItemInfo, 0); //ItemType

					len = pItemInfo - pAward;
					Set16(pAward, (WORD)len);
					pAward += len;
				}
				Write32(pAward, 0); //Coupons
				Write32(pAward, 0); //GuildPoint
				Write32(pAward, 0); //LuckMoney
				Write8(pAward, 0); //ExtendInfoNum
				for (size_t i = 0; i < n; i++)
				{ //ExtendInfoAward
					BYTE* pExtendInfoAward = pAward;
					Write16(pExtendInfoAward, 0); //len

					Write16(pExtendInfoAward, 0); //Key
					Write32(pExtendInfoAward, 0); //AddValue
					Write32(pExtendInfoAward, 0); //TotalValue
					Write8(pExtendInfoAward, 0); //ShowPriority
					Write16(pExtendInfoAward, 0); //BuyNeedScore
					Write8(pExtendInfoAward, 0); //OneMatchMaxNum

					len = pExtendInfoAward - pAward;
					Set16(pAward, (WORD)len);
					pAward += len;
				}
				Write32(pAward, 0); //SpeedCoin

				len = pAward - pLevelBox;
				Set16(pLevelBox, (WORD)len);
				pLevelBox += len;
			}

			len = pLevelBox - pLevelBox;
			Set16(pLevelBox, (WORD)len);
			pLevelBox += len;
		}

		len = pLevelBox - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //UsePropPrompt

	len = p - buf;
	SendToClient(Client, 24317, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestTowerOpenBox(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	char LevelID = Read8(p);
	char Index = Read8(p);

}

void ResponseTowerOpenBox(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write8(p, 0); //LevelID
	Write8(p, 0); //Index
	WriteUn(p, 0); //hasAward
	for (size_t i = 0; i < n; i++)
	{ //Award
		BYTE* pAward = p;
		Write16(pAward, 0); //len

		Write32(pAward, 0); //Exp
		Write32(pAward, 0); //Money
		Write32(pAward, 0); //SuperMoney
		Write16(pAward, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAward;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write32(pAward, 0); //Coupons
		Write32(pAward, 0); //GuildPoint
		Write32(pAward, 0); //LuckMoney
		Write8(pAward, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAward;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write32(pAward, 0); //SpeedCoin

		len = pAward - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24331, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyTowerBoxInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //LevelBoxNum
	for (size_t i = 0; i < n; i++)
	{ //LevelBox
		BYTE* pLevelBox = p;
		Write16(pLevelBox, 0); //len

		Write8(pLevelBox, 0); //LevelID
		Write8(pLevelBox, 0); //Bonus
		Write8(pLevelBox, 0); //BoxNum
		for (size_t i = 0; i < n; i++)
		{ //LevelBox
			BYTE* pLevelBox = pLevelBox;
			Write16(pLevelBox, 0); //len

			Write8(pLevelBox, 0); //Index
			Write8(pLevelBox, 0); //Status
			{ //Award
				BYTE* pAward = pLevelBox;
				Write16(pAward, 0); //len

				Write32(pAward, 0); //Exp
				Write32(pAward, 0); //Money
				Write32(pAward, 0); //SuperMoney
				Write16(pAward, 0); //ItemNum
				for (size_t i = 0; i < n; i++)
				{ //ItemInfo
					BYTE* pItemInfo = pAward;
					Write16(pItemInfo, 0); //len

					Write32(pItemInfo, 0); //ItemID
					Write32(pItemInfo, 0); //ItemNum
					Write32(pItemInfo, 0); //AvailPeriod
					Write8(pItemInfo, 0); //Status
					WriteUn(pItemInfo, 0); //ObtainTime
					Write32(pItemInfo, 0); //OtherAttribute
					Write16(pItemInfo, 0); //ItemType

					len = pItemInfo - pAward;
					Set16(pAward, (WORD)len);
					pAward += len;
				}
				Write32(pAward, 0); //Coupons
				Write32(pAward, 0); //GuildPoint
				Write32(pAward, 0); //LuckMoney
				Write8(pAward, 0); //ExtendInfoNum
				for (size_t i = 0; i < n; i++)
				{ //ExtendInfoAward
					BYTE* pExtendInfoAward = pAward;
					Write16(pExtendInfoAward, 0); //len

					Write16(pExtendInfoAward, 0); //Key
					Write32(pExtendInfoAward, 0); //AddValue
					Write32(pExtendInfoAward, 0); //TotalValue
					Write8(pExtendInfoAward, 0); //ShowPriority
					Write16(pExtendInfoAward, 0); //BuyNeedScore
					Write8(pExtendInfoAward, 0); //OneMatchMaxNum

					len = pExtendInfoAward - pAward;
					Set16(pAward, (WORD)len);
					pAward += len;
				}
				Write32(pAward, 0); //SpeedCoin

				len = pAward - pLevelBox;
				Set16(pLevelBox, (WORD)len);
				pLevelBox += len;
			}

			len = pLevelBox - pLevelBox;
			Set16(pLevelBox, (WORD)len);
			pLevelBox += len;
		}

		len = pLevelBox - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24332, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyTowerBeWorshipedAwardNum(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write32(p, 0); //BeWorshipedAwardNum

	len = p - buf;
	SendToClient(Client, 24333, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetTowerChallengeAreaInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetTowerChallengeAreaInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write32(p, 0); //AreaCode
	for (size_t i = 0; i < n; i++)
	{ //LevelTaskWithProp
		BYTE* pLevelTaskWithProp = p;
		Write16(pLevelTaskWithProp, 0); //len

		Write8(pLevelTaskWithProp, 0); //LevelID
		Write8(pLevelTaskWithProp, 0); //LevelTaskID
		Write32(pLevelTaskWithProp, 0); //ClearedPlayerNum
		Write32(pLevelTaskWithProp, 0); //NeededPlayerNum
		Write8(pLevelTaskWithProp, 0); //LockFlag

		len = pLevelTaskWithProp - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24318, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestRegisterTowerChallenge(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT LocaleCode = Read32(p);

}

void ResponseRegisterTowerChallenge(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write32(p, 0); //LocaleCode

	len = p - buf;
	SendToClient(Client, 24319, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetTowerChallengePropInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetTowerChallengePropInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write32(p, 0); //TowerPropNum
	for (size_t i = 0; i < n; i++)
	{ //TowerProp
		BYTE* pTowerProp = p;
		Write16(pTowerProp, 0); //len

		Write8(pTowerProp, 0); //PropType
		Write8(pTowerProp, 0); //PropStatus
		Write8(pTowerProp, 0); //StarCoinsNum

		len = pTowerProp - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24328, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestCheckStarCoins(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Idx = Read32(p);

}

void ResponseCheckStarCoins(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Idx
	Write32(p, 0); //Uin
	Write32(p, 0); //StarCoins

	len = p - buf;
	SendToClient(Client, 24320, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestUseJumpLevelAddition(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Idx = Read32(p);

}

void ResponseUseJumpLevelAddition(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin

	len = p - buf;
	SendToClient(Client, 24321, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestWorship(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT DstUin = Read32(p);
	UINT ColorCode = Read32(p);
	char[] NickName[] = ReadString(p);

}

void ResponseWorship(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write32(p, 0); //DstUin
	WriteString(p, 0); //NickName[]
	Write32(p, 0); //LeftWorshipNum
	Write8(p, 0); //HasAward
	for (size_t i = 0; i < n; i++)
	{ //Award
		BYTE* pAward = p;
		Write16(pAward, 0); //len

		{ //AwardToClient
			BYTE* pAwardToClient = pAward;
			Write16(pAwardToClient, 0); //len

			Write32(pAwardToClient, 0); //Exp
			Write32(pAwardToClient, 0); //Money
			Write32(pAwardToClient, 0); //SuperMoney
			Write16(pAwardToClient, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAwardToClient;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAwardToClient;
				Set16(pAwardToClient, (WORD)len);
				pAwardToClient += len;
			}
			Write32(pAwardToClient, 0); //Coupons
			Write32(pAwardToClient, 0); //GuildPoint
			Write32(pAwardToClient, 0); //LuckMoney
			Write8(pAwardToClient, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAwardToClient;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAwardToClient;
				Set16(pAwardToClient, (WORD)len);
				pAwardToClient += len;
			}
			Write32(pAwardToClient, 0); //SpeedCoin

			len = pAwardToClient - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write32(pAward, 0); //StarCoinNum

		len = pAward - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24325, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyLightOn(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	{ //LightInfo
		BYTE* pLightInfo = p;
		Write16(pLightInfo, 0); //len

		Write32(pLightInfo, 0); //Num
		for (size_t i = 0; i < n; i++)
		{ //LightInfo
			BYTE* pLightInfo = pLightInfo;
			Write16(pLightInfo, 0); //len

			Write8(pLightInfo, 0); //Color
			Write8(pLightInfo, 0); //IsLightOn
			Write32(pLightInfo, 0); //Uin
			WriteString(pLightInfo, 0); //NickName[]

			len = pLightInfo - pLightInfo;
			Set16(pLightInfo, (WORD)len);
			pLightInfo += len;
		}

		len = pLightInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //IsAllLightOn
	for (size_t i = 0; i < n; i++)
	{ //Award
		BYTE* pAward = p;
		Write16(pAward, 0); //len

		{ //AwardToClient
			BYTE* pAwardToClient = pAward;
			Write16(pAwardToClient, 0); //len

			Write32(pAwardToClient, 0); //Exp
			Write32(pAwardToClient, 0); //Money
			Write32(pAwardToClient, 0); //SuperMoney
			Write16(pAwardToClient, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAwardToClient;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAwardToClient;
				Set16(pAwardToClient, (WORD)len);
				pAwardToClient += len;
			}
			Write32(pAwardToClient, 0); //Coupons
			Write32(pAwardToClient, 0); //GuildPoint
			Write32(pAwardToClient, 0); //LuckMoney
			Write8(pAwardToClient, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAwardToClient;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAwardToClient;
				Set16(pAwardToClient, (WORD)len);
				pAwardToClient += len;
			}
			Write32(pAwardToClient, 0); //SpeedCoin

			len = pAwardToClient - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write32(pAward, 0); //StarCoinNum

		len = pAward - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24326, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestStartTowerChallenge(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT GameType = Read16(p);
	char LevelID = Read8(p);
	char LevelTaskID = Read8(p);
	UINT Idx = Read32(p);

}

void ResponseStartTowerChallenge(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin

	len = p - buf;
	SendToClient(Client, 24327, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestQuitTowerChallenge(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void NotifyTowerChallengeResult(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write16(p, 0); //GameType
	Write8(p, 0); //LevelID
	Write8(p, 0); //LevelTaskID
	for (size_t i = 0; i < n; i++)
	{ //JudgeStarCondition
		BYTE* pJudgeStarCondition = p;
		Write16(pJudgeStarCondition, 0); //len

		Write32(pJudgeStarCondition, 0); //Type
		Write32(pJudgeStarCondition, 0); //ConditionNum

		len = pJudgeStarCondition - p;
		Set16(p, (WORD)len);
		p += len;
	}
	for (size_t i = 0; i < n; i++)
	{ //ConditionFinish
		BYTE* pConditionFinish = p;
		Write16(pConditionFinish, 0); //len

		Write32(pConditionFinish, 0); //Type
		Write32(pConditionFinish, 0); //ConditionNum

		len = pConditionFinish - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //Score
	Write32(p, 0); //StarNum
	Write32(p, 0); //StarCoinsNum
	Write8(p, 0); //HasAward
	for (size_t i = 0; i < n; i++)
	{ //Award
		BYTE* pAward = p;
		Write16(pAward, 0); //len

		Write32(pAward, 0); //Exp
		Write32(pAward, 0); //Money
		Write32(pAward, 0); //SuperMoney
		Write16(pAward, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAward;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write32(pAward, 0); //Coupons
		Write32(pAward, 0); //GuildPoint
		Write32(pAward, 0); //LuckMoney
		Write8(pAward, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAward;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write32(pAward, 0); //SpeedCoin

		len = pAward - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24330, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGuildPKGetInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGuildPKGetInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write32(p, 0); //BeginTime
	Write32(p, 0); //AccountTime
	Write32(p, 0); //EndTime
	Write32(p, 0); //GuildID
	WriteString(p, 0); //GuildName[]
	Write32(p, 0); //BindGuildID
	WriteString(p, 0); //BindGuildName[]
	Write32(p, 0); //MedalNum
	{ //DayAward
		BYTE* pDayAward = p;
		Write16(pDayAward, 0); //len

		Write32(pDayAward, 0); //MedalNum
		Write32(pDayAward, 0); //SuperMoney
		Write32(pDayAward, 0); //Coupons

		len = pDayAward - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //LoginAwardState
	Write16(p, 0); //MedalTaskNum
	for (size_t i = 0; i < n; i++)
	{ //MedalTask
		BYTE* pMedalTask = p;
		Write16(pMedalTask, 0); //len

		Write32(pMedalTask, 0); //TaskID
		Write32(pMedalTask, 0); //MedalNum

		len = pMedalTask - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //PersonalAwardNum
	for (size_t i = 0; i < n; i++)
	{ //PersonalAward
		BYTE* pPersonalAward = p;
		Write16(pPersonalAward, 0); //len

		Write32(pPersonalAward, 0); //MedalNum
		Write32(pPersonalAward, 0); //ItemID
		Write32(pPersonalAward, 0); //ItemNum
		Write32(pPersonalAward, 0); //ItemPeriod
		Write32(pPersonalAward, 0); //SuperMoney
		Write32(pPersonalAward, 0); //Coupons
		Write8(pPersonalAward, 0); //AwardState

		len = pPersonalAward - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //TopListAwardNum
	for (size_t i = 0; i < n; i++)
	{ //TopListAward
		BYTE* pTopListAward = p;
		Write16(pTopListAward, 0); //len

		Write16(pTopListAward, 0); //BeginRank
		Write16(pTopListAward, 0); //EndRank
		{ //GuildAward
			BYTE* pGuildAward = pTopListAward;
			Write16(pGuildAward, 0); //len

			Write32(pGuildAward, 0); //GuildScore
			Write16(pGuildAward, 0); //Rank
			{ //FirstAward
				BYTE* pFirstAward = pGuildAward;
				Write16(pFirstAward, 0); //len

				Write32(pFirstAward, 0); //ItemID
				Write32(pFirstAward, 0); //ItemNum
				Write32(pFirstAward, 0); //ItemPeriod
				Write32(pFirstAward, 0); //SuperMoney
				Write32(pFirstAward, 0); //Coupons

				len = pFirstAward - pGuildAward;
				Set16(pGuildAward, (WORD)len);
				pGuildAward += len;
			}
			Write32(pGuildAward, 0); //MedalNum
			{ //SecondAward
				BYTE* pSecondAward = pGuildAward;
				Write16(pSecondAward, 0); //len

				Write32(pSecondAward, 0); //ItemID
				Write32(pSecondAward, 0); //ItemNum
				Write32(pSecondAward, 0); //ItemPeriod
				Write32(pSecondAward, 0); //SuperMoney
				Write32(pSecondAward, 0); //Coupons

				len = pSecondAward - pGuildAward;
				Set16(pGuildAward, (WORD)len);
				pGuildAward += len;
			}

			len = pGuildAward - pTopListAward;
			Set16(pTopListAward, (WORD)len);
			pTopListAward += len;
		}

		len = pTopListAward - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //GuildMedalNum
	for (size_t i = 0; i < n; i++)
	{ //GuildDayAward
		BYTE* pGuildDayAward = p;
		Write16(pGuildDayAward, 0); //len

		Write32(pGuildDayAward, 0); //Exp
		Write32(pGuildDayAward, 0); //Money
		Write32(pGuildDayAward, 0); //SuperMoney
		Write16(pGuildDayAward, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pGuildDayAward;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pGuildDayAward;
			Set16(pGuildDayAward, (WORD)len);
			pGuildDayAward += len;
		}
		Write32(pGuildDayAward, 0); //Coupons
		Write32(pGuildDayAward, 0); //GuildPoint
		Write32(pGuildDayAward, 0); //LuckMoney
		Write8(pGuildDayAward, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pGuildDayAward;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pGuildDayAward;
			Set16(pGuildDayAward, (WORD)len);
			pGuildDayAward += len;
		}
		Write32(pGuildDayAward, 0); //SpeedCoin

		len = pGuildDayAward - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //ReasonLen
	Write8(p, 0); //GuildDayAwardState

	len = p - buf;
	SendToClient(Client, 24087, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGuildPKBindGuild(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR Operation = Read8(p);

}

void ResponseGuildPKBindGuild(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen
	Write8(p, 0); //Operation

	len = p - buf;
	SendToClient(Client, 24088, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGuildPKGetAward(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR AwardType = Read8(p);
	UCHAR Index = Read8(p);

}

void ResponseGuildPKGetAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write8(p, 0); //AwardType
	{ //Award
		BYTE* pAward = p;
		Write16(pAward, 0); //len

		Write32(pAward, 0); //MedalNum
		Write32(pAward, 0); //ItemID
		Write32(pAward, 0); //ItemNum
		Write32(pAward, 0); //ItemPeriod
		Write32(pAward, 0); //SuperMoney
		Write32(pAward, 0); //Coupons

		len = pAward - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //ReasonLen
	Write32(p, 0); //MedalNum
	Write16(p, 0); //PersonalAwardNum
	Write16(p, 0); //PersonalAwardState[]

	len = p - buf;
	SendToClient(Client, 24089, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGuildPKGetGuildMemberList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT GuildID = Read32(p);
	char Type = Read8(p);

}

void ResponseGuildPKGetGuildMemberList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //MemberNum
	for (size_t i = 0; i < n; i++)
	{ //GuildMember
		BYTE* pGuildMember = p;
		Write16(pGuildMember, 0); //len

		Write32(pGuildMember, 0); //Uin
		WriteString(pGuildMember, 0); //NickName[]
		Write32(pGuildMember, 0); //MedalNum

		len = pGuildMember - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //ReasonLen
	Write32(p, 0); //GuildTotalMedalNum
	Write32(p, 0); //GuildID
	Write8(p, 0); //Type

	len = p - buf;
	SendToClient(Client, 24090, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestFoolActivityGetInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseFoolActivityGetInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write32(p, 0); //BeginTime
	Write32(p, 0); //EndTime
	Write32(p, 0); //SentBoxNum
	Write32(p, 0); //ReceivedBoxNum
	Write32(p, 0); //OpenedBoxNum
	Write16(p, 0); //FragmentTaskNum
	for (size_t i = 0; i < n; i++)
	{ //FragmentTask
		BYTE* pFragmentTask = p;
		Write16(pFragmentTask, 0); //len

		Write32(pFragmentTask, 0); //TaskID
		Write32(pFragmentTask, 0); //FragmentID1
		Write32(pFragmentTask, 0); //FragmentNum1
		Write32(pFragmentTask, 0); //FragmentID2
		Write32(pFragmentTask, 0); //FragmentNum2

		len = pFragmentTask - p;
		Set16(p, (WORD)len);
		p += len;
	}
	for (size_t i = 0; i < n; i++)
	{ //BoxCondition
		BYTE* pBoxCondition = p;
		Write16(pBoxCondition, 0); //len

		Write32(pBoxCondition, 0); //BoxID
		Write32(pBoxCondition, 0); //FragmentID1
		Write32(pBoxCondition, 0); //FragmentNum1
		Write32(pBoxCondition, 0); //FragmentID2
		Write32(pBoxCondition, 0); //FragmentNum2

		len = pBoxCondition - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //PersonalAwardNum
	for (size_t i = 0; i < n; i++)
	{ //PersonalAward
		BYTE* pPersonalAward = p;
		Write16(pPersonalAward, 0); //len

		Write32(pPersonalAward, 0); //BoxOpenNum
		Write32(pPersonalAward, 0); //ItemID
		Write32(pPersonalAward, 0); //ItemNum
		Write32(pPersonalAward, 0); //ItemPeriod
		Write32(pPersonalAward, 0); //SuperMoney
		Write32(pPersonalAward, 0); //Coupons
		Write8(pPersonalAward, 0); //AwardState

		len = pPersonalAward - p;
		Set16(p, (WORD)len);
		p += len;
	}
	for (size_t i = 0; i < n; i++)
	{ //PresentBoxAward
		BYTE* pPresentBoxAward = p;
		Write16(pPresentBoxAward, 0); //len

		Write16(pPresentBoxAward, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //DisplayAward
			BYTE* pDisplayAward = pPresentBoxAward;
			Write16(pDisplayAward, 0); //len

			Write32(pDisplayAward, 0); //Exp
			Write32(pDisplayAward, 0); //Money
			Write32(pDisplayAward, 0); //SuperMoney
			Write16(pDisplayAward, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pDisplayAward;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pDisplayAward;
				Set16(pDisplayAward, (WORD)len);
				pDisplayAward += len;
			}
			Write32(pDisplayAward, 0); //Coupons
			Write32(pDisplayAward, 0); //GuildPoint
			Write32(pDisplayAward, 0); //LuckMoney
			Write8(pDisplayAward, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pDisplayAward;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pDisplayAward;
				Set16(pDisplayAward, (WORD)len);
				pDisplayAward += len;
			}
			Write32(pDisplayAward, 0); //SpeedCoin

			len = pDisplayAward - pPresentBoxAward;
			Set16(pPresentBoxAward, (WORD)len);
			pPresentBoxAward += len;
		}

		len = pPresentBoxAward - p;
		Set16(p, (WORD)len);
		p += len;
	}
	for (size_t i = 0; i < n; i++)
	{ //UseBoxAward
		BYTE* pUseBoxAward = p;
		Write16(pUseBoxAward, 0); //len

		Write16(pUseBoxAward, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //DisplayAward
			BYTE* pDisplayAward = pUseBoxAward;
			Write16(pDisplayAward, 0); //len

			Write32(pDisplayAward, 0); //Exp
			Write32(pDisplayAward, 0); //Money
			Write32(pDisplayAward, 0); //SuperMoney
			Write16(pDisplayAward, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pDisplayAward;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pDisplayAward;
				Set16(pDisplayAward, (WORD)len);
				pDisplayAward += len;
			}
			Write32(pDisplayAward, 0); //Coupons
			Write32(pDisplayAward, 0); //GuildPoint
			Write32(pDisplayAward, 0); //LuckMoney
			Write8(pDisplayAward, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pDisplayAward;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pDisplayAward;
				Set16(pDisplayAward, (WORD)len);
				pDisplayAward += len;
			}
			Write32(pDisplayAward, 0); //SpeedCoin

			len = pDisplayAward - pUseBoxAward;
			Set16(pUseBoxAward, (WORD)len);
			pUseBoxAward += len;
		}

		len = pUseBoxAward - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 24091, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestFoolActivityGetAward(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR Index = Read8(p);

}

void ResponseFoolActivityGetAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	{ //Award
		BYTE* pAward = p;
		Write16(pAward, 0); //len

		Write32(pAward, 0); //Exp
		Write32(pAward, 0); //Money
		Write32(pAward, 0); //SuperMoney
		Write16(pAward, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAward;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write32(pAward, 0); //Coupons
		Write32(pAward, 0); //GuildPoint
		Write32(pAward, 0); //LuckMoney
		Write8(pAward, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAward;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write32(pAward, 0); //SpeedCoin

		len = pAward - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //PersonalAwardNum
	Write16(p, 0); //PersonalAwardState[]
	Write16(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 24092, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestFoolActivityMakeBox(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR BoxType = Read8(p);
	UINT BoxNum = Read32(p);

}

void ResponseFoolActivityMakeBox(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen
	Write8(p, 0); //BoxType
	Write32(p, 0); //BoxNum

	len = p - buf;
	SendToClient(Client, 24093, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyFoolActivityUseBoxAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //AwardType
	Write32(p, 0); //BoxNum
	for (size_t i = 0; i < n; i++)
	{ //Award
		BYTE* pAward = p;
		Write16(pAward, 0); //len

		Write32(pAward, 0); //Exp
		Write32(pAward, 0); //Money
		Write32(pAward, 0); //SuperMoney
		Write16(pAward, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAward;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write32(pAward, 0); //Coupons
		Write32(pAward, 0); //GuildPoint
		Write32(pAward, 0); //LuckMoney
		Write8(pAward, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAward;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write32(pAward, 0); //SpeedCoin

		len = pAward - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //IsTrigerFool
	Write8(p, 0); //BoxType

	len = p - buf;
	SendToClient(Client, 24094, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestCarLottoryGetInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseCarLottoryGetInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen
	Write32(p, 0); //Uin
	Write32(p, 0); //BeginTime
	Write32(p, 0); //EndTime
	Write16(p, 0); //LeftDays
	Write8(p, 0); //IsSigned
	Write32(p, 0); //Fortune
	Write32(p, 0); //TotalSignNum
	Write16(p, 0); //ActCntLen
	Write8(p, 0); //TotalSignAwardNum
	for (size_t i = 0; i < n; i++)
	{ //TotalSign
		BYTE* pTotalSign = p;
		Write16(pTotalSign, 0); //len

		Write32(pTotalSign, 0); //SignNum
		{ //DisplayAward
			BYTE* pDisplayAward = pTotalSign;
			Write16(pDisplayAward, 0); //len

			Write32(pDisplayAward, 0); //Exp
			Write32(pDisplayAward, 0); //Money
			Write32(pDisplayAward, 0); //SuperMoney
			Write16(pDisplayAward, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pDisplayAward;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pDisplayAward;
				Set16(pDisplayAward, (WORD)len);
				pDisplayAward += len;
			}
			Write32(pDisplayAward, 0); //Coupons
			Write32(pDisplayAward, 0); //GuildPoint
			Write32(pDisplayAward, 0); //LuckMoney
			Write8(pDisplayAward, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pDisplayAward;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pDisplayAward;
				Set16(pDisplayAward, (WORD)len);
				pDisplayAward += len;
			}
			Write32(pDisplayAward, 0); //SpeedCoin

			len = pDisplayAward - pTotalSign;
			Set16(pTotalSign, (WORD)len);
			pTotalSign += len;
		}
		Write8(pTotalSign, 0); //AwardState

		len = pTotalSign - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //TurnAwardNum
	for (size_t i = 0; i < n; i++)
	{ //TurnAward
		BYTE* pTurnAward = p;
		Write16(pTurnAward, 0); //len

		Write32(pTurnAward, 0); //SuperMoney
		Write32(pTurnAward, 0); //Coupons
		Write32(pTurnAward, 0); //Fortune
		Write32(pTurnAward, 0); //ItemID
		Write32(pTurnAward, 0); //ItemNum
		Write32(pTurnAward, 0); //ItemPeriod
		Write8(pTurnAward, 0); //IsBest

		len = pTurnAward - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //StageNum
	for (size_t i = 0; i < n; i++)
	{ //Stage
		BYTE* pStage = p;
		Write16(pStage, 0); //len

		Write32(pStage, 0); //LottoryBeginTime
		Write8(pStage, 0); //BestAwardNum
		for (size_t i = 0; i < n; i++)
		{ //BestAward
			BYTE* pBestAward = pStage;
			Write16(pBestAward, 0); //len

			Write32(pBestAward, 0); //ItemID
			Write8(pBestAward, 0); //NameLen

			len = pBestAward - pStage;
			Set16(pStage, (WORD)len);
			pStage += len;
		}
		Write8(pStage, 0); //StageState
		Write32(pStage, 0); //LottoryEndTime

		len = pStage - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ShowBestItemNum
	for (size_t i = 0; i < n; i++)
	{ //ShowBestItem
		BYTE* pShowBestItem = p;
		Write16(pShowBestItem, 0); //len

		Write32(pShowBestItem, 0); //ItemID
		Write8(pShowBestItem, 0); //NameLen

		len = pShowBestItem - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //LeftTime
	Write8(p, 0); //NextStage
	Write16(p, 0); //AwardCntLen
	Write8(p, 0); //RecordNum
	for (size_t i = 0; i < n; i++)
	{ //Record
		BYTE* pRecord = p;
		Write16(pRecord, 0); //len

		Write8(pRecord, 0); //RecordLen

		len = pRecord - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //TurnCostID
	Write32(p, 0); //CurrentSCarNum
	Write32(p, 0); //CurrentTCarNum
	Write32(p, 0); //CurrentACarNum

	len = p - buf;
	SendToClient(Client, 24095, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestCarLottoryGetAward(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR Operation = Read8(p);
	UCHAR Index = Read8(p);

}

void ResponseCarLottoryGetAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen
	Write8(p, 0); //Operation
	Write8(p, 0); //Index
	{ //Award
		BYTE* pAward = p;
		Write16(pAward, 0); //len

		Write32(pAward, 0); //Exp
		Write32(pAward, 0); //Money
		Write32(pAward, 0); //SuperMoney
		Write16(pAward, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAward;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write32(pAward, 0); //Coupons
		Write32(pAward, 0); //GuildPoint
		Write32(pAward, 0); //LuckMoney
		Write8(pAward, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAward;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write32(pAward, 0); //SpeedCoin

		len = pAward - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //Fortune
	Write32(p, 0); //TotalSignNum
	Write16(p, 0); //AttachLen
	Write8(p, 0); //TurnIdx
	Write32(p, 0); //TotalFortune

	len = p - buf;
	SendToClient(Client, 24096, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyClientCommonAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //AwardType
	{ //Award
		BYTE* pAward = p;
		Write16(pAward, 0); //len

		Write32(pAward, 0); //Exp
		Write32(pAward, 0); //Money
		Write32(pAward, 0); //SuperMoney
		Write16(pAward, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAward;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write32(pAward, 0); //Coupons
		Write32(pAward, 0); //GuildPoint
		Write32(pAward, 0); //LuckMoney
		Write8(pAward, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAward;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write32(pAward, 0); //SpeedCoin

		len = pAward - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //Para1

	len = p - buf;
	SendToClient(Client, 24097, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestCarLottoryGetRecordList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT Idx = Read32(p);
	char RecordType = Read8(p);
	char Stage = Read8(p);
	UINT RecordNum = Read32(p);

}

void ResponseCarLottoryGetRecordList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen
	Write8(p, 0); //Stage
	Write32(p, 0); //BestAwardPlayerNum
	Write16(p, 0); //RecordNum
	for (size_t i = 0; i < n; i++)
	{ //RecordList
		BYTE* pRecordList = p;
		Write16(pRecordList, 0); //len

		Write32(pRecordList, 0); //Uin
		WriteString(pRecordList, 0); //NickName[]
		Write32(pRecordList, 0); //AwardTime
		Write32(pRecordList, 0); //ItemID
		Write32(pRecordList, 0); //ItemNum
		Write32(pRecordList, 0); //AvailPeriod

		len = pRecordList - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //NextIdx
	Write8(p, 0); //RecordType

	len = p - buf;
	SendToClient(Client, 24098, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyCommonSwitchOp(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //SwitchID
	Write8(p, 0); //NewStatus

	len = p - buf;
	SendToClient(Client, 24344, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestTriggerBabyActionInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT DstUin = Read32(p);
	int BabyActionInfos[] = Read32(p);
	int BabyPosInfos[] = Read32(p);
	UCHAR TriggerType = Read8(p);

}

void ResponseTriggerBabyActionInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //DstUin
	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 24800, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyLoverBabyActionInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //DstUin
	Write32(p, 0); //BabyActionInfos[]
	Write32(p, 0); //BabyPosInfos[]
	Write8(p, 0); //TriggerType

	len = p - buf;
	SendToClient(Client, 24801, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetBabyDeleteAwardInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetBabyDeleteAwardInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write8(p, 0); //HaveAward
	{ //AwardInfo
		BYTE* pAwardInfo = p;
		Write16(pAwardInfo, 0); //len

		Write32(pAwardInfo, 0); //Exp
		Write32(pAwardInfo, 0); //Money
		Write32(pAwardInfo, 0); //SuperMoney
		Write16(pAwardInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAwardInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAwardInfo;
			Set16(pAwardInfo, (WORD)len);
			pAwardInfo += len;
		}
		Write32(pAwardInfo, 0); //Coupons
		Write32(pAwardInfo, 0); //GuildPoint
		Write32(pAwardInfo, 0); //LuckMoney
		Write8(pAwardInfo, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAwardInfo;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAwardInfo;
			Set16(pAwardInfo, (WORD)len);
			pAwardInfo += len;
		}
		Write32(pAwardInfo, 0); //SpeedCoin

		len = pAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ShouldRemindRasieSecondBabyAward

	len = p - buf;
	SendToClient(Client, 24793, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyClientRemainingFreeCrawlNums(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //RemainingFreeCrawlNums

	len = p - buf;
	SendToClient(Client, 24411, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestRaiseLoveBabyInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT InviteUin = Read32(p);
	UINT ViceUin = Read32(p);
	short LoveBabyGender = Read16(p);
	UCHAR BabySeq = Read8(p);

}

void ResponseRaiseLoverBabyInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //InviteUin
	Write32(p, 0); //ViceUin
	Write16(p, 0); //LoveBabyGender
	Write8(p, 0); //BabySeq

	len = p - buf;
	SendToClient(Client, 24350, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestConfirmBeNoticedRaisedLoverBaby(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void RequestChangeLoverBabyEquipStatus(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	short EquipStatus = Read16(p);

}

void ResponseChangeLoverBabyEquipStatus(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResutID
	Write16(p, 0); //EquipStat

	len = p - buf;
	SendToClient(Client, 24386, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestConfirmRaiseLoveBabyInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT InviteUin = Read32(p);
	UINT ViceUin = Read32(p);
	short LoveBabyGender = Read16(p);
	short ConfirmResult = Read16(p);

}

void RequestGetLoveBabyInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT Flag = Read32(p);

}

void ResponseGetLoveBabyInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write32(p, 0); //DailyFeedLimitNums
	Write32(p, 0); //DailyShowerLimitNums
	Write32(p, 0); //DailyFunLimitNums
	Write32(p, 0); //DailyFeedNums
	Write32(p, 0); //DailyShowerNums
	Write32(p, 0); //DailyFunNums
	Write32(p, 0); //ShowerAddMentalValue
	Write32(p, 0); //FunAddMentalValue
	Write32(p, 0); //FeedAddGrowValue
	Write32(p, 0); //DailyLikeBabyNum
	Write32(p, 0); //RemainingLearningTime
	{ //LoveBabyInfo
		BYTE* pLoveBabyInfo = p;
		Write16(pLoveBabyInfo, 0); //len

		Write32(pLoveBabyInfo, 0); //LoveBabyID
		Write32(pLoveBabyInfo, 0); //MasterLoveUin
		Write32(pLoveBabyInfo, 0); //ViceLoveUin
		Write32(pLoveBabyInfo, 0); //GrowValue
		Write32(pLoveBabyInfo, 0); //MentalValue
		Write32(pLoveBabyInfo, 0); //BabyGrowLevel
		Write32(pLoveBabyInfo, 0); //BabyProfileLevel
		Write32(pLoveBabyInfo, 0); //BabyStrengthLevel
		Write32(pLoveBabyInfo, 0); //BabyPLValue
		Write32(pLoveBabyInfo, 0); //BabyOrgPLValue
		WriteString(pLoveBabyInfo, 0); //LoveBabyNickName[]
		Write16(pLoveBabyInfo, 0); //BabyStat
		Write16(pLoveBabyInfo, 0); //RemainingActiveDay
		Write16(pLoveBabyInfo, 0); //BackGroundID
		Write16(pLoveBabyInfo, 0); //LoverBabyGender
		Write16(pLoveBabyInfo, 0); //MentalTotalValue
		Write32(pLoveBabyInfo, 0); //NextGrowLevelGrowValue
		Write32(pLoveBabyInfo, 0); //LoverBabyItemID
		Write16(pLoveBabyInfo, 0); //EquipStat
		Write32(pLoveBabyInfo, 0); //BabySkillNums
		for (size_t i = 0; i < n; i++)
		{ //PetSkillList
			BYTE* pPetSkillList = pLoveBabyInfo;
			Write16(pPetSkillList, 0); //len

			Write16(pPetSkillList, 0); //SkillID
			Write8(pPetSkillList, 0); //Status
			Write8(pPetSkillList, 0); //Active
			Write32(pPetSkillList, 0); //Value

			len = pPetSkillList - pLoveBabyInfo;
			Set16(pLoveBabyInfo, (WORD)len);
			pLoveBabyInfo += len;
		}
		Write16(pLoveBabyInfo, 0); //TreatMentalValue
		Write32(pLoveBabyInfo, 0); //DailyLikeNum
		Write32(pLoveBabyInfo, 0); //TotalLikeNum
		Write32(pLoveBabyInfo, 0); //DailyLearningNum
		Write32(pLoveBabyInfo, 0); //DaliyLearningLimtNum
		Write32(pLoveBabyInfo, 0); //AlreadyLikeNums
		Write32(pLoveBabyInfo, 0); //RemainingLikeNums
		Write16(pLoveBabyInfo, 0); //BabyTransferdProfileLevel
		Write16(pLoveBabyInfo, 0); //HaveBirthPresent

		len = pLoveBabyInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //SecondBabyInfo
		BYTE* pSecondBabyInfo = p;
		Write16(pSecondBabyInfo, 0); //len

		Write32(pSecondBabyInfo, 0); //DailyFeedLimitNums
		Write32(pSecondBabyInfo, 0); //DailyShowerLimitNums
		Write32(pSecondBabyInfo, 0); //DailyFunLimitNums
		Write32(pSecondBabyInfo, 0); //DailyFeedNums
		Write32(pSecondBabyInfo, 0); //DailyShowerNums
		Write32(pSecondBabyInfo, 0); //DailyFunNums
		Write32(pSecondBabyInfo, 0); //ShowerAddMentalValue
		Write32(pSecondBabyInfo, 0); //FunAddMentalValue
		Write32(pSecondBabyInfo, 0); //FeedAddGrowValue
		Write32(pSecondBabyInfo, 0); //DailyLikeBabyNum
		Write32(pSecondBabyInfo, 0); //RemainingLearningTime
		{ //LoveBabyInfo
			BYTE* pLoveBabyInfo = pSecondBabyInfo;
			Write16(pLoveBabyInfo, 0); //len

			Write32(pLoveBabyInfo, 0); //LoveBabyID
			Write32(pLoveBabyInfo, 0); //MasterLoveUin
			Write32(pLoveBabyInfo, 0); //ViceLoveUin
			Write32(pLoveBabyInfo, 0); //GrowValue
			Write32(pLoveBabyInfo, 0); //MentalValue
			Write32(pLoveBabyInfo, 0); //BabyGrowLevel
			Write32(pLoveBabyInfo, 0); //BabyProfileLevel
			Write32(pLoveBabyInfo, 0); //BabyStrengthLevel
			Write32(pLoveBabyInfo, 0); //BabyPLValue
			Write32(pLoveBabyInfo, 0); //BabyOrgPLValue
			WriteString(pLoveBabyInfo, 0); //LoveBabyNickName[]
			Write16(pLoveBabyInfo, 0); //BabyStat
			Write16(pLoveBabyInfo, 0); //RemainingActiveDay
			Write16(pLoveBabyInfo, 0); //BackGroundID
			Write16(pLoveBabyInfo, 0); //LoverBabyGender
			Write16(pLoveBabyInfo, 0); //MentalTotalValue
			Write32(pLoveBabyInfo, 0); //NextGrowLevelGrowValue
			Write32(pLoveBabyInfo, 0); //LoverBabyItemID
			Write16(pLoveBabyInfo, 0); //EquipStat
			Write32(pLoveBabyInfo, 0); //BabySkillNums
			for (size_t i = 0; i < n; i++)
			{ //PetSkillList
				BYTE* pPetSkillList = pLoveBabyInfo;
				Write16(pPetSkillList, 0); //len

				Write16(pPetSkillList, 0); //SkillID
				Write8(pPetSkillList, 0); //Status
				Write8(pPetSkillList, 0); //Active
				Write32(pPetSkillList, 0); //Value

				len = pPetSkillList - pLoveBabyInfo;
				Set16(pLoveBabyInfo, (WORD)len);
				pLoveBabyInfo += len;
			}
			Write16(pLoveBabyInfo, 0); //TreatMentalValue
			Write32(pLoveBabyInfo, 0); //DailyLikeNum
			Write32(pLoveBabyInfo, 0); //TotalLikeNum
			Write32(pLoveBabyInfo, 0); //DailyLearningNum
			Write32(pLoveBabyInfo, 0); //DaliyLearningLimtNum
			Write32(pLoveBabyInfo, 0); //AlreadyLikeNums
			Write32(pLoveBabyInfo, 0); //RemainingLikeNums
			Write16(pLoveBabyInfo, 0); //BabyTransferdProfileLevel
			Write16(pLoveBabyInfo, 0); //HaveBirthPresent

			len = pLoveBabyInfo - pSecondBabyInfo;
			Set16(pSecondBabyInfo, (WORD)len);
			pSecondBabyInfo += len;
		}

		len = pSecondBabyInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //EquipBaby
	Write16(p, 0); //ActivedExtralSkillNums
	for (size_t i = 0; i < n; i++)
	{ //BabyExtralSkillInfos
		BYTE* pBabyExtralSkillInfos = p;
		Write16(pBabyExtralSkillInfos, 0); //len

		Write8(pBabyExtralSkillInfos, 0); //BabySeq
		Write16(pBabyExtralSkillInfos, 0); //SkillID

		len = pBabyExtralSkillInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24352, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyClientLoveBabyModChange(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //HaveLoveBaby
	Write32(p, 0); //MentalValue
	Write32(p, 0); //MentalValueChangeNum
	WriteUn(p, 0); //uiflag
	WriteUn(p, 0); //EventContent[]
	Write8(p, 0); //BabySeq

	len = p - buf;
	SendToClient(Client, 24373, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestQueryPlayerLoverBabyInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT DstUin = Read32(p);
	UINT LoverBabyID = Read32(p);
	UINT SecondLoverBabyID = Read32(p);
	UINT Time = Read32(p);

}

void ResponseQueryPlayerLoverBabyInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //DstUin
	Write16(p, 0); //ResultID
	{ //LoveBabyInfo
		BYTE* pLoveBabyInfo = p;
		Write16(pLoveBabyInfo, 0); //len

		Write32(pLoveBabyInfo, 0); //LoveBabyID
		Write32(pLoveBabyInfo, 0); //MasterLoveUin
		Write32(pLoveBabyInfo, 0); //ViceLoveUin
		Write32(pLoveBabyInfo, 0); //GrowValue
		Write32(pLoveBabyInfo, 0); //MentalValue
		Write32(pLoveBabyInfo, 0); //BabyGrowLevel
		Write32(pLoveBabyInfo, 0); //BabyProfileLevel
		Write32(pLoveBabyInfo, 0); //BabyStrengthLevel
		Write32(pLoveBabyInfo, 0); //BabyPLValue
		Write32(pLoveBabyInfo, 0); //BabyOrgPLValue
		WriteString(pLoveBabyInfo, 0); //LoveBabyNickName[]
		Write16(pLoveBabyInfo, 0); //BabyStat
		Write16(pLoveBabyInfo, 0); //RemainingActiveDay
		Write16(pLoveBabyInfo, 0); //BackGroundID
		Write16(pLoveBabyInfo, 0); //LoverBabyGender
		Write16(pLoveBabyInfo, 0); //MentalTotalValue
		Write32(pLoveBabyInfo, 0); //NextGrowLevelGrowValue
		Write32(pLoveBabyInfo, 0); //LoverBabyItemID
		Write16(pLoveBabyInfo, 0); //EquipStat
		Write32(pLoveBabyInfo, 0); //BabySkillNums
		for (size_t i = 0; i < n; i++)
		{ //PetSkillList
			BYTE* pPetSkillList = pLoveBabyInfo;
			Write16(pPetSkillList, 0); //len

			Write16(pPetSkillList, 0); //SkillID
			Write8(pPetSkillList, 0); //Status
			Write8(pPetSkillList, 0); //Active
			Write32(pPetSkillList, 0); //Value

			len = pPetSkillList - pLoveBabyInfo;
			Set16(pLoveBabyInfo, (WORD)len);
			pLoveBabyInfo += len;
		}
		Write16(pLoveBabyInfo, 0); //TreatMentalValue
		Write32(pLoveBabyInfo, 0); //DailyLikeNum
		Write32(pLoveBabyInfo, 0); //TotalLikeNum
		Write32(pLoveBabyInfo, 0); //DailyLearningNum
		Write32(pLoveBabyInfo, 0); //DaliyLearningLimtNum
		Write32(pLoveBabyInfo, 0); //AlreadyLikeNums
		Write32(pLoveBabyInfo, 0); //RemainingLikeNums
		Write16(pLoveBabyInfo, 0); //BabyTransferdProfileLevel
		Write16(pLoveBabyInfo, 0); //HaveBirthPresent

		len = pLoveBabyInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //SecondLoveBabyInfo
		BYTE* pSecondLoveBabyInfo = p;
		Write16(pSecondLoveBabyInfo, 0); //len

		Write32(pSecondLoveBabyInfo, 0); //LoveBabyID
		Write32(pSecondLoveBabyInfo, 0); //MasterLoveUin
		Write32(pSecondLoveBabyInfo, 0); //ViceLoveUin
		Write32(pSecondLoveBabyInfo, 0); //GrowValue
		Write32(pSecondLoveBabyInfo, 0); //MentalValue
		Write32(pSecondLoveBabyInfo, 0); //BabyGrowLevel
		Write32(pSecondLoveBabyInfo, 0); //BabyProfileLevel
		Write32(pSecondLoveBabyInfo, 0); //BabyStrengthLevel
		Write32(pSecondLoveBabyInfo, 0); //BabyPLValue
		Write32(pSecondLoveBabyInfo, 0); //BabyOrgPLValue
		WriteString(pSecondLoveBabyInfo, 0); //LoveBabyNickName[]
		Write16(pSecondLoveBabyInfo, 0); //BabyStat
		Write16(pSecondLoveBabyInfo, 0); //RemainingActiveDay
		Write16(pSecondLoveBabyInfo, 0); //BackGroundID
		Write16(pSecondLoveBabyInfo, 0); //LoverBabyGender
		Write16(pSecondLoveBabyInfo, 0); //MentalTotalValue
		Write32(pSecondLoveBabyInfo, 0); //NextGrowLevelGrowValue
		Write32(pSecondLoveBabyInfo, 0); //LoverBabyItemID
		Write16(pSecondLoveBabyInfo, 0); //EquipStat
		Write32(pSecondLoveBabyInfo, 0); //BabySkillNums
		for (size_t i = 0; i < n; i++)
		{ //PetSkillList
			BYTE* pPetSkillList = pSecondLoveBabyInfo;
			Write16(pPetSkillList, 0); //len

			Write16(pPetSkillList, 0); //SkillID
			Write8(pPetSkillList, 0); //Status
			Write8(pPetSkillList, 0); //Active
			Write32(pPetSkillList, 0); //Value

			len = pPetSkillList - pSecondLoveBabyInfo;
			Set16(pSecondLoveBabyInfo, (WORD)len);
			pSecondLoveBabyInfo += len;
		}
		Write16(pSecondLoveBabyInfo, 0); //TreatMentalValue
		Write32(pSecondLoveBabyInfo, 0); //DailyLikeNum
		Write32(pSecondLoveBabyInfo, 0); //TotalLikeNum
		Write32(pSecondLoveBabyInfo, 0); //DailyLearningNum
		Write32(pSecondLoveBabyInfo, 0); //DaliyLearningLimtNum
		Write32(pSecondLoveBabyInfo, 0); //AlreadyLikeNums
		Write32(pSecondLoveBabyInfo, 0); //RemainingLikeNums
		Write16(pSecondLoveBabyInfo, 0); //BabyTransferdProfileLevel
		Write16(pSecondLoveBabyInfo, 0); //HaveBirthPresent

		len = pSecondLoveBabyInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24372, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyClientLoveBabyInfoWhenLogIn(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //HaveLoveBaby
	Write16(p, 0); //BeNoticed
	{ //LoveBabyInfo
		BYTE* pLoveBabyInfo = p;
		Write16(pLoveBabyInfo, 0); //len

		Write32(pLoveBabyInfo, 0); //LoveBabyID
		Write32(pLoveBabyInfo, 0); //MasterLoveUin
		Write32(pLoveBabyInfo, 0); //ViceLoveUin
		Write32(pLoveBabyInfo, 0); //GrowValue
		Write32(pLoveBabyInfo, 0); //MentalValue
		Write32(pLoveBabyInfo, 0); //BabyGrowLevel
		Write32(pLoveBabyInfo, 0); //BabyProfileLevel
		Write32(pLoveBabyInfo, 0); //BabyStrengthLevel
		Write32(pLoveBabyInfo, 0); //BabyPLValue
		Write32(pLoveBabyInfo, 0); //BabyOrgPLValue
		WriteString(pLoveBabyInfo, 0); //LoveBabyNickName[]
		Write16(pLoveBabyInfo, 0); //BabyStat
		Write16(pLoveBabyInfo, 0); //RemainingActiveDay
		Write16(pLoveBabyInfo, 0); //BackGroundID
		Write16(pLoveBabyInfo, 0); //LoverBabyGender
		Write16(pLoveBabyInfo, 0); //MentalTotalValue
		Write32(pLoveBabyInfo, 0); //NextGrowLevelGrowValue
		Write32(pLoveBabyInfo, 0); //LoverBabyItemID
		Write16(pLoveBabyInfo, 0); //EquipStat
		Write32(pLoveBabyInfo, 0); //BabySkillNums
		for (size_t i = 0; i < n; i++)
		{ //PetSkillList
			BYTE* pPetSkillList = pLoveBabyInfo;
			Write16(pPetSkillList, 0); //len

			Write16(pPetSkillList, 0); //SkillID
			Write8(pPetSkillList, 0); //Status
			Write8(pPetSkillList, 0); //Active
			Write32(pPetSkillList, 0); //Value

			len = pPetSkillList - pLoveBabyInfo;
			Set16(pLoveBabyInfo, (WORD)len);
			pLoveBabyInfo += len;
		}
		Write16(pLoveBabyInfo, 0); //TreatMentalValue
		Write32(pLoveBabyInfo, 0); //DailyLikeNum
		Write32(pLoveBabyInfo, 0); //TotalLikeNum
		Write32(pLoveBabyInfo, 0); //DailyLearningNum
		Write32(pLoveBabyInfo, 0); //DaliyLearningLimtNum
		Write32(pLoveBabyInfo, 0); //AlreadyLikeNums
		Write32(pLoveBabyInfo, 0); //RemainingLikeNums
		Write16(pLoveBabyInfo, 0); //BabyTransferdProfileLevel
		Write16(pLoveBabyInfo, 0); //HaveBirthPresent

		len = pLoveBabyInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //SecondLoveBabyInfo
		BYTE* pSecondLoveBabyInfo = p;
		Write16(pSecondLoveBabyInfo, 0); //len

		Write32(pSecondLoveBabyInfo, 0); //LoveBabyID
		Write32(pSecondLoveBabyInfo, 0); //MasterLoveUin
		Write32(pSecondLoveBabyInfo, 0); //ViceLoveUin
		Write32(pSecondLoveBabyInfo, 0); //GrowValue
		Write32(pSecondLoveBabyInfo, 0); //MentalValue
		Write32(pSecondLoveBabyInfo, 0); //BabyGrowLevel
		Write32(pSecondLoveBabyInfo, 0); //BabyProfileLevel
		Write32(pSecondLoveBabyInfo, 0); //BabyStrengthLevel
		Write32(pSecondLoveBabyInfo, 0); //BabyPLValue
		Write32(pSecondLoveBabyInfo, 0); //BabyOrgPLValue
		WriteString(pSecondLoveBabyInfo, 0); //LoveBabyNickName[]
		Write16(pSecondLoveBabyInfo, 0); //BabyStat
		Write16(pSecondLoveBabyInfo, 0); //RemainingActiveDay
		Write16(pSecondLoveBabyInfo, 0); //BackGroundID
		Write16(pSecondLoveBabyInfo, 0); //LoverBabyGender
		Write16(pSecondLoveBabyInfo, 0); //MentalTotalValue
		Write32(pSecondLoveBabyInfo, 0); //NextGrowLevelGrowValue
		Write32(pSecondLoveBabyInfo, 0); //LoverBabyItemID
		Write16(pSecondLoveBabyInfo, 0); //EquipStat
		Write32(pSecondLoveBabyInfo, 0); //BabySkillNums
		for (size_t i = 0; i < n; i++)
		{ //PetSkillList
			BYTE* pPetSkillList = pSecondLoveBabyInfo;
			Write16(pPetSkillList, 0); //len

			Write16(pPetSkillList, 0); //SkillID
			Write8(pPetSkillList, 0); //Status
			Write8(pPetSkillList, 0); //Active
			Write32(pPetSkillList, 0); //Value

			len = pPetSkillList - pSecondLoveBabyInfo;
			Set16(pSecondLoveBabyInfo, (WORD)len);
			pSecondLoveBabyInfo += len;
		}
		Write16(pSecondLoveBabyInfo, 0); //TreatMentalValue
		Write32(pSecondLoveBabyInfo, 0); //DailyLikeNum
		Write32(pSecondLoveBabyInfo, 0); //TotalLikeNum
		Write32(pSecondLoveBabyInfo, 0); //DailyLearningNum
		Write32(pSecondLoveBabyInfo, 0); //DaliyLearningLimtNum
		Write32(pSecondLoveBabyInfo, 0); //AlreadyLikeNums
		Write32(pSecondLoveBabyInfo, 0); //RemainingLikeNums
		Write16(pSecondLoveBabyInfo, 0); //BabyTransferdProfileLevel
		Write16(pSecondLoveBabyInfo, 0); //HaveBirthPresent

		len = pSecondLoveBabyInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //LoverBabyCfgInfo
		BYTE* pLoverBabyCfgInfo = p;
		Write16(pLoverBabyCfgInfo, 0); //len

		Write32(pLoverBabyCfgInfo, 0); //LikeAddMentalValue
		Write32(pLoverBabyCfgInfo, 0); //DailyLikeAddMentalValue
		Write32(pLoverBabyCfgInfo, 0); //DailyBeLikedNumsToGetCoupon
		Write32(pLoverBabyCfgInfo, 0); //AwardCouponNums
		Write32(pLoverBabyCfgInfo, 0); //LearningAddGrowValue
		Write32(pLoverBabyCfgInfo, 0); //LearningTime

		len = pLoverBabyCfgInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //SecondLoverBabyCfgInfo
		BYTE* pSecondLoverBabyCfgInfo = p;
		Write16(pSecondLoverBabyCfgInfo, 0); //len

		Write32(pSecondLoverBabyCfgInfo, 0); //LikeAddMentalValue
		Write32(pSecondLoverBabyCfgInfo, 0); //DailyLikeAddMentalValue
		Write32(pSecondLoverBabyCfgInfo, 0); //DailyBeLikedNumsToGetCoupon
		Write32(pSecondLoverBabyCfgInfo, 0); //AwardCouponNums
		Write32(pSecondLoverBabyCfgInfo, 0); //LearningAddGrowValue
		Write32(pSecondLoverBabyCfgInfo, 0); //LearningTime

		len = pSecondLoverBabyCfgInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HaveRaisedSecondBaby
	Write8(p, 0); //EquipBabyStatus
	Write16(p, 0); //RemainingDanceNums
	Write16(p, 0); //RemainingMaimengNums
	Write16(p, 0); //MaxDanceNums
	Write16(p, 0); //MaxMaimengNums

	len = p - buf;
	SendToClient(Client, 24370, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestInteractWithTwoBaby(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	USHORT InteractID = Read16(p);

}

void ResponseInteractWithTwoLoveBaby(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //RemainingDanceNums
	Write16(p, 0); //RemainingMaimengNums
	Write16(p, 0); //InteractID

	len = p - buf;
	SendToClient(Client, 24795, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyClientUpdateTwoBabyInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //AddGrowValue
	Write16(p, 0); //InteractID
	{ //LoverBabyInfo
		BYTE* pLoverBabyInfo = p;
		Write16(pLoverBabyInfo, 0); //len

		Write32(pLoverBabyInfo, 0); //LoveBabyID
		Write32(pLoverBabyInfo, 0); //MasterLoveUin
		Write32(pLoverBabyInfo, 0); //ViceLoveUin
		Write32(pLoverBabyInfo, 0); //GrowValue
		Write32(pLoverBabyInfo, 0); //MentalValue
		Write32(pLoverBabyInfo, 0); //BabyGrowLevel
		Write32(pLoverBabyInfo, 0); //BabyProfileLevel
		Write32(pLoverBabyInfo, 0); //BabyStrengthLevel
		Write32(pLoverBabyInfo, 0); //BabyPLValue
		Write32(pLoverBabyInfo, 0); //BabyOrgPLValue
		WriteString(pLoverBabyInfo, 0); //LoveBabyNickName[]
		Write16(pLoverBabyInfo, 0); //BabyStat
		Write16(pLoverBabyInfo, 0); //RemainingActiveDay
		Write16(pLoverBabyInfo, 0); //BackGroundID
		Write16(pLoverBabyInfo, 0); //LoverBabyGender
		Write16(pLoverBabyInfo, 0); //MentalTotalValue
		Write32(pLoverBabyInfo, 0); //NextGrowLevelGrowValue
		Write32(pLoverBabyInfo, 0); //LoverBabyItemID
		Write16(pLoverBabyInfo, 0); //EquipStat
		Write32(pLoverBabyInfo, 0); //BabySkillNums
		for (size_t i = 0; i < n; i++)
		{ //PetSkillList
			BYTE* pPetSkillList = pLoverBabyInfo;
			Write16(pPetSkillList, 0); //len

			Write16(pPetSkillList, 0); //SkillID
			Write8(pPetSkillList, 0); //Status
			Write8(pPetSkillList, 0); //Active
			Write32(pPetSkillList, 0); //Value

			len = pPetSkillList - pLoverBabyInfo;
			Set16(pLoverBabyInfo, (WORD)len);
			pLoverBabyInfo += len;
		}
		Write16(pLoverBabyInfo, 0); //TreatMentalValue
		Write32(pLoverBabyInfo, 0); //DailyLikeNum
		Write32(pLoverBabyInfo, 0); //TotalLikeNum
		Write32(pLoverBabyInfo, 0); //DailyLearningNum
		Write32(pLoverBabyInfo, 0); //DaliyLearningLimtNum
		Write32(pLoverBabyInfo, 0); //AlreadyLikeNums
		Write32(pLoverBabyInfo, 0); //RemainingLikeNums
		Write16(pLoverBabyInfo, 0); //BabyTransferdProfileLevel
		Write16(pLoverBabyInfo, 0); //HaveBirthPresent

		len = pLoverBabyInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //SecondLoverBabyInfo
		BYTE* pSecondLoverBabyInfo = p;
		Write16(pSecondLoverBabyInfo, 0); //len

		Write32(pSecondLoverBabyInfo, 0); //LoveBabyID
		Write32(pSecondLoverBabyInfo, 0); //MasterLoveUin
		Write32(pSecondLoverBabyInfo, 0); //ViceLoveUin
		Write32(pSecondLoverBabyInfo, 0); //GrowValue
		Write32(pSecondLoverBabyInfo, 0); //MentalValue
		Write32(pSecondLoverBabyInfo, 0); //BabyGrowLevel
		Write32(pSecondLoverBabyInfo, 0); //BabyProfileLevel
		Write32(pSecondLoverBabyInfo, 0); //BabyStrengthLevel
		Write32(pSecondLoverBabyInfo, 0); //BabyPLValue
		Write32(pSecondLoverBabyInfo, 0); //BabyOrgPLValue
		WriteString(pSecondLoverBabyInfo, 0); //LoveBabyNickName[]
		Write16(pSecondLoverBabyInfo, 0); //BabyStat
		Write16(pSecondLoverBabyInfo, 0); //RemainingActiveDay
		Write16(pSecondLoverBabyInfo, 0); //BackGroundID
		Write16(pSecondLoverBabyInfo, 0); //LoverBabyGender
		Write16(pSecondLoverBabyInfo, 0); //MentalTotalValue
		Write32(pSecondLoverBabyInfo, 0); //NextGrowLevelGrowValue
		Write32(pSecondLoverBabyInfo, 0); //LoverBabyItemID
		Write16(pSecondLoverBabyInfo, 0); //EquipStat
		Write32(pSecondLoverBabyInfo, 0); //BabySkillNums
		for (size_t i = 0; i < n; i++)
		{ //PetSkillList
			BYTE* pPetSkillList = pSecondLoverBabyInfo;
			Write16(pPetSkillList, 0); //len

			Write16(pPetSkillList, 0); //SkillID
			Write8(pPetSkillList, 0); //Status
			Write8(pPetSkillList, 0); //Active
			Write32(pPetSkillList, 0); //Value

			len = pPetSkillList - pSecondLoverBabyInfo;
			Set16(pSecondLoverBabyInfo, (WORD)len);
			pSecondLoverBabyInfo += len;
		}
		Write16(pSecondLoverBabyInfo, 0); //TreatMentalValue
		Write32(pSecondLoverBabyInfo, 0); //DailyLikeNum
		Write32(pSecondLoverBabyInfo, 0); //TotalLikeNum
		Write32(pSecondLoverBabyInfo, 0); //DailyLearningNum
		Write32(pSecondLoverBabyInfo, 0); //DaliyLearningLimtNum
		Write32(pSecondLoverBabyInfo, 0); //AlreadyLikeNums
		Write32(pSecondLoverBabyInfo, 0); //RemainingLikeNums
		Write16(pSecondLoverBabyInfo, 0); //BabyTransferdProfileLevel
		Write16(pSecondLoverBabyInfo, 0); //HaveBirthPresent

		len = pSecondLoverBabyInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24796, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestInteractWithLoveBaby(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT InteractID = Read16(p);
	USHORT BackGroundID = Read16(p);
	char[] LoveBabyNickName[] = ReadString(p);
	USHORT ReqTransferdProfileLevel = Read16(p);
	UCHAR BabySeq = Read8(p);

}

void ResponseInteractWithLoveBaby(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //InteractID
	Write32(p, 0); //FeedNums
	Write32(p, 0); //ShowerNums
	Write32(p, 0); //FunNums
	Write32(p, 0); //ChangedGrowValue
	Write32(p, 0); //ChangedMentalValue
	Write32(p, 0); //RemaningLearningTime
	{ //LoverBabyInfo
		BYTE* pLoverBabyInfo = p;
		Write16(pLoverBabyInfo, 0); //len

		Write32(pLoverBabyInfo, 0); //LoveBabyID
		Write32(pLoverBabyInfo, 0); //MasterLoveUin
		Write32(pLoverBabyInfo, 0); //ViceLoveUin
		Write32(pLoverBabyInfo, 0); //GrowValue
		Write32(pLoverBabyInfo, 0); //MentalValue
		Write32(pLoverBabyInfo, 0); //BabyGrowLevel
		Write32(pLoverBabyInfo, 0); //BabyProfileLevel
		Write32(pLoverBabyInfo, 0); //BabyStrengthLevel
		Write32(pLoverBabyInfo, 0); //BabyPLValue
		Write32(pLoverBabyInfo, 0); //BabyOrgPLValue
		WriteString(pLoverBabyInfo, 0); //LoveBabyNickName[]
		Write16(pLoverBabyInfo, 0); //BabyStat
		Write16(pLoverBabyInfo, 0); //RemainingActiveDay
		Write16(pLoverBabyInfo, 0); //BackGroundID
		Write16(pLoverBabyInfo, 0); //LoverBabyGender
		Write16(pLoverBabyInfo, 0); //MentalTotalValue
		Write32(pLoverBabyInfo, 0); //NextGrowLevelGrowValue
		Write32(pLoverBabyInfo, 0); //LoverBabyItemID
		Write16(pLoverBabyInfo, 0); //EquipStat
		Write32(pLoverBabyInfo, 0); //BabySkillNums
		for (size_t i = 0; i < n; i++)
		{ //PetSkillList
			BYTE* pPetSkillList = pLoverBabyInfo;
			Write16(pPetSkillList, 0); //len

			Write16(pPetSkillList, 0); //SkillID
			Write8(pPetSkillList, 0); //Status
			Write8(pPetSkillList, 0); //Active
			Write32(pPetSkillList, 0); //Value

			len = pPetSkillList - pLoverBabyInfo;
			Set16(pLoverBabyInfo, (WORD)len);
			pLoverBabyInfo += len;
		}
		Write16(pLoverBabyInfo, 0); //TreatMentalValue
		Write32(pLoverBabyInfo, 0); //DailyLikeNum
		Write32(pLoverBabyInfo, 0); //TotalLikeNum
		Write32(pLoverBabyInfo, 0); //DailyLearningNum
		Write32(pLoverBabyInfo, 0); //DaliyLearningLimtNum
		Write32(pLoverBabyInfo, 0); //AlreadyLikeNums
		Write32(pLoverBabyInfo, 0); //RemainingLikeNums
		Write16(pLoverBabyInfo, 0); //BabyTransferdProfileLevel
		Write16(pLoverBabyInfo, 0); //HaveBirthPresent

		len = pLoverBabyInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //BabySeq

	len = p - buf;
	SendToClient(Client, 24355, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestLikeLoverBaby(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT MasterUin = Read32(p);
	UINT ViceUin = Read32(p);
	UINT BeLikedLoverBabyID = Read32(p);
	UCHAR BabySeq = Read8(p);

}

void ResponseLikeLoverBaby(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	{ //LoverBabyInfo
		BYTE* pLoverBabyInfo = p;
		Write16(pLoverBabyInfo, 0); //len

		Write32(pLoverBabyInfo, 0); //LoveBabyID
		Write32(pLoverBabyInfo, 0); //MasterLoveUin
		Write32(pLoverBabyInfo, 0); //ViceLoveUin
		Write32(pLoverBabyInfo, 0); //GrowValue
		Write32(pLoverBabyInfo, 0); //MentalValue
		Write32(pLoverBabyInfo, 0); //BabyGrowLevel
		Write32(pLoverBabyInfo, 0); //BabyProfileLevel
		Write32(pLoverBabyInfo, 0); //BabyStrengthLevel
		Write32(pLoverBabyInfo, 0); //BabyPLValue
		Write32(pLoverBabyInfo, 0); //BabyOrgPLValue
		WriteString(pLoverBabyInfo, 0); //LoveBabyNickName[]
		Write16(pLoverBabyInfo, 0); //BabyStat
		Write16(pLoverBabyInfo, 0); //RemainingActiveDay
		Write16(pLoverBabyInfo, 0); //BackGroundID
		Write16(pLoverBabyInfo, 0); //LoverBabyGender
		Write16(pLoverBabyInfo, 0); //MentalTotalValue
		Write32(pLoverBabyInfo, 0); //NextGrowLevelGrowValue
		Write32(pLoverBabyInfo, 0); //LoverBabyItemID
		Write16(pLoverBabyInfo, 0); //EquipStat
		Write32(pLoverBabyInfo, 0); //BabySkillNums
		for (size_t i = 0; i < n; i++)
		{ //PetSkillList
			BYTE* pPetSkillList = pLoverBabyInfo;
			Write16(pPetSkillList, 0); //len

			Write16(pPetSkillList, 0); //SkillID
			Write8(pPetSkillList, 0); //Status
			Write8(pPetSkillList, 0); //Active
			Write32(pPetSkillList, 0); //Value

			len = pPetSkillList - pLoverBabyInfo;
			Set16(pLoverBabyInfo, (WORD)len);
			pLoverBabyInfo += len;
		}
		Write16(pLoverBabyInfo, 0); //TreatMentalValue
		Write32(pLoverBabyInfo, 0); //DailyLikeNum
		Write32(pLoverBabyInfo, 0); //TotalLikeNum
		Write32(pLoverBabyInfo, 0); //DailyLearningNum
		Write32(pLoverBabyInfo, 0); //DaliyLearningLimtNum
		Write32(pLoverBabyInfo, 0); //AlreadyLikeNums
		Write32(pLoverBabyInfo, 0); //RemainingLikeNums
		Write16(pLoverBabyInfo, 0); //BabyTransferdProfileLevel
		Write16(pLoverBabyInfo, 0); //HaveBirthPresent

		len = pLoverBabyInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //BabySeq

	len = p - buf;
	SendToClient(Client, 24401, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestCheckLoverBabyLearningEnd(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UCHAR BabySeq = Read8(p);

}

void ResponseCheckLoverBabyLearningEnd(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //CheckResult
	{ //LoverBabyInfo
		BYTE* pLoverBabyInfo = p;
		Write16(pLoverBabyInfo, 0); //len

		Write32(pLoverBabyInfo, 0); //LoveBabyID
		Write32(pLoverBabyInfo, 0); //MasterLoveUin
		Write32(pLoverBabyInfo, 0); //ViceLoveUin
		Write32(pLoverBabyInfo, 0); //GrowValue
		Write32(pLoverBabyInfo, 0); //MentalValue
		Write32(pLoverBabyInfo, 0); //BabyGrowLevel
		Write32(pLoverBabyInfo, 0); //BabyProfileLevel
		Write32(pLoverBabyInfo, 0); //BabyStrengthLevel
		Write32(pLoverBabyInfo, 0); //BabyPLValue
		Write32(pLoverBabyInfo, 0); //BabyOrgPLValue
		WriteString(pLoverBabyInfo, 0); //LoveBabyNickName[]
		Write16(pLoverBabyInfo, 0); //BabyStat
		Write16(pLoverBabyInfo, 0); //RemainingActiveDay
		Write16(pLoverBabyInfo, 0); //BackGroundID
		Write16(pLoverBabyInfo, 0); //LoverBabyGender
		Write16(pLoverBabyInfo, 0); //MentalTotalValue
		Write32(pLoverBabyInfo, 0); //NextGrowLevelGrowValue
		Write32(pLoverBabyInfo, 0); //LoverBabyItemID
		Write16(pLoverBabyInfo, 0); //EquipStat
		Write32(pLoverBabyInfo, 0); //BabySkillNums
		for (size_t i = 0; i < n; i++)
		{ //PetSkillList
			BYTE* pPetSkillList = pLoverBabyInfo;
			Write16(pPetSkillList, 0); //len

			Write16(pPetSkillList, 0); //SkillID
			Write8(pPetSkillList, 0); //Status
			Write8(pPetSkillList, 0); //Active
			Write32(pPetSkillList, 0); //Value

			len = pPetSkillList - pLoverBabyInfo;
			Set16(pLoverBabyInfo, (WORD)len);
			pLoverBabyInfo += len;
		}
		Write16(pLoverBabyInfo, 0); //TreatMentalValue
		Write32(pLoverBabyInfo, 0); //DailyLikeNum
		Write32(pLoverBabyInfo, 0); //TotalLikeNum
		Write32(pLoverBabyInfo, 0); //DailyLearningNum
		Write32(pLoverBabyInfo, 0); //DaliyLearningLimtNum
		Write32(pLoverBabyInfo, 0); //AlreadyLikeNums
		Write32(pLoverBabyInfo, 0); //RemainingLikeNums
		Write16(pLoverBabyInfo, 0); //BabyTransferdProfileLevel
		Write16(pLoverBabyInfo, 0); //HaveBirthPresent

		len = pLoverBabyInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //BabySeq

	len = p - buf;
	SendToClient(Client, 24402, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyClientLoverBabyLearningInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //AddGrowValue
	{ //LoverBabyInfo
		BYTE* pLoverBabyInfo = p;
		Write16(pLoverBabyInfo, 0); //len

		Write32(pLoverBabyInfo, 0); //LoveBabyID
		Write32(pLoverBabyInfo, 0); //MasterLoveUin
		Write32(pLoverBabyInfo, 0); //ViceLoveUin
		Write32(pLoverBabyInfo, 0); //GrowValue
		Write32(pLoverBabyInfo, 0); //MentalValue
		Write32(pLoverBabyInfo, 0); //BabyGrowLevel
		Write32(pLoverBabyInfo, 0); //BabyProfileLevel
		Write32(pLoverBabyInfo, 0); //BabyStrengthLevel
		Write32(pLoverBabyInfo, 0); //BabyPLValue
		Write32(pLoverBabyInfo, 0); //BabyOrgPLValue
		WriteString(pLoverBabyInfo, 0); //LoveBabyNickName[]
		Write16(pLoverBabyInfo, 0); //BabyStat
		Write16(pLoverBabyInfo, 0); //RemainingActiveDay
		Write16(pLoverBabyInfo, 0); //BackGroundID
		Write16(pLoverBabyInfo, 0); //LoverBabyGender
		Write16(pLoverBabyInfo, 0); //MentalTotalValue
		Write32(pLoverBabyInfo, 0); //NextGrowLevelGrowValue
		Write32(pLoverBabyInfo, 0); //LoverBabyItemID
		Write16(pLoverBabyInfo, 0); //EquipStat
		Write32(pLoverBabyInfo, 0); //BabySkillNums
		for (size_t i = 0; i < n; i++)
		{ //PetSkillList
			BYTE* pPetSkillList = pLoverBabyInfo;
			Write16(pPetSkillList, 0); //len

			Write16(pPetSkillList, 0); //SkillID
			Write8(pPetSkillList, 0); //Status
			Write8(pPetSkillList, 0); //Active
			Write32(pPetSkillList, 0); //Value

			len = pPetSkillList - pLoverBabyInfo;
			Set16(pLoverBabyInfo, (WORD)len);
			pLoverBabyInfo += len;
		}
		Write16(pLoverBabyInfo, 0); //TreatMentalValue
		Write32(pLoverBabyInfo, 0); //DailyLikeNum
		Write32(pLoverBabyInfo, 0); //TotalLikeNum
		Write32(pLoverBabyInfo, 0); //DailyLearningNum
		Write32(pLoverBabyInfo, 0); //DaliyLearningLimtNum
		Write32(pLoverBabyInfo, 0); //AlreadyLikeNums
		Write32(pLoverBabyInfo, 0); //RemainingLikeNums
		Write16(pLoverBabyInfo, 0); //BabyTransferdProfileLevel
		Write16(pLoverBabyInfo, 0); //HaveBirthPresent

		len = pLoverBabyInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //BabySeq

	len = p - buf;
	SendToClient(Client, 24403, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyClientRaiseLoverBabyResult(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	{ //LoveBabyInfo
		BYTE* pLoveBabyInfo = p;
		Write16(pLoveBabyInfo, 0); //len

		Write32(pLoveBabyInfo, 0); //LoveBabyID
		Write32(pLoveBabyInfo, 0); //MasterLoveUin
		Write32(pLoveBabyInfo, 0); //ViceLoveUin
		Write32(pLoveBabyInfo, 0); //GrowValue
		Write32(pLoveBabyInfo, 0); //MentalValue
		Write32(pLoveBabyInfo, 0); //BabyGrowLevel
		Write32(pLoveBabyInfo, 0); //BabyProfileLevel
		Write32(pLoveBabyInfo, 0); //BabyStrengthLevel
		Write32(pLoveBabyInfo, 0); //BabyPLValue
		Write32(pLoveBabyInfo, 0); //BabyOrgPLValue
		WriteString(pLoveBabyInfo, 0); //LoveBabyNickName[]
		Write16(pLoveBabyInfo, 0); //BabyStat
		Write16(pLoveBabyInfo, 0); //RemainingActiveDay
		Write16(pLoveBabyInfo, 0); //BackGroundID
		Write16(pLoveBabyInfo, 0); //LoverBabyGender
		Write16(pLoveBabyInfo, 0); //MentalTotalValue
		Write32(pLoveBabyInfo, 0); //NextGrowLevelGrowValue
		Write32(pLoveBabyInfo, 0); //LoverBabyItemID
		Write16(pLoveBabyInfo, 0); //EquipStat
		Write32(pLoveBabyInfo, 0); //BabySkillNums
		for (size_t i = 0; i < n; i++)
		{ //PetSkillList
			BYTE* pPetSkillList = pLoveBabyInfo;
			Write16(pPetSkillList, 0); //len

			Write16(pPetSkillList, 0); //SkillID
			Write8(pPetSkillList, 0); //Status
			Write8(pPetSkillList, 0); //Active
			Write32(pPetSkillList, 0); //Value

			len = pPetSkillList - pLoveBabyInfo;
			Set16(pLoveBabyInfo, (WORD)len);
			pLoveBabyInfo += len;
		}
		Write16(pLoveBabyInfo, 0); //TreatMentalValue
		Write32(pLoveBabyInfo, 0); //DailyLikeNum
		Write32(pLoveBabyInfo, 0); //TotalLikeNum
		Write32(pLoveBabyInfo, 0); //DailyLearningNum
		Write32(pLoveBabyInfo, 0); //DaliyLearningLimtNum
		Write32(pLoveBabyInfo, 0); //AlreadyLikeNums
		Write32(pLoveBabyInfo, 0); //RemainingLikeNums
		Write16(pLoveBabyInfo, 0); //BabyTransferdProfileLevel
		Write16(pLoveBabyInfo, 0); //HaveBirthPresent

		len = pLoveBabyInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //BabySeq

	len = p - buf;
	SendToClient(Client, 24357, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyClientReceiveRaiseLoveBabyInvition(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //MasterLoveUin
	Write32(p, 0); //ViceLoveUin
	Write16(p, 0); //LoveBabyGender

	len = p - buf;
	SendToClient(Client, 24358, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyClientInviteRaiseLoveBabyFailedInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //MasterLoveUin
	Write32(p, 0); //ViceLoveUin
	Write16(p, 0); //LoveBabyGender
	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 24361, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyClientUpdateLoveBabyInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //NeedDeletInfo
	Write16(p, 0); //UpdateSource
	{ //LoveBabyInfo
		BYTE* pLoveBabyInfo = p;
		Write16(pLoveBabyInfo, 0); //len

		Write32(pLoveBabyInfo, 0); //LoveBabyID
		Write32(pLoveBabyInfo, 0); //MasterLoveUin
		Write32(pLoveBabyInfo, 0); //ViceLoveUin
		Write32(pLoveBabyInfo, 0); //GrowValue
		Write32(pLoveBabyInfo, 0); //MentalValue
		Write32(pLoveBabyInfo, 0); //BabyGrowLevel
		Write32(pLoveBabyInfo, 0); //BabyProfileLevel
		Write32(pLoveBabyInfo, 0); //BabyStrengthLevel
		Write32(pLoveBabyInfo, 0); //BabyPLValue
		Write32(pLoveBabyInfo, 0); //BabyOrgPLValue
		WriteString(pLoveBabyInfo, 0); //LoveBabyNickName[]
		Write16(pLoveBabyInfo, 0); //BabyStat
		Write16(pLoveBabyInfo, 0); //RemainingActiveDay
		Write16(pLoveBabyInfo, 0); //BackGroundID
		Write16(pLoveBabyInfo, 0); //LoverBabyGender
		Write16(pLoveBabyInfo, 0); //MentalTotalValue
		Write32(pLoveBabyInfo, 0); //NextGrowLevelGrowValue
		Write32(pLoveBabyInfo, 0); //LoverBabyItemID
		Write16(pLoveBabyInfo, 0); //EquipStat
		Write32(pLoveBabyInfo, 0); //BabySkillNums
		for (size_t i = 0; i < n; i++)
		{ //PetSkillList
			BYTE* pPetSkillList = pLoveBabyInfo;
			Write16(pPetSkillList, 0); //len

			Write16(pPetSkillList, 0); //SkillID
			Write8(pPetSkillList, 0); //Status
			Write8(pPetSkillList, 0); //Active
			Write32(pPetSkillList, 0); //Value

			len = pPetSkillList - pLoveBabyInfo;
			Set16(pLoveBabyInfo, (WORD)len);
			pLoveBabyInfo += len;
		}
		Write16(pLoveBabyInfo, 0); //TreatMentalValue
		Write32(pLoveBabyInfo, 0); //DailyLikeNum
		Write32(pLoveBabyInfo, 0); //TotalLikeNum
		Write32(pLoveBabyInfo, 0); //DailyLearningNum
		Write32(pLoveBabyInfo, 0); //DaliyLearningLimtNum
		Write32(pLoveBabyInfo, 0); //AlreadyLikeNums
		Write32(pLoveBabyInfo, 0); //RemainingLikeNums
		Write16(pLoveBabyInfo, 0); //BabyTransferdProfileLevel
		Write16(pLoveBabyInfo, 0); //HaveBirthPresent

		len = pLoveBabyInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //BabySeq

	len = p - buf;
	SendToClient(Client, 24363, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestRaiseLoverBabyDirectlyInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	short LoveBabyGender = Read16(p);
	UCHAR BabySeq = Read8(p);

}

void RequestGetLoverBabyDailyAward(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetLoverBabyDailyAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write32(p, 0); //SuperMoney
	Write16(p, 0); //ItemNums
	for (size_t i = 0; i < n; i++)
	{ //LoveBabyDailyAwardItems
		BYTE* pLoveBabyDailyAwardItems = p;
		Write16(pLoveBabyDailyAwardItems, 0); //len

		WriteUn(pLoveBabyDailyAwardItems, 0); //itemID
		WriteUn(pLoveBabyDailyAwardItems, 0); //itemNums
		Write32(pLoveBabyDailyAwardItems, 0); //AvailPeriod

		len = pLoveBabyDailyAwardItems - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24365, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyLoverBabyBackGroundID(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //BackGroundID

	len = p - buf;
	SendToClient(Client, 24376, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyClientLoverBabyDailyAwardInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ReceiveTag

	len = p - buf;
	SendToClient(Client, 24371, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyClientEntryInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //Count
	for (size_t i = 0; i < n; i++)
	{ //EntryList
		BYTE* pEntryList = p;
		Write16(pEntryList, 0); //len

		Write8(pEntryList, 0); //Type
		Write8(pEntryList, 0); //Status
		Write16(pEntryList, 0); //PromptLen
		Write8(pEntryList, 0); //Tag
		Write8(pEntryList, 0); //Icon
		Write8(pEntryList, 0); //Kind
		Write8(pEntryList, 0); //Privilige
		Write8(pEntryList, 0); //IsTodayOpen
		Write8(pEntryList, 0); //SetType
		Write8(pEntryList, 0); //EmbedType
		Write8(pEntryList, 0); //LoginWindow

		len = pEntryList - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24205, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestLMZan(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseLMZan(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 24383, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyLMLotteryScoreChange(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write8(p, 0); //Type
	Write32(p, 0); //SrcUin
	Write32(p, 0); //LotteryScoreInc
	Write32(p, 0); //TotalLotteryScore
	Write16(p, 0); //BoxNum
	for (size_t i = 0; i < n; i++)
	{ //BoxBaseInfo
		BYTE* pBoxBaseInfo = p;
		Write16(pBoxBaseInfo, 0); //len

		Write8(pBoxBaseInfo, 0); //Index
		Write8(pBoxBaseInfo, 0); //Status

		len = pBoxBaseInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24384, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestIfLMMatchAgain(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseIfLMMatchAgain(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 24382, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestLMMatchAnimationEnd(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT TeamMateUin = Read32(p);

}

void NotifyLMMatchAnimationEnd(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //Time

	len = p - buf;
	SendToClient(Client, 24387, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyJijiaFunctionItemCfg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write8(p, 0); //Num
	for (size_t i = 0; i < n; i++)
	{ //Item
		BYTE* pItem = p;
		Write16(pItem, 0); //len

		Write32(pItem, 0); //ItemID
		Write32(pItem, 0); //JijiaItemID

		len = pItem - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24388, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyClientUpdatePlayerID(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //PlayerNum
	for (size_t i = 0; i < n; i++)
	{ //PlayerIDInfo
		BYTE* pPlayerIDInfo = p;
		Write16(pPlayerIDInfo, 0); //len

		Write32(pPlayerIDInfo, 0); //Uin
		Write16(pPlayerIDInfo, 0); //PlayerID

		len = pPlayerIDInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24390, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestWeRelayCommonCfg(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseWeRelayCommonCfg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	{ //SeasonCfg
		BYTE* pSeasonCfg = p;
		Write16(pSeasonCfg, 0); //len

		Write32(pSeasonCfg, 0); //SeasonId
		Write32(pSeasonCfg, 0); //OpenDate
		Write32(pSeasonCfg, 0); //CloseDate
		Write32(pSeasonCfg, 0); //OpenDayNum
		Write32(pSeasonCfg, 0); //BroadCastContentLen
		Write32(pSeasonCfg, 0); //OpenTimeTipsLen
		for (size_t i = 0; i < n; i++)
		{ //tDayOpenCfg
			BYTE* ptDayOpenCfg = pSeasonCfg;
			Write16(ptDayOpenCfg, 0); //len

			Write32(ptDayOpenCfg, 0); //DayID
			Write32(ptDayOpenCfg, 0); //OpenTimeNum
			for (size_t i = 0; i < n; i++)
			{ //tOpenTimeCfg
				BYTE* ptOpenTimeCfg = ptDayOpenCfg;
				Write16(ptOpenTimeCfg, 0); //len

				Write32(ptOpenTimeCfg, 0); //OpenTime
				Write32(ptOpenTimeCfg, 0); //CloseTime
				Write32(ptOpenTimeCfg, 0); //TiyanOpenTime
				Write32(ptOpenTimeCfg, 0); //TiyanCloseTime

				len = ptOpenTimeCfg - ptDayOpenCfg;
				Set16(ptDayOpenCfg, (WORD)len);
				ptDayOpenCfg += len;
			}

			len = ptDayOpenCfg - pSeasonCfg;
			Set16(pSeasonCfg, (WORD)len);
			pSeasonCfg += len;
		}
		Write32(pSeasonCfg, 0); //LuckyBoxIndex
		Write32(pSeasonCfg, 0); //LuckyBoxPriority
		Write32(pSeasonCfg, 0); //LuckyBoxDayLimit

		len = pSeasonCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //RankNum
	for (size_t i = 0; i < n; i++)
	{ //RankAwardInfo
		BYTE* pRankAwardInfo = p;
		Write16(pRankAwardInfo, 0); //len

		Write32(pRankAwardInfo, 0); //RankType
		Write32(pRankAwardInfo, 0); //AwardNum
		for (size_t i = 0; i < n; i++)
		{ //BaseRankAwardToClient
			BYTE* pBaseRankAwardToClient = pRankAwardInfo;
			Write16(pBaseRankAwardToClient, 0); //len

			Write32(pBaseRankAwardToClient, 0); //Index
			Write32(pBaseRankAwardToClient, 0); //RankBegin
			Write32(pBaseRankAwardToClient, 0); //RankEnd
			{ //Award
				BYTE* pAward = pBaseRankAwardToClient;
				Write16(pAward, 0); //len

				Write32(pAward, 0); //Exp
				Write32(pAward, 0); //Money
				Write32(pAward, 0); //SuperMoney
				Write16(pAward, 0); //ItemNum
				for (size_t i = 0; i < n; i++)
				{ //ItemInfo
					BYTE* pItemInfo = pAward;
					Write16(pItemInfo, 0); //len

					Write32(pItemInfo, 0); //ItemID
					Write32(pItemInfo, 0); //ItemNum
					Write32(pItemInfo, 0); //AvailPeriod
					Write8(pItemInfo, 0); //Status
					WriteUn(pItemInfo, 0); //ObtainTime
					Write32(pItemInfo, 0); //OtherAttribute
					Write16(pItemInfo, 0); //ItemType

					len = pItemInfo - pAward;
					Set16(pAward, (WORD)len);
					pAward += len;
				}
				Write32(pAward, 0); //Coupons
				Write32(pAward, 0); //GuildPoint
				Write32(pAward, 0); //LuckMoney
				Write8(pAward, 0); //ExtendInfoNum
				for (size_t i = 0; i < n; i++)
				{ //ExtendInfoAward
					BYTE* pExtendInfoAward = pAward;
					Write16(pExtendInfoAward, 0); //len

					Write16(pExtendInfoAward, 0); //Key
					Write32(pExtendInfoAward, 0); //AddValue
					Write32(pExtendInfoAward, 0); //TotalValue
					Write8(pExtendInfoAward, 0); //ShowPriority
					Write16(pExtendInfoAward, 0); //BuyNeedScore
					Write8(pExtendInfoAward, 0); //OneMatchMaxNum

					len = pExtendInfoAward - pAward;
					Set16(pAward, (WORD)len);
					pAward += len;
				}
				Write32(pAward, 0); //SpeedCoin

				len = pAward - pBaseRankAwardToClient;
				Set16(pBaseRankAwardToClient, (WORD)len);
				pBaseRankAwardToClient += len;
			}
			Write32(pBaseRankAwardToClient, 0); //Status

			len = pBaseRankAwardToClient - pRankAwardInfo;
			Set16(pRankAwardInfo, (WORD)len);
			pRankAwardInfo += len;
		}

		len = pRankAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //ActiveAwardNum
	for (size_t i = 0; i < n; i++)
	{ //ActiveAwardToClient
		BYTE* pActiveAwardToClient = p;
		Write16(pActiveAwardToClient, 0); //len

		Write32(pActiveAwardToClient, 0); //Index
		Write32(pActiveAwardToClient, 0); //ActiveValueLimit
		Write32(pActiveAwardToClient, 0); //RankLevLimit
		{ //Award
			BYTE* pAward = pActiveAwardToClient;
			Write16(pAward, 0); //len

			Write32(pAward, 0); //Exp
			Write32(pAward, 0); //Money
			Write32(pAward, 0); //SuperMoney
			Write16(pAward, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAward;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAward;
				Set16(pAward, (WORD)len);
				pAward += len;
			}
			Write32(pAward, 0); //Coupons
			Write32(pAward, 0); //GuildPoint
			Write32(pAward, 0); //LuckMoney
			Write8(pAward, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAward;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAward;
				Set16(pAward, (WORD)len);
				pAward += len;
			}
			Write32(pAward, 0); //SpeedCoin

			len = pAward - pActiveAwardToClient;
			Set16(pActiveAwardToClient, (WORD)len);
			pActiveAwardToClient += len;
		}

		len = pActiveAwardToClient - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //CarTypeNum
	for (size_t i = 0; i < n; i++)
	{ //CarGuide
		BYTE* pCarGuide = p;
		Write16(pCarGuide, 0); //len

		Write32(pCarGuide, 0); //CarType
		Write32(pCarGuide, 0); //CarNum
		for (size_t i = 0; i < n; i++)
		{ //GuideCarInfo
			BYTE* pGuideCarInfo = pCarGuide;
			Write16(pGuideCarInfo, 0); //len

			Write32(pGuideCarInfo, 0); //CarID

			len = pGuideCarInfo - pCarGuide;
			Set16(pCarGuide, (WORD)len);
			pCarGuide += len;
		}

		len = pCarGuide - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //TiyanCarTypeNum
	for (size_t i = 0; i < n; i++)
	{ //TiyanCarGuide
		BYTE* pTiyanCarGuide = p;
		Write16(pTiyanCarGuide, 0); //len

		Write32(pTiyanCarGuide, 0); //CarType
		Write32(pTiyanCarGuide, 0); //CarNum
		for (size_t i = 0; i < n; i++)
		{ //GuideCarInfo
			BYTE* pGuideCarInfo = pTiyanCarGuide;
			Write16(pGuideCarInfo, 0); //len

			Write32(pGuideCarInfo, 0); //CarID

			len = pGuideCarInfo - pTiyanCarGuide;
			Set16(pTiyanCarGuide, (WORD)len);
			pTiyanCarGuide += len;
		}

		len = pTiyanCarGuide - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //LuckyAwardToClient
		BYTE* pLuckyAwardToClient = p;
		Write16(pLuckyAwardToClient, 0); //len

		Write32(pLuckyAwardToClient, 0); //LuckBoxGet
		{ //Award
			BYTE* pAward = pLuckyAwardToClient;
			Write16(pAward, 0); //len

			Write32(pAward, 0); //Exp
			Write32(pAward, 0); //Money
			Write32(pAward, 0); //SuperMoney
			Write16(pAward, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAward;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAward;
				Set16(pAward, (WORD)len);
				pAward += len;
			}
			Write32(pAward, 0); //Coupons
			Write32(pAward, 0); //GuildPoint
			Write32(pAward, 0); //LuckMoney
			Write8(pAward, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAward;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAward;
				Set16(pAward, (WORD)len);
				pAward += len;
			}
			Write32(pAward, 0); //SpeedCoin

			len = pAward - pLuckyAwardToClient;
			Set16(pLuckyAwardToClient, (WORD)len);
			pLuckyAwardToClient += len;
		}

		len = pLuckyAwardToClient - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24391, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestWeRelayPlayerInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseWeRelayPlayerInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write32(p, 0); //ActiveAwardNum
	for (size_t i = 0; i < n; i++)
	{ //ActiveAwardStatus
		BYTE* pActiveAwardStatus = p;
		Write16(pActiveAwardStatus, 0); //len

		Write32(pActiveAwardStatus, 0); //Index
		Write32(pActiveAwardStatus, 0); //Status

		len = pActiveAwardStatus - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //EverydayBonus
		BYTE* pEverydayBonus = p;
		Write16(pEverydayBonus, 0); //len

		Write32(pEverydayBonus, 0); //Supermoney
		Write32(pEverydayBonus, 0); //Coupons
		Write32(pEverydayBonus, 0); //SupermoneyAlreadyGet
		Write32(pEverydayBonus, 0); //CouponsAlreadyGet
		Write32(pEverydayBonus, 0); //FreeCardNum
		Write32(pEverydayBonus, 0); //RallyMatchScore

		len = pEverydayBonus - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //ScoreLimit
	Write32(p, 0); //LuckValue
	Write32(p, 0); //LuckValueLimit
	Write32(p, 0); //CurrentActiveValue
	Write32(p, 0); //RallyRankLev
	Write32(p, 0); //SupermoneyCost
	Write32(p, 0); //RemainSupermoneyCostTimes
	Write32(p, 0); //RemainFreeCardNumCanReceive

	len = p - buf;
	SendToClient(Client, 24392, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyWeRelayFriendTicketInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //FriendNum
	for (size_t i = 0; i < n; i++)
	{ //FriendTicketInfo
		BYTE* pFriendTicketInfo = p;
		Write16(pFriendTicketInfo, 0); //len

		Write32(pFriendTicketInfo, 0); //Uin
		Write32(pFriendTicketInfo, 0); //TicketNum

		len = pFriendTicketInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24393, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestWeRelayChooseCar(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT[] CarID[] = Read32(p);

}

void ResponseWeRelayChooseCar(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin

	len = p - buf;
	SendToClient(Client, 24394, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyWeRelayChooseCar(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin

	len = p - buf;
	SendToClient(Client, 24395, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void ResponseEnterRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //RoomID
	Write16(p, 0); //BaseGameMode
	Write16(p, 0); //SubGameMode
	WriteString(p, 0); //RoomName[]
	Write8(p, 0); //SeatNum
	Write8(p, 0); //Flag
	Write8(p, 0); //SeatID
	Write8(p, 0); //TeamID
	Write32(p, 0); //MapID
	Write16(p, 0); //RoomOwnerID
	Write8(p, 0); //SeatStatus[]
	Write8(p, 0); //PlayerCount
	for (size_t i = 0; i < n; i++)
	{ //PlayerRoomVisibleInfo
		BYTE* pPlayerRoomVisibleInfo = p;
		Write16(pPlayerRoomVisibleInfo, 0); //len

		WriteUn(pPlayerRoomVisibleInfo, 0); //Uin
		WriteUn(pPlayerRoomVisibleInfo, 0); //Identity
		Write8(pPlayerRoomVisibleInfo, 0); //SeatID
		Write8(pPlayerRoomVisibleInfo, 0); //TeamID
		Write16(pPlayerRoomVisibleInfo, 0); //PlayerID
		Write8(pPlayerRoomVisibleInfo, 0); //Status
		{ //PlayerDBBaseInfo
			BYTE* pPlayerDBBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerDBBaseInfo, 0); //len

			WriteString(pPlayerDBBaseInfo, 0); //NickName[]
			Write8(pPlayerDBBaseInfo, 0); //Gender
			Write8(pPlayerDBBaseInfo, 0); //Country
			Write32(pPlayerDBBaseInfo, 0); //License
			WriteUn(pPlayerDBBaseInfo, 0); //Experience
			Write32(pPlayerDBBaseInfo, 0); //SuperMoney
			Write32(pPlayerDBBaseInfo, 0); //Money
			WriteUn(pPlayerDBBaseInfo, 0); //WinNum
			Write32(pPlayerDBBaseInfo, 0); //SecondNum
			Write32(pPlayerDBBaseInfo, 0); //ThirdNum
			WriteUn(pPlayerDBBaseInfo, 0); //TotalNum
			Write32(pPlayerDBBaseInfo, 0); //CurHonor
			Write32(pPlayerDBBaseInfo, 0); //TotalHonor
			Write32(pPlayerDBBaseInfo, 0); //TodayHonor
			Write32(pPlayerDBBaseInfo, 0); //RelaxTime
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationBefore
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationCur
			Write32(pPlayerDBBaseInfo, 0); //Charm
			Write32(pPlayerDBBaseInfo, 0); //DurationGame
			Write32(pPlayerDBBaseInfo, 0); //DanceExp
			Write32(pPlayerDBBaseInfo, 0); //Coupons
			Write32(pPlayerDBBaseInfo, 0); //Admiration
			Write32(pPlayerDBBaseInfo, 0); //LuckMoney
			Write32(pPlayerDBBaseInfo, 0); //TeamWorkExp
			Write32(pPlayerDBBaseInfo, 0); //AchievePoint
			Write32(pPlayerDBBaseInfo, 0); //RegTime
			WriteString(pPlayerDBBaseInfo, 0); //Signature[]
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchPoint
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchNum
			Write16(pPlayerDBBaseInfo, 0); //LuckyMatchFirstNum
			Write8(pPlayerDBBaseInfo, 0); //LuckyMatchBestRand
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchWinNum
			Write32(pPlayerDBBaseInfo, 0); //FizzPointTotal
			Write16(pPlayerDBBaseInfo, 0); //FizzPointDaily
			Write16(pPlayerDBBaseInfo, 0); //FizzPointWeekly
			Write16(pPlayerDBBaseInfo, 0); //FizzPointLastWeek
			Write8(pPlayerDBBaseInfo, 0); //FizzLotteryStatus
			Write32(pPlayerDBBaseInfo, 0); //FizzLastUpdateTime
			Write32(pPlayerDBBaseInfo, 0); //SNSLocaleCode
			Write32(pPlayerDBBaseInfo, 0); //AuctionRightUnlockTime
			Write8(pPlayerDBBaseInfo, 0); //ReserveFlag
			Write32(pPlayerDBBaseInfo, 0); //CurConsumeScore
			Write32(pPlayerDBBaseInfo, 0); //HistoryConsumeScore
			Write8(pPlayerDBBaseInfo, 0); //CrashModeSponsorID
			Write32(pPlayerDBBaseInfo, 0); //Popularity
			Write32(pPlayerDBBaseInfo, 0); //LadderMatchAchievePoint
			Write32(pPlayerDBBaseInfo, 0); //Cash
			Write32(pPlayerDBBaseInfo, 0); //PlayerGPMIdentity
			Write32(pPlayerDBBaseInfo, 0); //PointTotalScore
			WriteUn(pPlayerDBBaseInfo, 0); //totalMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //lastMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalSeasonId
			WriteUn(pPlayerDBBaseInfo, 0); //lastClearMapMedalTime
			WriteUn(pPlayerDBBaseInfo, 0); //max2048Score
			WriteUn(pPlayerDBBaseInfo, 0); //curPlay2048LeftNum
			Write32(pPlayerDBBaseInfo, 0); //CheerValue
			Write16(pPlayerDBBaseInfo, 0); //SeasonID
			Write32(pPlayerDBBaseInfo, 0); //LastCheerValue
			Write32(pPlayerDBBaseInfo, 0); //SpeedBean
			Write32(pPlayerDBBaseInfo, 0); //SpeedCoin

			len = pPlayerDBBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //PlayerGuildInfo
			BYTE* pPlayerGuildInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerGuildInfo, 0); //len

			WriteString(pPlayerGuildInfo, 0); //GuildName[]
			Write16(pPlayerGuildInfo, 0); //Duty
			Write32(pPlayerGuildInfo, 0); //GuildID
			Write32(pPlayerGuildInfo, 0); //Right
			Write32(pPlayerGuildInfo, 0); //Medal
			Write32(pPlayerGuildInfo, 0); //Contribute
			WriteString(pPlayerGuildInfo, 0); //DutyTitle[]

			len = pPlayerGuildInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write16(pPlayerRoomVisibleInfo, 0); //EquipedItemNum
		for (size_t i = 0; i < n; i++)
		{ //PlayerItemInfo
			BYTE* pPlayerItemInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerItemInfo, 0); //len

			Write32(pPlayerItemInfo, 0); //ItemID
			Write32(pPlayerItemInfo, 0); //ItemNum
			Write32(pPlayerItemInfo, 0); //AvailPeriod
			Write8(pPlayerItemInfo, 0); //Status
			WriteUn(pPlayerItemInfo, 0); //ObtainTime
			Write32(pPlayerItemInfo, 0); //OtherAttribute
			Write16(pPlayerItemInfo, 0); //ItemType

			len = pPlayerItemInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write16(pPlayerRoomVisibleInfo, 0); //PetNum
		for (size_t i = 0; i < n; i++)
		{ //PetInfo
			BYTE* pPetInfo = pPlayerRoomVisibleInfo;
			Write16(pPetInfo, 0); //len

			Write32(pPetInfo, 0); //Uin
			Write32(pPetInfo, 0); //PetId
			WriteString(pPetInfo, 0); //PetName[]
			Write8(pPetInfo, 0); //IsProper
			Write16(pPetInfo, 0); //Level
			Write8(pPetInfo, 0); //Status
			Write16(pPetInfo, 0); //PetSkillNum
			for (size_t i = 0; i < n; i++)
			{ //PetSkillList
				BYTE* pPetSkillList = pPetInfo;
				Write16(pPetSkillList, 0); //len

				Write16(pPetSkillList, 0); //SkillID
				Write8(pPetSkillList, 0); //Status
				Write8(pPetSkillList, 0); //Active
				Write32(pPetSkillList, 0); //Value

				len = pPetSkillList - pPetInfo;
				Set16(pPetInfo, (WORD)len);
				pPetInfo += len;
			}
			Write32(pPetInfo, 0); //StrengLevel
			Write8(pPetInfo, 0); //TopStatus
			{ //CommonInfo
				BYTE* pCommonInfo = pPetInfo;
				Write16(pCommonInfo, 0); //len

				Write32(pCommonInfo, 0); //HuanHuaLevel
				Write8(pCommonInfo, 0); //CanHuanHua

				len = pCommonInfo - pPetInfo;
				Set16(pPetInfo, (WORD)len);
				pPetInfo += len;
			}
			Write16(pPetInfo, 0); //PKStar
			Write32(pPetInfo, 0); //PetSkinID

			len = pPetInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //PlayerGuildMatchInfo
			BYTE* pPlayerGuildMatchInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerGuildMatchInfo, 0); //len

			Write32(pPlayerGuildMatchInfo, 0); //SelfPoint
			Write32(pPlayerGuildMatchInfo, 0); //WinNum
			Write32(pPlayerGuildMatchInfo, 0); //TotalNum

			len = pPlayerGuildMatchInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //IsInTopList
		Write8(pPlayerRoomVisibleInfo, 0); //LoverRaceOrPro
		Write8(pPlayerRoomVisibleInfo, 0); //TmpEffectNum
		Write32(pPlayerRoomVisibleInfo, 0); //TmpEffectItems[]
		Write8(pPlayerRoomVisibleInfo, 0); //OBState
		Write8(pPlayerRoomVisibleInfo, 0); //DebutOrX5
		Write8(pPlayerRoomVisibleInfo, 0); //RandKeyFlag
		WriteUn(pPlayerRoomVisibleInfo, 0); //VipFlag
		Write8(pPlayerRoomVisibleInfo, 0); //HaveAppellation
		for (size_t i = 0; i < n; i++)
		{ //CurAppellation
			BYTE* pCurAppellation = pPlayerRoomVisibleInfo;
			Write16(pCurAppellation, 0); //len

			Write8(pCurAppellation, 0); //Type
			Write8(pCurAppellation, 0); //Level
			Write8(pCurAppellation, 0); //Status
			Write8(pCurAppellation, 0); //Difficulty
			Write32(pCurAppellation, 0); //MapId
			Write32(pCurAppellation, 0); //Value

			len = pCurAppellation - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //NobleInfo
			BYTE* pNobleInfo = pPlayerRoomVisibleInfo;
			Write16(pNobleInfo, 0); //len

			Write32(pNobleInfo, 0); //NobleID
			Write8(pNobleInfo, 0); //NobleLevel
			Write32(pNobleInfo, 0); //NoblePoint
			Write32(pNobleInfo, 0); //NobleLeftDays

			len = pNobleInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasCarryWizard
		for (size_t i = 0; i < n; i++)
		{ //CarryWizardInfo
			BYTE* pCarryWizardInfo = pPlayerRoomVisibleInfo;
			Write16(pCarryWizardInfo, 0); //len

			Write16(pCarryWizardInfo, 0); //WizardID
			WriteString(pCarryWizardInfo, 0); //NickName[]
			Write16(pCarryWizardInfo, 0); //WizardType
			Write8(pCarryWizardInfo, 0); //Order
			Write8(pCarryWizardInfo, 0); //EvolutionBranch
			Write8(pCarryWizardInfo, 0); //IsHuanHua

			len = pCarryWizardInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //GuildVipBaseInfo
			BYTE* pGuildVipBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pGuildVipBaseInfo, 0); //len

			Write8(pGuildVipBaseInfo, 0); //GuildVipLevel
			Write32(pGuildVipBaseInfo, 0); //GuildVipPoint

			len = pGuildVipBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write32(pPlayerRoomVisibleInfo, 0); //ExFlag
		Write8(pPlayerRoomVisibleInfo, 0); //HaveLDMBaseInfo
		for (size_t i = 0; i < n; i++)
		{ //PlayerLDMBaseInfo
			BYTE* pPlayerLDMBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerLDMBaseInfo, 0); //len

			Write8(pPlayerLDMBaseInfo, 0); //Grade
			Write32(pPlayerLDMBaseInfo, 0); //Score
			Write32(pPlayerLDMBaseInfo, 0); //MaxScore
			Write32(pPlayerLDMBaseInfo, 0); //MaxGrade

			len = pPlayerLDMBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasWl
		for (size_t i = 0; i < n; i++)
		{ //PlayerWlVisibleInfo
			BYTE* pPlayerWlVisibleInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerWlVisibleInfo, 0); //len

			Write32(pPlayerWlVisibleInfo, 0); //WonderLandID
			WriteString(pPlayerWlVisibleInfo, 0); //WonderLandName[]
			Write16(pPlayerWlVisibleInfo, 0); //WonderLandDuty
			Write8(pPlayerWlVisibleInfo, 0); //SubType
			Write8(pPlayerWlVisibleInfo, 0); //GuildGrade

			len = pPlayerWlVisibleInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasLoverVip
		for (size_t i = 0; i < n; i++)
		{ //LoverVipInfo
			BYTE* pLoverVipInfo = pPlayerRoomVisibleInfo;
			Write16(pLoverVipInfo, 0); //len

			Write8(pLoverVipInfo, 0); //LoverVipLevel
			Write32(pLoverVipInfo, 0); //LoverVipPoint
			Write8(pLoverVipInfo, 0); //GrowRate

			len = pLoverVipInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasBattleModeSkillInfoList
		for (size_t i = 0; i < n; i++)
		{ //BattleModeSkillInfoList
			BYTE* pBattleModeSkillInfoList = pPlayerRoomVisibleInfo;
			Write16(pBattleModeSkillInfoList, 0); //len

			Write8(pBattleModeSkillInfoList, 0); //SkillNum
			for (size_t i = 0; i < n; i++)
			{ //SkillInfo
				BYTE* pSkillInfo = pBattleModeSkillInfoList;
				Write16(pSkillInfo, 0); //len

				Write16(pSkillInfo, 0); //SkillId
				Write8(pSkillInfo, 0); //SkillLevel

				len = pSkillInfo - pBattleModeSkillInfoList;
				Set16(pBattleModeSkillInfoList, (WORD)len);
				pBattleModeSkillInfoList += len;
			}

			len = pBattleModeSkillInfoList - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasGarden
		for (size_t i = 0; i < n; i++)
		{ //PersonalGardenBaseInfo
			BYTE* pPersonalGardenBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pPersonalGardenBaseInfo, 0); //len

			Write8(pPersonalGardenBaseInfo, 0); //GardenLevel
			Write32(pPersonalGardenBaseInfo, 0); //GardenPoint
			Write8(pPersonalGardenBaseInfo, 0); //GrowRate
			Write32(pPersonalGardenBaseInfo, 0); //GardenExpireTime
			{ //SimpleInfo
				BYTE* pSimpleInfo = pPersonalGardenBaseInfo;
				Write16(pSimpleInfo, 0); //len

				Write32(pSimpleInfo, 0); //WeekPopularity
				Write32(pSimpleInfo, 0); //TotalPopularity
				Write32(pSimpleInfo, 0); //LastUpdatePopularityTime
				Write8(pSimpleInfo, 0); //PrivateType

				len = pSimpleInfo - pPersonalGardenBaseInfo;
				Set16(pPersonalGardenBaseInfo, (WORD)len);
				pPersonalGardenBaseInfo += len;
			}

			len = pPersonalGardenBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //ConsumeVipInfo
			BYTE* pConsumeVipInfo = pPlayerRoomVisibleInfo;
			Write16(pConsumeVipInfo, 0); //len

			WriteUn(pConsumeVipInfo, 0); //VipLevel
			WriteUn(pConsumeVipInfo, 0); //CharmValueOfMonth
			WriteUn(pConsumeVipInfo, 0); //SearchTreasureNums
			WriteUn(pConsumeVipInfo, 0); //GetTreasureNums

			len = pConsumeVipInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HaveBaby
		{ //LoverBabyInfo
			BYTE* pLoverBabyInfo = pPlayerRoomVisibleInfo;
			Write16(pLoverBabyInfo, 0); //len

			Write32(pLoverBabyInfo, 0); //LoverBabyID
			Write32(pLoverBabyInfo, 0); //ItemID
			Write32(pLoverBabyInfo, 0); //GrowValue
			Write32(pLoverBabyInfo, 0); //MentalValue
			Write32(pLoverBabyInfo, 0); //BabyProfileLevel
			Write32(pLoverBabyInfo, 0); //StrengthLevel
			Write32(pLoverBabyInfo, 0); //GrowLevel
			WriteString(pLoverBabyInfo, 0); //LoveBabyNickName[]
			Write16(pLoverBabyInfo, 0); //LoverBabyStat
			Write16(pLoverBabyInfo, 0); //LoverBabyEquipStat
			Write16(pLoverBabyInfo, 0); //LoverBabyTransferdStatus

			len = pLoverBabyInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //EmperorInfo
			BYTE* pEmperorInfo = pPlayerRoomVisibleInfo;
			Write16(pEmperorInfo, 0); //len

			Write8(pEmperorInfo, 0); //EmperorLevel
			Write32(pEmperorInfo, 0); //EmperorPoint
			Write32(pEmperorInfo, 0); //EmperorLeftDays
			Write8(pEmperorInfo, 0); //EmperorGrowRate

			len = pEmperorInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write16(pPlayerRoomVisibleInfo, 0); //RaceCardNums
		for (size_t i = 0; i < n; i++)
		{ //RaceCardAddValueInfo
			BYTE* pRaceCardAddValueInfo = pPlayerRoomVisibleInfo;
			Write16(pRaceCardAddValueInfo, 0); //len

			Write32(pRaceCardAddValueInfo, 0); //RaceCardID
			Write32(pRaceCardAddValueInfo, 0); //AddValue

			len = pRaceCardAddValueInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //GansterScoreInfo
			BYTE* pGansterScoreInfo = pPlayerRoomVisibleInfo;
			Write16(pGansterScoreInfo, 0); //len

			Write32(pGansterScoreInfo, 0); //GansterSeasonID
			Write32(pGansterScoreInfo, 0); //GansterScore
			Write32(pGansterScoreInfo, 0); //PoliceScore
			Write32(pGansterScoreInfo, 0); //TotalGansterScore

			len = pGansterScoreInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write32(pPlayerRoomVisibleInfo, 0); //OlympicId
		Write32(pPlayerRoomVisibleInfo, 0); //NPCEliminateWinTimes
		Write8(pPlayerRoomVisibleInfo, 0); //OriginTeamID
		Write8(pPlayerRoomVisibleInfo, 0); //NxNpc
		Write16(pPlayerRoomVisibleInfo, 0); //NxNpcAILevel
		{ //EquippedActiveKartInfo
			BYTE* pEquippedActiveKartInfo = pPlayerRoomVisibleInfo;
			Write16(pEquippedActiveKartInfo, 0); //len

			Write8(pEquippedActiveKartInfo, 0); //HaveActiveInfo
			Write32(pEquippedActiveKartInfo, 0); //KartID
			Write32(pEquippedActiveKartInfo, 0); //ActiveLevel

			len = pEquippedActiveKartInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //SpecialActivityStatus
		Write8(pPlayerRoomVisibleInfo, 0); //AreaID
		Write8(pPlayerRoomVisibleInfo, 0); //HaveRaiseSecondBaby
		{ //SecondLoverBabyInfo
			BYTE* pSecondLoverBabyInfo = pPlayerRoomVisibleInfo;
			Write16(pSecondLoverBabyInfo, 0); //len

			Write32(pSecondLoverBabyInfo, 0); //LoverBabyID
			Write32(pSecondLoverBabyInfo, 0); //ItemID
			Write32(pSecondLoverBabyInfo, 0); //GrowValue
			Write32(pSecondLoverBabyInfo, 0); //MentalValue
			Write32(pSecondLoverBabyInfo, 0); //BabyProfileLevel
			Write32(pSecondLoverBabyInfo, 0); //StrengthLevel
			Write32(pSecondLoverBabyInfo, 0); //GrowLevel
			WriteString(pSecondLoverBabyInfo, 0); //LoveBabyNickName[]
			Write16(pSecondLoverBabyInfo, 0); //LoverBabyStat
			Write16(pSecondLoverBabyInfo, 0); //LoverBabyEquipStat
			Write16(pSecondLoverBabyInfo, 0); //LoverBabyTransferdStatus

			len = pSecondLoverBabyInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasRankedMatchInfo
		for (size_t i = 0; i < n; i++)
		{ //RankedMatchGradeInfo
			BYTE* pRankedMatchGradeInfo = pPlayerRoomVisibleInfo;
			Write16(pRankedMatchGradeInfo, 0); //len

			Write32(pRankedMatchGradeInfo, 0); //GradeLevel
			Write32(pRankedMatchGradeInfo, 0); //ChildLevel
			Write32(pRankedMatchGradeInfo, 0); //GradeScore
			Write32(pRankedMatchGradeInfo, 0); //MaxGradeScore
			Write32(pRankedMatchGradeInfo, 0); //TotalScore

			len = pRankedMatchGradeInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasHuanLingChangeInfo
		for (size_t i = 0; i < n; i++)
		{ //HuanLingSuitInfo
			BYTE* pHuanLingSuitInfo = pPlayerRoomVisibleInfo;
			Write16(pHuanLingSuitInfo, 0); //len

			Write32(pHuanLingSuitInfo, 0); //SuitID
			Write8(pHuanLingSuitInfo, 0); //ChangeLevel

			len = pHuanLingSuitInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //EquipSealType
		Write16(pPlayerRoomVisibleInfo, 0); //Role
		Write8(pPlayerRoomVisibleInfo, 0); //SpecialActivityIDNum
		Write8(pPlayerRoomVisibleInfo, 0); //CrewID
		Write8(pPlayerRoomVisibleInfo, 0); //SpecialActivityInfoNum
		for (size_t i = 0; i < n; i++)
		{ //SpecialActivityInfo
			BYTE* pSpecialActivityInfo = pPlayerRoomVisibleInfo;
			Write16(pSpecialActivityInfo, 0); //len

			Write8(pSpecialActivityInfo, 0); //ProfessionLicenseInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ProfessionLicenseInfo
				BYTE* pProfessionLicenseInfo = pSpecialActivityInfo;
				Write16(pProfessionLicenseInfo, 0); //len

				Write8(pProfessionLicenseInfo, 0); //BigLevel
				Write8(pProfessionLicenseInfo, 0); //SmallLevel

				len = pProfessionLicenseInfo - pSpecialActivityInfo;
				Set16(pSpecialActivityInfo, (WORD)len);
				pSpecialActivityInfo += len;
			}

			len = pSpecialActivityInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //ParaNum
		Write32(pPlayerRoomVisibleInfo, 0); //ParaList[]
		Write8(pPlayerRoomVisibleInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemOrder
			BYTE* pItemOrder = pPlayerRoomVisibleInfo;
			Write16(pItemOrder, 0); //len

			Write32(pItemOrder, 0); //KartID
			Write32(pItemOrder, 0); //Order
			Write32(pItemOrder, 0); //BackGroundID

			len = pItemOrder - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //TDCExcluItemNum
		Write32(pPlayerRoomVisibleInfo, 0); //TDCExclusiveItemID[]
		Write8(pPlayerRoomVisibleInfo, 0); //EquipNiChangItemNum
		for (size_t i = 0; i < n; i++)
		{ //NiChangPavilionEquipItemInfo
			BYTE* pNiChangPavilionEquipItemInfo = pPlayerRoomVisibleInfo;
			Write16(pNiChangPavilionEquipItemInfo, 0); //len

			Write32(pNiChangPavilionEquipItemInfo, 0); //ItemId
			Write16(pNiChangPavilionEquipItemInfo, 0); //CurrentEquipColorationPlanId

			len = pNiChangPavilionEquipItemInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //TestKartGameType
		Write32(pPlayerRoomVisibleInfo, 0); //GameTestKartID
		Write8(pPlayerRoomVisibleInfo, 0); //HasStarsFightingInfo
		for (size_t i = 0; i < n; i++)
		{ //StarsFightingInfo
			BYTE* pStarsFightingInfo = pPlayerRoomVisibleInfo;
			Write16(pStarsFightingInfo, 0); //len

			Write32(pStarsFightingInfo, 0); //Star
			Write32(pStarsFightingInfo, 0); //StarVal
			Write32(pStarsFightingInfo, 0); //StarsFightingStarLevel

			len = pStarsFightingInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //RoomBGSetting

		len = pPlayerRoomVisibleInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen
	Write8(p, 0); //PlayerCount2
	for (size_t i = 0; i < n; i++)
	{ //PlayerRelationInfo
		BYTE* pPlayerRelationInfo = p;
		Write16(pPlayerRelationInfo, 0); //len

		Write32(pPlayerRelationInfo, 0); //SrcUin
		Write32(pPlayerRelationInfo, 0); //RelationFlag
		Write32(pPlayerRelationInfo, 0); //RelationUin
		WriteString(pPlayerRelationInfo, 0); //RelationNickName[]
		Write32(pPlayerRelationInfo, 0); //EngageTime
		Write32(pPlayerRelationInfo, 0); //NextCanBookingTimeLimit
		Write32(pPlayerRelationInfo, 0); //BeginHoneyMoonTime
		Write32(pPlayerRelationInfo, 0); //EndHoneyMoonTime
		Write8(pPlayerRelationInfo, 0); //EngageFlag

		len = pPlayerRelationInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //KartNum
	for (size_t i = 0; i < n; i++)
	{ //KartRefitInfo
		BYTE* pKartRefitInfo = p;
		Write16(pKartRefitInfo, 0); //len

		Write32(pKartRefitInfo, 0); //Uin
		Write32(pKartRefitInfo, 0); //KartId
		Write32(pKartRefitInfo, 0); //RefitCout
		Write16(pKartRefitInfo, 0); //MaxFlags
		Write16(pKartRefitInfo, 0); //WWeight
		Write16(pKartRefitInfo, 0); //SpeedWeight
		Write16(pKartRefitInfo, 0); //JetWeight
		Write16(pKartRefitInfo, 0); //SJetWeight
		Write16(pKartRefitInfo, 0); //AccuWeight
		Write32(pKartRefitInfo, 0); //ShapeRefitCount
		Write32(pKartRefitInfo, 0); //KartHeadRefitItemID
		Write32(pKartRefitInfo, 0); //KartTailRefitItemID
		Write32(pKartRefitInfo, 0); //KartFlankRefitItemID
		Write32(pKartRefitInfo, 0); //KartTireRefitItemID
		Write32(pKartRefitInfo, 0); //SecondRefitCount
		Write16(pKartRefitInfo, 0); //Speed2Weight
		Write16(pKartRefitInfo, 0); //DriftVecWeight
		Write16(pKartRefitInfo, 0); //AdditionalZSpeedWeight
		Write16(pKartRefitInfo, 0); //AntiCollisionWeight
		Write16(pKartRefitInfo, 0); //LuckyValue
		Write16(pKartRefitInfo, 0); //RefitLuckyValueMaxWeight
		Write32(pKartRefitInfo, 0); //ShapeSuitID
		Write8(pKartRefitInfo, 0); //LegendSuitLevel
		Write32(pKartRefitInfo, 0); //LegendSuitLevelChoice
		Write32(pKartRefitInfo, 0); //ShapeLegendSuitID

		len = pKartRefitInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //LoverRaceOrPro
	{ //STDynamicInfo
		BYTE* pSTDynamicInfo = p;
		Write16(pSTDynamicInfo, 0); //len

		Write8(pSTDynamicInfo, 0); //Season
		Write8(pSTDynamicInfo, 0); //Timeslot
		Write8(pSTDynamicInfo, 0); //Weather

		len = pSTDynamicInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //PreKnowMapID
	Write8(p, 0); //HasMoreInfo
	Write32(p, 0); //MapSubID
	Write8(p, 0); //HasFBInfo
	for (size_t i = 0; i < n; i++)
	{ //FBInfo
		BYTE* pFBInfo = p;
		Write16(pFBInfo, 0); //len

		Write8(pFBInfo, 0); //AvailableLev
		Write8(pFBInfo, 0); //Lev
		Write8(pFBInfo, 0); //SubLev
		Write32(pFBInfo, 0); //BossID
		Write8(pFBInfo, 0); //FBSeason

		len = pFBInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //GuildScoreInNextGame
	Write16(p, 0); //GuildScoreAlreadyAward
	Write16(p, 0); //GuildScoreTotalAward
	Write8(p, 0); //SpeFlag
	Write8(p, 0); //MapNum
	for (size_t i = 0; i < n; i++)
	{ //ShuttleMapList
		BYTE* pShuttleMapList = p;
		Write16(pShuttleMapList, 0); //len

		Write32(pShuttleMapList, 0); //MapID
		Write16(pShuttleMapList, 0); //BeginIdx
		Write16(pShuttleMapList, 0); //EndIdx
		Write8(pShuttleMapList, 0); //Reverse
		Write16(pShuttleMapList, 0); //BeginCheckPointIdx

		len = pShuttleMapList - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //RoomNo
	Write16(p, 0); //SvrId
	Write16(p, 0); //RaceCardNums
	for (size_t i = 0; i < n; i++)
	{ //RaceCardAddValueInfo
		BYTE* pRaceCardAddValueInfo = p;
		Write16(pRaceCardAddValueInfo, 0); //len

		Write32(pRaceCardAddValueInfo, 0); //RaceCardID
		Write32(pRaceCardAddValueInfo, 0); //AddValue

		len = pRaceCardAddValueInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //CreateRoomType
	Write16(p, 0); //ServerMatchType
	Write16(p, 0); //TeamMatchType
	Write16(p, 0); //MatchedRoomType
	Write8(p, 0); //InviteType
	Write8(p, 0); //HasWeRelayRoomInfo
	for (size_t i = 0; i < n; i++)
	{ //WeRelayRoomInfo
		BYTE* pWeRelayRoomInfo = p;
		Write16(pWeRelayRoomInfo, 0); //len

		Write16(pWeRelayRoomInfo, 0); //MapNum
		Write32(pWeRelayRoomInfo, 0); //MapID[]
		Write16(pWeRelayRoomInfo, 0); //CarTypeNum
		for (size_t i = 0; i < n; i++)
		{ //CarRandom
			BYTE* pCarRandom = pWeRelayRoomInfo;
			Write16(pCarRandom, 0); //len

			Write32(pCarRandom, 0); //CarType
			Write32(pCarRandom, 0); //CarNum
			for (size_t i = 0; i < n; i++)
			{ //RandomCarInfo
				BYTE* pRandomCarInfo = pCarRandom;
				Write16(pRandomCarInfo, 0); //len

				Write32(pRandomCarInfo, 0); //CarID
				Write16(pRandomCarInfo, 0); //FitLev
				Write8(pRandomCarInfo, 0); //HasRefitInfo
				for (size_t i = 0; i < n; i++)
				{ //KartRefitInfo
					BYTE* pKartRefitInfo = pRandomCarInfo;
					Write16(pKartRefitInfo, 0); //len

					Write32(pKartRefitInfo, 0); //Uin
					Write32(pKartRefitInfo, 0); //KartId
					Write32(pKartRefitInfo, 0); //RefitCout
					Write16(pKartRefitInfo, 0); //MaxFlags
					Write16(pKartRefitInfo, 0); //WWeight
					Write16(pKartRefitInfo, 0); //SpeedWeight
					Write16(pKartRefitInfo, 0); //JetWeight
					Write16(pKartRefitInfo, 0); //SJetWeight
					Write16(pKartRefitInfo, 0); //AccuWeight
					Write32(pKartRefitInfo, 0); //ShapeRefitCount
					Write32(pKartRefitInfo, 0); //KartHeadRefitItemID
					Write32(pKartRefitInfo, 0); //KartTailRefitItemID
					Write32(pKartRefitInfo, 0); //KartFlankRefitItemID
					Write32(pKartRefitInfo, 0); //KartTireRefitItemID
					Write32(pKartRefitInfo, 0); //SecondRefitCount
					Write16(pKartRefitInfo, 0); //Speed2Weight
					Write16(pKartRefitInfo, 0); //DriftVecWeight
					Write16(pKartRefitInfo, 0); //AdditionalZSpeedWeight
					Write16(pKartRefitInfo, 0); //AntiCollisionWeight
					Write16(pKartRefitInfo, 0); //LuckyValue
					Write16(pKartRefitInfo, 0); //RefitLuckyValueMaxWeight
					Write32(pKartRefitInfo, 0); //ShapeSuitID
					Write8(pKartRefitInfo, 0); //LegendSuitLevel
					Write32(pKartRefitInfo, 0); //LegendSuitLevelChoice
					Write32(pKartRefitInfo, 0); //ShapeLegendSuitID

					len = pKartRefitInfo - pRandomCarInfo;
					Set16(pRandomCarInfo, (WORD)len);
					pRandomCarInfo += len;
				}
				Write8(pRandomCarInfo, 0); //HasStoneInfo
				for (size_t i = 0; i < n; i++)
				{ //STKartStoneGrooveInfo
					BYTE* pSTKartStoneGrooveInfo = pRandomCarInfo;
					Write16(pSTKartStoneGrooveInfo, 0); //len

					Write32(pSTKartStoneGrooveInfo, 0); //KartID
					Write32(pSTKartStoneGrooveInfo, 0); //StoneGrooveNum
					for (size_t i = 0; i < n; i++)
					{ //StoneGrooveInfo
						BYTE* pStoneGrooveInfo = pSTKartStoneGrooveInfo;
						Write16(pStoneGrooveInfo, 0); //len

						Write32(pStoneGrooveInfo, 0); //StoneUseOccaType
						Write32(pStoneGrooveInfo, 0); //SkillStoneID

						len = pStoneGrooveInfo - pSTKartStoneGrooveInfo;
						Set16(pSTKartStoneGrooveInfo, (WORD)len);
						pSTKartStoneGrooveInfo += len;
					}

					len = pSTKartStoneGrooveInfo - pRandomCarInfo;
					Set16(pRandomCarInfo, (WORD)len);
					pRandomCarInfo += len;
				}
				Write32(pRandomCarInfo, 0); //KartType

				len = pRandomCarInfo - pCarRandom;
				Set16(pCarRandom, (WORD)len);
				pCarRandom += len;
			}

			len = pCarRandom - pWeRelayRoomInfo;
			Set16(pWeRelayRoomInfo, (WORD)len);
			pWeRelayRoomInfo += len;
		}

		len = pWeRelayRoomInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //RoomFlag
	Write8(p, 0); //MaxOBNum
	Write8(p, 0); //AllowAutoStart
	Write8(p, 0); //HasLMInfo
	for (size_t i = 0; i < n; i++)
	{ //LMInfo
		BYTE* pLMInfo = p;
		Write16(pLMInfo, 0); //len

		Write8(pLMInfo, 0); //GameType

		len = pLMInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //TalkRoomBGID
	Write16(p, 0); //Role
	Write8(p, 0); //ParaNum
	Write32(p, 0); //ParaList[]
	{ //RoomInfoChange
		BYTE* pRoomInfoChange = p;
		Write16(pRoomInfoChange, 0); //len

		Write32(pRoomInfoChange, 0); //TeamJumpLevel
		Write32(pRoomInfoChange, 0); //RoomBGID

		len = pRoomInfoChange - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //PlayerEquipKartID
	Write32(p, 0); //RankedMatchTestDriveKartID
	Write8(p, 0); //FirstlyTipMap
	Write8(p, 0); //GVoiceRoomNameLen
	Write8(p, 0); //GVoiceReasonLen
	Write8(p, 0); //TDCExcluItemNum
	Write32(p, 0); //TDCExclusiveItemID[]
	Write8(p, 0); //TestKartGameType
	Write32(p, 0); //GameTestKartID
	Write8(p, 0); //HasStarsFightingInfo
	for (size_t i = 0; i < n; i++)
	{ //StarsFightingInfo
		BYTE* pStarsFightingInfo = p;
		Write16(pStarsFightingInfo, 0); //len

		Write32(pStarsFightingInfo, 0); //Star
		Write32(pStarsFightingInfo, 0); //StarVal
		Write32(pStarsFightingInfo, 0); //StarsFightingStarLevel

		len = pStarsFightingInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasYuLeJiaNianHuaInfo
	for (size_t i = 0; i < n; i++)
	{ //YuLeJiaNianHuaInfo
		BYTE* pYuLeJiaNianHuaInfo = p;
		Write16(pYuLeJiaNianHuaInfo, 0); //len

		Write32(pYuLeJiaNianHuaInfo, 0); //Mode
		Write32(pYuLeJiaNianHuaInfo, 0); //Score
		Write8(pYuLeJiaNianHuaInfo, 0); //RankRangNum
		Write32(pYuLeJiaNianHuaInfo, 0); //RankRange[]
		Write8(pYuLeJiaNianHuaInfo, 0); //RankScoreNum
		Write32(pYuLeJiaNianHuaInfo, 0); //RankScore[]
		Write8(pYuLeJiaNianHuaInfo, 0); //InRecommend
		Write8(pYuLeJiaNianHuaInfo, 0); //InDoubleScore

		len = pYuLeJiaNianHuaInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 104, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGameLogicCommonReport(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT ReportType = Read16(p);
	UCHAR ParaNum = Read8(p);
	UINT ParaList[] = Read32(p);
	UCHAR HasScenePosition = Read8(p);
	for (size_t i = 0; i < n; i++)
	{ //ScenePositionInfo
		BYTE* pScenePositionInfo = p;
		len = Read16(pScenePositionInfo);

		int SceneID = Read32(pScenePositionInfo);
		UCHAR PositionNum = Read8(pScenePositionInfo);
		for (size_t i = 0; i < n; i++)
		{ //Position
			BYTE* pPosition = pScenePositionInfo;
			len = Read16(pPosition);

			UINT Idx = Read32(pPosition);
			int[] Postion[] = Read32(pPosition);

			pScenePositionInfo += len;
		}

		p += len;
	}
	UINT NPCUin = Read32(p);
	UINT DstUin = Read32(p);
	UCHAR OtherPropPosNum = Read8(p);
	for (size_t i = 0; i < n; i++)
	{ //OtherPropPos
		BYTE* pOtherPropPos = p;
		len = Read16(pOtherPropPos);

		UINT Idx = Read32(pOtherPropPos);
		int[] Postion[] = Read32(pOtherPropPos);

		p += len;
	}

}

void ResponseGameLogicCommonReport(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //GameLogicType
	Write16(p, 0); //ReportType
	Write8(p, 0); //ParaNum
	Write32(p, 0); //ParaList[]
	Write32(p, 0); //NPCUin
	Write32(p, 0); //DstUin
	Write8(p, 0); //OtherPropPosNum
	for (size_t i = 0; i < n; i++)
	{ //OtherPropPos
		BYTE* pOtherPropPos = p;
		Write16(pOtherPropPos, 0); //len

		Write32(pOtherPropPos, 0); //Idx
		Write32(pOtherPropPos, 0); //Postion[]

		len = pOtherPropPos - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 636, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyGameBegin(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //NormalLoadTime
	Write32(p, 0); //MapID
	WriteString(p, 0); //MapHash[]
	WriteUn(p, 0); //GameID
	WriteUn(p, 0); //Seed
	Write8(p, 0); //CurrentPlayers
	Write16(p, 0); //RaceTrackOrders[]
	Write16(p, 0); //TotalMapRound
	WriteUn(p, 0); //PropUpdateInterval
	Write32(p, 0); //Record
	Write8(p, 0); //NianShouTypeNum
	for (size_t i = 0; i < n; i++)
	{ //NianShouAwardInfo
		BYTE* pNianShouAwardInfo = p;
		Write16(pNianShouAwardInfo, 0); //len

		Write8(pNianShouAwardInfo, 0); //AwardInGameType
		Write32(pNianShouAwardInfo, 0); //ActIDForClient
		Write8(pNianShouAwardInfo, 0); //PointArrayIdx
		Write8(pNianShouAwardInfo, 0); //CurrAwardNum
		Write8(pNianShouAwardInfo, 0); //AwardPos[]

		len = pNianShouAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //SyncCarNum
	for (size_t i = 0; i < n; i++)
	{ //SyncCar
		BYTE* pSyncCar = p;
		Write16(pSyncCar, 0); //len

		WriteUn(pSyncCar, 0); //PlayerUin
		Write16(pSyncCar, 0); //CurCarID
		Write8(pSyncCar, 0); //HasStoneInfo
		for (size_t i = 0; i < n; i++)
		{ //STKartStoneGrooveInfo
			BYTE* pSTKartStoneGrooveInfo = pSyncCar;
			Write16(pSTKartStoneGrooveInfo, 0); //len

			Write32(pSTKartStoneGrooveInfo, 0); //KartID
			Write32(pSTKartStoneGrooveInfo, 0); //StoneGrooveNum
			for (size_t i = 0; i < n; i++)
			{ //StoneGrooveInfo
				BYTE* pStoneGrooveInfo = pSTKartStoneGrooveInfo;
				Write16(pStoneGrooveInfo, 0); //len

				Write32(pStoneGrooveInfo, 0); //StoneUseOccaType
				Write32(pStoneGrooveInfo, 0); //SkillStoneID

				len = pStoneGrooveInfo - pSTKartStoneGrooveInfo;
				Set16(pSTKartStoneGrooveInfo, (WORD)len);
				pSTKartStoneGrooveInfo += len;
			}

			len = pSTKartStoneGrooveInfo - pSyncCar;
			Set16(pSyncCar, (WORD)len);
			pSyncCar += len;
		}

		len = pSyncCar - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReportDataFlag
	Write8(p, 0); //CheckDataNum
	for (size_t i = 0; i < n; i++)
	{ //MapCheckDiv
		BYTE* pMapCheckDiv = p;
		Write16(pMapCheckDiv, 0); //len

		Write16(pMapCheckDiv, 0); //BeginIdx
		Write16(pMapCheckDiv, 0); //EndIdx

		len = pMapCheckDiv - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //P2PMode
	Write8(p, 0); //TcpFrequence
	Write8(p, 0); //MultiInfoLen
	Write8(p, 0); //FeedBackEnabled
	Write8(p, 0); //SpeedSectionNum
	Write16(p, 0); //SpeedSectionLowerBound[]
	Write8(p, 0); //NormalSpeedSectionNum
	Write16(p, 0); //NormalSpeedSectionLowerBound[]
	Write8(p, 0); //MemCheckInfoNum
	for (size_t i = 0; i < n; i++)
	{ //MemCheckInfo
		BYTE* pMemCheckInfo = p;
		Write16(pMemCheckInfo, 0); //len

		Write8(pMemCheckInfo, 0); //MemIdxNum
		Write32(pMemCheckInfo, 0); //MemOffset[]
		Write8(pMemCheckInfo, 0); //DataType
		WriteU(pMemCheckInfo, 0); //Para

		len = pMemCheckInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ExtraInfoInterval
	Write16(p, 0); //OffsetThreshold
	Write32(p, 0); //SpeedRatioThreshold1
	Write32(p, 0); //SpeedRatioThreshold2
	Write32(p, 0); //HideTaskId
	Write8(p, 0); //HideTaskType
	Write32(p, 0); //HideTaskParam1
	Write8(p, 0); //ForceReportCPNum
	Write16(p, 0); //ForceReportCP[]
	Write8(p, 0); //CliReserveFlag
	Write8(p, 0); //EnableAntiDriftCheat
	for (size_t i = 0; i < n; i++)
	{ //AntiDriftCheatPara
		BYTE* pAntiDriftCheatPara = p;
		Write16(pAntiDriftCheatPara, 0); //len

		WriteU(pAntiDriftCheatPara, 0); //MaxDriftHistoryTime
		WriteU(pAntiDriftCheatPara, 0); //MinTimeInterval
		WriteU(pAntiDriftCheatPara, 0); //MaxTimeInterval
		Write32(pAntiDriftCheatPara, 0); //NormalThreshold
		Write32(pAntiDriftCheatPara, 0); //JetThreshold
		WriteU(pAntiDriftCheatPara, 0); //JetInterval
		WriteU(pAntiDriftCheatPara, 0); //OneSideSlidingInterval

		len = pAntiDriftCheatPara - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasCrashModePara
	for (size_t i = 0; i < n; i++)
	{ //CrashModePara
		BYTE* pCrashModePara = p;
		Write16(pCrashModePara, 0); //len

		Write8(pCrashModePara, 0); //SponsorSkillNum
		for (size_t i = 0; i < n; i++)
		{ //SponsorSkill
			BYTE* pSponsorSkill = pCrashModePara;
			Write16(pSponsorSkill, 0); //len

			Write8(pSponsorSkill, 0); //SkillID
			Write32(pSponsorSkill, 0); //Para1

			len = pSponsorSkill - pCrashModePara;
			Set16(pCrashModePara, (WORD)len);
			pCrashModePara += len;
		}
		Write8(pCrashModePara, 0); //InitEggNum
		Write8(pCrashModePara, 0); //EggRefreshInterval
		Write8(pCrashModePara, 0); //EggRefreshNum
		Write8(pCrashModePara, 0); //InitN2ONum
		Write8(pCrashModePara, 0); //EggSourceIncNum
		Write32(pCrashModePara, 0); //RandSeed
		Write8(pCrashModePara, 0); //PropPointRatio
		Write8(pCrashModePara, 0); //EggPropRatio
		Write8(pCrashModePara, 0); //AddN2ONumOnEggLost

		len = pCrashModePara - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //FizzStarTaskId
	Write8(p, 0); //FizzStarTaskType
	Write32(p, 0); //FizzStarTaskParam1
	Write32(p, 0); //LDMRecordID
	Write32(p, 0); //GameSeq
	Write8(p, 0); //PlayerNums
	for (size_t i = 0; i < n; i++)
	{ //GameBeginPlayerInfo
		BYTE* pGameBeginPlayerInfo = p;
		Write16(pGameBeginPlayerInfo, 0); //len

		Write32(pGameBeginPlayerInfo, 0); //Uin
		Write32(pGameBeginPlayerInfo, 0); //ChumCircleID
		Write8(pGameBeginPlayerInfo, 0); //SkillNums
		for (size_t i = 0; i < n; i++)
		{ //ChumCircleSkillInfo
			BYTE* pChumCircleSkillInfo = pGameBeginPlayerInfo;
			Write16(pChumCircleSkillInfo, 0); //len

			Write32(pChumCircleSkillInfo, 0); //SkillID
			Write32(pChumCircleSkillInfo, 0); //SkillLv

			len = pChumCircleSkillInfo - pGameBeginPlayerInfo;
			Set16(pGameBeginPlayerInfo, (WORD)len);
			pGameBeginPlayerInfo += len;
		}
		Write32(pGameBeginPlayerInfo, 0); //WorldEscapeTaskID
		{ //ProfessionLicenseInfo
			BYTE* pProfessionLicenseInfo = pGameBeginPlayerInfo;
			Write16(pProfessionLicenseInfo, 0); //len

			Write8(pProfessionLicenseInfo, 0); //BigLevel
			Write8(pProfessionLicenseInfo, 0); //SmallLevel

			len = pProfessionLicenseInfo - pGameBeginPlayerInfo;
			Set16(pGameBeginPlayerInfo, (WORD)len);
			pGameBeginPlayerInfo += len;
		}
		Write8(pGameBeginPlayerInfo, 0); //ParaNum
		for (size_t i = 0; i < n; i++)
		{ //EffectGameBuffInfo
			BYTE* pEffectGameBuffInfo = pGameBeginPlayerInfo;
			Write16(pEffectGameBuffInfo, 0); //len

			Write16(pEffectGameBuffInfo, 0); //BuffID
			Write8(pEffectGameBuffInfo, 0); //FeatureID
			Write8(pEffectGameBuffInfo, 0); //BuffLevel
			Write8(pEffectGameBuffInfo, 0); //IsIcon

			len = pEffectGameBuffInfo - pGameBeginPlayerInfo;
			Set16(pGameBeginPlayerInfo, (WORD)len);
			pGameBeginPlayerInfo += len;
		}
		Write32(pGameBeginPlayerInfo, 0); //StarsFightingStar
		Write8(pGameBeginPlayerInfo, 0); //ParaNum
		Write32(pGameBeginPlayerInfo, 0); //ParaList[]

		len = pGameBeginPlayerInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //PlayeCheerNums
	Write(p, 0); //Cheers[]
	WriteUn(p, 0); //uszMapNum
	for (size_t i = 0; i < n; i++)
	{ //ShuttleMapList
		BYTE* pShuttleMapList = p;
		Write16(pShuttleMapList, 0); //len

		Write32(pShuttleMapList, 0); //MapID
		Write16(pShuttleMapList, 0); //BeginIdx
		Write16(pShuttleMapList, 0); //EndIdx
		Write8(pShuttleMapList, 0); //Reverse
		Write16(pShuttleMapList, 0); //BeginCheckPointIdx

		len = pShuttleMapList - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //SpecialMapId
	Write8(p, 0); //NPCNum
	for (size_t i = 0; i < n; i++)
	{ //NPCInfo
		BYTE* pNPCInfo = p;
		Write16(pNPCInfo, 0); //len

		Write32(pNPCInfo, 0); //NpcID
		WriteString(pNPCInfo, 0); //NPCName[]
		WriteString(pNPCInfo, 0); //GuildName[]
		{ //NpcItemInfo
			BYTE* pNpcItemInfo = pNPCInfo;
			Write16(pNpcItemInfo, 0); //len

			Write32(pNpcItemInfo, 0); //RoleID
			Write32(pNpcItemInfo, 0); //HairID
			Write32(pNpcItemInfo, 0); //FaceID
			Write32(pNpcItemInfo, 0); //GlassID
			Write32(pNpcItemInfo, 0); //CoatID
			Write32(pNpcItemInfo, 0); //GloveID
			Write32(pNpcItemInfo, 0); //TrousersID
			Write32(pNpcItemInfo, 0); //PersonarID
			Write32(pNpcItemInfo, 0); //TattooID
			Write32(pNpcItemInfo, 0); //WingID
			Write32(pNpcItemInfo, 0); //DecoratorID
			Write32(pNpcItemInfo, 0); //KartID
			Write32(pNpcItemInfo, 0); //ColorID
			Write32(pNpcItemInfo, 0); //TrackID
			Write32(pNpcItemInfo, 0); //EffectID
			Write32(pNpcItemInfo, 0); //BrandID
			Write32(pNpcItemInfo, 0); //TailID

			len = pNpcItemInfo - pNPCInfo;
			Set16(pNPCInfo, (WORD)len);
			pNPCInfo += len;
		}
		Write32(pNPCInfo, 0); //GpSkillPeriod
		Write32(pNPCInfo, 0); //BaseValue
		{ //DefaultSpeedPara
			BYTE* pDefaultSpeedPara = pNPCInfo;
			Write16(pDefaultSpeedPara, 0); //len

			Write32(pDefaultSpeedPara, 0); //MaxSpeed
			Write32(pDefaultSpeedPara, 0); //MinSpeed
			Write32(pDefaultSpeedPara, 0); //MaxPlusForce
			Write32(pDefaultSpeedPara, 0); //MinPlusForce
			Write32(pDefaultSpeedPara, 0); //MaxTurnSpeed
			Write32(pDefaultSpeedPara, 0); //MinTurnSpeed
			Write32(pDefaultSpeedPara, 0); //MaxDist
			Write32(pDefaultSpeedPara, 0); //MinDist

			len = pDefaultSpeedPara - pNPCInfo;
			Set16(pNPCInfo, (WORD)len);
			pNPCInfo += len;
		}
		Write8(pNPCInfo, 0); //NormalSpeedNum
		for (size_t i = 0; i < n; i++)
		{ //NormalSpeedPara
			BYTE* pNormalSpeedPara = pNPCInfo;
			Write16(pNormalSpeedPara, 0); //len

			Write32(pNormalSpeedPara, 0); //MaxSpeed
			Write32(pNormalSpeedPara, 0); //MinSpeed
			Write32(pNormalSpeedPara, 0); //MaxPlusForce
			Write32(pNormalSpeedPara, 0); //MinPlusForce
			Write32(pNormalSpeedPara, 0); //MaxTurnSpeed
			Write32(pNormalSpeedPara, 0); //MinTurnSpeed
			Write32(pNormalSpeedPara, 0); //MaxDist
			Write32(pNormalSpeedPara, 0); //MinDist

			len = pNormalSpeedPara - pNPCInfo;
			Set16(pNPCInfo, (WORD)len);
			pNPCInfo += len;
		}
		Write8(pNPCInfo, 0); //GpNum
		for (size_t i = 0; i < n; i++)
		{ //GpPara
			BYTE* pGpPara = pNPCInfo;
			Write16(pGpPara, 0); //len

			Write32(pGpPara, 0); //GpID
			Write32(pGpPara, 0); //Probability
			Write32(pGpPara, 0); //MaxDist
			Write32(pGpPara, 0); //MinDist

			len = pGpPara - pNPCInfo;
			Set16(pNPCInfo, (WORD)len);
			pNPCInfo += len;
		}
		Write16(pNPCInfo, 0); //NPCAILevel
		Write16(pNPCInfo, 0); //TeamID

		len = pNPCInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //MapNum
	for (size_t i = 0; i < n; i++)
	{ //MapInfo
		BYTE* pMapInfo = p;
		Write16(pMapInfo, 0); //len

		Write32(pMapInfo, 0); //MapID
		Write8(pMapInfo, 0); //ReportDataFlag
		Write8(pMapInfo, 0); //CheckDataNum
		for (size_t i = 0; i < n; i++)
		{ //MapCheckDiv
			BYTE* pMapCheckDiv = pMapInfo;
			Write16(pMapCheckDiv, 0); //len

			Write16(pMapCheckDiv, 0); //BeginIdx
			Write16(pMapCheckDiv, 0); //EndIdx

			len = pMapCheckDiv - pMapInfo;
			Set16(pMapInfo, (WORD)len);
			pMapInfo += len;
		}
		Write16(pMapInfo, 0); //TotalMapRound

		len = pMapInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //NPCTrackOrders[]
	Write8(p, 0); //PlayerNum
	for (size_t i = 0; i < n; i++)
	{ //AvatarChangeInfo
		BYTE* pAvatarChangeInfo = p;
		Write16(pAvatarChangeInfo, 0); //len

		Write32(pAvatarChangeInfo, 0); //PlayerUin
		Write32(pAvatarChangeInfo, 0); //HairID
		Write32(pAvatarChangeInfo, 0); //CoatID
		Write32(pAvatarChangeInfo, 0); //TrousersID
		Write32(pAvatarChangeInfo, 0); //SuitID
		Write32(pAvatarChangeInfo, 0); //KartID
		Write8(pAvatarChangeInfo, 0); //HasItemInfo
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAvatarChangeInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //RoleID
			Write32(pItemInfo, 0); //HairID
			Write32(pItemInfo, 0); //FaceID
			Write32(pItemInfo, 0); //GlassID
			Write32(pItemInfo, 0); //CoatID
			Write32(pItemInfo, 0); //GloveID
			Write32(pItemInfo, 0); //TrousersID
			Write32(pItemInfo, 0); //PersonarID
			Write32(pItemInfo, 0); //TattooID
			Write32(pItemInfo, 0); //WingID
			Write32(pItemInfo, 0); //DecoratorID
			Write32(pItemInfo, 0); //KartID
			Write32(pItemInfo, 0); //ColorID
			Write32(pItemInfo, 0); //TrackID
			Write32(pItemInfo, 0); //EffectID
			Write32(pItemInfo, 0); //BrandID
			Write32(pItemInfo, 0); //TailID

			len = pItemInfo - pAvatarChangeInfo;
			Set16(pAvatarChangeInfo, (WORD)len);
			pAvatarChangeInfo += len;
		}

		len = pAvatarChangeInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasTowerInfo
	for (size_t i = 0; i < n; i++)
	{ //TowerLevelTask
		BYTE* pTowerLevelTask = p;
		Write16(pTowerLevelTask, 0); //len

		Write32(pTowerLevelTask, 0); //TaskID
		Write8(pTowerLevelTask, 0); //LevelDifficulty
		Write32(pTowerLevelTask, 0); //SpecialFlag
		for (size_t i = 0; i < n; i++)
		{ //JudgeStarCondition
			BYTE* pJudgeStarCondition = pTowerLevelTask;
			Write16(pJudgeStarCondition, 0); //len

			Write32(pJudgeStarCondition, 0); //Type
			Write32(pJudgeStarCondition, 0); //ConditionNum

			len = pJudgeStarCondition - pTowerLevelTask;
			Set16(pTowerLevelTask, (WORD)len);
			pTowerLevelTask += len;
		}
		Write32(pTowerLevelTask, 0); //TrackElementNum
		for (size_t i = 0; i < n; i++)
		{ //TrackElement
			BYTE* pTrackElement = pTowerLevelTask;
			Write16(pTrackElement, 0); //len

			Write8(pTrackElement, 0); //Type
			Write8(pTrackElement, 0); //CheckpointNum
			Write8(pTrackElement, 0); //Checkpoint[]
			Write32(pTrackElement, 0); //CarID
			Write16(pTrackElement, 0); //ReverseTimeLimit
			Write8(pTrackElement, 0); //CoinFrequence
			Write8(pTrackElement, 0); //CoinNumLimit
			Write8(pTrackElement, 0); //ShadowID

			len = pTrackElement - pTowerLevelTask;
			Set16(pTowerLevelTask, (WORD)len);
			pTowerLevelTask += len;
		}

		len = pTowerLevelTask - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasWeRelayGameBeginInfo
	for (size_t i = 0; i < n; i++)
	{ //WeRelayGameBeginInfo
		BYTE* pWeRelayGameBeginInfo = p;
		Write16(pWeRelayGameBeginInfo, 0); //len

		Write32(pWeRelayGameBeginInfo, 0); //PlayerNum
		for (size_t i = 0; i < n; i++)
		{ //WeRelayGameBeginPlayerInfo
			BYTE* pWeRelayGameBeginPlayerInfo = pWeRelayGameBeginInfo;
			Write16(pWeRelayGameBeginPlayerInfo, 0); //len

			Write32(pWeRelayGameBeginPlayerInfo, 0); //Uin
			Write32(pWeRelayGameBeginPlayerInfo, 0); //CarID
			Write32(pWeRelayGameBeginPlayerInfo, 0); //SuperN2O
			Write32(pWeRelayGameBeginPlayerInfo, 0); //Score

			len = pWeRelayGameBeginPlayerInfo - pWeRelayGameBeginInfo;
			Set16(pWeRelayGameBeginInfo, (WORD)len);
			pWeRelayGameBeginInfo += len;
		}
		Write32(pWeRelayGameBeginInfo, 0); //MapID
		Write16(pWeRelayGameBeginInfo, 0); //TotalMapRound
		Write8(pWeRelayGameBeginInfo, 0); //ReportDataFlag
		Write8(pWeRelayGameBeginInfo, 0); //CheckDataNum
		for (size_t i = 0; i < n; i++)
		{ //MapCheckDiv
			BYTE* pMapCheckDiv = pWeRelayGameBeginInfo;
			Write16(pMapCheckDiv, 0); //len

			Write16(pMapCheckDiv, 0); //BeginIdx
			Write16(pMapCheckDiv, 0); //EndIdx

			len = pMapCheckDiv - pWeRelayGameBeginInfo;
			Set16(pWeRelayGameBeginInfo, (WORD)len);
			pWeRelayGameBeginInfo += len;
		}
		Write32(pWeRelayGameBeginInfo, 0); //SuperN2OCoolDownTime
		Write32(pWeRelayGameBeginInfo, 0); //Dis2No1ToFinishRace

		len = pWeRelayGameBeginInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ChangeCar
	Write32(p, 0); //GameSeqIDHigh
	Write32(p, 0); //GameSeqIDLow
	Write32(p, 0); //KubiBigCoinReplaceItem
	Write32(p, 0); //TimerChallengeJumpLevel
	Write8(p, 0); //ShadowRunDelay
	Write16(p, 0); //ShadowCatchUpContinuesTime
	Write8(p, 0); //ArrestPlayerNums
	for (size_t i = 0; i < n; i++)
	{ //ArrestRoleInfo
		BYTE* pArrestRoleInfo = p;
		Write16(pArrestRoleInfo, 0); //len

		Write32(pArrestRoleInfo, 0); //Uin
		Write8(pArrestRoleInfo, 0); //TeamID

		len = pArrestRoleInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //MonitorCheckPointBegin
	Write16(p, 0); //MonitorCheckPointEnd
	Write8(p, 0); //MonitorLapCnt
	Write8(p, 0); //GameType
	Write8(p, 0); //PointID
	Write16(p, 0); //BaseMode
	Write16(p, 0); //SubMode
	Write8(p, 0); //GameType
	Write16(p, 0); //ReportPosSpan
	Write16(p, 0); //PropID
	Write32(p, 0); //PropIndex
	Write16(p, 0); //PropNum
	Write8(p, 0); //BaseGameModeEx
	Write8(p, 0); //ParaNum
	Write32(p, 0); //ParaList[]
	Write8(p, 0); //MapCheckpointFileIndex
	Write8(p, 0); //HasTimerChallenge2ndGameBeginInfo
	for (size_t i = 0; i < n; i++)
	{ //TimerChallenge2ndGameBeginInfo
		BYTE* pTimerChallenge2ndGameBeginInfo = p;
		Write16(pTimerChallenge2ndGameBeginInfo, 0); //len

		{ //JumpInfo
			BYTE* pJumpInfo = pTimerChallenge2ndGameBeginInfo;
			Write16(pJumpInfo, 0); //len

			Write32(pJumpInfo, 0); //PlayerNum
			for (size_t i = 0; i < n; i++)
			{ //PlayerJumpInfo
				BYTE* pPlayerJumpInfo = pJumpInfo;
				Write16(pPlayerJumpInfo, 0); //len

				Write32(pPlayerJumpInfo, 0); //Uin
				Write32(pPlayerJumpInfo, 0); //Jumplevel
				Write32(pPlayerJumpInfo, 0); //WeekHighestTongGuanNum
				Write32(pPlayerJumpInfo, 0); //BonusJumplevel
				Write32(pPlayerJumpInfo, 0); //HistoryMaxTongGuanNum

				len = pPlayerJumpInfo - pJumpInfo;
				Set16(pJumpInfo, (WORD)len);
				pJumpInfo += len;
			}
			Write32(pJumpInfo, 0); //JumpLevel

			len = pJumpInfo - pTimerChallenge2ndGameBeginInfo;
			Set16(pTimerChallenge2ndGameBeginInfo, (WORD)len);
			pTimerChallenge2ndGameBeginInfo += len;
		}
		Write32(pTimerChallenge2ndGameBeginInfo, 0); //BeginUin
		Write8(pTimerChallenge2ndGameBeginInfo, 0); //Reverse

		len = pTimerChallenge2ndGameBeginInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasGameStageInfo
	for (size_t i = 0; i < n; i++)
	{ //GameStageInfo
		BYTE* pGameStageInfo = p;
		Write16(pGameStageInfo, 0); //len

		Write8(pGameStageInfo, 0); //StageIndex
		Write8(pGameStageInfo, 0); //TotalStageNum

		len = pGameStageInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //CarCollectInfoNum
	for (size_t i = 0; i < n; i++)
	{ //CarCollectInfo
		BYTE* pCarCollectInfo = p;
		Write16(pCarCollectInfo, 0); //len

		Write16(pCarCollectInfo, 0); //PlayerNum
		for (size_t i = 0; i < n; i++)
		{ //CarCollectInfo
			BYTE* pCarCollectInfo = pCarCollectInfo;
			Write16(pCarCollectInfo, 0); //len

			Write32(pCarCollectInfo, 0); //Uin
			Write32(pCarCollectInfo, 0); //CarCollectCarID
			Write32(pCarCollectInfo, 0); //CarCollectTaskID

			len = pCarCollectInfo - pCarCollectInfo;
			Set16(pCarCollectInfo, (WORD)len);
			pCarCollectInfo += len;
		}

		len = pCarCollectInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //ReportAntiCollisionDataTime
	Write32(p, 0); //Duration
	Write32(p, 0); //BeginCDTime
	Write32(p, 0); //PropInteval
	Write32(p, 0); //MoveFreq
	Write8(p, 0); //HaveGameLogicTask
	for (size_t i = 0; i < n; i++)
	{ //RakedMatchGamelogicTaskInfo
		BYTE* pRakedMatchGamelogicTaskInfo = p;
		Write16(pRakedMatchGamelogicTaskInfo, 0); //len

		Write32(pRakedMatchGamelogicTaskInfo, 0); //GameLogicTaskType
		Write32(pRakedMatchGamelogicTaskInfo, 0); //TaskFinishCondValue
		Write8(pRakedMatchGamelogicTaskInfo, 0); //JudgeRule
		Write32(pRakedMatchGamelogicTaskInfo, 0); //TaskAddGradeScore
		Write8(pRakedMatchGamelogicTaskInfo, 0); //GradeScoreRangeNum
		Write32(pRakedMatchGamelogicTaskInfo, 0); //GradeScoreRange[]
		Write8(pRakedMatchGamelogicTaskInfo, 0); //TaskFinishCondValueNum
		Write32(pRakedMatchGamelogicTaskInfo, 0); //TaskFinishCondValueRange[]
		Write8(pRakedMatchGamelogicTaskInfo, 0); //TaskAddGradeScoreNum
		Write32(pRakedMatchGamelogicTaskInfo, 0); //TaskAddGradeScoreRange[]
		Write8(pRakedMatchGamelogicTaskInfo, 0); //FailedAddGradeScoreNum
		Write32(pRakedMatchGamelogicTaskInfo, 0); //FailedAddGradeScoreRange[]
		Write8(pRakedMatchGamelogicTaskInfo, 0); //FinishTask
		Write32(pRakedMatchGamelogicTaskInfo, 0); //ExtraFinishTaskAddScore

		len = pRakedMatchGamelogicTaskInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //RankedMatchBegainTipInfoType
	Write8(p, 0); //BegainTipLen
	Write8(p, 0); //BuffBum
	for (size_t i = 0; i < n; i++)
	{ //EffectBuffInfo
		BYTE* pEffectBuffInfo = p;
		Write16(pEffectBuffInfo, 0); //len

		Write16(pEffectBuffInfo, 0); //BuffID
		Write8(pEffectBuffInfo, 0); //FeatureID
		Write8(pEffectBuffInfo, 0); //BuffLevel
		Write8(pEffectBuffInfo, 0); //IsIcon

		len = pEffectBuffInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //MapChallengeInfoNum
	for (size_t i = 0; i < n; i++)
	{ //MapChallengeInfo
		BYTE* pMapChallengeInfo = p;
		Write16(pMapChallengeInfo, 0); //len

		Write8(pMapChallengeInfo, 0); //StarInfoNum
		for (size_t i = 0; i < n; i++)
		{ //MapChallengeStarInfo
			BYTE* pMapChallengeStarInfo = pMapChallengeInfo;
			Write16(pMapChallengeStarInfo, 0); //len

			Write32(pMapChallengeStarInfo, 0); //Time
			Write8(pMapChallengeStarInfo, 0); //Status

			len = pMapChallengeStarInfo - pMapChallengeInfo;
			Set16(pMapChallengeInfo, (WORD)len);
			pMapChallengeInfo += len;
		}
		{ //AssessInfo
			BYTE* pAssessInfo = pMapChallengeInfo;
			Write16(pAssessInfo, 0); //len

			{ //MapChallenge_AssessInfo
				BYTE* pMapChallenge_AssessInfo = pAssessInfo;
				Write16(pMapChallenge_AssessInfo, 0); //len

				Write8(pMapChallenge_AssessInfo, 0); //Type
				Write16(pMapChallenge_AssessInfo, 0); //Count

				len = pMapChallenge_AssessInfo - pAssessInfo;
				Set16(pAssessInfo, (WORD)len);
				pAssessInfo += len;
			}
			Write8(pAssessInfo, 0); //Status
			Write16(pAssessInfo, 0); //MsgLen

			len = pAssessInfo - pMapChallengeInfo;
			Set16(pMapChallengeInfo, (WORD)len);
			pMapChallengeInfo += len;
		}
		Write32(pMapChallengeInfo, 0); //MapID

		len = pMapChallengeInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //IsChangeCar
	Write8(p, 0); //AnonymousMode
	for (size_t i = 0; i < n; i++)
	{ //AnonymousModeAvatarChangeInfo
		BYTE* pAnonymousModeAvatarChangeInfo = p;
		Write16(pAnonymousModeAvatarChangeInfo, 0); //len

		Write32(pAnonymousModeAvatarChangeInfo, 0); //PlayerUin
		Write32(pAnonymousModeAvatarChangeInfo, 0); //HairID
		Write32(pAnonymousModeAvatarChangeInfo, 0); //CoatID
		Write32(pAnonymousModeAvatarChangeInfo, 0); //TrousersID
		Write32(pAnonymousModeAvatarChangeInfo, 0); //SuitID
		Write32(pAnonymousModeAvatarChangeInfo, 0); //KartID
		Write8(pAnonymousModeAvatarChangeInfo, 0); //HasItemInfo
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAnonymousModeAvatarChangeInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //RoleID
			Write32(pItemInfo, 0); //HairID
			Write32(pItemInfo, 0); //FaceID
			Write32(pItemInfo, 0); //GlassID
			Write32(pItemInfo, 0); //CoatID
			Write32(pItemInfo, 0); //GloveID
			Write32(pItemInfo, 0); //TrousersID
			Write32(pItemInfo, 0); //PersonarID
			Write32(pItemInfo, 0); //TattooID
			Write32(pItemInfo, 0); //WingID
			Write32(pItemInfo, 0); //DecoratorID
			Write32(pItemInfo, 0); //KartID
			Write32(pItemInfo, 0); //ColorID
			Write32(pItemInfo, 0); //TrackID
			Write32(pItemInfo, 0); //EffectID
			Write32(pItemInfo, 0); //BrandID
			Write32(pItemInfo, 0); //TailID

			len = pItemInfo - pAnonymousModeAvatarChangeInfo;
			Set16(pAnonymousModeAvatarChangeInfo, (WORD)len);
			pAnonymousModeAvatarChangeInfo += len;
		}

		len = pAnonymousModeAvatarChangeInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //IsTimeShuttleGen
	Write8(p, 0); //HalloweenDdventureInfoNum
	for (size_t i = 0; i < n; i++)
	{ //HalloweenDdventureInfo
		BYTE* pHalloweenDdventureInfo = p;
		Write16(pHalloweenDdventureInfo, 0); //len

		Write16(pHalloweenDdventureInfo, 0); //PlayerNum
		for (size_t i = 0; i < n; i++)
		{ //CarCollectInfo
			BYTE* pCarCollectInfo = pHalloweenDdventureInfo;
			Write16(pCarCollectInfo, 0); //len

			Write32(pCarCollectInfo, 0); //Uin
			Write32(pCarCollectInfo, 0); //CarCollectCarID
			Write32(pCarCollectInfo, 0); //CarCollectTaskID

			len = pCarCollectInfo - pHalloweenDdventureInfo;
			Set16(pHalloweenDdventureInfo, (WORD)len);
			pHalloweenDdventureInfo += len;
		}

		len = pHalloweenDdventureInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //MaxPropEffectNum
	Write8(p, 0); //IsCrossNoCollision
	Write8(p, 0); //RecordCheckCondNum
	for (size_t i = 0; i < n; i++)
	{ //RecordCheckConds
		BYTE* pRecordCheckConds = p;
		Write16(pRecordCheckConds, 0); //len

		Write16(pRecordCheckConds, 0); //CheckRelation
		Write8(pRecordCheckConds, 0); //ConditionNum
		for (size_t i = 0; i < n; i++)
		{ //CheckConditions
			BYTE* pCheckConditions = pRecordCheckConds;
			Write16(pCheckConditions, 0); //len

			Write16(pCheckConditions, 0); //CheckType
			Write8(pCheckConditions, 0); //CheckParaNum
			Write(pCheckConditions, 0); //IntParas[]

			len = pCheckConditions - pRecordCheckConds;
			Set16(pRecordCheckConds, (WORD)len);
			pRecordCheckConds += len;
		}

		len = pRecordCheckConds - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //GameBeginSwitchFlag
	Write8(p, 0); //TriggerVeggieDogTask
	Write8(p, 0); //HasQSpeedCrystalInfo
	for (size_t i = 0; i < n; i++)
	{ //QSpeedCrystalInfo
		BYTE* pQSpeedCrystalInfo = p;
		Write16(pQSpeedCrystalInfo, 0); //len

		Write32(pQSpeedCrystalInfo, 0); //QSpeedCrystalID
		Write32(pQSpeedCrystalInfo, 0); //QSpeedCrystalLevel
		Write8(pQSpeedCrystalInfo, 0); //QSpeedCrystalBuffBum
		for (size_t i = 0; i < n; i++)
		{ //QSpeedCrystalEffectBuffInfo
			BYTE* pQSpeedCrystalEffectBuffInfo = pQSpeedCrystalInfo;
			Write16(pQSpeedCrystalEffectBuffInfo, 0); //len

			Write16(pQSpeedCrystalEffectBuffInfo, 0); //BuffID
			Write8(pQSpeedCrystalEffectBuffInfo, 0); //FeatureID
			Write8(pQSpeedCrystalEffectBuffInfo, 0); //BuffLevel
			Write8(pQSpeedCrystalEffectBuffInfo, 0); //IsIcon

			len = pQSpeedCrystalEffectBuffInfo - pQSpeedCrystalInfo;
			Set16(pQSpeedCrystalInfo, (WORD)len);
			pQSpeedCrystalInfo += len;
		}

		len = pQSpeedCrystalInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 509, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyStageBegin(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //SyncCarNum
	for (size_t i = 0; i < n; i++)
	{ //SyncCar
		BYTE* pSyncCar = p;
		Write16(pSyncCar, 0); //len

		WriteUn(pSyncCar, 0); //PlayerUin
		Write16(pSyncCar, 0); //CurCarID
		Write8(pSyncCar, 0); //HasStoneInfo
		for (size_t i = 0; i < n; i++)
		{ //STKartStoneGrooveInfo
			BYTE* pSTKartStoneGrooveInfo = pSyncCar;
			Write16(pSTKartStoneGrooveInfo, 0); //len

			Write32(pSTKartStoneGrooveInfo, 0); //KartID
			Write32(pSTKartStoneGrooveInfo, 0); //StoneGrooveNum
			for (size_t i = 0; i < n; i++)
			{ //StoneGrooveInfo
				BYTE* pStoneGrooveInfo = pSTKartStoneGrooveInfo;
				Write16(pStoneGrooveInfo, 0); //len

				Write32(pStoneGrooveInfo, 0); //StoneUseOccaType
				Write32(pStoneGrooveInfo, 0); //SkillStoneID

				len = pStoneGrooveInfo - pSTKartStoneGrooveInfo;
				Set16(pSTKartStoneGrooveInfo, (WORD)len);
				pSTKartStoneGrooveInfo += len;
			}

			len = pSTKartStoneGrooveInfo - pSyncCar;
			Set16(pSyncCar, (WORD)len);
			pSyncCar += len;
		}

		len = pSyncCar - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //StageIndex
	Write8(p, 0); //NPCNum
	for (size_t i = 0; i < n; i++)
	{ //StageNPCInfo
		BYTE* pStageNPCInfo = p;
		Write16(pStageNPCInfo, 0); //len

		Write32(pStageNPCInfo, 0); //NpcID
		Write16(pStageNPCInfo, 0); //NPCAILevel

		len = pStageNPCInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //NPCTrackOrders[]
	WriteUn(p, 0); //StageLoadTime
	Write8(p, 0); //HasWeRelayGameBeginInfo
	for (size_t i = 0; i < n; i++)
	{ //WeRelayGameBeginInfo
		BYTE* pWeRelayGameBeginInfo = p;
		Write16(pWeRelayGameBeginInfo, 0); //len

		Write32(pWeRelayGameBeginInfo, 0); //PlayerNum
		for (size_t i = 0; i < n; i++)
		{ //WeRelayGameBeginPlayerInfo
			BYTE* pWeRelayGameBeginPlayerInfo = pWeRelayGameBeginInfo;
			Write16(pWeRelayGameBeginPlayerInfo, 0); //len

			Write32(pWeRelayGameBeginPlayerInfo, 0); //Uin
			Write32(pWeRelayGameBeginPlayerInfo, 0); //CarID
			Write32(pWeRelayGameBeginPlayerInfo, 0); //SuperN2O
			Write32(pWeRelayGameBeginPlayerInfo, 0); //Score

			len = pWeRelayGameBeginPlayerInfo - pWeRelayGameBeginInfo;
			Set16(pWeRelayGameBeginInfo, (WORD)len);
			pWeRelayGameBeginInfo += len;
		}
		Write32(pWeRelayGameBeginInfo, 0); //MapID
		Write16(pWeRelayGameBeginInfo, 0); //TotalMapRound
		Write8(pWeRelayGameBeginInfo, 0); //ReportDataFlag
		Write8(pWeRelayGameBeginInfo, 0); //CheckDataNum
		for (size_t i = 0; i < n; i++)
		{ //MapCheckDiv
			BYTE* pMapCheckDiv = pWeRelayGameBeginInfo;
			Write16(pMapCheckDiv, 0); //len

			Write16(pMapCheckDiv, 0); //BeginIdx
			Write16(pMapCheckDiv, 0); //EndIdx

			len = pMapCheckDiv - pWeRelayGameBeginInfo;
			Set16(pWeRelayGameBeginInfo, (WORD)len);
			pWeRelayGameBeginInfo += len;
		}
		Write32(pWeRelayGameBeginInfo, 0); //SuperN2OCoolDownTime
		Write32(pWeRelayGameBeginInfo, 0); //Dis2No1ToFinishRace

		len = pWeRelayGameBeginInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 787, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetRallyMatchActiveAward(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR AwardIdx = Read8(p);

}

void ResponseGetRallyMatchActiveAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	{ //Award
		BYTE* pAward = p;
		Write16(pAward, 0); //len

		Write32(pAward, 0); //Exp
		Write32(pAward, 0); //Money
		Write32(pAward, 0); //SuperMoney
		Write16(pAward, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAward;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write32(pAward, 0); //Coupons
		Write32(pAward, 0); //GuildPoint
		Write32(pAward, 0); //LuckMoney
		Write8(pAward, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAward;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write32(pAward, 0); //SpeedCoin

		len = pAward - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //AwardIdx

	len = p - buf;
	SendToClient(Client, 24398, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestReceiveFreeCard(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseReceiveFreeCardPara(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write8(p, 0); //MemberNum
	for (size_t i = 0; i < n; i++)
	{ //PlayerList
		BYTE* pPlayerList = p;
		Write16(pPlayerList, 0); //len

		Write32(pPlayerList, 0); //Uin
		WriteString(pPlayerList, 0); //NickName[]

		len = pPlayerList - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestSendFreeCard(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT DstUin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseSendFreeCard(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //DstUin
	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 24400, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifySelfRallyMatchRankChangeNum(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //PrevRank
	Write32(p, 0); //CurrRank
	Write32(p, 0); //ChangeNum
	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 24404, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifySendFreeCard(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //FriendUin
	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 24405, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestSkatePropRoomZan(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseSkatePropRoomZan(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write8(p, 0); //StatusLeft

	len = p - buf;
	SendToClient(Client, 24412, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifySkatePropRoomZanInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //UinSrc
	Write32(p, 0); //ScoreNew
	Write32(p, 0); //ScoreAdd

	len = p - buf;
	SendToClient(Client, 24413, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifySkatePropRoomZanStatus(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //StatusLeft

	len = p - buf;
	SendToClient(Client, 24414, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifySkatePropCoinChangeInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //Type
	Write16(p, 0); //ResultID
	Write32(p, 0); //UinSrc
	Write32(p, 0); //CoinSrc
	Write32(p, 0); //UinDst
	Write32(p, 0); //CoinDst
	Write32(p, 0); //CoinChanged
	Write16(p, 0); //PropID

	len = p - buf;
	SendToClient(Client, 24415, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyScoreBoxCfg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //Type
	Write8(p, 0); //Filter
	Write32(p, 0); //ItemID
	Write32(p, 0); //BoxAwardNum
	for (size_t i = 0; i < n; i++)
	{ //ActiveAwardToClient
		BYTE* pActiveAwardToClient = p;
		Write16(pActiveAwardToClient, 0); //len

		Write8(pActiveAwardToClient, 0); //AwardIdx
		Write32(pActiveAwardToClient, 0); //BoxID
		Write32(pActiveAwardToClient, 0); //Limit
		{ //Award
			BYTE* pAward = pActiveAwardToClient;
			Write16(pAward, 0); //len

			Write32(pAward, 0); //Exp
			Write32(pAward, 0); //Money
			Write32(pAward, 0); //SuperMoney
			Write16(pAward, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAward;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAward;
				Set16(pAward, (WORD)len);
				pAward += len;
			}
			Write32(pAward, 0); //Coupons
			Write32(pAward, 0); //GuildPoint
			Write32(pAward, 0); //LuckMoney
			Write8(pAward, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAward;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAward;
				Set16(pAward, (WORD)len);
				pAward += len;
			}
			Write32(pAward, 0); //SpeedCoin

			len = pAward - pActiveAwardToClient;
			Set16(pActiveAwardToClient, (WORD)len);
			pActiveAwardToClient += len;
		}

		len = pActiveAwardToClient - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24423, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestScoreBoxStatus(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR Type = Read8(p);

}

void ResponseScoreBoxStatus(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //Type
	Write32(p, 0); //Uin
	Write32(p, 0); //CurrentValue
	Write8(p, 0); //HasAward
	for (size_t i = 0; i < n; i++)
	{ //BoxAwardStatus
		BYTE* pBoxAwardStatus = p;
		Write16(pBoxAwardStatus, 0); //len

		Write8(pBoxAwardStatus, 0); //AwardIdx
		Write32(pBoxAwardStatus, 0); //Status

		len = pBoxAwardStatus - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24424, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetScoreBoxAward(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR AwardIdx = Read8(p);

}

void ResponseGetScoreBoxAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	{ //Award
		BYTE* pAward = p;
		Write16(pAward, 0); //len

		Write32(pAward, 0); //Exp
		Write32(pAward, 0); //Money
		Write32(pAward, 0); //SuperMoney
		Write16(pAward, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAward;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write32(pAward, 0); //Coupons
		Write32(pAward, 0); //GuildPoint
		Write32(pAward, 0); //LuckMoney
		Write8(pAward, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAward;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write32(pAward, 0); //SpeedCoin

		len = pAward - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //AwardIdx

	len = p - buf;
	SendToClient(Client, 24425, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetNewHandCritBoxAwardCfg(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int ItemID = Read32(p);

}

void ResponseGetNewHandCritBoxAwardCfg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultId
	Write32(p, 0); //Uin
	Write16(p, 0); //ItemNum
	for (size_t i = 0; i < n; i++)
	{ //LottoryAwardItem
		BYTE* pLottoryAwardItem = p;
		Write16(pLottoryAwardItem, 0); //len

		Write32(pLottoryAwardItem, 0); //ItemID
		Write32(pLottoryAwardItem, 0); //Num
		Write32(pLottoryAwardItem, 0); //Period
		Write16(pLottoryAwardItem, 0); //ItemType

		len = pLottoryAwardItem - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //MultiExtraAwardItem
		BYTE* pMultiExtraAwardItem = p;
		Write16(pMultiExtraAwardItem, 0); //len

		Write32(pMultiExtraAwardItem, 0); //ItemID
		Write32(pMultiExtraAwardItem, 0); //Num
		Write32(pMultiExtraAwardItem, 0); //Period
		Write16(pMultiExtraAwardItem, 0); //ItemType

		len = pMultiExtraAwardItem - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //LuckValue
	Write32(p, 0); //MaxLuckValue
	Write32(p, 0); //ItemID

	len = p - buf;
	SendToClient(Client, 313, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyItemType2ndCfg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	{ //ItemType2ndCfg
		BYTE* pItemType2ndCfg = p;
		Write16(pItemType2ndCfg, 0); //len

		Write32(pItemType2ndCfg, 0); //Num
		for (size_t i = 0; i < n; i++)
		{ //Info
			BYTE* pInfo = pItemType2ndCfg;
			Write16(pInfo, 0); //len

			Write32(pInfo, 0); //ItemID
			Write32(pInfo, 0); //Itemtype2nd

			len = pInfo - pItemType2ndCfg;
			Set16(pItemType2ndCfg, (WORD)len);
			pItemType2ndCfg += len;
		}

		len = pItemType2ndCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 314, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyClientMatchGroupInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //PlayerNum
	for (size_t i = 0; i < n; i++)
	{ //GroupInfo
		BYTE* pGroupInfo = p;
		Write16(pGroupInfo, 0); //len

		Write32(pGroupInfo, 0); //Uin
		WriteString(pGroupInfo, 0); //GroupName[]

		len = pGroupInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 690, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetChatTopList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int ChatAreaId = Read32(p);
	USHORT ID = Read16(p);

}

void ResponseGetChatTopList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write32(p, 0); //ChatAreaId
	Write16(p, 0); //ID
	Write16(p, 0); //Count
	for (size_t i = 0; i < n; i++)
	{ //Items
		BYTE* pItems = p;
		Write16(pItems, 0); //len

		Write32(pItems, 0); //Uin
		Write32(pItems, 0); //Value

		len = pItems - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 386, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetChatAreaWinnerList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	char ChatAreaNum = Read8(p);
	int[] ChatAreaId[] = Read32(p);

}

void ResponseGetChatAreaWinnerList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write8(p, 0); //ChatAreaNum
	for (size_t i = 0; i < n; i++)
	{ //LastChatAreaWinnerInfo
		BYTE* pLastChatAreaWinnerInfo = p;
		Write16(pLastChatAreaWinnerInfo, 0); //len

		Write32(pLastChatAreaWinnerInfo, 0); //ChatAreaId
		Write8(pLastChatAreaWinnerInfo, 0); //HasWinner
		Write32(pLastChatAreaWinnerInfo, 0); //Uin[]

		len = pLastChatAreaWinnerInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 387, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestBeginSailTreasure(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int Type = Read32(p);

}

void ResponseBeginSailTreasure(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write32(p, 0); //Type
	{ //SailTreasureBeginInfo
		BYTE* pSailTreasureBeginInfo = p;
		Write16(pSailTreasureBeginInfo, 0); //len

		Write32(pSailTreasureBeginInfo, 0); //AwardCount
		Write32(pSailTreasureBeginInfo, 0); //PlayerBornPosition
		Write32(pSailTreasureBeginInfo, 0); //GenerateTreasurePosNum
		for (size_t i = 0; i < n; i++)
		{ //TreasureBoxIDAndPossition
			BYTE* pTreasureBoxIDAndPossition = pSailTreasureBeginInfo;
			Write16(pTreasureBoxIDAndPossition, 0); //len

			Write32(pTreasureBoxIDAndPossition, 0); //BoxID
			Write32(pTreasureBoxIDAndPossition, 0); //Position
			Write8(pTreasureBoxIDAndPossition, 0); //HasGot
			Write32(pTreasureBoxIDAndPossition, 0); //Echo

			len = pTreasureBoxIDAndPossition - pSailTreasureBeginInfo;
			Set16(pSailTreasureBeginInfo, (WORD)len);
			pSailTreasureBeginInfo += len;
		}

		len = pSailTreasureBeginInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //SailTreasureTimeGap

	len = p - buf;
	SendToClient(Client, 389, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifySailTreasureBegin(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //Type
	{ //SailTreasureBeginInfo
		BYTE* pSailTreasureBeginInfo = p;
		Write16(pSailTreasureBeginInfo, 0); //len

		Write32(pSailTreasureBeginInfo, 0); //AwardCount
		Write32(pSailTreasureBeginInfo, 0); //PlayerBornPosition
		Write32(pSailTreasureBeginInfo, 0); //GenerateTreasurePosNum
		for (size_t i = 0; i < n; i++)
		{ //TreasureBoxIDAndPossition
			BYTE* pTreasureBoxIDAndPossition = pSailTreasureBeginInfo;
			Write16(pTreasureBoxIDAndPossition, 0); //len

			Write32(pTreasureBoxIDAndPossition, 0); //BoxID
			Write32(pTreasureBoxIDAndPossition, 0); //Position
			Write8(pTreasureBoxIDAndPossition, 0); //HasGot
			Write32(pTreasureBoxIDAndPossition, 0); //Echo

			len = pTreasureBoxIDAndPossition - pSailTreasureBeginInfo;
			Set16(pSailTreasureBeginInfo, (WORD)len);
			pSailTreasureBeginInfo += len;
		}

		len = pSailTreasureBeginInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 390, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetSailTreasureBox(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int BoxID = Read32(p);
	int Position = Read32(p);
	UINT Echo = Read32(p);

}

void ResponseGetSailTreasureBox(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write32(p, 0); //BoxID
	Write8(p, 0); //HasLuckyBoxID
	Write32(p, 0); //LuckyBoxID[]

	len = p - buf;
	SendToClient(Client, 391, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifySailTreasureOver(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write8(p, 0); //Type

	len = p - buf;
	SendToClient(Client, 392, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestOverSailTreasure(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseOverSailTreasure(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin

	len = p - buf;
	SendToClient(Client, 395, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestSailTreasureReceiveAward(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT AwardIndex = Read32(p);

}

void ResponseSailTreasureReceiveAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write32(p, 0); //AwardIndex
	{ //AwardToClient
		BYTE* pAwardToClient = p;
		Write16(pAwardToClient, 0); //len

		Write32(pAwardToClient, 0); //Exp
		Write32(pAwardToClient, 0); //Money
		Write32(pAwardToClient, 0); //SuperMoney
		Write16(pAwardToClient, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAwardToClient;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAwardToClient;
			Set16(pAwardToClient, (WORD)len);
			pAwardToClient += len;
		}
		Write32(pAwardToClient, 0); //Coupons
		Write32(pAwardToClient, 0); //GuildPoint
		Write32(pAwardToClient, 0); //LuckMoney
		Write8(pAwardToClient, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAwardToClient;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAwardToClient;
			Set16(pAwardToClient, (WORD)len);
			pAwardToClient += len;
		}
		Write32(pAwardToClient, 0); //SpeedCoin

		len = pAwardToClient - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 393, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestSailTreasureWorship(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseSailTreasureWorship(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write32(p, 0); //LeftWorshipTimesDaily
	{ //AwardToClient
		BYTE* pAwardToClient = p;
		Write16(pAwardToClient, 0); //len

		Write32(pAwardToClient, 0); //Exp
		Write32(pAwardToClient, 0); //Money
		Write32(pAwardToClient, 0); //SuperMoney
		Write16(pAwardToClient, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAwardToClient;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAwardToClient;
			Set16(pAwardToClient, (WORD)len);
			pAwardToClient += len;
		}
		Write32(pAwardToClient, 0); //Coupons
		Write32(pAwardToClient, 0); //GuildPoint
		Write32(pAwardToClient, 0); //LuckMoney
		Write8(pAwardToClient, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAwardToClient;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAwardToClient;
			Set16(pAwardToClient, (WORD)len);
			pAwardToClient += len;
		}
		Write32(pAwardToClient, 0); //SpeedCoin

		len = pAwardToClient - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 394, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetAwardGenerateAwardList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int AwardIdNum = Read32(p);
	int[] AwardGenerateId[] = Read32(p);

}

void ResponseGetAwardGenerateAwardList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write32(p, 0); //AwardIdNum
	for (size_t i = 0; i < n; i++)
	{ //AwardToClientAndId
		BYTE* pAwardToClientAndId = p;
		Write16(pAwardToClientAndId, 0); //len

		Write32(pAwardToClientAndId, 0); //AwardGenerateId
		{ //AwardToClient
			BYTE* pAwardToClient = pAwardToClientAndId;
			Write16(pAwardToClient, 0); //len

			Write32(pAwardToClient, 0); //Exp
			Write32(pAwardToClient, 0); //Money
			Write32(pAwardToClient, 0); //SuperMoney
			Write16(pAwardToClient, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAwardToClient;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAwardToClient;
				Set16(pAwardToClient, (WORD)len);
				pAwardToClient += len;
			}
			Write32(pAwardToClient, 0); //Coupons
			Write32(pAwardToClient, 0); //GuildPoint
			Write32(pAwardToClient, 0); //LuckMoney
			Write8(pAwardToClient, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAwardToClient;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAwardToClient;
				Set16(pAwardToClient, (WORD)len);
				pAwardToClient += len;
			}
			Write32(pAwardToClient, 0); //SpeedCoin

			len = pAwardToClient - pAwardToClientAndId;
			Set16(pAwardToClientAndId, (WORD)len);
			pAwardToClientAndId += len;
		}

		len = pAwardToClientAndId - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 397, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifySailTreasureCfg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	{ //SailTreasureCfg
		BYTE* pSailTreasureCfg = p;
		Write16(pSailTreasureCfg, 0); //len

		for (size_t i = 0; i < n; i++)
		{ //STSailLevelCfg
			BYTE* pSTSailLevelCfg = pSailTreasureCfg;
			Write16(pSTSailLevelCfg, 0); //len

			Write32(pSTSailLevelCfg, 0); //Level
			Write32(pSTSailLevelCfg, 0); //SailCountPerDay
			Write32(pSTSailLevelCfg, 0); //WorshipCountPerDay

			len = pSTSailLevelCfg - pSailTreasureCfg;
			Set16(pSailTreasureCfg, (WORD)len);
			pSailTreasureCfg += len;
		}
		for (size_t i = 0; i < n; i++)
		{ //BoatAndTreasureCfg
			BYTE* pBoatAndTreasureCfg = pSailTreasureCfg;
			Write16(pBoatAndTreasureCfg, 0); //len

			Write32(pBoatAndTreasureCfg, 0); //BoatID
			Write32(pBoatAndTreasureCfg, 0); //LowTreasureBoxNumPerSail
			Write32(pBoatAndTreasureCfg, 0); //HighTreasureBoxNumPerSail
			WriteUn(pBoatAndTreasureCfg, 0); //BoxTypeNum
			for (size_t i = 0; i < n; i++)
			{ //TreasureBoxIDAndProbability
				BYTE* pTreasureBoxIDAndProbability = pBoatAndTreasureCfg;
				Write16(pTreasureBoxIDAndProbability, 0); //len

				Write32(pTreasureBoxIDAndProbability, 0); //BoxID
				Write32(pTreasureBoxIDAndProbability, 0); //Probability

				len = pTreasureBoxIDAndProbability - pBoatAndTreasureCfg;
				Set16(pBoatAndTreasureCfg, (WORD)len);
				pBoatAndTreasureCfg += len;
			}

			len = pBoatAndTreasureCfg - pSailTreasureCfg;
			Set16(pSailTreasureCfg, (WORD)len);
			pSailTreasureCfg += len;
		}
		Write32(pSailTreasureCfg, 0); //TotalPLayerBornPosNum
		Write32(pSailTreasureCfg, 0); //TotalTreasurePosNum
		Write32(pSailTreasureCfg, 0); //GenerateTreasurePosNum
		Write32(pSailTreasureCfg, 0); //SailTreasureTimeGap
		Write32(pSailTreasureCfg, 0); //WeekAwardNum
		for (size_t i = 0; i < n; i++)
		{ //SailWeekAwardCfg
			BYTE* pSailWeekAwardCfg = pSailTreasureCfg;
			Write16(pSailWeekAwardCfg, 0); //len

			Write32(pSailWeekAwardCfg, 0); //SailCountWeekly
			Write32(pSailWeekAwardCfg, 0); //AwardId

			len = pSailWeekAwardCfg - pSailTreasureCfg;
			Set16(pSailTreasureCfg, (WORD)len);
			pSailTreasureCfg += len;
		}
		Write32(pSailTreasureCfg, 0); //WorshipAwardId
		Write32(pSailTreasureCfg, 0); //RankAwardCfgNum
		for (size_t i = 0; i < n; i++)
		{ //SailTreasureRankAwardCfg
			BYTE* pSailTreasureRankAwardCfg = pSailTreasureCfg;
			Write16(pSailTreasureRankAwardCfg, 0); //len

			Write32(pSailTreasureRankAwardCfg, 0); //RankUpper
			Write32(pSailTreasureRankAwardCfg, 0); //AwardId

			len = pSailTreasureRankAwardCfg - pSailTreasureCfg;
			Set16(pSailTreasureCfg, (WORD)len);
			pSailTreasureCfg += len;
		}
		Write32(pSailTreasureCfg, 0); //LuckyRuleNum
		for (size_t i = 0; i < n; i++)
		{ //LuckyRuleCfg
			BYTE* pLuckyRuleCfg = pSailTreasureCfg;
			Write16(pLuckyRuleCfg, 0); //len

			Write32(pLuckyRuleCfg, 0); //GetBoxCountDaily
			Write32(pLuckyRuleCfg, 0); //BoxID

			len = pLuckyRuleCfg - pSailTreasureCfg;
			Set16(pSailTreasureCfg, (WORD)len);
			pSailTreasureCfg += len;
		}

		len = pSailTreasureCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 388, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyMultiUseItemListCfg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	{ //MultiUseItemList
		BYTE* pMultiUseItemList = p;
		Write16(pMultiUseItemList, 0); //len

		Write32(pMultiUseItemList, 0); //ItemNum
		Write32(pMultiUseItemList, 0); //ItemId[]

		len = pMultiUseItemList - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 347, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGuildUpGetEntryInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGuildUpGetEntryInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultId
	Write32(p, 0); //Uin
	Write32(p, 0); //GuildCoinNum
	Write32(p, 0); //WeekProsperity
	Write32(p, 0); //MonthProsperity
	Write32(p, 0); //GuildWalfareLev
	Write32(p, 0); //GuildUpEntryNum
	for (size_t i = 0; i < n; i++)
	{ //GuildUpEntryInfo
		BYTE* pGuildUpEntryInfo = p;
		Write16(pGuildUpEntryInfo, 0); //len

		Write8(pGuildUpEntryInfo, 0); //Type
		WriteU(pGuildUpEntryInfo, 0); //Status
		Write32(pGuildUpEntryInfo, 0); //OtherInfo

		len = pGuildUpEntryInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24430, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGuildUpGetHongbaoInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGuildUpGetHongbaoInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultId
	Write32(p, 0); //Uin
	Write32(p, 0); //GuildCoinNum
	Write8(p, 0); //FaHongbaoNumTotal
	Write8(p, 0); //FaHongbaoNumLeft
	Write8(p, 0); //ShouHongbaoNumTotal
	Write8(p, 0); //ShouHongbaoNumLeft

	len = p - buf;
	SendToClient(Client, 24431, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGuildUpFaHongbao(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT HongbaoType = Read32(p);

}

void ResponseGuildUpFaHongbao(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultId
	Write32(p, 0); //Uin
	Write32(p, 0); //HongbaoType
	Write32(p, 0); //HongbaoID1
	Write32(p, 0); //HongbaoID2
	{ //AwardToClient
		BYTE* pAwardToClient = p;
		Write16(pAwardToClient, 0); //len

		Write32(pAwardToClient, 0); //Exp
		Write32(pAwardToClient, 0); //Money
		Write32(pAwardToClient, 0); //SuperMoney
		Write16(pAwardToClient, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAwardToClient;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAwardToClient;
			Set16(pAwardToClient, (WORD)len);
			pAwardToClient += len;
		}
		Write32(pAwardToClient, 0); //Coupons
		Write32(pAwardToClient, 0); //GuildPoint
		Write32(pAwardToClient, 0); //LuckMoney
		Write8(pAwardToClient, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAwardToClient;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAwardToClient;
			Set16(pAwardToClient, (WORD)len);
			pAwardToClient += len;
		}
		Write32(pAwardToClient, 0); //SpeedCoin

		len = pAwardToClient - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //Prosperity
	Write32(p, 0); //TotalValue

	len = p - buf;
	SendToClient(Client, 24432, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGuildUpShouHongbao(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT HongbaoType = Read32(p);
	UINT HongbaoID1 = Read32(p);
	UINT HongbaoID2 = Read32(p);

}

void ResponseGuildUpShouHongbao(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultId
	Write32(p, 0); //Uin
	Write32(p, 0); //HongbaoType
	Write32(p, 0); //HongbaoID1
	Write32(p, 0); //HongbaoID2
	Write32(p, 0); //HongbaoSize

	len = p - buf;
	SendToClient(Client, 24433, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGuildUpHongbaoSwitchTab(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT TabIndex = Read32(p);

}

void ResponseGuildUpHongbaoSwitchTab(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultId
	Write32(p, 0); //Uin

	len = p - buf;
	SendToClient(Client, 24437, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGuildUpGetAvailableHongbaoInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGuildUpGetAvailableHongbaoInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultId
	Write32(p, 0); //Uin
	Write32(p, 0); //HongbaoListNum
	for (size_t i = 0; i < n; i++)
	{ //GuildUpHongbaoInfo
		BYTE* pGuildUpHongbaoInfo = p;
		Write16(pGuildUpHongbaoInfo, 0); //len

		Write32(pGuildUpHongbaoInfo, 0); //HongbaoID1
		Write32(pGuildUpHongbaoInfo, 0); //HongbaoID2
		Write8(pGuildUpHongbaoInfo, 0); //Type
		Write32(pGuildUpHongbaoInfo, 0); //Uin
		WriteString(pGuildUpHongbaoInfo, 0); //NickName[]
		Write8(pGuildUpHongbaoInfo, 0); //TotalNum
		Write16(pGuildUpHongbaoInfo, 0); //Size[]
		Write8(pGuildUpHongbaoInfo, 0); //ShouNum
		Write32(pGuildUpHongbaoInfo, 0); //ShouUin[]

		len = pGuildUpHongbaoInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24440, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifySMCGuildUpHongbaoStatus(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	{ //GuildUpHongbaoInfo
		BYTE* pGuildUpHongbaoInfo = p;
		Write16(pGuildUpHongbaoInfo, 0); //len

		Write32(pGuildUpHongbaoInfo, 0); //HongbaoID1
		Write32(pGuildUpHongbaoInfo, 0); //HongbaoID2
		Write8(pGuildUpHongbaoInfo, 0); //Type
		Write32(pGuildUpHongbaoInfo, 0); //Uin
		WriteString(pGuildUpHongbaoInfo, 0); //NickName[]
		Write8(pGuildUpHongbaoInfo, 0); //TotalNum
		Write16(pGuildUpHongbaoInfo, 0); //Size[]
		Write8(pGuildUpHongbaoInfo, 0); //ShouNum
		Write32(pGuildUpHongbaoInfo, 0); //ShouUin[]

		len = pGuildUpHongbaoInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24439, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGuildUpGetHongbaoDetail(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT HongbaoID1 = Read32(p);
	UINT HongbaoID2 = Read32(p);

}

void ResponseGuildUpGetHongbaoDetail(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultId
	Write32(p, 0); //Uin
	{ //GuildUpHongbaoInfo
		BYTE* pGuildUpHongbaoInfo = p;
		Write16(pGuildUpHongbaoInfo, 0); //len

		Write32(pGuildUpHongbaoInfo, 0); //HongbaoID1
		Write32(pGuildUpHongbaoInfo, 0); //HongbaoID2
		Write8(pGuildUpHongbaoInfo, 0); //Type
		Write32(pGuildUpHongbaoInfo, 0); //Uin
		WriteString(pGuildUpHongbaoInfo, 0); //NickName[]
		Write8(pGuildUpHongbaoInfo, 0); //TotalNum
		Write16(pGuildUpHongbaoInfo, 0); //Size[]
		Write8(pGuildUpHongbaoInfo, 0); //ShouNum
		Write32(pGuildUpHongbaoInfo, 0); //ShouUin[]

		len = pGuildUpHongbaoInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24442, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGuildUpGetHongbaoDailyRecord(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGuildUpGetHongbaoDailyRecord(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultId
	Write32(p, 0); //Uin
	{ //DailyRecordList
		BYTE* pDailyRecordList = p;
		Write16(pDailyRecordList, 0); //len

		Write32(pDailyRecordList, 0); //DailyRecordNum
		for (size_t i = 0; i < n; i++)
		{ //DailyRecord
			BYTE* pDailyRecord = pDailyRecordList;
			Write16(pDailyRecord, 0); //len

			WriteString(pDailyRecord, 0); //NickName[]
			Write8(pDailyRecord, 0); //HongbaoType
			Write8(pDailyRecord, 0); //HongbaoSize

			len = pDailyRecord - pDailyRecordList;
			Set16(pDailyRecordList, (WORD)len);
			pDailyRecordList += len;
		}

		len = pDailyRecordList - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24444, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGuildUpGetHongbaoCommonCfg(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGuildUpGetHongbaoCommonCfg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultId
	Write32(p, 0); //Uin
	Write8(p, 0); //DailyHongbaoStatus
	Write8(p, 0); //WeekHongbaoStatus
	Write8(p, 0); //WeekHongbaoLev
	Write32(p, 0); //DailyHongbaoLowerLimit
	Write32(p, 0); //DailyHongbaoUpperLimit
	Write32(p, 0); //WeeklyHongbaoLowerLimit
	Write32(p, 0); //WeeklyHongbaoUpperLimit
	Write32(p, 0); //HongbaoTypeAwardNum
	for (size_t i = 0; i < n; i++)
	{ //HongbaoTypeAward
		BYTE* pHongbaoTypeAward = p;
		Write16(pHongbaoTypeAward, 0); //len

		Write32(pHongbaoTypeAward, 0); //HongbaoType
		Write32(pHongbaoTypeAward, 0); //Cost
		Write32(pHongbaoTypeAward, 0); //Prosperity
		{ //AwardToClient
			BYTE* pAwardToClient = pHongbaoTypeAward;
			Write16(pAwardToClient, 0); //len

			Write32(pAwardToClient, 0); //Exp
			Write32(pAwardToClient, 0); //Money
			Write32(pAwardToClient, 0); //SuperMoney
			Write16(pAwardToClient, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAwardToClient;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAwardToClient;
				Set16(pAwardToClient, (WORD)len);
				pAwardToClient += len;
			}
			Write32(pAwardToClient, 0); //Coupons
			Write32(pAwardToClient, 0); //GuildPoint
			Write32(pAwardToClient, 0); //LuckMoney
			Write8(pAwardToClient, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAwardToClient;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAwardToClient;
				Set16(pAwardToClient, (WORD)len);
				pAwardToClient += len;
			}
			Write32(pAwardToClient, 0); //SpeedCoin

			len = pAwardToClient - pHongbaoTypeAward;
			Set16(pHongbaoTypeAward, (WORD)len);
			pHongbaoTypeAward += len;
		}

		len = pHongbaoTypeAward - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24445, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGuildUpGetHongbaoFlow(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGuildUpGetHongbaoFlow(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultId
	Write32(p, 0); //Uin
	for (size_t i = 0; i < n; i++)
	{ //Flow
		BYTE* pFlow = p;
		Write16(pFlow, 0); //len

		Write32(pFlow, 0); //Type
		Write32(pFlow, 0); //MessageNum
		for (size_t i = 0; i < n; i++)
		{ //Message
			BYTE* pMessage = pFlow;
			Write16(pMessage, 0); //len

			Write32(pMessage, 0); //Time
			Write8(pMessage, 0); //ActionType
			Write32(pMessage, 0); //SrcUin
			WriteString(pMessage, 0); //SrcNickName[]
			Write32(pMessage, 0); //DstUin
			WriteString(pMessage, 0); //DstNickName[]
			Write32(pMessage, 0); //HongbaoSize
			Write32(pMessage, 0); //HongbaoType

			len = pMessage - pFlow;
			Set16(pFlow, (WORD)len);
			pFlow += len;
		}

		len = pFlow - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24434, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyGuildUpHongbaoMessage(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	{ //GuildUpHongbaoMessage
		BYTE* pGuildUpHongbaoMessage = p;
		Write16(pGuildUpHongbaoMessage, 0); //len

		Write32(pGuildUpHongbaoMessage, 0); //Time
		Write8(pGuildUpHongbaoMessage, 0); //ActionType
		Write32(pGuildUpHongbaoMessage, 0); //SrcUin
		WriteString(pGuildUpHongbaoMessage, 0); //SrcNickName[]
		Write32(pGuildUpHongbaoMessage, 0); //DstUin
		WriteString(pGuildUpHongbaoMessage, 0); //DstNickName[]
		Write32(pGuildUpHongbaoMessage, 0); //HongbaoSize
		Write32(pGuildUpHongbaoMessage, 0); //HongbaoType

		len = pGuildUpHongbaoMessage - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24441, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetGuildUpWelfareBoardInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT GuildID = Read32(p);

}

void ResponseGetGuildUpWelfareBoardInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultId
	Write32(p, 0); //Uin
	Write32(p, 0); //GuildID
	Write8(p, 0); //ProsperTaskNum
	for (size_t i = 0; i < n; i++)
	{ //GuildProsperTaskInfo
		BYTE* pGuildProsperTaskInfo = p;
		Write16(pGuildProsperTaskInfo, 0); //len

		Write32(pGuildProsperTaskInfo, 0); //TaskID
		Write32(pGuildProsperTaskInfo, 0); //PackID
		Write16(pGuildProsperTaskInfo, 0); //ProsperInc
		Write16(pGuildProsperTaskInfo, 0); //NameLen
		Write16(pGuildProsperTaskInfo, 0); //TaskIntroLen
		Write16(pGuildProsperTaskInfo, 0); //TaskTypeLen
		Write16(pGuildProsperTaskInfo, 0); //Status
		Write16(pGuildProsperTaskInfo, 0); //ProsperIncUpLimit

		len = pGuildProsperTaskInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //GuildWeekendHongbaoOpenCfg
		BYTE* pGuildWeekendHongbaoOpenCfg = p;
		Write16(pGuildWeekendHongbaoOpenCfg, 0); //len

		WriteUn(pGuildWeekendHongbaoOpenCfg, 0); //AwardLevelCount
		for (size_t i = 0; i < n; i++)
		{ //AwardInfo
			BYTE* pAwardInfo = pGuildWeekendHongbaoOpenCfg;
			Write16(pAwardInfo, 0); //len

			WriteUn(pAwardInfo, 0); //Level
			WriteUn(pAwardInfo, 0); //ProsperRange[]
			WriteUn(pAwardInfo, 0); //GuildCoinRange[]

			len = pAwardInfo - pGuildWeekendHongbaoOpenCfg;
			Set16(pGuildWeekendHongbaoOpenCfg, (WORD)len);
			pGuildWeekendHongbaoOpenCfg += len;
		}

		len = pGuildWeekendHongbaoOpenCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //GuildMonthWelfareCfg
		BYTE* pGuildMonthWelfareCfg = p;
		Write16(pGuildMonthWelfareCfg, 0); //len

		Write32(pGuildMonthWelfareCfg, 0); //OpenExpIncProsperNeed
		Write32(pGuildMonthWelfareCfg, 0); //ExpIncPercentNum
		Write32(pGuildMonthWelfareCfg, 0); //OpenSalaryIncProsperNeed
		Write32(pGuildMonthWelfareCfg, 0); //SalaryIncPercentNum
		Write32(pGuildMonthWelfareCfg, 0); //OpenHongBaoIncProsperNeed
		Write32(pGuildMonthWelfareCfg, 0); //HongBaoIncPercentNum

		len = pGuildMonthWelfareCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //IsOneKeyActive

	len = p - buf;
	SendToClient(Client, 24449, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetGuildUpProsperTaskAward(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT GuildID = Read32(p);
	int TaskID = Read32(p);
	UCHAR Type = Read8(p);

}

void ResponseGetGuildUpProsperTaskAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultId
	Write32(p, 0); //Uin
	Write32(p, 0); //GuildID
	Write16(p, 0); //TaskNum
	Write32(p, 0); //TaskID[]
	Write32(p, 0); //GuildProsperInc
	Write8(p, 0); //Type

	len = p - buf;
	SendToClient(Client, 24450, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyActivityRecommendCfg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //TabNum
	for (size_t i = 0; i < n; i++)
	{ //ActivityOneTabCfg
		BYTE* pActivityOneTabCfg = p;
		Write16(pActivityOneTabCfg, 0); //len

		{ //ActivityRecommendTabBaseCfg
			BYTE* pActivityRecommendTabBaseCfg = pActivityOneTabCfg;
			Write16(pActivityRecommendTabBaseCfg, 0); //len

			Write32(pActivityRecommendTabBaseCfg, 0); //TabOrder
			Write32(pActivityRecommendTabBaseCfg, 0); //TabType
			Write32(pActivityRecommendTabBaseCfg, 0); //TabAttr
			Write32(pActivityRecommendTabBaseCfg, 0); //TabOpenDate
			Write32(pActivityRecommendTabBaseCfg, 0); //TabOpenTime
			Write32(pActivityRecommendTabBaseCfg, 0); //TabCloseDate
			Write32(pActivityRecommendTabBaseCfg, 0); //TabCloseTime
			Write32(pActivityRecommendTabBaseCfg, 0); //ActiveOpenDate
			Write32(pActivityRecommendTabBaseCfg, 0); //ActiveOpenTime
			Write32(pActivityRecommendTabBaseCfg, 0); //ActiveCloseDate
			Write32(pActivityRecommendTabBaseCfg, 0); //ActiveCloseTime
			Write16(pActivityRecommendTabBaseCfg, 0); //OpenTimeStrLen
			Write32(pActivityRecommendTabBaseCfg, 0); //CheckOccasion
			Write16(pActivityRecommendTabBaseCfg, 0); //TabURLLen
			Write16(pActivityRecommendTabBaseCfg, 0); //TabNameLen
			Write16(pActivityRecommendTabBaseCfg, 0); //ActiveNameLen
			Write16(pActivityRecommendTabBaseCfg, 0); //ActiveDescLen

			len = pActivityRecommendTabBaseCfg - pActivityOneTabCfg;
			Set16(pActivityOneTabCfg, (WORD)len);
			pActivityOneTabCfg += len;
		}
		{ //ActivityRecommendGiftBagCfg
			BYTE* pActivityRecommendGiftBagCfg = pActivityOneTabCfg;
			Write16(pActivityRecommendGiftBagCfg, 0); //len

			Write32(pActivityRecommendGiftBagCfg, 0); //CurrentValue
			Write32(pActivityRecommendGiftBagCfg, 0); //GiftBagNum
			for (size_t i = 0; i < n; i++)
			{ //ActivityRecommendGiftBagAwardToClient
				BYTE* pActivityRecommendGiftBagAwardToClient = pActivityRecommendGiftBagCfg;
				Write16(pActivityRecommendGiftBagAwardToClient, 0); //len

				Write32(pActivityRecommendGiftBagAwardToClient, 0); //Index
				Write32(pActivityRecommendGiftBagAwardToClient, 0); //LimitValue
				Write32(pActivityRecommendGiftBagAwardToClient, 0); //Status
				Write32(pActivityRecommendGiftBagAwardToClient, 0); //BoxID
				Write8(pActivityRecommendGiftBagAwardToClient, 0); //BagName[]
				{ //Award
					BYTE* pAward = pActivityRecommendGiftBagAwardToClient;
					Write16(pAward, 0); //len

					Write32(pAward, 0); //Exp
					Write32(pAward, 0); //Money
					Write32(pAward, 0); //SuperMoney
					Write16(pAward, 0); //ItemNum
					for (size_t i = 0; i < n; i++)
					{ //ItemInfo
						BYTE* pItemInfo = pAward;
						Write16(pItemInfo, 0); //len

						Write32(pItemInfo, 0); //ItemID
						Write32(pItemInfo, 0); //ItemNum
						Write32(pItemInfo, 0); //AvailPeriod
						Write8(pItemInfo, 0); //Status
						WriteUn(pItemInfo, 0); //ObtainTime
						Write32(pItemInfo, 0); //OtherAttribute
						Write16(pItemInfo, 0); //ItemType

						len = pItemInfo - pAward;
						Set16(pAward, (WORD)len);
						pAward += len;
					}
					Write32(pAward, 0); //Coupons
					Write32(pAward, 0); //GuildPoint
					Write32(pAward, 0); //LuckMoney
					Write8(pAward, 0); //ExtendInfoNum
					for (size_t i = 0; i < n; i++)
					{ //ExtendInfoAward
						BYTE* pExtendInfoAward = pAward;
						Write16(pExtendInfoAward, 0); //len

						Write16(pExtendInfoAward, 0); //Key
						Write32(pExtendInfoAward, 0); //AddValue
						Write32(pExtendInfoAward, 0); //TotalValue
						Write8(pExtendInfoAward, 0); //ShowPriority
						Write16(pExtendInfoAward, 0); //BuyNeedScore
						Write8(pExtendInfoAward, 0); //OneMatchMaxNum

						len = pExtendInfoAward - pAward;
						Set16(pAward, (WORD)len);
						pAward += len;
					}
					Write32(pAward, 0); //SpeedCoin

					len = pAward - pActivityRecommendGiftBagAwardToClient;
					Set16(pActivityRecommendGiftBagAwardToClient, (WORD)len);
					pActivityRecommendGiftBagAwardToClient += len;
				}

				len = pActivityRecommendGiftBagAwardToClient - pActivityRecommendGiftBagCfg;
				Set16(pActivityRecommendGiftBagCfg, (WORD)len);
				pActivityRecommendGiftBagCfg += len;
			}

			len = pActivityRecommendGiftBagCfg - pActivityOneTabCfg;
			Set16(pActivityOneTabCfg, (WORD)len);
			pActivityOneTabCfg += len;
		}
		{ //Award
			BYTE* pAward = pActivityOneTabCfg;
			Write16(pAward, 0); //len

			Write32(pAward, 0); //Exp
			Write32(pAward, 0); //Money
			Write32(pAward, 0); //SuperMoney
			Write16(pAward, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAward;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAward;
				Set16(pAward, (WORD)len);
				pAward += len;
			}
			Write32(pAward, 0); //Coupons
			Write32(pAward, 0); //GuildPoint
			Write32(pAward, 0); //LuckMoney
			Write8(pAward, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAward;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAward;
				Set16(pAward, (WORD)len);
				pAward += len;
			}
			Write32(pAward, 0); //SpeedCoin

			len = pAward - pActivityOneTabCfg;
			Set16(pActivityOneTabCfg, (WORD)len);
			pActivityOneTabCfg += len;
		}

		len = pActivityOneTabCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //AwardAvailable

	len = p - buf;
	SendToClient(Client, 24448, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestReportActivityRecommendCurrentVisitInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT TabOrder = Read32(p);
	short Panel = Read16(p);

}

void RequestActivityRecommendGetGiftAward(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT TabOrder = Read32(p);
	UCHAR GiftIdx = Read8(p);

}

void ResponseActivityRecommendGetGiftAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	{ //Award
		BYTE* pAward = p;
		Write16(pAward, 0); //len

		Write32(pAward, 0); //Exp
		Write32(pAward, 0); //Money
		Write32(pAward, 0); //SuperMoney
		Write16(pAward, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAward;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write32(pAward, 0); //Coupons
		Write32(pAward, 0); //GuildPoint
		Write32(pAward, 0); //LuckMoney
		Write8(pAward, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAward;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write32(pAward, 0); //SpeedCoin

		len = pAward - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //GiftIdx

	len = p - buf;
	SendToClient(Client, 24447, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetGuildSpecialShop(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT GuildID = Read32(p);

}

void ResponseGetGuildSpecialShop(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //GuildCoin
	Write32(p, 0); //NextFreshTimeLeft
	Write8(p, 0); //ItemNums
	for (size_t i = 0; i < n; i++)
	{ //Item
		BYTE* pItem = p;
		Write16(pItem, 0); //len

		Write32(pItem, 0); //ItemID
		Write32(pItem, 0); //ItemTotalNum
		Write32(pItem, 0); //ItemLeftNum
		Write32(pItem, 0); //Price
		Write8(pItem, 0); //Flag
		Write32(pItem, 0); //NumPerPack
		Write32(pItem, 0); //Period
		Write32(pItem, 0); //KanJiaCost
		Write8(pItem, 0); //PriceRank
		Write16(pItem, 0); //CanKanJiaResultID

		len = pItem - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 24451, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGuildShopKanJia(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int ItemID = Read32(p);

}

void ResponseGuildShopKanJia(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write32(p, 0); //PriceBeforeKanJia
	Write32(p, 0); //PriceAfterKanJia
	Write8(p, 0); //PriceRankAfterKanJia
	Write32(p, 0); //ItemID

	len = p - buf;
	SendToClient(Client, 24452, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestEmbattle(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT[] IDs[] = Read32(p);
	UINT CaptainPetID = Read32(p);
	short AutoEmbattle = Read16(p);
	USHORT UseArrayID = Read16(p);

}

void ResponseEmbattle(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //Time
	Write16(p, 0); //ResultID
	Write32(p, 0); //IDs[]
	Write32(p, 0); //CaptainPetID
	Write32(p, 0); //FightPowerDiff
	Write32(p, 0); //TotalFightPower
	Write16(p, 0); //UseArrayID

	len = p - buf;
	SendToClient(Client, 21120, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestPKAction(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT TargetSeatID = Read32(p);

}

void ResponsePKAction(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //Time
	{ //ActionResult
		BYTE* pActionResult = p;
		Write16(pActionResult, 0); //len

		Write32(pActionResult, 0); //Round
		{ //SrcData
			BYTE* pSrcData = pActionResult;
			Write16(pSrcData, 0); //len

			Write32(pSrcData, 0); //Uin
			Write8(pSrcData, 0); //SeatID
			Write32(pSrcData, 0); //PetID
			Write32(pSrcData, 0); //SkillID
			Write32(pSrcData, 0); //ActionID
			Write32(pSrcData, 0); //SPDiff
			Write8(pSrcData, 0); //ArrayEffectNum
			for (size_t i = 0; i < n; i++)
			{ //ArrayEffect
				BYTE* pArrayEffect = pSrcData;
				Write16(pArrayEffect, 0); //len

				Write16(pArrayEffect, 0); //EffectType
				Write32(pArrayEffect, 0); //Para0
				Write32(pArrayEffect, 0); //Para1

				len = pArrayEffect - pSrcData;
				Set16(pSrcData, (WORD)len);
				pSrcData += len;
			}

			len = pSrcData - pActionResult;
			Set16(pActionResult, (WORD)len);
			pActionResult += len;
		}
		Write32(pActionResult, 0); //DataNum
		for (size_t i = 0; i < n; i++)
		{ //DstData
			BYTE* pDstData = pActionResult;
			Write16(pDstData, 0); //len

			Write32(pDstData, 0); //Uin
			Write8(pDstData, 0); //SeatID
			Write32(pDstData, 0); //PetID
			Write8(pDstData, 0); //ResultType
			Write32(pDstData, 0); //BloodDiff
			Write32(pDstData, 0); //Blood
			Write32(pDstData, 0); //ActionID
			Write8(pDstData, 0); //BeatBack
			for (size_t i = 0; i < n; i++)
			{ //BeatBack
				BYTE* pBeatBack = pDstData;
				Write16(pBeatBack, 0); //len

				Write8(pBeatBack, 0); //ResultType
				Write32(pBeatBack, 0); //BloodDiff
				Write32(pBeatBack, 0); //SrcActionID
				Write32(pBeatBack, 0); //DstActionID

				len = pBeatBack - pDstData;
				Set16(pDstData, (WORD)len);
				pDstData += len;
			}
			Write8(pDstData, 0); //EffectNum
			for (size_t i = 0; i < n; i++)
			{ //Effect
				BYTE* pEffect = pDstData;
				Write16(pEffect, 0); //len

				Write16(pEffect, 0); //Effect
				Write32(pEffect, 0); //Para0
				Write32(pEffect, 0); //Para1

				len = pEffect - pDstData;
				Set16(pDstData, (WORD)len);
				pDstData += len;
			}
			{ //EffectStatus
				BYTE* pEffectStatus = pDstData;
				Write16(pEffectStatus, 0); //len

				Write8(pEffectStatus, 0); //StatusNum
				Write16(pEffectStatus, 0); //Status[]

				len = pEffectStatus - pDstData;
				Set16(pDstData, (WORD)len);
				pDstData += len;
			}
			Write8(pDstData, 0); //EffectBeforeNum
			for (size_t i = 0; i < n; i++)
			{ //EffectBefore
				BYTE* pEffectBefore = pDstData;
				Write16(pEffectBefore, 0); //len

				Write16(pEffectBefore, 0); //Effect
				Write32(pEffectBefore, 0); //BloodDiff

				len = pEffectBefore - pDstData;
				Set16(pDstData, (WORD)len);
				pDstData += len;
			}
			Write32(pDstData, 0); //SPDiff
			Write8(pDstData, 0); //ArrayEffectNum
			for (size_t i = 0; i < n; i++)
			{ //ArrayEffect
				BYTE* pArrayEffect = pDstData;
				Write16(pArrayEffect, 0); //len

				Write16(pArrayEffect, 0); //EffectType
				Write32(pArrayEffect, 0); //Para0
				Write32(pArrayEffect, 0); //Para1

				len = pArrayEffect - pDstData;
				Set16(pDstData, (WORD)len);
				pDstData += len;
			}

			len = pDstData - pActionResult;
			Set16(pActionResult, (WORD)len);
			pActionResult += len;
		}

		len = pActionResult - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //NextAction
		BYTE* pNextAction = p;
		Write16(pNextAction, 0); //len

		Write32(pNextAction, 0); //Round
		Write32(pNextAction, 0); //Uin
		Write8(pNextAction, 0); //IsCaptainRound

		len = pNextAction - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyPKAction(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //Time
	{ //ActionResult
		BYTE* pActionResult = p;
		Write16(pActionResult, 0); //len

		Write32(pActionResult, 0); //Round
		{ //SrcData
			BYTE* pSrcData = pActionResult;
			Write16(pSrcData, 0); //len

			Write32(pSrcData, 0); //Uin
			Write8(pSrcData, 0); //SeatID
			Write32(pSrcData, 0); //PetID
			Write32(pSrcData, 0); //SkillID
			Write32(pSrcData, 0); //ActionID
			Write32(pSrcData, 0); //SPDiff
			Write8(pSrcData, 0); //ArrayEffectNum
			for (size_t i = 0; i < n; i++)
			{ //ArrayEffect
				BYTE* pArrayEffect = pSrcData;
				Write16(pArrayEffect, 0); //len

				Write16(pArrayEffect, 0); //EffectType
				Write32(pArrayEffect, 0); //Para0
				Write32(pArrayEffect, 0); //Para1

				len = pArrayEffect - pSrcData;
				Set16(pSrcData, (WORD)len);
				pSrcData += len;
			}

			len = pSrcData - pActionResult;
			Set16(pActionResult, (WORD)len);
			pActionResult += len;
		}
		Write32(pActionResult, 0); //DataNum
		for (size_t i = 0; i < n; i++)
		{ //DstData
			BYTE* pDstData = pActionResult;
			Write16(pDstData, 0); //len

			Write32(pDstData, 0); //Uin
			Write8(pDstData, 0); //SeatID
			Write32(pDstData, 0); //PetID
			Write8(pDstData, 0); //ResultType
			Write32(pDstData, 0); //BloodDiff
			Write32(pDstData, 0); //Blood
			Write32(pDstData, 0); //ActionID
			Write8(pDstData, 0); //BeatBack
			for (size_t i = 0; i < n; i++)
			{ //BeatBack
				BYTE* pBeatBack = pDstData;
				Write16(pBeatBack, 0); //len

				Write8(pBeatBack, 0); //ResultType
				Write32(pBeatBack, 0); //BloodDiff
				Write32(pBeatBack, 0); //SrcActionID
				Write32(pBeatBack, 0); //DstActionID

				len = pBeatBack - pDstData;
				Set16(pDstData, (WORD)len);
				pDstData += len;
			}
			Write8(pDstData, 0); //EffectNum
			for (size_t i = 0; i < n; i++)
			{ //Effect
				BYTE* pEffect = pDstData;
				Write16(pEffect, 0); //len

				Write16(pEffect, 0); //Effect
				Write32(pEffect, 0); //Para0
				Write32(pEffect, 0); //Para1

				len = pEffect - pDstData;
				Set16(pDstData, (WORD)len);
				pDstData += len;
			}
			{ //EffectStatus
				BYTE* pEffectStatus = pDstData;
				Write16(pEffectStatus, 0); //len

				Write8(pEffectStatus, 0); //StatusNum
				Write16(pEffectStatus, 0); //Status[]

				len = pEffectStatus - pDstData;
				Set16(pDstData, (WORD)len);
				pDstData += len;
			}
			Write8(pDstData, 0); //EffectBeforeNum
			for (size_t i = 0; i < n; i++)
			{ //EffectBefore
				BYTE* pEffectBefore = pDstData;
				Write16(pEffectBefore, 0); //len

				Write16(pEffectBefore, 0); //Effect
				Write32(pEffectBefore, 0); //BloodDiff

				len = pEffectBefore - pDstData;
				Set16(pDstData, (WORD)len);
				pDstData += len;
			}
			Write32(pDstData, 0); //SPDiff
			Write8(pDstData, 0); //ArrayEffectNum
			for (size_t i = 0; i < n; i++)
			{ //ArrayEffect
				BYTE* pArrayEffect = pDstData;
				Write16(pArrayEffect, 0); //len

				Write16(pArrayEffect, 0); //EffectType
				Write32(pArrayEffect, 0); //Para0
				Write32(pArrayEffect, 0); //Para1

				len = pArrayEffect - pDstData;
				Set16(pDstData, (WORD)len);
				pDstData += len;
			}

			len = pDstData - pActionResult;
			Set16(pActionResult, (WORD)len);
			pActionResult += len;
		}

		len = pActionResult - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //NextAction
		BYTE* pNextAction = p;
		Write16(pNextAction, 0); //len

		Write32(pNextAction, 0); //Round
		Write32(pNextAction, 0); //Uin
		Write8(pNextAction, 0); //IsCaptainRound

		len = pNextAction - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 21122, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyPKRound(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Round
	Write32(p, 0); //PlayerNum
	for (size_t i = 0; i < n; i++)
	{ //PlayerPetStatus
		BYTE* pPlayerPetStatus = p;
		Write16(pPlayerPetStatus, 0); //len

		Write32(pPlayerPetStatus, 0); //Uin
		Write32(pPlayerPetStatus, 0); //CurHP
		Write32(pPlayerPetStatus, 0); //PetNum
		for (size_t i = 0; i < n; i++)
		{ //PetStatus
			BYTE* pPetStatus = pPlayerPetStatus;
			Write16(pPetStatus, 0); //len

			Write8(pPetStatus, 0); //SeatID
			Write32(pPetStatus, 0); //PetID
			{ //EffectStatus
				BYTE* pEffectStatus = pPetStatus;
				Write16(pEffectStatus, 0); //len

				Write8(pEffectStatus, 0); //StatusNum
				Write16(pEffectStatus, 0); //Status[]

				len = pEffectStatus - pPetStatus;
				Set16(pPetStatus, (WORD)len);
				pPetStatus += len;
			}
			Write32(pPetStatus, 0); //HP
			Write32(pPetStatus, 0); //SP

			len = pPetStatus - pPlayerPetStatus;
			Set16(pPlayerPetStatus, (WORD)len);
			pPlayerPetStatus += len;
		}

		len = pPlayerPetStatus - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 21136, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestPKGameEvent(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT GameEvent = Read16(p);
	UINT Para0 = Read32(p);
	UINT Para1 = Read32(p);
	UINT Para2 = Read32(p);
	UINT Para3 = Read32(p);

}

void ResponsePKGameEvent(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //GameEvent
	Write32(p, 0); //Para0
	Write32(p, 0); //Para1
	Write32(p, 0); //Para2
	Write32(p, 0); //Para3

	len = p - buf;
	SendToClient(Client, 21135, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestPKCaptainQTE(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT Value = Read32(p);

}

void ResponsePKCaptainQTE(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //Time
	Write32(p, 0); //Value

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestStartPetPK(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	char PKType = Read8(p);
	UCHAR GameInfoNum = Read8(p);
	for (size_t i = 0; i < n; i++)
	{ //GameInfo
		BYTE* pGameInfo = p;
		len = Read16(pGameInfo);

		UINT PlayerID = Read32(pGameInfo);
		UINT Uin = Read32(pGameInfo);
		short ServerID = Read16(pGameInfo);
		short PlayerNature = Read16(pGameInfo);
		char[] NickName[] = ReadString(pGameInfo);
		char[] TeamName[] = ReadString(pGameInfo);
		UINT TotalBattlePower = Read32(pGameInfo);
		int CaptainPetID = Read32(pGameInfo);
		UCHAR PetNum = Read8(pGameInfo);
		for (size_t i = 0; i < n; i++)
		{ //Pet
			BYTE* pPet = pGameInfo;
			len = Read16(pPet);

			{ //PetBaseInfo
				BYTE* pPetBaseInfo = pPet;
				len = Read16(pPetBaseInfo);

				UINT Uin = Read32(pPetBaseInfo);
				int PetId = Read32(pPetBaseInfo);
				UINT Exp = Read32(pPetBaseInfo);
				UINT FightPower = Read32(pPetBaseInfo);
				int Attr[] = Read32(pPetBaseInfo);
				short FightLevel = Read16(pPetBaseInfo);
				short Star = Read16(pPetBaseInfo);
				short ExtraPotentialByStar[] = Read16(pPetBaseInfo);
				int SkillNum = Read32(pPetBaseInfo);
				for (size_t i = 0; i < n; i++)
				{ //Skill
					BYTE* pSkill = pPetBaseInfo;
					len = Read16(pSkill);

					int SkillID = Read32(pSkill);
					short SkillLevel = Read16(pSkill);

					pPetBaseInfo += len;
				}
				char Rarity = Read8(pPetBaseInfo);
				char ProfType = Read8(pPetBaseInfo);
				UCHAR Status = Read8(pPetBaseInfo);
				short AttrMotivateLevel[] = Read16(pPetBaseInfo);

				pPet += len;
			}
			UCHAR SeatID = Read8(pPet);
			int HP = Read32(pPet);
			int SP = Read32(pPet);
			UCHAR FormLevel = Read8(pPet);

			pGameInfo += len;
		}
		short AutoAction = Read16(pGameInfo);
		UCHAR PKArrayID = Read8(pGameInfo);
		UCHAR PKArrayLevel = Read8(pGameInfo);

		p += len;
	}

}

void ResponseStartPetPK(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write8(p, 0); //PKType
	Write32(p, 0); //SuggestedFightPowerValue
	{ //AwardInfo
		BYTE* pAwardInfo = p;
		Write16(pAwardInfo, 0); //len

		Write32(pAwardInfo, 0); //Exp
		Write32(pAwardInfo, 0); //Money
		Write32(pAwardInfo, 0); //SuperMoney
		Write16(pAwardInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAwardInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAwardInfo;
			Set16(pAwardInfo, (WORD)len);
			pAwardInfo += len;
		}
		Write32(pAwardInfo, 0); //Coupons
		Write32(pAwardInfo, 0); //GuildPoint
		Write32(pAwardInfo, 0); //LuckMoney
		Write8(pAwardInfo, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAwardInfo;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAwardInfo;
			Set16(pAwardInfo, (WORD)len);
			pAwardInfo += len;
		}
		Write32(pAwardInfo, 0); //SpeedCoin

		len = pAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //IsFastChallenge

	len = p - buf;
	SendToClient(Client, 21129, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyPKGameBegin(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //NormalLoadTime
	WriteUn(p, 0); //GameID
	WriteUn(p, 0); //Seed
	Write32(p, 0); //Type
	Write32(p, 0); //MaxRound
	Write32(p, 0); //MapID
	Write32(p, 0); //MaxAngerValue
	for (size_t i = 0; i < n; i++)
	{ //PlayerInfo
		BYTE* pPlayerInfo = p;
		Write16(pPlayerInfo, 0); //len

		Write32(pPlayerInfo, 0); //Uin
		WriteString(pPlayerInfo, 0); //NickName[]
		WriteString(pPlayerInfo, 0); //TeamName[]
		Write32(pPlayerInfo, 0); //TotalBattlePower
		Write32(pPlayerInfo, 0); //TotalHP
		Write32(pPlayerInfo, 0); //Initiative
		Write32(pPlayerInfo, 0); //PetNum
		for (size_t i = 0; i < n; i++)
		{ //PetInfo
			BYTE* pPetInfo = pPlayerInfo;
			Write16(pPetInfo, 0); //len

			Write32(pPetInfo, 0); //PetID
			Write8(pPetInfo, 0); //SeatID
			Write8(pPetInfo, 0); //PetLevel
			Write32(pPetInfo, 0); //HP
			WriteU(pPetInfo, 0); //ScaleOnPk
			Write8(pPetInfo, 0); //HasAngerSkill
			Write32(pPetInfo, 0); //BattlePower

			len = pPetInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		Write16(pPlayerInfo, 0); //AutoAction
		Write32(pPlayerInfo, 0); //CaptainID
		Write8(pPlayerInfo, 0); //PKArrayID
		Write8(pPlayerInfo, 0); //PKArrayLevel

		len = pPlayerInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //CanGiveUp
	Write32(p, 0); //CanAutoAction

	len = p - buf;
	SendToClient(Client, 21124, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestPKPrepareReady(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void NotifyPKWaitUnreadyLoad(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //WaitLoadTime

	len = p - buf;
	SendToClient(Client, 21130, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyPKBegin(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //CountDownTime
	WriteUn(p, 0); //PKArrayShowTime

	len = p - buf;
	SendToClient(Client, 21126, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyPKOver(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Type
	Write32(p, 0); //WinUin
	{ //AwardInfo
		BYTE* pAwardInfo = p;
		Write16(pAwardInfo, 0); //len

		Write32(pAwardInfo, 0); //Exp
		Write32(pAwardInfo, 0); //Money
		Write32(pAwardInfo, 0); //SuperMoney
		Write16(pAwardInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAwardInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAwardInfo;
			Set16(pAwardInfo, (WORD)len);
			pAwardInfo += len;
		}
		Write32(pAwardInfo, 0); //Coupons
		Write32(pAwardInfo, 0); //GuildPoint
		Write32(pAwardInfo, 0); //LuckMoney
		Write8(pAwardInfo, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAwardInfo;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAwardInfo;
			Set16(pAwardInfo, (WORD)len);
			pAwardInfo += len;
		}
		Write32(pAwardInfo, 0); //SpeedCoin

		len = pAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	for (size_t i = 0; i < n; i++)
	{ //PKScore
		BYTE* pPKScore = p;
		Write16(pPKScore, 0); //len

		Write32(pPKScore, 0); //Uin
		WriteString(pPKScore, 0); //NickName[]
		Write8(pPKScore, 0); //PlayerNature
		Write32(pPKScore, 0); //CaptainID
		Write32(pPKScore, 0); //TotalBattlePower
		Write8(pPKScore, 0); //PetNum
		for (size_t i = 0; i < n; i++)
		{ //PetInfo
			BYTE* pPetInfo = pPKScore;
			Write16(pPetInfo, 0); //len

			Write32(pPetInfo, 0); //PetID
			Write32(pPetInfo, 0); //LeftHP

			len = pPetInfo - pPKScore;
			Set16(pPKScore, (WORD)len);
			pPKScore += len;
		}
		Write8(pPKScore, 0); //PKArrayID
		Write8(pPKScore, 0); //PKArrayLevel
		Write8(pPKScore, 0); //PKArrayAffectSeatNum

		len = pPKScore - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //FirstKilled
	Write16(p, 0); //ScoreJingJi
	Write16(p, 0); //Round
	Write8(p, 0); //IsPerfectChallenge

	len = p - buf;
	SendToClient(Client, 21127, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyPKGameOver(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 21128, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetPKPetInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT DstUin = Read32(p);
	char Flag = Read8(p);
	int PetId = Read32(p);

}

void ResponseGetPKPetInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //Time
	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen
	Write32(p, 0); //DstUin
	Write8(p, 0); //Flag
	Write32(p, 0); //IDs[]
	Write16(p, 0); //PKPetNum
	for (size_t i = 0; i < n; i++)
	{ //PKPetInfo
		BYTE* pPKPetInfo = p;
		Write16(pPKPetInfo, 0); //len

		Write32(pPKPetInfo, 0); //PetId
		Write8(pPKPetInfo, 0); //PetType
		Write16(pPKPetInfo, 0); //FightLevel
		Write16(pPKPetInfo, 0); //Star
		Write32(pPKPetInfo, 0); //CurLevelExp
		Write32(pPKPetInfo, 0); //CurLevelTotalExp
		Write16(pPKPetInfo, 0); //ExtraPotentialByStar[]
		Write32(pPKPetInfo, 0); //SkillNum
		for (size_t i = 0; i < n; i++)
		{ //Skill
			BYTE* pSkill = pPKPetInfo;
			Write16(pSkill, 0); //len

			Write32(pSkill, 0); //SkillID
			Write16(pSkill, 0); //SkillLevel
			Write8(pSkill, 0); //SkillType
			Write8(pSkill, 0); //IsCanLevelUp
			Write16(pSkill, 0); //LevelUpFightLevel
			Write16(pSkill, 0); //AttachLen

			len = pSkill - pPKPetInfo;
			Set16(pPKPetInfo, (WORD)len);
			pPKPetInfo += len;
		}
		Write32(pPKPetInfo, 0); //FightPower
		Write32(pPKPetInfo, 0); //Attribute[]
		Write8(pPKPetInfo, 0); //IsTopFightLevel
		Write32(pPKPetInfo, 0); //HPIncByStatus
		Write8(pPKPetInfo, 0); //HPIncPercent
		Write8(pPKPetInfo, 0); //Status
		Write32(pPKPetInfo, 0); //MaxFightPower
		Write16(pPKPetInfo, 0); //AttrMotivateLevel[]

		len = pPKPetInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //TotalFightPower
	Write32(p, 0); //CaptainPetID
	Write32(p, 0); //RankedMatchLevel
	Write32(p, 0); //RankedMatchScore
	Write32(p, 0); //RankedMatchRank
	Write8(p, 0); //HasMoreInfo
	Write32(p, 0); //WeeklyPetStarRefreshFreeLimit
	Write32(p, 0); //WeeklyPetStarRefreshFreeCnt
	Write8(p, 0); //HasPkArrayInfo
	for (size_t i = 0; i < n; i++)
	{ //PKArrayInfo
		BYTE* pPKArrayInfo = p;
		Write16(pPKArrayInfo, 0); //len

		Write8(pPKArrayInfo, 0); //UsingArrayID
		Write8(pPKArrayInfo, 0); //ArrayNum
		for (size_t i = 0; i < n; i++)
		{ //PetPkArrayInfo
			BYTE* pPetPkArrayInfo = pPKArrayInfo;
			Write16(pPetPkArrayInfo, 0); //len

			Write8(pPetPkArrayInfo, 0); //ArrayID
			Write8(pPetPkArrayInfo, 0); //Level
			Write32(pPetPkArrayInfo, 0); //CaptainPetID
			Write32(pPetPkArrayInfo, 0); //TotalFightPower
			Write32(pPetPkArrayInfo, 0); //IDs[]

			len = pPetPkArrayInfo - pPKArrayInfo;
			Set16(pPKArrayInfo, (WORD)len);
			pPKArrayInfo += len;
		}

		len = pPKArrayInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 21133, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyGetPKPetMoreInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //PKPetNum
	for (size_t i = 0; i < n; i++)
	{ //PKPetInfo
		BYTE* pPKPetInfo = p;
		Write16(pPKPetInfo, 0); //len

		Write32(pPKPetInfo, 0); //PetId
		Write8(pPKPetInfo, 0); //PetType
		Write16(pPKPetInfo, 0); //FightLevel
		Write16(pPKPetInfo, 0); //Star
		Write32(pPKPetInfo, 0); //CurLevelExp
		Write32(pPKPetInfo, 0); //CurLevelTotalExp
		Write16(pPKPetInfo, 0); //ExtraPotentialByStar[]
		Write32(pPKPetInfo, 0); //SkillNum
		for (size_t i = 0; i < n; i++)
		{ //Skill
			BYTE* pSkill = pPKPetInfo;
			Write16(pSkill, 0); //len

			Write32(pSkill, 0); //SkillID
			Write16(pSkill, 0); //SkillLevel
			Write8(pSkill, 0); //SkillType
			Write8(pSkill, 0); //IsCanLevelUp
			Write16(pSkill, 0); //LevelUpFightLevel
			Write16(pSkill, 0); //AttachLen

			len = pSkill - pPKPetInfo;
			Set16(pPKPetInfo, (WORD)len);
			pPKPetInfo += len;
		}
		Write32(pPKPetInfo, 0); //FightPower
		Write32(pPKPetInfo, 0); //Attribute[]
		Write8(pPKPetInfo, 0); //IsTopFightLevel
		Write32(pPKPetInfo, 0); //HPIncByStatus
		Write8(pPKPetInfo, 0); //HPIncPercent
		Write8(pPKPetInfo, 0); //Status
		Write32(pPKPetInfo, 0); //MaxFightPower
		Write16(pPKPetInfo, 0); //AttrMotivateLevel[]

		len = pPKPetInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasNext

	len = p - buf;
	SendToClient(Client, 21148, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyAddPet(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	{ //PetInfo
		BYTE* pPetInfo = p;
		Write16(pPetInfo, 0); //len

		Write32(pPetInfo, 0); //Uin
		Write32(pPetInfo, 0); //PetId
		WriteString(pPetInfo, 0); //PetName[]
		Write8(pPetInfo, 0); //IsProper
		Write16(pPetInfo, 0); //LevelLimit
		Write16(pPetInfo, 0); //Level
		Write32(pPetInfo, 0); //CurLevelExp
		Write32(pPetInfo, 0); //CurLevelMaxExp
		Write8(pPetInfo, 0); //Status
		Write16(pPetInfo, 0); //PL
		Write16(pPetInfo, 0); //TotalPL
		Write16(pPetInfo, 0); //PetSkillNum
		for (size_t i = 0; i < n; i++)
		{ //PetSkillList
			BYTE* pPetSkillList = pPetInfo;
			Write16(pPetSkillList, 0); //len

			Write16(pPetSkillList, 0); //SkillID
			Write8(pPetSkillList, 0); //Status
			Write8(pPetSkillList, 0); //Active
			Write32(pPetSkillList, 0); //Value

			len = pPetSkillList - pPetInfo;
			Set16(pPetInfo, (WORD)len);
			pPetInfo += len;
		}
		Write32(pPetInfo, 0); //StrengLevel
		Write8(pPetInfo, 0); //TopStatus
		{ //CommonInfo
			BYTE* pCommonInfo = pPetInfo;
			Write16(pCommonInfo, 0); //len

			Write32(pCommonInfo, 0); //HuanHuaLevel
			Write8(pCommonInfo, 0); //CanHuanHua

			len = pCommonInfo - pPetInfo;
			Set16(pPetInfo, (WORD)len);
			pPetInfo += len;
		}

		len = pPetInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //PetPKInfo
		BYTE* pPetPKInfo = p;
		Write16(pPetPKInfo, 0); //len

		Write32(pPetPKInfo, 0); //PetId
		Write8(pPetPKInfo, 0); //PetType
		Write16(pPetPKInfo, 0); //FightLevel
		Write16(pPetPKInfo, 0); //Star
		Write32(pPetPKInfo, 0); //CurLevelExp
		Write32(pPetPKInfo, 0); //CurLevelTotalExp
		Write16(pPetPKInfo, 0); //ExtraPotentialByStar[]
		Write32(pPetPKInfo, 0); //SkillNum
		for (size_t i = 0; i < n; i++)
		{ //Skill
			BYTE* pSkill = pPetPKInfo;
			Write16(pSkill, 0); //len

			Write32(pSkill, 0); //SkillID
			Write16(pSkill, 0); //SkillLevel
			Write8(pSkill, 0); //SkillType
			Write8(pSkill, 0); //IsCanLevelUp
			Write16(pSkill, 0); //LevelUpFightLevel
			Write16(pSkill, 0); //AttachLen

			len = pSkill - pPetPKInfo;
			Set16(pPetPKInfo, (WORD)len);
			pPetPKInfo += len;
		}
		Write32(pPetPKInfo, 0); //FightPower
		Write32(pPetPKInfo, 0); //Attribute[]
		Write8(pPetPKInfo, 0); //IsTopFightLevel
		Write32(pPetPKInfo, 0); //HPIncByStatus
		Write8(pPetPKInfo, 0); //HPIncPercent
		Write8(pPetPKInfo, 0); //Status
		Write32(pPetPKInfo, 0); //MaxFightPower
		Write16(pPetPKInfo, 0); //AttrMotivateLevel[]

		len = pPetPKInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 586, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestImprovePKPet(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR ImproveType = Read8(p);
	int PetId = Read32(p);
	int SkillID = Read32(p);
	UCHAR SkillType = Read8(p);
	int ExpItemID = Read32(p);
	int ExpItemNum = Read32(p);
	int[] Para[] = Read32(p);

}

void ResponseImprovePKPet(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //Time
	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen
	Write8(p, 0); //ImproveType
	Write32(p, 0); //SkillID
	Write8(p, 0); //SkillType
	{ //PetInfo
		BYTE* pPetInfo = p;
		Write16(pPetInfo, 0); //len

		Write32(pPetInfo, 0); //PetId
		Write8(pPetInfo, 0); //PetType
		Write16(pPetInfo, 0); //FightLevel
		Write16(pPetInfo, 0); //Star
		Write32(pPetInfo, 0); //CurLevelExp
		Write32(pPetInfo, 0); //CurLevelTotalExp
		Write16(pPetInfo, 0); //ExtraPotentialByStar[]
		Write32(pPetInfo, 0); //SkillNum
		for (size_t i = 0; i < n; i++)
		{ //Skill
			BYTE* pSkill = pPetInfo;
			Write16(pSkill, 0); //len

			Write32(pSkill, 0); //SkillID
			Write16(pSkill, 0); //SkillLevel
			Write8(pSkill, 0); //SkillType
			Write8(pSkill, 0); //IsCanLevelUp
			Write16(pSkill, 0); //LevelUpFightLevel
			Write16(pSkill, 0); //AttachLen

			len = pSkill - pPetInfo;
			Set16(pPetInfo, (WORD)len);
			pPetInfo += len;
		}
		Write32(pPetInfo, 0); //FightPower
		Write32(pPetInfo, 0); //Attribute[]
		Write8(pPetInfo, 0); //IsTopFightLevel
		Write32(pPetInfo, 0); //HPIncByStatus
		Write8(pPetInfo, 0); //HPIncPercent
		Write8(pPetInfo, 0); //Status
		Write32(pPetInfo, 0); //MaxFightPower
		Write16(pPetInfo, 0); //AttrMotivateLevel[]

		len = pPetInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //DiffFightPower
	Write32(p, 0); //Para0
	Write32(p, 0); //Para1

	len = p - buf;
	SendToClient(Client, 21134, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetPKPetCfg(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetPKPetCfg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen
	{ //PKPetCfg
		BYTE* pPKPetCfg = p;
		Write16(pPKPetCfg, 0); //len

		Write8(pPKPetCfg, 0); //ExpItemNum
		for (size_t i = 0; i < n; i++)
		{ //ExpItemInfo
			BYTE* pExpItemInfo = pPKPetCfg;
			Write16(pExpItemInfo, 0); //len

			Write32(pExpItemInfo, 0); //ExpItemID
			Write32(pExpItemInfo, 0); //PetCoinNum

			len = pExpItemInfo - pPKPetCfg;
			Set16(pPKPetCfg, (WORD)len);
			pPKPetCfg += len;
		}
		Write16(pPKPetCfg, 0); //StarLevelNum
		for (size_t i = 0; i < n; i++)
		{ //IncStarItemInfo
			BYTE* pIncStarItemInfo = pPKPetCfg;
			Write16(pIncStarItemInfo, 0); //len

			Write32(pIncStarItemInfo, 0); //Level
			Write32(pIncStarItemInfo, 0); //ItemID
			Write32(pIncStarItemInfo, 0); //ItemNum
			Write32(pIncStarItemInfo, 0); //PetCoinNum
			Write8(pIncStarItemInfo, 0); //Probability

			len = pIncStarItemInfo - pPKPetCfg;
			Set16(pPKPetCfg, (WORD)len);
			pPKPetCfg += len;
		}
		Write16(pPKPetCfg, 0); //NormalSkillLevelNum
		for (size_t i = 0; i < n; i++)
		{ //IncNormalSkillItemInfo
			BYTE* pIncNormalSkillItemInfo = pPKPetCfg;
			Write16(pIncNormalSkillItemInfo, 0); //len

			Write32(pIncNormalSkillItemInfo, 0); //Level
			Write32(pIncNormalSkillItemInfo, 0); //ItemID
			Write32(pIncNormalSkillItemInfo, 0); //ItemNum
			Write32(pIncNormalSkillItemInfo, 0); //PetCoinNum
			Write8(pIncNormalSkillItemInfo, 0); //Probability

			len = pIncNormalSkillItemInfo - pPKPetCfg;
			Set16(pPKPetCfg, (WORD)len);
			pPKPetCfg += len;
		}
		Write16(pPKPetCfg, 0); //PowerSkillLevelNum
		for (size_t i = 0; i < n; i++)
		{ //IncPowerSkillItemInfo
			BYTE* pIncPowerSkillItemInfo = pPKPetCfg;
			Write16(pIncPowerSkillItemInfo, 0); //len

			Write32(pIncPowerSkillItemInfo, 0); //Level
			Write32(pIncPowerSkillItemInfo, 0); //ItemID
			Write32(pIncPowerSkillItemInfo, 0); //ItemNum
			Write32(pIncPowerSkillItemInfo, 0); //PetCoinNum
			Write8(pIncPowerSkillItemInfo, 0); //Probability

			len = pIncPowerSkillItemInfo - pPKPetCfg;
			Set16(pPKPetCfg, (WORD)len);
			pPKPetCfg += len;
		}
		Write16(pPKPetCfg, 0); //PetCfgNum
		for (size_t i = 0; i < n; i++)
		{ //PetCfg
			BYTE* pPetCfg = pPKPetCfg;
			Write16(pPetCfg, 0); //len

			Write32(pPetCfg, 0); //PetID
			Write8(pPetCfg, 0); //ProfType
			Write8(pPetCfg, 0); //Rarity
			Write32(pPetCfg, 0); //SkillNum
			for (size_t i = 0; i < n; i++)
			{ //Skill
				BYTE* pSkill = pPetCfg;
				Write16(pSkill, 0); //len

				Write32(pSkill, 0); //SkillID
				Write16(pSkill, 0); //TackEffectLevel
				Write16(pSkill, 0); //AttachLen

				len = pSkill - pPetCfg;
				Set16(pPetCfg, (WORD)len);
				pPetCfg += len;
			}
			Write32(pPetCfg, 0); //FightPower
			Write32(pPetCfg, 0); //Attribute[]
			Write8(pPetCfg, 0); //HasSpecialPowerSkill
			Write32(pPetCfg, 0); //MaxFightPower

			len = pPetCfg - pPKPetCfg;
			Set16(pPKPetCfg, (WORD)len);
			pPKPetCfg += len;
		}
		Write16(pPKPetCfg, 0); //PetSkillCfgNum
		for (size_t i = 0; i < n; i++)
		{ //PetSkillCfg
			BYTE* pPetSkillCfg = pPKPetCfg;
			Write16(pPetSkillCfg, 0); //len

			Write32(pPetSkillCfg, 0); //SkillID
			Write8(pPetSkillCfg, 0); //Type
			Write16(pPetSkillCfg, 0); //SkillStar

			len = pPetSkillCfg - pPKPetCfg;
			Set16(pPKPetCfg, (WORD)len);
			pPKPetCfg += len;
		}
		{ //SkillWakeUpCfg
			BYTE* pSkillWakeUpCfg = pPKPetCfg;
			Write16(pSkillWakeUpCfg, 0); //len

			Write32(pSkillWakeUpCfg, 0); //ItemID
			Write32(pSkillWakeUpCfg, 0); //ItemNum
			Write16(pSkillWakeUpCfg, 0); //FightLevel

			len = pSkillWakeUpCfg - pPKPetCfg;
			Set16(pPKPetCfg, (WORD)len);
			pPKPetCfg += len;
		}
		for (size_t i = 0; i < n; i++)
		{ //AttrPotentailCfg
			BYTE* pAttrPotentailCfg = pPKPetCfg;
			Write16(pAttrPotentailCfg, 0); //len

			Write8(pAttrPotentailCfg, 0); //ProfType
			for (size_t i = 0; i < n; i++)
			{ //BaseAttrPotential
				BYTE* pBaseAttrPotential = pAttrPotentailCfg;
				Write16(pBaseAttrPotential, 0); //len

				Write8(pBaseAttrPotential, 0); //Rarity
				Write16(pBaseAttrPotential, 0); //PotentialAttr[]

				len = pBaseAttrPotential - pAttrPotentailCfg;
				Set16(pAttrPotentailCfg, (WORD)len);
				pAttrPotentailCfg += len;
			}

			len = pAttrPotentailCfg - pPKPetCfg;
			Set16(pPKPetCfg, (WORD)len);
			pPKPetCfg += len;
		}
		for (size_t i = 0; i < n; i++)
		{ //StarPotentailCfg
			BYTE* pStarPotentailCfg = pPKPetCfg;
			Write16(pStarPotentailCfg, 0); //len

			Write8(pStarPotentailCfg, 0); //Rarity
			Write16(pStarPotentailCfg, 0); //StarAttr[]

			len = pStarPotentailCfg - pPKPetCfg;
			Set16(pPKPetCfg, (WORD)len);
			pPKPetCfg += len;
		}
		for (size_t i = 0; i < n; i++)
		{ //AttrCfg
			BYTE* pAttrCfg = pPKPetCfg;
			Write16(pAttrCfg, 0); //len

			Write8(pAttrCfg, 0); //ProfType
			for (size_t i = 0; i < n; i++)
			{ //BaseAttr
				BYTE* pBaseAttr = pAttrCfg;
				Write16(pBaseAttr, 0); //len

				Write8(pBaseAttr, 0); //Rarity
				Write16(pBaseAttr, 0); //BaseAttr[]

				len = pBaseAttr - pAttrCfg;
				Set16(pAttrCfg, (WORD)len);
				pAttrCfg += len;
			}

			len = pAttrCfg - pPKPetCfg;
			Set16(pPKPetCfg, (WORD)len);
			pPKPetCfg += len;
		}
		{ //EmbattleCfg
			BYTE* pEmbattleCfg = pPKPetCfg;
			Write16(pEmbattleCfg, 0); //len

			Write32(pEmbattleCfg, 0); //HealthAddition[]
			Write32(pEmbattleCfg, 0); //FrontRowDefenseAddition[]
			Write32(pEmbattleCfg, 0); //BackRowAttackAddition[]
			Write32(pEmbattleCfg, 0); //DamageTreatAddition[]
			Write32(pEmbattleCfg, 0); //EmbattlePetNum

			len = pEmbattleCfg - pPKPetCfg;
			Set16(pPKPetCfg, (WORD)len);
			pPKPetCfg += len;
		}
		Write16(pPKPetCfg, 0); //AttrMotivateLevelNum
		for (size_t i = 0; i < n; i++)
		{ //AttrMotivateCfg
			BYTE* pAttrMotivateCfg = pPKPetCfg;
			Write16(pAttrMotivateCfg, 0); //len

			Write32(pAttrMotivateCfg, 0); //Level
			Write32(pAttrMotivateCfg, 0); //ItemID
			Write32(pAttrMotivateCfg, 0); //ItemNum
			Write32(pAttrMotivateCfg, 0); //PetCoinNum
			Write32(pAttrMotivateCfg, 0); //AttrInc

			len = pAttrMotivateCfg - pPKPetCfg;
			Set16(pPKPetCfg, (WORD)len);
			pPKPetCfg += len;
		}
		Write16(pPKPetCfg, 0); //StarRefreshLevelNum
		for (size_t i = 0; i < n; i++)
		{ //StarRefreshCfg
			BYTE* pStarRefreshCfg = pPKPetCfg;
			Write16(pStarRefreshCfg, 0); //len

			Write32(pStarRefreshCfg, 0); //Level
			Write32(pStarRefreshCfg, 0); //ItemID
			Write32(pStarRefreshCfg, 0); //ItemNum
			Write32(pStarRefreshCfg, 0); //PetCoinNum
			Write8(pStarRefreshCfg, 0); //Probability

			len = pStarRefreshCfg - pPKPetCfg;
			Set16(pPKPetCfg, (WORD)len);
			pPKPetCfg += len;
		}
		{ //BattleArrayCfg
			BYTE* pBattleArrayCfg = pPKPetCfg;
			Write16(pBattleArrayCfg, 0); //len

			Write8(pBattleArrayCfg, 0); //InitArrayID
			Write8(pBattleArrayCfg, 0); //ArrayCfgNum
			for (size_t i = 0; i < n; i++)
			{ //PetPkArrayCfg
				BYTE* pPetPkArrayCfg = pBattleArrayCfg;
				Write16(pPetPkArrayCfg, 0); //len

				Write8(pPetPkArrayCfg, 0); //ArrayID
				Write8(pPetPkArrayCfg, 0); //NameLen
				Write16(pPetPkArrayCfg, 0); //DescLen
				Write8(pPetPkArrayCfg, 0); //LevelCfgNum
				for (size_t i = 0; i < n; i++)
				{ //ArrayLevelCfg
					BYTE* pArrayLevelCfg = pPetPkArrayCfg;
					Write16(pArrayLevelCfg, 0); //len

					Write8(pArrayLevelCfg, 0); //Level
					Write8(pArrayLevelCfg, 0); //CostItemCfgNum
					for (size_t i = 0; i < n; i++)
					{ //CostItem
						BYTE* pCostItem = pArrayLevelCfg;
						Write16(pCostItem, 0); //len

						Write32(pCostItem, 0); //ItemID
						Write32(pCostItem, 0); //ConsumeNum

						len = pCostItem - pArrayLevelCfg;
						Set16(pArrayLevelCfg, (WORD)len);
						pArrayLevelCfg += len;
					}
					Write8(pArrayLevelCfg, 0); //ArraySeatNum
					for (size_t i = 0; i < n; i++)
					{ //ArraySeatCfg
						BYTE* pArraySeatCfg = pArrayLevelCfg;
						Write16(pArraySeatCfg, 0); //len

						Write8(pArraySeatCfg, 0); //SeatID
						Write8(pArraySeatCfg, 0); //SeatEffectNum
						for (size_t i = 0; i < n; i++)
						{ //SeatEffect
							BYTE* pSeatEffect = pArraySeatCfg;
							Write16(pSeatEffect, 0); //len

							Write8(pSeatEffect, 0); //ArraySeatEffectType
							Write8(pSeatEffect, 0); //ParaNum
							Write32(pSeatEffect, 0); //Para[]
							Write32(pSeatEffect, 0); //PetAttrEffectFactor[]
							Write32(pSeatEffect, 0); //MaxPetAttrEffectFactor

							len = pSeatEffect - pArraySeatCfg;
							Set16(pArraySeatCfg, (WORD)len);
							pArraySeatCfg += len;
						}
						Write8(pArraySeatCfg, 0); //RecomPetType

						len = pArraySeatCfg - pArrayLevelCfg;
						Set16(pArrayLevelCfg, (WORD)len);
						pArrayLevelCfg += len;
					}

					len = pArrayLevelCfg - pPetPkArrayCfg;
					Set16(pPetPkArrayCfg, (WORD)len);
					pPetPkArrayCfg += len;
				}

				len = pPetPkArrayCfg - pBattleArrayCfg;
				Set16(pBattleArrayCfg, (WORD)len);
				pBattleArrayCfg += len;
			}
			Write32(pBattleArrayCfg, 0); //BeginDate
			Write32(pBattleArrayCfg, 0); //EndDate
			Write32(pBattleArrayCfg, 0); //OpenTime
			Write32(pBattleArrayCfg, 0); //CloseTime

			len = pBattleArrayCfg - pPKPetCfg;
			Set16(pPKPetCfg, (WORD)len);
			pPKPetCfg += len;
		}

		len = pPKPetCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasMoreInfo

	len = p - buf;
	SendToClient(Client, 21140, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyGetPKPetMoreCfg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //PetCfgNum
	for (size_t i = 0; i < n; i++)
	{ //PetCfg
		BYTE* pPetCfg = p;
		Write16(pPetCfg, 0); //len

		Write32(pPetCfg, 0); //PetID
		Write8(pPetCfg, 0); //ProfType
		Write8(pPetCfg, 0); //Rarity
		Write32(pPetCfg, 0); //SkillNum
		for (size_t i = 0; i < n; i++)
		{ //Skill
			BYTE* pSkill = pPetCfg;
			Write16(pSkill, 0); //len

			Write32(pSkill, 0); //SkillID
			Write16(pSkill, 0); //TackEffectLevel
			Write16(pSkill, 0); //AttachLen

			len = pSkill - pPetCfg;
			Set16(pPetCfg, (WORD)len);
			pPetCfg += len;
		}
		Write32(pPetCfg, 0); //FightPower
		Write32(pPetCfg, 0); //Attribute[]
		Write8(pPetCfg, 0); //HasSpecialPowerSkill
		Write32(pPetCfg, 0); //MaxFightPower

		len = pPetCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasNext

	len = p - buf;
	SendToClient(Client, 21149, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestPKChallengeMonster(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR ChallengeType = Read8(p);
	UINT MonsterID = Read32(p);
	UINT LevelID = Read32(p);

}

void RequestMonsterChallengeHistoryInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseMonsterChallengeHistoryInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //FirstKilledAwardFactor
	Write16(p, 0); //LevelNums
	for (size_t i = 0; i < n; i++)
	{ //LevelUnLockInfos
		BYTE* pLevelUnLockInfos = p;
		Write16(pLevelUnLockInfos, 0); //len

		Write32(pLevelUnLockInfos, 0); //LevelValue
		Write32(pLevelUnLockInfos, 0); //LowFightPower
		Write32(pLevelUnLockInfos, 0); //HighFightPower

		len = pLevelUnLockInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //ChallengeLevelNum
	for (size_t i = 0; i < n; i++)
	{ //PetPKChallengeInfos
		BYTE* pPetPKChallengeInfos = p;
		Write16(pPetPKChallengeInfos, 0); //len

		Write8(pPetPKChallengeInfos, 0); //LevelID
		Write16(pPetPKChallengeInfos, 0); //LevelNums
		for (size_t i = 0; i < n; i++)
		{ //MonsterInfos
			BYTE* pMonsterInfos = pPetPKChallengeInfos;
			Write16(pMonsterInfos, 0); //len

			Write32(pMonsterInfos, 0); //MonsterID
			Write32(pMonsterInfos, 0); //MonsterItemID
			Write8(pMonsterInfos, 0); //MonsterName[]
			Write32(pMonsterInfos, 0); //SuggestedFightPower
			Write8(pMonsterInfos, 0); //HaveKilled
			Write16(pMonsterInfos, 0); //AwardItemNums
			for (size_t i = 0; i < n; i++)
			{ //AwardItemInfo
				BYTE* pAwardItemInfo = pMonsterInfos;
				Write16(pAwardItemInfo, 0); //len

				Write32(pAwardItemInfo, 0); //ItemID
				Write32(pAwardItemInfo, 0); //ItemNums
				Write32(pAwardItemInfo, 0); //AvailPeriod

				len = pAwardItemInfo - pMonsterInfos;
				Set16(pMonsterInfos, (WORD)len);
				pMonsterInfos += len;
			}
			Write16(pMonsterInfos, 0); //LuckyAwardItemNums
			for (size_t i = 0; i < n; i++)
			{ //LuckyAwardItemInfo
				BYTE* pLuckyAwardItemInfo = pMonsterInfos;
				Write16(pLuckyAwardItemInfo, 0); //len

				Write32(pLuckyAwardItemInfo, 0); //ItemID
				Write32(pLuckyAwardItemInfo, 0); //ItemNums
				Write32(pLuckyAwardItemInfo, 0); //AvailPeriod

				len = pLuckyAwardItemInfo - pMonsterInfos;
				Set16(pMonsterInfos, (WORD)len);
				pMonsterInfos += len;
			}
			Write8(pMonsterInfos, 0); //HaveKilledFirstly
			Write8(pMonsterInfos, 0); //MonsterStatus

			len = pMonsterInfos - pPetPKChallengeInfos;
			Set16(pPetPKChallengeInfos, (WORD)len);
			pPetPKChallengeInfos += len;
		}

		len = pPetPKChallengeInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HaveSpecialAward
	Write16(p, 0); //SpecialAwardNums
	for (size_t i = 0; i < n; i++)
	{ //SpecialMonsterInfo
		BYTE* pSpecialMonsterInfo = p;
		Write16(pSpecialMonsterInfo, 0); //len

		Write8(pSpecialMonsterInfo, 0); //LevelID
		Write16(pSpecialMonsterInfo, 0); //LevelStat
		Write16(pSpecialMonsterInfo, 0); //LuckyPetType
		{ //MonsterInfo
			BYTE* pMonsterInfo = pSpecialMonsterInfo;
			Write16(pMonsterInfo, 0); //len

			Write32(pMonsterInfo, 0); //MonsterID
			Write32(pMonsterInfo, 0); //MonsterItemID
			Write8(pMonsterInfo, 0); //MonsterName[]
			Write32(pMonsterInfo, 0); //SuggestedFightPower
			Write8(pMonsterInfo, 0); //HaveKilled
			Write16(pMonsterInfo, 0); //AwardItemNums
			for (size_t i = 0; i < n; i++)
			{ //AwardItemInfo
				BYTE* pAwardItemInfo = pMonsterInfo;
				Write16(pAwardItemInfo, 0); //len

				Write32(pAwardItemInfo, 0); //ItemID
				Write32(pAwardItemInfo, 0); //ItemNums
				Write32(pAwardItemInfo, 0); //AvailPeriod

				len = pAwardItemInfo - pMonsterInfo;
				Set16(pMonsterInfo, (WORD)len);
				pMonsterInfo += len;
			}
			Write16(pMonsterInfo, 0); //LuckyAwardItemNums
			for (size_t i = 0; i < n; i++)
			{ //LuckyAwardItemInfo
				BYTE* pLuckyAwardItemInfo = pMonsterInfo;
				Write16(pLuckyAwardItemInfo, 0); //len

				Write32(pLuckyAwardItemInfo, 0); //ItemID
				Write32(pLuckyAwardItemInfo, 0); //ItemNums
				Write32(pLuckyAwardItemInfo, 0); //AvailPeriod

				len = pLuckyAwardItemInfo - pMonsterInfo;
				Set16(pMonsterInfo, (WORD)len);
				pMonsterInfo += len;
			}
			Write8(pMonsterInfo, 0); //HaveKilledFirstly
			Write8(pMonsterInfo, 0); //MonsterStatus

			len = pMonsterInfo - pSpecialMonsterInfo;
			Set16(pSpecialMonsterInfo, (WORD)len);
			pSpecialMonsterInfo += len;
		}

		len = pSpecialMonsterInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 21138, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyClientChallengeMonsterResultInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ChallengeRet
	Write8(p, 0); //HaveSpecialAward
	Write16(p, 0); //SpecialAwardNums
	for (size_t i = 0; i < n; i++)
	{ //SpecialMonsterInfo
		BYTE* pSpecialMonsterInfo = p;
		Write16(pSpecialMonsterInfo, 0); //len

		Write8(pSpecialMonsterInfo, 0); //LevelID
		Write16(pSpecialMonsterInfo, 0); //LevelStat
		Write16(pSpecialMonsterInfo, 0); //LuckyPetType
		{ //MonsterInfo
			BYTE* pMonsterInfo = pSpecialMonsterInfo;
			Write16(pMonsterInfo, 0); //len

			Write32(pMonsterInfo, 0); //MonsterID
			Write32(pMonsterInfo, 0); //MonsterItemID
			Write8(pMonsterInfo, 0); //MonsterName[]
			Write32(pMonsterInfo, 0); //SuggestedFightPower
			Write8(pMonsterInfo, 0); //HaveKilled
			Write16(pMonsterInfo, 0); //AwardItemNums
			for (size_t i = 0; i < n; i++)
			{ //AwardItemInfo
				BYTE* pAwardItemInfo = pMonsterInfo;
				Write16(pAwardItemInfo, 0); //len

				Write32(pAwardItemInfo, 0); //ItemID
				Write32(pAwardItemInfo, 0); //ItemNums
				Write32(pAwardItemInfo, 0); //AvailPeriod

				len = pAwardItemInfo - pMonsterInfo;
				Set16(pMonsterInfo, (WORD)len);
				pMonsterInfo += len;
			}
			Write16(pMonsterInfo, 0); //LuckyAwardItemNums
			for (size_t i = 0; i < n; i++)
			{ //LuckyAwardItemInfo
				BYTE* pLuckyAwardItemInfo = pMonsterInfo;
				Write16(pLuckyAwardItemInfo, 0); //len

				Write32(pLuckyAwardItemInfo, 0); //ItemID
				Write32(pLuckyAwardItemInfo, 0); //ItemNums
				Write32(pLuckyAwardItemInfo, 0); //AvailPeriod

				len = pLuckyAwardItemInfo - pMonsterInfo;
				Set16(pMonsterInfo, (WORD)len);
				pMonsterInfo += len;
			}
			Write8(pMonsterInfo, 0); //HaveKilledFirstly
			Write8(pMonsterInfo, 0); //MonsterStatus

			len = pMonsterInfo - pSpecialMonsterInfo;
			Set16(pSpecialMonsterInfo, (WORD)len);
			pSpecialMonsterInfo += len;
		}

		len = pSpecialMonsterInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //BasePetPkCoinNums
	Write32(p, 0); //LuckyPetPKCoinNums
	Write16(p, 0); //AwardItemNums
	for (size_t i = 0; i < n; i++)
	{ //AwardItemInfo
		BYTE* pAwardItemInfo = p;
		Write16(pAwardItemInfo, 0); //len

		Write32(pAwardItemInfo, 0); //ItemID
		Write32(pAwardItemInfo, 0); //ItemNums
		Write32(pAwardItemInfo, 0); //AvailPeriod

		len = pAwardItemInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 21139, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestPetTrialInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT TeamID = Read16(p);

}

void ResponsePetTrialInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write8(p, 0); //TrialNum
	for (size_t i = 0; i < n; i++)
	{ //PetTrialInfos
		BYTE* pPetTrialInfos = p;
		Write16(pPetTrialInfos, 0); //len

		Write8(pPetTrialInfos, 0); //TrialName[]
		Write8(pPetTrialInfos, 0); //WeekDayNum
		WriteUn(pPetTrialInfos, 0); //aucWeekDays[]
		Write8(pPetTrialInfos, 0); //TrialLevelNum
		for (size_t i = 0; i < n; i++)
		{ //TrialLevelInfos
			BYTE* pTrialLevelInfos = pPetTrialInfos;
			Write16(pTrialLevelInfos, 0); //len

			Write8(pTrialLevelInfos, 0); //LevelID
			Write32(pTrialLevelInfos, 0); //MonsterCaptainID
			Write8(pTrialLevelInfos, 0); //MonsterName[]
			Write32(pTrialLevelInfos, 0); //MonsterPower
			Write32(pTrialLevelInfos, 0); //MinFightPower
			Write8(pTrialLevelInfos, 0); //ArrayID
			Write8(pTrialLevelInfos, 0); //MonsterNum
			for (size_t i = 0; i < n; i++)
			{ //MonsterInfo
				BYTE* pMonsterInfo = pTrialLevelInfos;
				Write16(pMonsterInfo, 0); //len

				Write32(pMonsterInfo, 0); //MonsterItemID
				Write8(pMonsterInfo, 0); //SeatID
				Write8(pMonsterInfo, 0); //FormLevel
				Write16(pMonsterInfo, 0); //SkillNums
				for (size_t i = 0; i < n; i++)
				{ //NormalSkillInfos
					BYTE* pNormalSkillInfos = pMonsterInfo;
					Write16(pNormalSkillInfos, 0); //len

					Write16(pNormalSkillInfos, 0); //SkillID
					Write16(pNormalSkillInfos, 0); //SkillLevel

					len = pNormalSkillInfos - pMonsterInfo;
					Set16(pMonsterInfo, (WORD)len);
					pMonsterInfo += len;
				}
				Write16(pMonsterInfo, 0); //AngerSkillNums
				for (size_t i = 0; i < n; i++)
				{ //AngerSkillInfos
					BYTE* pAngerSkillInfos = pMonsterInfo;
					Write16(pAngerSkillInfos, 0); //len

					Write16(pAngerSkillInfos, 0); //SkillID
					Write16(pAngerSkillInfos, 0); //SkillLevel

					len = pAngerSkillInfos - pMonsterInfo;
					Set16(pMonsterInfo, (WORD)len);
					pMonsterInfo += len;
				}
				Write16(pMonsterInfo, 0); //SpecialAngerSkillNums
				for (size_t i = 0; i < n; i++)
				{ //SpecialAngerSkillInfos
					BYTE* pSpecialAngerSkillInfos = pMonsterInfo;
					Write16(pSpecialAngerSkillInfos, 0); //len

					Write16(pSpecialAngerSkillInfos, 0); //SkillID
					Write16(pSpecialAngerSkillInfos, 0); //SkillLevel

					len = pSpecialAngerSkillInfos - pMonsterInfo;
					Set16(pMonsterInfo, (WORD)len);
					pMonsterInfo += len;
				}
				Write8(pMonsterInfo, 0); //AttrNum
				Write32(pMonsterInfo, 0); //FinalAttr[]

				len = pMonsterInfo - pTrialLevelInfos;
				Set16(pTrialLevelInfos, (WORD)len);
				pTrialLevelInfos += len;
			}
			{ //FirstAward
				BYTE* pFirstAward = pTrialLevelInfos;
				Write16(pFirstAward, 0); //len

				Write8(pFirstAward, 0); //AwardItemNum
				for (size_t i = 0; i < n; i++)
				{ //AwardItemInfo
					BYTE* pAwardItemInfo = pFirstAward;
					Write16(pAwardItemInfo, 0); //len

					Write32(pAwardItemInfo, 0); //ItemID
					Write32(pAwardItemInfo, 0); //ItemNums
					Write32(pAwardItemInfo, 0); //AvailPeriod

					len = pAwardItemInfo - pFirstAward;
					Set16(pFirstAward, (WORD)len);
					pFirstAward += len;
				}

				len = pFirstAward - pTrialLevelInfos;
				Set16(pTrialLevelInfos, (WORD)len);
				pTrialLevelInfos += len;
			}
			{ //BaseAward
				BYTE* pBaseAward = pTrialLevelInfos;
				Write16(pBaseAward, 0); //len

				Write8(pBaseAward, 0); //AwardItemNum
				for (size_t i = 0; i < n; i++)
				{ //BaseAwardItems
					BYTE* pBaseAwardItems = pBaseAward;
					Write16(pBaseAwardItems, 0); //len

					Write32(pBaseAwardItems, 0); //ItemID
					Write32(pBaseAwardItems, 0); //MinNum
					Write32(pBaseAwardItems, 0); //MaxNum

					len = pBaseAwardItems - pBaseAward;
					Set16(pBaseAward, (WORD)len);
					pBaseAward += len;
				}

				len = pBaseAward - pTrialLevelInfos;
				Set16(pTrialLevelInfos, (WORD)len);
				pTrialLevelInfos += len;
			}
			Write8(pTrialLevelInfos, 0); //TrialState
			Write8(pTrialLevelInfos, 0); //PerfectRoudNum
			Write8(pTrialLevelInfos, 0); //StarNum
			Write8(pTrialLevelInfos, 0); //Label
			Write8(pTrialLevelInfos, 0); //FirstAwardState
			Write8(pTrialLevelInfos, 0); //ArrayLevel

			len = pTrialLevelInfos - pPetTrialInfos;
			Set16(pPetTrialInfos, (WORD)len);
			pPetTrialInfos += len;
		}
		Write8(pPetTrialInfos, 0); //BossType
		Write8(pPetTrialInfos, 0); //TeamID
		Write8(pPetTrialInfos, 0); //IsOpen

		len = pPetTrialInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //LeftChallengeNum
	Write16(p, 0); //LeftSpecialChallengeNum

	len = p - buf;
	SendToClient(Client, 21150, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetChatRoomPetPKInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetChatRoomPetPKInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write32(p, 0); //TimesEachDay
	Write32(p, 0); //TimesRemain
	Write32(p, 0); //CoolDownTime
	Write32(p, 0); //RemainCoolDownTime

	len = p - buf;
	SendToClient(Client, 21143, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetPetPKRankedMatchInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetPetPKRankedMatchInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write32(p, 0); //TotalFightPower
	Write32(p, 0); //Level
	Write32(p, 0); //Score
	Write32(p, 0); //NextLevelMinScore
	Write32(p, 0); //SeasonRemainHours
	{ //TimeLimit
		BYTE* pTimeLimit = p;
		Write16(pTimeLimit, 0); //len

		Write32(pTimeLimit, 0); //OpenTime
		Write32(pTimeLimit, 0); //CloseTime

		len = pTimeLimit - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //DailyFreeMatchTime
	Write32(p, 0); //MaxDailyFreeMatchTime
	Write32(p, 0); //DailyCostMatchTime
	Write32(p, 0); //MaxDailyCostMatchTime
	Write32(p, 0); //PiPeiQuanID
	Write32(p, 0); //DailyWorshipTimes
	Write32(p, 0); //MaxDailyWorshipTimes
	Write32(p, 0); //Pause
	for (size_t i = 0; i < n; i++)
	{ //AwardInfo
		BYTE* pAwardInfo = p;
		Write16(pAwardInfo, 0); //len

		Write32(pAwardInfo, 0); //Para0
		Write32(pAwardInfo, 0); //Para1
		Write8(pAwardInfo, 0); //HasAward
		for (size_t i = 0; i < n; i++)
		{ //Award
			BYTE* pAward = pAwardInfo;
			Write16(pAward, 0); //len

			Write32(pAward, 0); //Exp
			Write32(pAward, 0); //Money
			Write32(pAward, 0); //SuperMoney
			Write16(pAward, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAward;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAward;
				Set16(pAward, (WORD)len);
				pAward += len;
			}
			Write32(pAward, 0); //Coupons
			Write32(pAward, 0); //GuildPoint
			Write32(pAward, 0); //LuckMoney
			Write8(pAward, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAward;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAward;
				Set16(pAward, (WORD)len);
				pAward += len;
			}
			Write32(pAward, 0); //SpeedCoin

			len = pAward - pAwardInfo;
			Set16(pAwardInfo, (WORD)len);
			pAwardInfo += len;
		}

		len = pAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //SeasonTime
		BYTE* pSeasonTime = p;
		Write16(pSeasonTime, 0); //len

		Write32(pSeasonTime, 0); //OpenTime
		Write32(pSeasonTime, 0); //CloseTime

		len = pSeasonTime - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //WorshipInfo
		BYTE* pWorshipInfo = p;
		Write16(pWorshipInfo, 0); //len

		Write16(pWorshipInfo, 0); //Num
		Write32(pWorshipInfo, 0); //Uin[]

		len = pWorshipInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 21144, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestPetPKWorship(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT DstUin = Read32(p);
	char[] NickName[] = ReadString(p);

}

void ResponsePetPKWorship(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write32(p, 0); //DstUin
	WriteString(p, 0); //NickName[]
	Write32(p, 0); //DailyWorshipTimes
	Write8(p, 0); //HasAward
	for (size_t i = 0; i < n; i++)
	{ //Award
		BYTE* pAward = p;
		Write16(pAward, 0); //len

		Write32(pAward, 0); //Exp
		Write32(pAward, 0); //Money
		Write32(pAward, 0); //SuperMoney
		Write16(pAward, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAward;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write32(pAward, 0); //Coupons
		Write32(pAward, 0); //GuildPoint
		Write32(pAward, 0); //LuckMoney
		Write8(pAward, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAward;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write32(pAward, 0); //SpeedCoin

		len = pAward - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 21145, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyPetPKBeWorshipedAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write8(p, 0); //HasAward
	for (size_t i = 0; i < n; i++)
	{ //Award
		BYTE* pAward = p;
		Write16(pAward, 0); //len

		Write32(pAward, 0); //Exp
		Write32(pAward, 0); //Money
		Write32(pAward, 0); //SuperMoney
		Write16(pAward, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAward;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write32(pAward, 0); //Coupons
		Write32(pAward, 0); //GuildPoint
		Write32(pAward, 0); //LuckMoney
		Write8(pAward, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAward;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write32(pAward, 0); //SpeedCoin

		len = pAward - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 21146, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetFightPowerByStar(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	int PetId = Read32(p);
	short ExtraPotentialByStar[] = Read16(p);
	char UseType = Read8(p);

}

void ResponseGetFightPowerByStar(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write32(p, 0); //PetId
	Write16(p, 0); //ExtraPotentialByStar[]
	Write32(p, 0); //FightPower
	Write32(p, 0); //Attribute[]
	Write8(p, 0); //UseType

	len = p - buf;
	SendToClient(Client, 21147, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyClientCommonServerError(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 24454, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestDoActionInChatsvrd(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int ActionID = Read32(p);
	char ParaNum = Read8(p);
	int[] Para[] = Read32(p);

}

void ResponseDoActionInChatsvrd(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestReceiveGolumBallBoxAward(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	short BoxType = Read16(p);

}

void ResponseReceiveGolumBallBoxAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	{ //AwardInfo
		BYTE* pAwardInfo = p;
		Write16(pAwardInfo, 0); //len

		Write32(pAwardInfo, 0); //Exp
		Write32(pAwardInfo, 0); //Money
		Write32(pAwardInfo, 0); //SuperMoney
		Write16(pAwardInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAwardInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAwardInfo;
			Set16(pAwardInfo, (WORD)len);
			pAwardInfo += len;
		}
		Write32(pAwardInfo, 0); //Coupons
		Write32(pAwardInfo, 0); //GuildPoint
		Write32(pAwardInfo, 0); //LuckMoney
		Write8(pAwardInfo, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAwardInfo;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAwardInfo;
			Set16(pAwardInfo, (WORD)len);
			pAwardInfo += len;
		}
		Write32(pAwardInfo, 0); //SpeedCoin

		len = pAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //ReceivedAwardFlag
	Write16(p, 0); //ResultID
	Write32(p, 0); //OpenGollumBallNums

	len = p - buf;
	SendToClient(Client, 24455, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyClientGolumBallAwardInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ReceivedAwardFlag
	Write32(p, 0); //OpenGolumBallNums
	Write16(p, 0); //TreasureBoxNums
	for (size_t i = 0; i < n; i++)
	{ //GolumBallBoxBestQualityAwardInfos
		BYTE* pGolumBallBoxBestQualityAwardInfos = p;
		Write16(pGolumBallBoxBestQualityAwardInfos, 0); //len

		Write16(pGolumBallBoxBestQualityAwardInfos, 0); //BoxType
		Write16(pGolumBallBoxBestQualityAwardInfos, 0); //ActivedNums
		{ //BestQualityAward
			BYTE* pBestQualityAward = pGolumBallBoxBestQualityAwardInfos;
			Write16(pBestQualityAward, 0); //len

			Write32(pBestQualityAward, 0); //Exp
			Write32(pBestQualityAward, 0); //Money
			Write32(pBestQualityAward, 0); //SuperMoney
			Write16(pBestQualityAward, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pBestQualityAward;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pBestQualityAward;
				Set16(pBestQualityAward, (WORD)len);
				pBestQualityAward += len;
			}
			Write32(pBestQualityAward, 0); //Coupons
			Write32(pBestQualityAward, 0); //GuildPoint
			Write32(pBestQualityAward, 0); //LuckMoney
			Write8(pBestQualityAward, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pBestQualityAward;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pBestQualityAward;
				Set16(pBestQualityAward, (WORD)len);
				pBestQualityAward += len;
			}
			Write32(pBestQualityAward, 0); //SpeedCoin

			len = pBestQualityAward - pGolumBallBoxBestQualityAwardInfos;
			Set16(pGolumBallBoxBestQualityAwardInfos, (WORD)len);
			pGolumBallBoxBestQualityAwardInfos += len;
		}

		len = pGolumBallBoxBestQualityAwardInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24456, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetGuildMemberExtendInfoInt(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT GuildID = Read32(p);
	UINT Key = Read32(p);

}

void ResponseGetGuildMemberExtendInfoInt(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write32(p, 0); //GuildID
	Write16(p, 0); //MemberNum
	for (size_t i = 0; i < n; i++)
	{ //GuildMemberValue
		BYTE* pGuildMemberValue = p;
		Write16(pGuildMemberValue, 0); //len

		Write32(pGuildMemberValue, 0); //Uin
		Write32(pGuildMemberValue, 0); //Value
		WriteString(pGuildMemberValue, 0); //NickName[]

		len = pGuildMemberValue - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //Key

	len = p - buf;
	SendToClient(Client, 24457, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestTriggerAction(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT ActionID = Read32(p);

}

void NotifyUpdateKartPhysparam(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //KartID
	Write8(p, 0); //PhysInfoCount
	for (size_t i = 0; i < n; i++)
	{ //PhysInfo
		BYTE* pPhysInfo = p;
		Write16(pPhysInfo, 0); //len

		Write32(pPhysInfo, 0); //PID
		Write32(pPhysInfo, 0); //AffectID
		Write32(pPhysInfo, 0); //Param
		Write32(pPhysInfo, 0); //LifeTime

		len = pPhysInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyKuangBaoAddEnergy(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //Add
	Write16(p, 0); //NumAfterAdd
	Write16(p, 0); //Total
	Write8(p, 0); //IsFull

	len = p - buf;
	SendToClient(Client, 24458, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestKuangBaoEnter(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseKuangBaoEnter(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write32(p, 0); //LeftSeconds
	Write16(p, 0); //N2OJiasudu
	Write16(p, 0); //N2OLength

	len = p - buf;
	SendToClient(Client, 24459, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyKuangBaoEnd(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin

	len = p - buf;
	SendToClient(Client, 24460, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestKuangBaoReleaseSuperN2O(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT Seq = Read32(p);
	USHORT N2OJiasudu = Read16(p);
	USHORT N2OLength = Read16(p);

}

void ResponseKuangBaoReleaseSuperN2O(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //Seq
	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 24461, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGameModeMapCfg(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	short BaseMode = Read16(p);
	short SubMode = Read16(p);

}

void ResponseGameModeMapCfg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //BaseMode
	Write16(p, 0); //SubMode
	Write16(p, 0); //ResultID
	Write16(p, 0); //Num
	Write32(p, 0); //Maps[]

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestPreGetCommonBoxAward(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT Type = Read16(p);
	int AwardID = Read32(p);
	UCHAR IsShowAllAward = Read8(p);
	int EchoClient = Read32(p);

}

void ResponsePreGetCommonBoxAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //Type
	{ //AwardCfgArray
		BYTE* pAwardCfgArray = p;
		Write16(pAwardCfgArray, 0); //len

		Write8(pAwardCfgArray, 0); //ScoreAwardNum
		for (size_t i = 0; i < n; i++)
		{ //ScoreAwardCfg
			BYTE* pScoreAwardCfg = pAwardCfgArray;
			Write16(pScoreAwardCfg, 0); //len

			Write8(pScoreAwardCfg, 0); //Type
			Write32(pScoreAwardCfg, 0); //StartScore
			{ //AwardInfo
				BYTE* pAwardInfo = pScoreAwardCfg;
				Write16(pAwardInfo, 0); //len

				Write32(pAwardInfo, 0); //Exp
				Write32(pAwardInfo, 0); //Money
				Write32(pAwardInfo, 0); //SuperMoney
				Write16(pAwardInfo, 0); //ItemNum
				for (size_t i = 0; i < n; i++)
				{ //ItemInfo
					BYTE* pItemInfo = pAwardInfo;
					Write16(pItemInfo, 0); //len

					Write32(pItemInfo, 0); //ItemID
					Write32(pItemInfo, 0); //ItemNum
					Write32(pItemInfo, 0); //AvailPeriod
					Write8(pItemInfo, 0); //Status
					WriteUn(pItemInfo, 0); //ObtainTime
					Write32(pItemInfo, 0); //OtherAttribute
					Write16(pItemInfo, 0); //ItemType

					len = pItemInfo - pAwardInfo;
					Set16(pAwardInfo, (WORD)len);
					pAwardInfo += len;
				}
				Write32(pAwardInfo, 0); //Coupons
				Write32(pAwardInfo, 0); //GuildPoint
				Write32(pAwardInfo, 0); //LuckMoney
				Write8(pAwardInfo, 0); //ExtendInfoNum
				for (size_t i = 0; i < n; i++)
				{ //ExtendInfoAward
					BYTE* pExtendInfoAward = pAwardInfo;
					Write16(pExtendInfoAward, 0); //len

					Write16(pExtendInfoAward, 0); //Key
					Write32(pExtendInfoAward, 0); //AddValue
					Write32(pExtendInfoAward, 0); //TotalValue
					Write8(pExtendInfoAward, 0); //ShowPriority
					Write16(pExtendInfoAward, 0); //BuyNeedScore
					Write8(pExtendInfoAward, 0); //OneMatchMaxNum

					len = pExtendInfoAward - pAwardInfo;
					Set16(pAwardInfo, (WORD)len);
					pAwardInfo += len;
				}
				Write32(pAwardInfo, 0); //SpeedCoin

				len = pAwardInfo - pScoreAwardCfg;
				Set16(pScoreAwardCfg, (WORD)len);
				pScoreAwardCfg += len;
			}
			Write8(pScoreAwardCfg, 0); //Status
			Write16(pScoreAwardCfg, 0); //ResultID
			Write16(pScoreAwardCfg, 0); //HasMoreInfo
			for (size_t i = 0; i < n; i++)
			{ //MoreInfo
				BYTE* pMoreInfo = pScoreAwardCfg;
				Write16(pMoreInfo, 0); //len

				Write16(pMoreInfo, 0); //AlreayGetNum
				Write16(pMoreInfo, 0); //MaxGetNum
				Write32(pMoreInfo, 0); //ItemID
				Write32(pMoreInfo, 0); //TimeStart
				Write32(pMoreInfo, 0); //TimeEnd
				Write32(pMoreInfo, 0); //NextAddNumLeftTime
				Write8(pMoreInfo, 0); //Num
				for (size_t i = 0; i < n; i++)
				{ //ComsumeItemArray
					BYTE* pComsumeItemArray = pMoreInfo;
					Write16(pComsumeItemArray, 0); //len

					Write32(pComsumeItemArray, 0); //ItemID
					Write32(pComsumeItemArray, 0); //StartScore
					Write32(pComsumeItemArray, 0); //DiscountStartScore

					len = pComsumeItemArray - pMoreInfo;
					Set16(pMoreInfo, (WORD)len);
					pMoreInfo += len;
				}
				Write8(pMoreInfo, 0); //ClientParaNum
				Write32(pMoreInfo, 0); //ClientParas[]
				Write32(pMoreInfo, 0); //DiscountTimeStart
				Write32(pMoreInfo, 0); //DiscountTimeEnd
				Write8(pMoreInfo, 0); //DiscountStatus
				Write32(pMoreInfo, 0); //LimitPara
				Write8(pMoreInfo, 0); //ItemExchangeType
				Write8(pMoreInfo, 0); //ItemLabelType
				Write16(pMoreInfo, 0); //ShowPriority
				Write8(pMoreInfo, 0); //Para0
				Write32(pMoreInfo, 0); //LastUpdateTime

				len = pMoreInfo - pScoreAwardCfg;
				Set16(pScoreAwardCfg, (WORD)len);
				pScoreAwardCfg += len;
			}
			Write32(pScoreAwardCfg, 0); //PosKey
			Write8(pScoreAwardCfg, 0); //AwardIdx
			Write8(pScoreAwardCfg, 0); //LabelStatus
			Write8(pScoreAwardCfg, 0); //ExtraAwardNum
			for (size_t i = 0; i < n; i++)
			{ //ExtraAwardInfo
				BYTE* pExtraAwardInfo = pScoreAwardCfg;
				Write16(pExtraAwardInfo, 0); //len

				Write32(pExtraAwardInfo, 0); //Exp
				Write32(pExtraAwardInfo, 0); //Money
				Write32(pExtraAwardInfo, 0); //SuperMoney
				Write16(pExtraAwardInfo, 0); //ItemNum
				for (size_t i = 0; i < n; i++)
				{ //ItemInfo
					BYTE* pItemInfo = pExtraAwardInfo;
					Write16(pItemInfo, 0); //len

					Write32(pItemInfo, 0); //ItemID
					Write32(pItemInfo, 0); //ItemNum
					Write32(pItemInfo, 0); //AvailPeriod
					Write8(pItemInfo, 0); //Status
					WriteUn(pItemInfo, 0); //ObtainTime
					Write32(pItemInfo, 0); //OtherAttribute
					Write16(pItemInfo, 0); //ItemType

					len = pItemInfo - pExtraAwardInfo;
					Set16(pExtraAwardInfo, (WORD)len);
					pExtraAwardInfo += len;
				}
				Write32(pExtraAwardInfo, 0); //Coupons
				Write32(pExtraAwardInfo, 0); //GuildPoint
				Write32(pExtraAwardInfo, 0); //LuckMoney
				Write8(pExtraAwardInfo, 0); //ExtendInfoNum
				for (size_t i = 0; i < n; i++)
				{ //ExtendInfoAward
					BYTE* pExtendInfoAward = pExtraAwardInfo;
					Write16(pExtendInfoAward, 0); //len

					Write16(pExtendInfoAward, 0); //Key
					Write32(pExtendInfoAward, 0); //AddValue
					Write32(pExtendInfoAward, 0); //TotalValue
					Write8(pExtendInfoAward, 0); //ShowPriority
					Write16(pExtendInfoAward, 0); //BuyNeedScore
					Write8(pExtendInfoAward, 0); //OneMatchMaxNum

					len = pExtendInfoAward - pExtraAwardInfo;
					Set16(pExtraAwardInfo, (WORD)len);
					pExtraAwardInfo += len;
				}
				Write32(pExtraAwardInfo, 0); //SpeedCoin

				len = pExtraAwardInfo - pScoreAwardCfg;
				Set16(pScoreAwardCfg, (WORD)len);
				pScoreAwardCfg += len;
			}

			len = pScoreAwardCfg - pAwardCfgArray;
			Set16(pAwardCfgArray, (WORD)len);
			pAwardCfgArray += len;
		}

		len = pAwardCfgArray - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //AwardID
	Write32(p, 0); //NextClearLeftTime
	Write8(p, 0); //HasMoreInfo
	Write32(p, 0); //Score
	Write16(p, 0); //LeftGetAwardNum
	Write8(p, 0); //Status
	Write8(p, 0); //EnableMergeSameItem
	Write32(p, 0); //TimeStart
	Write32(p, 0); //TimeEnd
	Write32(p, 0); //SCPara
	Write8(p, 0); //IsShowAllAward
	Write16(p, 0); //ValueNum
	Write32(p, 0); //Values[]
	Write32(p, 0); //EchoClient

	len = p - buf;
	SendToClient(Client, 24465, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyPreGetCommonBoxAwardMore(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	{ //AwardCfgArray
		BYTE* pAwardCfgArray = p;
		Write16(pAwardCfgArray, 0); //len

		Write8(pAwardCfgArray, 0); //ScoreAwardNum
		for (size_t i = 0; i < n; i++)
		{ //ScoreAwardCfg
			BYTE* pScoreAwardCfg = pAwardCfgArray;
			Write16(pScoreAwardCfg, 0); //len

			Write8(pScoreAwardCfg, 0); //Type
			Write32(pScoreAwardCfg, 0); //StartScore
			{ //AwardInfo
				BYTE* pAwardInfo = pScoreAwardCfg;
				Write16(pAwardInfo, 0); //len

				Write32(pAwardInfo, 0); //Exp
				Write32(pAwardInfo, 0); //Money
				Write32(pAwardInfo, 0); //SuperMoney
				Write16(pAwardInfo, 0); //ItemNum
				for (size_t i = 0; i < n; i++)
				{ //ItemInfo
					BYTE* pItemInfo = pAwardInfo;
					Write16(pItemInfo, 0); //len

					Write32(pItemInfo, 0); //ItemID
					Write32(pItemInfo, 0); //ItemNum
					Write32(pItemInfo, 0); //AvailPeriod
					Write8(pItemInfo, 0); //Status
					WriteUn(pItemInfo, 0); //ObtainTime
					Write32(pItemInfo, 0); //OtherAttribute
					Write16(pItemInfo, 0); //ItemType

					len = pItemInfo - pAwardInfo;
					Set16(pAwardInfo, (WORD)len);
					pAwardInfo += len;
				}
				Write32(pAwardInfo, 0); //Coupons
				Write32(pAwardInfo, 0); //GuildPoint
				Write32(pAwardInfo, 0); //LuckMoney
				Write8(pAwardInfo, 0); //ExtendInfoNum
				for (size_t i = 0; i < n; i++)
				{ //ExtendInfoAward
					BYTE* pExtendInfoAward = pAwardInfo;
					Write16(pExtendInfoAward, 0); //len

					Write16(pExtendInfoAward, 0); //Key
					Write32(pExtendInfoAward, 0); //AddValue
					Write32(pExtendInfoAward, 0); //TotalValue
					Write8(pExtendInfoAward, 0); //ShowPriority
					Write16(pExtendInfoAward, 0); //BuyNeedScore
					Write8(pExtendInfoAward, 0); //OneMatchMaxNum

					len = pExtendInfoAward - pAwardInfo;
					Set16(pAwardInfo, (WORD)len);
					pAwardInfo += len;
				}
				Write32(pAwardInfo, 0); //SpeedCoin

				len = pAwardInfo - pScoreAwardCfg;
				Set16(pScoreAwardCfg, (WORD)len);
				pScoreAwardCfg += len;
			}
			Write8(pScoreAwardCfg, 0); //Status
			Write16(pScoreAwardCfg, 0); //ResultID
			Write16(pScoreAwardCfg, 0); //HasMoreInfo
			for (size_t i = 0; i < n; i++)
			{ //MoreInfo
				BYTE* pMoreInfo = pScoreAwardCfg;
				Write16(pMoreInfo, 0); //len

				Write16(pMoreInfo, 0); //AlreayGetNum
				Write16(pMoreInfo, 0); //MaxGetNum
				Write32(pMoreInfo, 0); //ItemID
				Write32(pMoreInfo, 0); //TimeStart
				Write32(pMoreInfo, 0); //TimeEnd
				Write32(pMoreInfo, 0); //NextAddNumLeftTime
				Write8(pMoreInfo, 0); //Num
				for (size_t i = 0; i < n; i++)
				{ //ComsumeItemArray
					BYTE* pComsumeItemArray = pMoreInfo;
					Write16(pComsumeItemArray, 0); //len

					Write32(pComsumeItemArray, 0); //ItemID
					Write32(pComsumeItemArray, 0); //StartScore
					Write32(pComsumeItemArray, 0); //DiscountStartScore

					len = pComsumeItemArray - pMoreInfo;
					Set16(pMoreInfo, (WORD)len);
					pMoreInfo += len;
				}
				Write8(pMoreInfo, 0); //ClientParaNum
				Write32(pMoreInfo, 0); //ClientParas[]
				Write32(pMoreInfo, 0); //DiscountTimeStart
				Write32(pMoreInfo, 0); //DiscountTimeEnd
				Write8(pMoreInfo, 0); //DiscountStatus
				Write32(pMoreInfo, 0); //LimitPara
				Write8(pMoreInfo, 0); //ItemExchangeType
				Write8(pMoreInfo, 0); //ItemLabelType
				Write16(pMoreInfo, 0); //ShowPriority
				Write8(pMoreInfo, 0); //Para0
				Write32(pMoreInfo, 0); //LastUpdateTime

				len = pMoreInfo - pScoreAwardCfg;
				Set16(pScoreAwardCfg, (WORD)len);
				pScoreAwardCfg += len;
			}
			Write32(pScoreAwardCfg, 0); //PosKey
			Write8(pScoreAwardCfg, 0); //AwardIdx
			Write8(pScoreAwardCfg, 0); //LabelStatus
			Write8(pScoreAwardCfg, 0); //ExtraAwardNum
			for (size_t i = 0; i < n; i++)
			{ //ExtraAwardInfo
				BYTE* pExtraAwardInfo = pScoreAwardCfg;
				Write16(pExtraAwardInfo, 0); //len

				Write32(pExtraAwardInfo, 0); //Exp
				Write32(pExtraAwardInfo, 0); //Money
				Write32(pExtraAwardInfo, 0); //SuperMoney
				Write16(pExtraAwardInfo, 0); //ItemNum
				for (size_t i = 0; i < n; i++)
				{ //ItemInfo
					BYTE* pItemInfo = pExtraAwardInfo;
					Write16(pItemInfo, 0); //len

					Write32(pItemInfo, 0); //ItemID
					Write32(pItemInfo, 0); //ItemNum
					Write32(pItemInfo, 0); //AvailPeriod
					Write8(pItemInfo, 0); //Status
					WriteUn(pItemInfo, 0); //ObtainTime
					Write32(pItemInfo, 0); //OtherAttribute
					Write16(pItemInfo, 0); //ItemType

					len = pItemInfo - pExtraAwardInfo;
					Set16(pExtraAwardInfo, (WORD)len);
					pExtraAwardInfo += len;
				}
				Write32(pExtraAwardInfo, 0); //Coupons
				Write32(pExtraAwardInfo, 0); //GuildPoint
				Write32(pExtraAwardInfo, 0); //LuckMoney
				Write8(pExtraAwardInfo, 0); //ExtendInfoNum
				for (size_t i = 0; i < n; i++)
				{ //ExtendInfoAward
					BYTE* pExtendInfoAward = pExtraAwardInfo;
					Write16(pExtendInfoAward, 0); //len

					Write16(pExtendInfoAward, 0); //Key
					Write32(pExtendInfoAward, 0); //AddValue
					Write32(pExtendInfoAward, 0); //TotalValue
					Write8(pExtendInfoAward, 0); //ShowPriority
					Write16(pExtendInfoAward, 0); //BuyNeedScore
					Write8(pExtendInfoAward, 0); //OneMatchMaxNum

					len = pExtendInfoAward - pExtraAwardInfo;
					Set16(pExtraAwardInfo, (WORD)len);
					pExtraAwardInfo += len;
				}
				Write32(pExtraAwardInfo, 0); //SpeedCoin

				len = pExtraAwardInfo - pScoreAwardCfg;
				Set16(pScoreAwardCfg, (WORD)len);
				pScoreAwardCfg += len;
			}

			len = pScoreAwardCfg - pAwardCfgArray;
			Set16(pAwardCfgArray, (WORD)len);
			pAwardCfgArray += len;
		}

		len = pAwardCfgArray - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasNext

	len = p - buf;
	SendToClient(Client, 25206, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetCommonBoxAward(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR AwardIdx = Read8(p);
	USHORT Type = Read16(p);
	int PosKey = Read32(p);

}

void RequestBatchGetCommonBoxAward(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	{ //TypeArray
		BYTE* pTypeArray = p;
		len = Read16(pTypeArray);

		USHORT TypeNum = Read16(pTypeArray);
		for (size_t i = 0; i < n; i++)
		{ //Type
			BYTE* pType = pTypeArray;
			len = Read16(pType);

			USHORT Type = Read16(pType);
			{ //KeyArray
				BYTE* pKeyArray = pType;
				len = Read16(pKeyArray);

				USHORT KeyLen = Read16(pKeyArray);
				for (size_t i = 0; i < n; i++)
				{ //KeyArray
					BYTE* pKeyArray = pKeyArray;
					len = Read16(pKeyArray);

					UCHAR AwardIdx = Read8(pKeyArray);
					int PosKey = Read32(pKeyArray);
					USHORT ResultID = Read16(pKeyArray);
					UCHAR RequestAwardNum = Read8(pKeyArray);
					UCHAR ParaNum = Read8(pKeyArray);
					int[] ParaList[] = Read32(pKeyArray);

					pKeyArray += len;
				}

				pType += len;
			}

			pTypeArray += len;
		}

		p += len;
	}
	UCHAR IsNotMergeAward = Read8(p);

}

void ResponseBatchGetCommonBoxAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //Time
	{ //TypeArray
		BYTE* pTypeArray = p;
		Write16(pTypeArray, 0); //len

		Write16(pTypeArray, 0); //TypeNum
		for (size_t i = 0; i < n; i++)
		{ //Type
			BYTE* pType = pTypeArray;
			Write16(pType, 0); //len

			Write16(pType, 0); //Type
			{ //KeyArray
				BYTE* pKeyArray = pType;
				Write16(pKeyArray, 0); //len

				Write16(pKeyArray, 0); //KeyLen
				for (size_t i = 0; i < n; i++)
				{ //KeyArray
					BYTE* pKeyArray = pKeyArray;
					Write16(pKeyArray, 0); //len

					Write8(pKeyArray, 0); //AwardIdx
					Write32(pKeyArray, 0); //PosKey
					Write16(pKeyArray, 0); //ResultID
					Write8(pKeyArray, 0); //RequestAwardNum
					Write8(pKeyArray, 0); //ParaNum
					Write32(pKeyArray, 0); //ParaList[]

					len = pKeyArray - pKeyArray;
					Set16(pKeyArray, (WORD)len);
					pKeyArray += len;
				}

				len = pKeyArray - pType;
				Set16(pType, (WORD)len);
				pType += len;
			}

			len = pType - pTypeArray;
			Set16(pTypeArray, (WORD)len);
			pTypeArray += len;
		}

		len = pTypeArray - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //Award
		BYTE* pAward = p;
		Write16(pAward, 0); //len

		Write32(pAward, 0); //Exp
		Write32(pAward, 0); //Money
		Write32(pAward, 0); //SuperMoney
		Write16(pAward, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAward;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write32(pAward, 0); //Coupons
		Write32(pAward, 0); //GuildPoint
		Write32(pAward, 0); //LuckMoney
		Write8(pAward, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAward;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write32(pAward, 0); //SpeedCoin

		len = pAward - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //ResultID
	Write8(p, 0); //IsNotMergeAward
	Write8(p, 0); //ExtraAwardNum
	for (size_t i = 0; i < n; i++)
	{ //ExtraAwardInfo
		BYTE* pExtraAwardInfo = p;
		Write16(pExtraAwardInfo, 0); //len

		Write32(pExtraAwardInfo, 0); //Exp
		Write32(pExtraAwardInfo, 0); //Money
		Write32(pExtraAwardInfo, 0); //SuperMoney
		Write16(pExtraAwardInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pExtraAwardInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pExtraAwardInfo;
			Set16(pExtraAwardInfo, (WORD)len);
			pExtraAwardInfo += len;
		}
		Write32(pExtraAwardInfo, 0); //Coupons
		Write32(pExtraAwardInfo, 0); //GuildPoint
		Write32(pExtraAwardInfo, 0); //LuckMoney
		Write8(pExtraAwardInfo, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pExtraAwardInfo;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pExtraAwardInfo;
			Set16(pExtraAwardInfo, (WORD)len);
			pExtraAwardInfo += len;
		}
		Write32(pExtraAwardInfo, 0); //SpeedCoin

		len = pExtraAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 28321, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void ResponseGetCommonBoxAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write8(p, 0); //AwardIdx
	Write16(p, 0); //Type
	{ //Award
		BYTE* pAward = p;
		Write16(pAward, 0); //len

		Write32(pAward, 0); //Exp
		Write32(pAward, 0); //Money
		Write32(pAward, 0); //SuperMoney
		Write16(pAward, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAward;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write32(pAward, 0); //Coupons
		Write32(pAward, 0); //GuildPoint
		Write32(pAward, 0); //LuckMoney
		Write8(pAward, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAward;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write32(pAward, 0); //SpeedCoin

		len = pAward - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //PosKey
	Write32(p, 0); //Score
	Write8(p, 0); //ParaNum
	Write32(p, 0); //ParaList[]

	len = p - buf;
	SendToClient(Client, 24466, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestOpenPetPKJingJiDlg(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseOpenPetPKJingJiDlg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	{ //BoxInfo
		BYTE* pBoxInfo = p;
		Write16(pBoxInfo, 0); //len

		Write32(pBoxInfo, 0); //ScoreDay
		Write32(pBoxInfo, 0); //ScoreWeek
		{ //AwardCfgArrayDay
			BYTE* pAwardCfgArrayDay = pBoxInfo;
			Write16(pAwardCfgArrayDay, 0); //len

			Write8(pAwardCfgArrayDay, 0); //ScoreAwardNum
			for (size_t i = 0; i < n; i++)
			{ //ScoreAwardCfg
				BYTE* pScoreAwardCfg = pAwardCfgArrayDay;
				Write16(pScoreAwardCfg, 0); //len

				Write8(pScoreAwardCfg, 0); //Type
				Write32(pScoreAwardCfg, 0); //StartScore
				{ //AwardInfo
					BYTE* pAwardInfo = pScoreAwardCfg;
					Write16(pAwardInfo, 0); //len

					Write32(pAwardInfo, 0); //Exp
					Write32(pAwardInfo, 0); //Money
					Write32(pAwardInfo, 0); //SuperMoney
					Write16(pAwardInfo, 0); //ItemNum
					for (size_t i = 0; i < n; i++)
					{ //ItemInfo
						BYTE* pItemInfo = pAwardInfo;
						Write16(pItemInfo, 0); //len

						Write32(pItemInfo, 0); //ItemID
						Write32(pItemInfo, 0); //ItemNum
						Write32(pItemInfo, 0); //AvailPeriod
						Write8(pItemInfo, 0); //Status
						WriteUn(pItemInfo, 0); //ObtainTime
						Write32(pItemInfo, 0); //OtherAttribute
						Write16(pItemInfo, 0); //ItemType

						len = pItemInfo - pAwardInfo;
						Set16(pAwardInfo, (WORD)len);
						pAwardInfo += len;
					}
					Write32(pAwardInfo, 0); //Coupons
					Write32(pAwardInfo, 0); //GuildPoint
					Write32(pAwardInfo, 0); //LuckMoney
					Write8(pAwardInfo, 0); //ExtendInfoNum
					for (size_t i = 0; i < n; i++)
					{ //ExtendInfoAward
						BYTE* pExtendInfoAward = pAwardInfo;
						Write16(pExtendInfoAward, 0); //len

						Write16(pExtendInfoAward, 0); //Key
						Write32(pExtendInfoAward, 0); //AddValue
						Write32(pExtendInfoAward, 0); //TotalValue
						Write8(pExtendInfoAward, 0); //ShowPriority
						Write16(pExtendInfoAward, 0); //BuyNeedScore
						Write8(pExtendInfoAward, 0); //OneMatchMaxNum

						len = pExtendInfoAward - pAwardInfo;
						Set16(pAwardInfo, (WORD)len);
						pAwardInfo += len;
					}
					Write32(pAwardInfo, 0); //SpeedCoin

					len = pAwardInfo - pScoreAwardCfg;
					Set16(pScoreAwardCfg, (WORD)len);
					pScoreAwardCfg += len;
				}
				Write8(pScoreAwardCfg, 0); //Status
				Write16(pScoreAwardCfg, 0); //ResultID
				Write16(pScoreAwardCfg, 0); //HasMoreInfo
				for (size_t i = 0; i < n; i++)
				{ //MoreInfo
					BYTE* pMoreInfo = pScoreAwardCfg;
					Write16(pMoreInfo, 0); //len

					Write16(pMoreInfo, 0); //AlreayGetNum
					Write16(pMoreInfo, 0); //MaxGetNum
					Write32(pMoreInfo, 0); //ItemID
					Write32(pMoreInfo, 0); //TimeStart
					Write32(pMoreInfo, 0); //TimeEnd
					Write32(pMoreInfo, 0); //NextAddNumLeftTime
					Write8(pMoreInfo, 0); //Num
					for (size_t i = 0; i < n; i++)
					{ //ComsumeItemArray
						BYTE* pComsumeItemArray = pMoreInfo;
						Write16(pComsumeItemArray, 0); //len

						Write32(pComsumeItemArray, 0); //ItemID
						Write32(pComsumeItemArray, 0); //StartScore
						Write32(pComsumeItemArray, 0); //DiscountStartScore

						len = pComsumeItemArray - pMoreInfo;
						Set16(pMoreInfo, (WORD)len);
						pMoreInfo += len;
					}
					Write8(pMoreInfo, 0); //ClientParaNum
					Write32(pMoreInfo, 0); //ClientParas[]
					Write32(pMoreInfo, 0); //DiscountTimeStart
					Write32(pMoreInfo, 0); //DiscountTimeEnd
					Write8(pMoreInfo, 0); //DiscountStatus
					Write32(pMoreInfo, 0); //LimitPara
					Write8(pMoreInfo, 0); //ItemExchangeType
					Write8(pMoreInfo, 0); //ItemLabelType
					Write16(pMoreInfo, 0); //ShowPriority
					Write8(pMoreInfo, 0); //Para0
					Write32(pMoreInfo, 0); //LastUpdateTime

					len = pMoreInfo - pScoreAwardCfg;
					Set16(pScoreAwardCfg, (WORD)len);
					pScoreAwardCfg += len;
				}
				Write32(pScoreAwardCfg, 0); //PosKey
				Write8(pScoreAwardCfg, 0); //AwardIdx
				Write8(pScoreAwardCfg, 0); //LabelStatus
				Write8(pScoreAwardCfg, 0); //ExtraAwardNum
				for (size_t i = 0; i < n; i++)
				{ //ExtraAwardInfo
					BYTE* pExtraAwardInfo = pScoreAwardCfg;
					Write16(pExtraAwardInfo, 0); //len

					Write32(pExtraAwardInfo, 0); //Exp
					Write32(pExtraAwardInfo, 0); //Money
					Write32(pExtraAwardInfo, 0); //SuperMoney
					Write16(pExtraAwardInfo, 0); //ItemNum
					for (size_t i = 0; i < n; i++)
					{ //ItemInfo
						BYTE* pItemInfo = pExtraAwardInfo;
						Write16(pItemInfo, 0); //len

						Write32(pItemInfo, 0); //ItemID
						Write32(pItemInfo, 0); //ItemNum
						Write32(pItemInfo, 0); //AvailPeriod
						Write8(pItemInfo, 0); //Status
						WriteUn(pItemInfo, 0); //ObtainTime
						Write32(pItemInfo, 0); //OtherAttribute
						Write16(pItemInfo, 0); //ItemType

						len = pItemInfo - pExtraAwardInfo;
						Set16(pExtraAwardInfo, (WORD)len);
						pExtraAwardInfo += len;
					}
					Write32(pExtraAwardInfo, 0); //Coupons
					Write32(pExtraAwardInfo, 0); //GuildPoint
					Write32(pExtraAwardInfo, 0); //LuckMoney
					Write8(pExtraAwardInfo, 0); //ExtendInfoNum
					for (size_t i = 0; i < n; i++)
					{ //ExtendInfoAward
						BYTE* pExtendInfoAward = pExtraAwardInfo;
						Write16(pExtendInfoAward, 0); //len

						Write16(pExtendInfoAward, 0); //Key
						Write32(pExtendInfoAward, 0); //AddValue
						Write32(pExtendInfoAward, 0); //TotalValue
						Write8(pExtendInfoAward, 0); //ShowPriority
						Write16(pExtendInfoAward, 0); //BuyNeedScore
						Write8(pExtendInfoAward, 0); //OneMatchMaxNum

						len = pExtendInfoAward - pExtraAwardInfo;
						Set16(pExtraAwardInfo, (WORD)len);
						pExtraAwardInfo += len;
					}
					Write32(pExtraAwardInfo, 0); //SpeedCoin

					len = pExtraAwardInfo - pScoreAwardCfg;
					Set16(pScoreAwardCfg, (WORD)len);
					pScoreAwardCfg += len;
				}

				len = pScoreAwardCfg - pAwardCfgArrayDay;
				Set16(pAwardCfgArrayDay, (WORD)len);
				pAwardCfgArrayDay += len;
			}

			len = pAwardCfgArrayDay - pBoxInfo;
			Set16(pBoxInfo, (WORD)len);
			pBoxInfo += len;
		}
		{ //AwardCfgArrayWeek
			BYTE* pAwardCfgArrayWeek = pBoxInfo;
			Write16(pAwardCfgArrayWeek, 0); //len

			Write8(pAwardCfgArrayWeek, 0); //ScoreAwardNum
			for (size_t i = 0; i < n; i++)
			{ //ScoreAwardCfg
				BYTE* pScoreAwardCfg = pAwardCfgArrayWeek;
				Write16(pScoreAwardCfg, 0); //len

				Write8(pScoreAwardCfg, 0); //Type
				Write32(pScoreAwardCfg, 0); //StartScore
				{ //AwardInfo
					BYTE* pAwardInfo = pScoreAwardCfg;
					Write16(pAwardInfo, 0); //len

					Write32(pAwardInfo, 0); //Exp
					Write32(pAwardInfo, 0); //Money
					Write32(pAwardInfo, 0); //SuperMoney
					Write16(pAwardInfo, 0); //ItemNum
					for (size_t i = 0; i < n; i++)
					{ //ItemInfo
						BYTE* pItemInfo = pAwardInfo;
						Write16(pItemInfo, 0); //len

						Write32(pItemInfo, 0); //ItemID
						Write32(pItemInfo, 0); //ItemNum
						Write32(pItemInfo, 0); //AvailPeriod
						Write8(pItemInfo, 0); //Status
						WriteUn(pItemInfo, 0); //ObtainTime
						Write32(pItemInfo, 0); //OtherAttribute
						Write16(pItemInfo, 0); //ItemType

						len = pItemInfo - pAwardInfo;
						Set16(pAwardInfo, (WORD)len);
						pAwardInfo += len;
					}
					Write32(pAwardInfo, 0); //Coupons
					Write32(pAwardInfo, 0); //GuildPoint
					Write32(pAwardInfo, 0); //LuckMoney
					Write8(pAwardInfo, 0); //ExtendInfoNum
					for (size_t i = 0; i < n; i++)
					{ //ExtendInfoAward
						BYTE* pExtendInfoAward = pAwardInfo;
						Write16(pExtendInfoAward, 0); //len

						Write16(pExtendInfoAward, 0); //Key
						Write32(pExtendInfoAward, 0); //AddValue
						Write32(pExtendInfoAward, 0); //TotalValue
						Write8(pExtendInfoAward, 0); //ShowPriority
						Write16(pExtendInfoAward, 0); //BuyNeedScore
						Write8(pExtendInfoAward, 0); //OneMatchMaxNum

						len = pExtendInfoAward - pAwardInfo;
						Set16(pAwardInfo, (WORD)len);
						pAwardInfo += len;
					}
					Write32(pAwardInfo, 0); //SpeedCoin

					len = pAwardInfo - pScoreAwardCfg;
					Set16(pScoreAwardCfg, (WORD)len);
					pScoreAwardCfg += len;
				}
				Write8(pScoreAwardCfg, 0); //Status
				Write16(pScoreAwardCfg, 0); //ResultID
				Write16(pScoreAwardCfg, 0); //HasMoreInfo
				for (size_t i = 0; i < n; i++)
				{ //MoreInfo
					BYTE* pMoreInfo = pScoreAwardCfg;
					Write16(pMoreInfo, 0); //len

					Write16(pMoreInfo, 0); //AlreayGetNum
					Write16(pMoreInfo, 0); //MaxGetNum
					Write32(pMoreInfo, 0); //ItemID
					Write32(pMoreInfo, 0); //TimeStart
					Write32(pMoreInfo, 0); //TimeEnd
					Write32(pMoreInfo, 0); //NextAddNumLeftTime
					Write8(pMoreInfo, 0); //Num
					for (size_t i = 0; i < n; i++)
					{ //ComsumeItemArray
						BYTE* pComsumeItemArray = pMoreInfo;
						Write16(pComsumeItemArray, 0); //len

						Write32(pComsumeItemArray, 0); //ItemID
						Write32(pComsumeItemArray, 0); //StartScore
						Write32(pComsumeItemArray, 0); //DiscountStartScore

						len = pComsumeItemArray - pMoreInfo;
						Set16(pMoreInfo, (WORD)len);
						pMoreInfo += len;
					}
					Write8(pMoreInfo, 0); //ClientParaNum
					Write32(pMoreInfo, 0); //ClientParas[]
					Write32(pMoreInfo, 0); //DiscountTimeStart
					Write32(pMoreInfo, 0); //DiscountTimeEnd
					Write8(pMoreInfo, 0); //DiscountStatus
					Write32(pMoreInfo, 0); //LimitPara
					Write8(pMoreInfo, 0); //ItemExchangeType
					Write8(pMoreInfo, 0); //ItemLabelType
					Write16(pMoreInfo, 0); //ShowPriority
					Write8(pMoreInfo, 0); //Para0
					Write32(pMoreInfo, 0); //LastUpdateTime

					len = pMoreInfo - pScoreAwardCfg;
					Set16(pScoreAwardCfg, (WORD)len);
					pScoreAwardCfg += len;
				}
				Write32(pScoreAwardCfg, 0); //PosKey
				Write8(pScoreAwardCfg, 0); //AwardIdx
				Write8(pScoreAwardCfg, 0); //LabelStatus
				Write8(pScoreAwardCfg, 0); //ExtraAwardNum
				for (size_t i = 0; i < n; i++)
				{ //ExtraAwardInfo
					BYTE* pExtraAwardInfo = pScoreAwardCfg;
					Write16(pExtraAwardInfo, 0); //len

					Write32(pExtraAwardInfo, 0); //Exp
					Write32(pExtraAwardInfo, 0); //Money
					Write32(pExtraAwardInfo, 0); //SuperMoney
					Write16(pExtraAwardInfo, 0); //ItemNum
					for (size_t i = 0; i < n; i++)
					{ //ItemInfo
						BYTE* pItemInfo = pExtraAwardInfo;
						Write16(pItemInfo, 0); //len

						Write32(pItemInfo, 0); //ItemID
						Write32(pItemInfo, 0); //ItemNum
						Write32(pItemInfo, 0); //AvailPeriod
						Write8(pItemInfo, 0); //Status
						WriteUn(pItemInfo, 0); //ObtainTime
						Write32(pItemInfo, 0); //OtherAttribute
						Write16(pItemInfo, 0); //ItemType

						len = pItemInfo - pExtraAwardInfo;
						Set16(pExtraAwardInfo, (WORD)len);
						pExtraAwardInfo += len;
					}
					Write32(pExtraAwardInfo, 0); //Coupons
					Write32(pExtraAwardInfo, 0); //GuildPoint
					Write32(pExtraAwardInfo, 0); //LuckMoney
					Write8(pExtraAwardInfo, 0); //ExtendInfoNum
					for (size_t i = 0; i < n; i++)
					{ //ExtendInfoAward
						BYTE* pExtendInfoAward = pExtraAwardInfo;
						Write16(pExtendInfoAward, 0); //len

						Write16(pExtendInfoAward, 0); //Key
						Write32(pExtendInfoAward, 0); //AddValue
						Write32(pExtendInfoAward, 0); //TotalValue
						Write8(pExtendInfoAward, 0); //ShowPriority
						Write16(pExtendInfoAward, 0); //BuyNeedScore
						Write8(pExtendInfoAward, 0); //OneMatchMaxNum

						len = pExtendInfoAward - pExtraAwardInfo;
						Set16(pExtraAwardInfo, (WORD)len);
						pExtraAwardInfo += len;
					}
					Write32(pExtraAwardInfo, 0); //SpeedCoin

					len = pExtraAwardInfo - pScoreAwardCfg;
					Set16(pScoreAwardCfg, (WORD)len);
					pScoreAwardCfg += len;
				}

				len = pScoreAwardCfg - pAwardCfgArrayWeek;
				Set16(pAwardCfgArrayWeek, (WORD)len);
				pAwardCfgArrayWeek += len;
			}

			len = pAwardCfgArrayWeek - pBoxInfo;
			Set16(pBoxInfo, (WORD)len);
			pBoxInfo += len;
		}

		len = pBoxInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //NumUse
	Write16(p, 0); //NumLeft
	Write8(p, 0); //PetNum
	for (size_t i = 0; i < n; i++)
	{ //PetInfo
		BYTE* pPetInfo = p;
		Write16(pPetInfo, 0); //len

		Write16(pPetInfo, 0); //Level
		Write8(pPetInfo, 0); //NickNameHost[]
		Write32(pPetInfo, 0); //Power
		Write32(pPetInfo, 0); //PetID
		Write32(pPetInfo, 0); //HostUin
		Write8(pPetInfo, 0); //FormLevel
		Write8(pPetInfo, 0); //PKArrayID
		Write8(pPetInfo, 0); //PKArrayLevel
		Write32(pPetInfo, 0); //IDs[]

		len = pPetInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //NumUseItem
	Write8(p, 0); //NumLeft

	len = p - buf;
	SendToClient(Client, 24464, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetMagicHouseInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT MagicHouseID = Read16(p);

}

void ResponseGetMagicHouseInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write8(p, 0); //OpenStat
	Write8(p, 0); //ReceiveAllAward
	Write32(p, 0); //OpenStartTime
	Write32(p, 0); //OpenEndTime
	Write16(p, 0); //AwardNums
	for (size_t i = 0; i < n; i++)
	{ //AwardItemInfo
		BYTE* pAwardItemInfo = p;
		Write16(pAwardItemInfo, 0); //len

		Write32(pAwardItemInfo, 0); //ItemID
		Write32(pAwardItemInfo, 0); //ItemNums
		Write32(pAwardItemInfo, 0); //AvailPeriod
		Write16(pAwardItemInfo, 0); //Received
		Write16(pAwardItemInfo, 0); //AwardIndex
		Write16(pAwardItemInfo, 0); //ItemType

		len = pAwardItemInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //CostCallOnItemNums
	Write16(p, 0); //MagicHouseID
	Write32(p, 0); //TimeRemain
	Write32(p, 0); //SaveItemNum
	Write8(p, 0); //TipsFlag
	Write32(p, 0); //CostCallOnItemNumsBeforDiscount
	Write32(p, 0); //CallOnItemID

	len = p - buf;
	SendToClient(Client, 24470, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestMagicHouseCallOn(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT MagicHouseID = Read16(p);

}

void ResponseMagicHouseCallOn(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write32(p, 0); //CostCallOnItemNums
	{ //AwardInfo
		BYTE* pAwardInfo = p;
		Write16(pAwardInfo, 0); //len

		Write32(pAwardInfo, 0); //ItemID
		Write32(pAwardInfo, 0); //ItemNums
		Write32(pAwardInfo, 0); //AvailPeriod
		Write16(pAwardInfo, 0); //Received
		Write16(pAwardInfo, 0); //AwardIndex
		Write16(pAwardInfo, 0); //ItemType

		len = pAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReceiveAllAward
	Write16(p, 0); //MagicHouseID
	Write32(p, 0); //CostCallOnItemNumsBeforDiscount
	Write8(p, 0); //IsFree

	len = p - buf;
	SendToClient(Client, 24471, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyKartTransformersList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ListNums
	for (size_t i = 0; i < n; i++)
	{ //KartTransList
		BYTE* pKartTransList = p;
		Write16(pKartTransList, 0); //len

		WriteUn(pKartTransList, 0); //KartID
		WriteUn(pKartTransList, 0); //TransfomerID
		Write16(pKartTransList, 0); //NameLen

		len = pKartTransList - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 28330, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetKartTransformersInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT KartTransID = Read32(p);

}

void ResponseGetKartTransformersInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write32(p, 0); //KartTransID
	Write16(p, 0); //NameLen
	Write32(p, 0); //CostItemID
	Write16(p, 0); //OneCostNums
	Write16(p, 0); //FiveCostNums
	Write16(p, 0); //PartNums
	for (size_t i = 0; i < n; i++)
	{ //KartTransPart
		BYTE* pKartTransPart = p;
		Write16(pKartTransPart, 0); //len

		Write16(pKartTransPart, 0); //IndexID
		Write16(pKartTransPart, 0); //NameLen
		Write16(pKartTransPart, 0); //DescLen
		Write16(pKartTransPart, 0); //MaxLevel
		Write16(pKartTransPart, 0); //UserLevel

		len = pKartTransPart - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //KartTransAward
		BYTE* pKartTransAward = p;
		Write16(pKartTransAward, 0); //len

		Write32(pKartTransAward, 0); //Exp
		Write32(pKartTransAward, 0); //Money
		Write32(pKartTransAward, 0); //SuperMoney
		Write16(pKartTransAward, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pKartTransAward;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pKartTransAward;
			Set16(pKartTransAward, (WORD)len);
			pKartTransAward += len;
		}
		Write32(pKartTransAward, 0); //Coupons
		Write32(pKartTransAward, 0); //GuildPoint
		Write32(pKartTransAward, 0); //LuckMoney
		Write8(pKartTransAward, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pKartTransAward;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pKartTransAward;
			Set16(pKartTransAward, (WORD)len);
			pKartTransAward += len;
		}
		Write32(pKartTransAward, 0); //SpeedCoin

		len = pKartTransAward - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 28331, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestKartTransAddPower(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT KartID = Read32(p);
	UINT KartTransID = Read32(p);
	USHORT PartIndexID = Read16(p);
	USHORT AddPowerNum = Read16(p);

}

void ResponseKartTransAddPower(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write32(p, 0); //KartID
	Write32(p, 0); //KartTransID
	Write32(p, 0); //CostItemID
	Write16(p, 0); //PartIndexID
	Write16(p, 0); //AddPowerNum
	Write8(p, 0); //PartFull
	Write8(p, 0); //AllPartFull
	Write32(p, 0); //LightAwardDays
	Write8(p, 0); //SuccNum
	{ //RecvAward
		BYTE* pRecvAward = p;
		Write16(pRecvAward, 0); //len

		Write32(pRecvAward, 0); //Exp
		Write32(pRecvAward, 0); //Money
		Write32(pRecvAward, 0); //SuperMoney
		Write16(pRecvAward, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pRecvAward;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pRecvAward;
			Set16(pRecvAward, (WORD)len);
			pRecvAward += len;
		}
		Write32(pRecvAward, 0); //Coupons
		Write32(pRecvAward, 0); //GuildPoint
		Write32(pRecvAward, 0); //LuckMoney
		Write8(pRecvAward, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pRecvAward;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pRecvAward;
			Set16(pRecvAward, (WORD)len);
			pRecvAward += len;
		}
		Write32(pRecvAward, 0); //SpeedCoin

		len = pRecvAward - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //PartFullAward
		BYTE* pPartFullAward = p;
		Write16(pPartFullAward, 0); //len

		Write32(pPartFullAward, 0); //Exp
		Write32(pPartFullAward, 0); //Money
		Write32(pPartFullAward, 0); //SuperMoney
		Write16(pPartFullAward, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pPartFullAward;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pPartFullAward;
			Set16(pPartFullAward, (WORD)len);
			pPartFullAward += len;
		}
		Write32(pPartFullAward, 0); //Coupons
		Write32(pPartFullAward, 0); //GuildPoint
		Write32(pPartFullAward, 0); //LuckMoney
		Write8(pPartFullAward, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pPartFullAward;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pPartFullAward;
			Set16(pPartFullAward, (WORD)len);
			pPartFullAward += len;
		}
		Write32(pPartFullAward, 0); //SpeedCoin

		len = pPartFullAward - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //PartNums
	for (size_t i = 0; i < n; i++)
	{ //KartTransPart
		BYTE* pKartTransPart = p;
		Write16(pKartTransPart, 0); //len

		Write16(pKartTransPart, 0); //IndexID
		Write16(pKartTransPart, 0); //NameLen
		Write16(pKartTransPart, 0); //DescLen
		Write16(pKartTransPart, 0); //MaxLevel
		Write16(pKartTransPart, 0); //UserLevel

		len = pKartTransPart - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //KartTransAward
		BYTE* pKartTransAward = p;
		Write16(pKartTransAward, 0); //len

		Write32(pKartTransAward, 0); //Exp
		Write32(pKartTransAward, 0); //Money
		Write32(pKartTransAward, 0); //SuperMoney
		Write16(pKartTransAward, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pKartTransAward;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pKartTransAward;
			Set16(pKartTransAward, (WORD)len);
			pKartTransAward += len;
		}
		Write32(pKartTransAward, 0); //Coupons
		Write32(pKartTransAward, 0); //GuildPoint
		Write32(pKartTransAward, 0); //LuckMoney
		Write8(pKartTransAward, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pKartTransAward;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pKartTransAward;
			Set16(pKartTransAward, (WORD)len);
			pKartTransAward += len;
		}
		Write32(pKartTransAward, 0); //SpeedCoin

		len = pKartTransAward - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 28332, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyOlympicOpenCfg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	{ //OpenCfg
		BYTE* pOpenCfg = p;
		Write16(pOpenCfg, 0); //len

		Write32(pOpenCfg, 0); //ShowOpenDate
		Write32(pOpenCfg, 0); //ShowCloseDate
		Write32(pOpenCfg, 0); //ShowOpenTime
		Write32(pOpenCfg, 0); //ShowCloseTime

		len = pOpenCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 325, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetOlympicClientCfg(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetOlympicClientCfg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	{ //OlympicClientCfg
		BYTE* pOlympicClientCfg = p;
		Write16(pOlympicClientCfg, 0); //len

		{ //BaseCfg
			BYTE* pBaseCfg = pOlympicClientCfg;
			Write16(pBaseCfg, 0); //len

			Write32(pBaseCfg, 0); //ClientGetGlobalRunCountInterval
			Write32(pBaseCfg, 0); //ClientShowGlobalRunCountIncPerTimeLower
			Write32(pBaseCfg, 0); //ClientShowGlobalRunCountIncPerTimeUpper
			Write32(pBaseCfg, 0); //ClientShowGlobalRunCountIncInterval
			Write32(pBaseCfg, 0); //OlympicMedalId
			Write32(pBaseCfg, 0); //OlympicFlameId

			len = pBaseCfg - pOlympicClientCfg;
			Set16(pOlympicClientCfg, (WORD)len);
			pOlympicClientCfg += len;
		}
		{ //SignUpClientCfg
			BYTE* pSignUpClientCfg = pOlympicClientCfg;
			Write16(pSignUpClientCfg, 0); //len

			{ //AwardToClient
				BYTE* pAwardToClient = pSignUpClientCfg;
				Write16(pAwardToClient, 0); //len

				Write32(pAwardToClient, 0); //Exp
				Write32(pAwardToClient, 0); //Money
				Write32(pAwardToClient, 0); //SuperMoney
				Write16(pAwardToClient, 0); //ItemNum
				for (size_t i = 0; i < n; i++)
				{ //ItemInfo
					BYTE* pItemInfo = pAwardToClient;
					Write16(pItemInfo, 0); //len

					Write32(pItemInfo, 0); //ItemID
					Write32(pItemInfo, 0); //ItemNum
					Write32(pItemInfo, 0); //AvailPeriod
					Write8(pItemInfo, 0); //Status
					WriteUn(pItemInfo, 0); //ObtainTime
					Write32(pItemInfo, 0); //OtherAttribute
					Write16(pItemInfo, 0); //ItemType

					len = pItemInfo - pAwardToClient;
					Set16(pAwardToClient, (WORD)len);
					pAwardToClient += len;
				}
				Write32(pAwardToClient, 0); //Coupons
				Write32(pAwardToClient, 0); //GuildPoint
				Write32(pAwardToClient, 0); //LuckMoney
				Write8(pAwardToClient, 0); //ExtendInfoNum
				for (size_t i = 0; i < n; i++)
				{ //ExtendInfoAward
					BYTE* pExtendInfoAward = pAwardToClient;
					Write16(pExtendInfoAward, 0); //len

					Write16(pExtendInfoAward, 0); //Key
					Write32(pExtendInfoAward, 0); //AddValue
					Write32(pExtendInfoAward, 0); //TotalValue
					Write8(pExtendInfoAward, 0); //ShowPriority
					Write16(pExtendInfoAward, 0); //BuyNeedScore
					Write8(pExtendInfoAward, 0); //OneMatchMaxNum

					len = pExtendInfoAward - pAwardToClient;
					Set16(pAwardToClient, (WORD)len);
					pAwardToClient += len;
				}
				Write32(pAwardToClient, 0); //SpeedCoin

				len = pAwardToClient - pSignUpClientCfg;
				Set16(pSignUpClientCfg, (WORD)len);
				pSignUpClientCfg += len;
			}
			Write32(pSignUpClientCfg, 0); //AppellationType

			len = pSignUpClientCfg - pOlympicClientCfg;
			Set16(pOlympicClientCfg, (WORD)len);
			pOlympicClientCfg += len;
		}
		Write32(pOlympicClientCfg, 0); //MapTopicNum
		for (size_t i = 0; i < n; i++)
		{ //MapTopicAndGlobalRunCountClientCfg
			BYTE* pMapTopicAndGlobalRunCountClientCfg = pOlympicClientCfg;
			Write16(pMapTopicAndGlobalRunCountClientCfg, 0); //len

			Write32(pMapTopicAndGlobalRunCountClientCfg, 0); //MapTopic
			Write32(pMapTopicAndGlobalRunCountClientCfg, 0); //GlobalRunCount
			Write32(pMapTopicAndGlobalRunCountClientCfg, 0); //HasAward
			{ //AwardToClient
				BYTE* pAwardToClient = pMapTopicAndGlobalRunCountClientCfg;
				Write16(pAwardToClient, 0); //len

				Write32(pAwardToClient, 0); //Exp
				Write32(pAwardToClient, 0); //Money
				Write32(pAwardToClient, 0); //SuperMoney
				Write16(pAwardToClient, 0); //ItemNum
				for (size_t i = 0; i < n; i++)
				{ //ItemInfo
					BYTE* pItemInfo = pAwardToClient;
					Write16(pItemInfo, 0); //len

					Write32(pItemInfo, 0); //ItemID
					Write32(pItemInfo, 0); //ItemNum
					Write32(pItemInfo, 0); //AvailPeriod
					Write8(pItemInfo, 0); //Status
					WriteUn(pItemInfo, 0); //ObtainTime
					Write32(pItemInfo, 0); //OtherAttribute
					Write16(pItemInfo, 0); //ItemType

					len = pItemInfo - pAwardToClient;
					Set16(pAwardToClient, (WORD)len);
					pAwardToClient += len;
				}
				Write32(pAwardToClient, 0); //Coupons
				Write32(pAwardToClient, 0); //GuildPoint
				Write32(pAwardToClient, 0); //LuckMoney
				Write8(pAwardToClient, 0); //ExtendInfoNum
				for (size_t i = 0; i < n; i++)
				{ //ExtendInfoAward
					BYTE* pExtendInfoAward = pAwardToClient;
					Write16(pExtendInfoAward, 0); //len

					Write16(pExtendInfoAward, 0); //Key
					Write32(pExtendInfoAward, 0); //AddValue
					Write32(pExtendInfoAward, 0); //TotalValue
					Write8(pExtendInfoAward, 0); //ShowPriority
					Write16(pExtendInfoAward, 0); //BuyNeedScore
					Write8(pExtendInfoAward, 0); //OneMatchMaxNum

					len = pExtendInfoAward - pAwardToClient;
					Set16(pAwardToClient, (WORD)len);
					pAwardToClient += len;
				}
				Write32(pAwardToClient, 0); //SpeedCoin

				len = pAwardToClient - pMapTopicAndGlobalRunCountClientCfg;
				Set16(pMapTopicAndGlobalRunCountClientCfg, (WORD)len);
				pMapTopicAndGlobalRunCountClientCfg += len;
			}

			len = pMapTopicAndGlobalRunCountClientCfg - pOlympicClientCfg;
			Set16(pOlympicClientCfg, (WORD)len);
			pOlympicClientCfg += len;
		}
		{ //MedalProduceCfg
			BYTE* pMedalProduceCfg = pOlympicClientCfg;
			Write16(pMedalProduceCfg, 0); //len

			Write32(pMedalProduceCfg, 0); //MaxGetOlympicMedalCountOneDay
			Write32(pMedalProduceCfg, 0); //MapDifficultyNum
			for (size_t i = 0; i < n; i++)
			{ //MapDifficultyAndAwardCfg
				BYTE* pMapDifficultyAndAwardCfg = pMedalProduceCfg;
				Write16(pMapDifficultyAndAwardCfg, 0); //len

				Write32(pMapDifficultyAndAwardCfg, 0); //Difficulty
				Write32(pMapDifficultyAndAwardCfg, 0); //Probability
				Write32(pMapDifficultyAndAwardCfg, 0); //OlympicMedalCount

				len = pMapDifficultyAndAwardCfg - pMedalProduceCfg;
				Set16(pMedalProduceCfg, (WORD)len);
				pMedalProduceCfg += len;
			}

			len = pMedalProduceCfg - pOlympicClientCfg;
			Set16(pOlympicClientCfg, (WORD)len);
			pOlympicClientCfg += len;
		}
		Write32(pOlympicClientCfg, 0); //BaseModeSetCfgNum
		Write32(pOlympicClientCfg, 0); //BaseModeSetCfg[]
		Write32(pOlympicClientCfg, 0); //MedalExChangeCfgNum
		for (size_t i = 0; i < n; i++)
		{ //MedalExChangeClientCfg
			BYTE* pMedalExChangeClientCfg = pOlympicClientCfg;
			Write16(pMedalExChangeClientCfg, 0); //len

			Write32(pMedalExChangeClientCfg, 0); //MedalCount
			Write32(pMedalExChangeClientCfg, 0); //MaxExChangeCountOneDay
			Write32(pMedalExChangeClientCfg, 0); //OpenDate
			Write32(pMedalExChangeClientCfg, 0); //CloseDate
			Write32(pMedalExChangeClientCfg, 0); //OpenTime
			Write32(pMedalExChangeClientCfg, 0); //CloseTime
			{ //AwardToClient
				BYTE* pAwardToClient = pMedalExChangeClientCfg;
				Write16(pAwardToClient, 0); //len

				Write32(pAwardToClient, 0); //Exp
				Write32(pAwardToClient, 0); //Money
				Write32(pAwardToClient, 0); //SuperMoney
				Write16(pAwardToClient, 0); //ItemNum
				for (size_t i = 0; i < n; i++)
				{ //ItemInfo
					BYTE* pItemInfo = pAwardToClient;
					Write16(pItemInfo, 0); //len

					Write32(pItemInfo, 0); //ItemID
					Write32(pItemInfo, 0); //ItemNum
					Write32(pItemInfo, 0); //AvailPeriod
					Write8(pItemInfo, 0); //Status
					WriteUn(pItemInfo, 0); //ObtainTime
					Write32(pItemInfo, 0); //OtherAttribute
					Write16(pItemInfo, 0); //ItemType

					len = pItemInfo - pAwardToClient;
					Set16(pAwardToClient, (WORD)len);
					pAwardToClient += len;
				}
				Write32(pAwardToClient, 0); //Coupons
				Write32(pAwardToClient, 0); //GuildPoint
				Write32(pAwardToClient, 0); //LuckMoney
				Write8(pAwardToClient, 0); //ExtendInfoNum
				for (size_t i = 0; i < n; i++)
				{ //ExtendInfoAward
					BYTE* pExtendInfoAward = pAwardToClient;
					Write16(pExtendInfoAward, 0); //len

					Write16(pExtendInfoAward, 0); //Key
					Write32(pExtendInfoAward, 0); //AddValue
					Write32(pExtendInfoAward, 0); //TotalValue
					Write8(pExtendInfoAward, 0); //ShowPriority
					Write16(pExtendInfoAward, 0); //BuyNeedScore
					Write8(pExtendInfoAward, 0); //OneMatchMaxNum

					len = pExtendInfoAward - pAwardToClient;
					Set16(pAwardToClient, (WORD)len);
					pAwardToClient += len;
				}
				Write32(pAwardToClient, 0); //SpeedCoin

				len = pAwardToClient - pMedalExChangeClientCfg;
				Set16(pMedalExChangeClientCfg, (WORD)len);
				pMedalExChangeClientCfg += len;
			}

			len = pMedalExChangeClientCfg - pOlympicClientCfg;
			Set16(pOlympicClientCfg, (WORD)len);
			pOlympicClientCfg += len;
		}
		Write32(pOlympicClientCfg, 0); //TorchCfgNum
		for (size_t i = 0; i < n; i++)
		{ //TorchClientCfg
			BYTE* pTorchClientCfg = pOlympicClientCfg;
			Write16(pTorchClientCfg, 0); //len

			Write32(pTorchClientCfg, 0); //FlameCount
			Write32(pTorchClientCfg, 0); //TorchStatus
			{ //AwardToClient
				BYTE* pAwardToClient = pTorchClientCfg;
				Write16(pAwardToClient, 0); //len

				Write32(pAwardToClient, 0); //Exp
				Write32(pAwardToClient, 0); //Money
				Write32(pAwardToClient, 0); //SuperMoney
				Write16(pAwardToClient, 0); //ItemNum
				for (size_t i = 0; i < n; i++)
				{ //ItemInfo
					BYTE* pItemInfo = pAwardToClient;
					Write16(pItemInfo, 0); //len

					Write32(pItemInfo, 0); //ItemID
					Write32(pItemInfo, 0); //ItemNum
					Write32(pItemInfo, 0); //AvailPeriod
					Write8(pItemInfo, 0); //Status
					WriteUn(pItemInfo, 0); //ObtainTime
					Write32(pItemInfo, 0); //OtherAttribute
					Write16(pItemInfo, 0); //ItemType

					len = pItemInfo - pAwardToClient;
					Set16(pAwardToClient, (WORD)len);
					pAwardToClient += len;
				}
				Write32(pAwardToClient, 0); //Coupons
				Write32(pAwardToClient, 0); //GuildPoint
				Write32(pAwardToClient, 0); //LuckMoney
				Write8(pAwardToClient, 0); //ExtendInfoNum
				for (size_t i = 0; i < n; i++)
				{ //ExtendInfoAward
					BYTE* pExtendInfoAward = pAwardToClient;
					Write16(pExtendInfoAward, 0); //len

					Write16(pExtendInfoAward, 0); //Key
					Write32(pExtendInfoAward, 0); //AddValue
					Write32(pExtendInfoAward, 0); //TotalValue
					Write8(pExtendInfoAward, 0); //ShowPriority
					Write16(pExtendInfoAward, 0); //BuyNeedScore
					Write8(pExtendInfoAward, 0); //OneMatchMaxNum

					len = pExtendInfoAward - pAwardToClient;
					Set16(pAwardToClient, (WORD)len);
					pAwardToClient += len;
				}
				Write32(pAwardToClient, 0); //SpeedCoin

				len = pAwardToClient - pTorchClientCfg;
				Set16(pTorchClientCfg, (WORD)len);
				pTorchClientCfg += len;
			}

			len = pTorchClientCfg - pOlympicClientCfg;
			Set16(pOlympicClientCfg, (WORD)len);
			pOlympicClientCfg += len;
		}
		{ //FiveRingCfg
			BYTE* pFiveRingCfg = pOlympicClientCfg;
			Write16(pFiveRingCfg, 0); //len

			Write32(pFiveRingCfg, 0); //OpenDate
			Write32(pFiveRingCfg, 0); //CloseDate
			Write32(pFiveRingCfg, 0); //OpenTime
			Write32(pFiveRingCfg, 0); //CloseTime
			Write32(pFiveRingCfg, 0); //PetAwardId
			Write32(pFiveRingCfg, 0); //PetPeriod
			Write32(pFiveRingCfg, 0); //PetNum
			for (size_t i = 0; i < n; i++)
			{ //RingIdCount
				BYTE* pRingIdCount = pFiveRingCfg;
				Write16(pRingIdCount, 0); //len

				Write32(pRingIdCount, 0); //RingId
				Write32(pRingIdCount, 0); //Count

				len = pRingIdCount - pFiveRingCfg;
				Set16(pFiveRingCfg, (WORD)len);
				pFiveRingCfg += len;
			}

			len = pFiveRingCfg - pOlympicClientCfg;
			Set16(pOlympicClientCfg, (WORD)len);
			pOlympicClientCfg += len;
		}

		len = pOlympicClientCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestOlympicReceiveAward(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int Type = Read32(p);
	UINT AwardIndex = Read32(p);

}

void ResponseOlympicReceiveAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write32(p, 0); //Type
	Write32(p, 0); //AwardIndex
	Write32(p, 0); //LeftExChangeCountOneDay
	{ //AwardToClient
		BYTE* pAwardToClient = p;
		Write16(pAwardToClient, 0); //len

		Write32(pAwardToClient, 0); //Exp
		Write32(pAwardToClient, 0); //Money
		Write32(pAwardToClient, 0); //SuperMoney
		Write16(pAwardToClient, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAwardToClient;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAwardToClient;
			Set16(pAwardToClient, (WORD)len);
			pAwardToClient += len;
		}
		Write32(pAwardToClient, 0); //Coupons
		Write32(pAwardToClient, 0); //GuildPoint
		Write32(pAwardToClient, 0); //LuckMoney
		Write8(pAwardToClient, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAwardToClient;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAwardToClient;
			Set16(pAwardToClient, (WORD)len);
			pAwardToClient += len;
		}
		Write32(pAwardToClient, 0); //SpeedCoin

		len = pAwardToClient - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyOlympicGameMedalDrop(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //OlympicMedalId
	Write32(p, 0); //OlympicMedalCount

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestOlympicSignUp(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseOlympicSignUp(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write32(p, 0); //OlympicId
	{ //AwardToClient
		BYTE* pAwardToClient = p;
		Write16(pAwardToClient, 0); //len

		Write32(pAwardToClient, 0); //Exp
		Write32(pAwardToClient, 0); //Money
		Write32(pAwardToClient, 0); //SuperMoney
		Write16(pAwardToClient, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAwardToClient;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAwardToClient;
			Set16(pAwardToClient, (WORD)len);
			pAwardToClient += len;
		}
		Write32(pAwardToClient, 0); //Coupons
		Write32(pAwardToClient, 0); //GuildPoint
		Write32(pAwardToClient, 0); //LuckMoney
		Write8(pAwardToClient, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAwardToClient;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAwardToClient;
			Set16(pAwardToClient, (WORD)len);
			pAwardToClient += len;
		}
		Write32(pAwardToClient, 0); //SpeedCoin

		len = pAwardToClient - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //AppellationType

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestOlympicInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int HasOlympicPlayerInfo = Read32(p);

}

void ResponseOlympicInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write32(p, 0); //GlobalRunCount
	Write32(p, 0); //HasOlympicPlayerInfo
	for (size_t i = 0; i < n; i++)
	{ //OlympicPlayerInfo
		BYTE* pOlympicPlayerInfo = p;
		Write16(pOlympicPlayerInfo, 0); //len

		Write32(pOlympicPlayerInfo, 0); //MedalExChangeCountOneDay[]
		Write32(pOlympicPlayerInfo, 0); //TorchReceiveAwardStatus
		Write32(pOlympicPlayerInfo, 0); //FiveRingReceiveAwardStatus
		Write32(pOlympicPlayerInfo, 0); //MapTopicUnlockReceiveAwardStatus
		Write32(pOlympicPlayerInfo, 0); //TorchStatus
		Write32(pOlympicPlayerInfo, 0); //GetOlympicMedalCountOneDay
		Write8(pOlympicPlayerInfo, 0); //HasWinner
		for (size_t i = 0; i < n; i++)
		{ //Winner
			BYTE* pWinner = pOlympicPlayerInfo;
			Write16(pWinner, 0); //len

			Write32(pWinner, 0); //Uin
			WriteString(pWinner, 0); //NickName[]
			Write32(pWinner, 0); //Value
			Write8(pWinner, 0); //HasOtherInfo
			for (size_t i = 0; i < n; i++)
			{ //Other
				BYTE* pOther = pWinner;
				Write16(pOther, 0); //len

				Write32(pOther, 0); //IntPara0
				Write32(pOther, 0); //IntPara1
				WriteString(pOther, 0); //StrPara0[]
				WriteString(pOther, 0); //StrPara1[]
				Write32(pOther, 0); //IntPara2
				Write8(pOther, 0); //HasMapInfo
				for (size_t i = 0; i < n; i++)
				{ //MapInfo
					BYTE* pMapInfo = pOther;
					Write16(pMapInfo, 0); //len

					Write8(pMapInfo, 0); //MapItemNum
					for (size_t i = 0; i < n; i++)
					{ //MapItemList
						BYTE* pMapItemList = pMapInfo;
						Write16(pMapItemList, 0); //len

						Write32(pMapItemList, 0); //Uin
						Write8(pMapItemList, 0); //Area

						len = pMapItemList - pMapInfo;
						Set16(pMapInfo, (WORD)len);
						pMapInfo += len;
					}

					len = pMapInfo - pOther;
					Set16(pOther, (WORD)len);
					pOther += len;
				}

				len = pOther - pWinner;
				Set16(pWinner, (WORD)len);
				pWinner += len;
			}
			Write8(pWinner, 0); //AreaId
			Write8(pWinner, 0); //ParaNum
			Write32(pWinner, 0); //Para[]
			Write8(pWinner, 0); //AnchorNum
			for (size_t i = 0; i < n; i++)
			{ //AnchorInfo
				BYTE* pAnchorInfo = pWinner;
				Write16(pAnchorInfo, 0); //len

				Write32(pAnchorInfo, 0); //Uin
				Write32(pAnchorInfo, 0); //RoomID
				Write8(pAnchorInfo, 0); //StrNum

				len = pAnchorInfo - pWinner;
				Set16(pWinner, (WORD)len);
				pWinner += len;
			}

			len = pWinner - pOlympicPlayerInfo;
			Set16(pOlympicPlayerInfo, (WORD)len);
			pOlympicPlayerInfo += len;
		}

		len = pOlympicPlayerInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //SignUpCount

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestDonateFlame(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseDonateFlame(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write32(p, 0); //TorchStatus

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyReportClientInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin

	len = p - buf;
	SendToClient(Client, 24472, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestReportClientInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT Len = Read32(p);

}

void ResponseReportClientInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGiveElKToSantaClaus(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT ElkItemID = Read32(p);

}

void ResponseGiveElkToSantaClaus(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	{ //AwardToClient
		BYTE* pAwardToClient = p;
		Write16(pAwardToClient, 0); //len

		Write32(pAwardToClient, 0); //Exp
		Write32(pAwardToClient, 0); //Money
		Write32(pAwardToClient, 0); //SuperMoney
		Write16(pAwardToClient, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAwardToClient;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAwardToClient;
			Set16(pAwardToClient, (WORD)len);
			pAwardToClient += len;
		}
		Write32(pAwardToClient, 0); //Coupons
		Write32(pAwardToClient, 0); //GuildPoint
		Write32(pAwardToClient, 0); //LuckMoney
		Write8(pAwardToClient, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAwardToClient;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAwardToClient;
			Set16(pAwardToClient, (WORD)len);
			pAwardToClient += len;
		}
		Write32(pAwardToClient, 0); //SpeedCoin

		len = pAwardToClient - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetChritmasDayShowInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetChritmasDayShowInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //GlobalGrabCouponPlayerNums
	Write32(p, 0); //PersonalGrabCouponFreeNums
	Write32(p, 0); //GlobalCouponPoolValue
	Write32(p, 0); //WeeklyCollectChristmasTieNums
	Write32(p, 0); //TotalCollectChristmasTieNums
	Write32(p, 0); //LastGrabCouponPlayerNums

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestStartSpecialAction(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	USHORT SpecialActionID = Read16(p);
	UINT ActionNums = Read32(p);
	UINT Time = Read32(p);

}

void ResponseStartSpecialAction(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //SpecialActionID
	{ //PersonalSpecialActioninfo
		BYTE* pPersonalSpecialActioninfo = p;
		Write16(pPersonalSpecialActioninfo, 0); //len

		Write16(pPersonalSpecialActioninfo, 0); //SpecialActionID
		Write32(pPersonalSpecialActioninfo, 0); //GolobalMagpieBridgeNums
		Write32(pPersonalSpecialActioninfo, 0); //CurrentPlayerMagpieBridgeNums
		Write32(pPersonalSpecialActioninfo, 0); //CurrentGhostRemainingHPValue
		Write32(pPersonalSpecialActioninfo, 0); //TotalGhostHPValue
		Write32(pPersonalSpecialActioninfo, 0); //MoonCakeCookStat
		Write32(pPersonalSpecialActioninfo, 0); //QixiTreasureBoxRecStat
		Write8(pPersonalSpecialActioninfo, 0); //ActivityStatus
		Write8(pPersonalSpecialActioninfo, 0); //HaveAlreayReceZombieAward
		Write32(pPersonalSpecialActioninfo, 0); //CostZombieHPValue
		Write32(pPersonalSpecialActioninfo, 0); //GlobalDevotedCakeEssenceValue
		Write32(pPersonalSpecialActioninfo, 0); //PersonalDevotedCakeEssenceValue
		Write32(pPersonalSpecialActioninfo, 0); //NationalDayBoxReceStat
		Write8(pPersonalSpecialActioninfo, 0); //CanReceFinishAward
		Write32(pPersonalSpecialActioninfo, 0); //WeeklyChristmasTieCollectValue
		Write32(pPersonalSpecialActioninfo, 0); //TotalChrismasTieCollectValue
		Write32(pPersonalSpecialActioninfo, 0); //GlobalGrabCouponPlayerNums
		Write32(pPersonalSpecialActioninfo, 0); //PersonalGrabCouponNums
		Write8(pPersonalSpecialActioninfo, 0); //HaveReceChristmasDailyWelfare

		len = pPersonalSpecialActioninfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //CanReceFinishAward
	{ //AwardToClient
		BYTE* pAwardToClient = p;
		Write16(pAwardToClient, 0); //len

		Write32(pAwardToClient, 0); //Exp
		Write32(pAwardToClient, 0); //Money
		Write32(pAwardToClient, 0); //SuperMoney
		Write16(pAwardToClient, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAwardToClient;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAwardToClient;
			Set16(pAwardToClient, (WORD)len);
			pAwardToClient += len;
		}
		Write32(pAwardToClient, 0); //Coupons
		Write32(pAwardToClient, 0); //GuildPoint
		Write32(pAwardToClient, 0); //LuckMoney
		Write8(pAwardToClient, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAwardToClient;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAwardToClient;
			Set16(pAwardToClient, (WORD)len);
			pAwardToClient += len;
		}
		Write32(pAwardToClient, 0); //SpeedCoin

		len = pAwardToClient - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24480, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestReceSpecialActionAward(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT SpecialActionID = Read16(p);
	USHORT AwardType = Read16(p);
	USHORT TreasureAwardIndex = Read16(p);

}

void ResponseReceSpecialActionAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //SpecialActionID
	Write16(p, 0); //AwardType
	{ //AwardToClient
		BYTE* pAwardToClient = p;
		Write16(pAwardToClient, 0); //len

		Write32(pAwardToClient, 0); //Exp
		Write32(pAwardToClient, 0); //Money
		Write32(pAwardToClient, 0); //SuperMoney
		Write16(pAwardToClient, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAwardToClient;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAwardToClient;
			Set16(pAwardToClient, (WORD)len);
			pAwardToClient += len;
		}
		Write32(pAwardToClient, 0); //Coupons
		Write32(pAwardToClient, 0); //GuildPoint
		Write32(pAwardToClient, 0); //LuckMoney
		Write8(pAwardToClient, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAwardToClient;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAwardToClient;
			Set16(pAwardToClient, (WORD)len);
			pAwardToClient += len;
		}
		Write32(pAwardToClient, 0); //SpeedCoin

		len = pAwardToClient - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //PersonalSpecialActioninfo
		BYTE* pPersonalSpecialActioninfo = p;
		Write16(pPersonalSpecialActioninfo, 0); //len

		Write16(pPersonalSpecialActioninfo, 0); //SpecialActionID
		Write32(pPersonalSpecialActioninfo, 0); //GolobalMagpieBridgeNums
		Write32(pPersonalSpecialActioninfo, 0); //CurrentPlayerMagpieBridgeNums
		Write32(pPersonalSpecialActioninfo, 0); //CurrentGhostRemainingHPValue
		Write32(pPersonalSpecialActioninfo, 0); //TotalGhostHPValue
		Write32(pPersonalSpecialActioninfo, 0); //MoonCakeCookStat
		Write32(pPersonalSpecialActioninfo, 0); //QixiTreasureBoxRecStat
		Write8(pPersonalSpecialActioninfo, 0); //ActivityStatus
		Write8(pPersonalSpecialActioninfo, 0); //HaveAlreayReceZombieAward
		Write32(pPersonalSpecialActioninfo, 0); //CostZombieHPValue
		Write32(pPersonalSpecialActioninfo, 0); //GlobalDevotedCakeEssenceValue
		Write32(pPersonalSpecialActioninfo, 0); //PersonalDevotedCakeEssenceValue
		Write32(pPersonalSpecialActioninfo, 0); //NationalDayBoxReceStat
		Write8(pPersonalSpecialActioninfo, 0); //CanReceFinishAward
		Write32(pPersonalSpecialActioninfo, 0); //WeeklyChristmasTieCollectValue
		Write32(pPersonalSpecialActioninfo, 0); //TotalChrismasTieCollectValue
		Write32(pPersonalSpecialActioninfo, 0); //GlobalGrabCouponPlayerNums
		Write32(pPersonalSpecialActioninfo, 0); //PersonalGrabCouponNums
		Write8(pPersonalSpecialActioninfo, 0); //HaveReceChristmasDailyWelfare

		len = pPersonalSpecialActioninfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24481, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyClientSpecialActionTreasureBoxInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //TreasureBoxNums
	for (size_t i = 0; i < n; i++)
	{ //TreasureBoxReceStat
		BYTE* pTreasureBoxReceStat = p;
		Write16(pTreasureBoxReceStat, 0); //len

		Write16(pTreasureBoxReceStat, 0); //BoxIndex
		Write16(pTreasureBoxReceStat, 0); //CanRece
		Write16(pTreasureBoxReceStat, 0); //BoxStat

		len = pTreasureBoxReceStat - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24482, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetSpecialActionShowInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetSpecialActionShowInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //SpecialActionID
	Write32(p, 0); //ActionBeginDate
	Write32(p, 0); //ActionEndDate
	Write32(p, 0); //ActionBeginTime
	Write32(p, 0); //ActionEndTime
	{ //PersonalSpecialActionInfo
		BYTE* pPersonalSpecialActionInfo = p;
		Write16(pPersonalSpecialActionInfo, 0); //len

		Write16(pPersonalSpecialActionInfo, 0); //SpecialActionID
		Write32(pPersonalSpecialActionInfo, 0); //GolobalMagpieBridgeNums
		Write32(pPersonalSpecialActionInfo, 0); //CurrentPlayerMagpieBridgeNums
		Write32(pPersonalSpecialActionInfo, 0); //CurrentGhostRemainingHPValue
		Write32(pPersonalSpecialActionInfo, 0); //TotalGhostHPValue
		Write32(pPersonalSpecialActionInfo, 0); //MoonCakeCookStat
		Write32(pPersonalSpecialActionInfo, 0); //QixiTreasureBoxRecStat
		Write8(pPersonalSpecialActionInfo, 0); //ActivityStatus
		Write8(pPersonalSpecialActionInfo, 0); //HaveAlreayReceZombieAward
		Write32(pPersonalSpecialActionInfo, 0); //CostZombieHPValue
		Write32(pPersonalSpecialActionInfo, 0); //GlobalDevotedCakeEssenceValue
		Write32(pPersonalSpecialActionInfo, 0); //PersonalDevotedCakeEssenceValue
		Write32(pPersonalSpecialActionInfo, 0); //NationalDayBoxReceStat
		Write8(pPersonalSpecialActionInfo, 0); //CanReceFinishAward
		Write32(pPersonalSpecialActionInfo, 0); //WeeklyChristmasTieCollectValue
		Write32(pPersonalSpecialActionInfo, 0); //TotalChrismasTieCollectValue
		Write32(pPersonalSpecialActionInfo, 0); //GlobalGrabCouponPlayerNums
		Write32(pPersonalSpecialActionInfo, 0); //PersonalGrabCouponNums
		Write8(pPersonalSpecialActionInfo, 0); //HaveReceChristmasDailyWelfare

		len = pPersonalSpecialActionInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //CookMoonCakeInfoNums
	for (size_t i = 0; i < n; i++)
	{ //CookMoonCakeConsumeFlourInfo
		BYTE* pCookMoonCakeConsumeFlourInfo = p;
		Write16(pCookMoonCakeConsumeFlourInfo, 0); //len

		Write16(pCookMoonCakeConsumeFlourInfo, 0); //CookState
		Write16(pCookMoonCakeConsumeFlourInfo, 0); //ConsumeFlourNums
		Write16(pCookMoonCakeConsumeFlourInfo, 0); //TreasureBoxID

		len = pCookMoonCakeConsumeFlourInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //FinishAwardToClient
		BYTE* pFinishAwardToClient = p;
		Write16(pFinishAwardToClient, 0); //len

		Write32(pFinishAwardToClient, 0); //Exp
		Write32(pFinishAwardToClient, 0); //Money
		Write32(pFinishAwardToClient, 0); //SuperMoney
		Write16(pFinishAwardToClient, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pFinishAwardToClient;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pFinishAwardToClient;
			Set16(pFinishAwardToClient, (WORD)len);
			pFinishAwardToClient += len;
		}
		Write32(pFinishAwardToClient, 0); //Coupons
		Write32(pFinishAwardToClient, 0); //GuildPoint
		Write32(pFinishAwardToClient, 0); //LuckMoney
		Write8(pFinishAwardToClient, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pFinishAwardToClient;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pFinishAwardToClient;
			Set16(pFinishAwardToClient, (WORD)len);
			pFinishAwardToClient += len;
		}
		Write32(pFinishAwardToClient, 0); //SpeedCoin

		len = pFinishAwardToClient - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //TreasureBoxNums
	for (size_t i = 0; i < n; i++)
	{ //SpecialActionTreasureBoxInfo
		BYTE* pSpecialActionTreasureBoxInfo = p;
		Write16(pSpecialActionTreasureBoxInfo, 0); //len

		Write16(pSpecialActionTreasureBoxInfo, 0); //BoxIndex
		Write32(pSpecialActionTreasureBoxInfo, 0); //ActiveGlobalValue
		Write32(pSpecialActionTreasureBoxInfo, 0); //ActivePersonalValue
		{ //AwardToClient
			BYTE* pAwardToClient = pSpecialActionTreasureBoxInfo;
			Write16(pAwardToClient, 0); //len

			Write32(pAwardToClient, 0); //Exp
			Write32(pAwardToClient, 0); //Money
			Write32(pAwardToClient, 0); //SuperMoney
			Write16(pAwardToClient, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAwardToClient;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAwardToClient;
				Set16(pAwardToClient, (WORD)len);
				pAwardToClient += len;
			}
			Write32(pAwardToClient, 0); //Coupons
			Write32(pAwardToClient, 0); //GuildPoint
			Write32(pAwardToClient, 0); //LuckMoney
			Write8(pAwardToClient, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAwardToClient;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAwardToClient;
				Set16(pAwardToClient, (WORD)len);
				pAwardToClient += len;
			}
			Write32(pAwardToClient, 0); //SpeedCoin

			len = pAwardToClient - pSpecialActionTreasureBoxInfo;
			Set16(pSpecialActionTreasureBoxInfo, (WORD)len);
			pSpecialActionTreasureBoxInfo += len;
		}

		len = pSpecialActionTreasureBoxInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //ActionRelatedTaskNums
	for (size_t i = 0; i < n; i++)
	{ //SpecialActionRelatedTaskInfos
		BYTE* pSpecialActionRelatedTaskInfos = p;
		Write16(pSpecialActionRelatedTaskInfos, 0); //len

		Write32(pSpecialActionRelatedTaskInfos, 0); //TaskID
		Write32(pSpecialActionRelatedTaskInfos, 0); //ItemID
		Write32(pSpecialActionRelatedTaskInfos, 0); //AwardItemNums

		len = pSpecialActionRelatedTaskInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //GrabCouponActiviyOpenOrNot
	Write32(p, 0); //GrabCouponOpenTimeStamp
	Write32(p, 0); //GrabCouponCloseTimeStamp
	Write32(p, 0); //AwardCouponValue
	{ //DailyWelfareAward
		BYTE* pDailyWelfareAward = p;
		Write16(pDailyWelfareAward, 0); //len

		Write32(pDailyWelfareAward, 0); //Exp
		Write32(pDailyWelfareAward, 0); //Money
		Write32(pDailyWelfareAward, 0); //SuperMoney
		Write16(pDailyWelfareAward, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pDailyWelfareAward;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pDailyWelfareAward;
			Set16(pDailyWelfareAward, (WORD)len);
			pDailyWelfareAward += len;
		}
		Write32(pDailyWelfareAward, 0); //Coupons
		Write32(pDailyWelfareAward, 0); //GuildPoint
		Write32(pDailyWelfareAward, 0); //LuckMoney
		Write8(pDailyWelfareAward, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pDailyWelfareAward;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pDailyWelfareAward;
			Set16(pDailyWelfareAward, (WORD)len);
			pDailyWelfareAward += len;
		}
		Write32(pDailyWelfareAward, 0); //SpeedCoin

		len = pDailyWelfareAward - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //WeeklyNeededChirtmasDayTieNums
	Write32(p, 0); //TotolNeededChirtmasDayTieNums
	Write32(p, 0); //LastGrabConponPlayerNums
	Write32(p, 0); //ChristmasItemToGrabCouponNumsFact

	len = p - buf;
	SendToClient(Client, 24483, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestReceChristmasDailyAward(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseReceChristmatDailyAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	{ //DailyAwardInfo
		BYTE* pDailyAwardInfo = p;
		Write16(pDailyAwardInfo, 0); //len

		Write32(pDailyAwardInfo, 0); //Exp
		Write32(pDailyAwardInfo, 0); //Money
		Write32(pDailyAwardInfo, 0); //SuperMoney
		Write16(pDailyAwardInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pDailyAwardInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pDailyAwardInfo;
			Set16(pDailyAwardInfo, (WORD)len);
			pDailyAwardInfo += len;
		}
		Write32(pDailyAwardInfo, 0); //Coupons
		Write32(pDailyAwardInfo, 0); //GuildPoint
		Write32(pDailyAwardInfo, 0); //LuckMoney
		Write8(pDailyAwardInfo, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pDailyAwardInfo;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pDailyAwardInfo;
			Set16(pDailyAwardInfo, (WORD)len);
			pDailyAwardInfo += len;
		}
		Write32(pDailyAwardInfo, 0); //SpeedCoin

		len = pDailyAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGrabChristmasCouponAward(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGrabChristmasCouponAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	{ //ChristmasCouponAwardInfo
		BYTE* pChristmasCouponAwardInfo = p;
		Write16(pChristmasCouponAwardInfo, 0); //len

		Write32(pChristmasCouponAwardInfo, 0); //Exp
		Write32(pChristmasCouponAwardInfo, 0); //Money
		Write32(pChristmasCouponAwardInfo, 0); //SuperMoney
		Write16(pChristmasCouponAwardInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pChristmasCouponAwardInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pChristmasCouponAwardInfo;
			Set16(pChristmasCouponAwardInfo, (WORD)len);
			pChristmasCouponAwardInfo += len;
		}
		Write32(pChristmasCouponAwardInfo, 0); //Coupons
		Write32(pChristmasCouponAwardInfo, 0); //GuildPoint
		Write32(pChristmasCouponAwardInfo, 0); //LuckMoney
		Write8(pChristmasCouponAwardInfo, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pChristmasCouponAwardInfo;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pChristmasCouponAwardInfo;
			Set16(pChristmasCouponAwardInfo, (WORD)len);
			pChristmasCouponAwardInfo += len;
		}
		Write32(pChristmasCouponAwardInfo, 0); //SpeedCoin

		len = pChristmasCouponAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetPurplePrivilageCfg(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetPurplePrivilageCfg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //PurpleLev
	Write32(p, 0); //PrimaryLingshiNum
	Write32(p, 0); //SeniorLingshiNum
	Write32(p, 0); //AmethystStonesNum
	{ //PurplePrivilageCfg
		BYTE* pPurplePrivilageCfg = p;
		Write16(pPurplePrivilageCfg, 0); //len

		Write8(pPurplePrivilageCfg, 0); //TabNum
		for (size_t i = 0; i < n; i++)
		{ //PurpleTabList
			BYTE* pPurpleTabList = pPurplePrivilageCfg;
			Write16(pPurpleTabList, 0); //len

			Write8(pPurpleTabList, 0); //TabOrder
			Write8(pPurpleTabList, 0); //TabType
			Write8(pPurpleTabList, 0); //TabAttr
			Write16(pPurpleTabList, 0); //TabNameLen
			Write16(pPurpleTabList, 0); //UrlLen

			len = pPurpleTabList - pPurplePrivilageCfg;
			Set16(pPurplePrivilageCfg, (WORD)len);
			pPurplePrivilageCfg += len;
		}

		len = pPurplePrivilageCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //PurpleMagicBallAwardCfg
		BYTE* pPurpleMagicBallAwardCfg = p;
		Write16(pPurpleMagicBallAwardCfg, 0); //len

		Write8(pPurpleMagicBallAwardCfg, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //PurpleMagicBallAwardListCfg
			BYTE* pPurpleMagicBallAwardListCfg = pPurpleMagicBallAwardCfg;
			Write16(pPurpleMagicBallAwardListCfg, 0); //len

			Write32(pPurpleMagicBallAwardListCfg, 0); //ItemID
			Write32(pPurpleMagicBallAwardListCfg, 0); //ItemNum
			Write32(pPurpleMagicBallAwardListCfg, 0); //AvailPeriod
			Write16(pPurpleMagicBallAwardListCfg, 0); //ItemType

			len = pPurpleMagicBallAwardListCfg - pPurpleMagicBallAwardCfg;
			Set16(pPurpleMagicBallAwardCfg, (WORD)len);
			pPurpleMagicBallAwardCfg += len;
		}

		len = pPurpleMagicBallAwardCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //PurpleExchangeItemListCfg
		BYTE* pPurpleExchangeItemListCfg = p;
		Write16(pPurpleExchangeItemListCfg, 0); //len

		Write8(pPurpleExchangeItemListCfg, 0); //ExchangeLevelNum
		for (size_t i = 0; i < n; i++)
		{ //ItemListCfg
			BYTE* pItemListCfg = pPurpleExchangeItemListCfg;
			Write16(pItemListCfg, 0); //len

			Write8(pItemListCfg, 0); //ExchangeLevel
			Write16(pItemListCfg, 0); //CostStonesNum
			Write16(pItemListCfg, 0); //LimitExchangeNum
			Write8(pItemListCfg, 0); //ItemListNum
			for (size_t i = 0; i < n; i++)
			{ //PurpleAmethystStonesAwardListCfg
				BYTE* pPurpleAmethystStonesAwardListCfg = pItemListCfg;
				Write16(pPurpleAmethystStonesAwardListCfg, 0); //len

				Write32(pPurpleAmethystStonesAwardListCfg, 0); //ItemID
				Write32(pPurpleAmethystStonesAwardListCfg, 0); //ItemNum
				Write32(pPurpleAmethystStonesAwardListCfg, 0); //AvailPeriod
				Write8(pPurpleAmethystStonesAwardListCfg, 0); //LimitFlag

				len = pPurpleAmethystStonesAwardListCfg - pItemListCfg;
				Set16(pItemListCfg, (WORD)len);
				pItemListCfg += len;
			}

			len = pItemListCfg - pPurpleExchangeItemListCfg;
			Set16(pPurpleExchangeItemListCfg, (WORD)len);
			pPurpleExchangeItemListCfg += len;
		}

		len = pPurpleExchangeItemListCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24491, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetPurpleMagicBallAward(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR Type = Read8(p);

}

void ResponseGetPurpleMagicBallAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write8(p, 0); //Type
	Write32(p, 0); //PrimaryLingshiNum
	Write32(p, 0); //SeniorLingshiNum
	Write32(p, 0); //CostPrimaryLingshiNum
	Write32(p, 0); //CostSeniorLingshiNum
	{ //AwardToClient
		BYTE* pAwardToClient = p;
		Write16(pAwardToClient, 0); //len

		Write32(pAwardToClient, 0); //Exp
		Write32(pAwardToClient, 0); //Money
		Write32(pAwardToClient, 0); //SuperMoney
		Write16(pAwardToClient, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAwardToClient;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAwardToClient;
			Set16(pAwardToClient, (WORD)len);
			pAwardToClient += len;
		}
		Write32(pAwardToClient, 0); //Coupons
		Write32(pAwardToClient, 0); //GuildPoint
		Write32(pAwardToClient, 0); //LuckMoney
		Write8(pAwardToClient, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAwardToClient;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAwardToClient;
			Set16(pAwardToClient, (WORD)len);
			pAwardToClient += len;
		}
		Write32(pAwardToClient, 0); //SpeedCoin

		len = pAwardToClient - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24492, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetPurpleExchangeAward(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR Type = Read8(p);
	UINT ItemID = Read32(p);

}

void ResponseGetPurpleExchangeAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write8(p, 0); //Type
	Write32(p, 0); //CostStonesNum
	Write32(p, 0); //StonesNum
	Write32(p, 0); //LimitExchangeItemNum
	{ //AwardToClient
		BYTE* pAwardToClient = p;
		Write16(pAwardToClient, 0); //len

		Write32(pAwardToClient, 0); //Exp
		Write32(pAwardToClient, 0); //Money
		Write32(pAwardToClient, 0); //SuperMoney
		Write16(pAwardToClient, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAwardToClient;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAwardToClient;
			Set16(pAwardToClient, (WORD)len);
			pAwardToClient += len;
		}
		Write32(pAwardToClient, 0); //Coupons
		Write32(pAwardToClient, 0); //GuildPoint
		Write32(pAwardToClient, 0); //LuckMoney
		Write8(pAwardToClient, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAwardToClient;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAwardToClient;
			Set16(pAwardToClient, (WORD)len);
			pAwardToClient += len;
		}
		Write32(pAwardToClient, 0); //SpeedCoin

		len = pAwardToClient - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24493, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestPointChallengeGetGeneralCfg(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT GameType = Read16(p);
	USHORT PointID = Read16(p);

}

void ResponsePointChallengeGetGeneralCfg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //GameType
	Write16(p, 0); //PointID
	Write16(p, 0); //GeneralIDCurUse
	Write8(p, 0); //Num
	for (size_t i = 0; i < n; i++)
	{ //Info
		BYTE* pInfo = p;
		Write16(pInfo, 0); //len

		Write16(pInfo, 0); //GeneralID
		Write32(pInfo, 0); //KartID
		Write32(pInfo, 0); //SkateID
		Write16(pInfo, 0); //UnlockStar
		Write16(pInfo, 0); //UnlockPointID
		Write16(pInfo, 0); //UnlockGeneralID
		Write8(pInfo, 0); //NumPhys
		for (size_t i = 0; i < n; i++)
		{ //PointChallengePhys
			BYTE* pPointChallengePhys = pInfo;
			Write16(pPointChallengePhys, 0); //len

			Write8(pPointChallengePhys, 0); //Idx
			Write16(pPointChallengePhys, 0); //Value

			len = pPointChallengePhys - pInfo;
			Set16(pInfo, (WORD)len);
			pInfo += len;
		}
		Write8(pInfo, 0); //NumStone
		for (size_t i = 0; i < n; i++)
		{ //StoneInfo
			BYTE* pStoneInfo = pInfo;
			Write16(pStoneInfo, 0); //len

			Write32(pStoneInfo, 0); //StoneUseOccaType
			Write32(pStoneInfo, 0); //SkillStoneID

			len = pStoneInfo - pInfo;
			Set16(pInfo, (WORD)len);
			pInfo += len;
		}
		Write8(pInfo, 0); //NumAvatar
		for (size_t i = 0; i < n; i++)
		{ //AvatarChangeGameBeginInfo
			BYTE* pAvatarChangeGameBeginInfo = pInfo;
			Write16(pAvatarChangeGameBeginInfo, 0); //len

			Write32(pAvatarChangeGameBeginInfo, 0); //PlayerUin
			Write32(pAvatarChangeGameBeginInfo, 0); //HairID
			Write32(pAvatarChangeGameBeginInfo, 0); //CoatID
			Write32(pAvatarChangeGameBeginInfo, 0); //TrousersID
			Write32(pAvatarChangeGameBeginInfo, 0); //SuitID
			Write32(pAvatarChangeGameBeginInfo, 0); //KartID
			Write8(pAvatarChangeGameBeginInfo, 0); //HasItemInfo
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAvatarChangeGameBeginInfo;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //RoleID
				Write32(pItemInfo, 0); //HairID
				Write32(pItemInfo, 0); //FaceID
				Write32(pItemInfo, 0); //GlassID
				Write32(pItemInfo, 0); //CoatID
				Write32(pItemInfo, 0); //GloveID
				Write32(pItemInfo, 0); //TrousersID
				Write32(pItemInfo, 0); //PersonarID
				Write32(pItemInfo, 0); //TattooID
				Write32(pItemInfo, 0); //WingID
				Write32(pItemInfo, 0); //DecoratorID
				Write32(pItemInfo, 0); //KartID
				Write32(pItemInfo, 0); //ColorID
				Write32(pItemInfo, 0); //TrackID
				Write32(pItemInfo, 0); //EffectID
				Write32(pItemInfo, 0); //BrandID
				Write32(pItemInfo, 0); //TailID

				len = pItemInfo - pAvatarChangeGameBeginInfo;
				Set16(pAvatarChangeGameBeginInfo, (WORD)len);
				pAvatarChangeGameBeginInfo += len;
			}

			len = pAvatarChangeGameBeginInfo - pInfo;
			Set16(pInfo, (WORD)len);
			pInfo += len;
		}
		Write8(pInfo, 0); //Status
		Write8(pInfo, 0); //MaxHP
		Write8(pInfo, 0); //CurHP
		Write8(pInfo, 0); //MaxFavorability
		Write8(pInfo, 0); //CurFavorability
		Write8(pInfo, 0); //PointNum
		Write16(pInfo, 0); //PointList[]
		Write16(pInfo, 0); //SkillType
		Write8(pInfo, 0); //AddFavorability

		len = pInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24496, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestPointChallengeGetUnlockGeneral(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT GameType = Read16(p);

}

void ResponsePointChallengeGetUnlockGeneral(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //GameType
	Write8(p, 0); //Num
	Write16(p, 0); //GeneralID[]

	len = p - buf;
	SendToClient(Client, 24498, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestPointChallengeChangeGeneral(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT GeneralID = Read16(p);
	USHORT GameType = Read16(p);
	USHORT PointID = Read16(p);

}

void ResponsePointChallengeChangeGeneral(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //GeneralID
	Write16(p, 0); //GameType
	Write16(p, 0); //PointID

	len = p - buf;
	SendToClient(Client, 24497, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestPointChallengeUseGeneral(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT GameType = Read16(p);
	USHORT GeneralID = Read16(p);
	USHORT PointID = Read16(p);

}

void ResponsePointChallengeUseGeneral(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //GameType
	Write16(p, 0); //GeneralID
	Write16(p, 0); //PointID

	len = p - buf;
	SendToClient(Client, 24499, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetThemeHouseShowInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR PlayerGender = Read8(p);

}

void ResponseGetThemeHouseShowInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //CollectionValue
	Write16(p, 0); //ResultID
	Write16(p, 0); //RootThemeNums
	for (size_t i = 0; i < n; i++)
	{ //RootThemeInfos
		BYTE* pRootThemeInfos = p;
		Write16(pRootThemeInfos, 0); //len

		Write8(pRootThemeInfos, 0); //RootThemeID
		Write8(pRootThemeInfos, 0); //ThemeName[]
		WriteUn(pRootThemeInfos, 0); //ChildThemeNums
		for (size_t i = 0; i < n; i++)
		{ //ChildThemeInfos
			BYTE* pChildThemeInfos = pRootThemeInfos;
			Write16(pChildThemeInfos, 0); //len

			Write8(pChildThemeInfos, 0); //ThemeType
			Write8(pChildThemeInfos, 0); //ThemeID
			Write32(pChildThemeInfos, 0); //OpenTime
			Write32(pChildThemeInfos, 0); //CloseTime
			Write8(pChildThemeInfos, 0); //ThemeName[]
			Write16(pChildThemeInfos, 0); //CollectdtThemeItemNums
			Write16(pChildThemeInfos, 0); //ThemeItemNums
			for (size_t i = 0; i < n; i++)
			{ //ThemeItemInfos
				BYTE* pThemeItemInfos = pChildThemeInfos;
				Write16(pThemeItemInfos, 0); //len

				Write8(pThemeItemInfos, 0); //ItemType
				Write8(pThemeItemInfos, 0); //ReceStat
				Write32(pThemeItemInfos, 0); //ItemID[]
				Write32(pThemeItemInfos, 0); //ItemNums
				Write32(pThemeItemInfos, 0); //AvailPeroid
				Write32(pThemeItemInfos, 0); //Index
				Write32(pThemeItemInfos, 0); //CostTreasureFragment
				Write8(pThemeItemInfos, 0); //ExclusiveItem
				Write32(pThemeItemInfos, 0); //CollectValue
				Write8(pThemeItemInfos, 0); //BestQuality
				Write8(pThemeItemInfos, 0); //UrlLen

				len = pThemeItemInfos - pChildThemeInfos;
				Set16(pChildThemeInfos, (WORD)len);
				pChildThemeInfos += len;
			}
			Write8(pChildThemeInfos, 0); //ThemeStat
			Write16(pChildThemeInfos, 0); //ExpAddCfgNums
			for (size_t i = 0; i < n; i++)
			{ //ThemeItemExpAddInfo
				BYTE* pThemeItemExpAddInfo = pChildThemeInfos;
				Write16(pThemeItemExpAddInfo, 0); //len

				Write16(pThemeItemExpAddInfo, 0); //EquippedNums
				Write16(pThemeItemExpAddInfo, 0); //ExpAddValue

				len = pThemeItemExpAddInfo - pChildThemeInfos;
				Set16(pChildThemeInfos, (WORD)len);
				pChildThemeInfos += len;
			}
			Write8(pChildThemeInfos, 0); //CanRecExclusiveAward
			Write16(pChildThemeInfos, 0); //ThemeAppelationNums
			for (size_t i = 0; i < n; i++)
			{ //ThemeAppelationInfo
				BYTE* pThemeAppelationInfo = pChildThemeInfos;
				Write16(pThemeAppelationInfo, 0); //len

				Write16(pThemeAppelationInfo, 0); //EquippedNums
				Write8(pThemeAppelationInfo, 0); //AppelationName[]

				len = pThemeAppelationInfo - pChildThemeInfos;
				Set16(pChildThemeInfos, (WORD)len);
				pChildThemeInfos += len;
			}

			len = pChildThemeInfos - pRootThemeInfos;
			Set16(pRootThemeInfos, (WORD)len);
			pRootThemeInfos += len;
		}

		len = pRootThemeInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasMoreInfo

	len = p - buf;
	SendToClient(Client, 24501, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyClientMoreThemeHouseShowInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write8(p, 0); //HasNext
	Write16(p, 0); //RootThemeNums
	for (size_t i = 0; i < n; i++)
	{ //RootThemeInfos
		BYTE* pRootThemeInfos = p;
		Write16(pRootThemeInfos, 0); //len

		Write8(pRootThemeInfos, 0); //RootThemeID
		Write8(pRootThemeInfos, 0); //ThemeName[]
		WriteUn(pRootThemeInfos, 0); //ChildThemeNums
		for (size_t i = 0; i < n; i++)
		{ //ChildThemeInfos
			BYTE* pChildThemeInfos = pRootThemeInfos;
			Write16(pChildThemeInfos, 0); //len

			Write8(pChildThemeInfos, 0); //ThemeType
			Write8(pChildThemeInfos, 0); //ThemeID
			Write32(pChildThemeInfos, 0); //OpenTime
			Write32(pChildThemeInfos, 0); //CloseTime
			Write8(pChildThemeInfos, 0); //ThemeName[]
			Write16(pChildThemeInfos, 0); //CollectdtThemeItemNums
			Write16(pChildThemeInfos, 0); //ThemeItemNums
			for (size_t i = 0; i < n; i++)
			{ //ThemeItemInfos
				BYTE* pThemeItemInfos = pChildThemeInfos;
				Write16(pThemeItemInfos, 0); //len

				Write8(pThemeItemInfos, 0); //ItemType
				Write8(pThemeItemInfos, 0); //ReceStat
				Write32(pThemeItemInfos, 0); //ItemID[]
				Write32(pThemeItemInfos, 0); //ItemNums
				Write32(pThemeItemInfos, 0); //AvailPeroid
				Write32(pThemeItemInfos, 0); //Index
				Write32(pThemeItemInfos, 0); //CostTreasureFragment
				Write8(pThemeItemInfos, 0); //ExclusiveItem
				Write32(pThemeItemInfos, 0); //CollectValue
				Write8(pThemeItemInfos, 0); //BestQuality
				Write8(pThemeItemInfos, 0); //UrlLen

				len = pThemeItemInfos - pChildThemeInfos;
				Set16(pChildThemeInfos, (WORD)len);
				pChildThemeInfos += len;
			}
			Write8(pChildThemeInfos, 0); //ThemeStat
			Write16(pChildThemeInfos, 0); //ExpAddCfgNums
			for (size_t i = 0; i < n; i++)
			{ //ThemeItemExpAddInfo
				BYTE* pThemeItemExpAddInfo = pChildThemeInfos;
				Write16(pThemeItemExpAddInfo, 0); //len

				Write16(pThemeItemExpAddInfo, 0); //EquippedNums
				Write16(pThemeItemExpAddInfo, 0); //ExpAddValue

				len = pThemeItemExpAddInfo - pChildThemeInfos;
				Set16(pChildThemeInfos, (WORD)len);
				pChildThemeInfos += len;
			}
			Write8(pChildThemeInfos, 0); //CanRecExclusiveAward
			Write16(pChildThemeInfos, 0); //ThemeAppelationNums
			for (size_t i = 0; i < n; i++)
			{ //ThemeAppelationInfo
				BYTE* pThemeAppelationInfo = pChildThemeInfos;
				Write16(pThemeAppelationInfo, 0); //len

				Write16(pThemeAppelationInfo, 0); //EquippedNums
				Write8(pThemeAppelationInfo, 0); //AppelationName[]

				len = pThemeAppelationInfo - pChildThemeInfos;
				Set16(pChildThemeInfos, (WORD)len);
				pChildThemeInfos += len;
			}

			len = pChildThemeInfos - pRootThemeInfos;
			Set16(pRootThemeInfos, (WORD)len);
			pRootThemeInfos += len;
		}

		len = pRootThemeInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24503, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestReceThemeItemInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT RootThemeIndex = Read32(p);
	UINT ChildThemeIndex = Read32(p);
	UINT ThemeItemIndex = Read32(p);
	UINT ItemID = Read32(p);
	UCHAR ItemShowIndex = Read8(p);

}

void ResponseReceThemeItemInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write32(p, 0); //RootThemeIndex
	Write32(p, 0); //ChildThemeIndex
	Write32(p, 0); //ThemeItemIndex
	Write32(p, 0); //ItemID
	Write32(p, 0); //CollectionValue
	Write8(p, 0); //ItemShowIndex
	Write8(p, 0); //CanReceExclusiveItem
	Write8(p, 0); //RepeatedRece

	len = p - buf;
	SendToClient(Client, 24500, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyClientCollectDressUpValue(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //DressUpValue

	len = p - buf;
	SendToClient(Client, 24502, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetMagicLampCfg(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetMagicLampCfg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write32(p, 0); //MagicLampNum
	Write16(p, 0); //DescribeLen
	{ //MagicLampItemCfg
		BYTE* pMagicLampItemCfg = p;
		Write16(pMagicLampItemCfg, 0); //len

		Write16(pMagicLampItemCfg, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //MagicLampOneItemCfg
			BYTE* pMagicLampOneItemCfg = pMagicLampItemCfg;
			Write16(pMagicLampOneItemCfg, 0); //len

			Write16(pMagicLampOneItemCfg, 0); //RoundNum
			Write16(pMagicLampOneItemCfg, 0); //CurrentRound
			{ //AwardToClient
				BYTE* pAwardToClient = pMagicLampOneItemCfg;
				Write16(pAwardToClient, 0); //len

				Write32(pAwardToClient, 0); //Exp
				Write32(pAwardToClient, 0); //Money
				Write32(pAwardToClient, 0); //SuperMoney
				Write16(pAwardToClient, 0); //ItemNum
				for (size_t i = 0; i < n; i++)
				{ //ItemInfo
					BYTE* pItemInfo = pAwardToClient;
					Write16(pItemInfo, 0); //len

					Write32(pItemInfo, 0); //ItemID
					Write32(pItemInfo, 0); //ItemNum
					Write32(pItemInfo, 0); //AvailPeriod
					Write8(pItemInfo, 0); //Status
					WriteUn(pItemInfo, 0); //ObtainTime
					Write32(pItemInfo, 0); //OtherAttribute
					Write16(pItemInfo, 0); //ItemType

					len = pItemInfo - pAwardToClient;
					Set16(pAwardToClient, (WORD)len);
					pAwardToClient += len;
				}
				Write32(pAwardToClient, 0); //Coupons
				Write32(pAwardToClient, 0); //GuildPoint
				Write32(pAwardToClient, 0); //LuckMoney
				Write8(pAwardToClient, 0); //ExtendInfoNum
				for (size_t i = 0; i < n; i++)
				{ //ExtendInfoAward
					BYTE* pExtendInfoAward = pAwardToClient;
					Write16(pExtendInfoAward, 0); //len

					Write16(pExtendInfoAward, 0); //Key
					Write32(pExtendInfoAward, 0); //AddValue
					Write32(pExtendInfoAward, 0); //TotalValue
					Write8(pExtendInfoAward, 0); //ShowPriority
					Write16(pExtendInfoAward, 0); //BuyNeedScore
					Write8(pExtendInfoAward, 0); //OneMatchMaxNum

					len = pExtendInfoAward - pAwardToClient;
					Set16(pAwardToClient, (WORD)len);
					pAwardToClient += len;
				}
				Write32(pAwardToClient, 0); //SpeedCoin

				len = pAwardToClient - pMagicLampOneItemCfg;
				Set16(pMagicLampOneItemCfg, (WORD)len);
				pMagicLampOneItemCfg += len;
			}
			Write8(pMagicLampOneItemCfg, 0); //IsCanFree

			len = pMagicLampOneItemCfg - pMagicLampItemCfg;
			Set16(pMagicLampItemCfg, (WORD)len);
			pMagicLampItemCfg += len;
		}

		len = pMagicLampItemCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //FreeNum
	Write32(p, 0); //NextFreeTime
	Write32(p, 0); //MaxFreeNum

	len = p - buf;
	SendToClient(Client, 24507, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestMagicLampLightOn(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR LightType = Read8(p);
	UINT ItemID = Read32(p);

}

void ResponseMagicLampLightOn(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //Result
	Write16(p, 0); //SuccNum
	Write32(p, 0); //ItemID
	Write8(p, 0); //LightType
	Write32(p, 0); //MagicLampNum
	Write8(p, 0); //HasFinalAward
	Write16(p, 0); //AwardNum
	for (size_t i = 0; i < n; i++)
	{ //AwardToClient
		BYTE* pAwardToClient = p;
		Write16(pAwardToClient, 0); //len

		Write32(pAwardToClient, 0); //Exp
		Write32(pAwardToClient, 0); //Money
		Write32(pAwardToClient, 0); //SuperMoney
		Write16(pAwardToClient, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAwardToClient;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAwardToClient;
			Set16(pAwardToClient, (WORD)len);
			pAwardToClient += len;
		}
		Write32(pAwardToClient, 0); //Coupons
		Write32(pAwardToClient, 0); //GuildPoint
		Write32(pAwardToClient, 0); //LuckMoney
		Write8(pAwardToClient, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAwardToClient;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAwardToClient;
			Set16(pAwardToClient, (WORD)len);
			pAwardToClient += len;
		}
		Write32(pAwardToClient, 0); //SpeedCoin

		len = pAwardToClient - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //CostMagicLampNum
	Write16(p, 0); //FreeNum
	Write32(p, 0); //NextFreeTime

	len = p - buf;
	SendToClient(Client, 24508, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyGloryReturnCfg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //DayNum
	Write32(p, 0); //TimeRemain
	{ //GoodMannersCfg
		BYTE* pGoodMannersCfg = p;
		Write16(pGoodMannersCfg, 0); //len

		Write8(pGoodMannersCfg, 0); //Status
		{ //AwardToClient
			BYTE* pAwardToClient = pGoodMannersCfg;
			Write16(pAwardToClient, 0); //len

			Write32(pAwardToClient, 0); //Exp
			Write32(pAwardToClient, 0); //Money
			Write32(pAwardToClient, 0); //SuperMoney
			Write16(pAwardToClient, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAwardToClient;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAwardToClient;
				Set16(pAwardToClient, (WORD)len);
				pAwardToClient += len;
			}
			Write32(pAwardToClient, 0); //Coupons
			Write32(pAwardToClient, 0); //GuildPoint
			Write32(pAwardToClient, 0); //LuckMoney
			Write8(pAwardToClient, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAwardToClient;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAwardToClient;
				Set16(pAwardToClient, (WORD)len);
				pAwardToClient += len;
			}
			Write32(pAwardToClient, 0); //SpeedCoin

			len = pAwardToClient - pGoodMannersCfg;
			Set16(pGoodMannersCfg, (WORD)len);
			pGoodMannersCfg += len;
		}

		len = pGoodMannersCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //CumulativeLoginMannersCfg
		BYTE* pCumulativeLoginMannersCfg = p;
		Write16(pCumulativeLoginMannersCfg, 0); //len

		Write16(pCumulativeLoginMannersCfg, 0); //Num
		for (size_t i = 0; i < n; i++)
		{ //OneLoginMannersCfg
			BYTE* pOneLoginMannersCfg = pCumulativeLoginMannersCfg;
			Write16(pOneLoginMannersCfg, 0); //len

			Write8(pOneLoginMannersCfg, 0); //DaysNum
			Write8(pOneLoginMannersCfg, 0); //Status
			{ //AwardToClient
				BYTE* pAwardToClient = pOneLoginMannersCfg;
				Write16(pAwardToClient, 0); //len

				Write32(pAwardToClient, 0); //Exp
				Write32(pAwardToClient, 0); //Money
				Write32(pAwardToClient, 0); //SuperMoney
				Write16(pAwardToClient, 0); //ItemNum
				for (size_t i = 0; i < n; i++)
				{ //ItemInfo
					BYTE* pItemInfo = pAwardToClient;
					Write16(pItemInfo, 0); //len

					Write32(pItemInfo, 0); //ItemID
					Write32(pItemInfo, 0); //ItemNum
					Write32(pItemInfo, 0); //AvailPeriod
					Write8(pItemInfo, 0); //Status
					WriteUn(pItemInfo, 0); //ObtainTime
					Write32(pItemInfo, 0); //OtherAttribute
					Write16(pItemInfo, 0); //ItemType

					len = pItemInfo - pAwardToClient;
					Set16(pAwardToClient, (WORD)len);
					pAwardToClient += len;
				}
				Write32(pAwardToClient, 0); //Coupons
				Write32(pAwardToClient, 0); //GuildPoint
				Write32(pAwardToClient, 0); //LuckMoney
				Write8(pAwardToClient, 0); //ExtendInfoNum
				for (size_t i = 0; i < n; i++)
				{ //ExtendInfoAward
					BYTE* pExtendInfoAward = pAwardToClient;
					Write16(pExtendInfoAward, 0); //len

					Write16(pExtendInfoAward, 0); //Key
					Write32(pExtendInfoAward, 0); //AddValue
					Write32(pExtendInfoAward, 0); //TotalValue
					Write8(pExtendInfoAward, 0); //ShowPriority
					Write16(pExtendInfoAward, 0); //BuyNeedScore
					Write8(pExtendInfoAward, 0); //OneMatchMaxNum

					len = pExtendInfoAward - pAwardToClient;
					Set16(pAwardToClient, (WORD)len);
					pAwardToClient += len;
				}
				Write32(pAwardToClient, 0); //SpeedCoin

				len = pAwardToClient - pOneLoginMannersCfg;
				Set16(pOneLoginMannersCfg, (WORD)len);
				pOneLoginMannersCfg += len;
			}

			len = pOneLoginMannersCfg - pCumulativeLoginMannersCfg;
			Set16(pCumulativeLoginMannersCfg, (WORD)len);
			pCumulativeLoginMannersCfg += len;
		}

		len = pCumulativeLoginMannersCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //TaskNum
	Write32(p, 0); //TaskIDList[]

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetGloryReturnAward(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR Type = Read8(p);
	UCHAR Index = Read8(p);

}

void ResponseGetGloryReturnAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //Result
	{ //AwardToClient
		BYTE* pAwardToClient = p;
		Write16(pAwardToClient, 0); //len

		Write32(pAwardToClient, 0); //Exp
		Write32(pAwardToClient, 0); //Money
		Write32(pAwardToClient, 0); //SuperMoney
		Write16(pAwardToClient, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAwardToClient;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAwardToClient;
			Set16(pAwardToClient, (WORD)len);
			pAwardToClient += len;
		}
		Write32(pAwardToClient, 0); //Coupons
		Write32(pAwardToClient, 0); //GuildPoint
		Write32(pAwardToClient, 0); //LuckMoney
		Write8(pAwardToClient, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAwardToClient;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAwardToClient;
			Set16(pAwardToClient, (WORD)len);
			pAwardToClient += len;
		}
		Write32(pAwardToClient, 0); //SpeedCoin

		len = pAwardToClient - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //Type

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetGloryReturnCfg(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetGloryReturnCfg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //Result
	Write32(p, 0); //DayNum
	Write32(p, 0); //TimeRemain
	{ //GoodMannersCfg
		BYTE* pGoodMannersCfg = p;
		Write16(pGoodMannersCfg, 0); //len

		Write8(pGoodMannersCfg, 0); //Status
		{ //AwardToClient
			BYTE* pAwardToClient = pGoodMannersCfg;
			Write16(pAwardToClient, 0); //len

			Write32(pAwardToClient, 0); //Exp
			Write32(pAwardToClient, 0); //Money
			Write32(pAwardToClient, 0); //SuperMoney
			Write16(pAwardToClient, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAwardToClient;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAwardToClient;
				Set16(pAwardToClient, (WORD)len);
				pAwardToClient += len;
			}
			Write32(pAwardToClient, 0); //Coupons
			Write32(pAwardToClient, 0); //GuildPoint
			Write32(pAwardToClient, 0); //LuckMoney
			Write8(pAwardToClient, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAwardToClient;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAwardToClient;
				Set16(pAwardToClient, (WORD)len);
				pAwardToClient += len;
			}
			Write32(pAwardToClient, 0); //SpeedCoin

			len = pAwardToClient - pGoodMannersCfg;
			Set16(pGoodMannersCfg, (WORD)len);
			pGoodMannersCfg += len;
		}

		len = pGoodMannersCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //CumulativeLoginMannersCfg
		BYTE* pCumulativeLoginMannersCfg = p;
		Write16(pCumulativeLoginMannersCfg, 0); //len

		Write16(pCumulativeLoginMannersCfg, 0); //Num
		for (size_t i = 0; i < n; i++)
		{ //OneLoginMannersCfg
			BYTE* pOneLoginMannersCfg = pCumulativeLoginMannersCfg;
			Write16(pOneLoginMannersCfg, 0); //len

			Write8(pOneLoginMannersCfg, 0); //DaysNum
			Write8(pOneLoginMannersCfg, 0); //Status
			{ //AwardToClient
				BYTE* pAwardToClient = pOneLoginMannersCfg;
				Write16(pAwardToClient, 0); //len

				Write32(pAwardToClient, 0); //Exp
				Write32(pAwardToClient, 0); //Money
				Write32(pAwardToClient, 0); //SuperMoney
				Write16(pAwardToClient, 0); //ItemNum
				for (size_t i = 0; i < n; i++)
				{ //ItemInfo
					BYTE* pItemInfo = pAwardToClient;
					Write16(pItemInfo, 0); //len

					Write32(pItemInfo, 0); //ItemID
					Write32(pItemInfo, 0); //ItemNum
					Write32(pItemInfo, 0); //AvailPeriod
					Write8(pItemInfo, 0); //Status
					WriteUn(pItemInfo, 0); //ObtainTime
					Write32(pItemInfo, 0); //OtherAttribute
					Write16(pItemInfo, 0); //ItemType

					len = pItemInfo - pAwardToClient;
					Set16(pAwardToClient, (WORD)len);
					pAwardToClient += len;
				}
				Write32(pAwardToClient, 0); //Coupons
				Write32(pAwardToClient, 0); //GuildPoint
				Write32(pAwardToClient, 0); //LuckMoney
				Write8(pAwardToClient, 0); //ExtendInfoNum
				for (size_t i = 0; i < n; i++)
				{ //ExtendInfoAward
					BYTE* pExtendInfoAward = pAwardToClient;
					Write16(pExtendInfoAward, 0); //len

					Write16(pExtendInfoAward, 0); //Key
					Write32(pExtendInfoAward, 0); //AddValue
					Write32(pExtendInfoAward, 0); //TotalValue
					Write8(pExtendInfoAward, 0); //ShowPriority
					Write16(pExtendInfoAward, 0); //BuyNeedScore
					Write8(pExtendInfoAward, 0); //OneMatchMaxNum

					len = pExtendInfoAward - pAwardToClient;
					Set16(pAwardToClient, (WORD)len);
					pAwardToClient += len;
				}
				Write32(pAwardToClient, 0); //SpeedCoin

				len = pAwardToClient - pOneLoginMannersCfg;
				Set16(pOneLoginMannersCfg, (WORD)len);
				pOneLoginMannersCfg += len;
			}

			len = pOneLoginMannersCfg - pCumulativeLoginMannersCfg;
			Set16(pCumulativeLoginMannersCfg, (WORD)len);
			pCumulativeLoginMannersCfg += len;
		}

		len = pCumulativeLoginMannersCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //TaskNum
	Write32(p, 0); //TaskIDList[]

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestNationalCarnivalShowInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseNationalCarnivalShowInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //SignUpStat
	Write32(p, 0); //GlobalSignUpNums
	Write32(p, 0); //CurrentCakeLevel
	Write32(p, 0); //WeekendOnlineTime
	Write32(p, 0); //ActionBeginDate
	Write32(p, 0); //ActionEndDate
	Write32(p, 0); //ActionBeginTime
	Write32(p, 0); //ActionEndTime
	Write32(p, 0); //WeekendOnlineBeginTime
	Write32(p, 0); //WeekendOnlineEndTime
	Write8(p, 0); //WeekendOnlineOpenBoxType
	{ //SignUpAwardToClient
		BYTE* pSignUpAwardToClient = p;
		Write16(pSignUpAwardToClient, 0); //len

		Write32(pSignUpAwardToClient, 0); //Exp
		Write32(pSignUpAwardToClient, 0); //Money
		Write32(pSignUpAwardToClient, 0); //SuperMoney
		Write16(pSignUpAwardToClient, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pSignUpAwardToClient;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pSignUpAwardToClient;
			Set16(pSignUpAwardToClient, (WORD)len);
			pSignUpAwardToClient += len;
		}
		Write32(pSignUpAwardToClient, 0); //Coupons
		Write32(pSignUpAwardToClient, 0); //GuildPoint
		Write32(pSignUpAwardToClient, 0); //LuckMoney
		Write8(pSignUpAwardToClient, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pSignUpAwardToClient;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pSignUpAwardToClient;
			Set16(pSignUpAwardToClient, (WORD)len);
			pSignUpAwardToClient += len;
		}
		Write32(pSignUpAwardToClient, 0); //SpeedCoin

		len = pSignUpAwardToClient - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //WeekendOnlineSpecialItemNum
	for (size_t i = 0; i < n; i++)
	{ //WeekendOnlineSpecialItemInfos
		BYTE* pWeekendOnlineSpecialItemInfos = p;
		Write16(pWeekendOnlineSpecialItemInfos, 0); //len

		Write32(pWeekendOnlineSpecialItemInfos, 0); //ItemID
		Write32(pWeekendOnlineSpecialItemInfos, 0); //ItemNums
		Write32(pWeekendOnlineSpecialItemInfos, 0); //AvailPeriod
		Write8(pWeekendOnlineSpecialItemInfos, 0); //ItemProInfo[]
		Write8(pWeekendOnlineSpecialItemInfos, 0); //ItemReceStat

		len = pWeekendOnlineSpecialItemInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //FivePoinStarRelatedTaskNums
	for (size_t i = 0; i < n; i++)
	{ //FivePointStarGeneRelatedTaskInfos
		BYTE* pFivePointStarGeneRelatedTaskInfos = p;
		Write16(pFivePointStarGeneRelatedTaskInfos, 0); //len

		Write32(pFivePointStarGeneRelatedTaskInfos, 0); //TaskID
		Write32(pFivePointStarGeneRelatedTaskInfos, 0); //ItemID
		Write32(pFivePointStarGeneRelatedTaskInfos, 0); //AwardItemNums

		len = pFivePointStarGeneRelatedTaskInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestReceNationalCarnivalAward(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	short AwardType = Read16(p);

}

void ResponseReceNationalCarnivalAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //Time
	Write16(p, 0); //ResultID
	Write16(p, 0); //AwardType
	{ //AwardToClient
		BYTE* pAwardToClient = p;
		Write16(pAwardToClient, 0); //len

		Write32(pAwardToClient, 0); //Exp
		Write32(pAwardToClient, 0); //Money
		Write32(pAwardToClient, 0); //SuperMoney
		Write16(pAwardToClient, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAwardToClient;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAwardToClient;
			Set16(pAwardToClient, (WORD)len);
			pAwardToClient += len;
		}
		Write32(pAwardToClient, 0); //Coupons
		Write32(pAwardToClient, 0); //GuildPoint
		Write32(pAwardToClient, 0); //LuckMoney
		Write8(pAwardToClient, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAwardToClient;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAwardToClient;
			Set16(pAwardToClient, (WORD)len);
			pAwardToClient += len;
		}
		Write32(pAwardToClient, 0); //SpeedCoin

		len = pAwardToClient - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestSignUpNationalCarnivalAward(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseSignUpNationalCarnivalAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write32(p, 0); //GlobalSignUpNum
	Write32(p, 0); //SignUpBoxAwardTag
	{ //AwardToClient
		BYTE* pAwardToClient = p;
		Write16(pAwardToClient, 0); //len

		Write32(pAwardToClient, 0); //Exp
		Write32(pAwardToClient, 0); //Money
		Write32(pAwardToClient, 0); //SuperMoney
		Write16(pAwardToClient, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAwardToClient;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAwardToClient;
			Set16(pAwardToClient, (WORD)len);
			pAwardToClient += len;
		}
		Write32(pAwardToClient, 0); //Coupons
		Write32(pAwardToClient, 0); //GuildPoint
		Write32(pAwardToClient, 0); //LuckMoney
		Write8(pAwardToClient, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAwardToClient;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAwardToClient;
			Set16(pAwardToClient, (WORD)len);
			pAwardToClient += len;
		}
		Write32(pAwardToClient, 0); //SpeedCoin

		len = pAwardToClient - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyClientNoviceGuideCfg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write8(p, 0); //CurrentLev
	Write8(p, 0); //NextLevLimit
	Write8(p, 0); //LevNum
	for (size_t i = 0; i < n; i++)
	{ //LevAndTrainingTaskCfg
		BYTE* pLevAndTrainingTaskCfg = p;
		Write16(pLevAndTrainingTaskCfg, 0); //len

		Write8(pLevAndTrainingTaskCfg, 0); //Lev
		{ //LevGiftCfgAndSatus
			BYTE* pLevGiftCfgAndSatus = pLevAndTrainingTaskCfg;
			Write16(pLevGiftCfgAndSatus, 0); //len

			Write32(pLevGiftCfgAndSatus, 0); //TaskID
			Write8(pLevGiftCfgAndSatus, 0); //Status
			{ //AwardToClient
				BYTE* pAwardToClient = pLevGiftCfgAndSatus;
				Write16(pAwardToClient, 0); //len

				Write32(pAwardToClient, 0); //Exp
				Write32(pAwardToClient, 0); //Money
				Write32(pAwardToClient, 0); //SuperMoney
				Write16(pAwardToClient, 0); //ItemNum
				for (size_t i = 0; i < n; i++)
				{ //ItemInfo
					BYTE* pItemInfo = pAwardToClient;
					Write16(pItemInfo, 0); //len

					Write32(pItemInfo, 0); //ItemID
					Write32(pItemInfo, 0); //ItemNum
					Write32(pItemInfo, 0); //AvailPeriod
					Write8(pItemInfo, 0); //Status
					WriteUn(pItemInfo, 0); //ObtainTime
					Write32(pItemInfo, 0); //OtherAttribute
					Write16(pItemInfo, 0); //ItemType

					len = pItemInfo - pAwardToClient;
					Set16(pAwardToClient, (WORD)len);
					pAwardToClient += len;
				}
				Write32(pAwardToClient, 0); //Coupons
				Write32(pAwardToClient, 0); //GuildPoint
				Write32(pAwardToClient, 0); //LuckMoney
				Write8(pAwardToClient, 0); //ExtendInfoNum
				for (size_t i = 0; i < n; i++)
				{ //ExtendInfoAward
					BYTE* pExtendInfoAward = pAwardToClient;
					Write16(pExtendInfoAward, 0); //len

					Write16(pExtendInfoAward, 0); //Key
					Write32(pExtendInfoAward, 0); //AddValue
					Write32(pExtendInfoAward, 0); //TotalValue
					Write8(pExtendInfoAward, 0); //ShowPriority
					Write16(pExtendInfoAward, 0); //BuyNeedScore
					Write8(pExtendInfoAward, 0); //OneMatchMaxNum

					len = pExtendInfoAward - pAwardToClient;
					Set16(pAwardToClient, (WORD)len);
					pAwardToClient += len;
				}
				Write32(pAwardToClient, 0); //SpeedCoin

				len = pAwardToClient - pLevGiftCfgAndSatus;
				Set16(pLevGiftCfgAndSatus, (WORD)len);
				pLevGiftCfgAndSatus += len;
			}

			len = pLevGiftCfgAndSatus - pLevAndTrainingTaskCfg;
			Set16(pLevAndTrainingTaskCfg, (WORD)len);
			pLevAndTrainingTaskCfg += len;
		}
		{ //TaskListCfg
			BYTE* pTaskListCfg = pLevAndTrainingTaskCfg;
			Write16(pTaskListCfg, 0); //len

			Write8(pTaskListCfg, 0); //TaskNum
			for (size_t i = 0; i < n; i++)
			{ //TaskListStatus
				BYTE* pTaskListStatus = pTaskListCfg;
				Write16(pTaskListStatus, 0); //len

				Write32(pTaskListStatus, 0); //TaskID
				Write16(pTaskListStatus, 0); //MapID
				Write8(pTaskListStatus, 0); //Status
				Write8(pTaskListStatus, 0); //Type
				Write8(pTaskListStatus, 0); //IsFirstAwardTask
				Write8(pTaskListStatus, 0); //NameLen
				Write8(pTaskListStatus, 0); //DescribeLen
				Write8(pTaskListStatus, 0); //AwardDesLen

				len = pTaskListStatus - pTaskListCfg;
				Set16(pTaskListCfg, (WORD)len);
				pTaskListCfg += len;
			}

			len = pTaskListCfg - pLevAndTrainingTaskCfg;
			Set16(pLevAndTrainingTaskCfg, (WORD)len);
			pLevAndTrainingTaskCfg += len;
		}

		len = pLevAndTrainingTaskCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //DailyExpGitCfg
		BYTE* pDailyExpGitCfg = p;
		Write16(pDailyExpGitCfg, 0); //len

		Write8(pDailyExpGitCfg, 0); //Status
		Write16(pDailyExpGitCfg, 0); //LevLimit
		Write16(pDailyExpGitCfg, 0); //ExpLimit
		Write32(pDailyExpGitCfg, 0); //ExpHasGot
		Write32(pDailyExpGitCfg, 0); //BoxID
		{ //AwardToClient
			BYTE* pAwardToClient = pDailyExpGitCfg;
			Write16(pAwardToClient, 0); //len

			Write32(pAwardToClient, 0); //Exp
			Write32(pAwardToClient, 0); //Money
			Write32(pAwardToClient, 0); //SuperMoney
			Write16(pAwardToClient, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAwardToClient;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAwardToClient;
				Set16(pAwardToClient, (WORD)len);
				pAwardToClient += len;
			}
			Write32(pAwardToClient, 0); //Coupons
			Write32(pAwardToClient, 0); //GuildPoint
			Write32(pAwardToClient, 0); //LuckMoney
			Write8(pAwardToClient, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAwardToClient;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAwardToClient;
				Set16(pAwardToClient, (WORD)len);
				pAwardToClient += len;
			}
			Write32(pAwardToClient, 0); //SpeedCoin

			len = pAwardToClient - pDailyExpGitCfg;
			Set16(pDailyExpGitCfg, (WORD)len);
			pDailyExpGitCfg += len;
		}

		len = pDailyExpGitCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //NoviceGuildBaseCfg
		BYTE* pNoviceGuildBaseCfg = p;
		Write16(pNoviceGuildBaseCfg, 0); //len

		Write16(pNoviceGuildBaseCfg, 0); //WaitSecond
		Write16(pNoviceGuildBaseCfg, 0); //LevCritical

		len = pNoviceGuildBaseCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24506, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetNoviceGuideAward(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	short AwardType = Read16(p);
	UCHAR Index = Read8(p);

}

void ResponseGetNoviceGuideAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //AwardType
	{ //AwardToClient
		BYTE* pAwardToClient = p;
		Write16(pAwardToClient, 0); //len

		Write32(pAwardToClient, 0); //Exp
		Write32(pAwardToClient, 0); //Money
		Write32(pAwardToClient, 0); //SuperMoney
		Write16(pAwardToClient, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAwardToClient;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAwardToClient;
			Set16(pAwardToClient, (WORD)len);
			pAwardToClient += len;
		}
		Write32(pAwardToClient, 0); //Coupons
		Write32(pAwardToClient, 0); //GuildPoint
		Write32(pAwardToClient, 0); //LuckMoney
		Write8(pAwardToClient, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAwardToClient;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAwardToClient;
			Set16(pAwardToClient, (WORD)len);
			pAwardToClient += len;
		}
		Write32(pAwardToClient, 0); //SpeedCoin

		len = pAwardToClient - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24517, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyClientLoginAwardCfg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //CurrentLoginNums
	Write8(p, 0); //AwardNum
	for (size_t i = 0; i < n; i++)
	{ //LoginAwardCfg
		BYTE* pLoginAwardCfg = p;
		Write16(pLoginAwardCfg, 0); //len

		Write8(pLoginAwardCfg, 0); //Status
		Write32(pLoginAwardCfg, 0); //NeedLoginNums
		{ //AwardToClient
			BYTE* pAwardToClient = pLoginAwardCfg;
			Write16(pAwardToClient, 0); //len

			Write32(pAwardToClient, 0); //Exp
			Write32(pAwardToClient, 0); //Money
			Write32(pAwardToClient, 0); //SuperMoney
			Write16(pAwardToClient, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAwardToClient;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAwardToClient;
				Set16(pAwardToClient, (WORD)len);
				pAwardToClient += len;
			}
			Write32(pAwardToClient, 0); //Coupons
			Write32(pAwardToClient, 0); //GuildPoint
			Write32(pAwardToClient, 0); //LuckMoney
			Write8(pAwardToClient, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAwardToClient;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAwardToClient;
				Set16(pAwardToClient, (WORD)len);
				pAwardToClient += len;
			}
			Write32(pAwardToClient, 0); //SpeedCoin

			len = pAwardToClient - pLoginAwardCfg;
			Set16(pLoginAwardCfg, (WORD)len);
			pLoginAwardCfg += len;
		}

		len = pLoginAwardCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24518, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestNoviceGuideLoginAwardCfg(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseNoviceGuideLoginAwardCfg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //CurrentLoginNums
	Write8(p, 0); //AwardNum
	for (size_t i = 0; i < n; i++)
	{ //LoginAwardCfg
		BYTE* pLoginAwardCfg = p;
		Write16(pLoginAwardCfg, 0); //len

		Write8(pLoginAwardCfg, 0); //Status
		Write32(pLoginAwardCfg, 0); //NeedLoginNums
		{ //AwardToClient
			BYTE* pAwardToClient = pLoginAwardCfg;
			Write16(pAwardToClient, 0); //len

			Write32(pAwardToClient, 0); //Exp
			Write32(pAwardToClient, 0); //Money
			Write32(pAwardToClient, 0); //SuperMoney
			Write16(pAwardToClient, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAwardToClient;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAwardToClient;
				Set16(pAwardToClient, (WORD)len);
				pAwardToClient += len;
			}
			Write32(pAwardToClient, 0); //Coupons
			Write32(pAwardToClient, 0); //GuildPoint
			Write32(pAwardToClient, 0); //LuckMoney
			Write8(pAwardToClient, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAwardToClient;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAwardToClient;
				Set16(pAwardToClient, (WORD)len);
				pAwardToClient += len;
			}
			Write32(pAwardToClient, 0); //SpeedCoin

			len = pAwardToClient - pLoginAwardCfg;
			Set16(pLoginAwardCfg, (WORD)len);
			pLoginAwardCfg += len;
		}

		len = pLoginAwardCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24522, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetNoviceGuideCfg(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetNoviceGuideCfg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write8(p, 0); //CurrentLev
	Write8(p, 0); //NextLevLimit
	Write8(p, 0); //LevNum
	for (size_t i = 0; i < n; i++)
	{ //LevAndTrainingTaskCfg
		BYTE* pLevAndTrainingTaskCfg = p;
		Write16(pLevAndTrainingTaskCfg, 0); //len

		Write8(pLevAndTrainingTaskCfg, 0); //Lev
		{ //LevGiftCfgAndSatus
			BYTE* pLevGiftCfgAndSatus = pLevAndTrainingTaskCfg;
			Write16(pLevGiftCfgAndSatus, 0); //len

			Write32(pLevGiftCfgAndSatus, 0); //TaskID
			Write8(pLevGiftCfgAndSatus, 0); //Status
			{ //AwardToClient
				BYTE* pAwardToClient = pLevGiftCfgAndSatus;
				Write16(pAwardToClient, 0); //len

				Write32(pAwardToClient, 0); //Exp
				Write32(pAwardToClient, 0); //Money
				Write32(pAwardToClient, 0); //SuperMoney
				Write16(pAwardToClient, 0); //ItemNum
				for (size_t i = 0; i < n; i++)
				{ //ItemInfo
					BYTE* pItemInfo = pAwardToClient;
					Write16(pItemInfo, 0); //len

					Write32(pItemInfo, 0); //ItemID
					Write32(pItemInfo, 0); //ItemNum
					Write32(pItemInfo, 0); //AvailPeriod
					Write8(pItemInfo, 0); //Status
					WriteUn(pItemInfo, 0); //ObtainTime
					Write32(pItemInfo, 0); //OtherAttribute
					Write16(pItemInfo, 0); //ItemType

					len = pItemInfo - pAwardToClient;
					Set16(pAwardToClient, (WORD)len);
					pAwardToClient += len;
				}
				Write32(pAwardToClient, 0); //Coupons
				Write32(pAwardToClient, 0); //GuildPoint
				Write32(pAwardToClient, 0); //LuckMoney
				Write8(pAwardToClient, 0); //ExtendInfoNum
				for (size_t i = 0; i < n; i++)
				{ //ExtendInfoAward
					BYTE* pExtendInfoAward = pAwardToClient;
					Write16(pExtendInfoAward, 0); //len

					Write16(pExtendInfoAward, 0); //Key
					Write32(pExtendInfoAward, 0); //AddValue
					Write32(pExtendInfoAward, 0); //TotalValue
					Write8(pExtendInfoAward, 0); //ShowPriority
					Write16(pExtendInfoAward, 0); //BuyNeedScore
					Write8(pExtendInfoAward, 0); //OneMatchMaxNum

					len = pExtendInfoAward - pAwardToClient;
					Set16(pAwardToClient, (WORD)len);
					pAwardToClient += len;
				}
				Write32(pAwardToClient, 0); //SpeedCoin

				len = pAwardToClient - pLevGiftCfgAndSatus;
				Set16(pLevGiftCfgAndSatus, (WORD)len);
				pLevGiftCfgAndSatus += len;
			}

			len = pLevGiftCfgAndSatus - pLevAndTrainingTaskCfg;
			Set16(pLevAndTrainingTaskCfg, (WORD)len);
			pLevAndTrainingTaskCfg += len;
		}
		{ //TaskListCfg
			BYTE* pTaskListCfg = pLevAndTrainingTaskCfg;
			Write16(pTaskListCfg, 0); //len

			Write8(pTaskListCfg, 0); //TaskNum
			for (size_t i = 0; i < n; i++)
			{ //TaskListStatus
				BYTE* pTaskListStatus = pTaskListCfg;
				Write16(pTaskListStatus, 0); //len

				Write32(pTaskListStatus, 0); //TaskID
				Write16(pTaskListStatus, 0); //MapID
				Write8(pTaskListStatus, 0); //Status
				Write8(pTaskListStatus, 0); //Type
				Write8(pTaskListStatus, 0); //IsFirstAwardTask
				Write8(pTaskListStatus, 0); //NameLen
				Write8(pTaskListStatus, 0); //DescribeLen
				Write8(pTaskListStatus, 0); //AwardDesLen

				len = pTaskListStatus - pTaskListCfg;
				Set16(pTaskListCfg, (WORD)len);
				pTaskListCfg += len;
			}

			len = pTaskListCfg - pLevAndTrainingTaskCfg;
			Set16(pLevAndTrainingTaskCfg, (WORD)len);
			pLevAndTrainingTaskCfg += len;
		}

		len = pLevAndTrainingTaskCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //DailyExpGitCfg
		BYTE* pDailyExpGitCfg = p;
		Write16(pDailyExpGitCfg, 0); //len

		Write8(pDailyExpGitCfg, 0); //Status
		Write16(pDailyExpGitCfg, 0); //LevLimit
		Write16(pDailyExpGitCfg, 0); //ExpLimit
		Write32(pDailyExpGitCfg, 0); //ExpHasGot
		Write32(pDailyExpGitCfg, 0); //BoxID
		{ //AwardToClient
			BYTE* pAwardToClient = pDailyExpGitCfg;
			Write16(pAwardToClient, 0); //len

			Write32(pAwardToClient, 0); //Exp
			Write32(pAwardToClient, 0); //Money
			Write32(pAwardToClient, 0); //SuperMoney
			Write16(pAwardToClient, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAwardToClient;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAwardToClient;
				Set16(pAwardToClient, (WORD)len);
				pAwardToClient += len;
			}
			Write32(pAwardToClient, 0); //Coupons
			Write32(pAwardToClient, 0); //GuildPoint
			Write32(pAwardToClient, 0); //LuckMoney
			Write8(pAwardToClient, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAwardToClient;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAwardToClient;
				Set16(pAwardToClient, (WORD)len);
				pAwardToClient += len;
			}
			Write32(pAwardToClient, 0); //SpeedCoin

			len = pAwardToClient - pDailyExpGitCfg;
			Set16(pDailyExpGitCfg, (WORD)len);
			pDailyExpGitCfg += len;
		}

		len = pDailyExpGitCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //NoviceGuildBaseCfg
		BYTE* pNoviceGuildBaseCfg = p;
		Write16(pNoviceGuildBaseCfg, 0); //len

		Write16(pNoviceGuildBaseCfg, 0); //WaitSecond
		Write16(pNoviceGuildBaseCfg, 0); //LevCritical

		len = pNoviceGuildBaseCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24519, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestVideoDisplay(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void RequestStartNoviceGuideTask(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT TaskID = Read32(p);

}

void RequestLeaveObserve(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseLeaveObserve(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 24525, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestLuckMatchShowInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseLuckMatchShowInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write32(p, 0); //SeasonBroadCastInfoLen
	Write32(p, 0); //CurrentAwardLuckGoldCoinNum
	Write32(p, 0); //DailyAwardLuckGoldCoinLimit
	Write8(p, 0); //CanReceDailyRankAward
	Write32(p, 0); //LastDayRankValue
	Write32(p, 0); //RankAwardItemNums
	Write32(p, 0); //NextReceRankAwardTime
	Write8(p, 0); //SeasonStat
	Write32(p, 0); //CurrentInLuckMatchGameNums
	Write32(p, 0); //CurrentLuckMatchWinnerNums

	len = p - buf;
	SendToClient(Client, 24609, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestReceLuckMatchDailyRankListAward(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseReceLuckMatchDailyRankListAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //Rank
	{ //AwardInfo
		BYTE* pAwardInfo = p;
		Write16(pAwardInfo, 0); //len

		Write32(pAwardInfo, 0); //Exp
		Write32(pAwardInfo, 0); //Money
		Write32(pAwardInfo, 0); //SuperMoney
		Write16(pAwardInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAwardInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAwardInfo;
			Set16(pAwardInfo, (WORD)len);
			pAwardInfo += len;
		}
		Write32(pAwardInfo, 0); //Coupons
		Write32(pAwardInfo, 0); //GuildPoint
		Write32(pAwardInfo, 0); //LuckMoney
		Write8(pAwardInfo, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAwardInfo;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAwardInfo;
			Set16(pAwardInfo, (WORD)len);
			pAwardInfo += len;
		}
		Write32(pAwardInfo, 0); //SpeedCoin

		len = pAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24605, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetLuckMatchTraningMapInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetLuckMatchTrainingMapInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //MapNums
	Write32(p, 0); //MapIDS[]

	len = p - buf;
	SendToClient(Client, 24600, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestLikeLuckMatchPlayerInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT LikeUin = Read32(p);
	UINT RoomID = Read32(p);

}

void ResponseLikeLuckMatchPlayerInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //BeLikedPlayerNums
	for (size_t i = 0; i < n; i++)
	{ //BeLikedPlayerInfos
		BYTE* pBeLikedPlayerInfos = p;
		Write16(pBeLikedPlayerInfos, 0); //len

		Write32(pBeLikedPlayerInfos, 0); //Uin
		Write32(pBeLikedPlayerInfos, 0); //BeLikedNum

		len = pBeLikedPlayerInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //LikeAwardInfo
		BYTE* pLikeAwardInfo = p;
		Write16(pLikeAwardInfo, 0); //len

		Write32(pLikeAwardInfo, 0); //Exp
		Write32(pLikeAwardInfo, 0); //Money
		Write32(pLikeAwardInfo, 0); //SuperMoney
		Write16(pLikeAwardInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pLikeAwardInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pLikeAwardInfo;
			Set16(pLikeAwardInfo, (WORD)len);
			pLikeAwardInfo += len;
		}
		Write32(pLikeAwardInfo, 0); //Coupons
		Write32(pLikeAwardInfo, 0); //GuildPoint
		Write32(pLikeAwardInfo, 0); //LuckMoney
		Write8(pLikeAwardInfo, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pLikeAwardInfo;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pLikeAwardInfo;
			Set16(pLikeAwardInfo, (WORD)len);
			pLikeAwardInfo += len;
		}
		Write32(pLikeAwardInfo, 0); //SpeedCoin

		len = pLikeAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //CritAwardTipInfo[]

	len = p - buf;
	SendToClient(Client, 24601, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyClientLuckMatchBeLikedPlayerInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //RoomID
	Write16(p, 0); //LikedPlayerNums
	for (size_t i = 0; i < n; i++)
	{ //BeLikedPlayerInfos
		BYTE* pBeLikedPlayerInfos = p;
		Write16(pBeLikedPlayerInfos, 0); //len

		Write32(pBeLikedPlayerInfos, 0); //Uin
		Write32(pBeLikedPlayerInfos, 0); //BeLikedNum

		len = pBeLikedPlayerInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24602, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyClientUpdateLuckMatchBeLikedInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //LikedPlayerNums
	for (size_t i = 0; i < n; i++)
	{ //BeLikedPlayerInfos
		BYTE* pBeLikedPlayerInfos = p;
		Write16(pBeLikedPlayerInfos, 0); //len

		Write32(pBeLikedPlayerInfos, 0); //Uin
		Write32(pBeLikedPlayerInfos, 0); //BeLikedNum

		len = pBeLikedPlayerInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24620, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyClientLikePlayerCritInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write8(p, 0); //CritAwardTipInfo[]

	len = p - buf;
	SendToClient(Client, 24621, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyClientLuckMatchBetInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //RoomID
	Write32(p, 0); //LuckyItemNum
	Write16(p, 0); //PlayerNums
	for (size_t i = 0; i < n; i++)
	{ //BetPlayerInfo
		BYTE* pBetPlayerInfo = p;
		Write16(pBetPlayerInfo, 0); //len

		Write32(pBetPlayerInfo, 0); //Uin
		Write8(pBetPlayerInfo, 0); //NickNameHost[]
		Write32(pBetPlayerInfo, 0); //Score
		Write8(pBetPlayerInfo, 0); //PeiLv
		Write32(pBetPlayerInfo, 0); //CostLuckyMoneyNum

		len = pBetPlayerInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //BetTimeRemain

	len = p - buf;
	SendToClient(Client, 24607, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestLuckMatchBet(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT LikeUin = Read32(p);

}

void ResponseLuckMatchBet(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write32(p, 0); //LikeUin

	len = p - buf;
	SendToClient(Client, 24608, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestLuckMatchBetAwardInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseLuckMatchBetAwardInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write32(p, 0); //TotoalBetAwardItemNum
	Write32(p, 0); //CanReciveLuckyItemNum

	len = p - buf;
	SendToClient(Client, 24610, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetLuckyMatchBetAward(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetLuckyMatchBetAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //Result
	Write32(p, 0); //HasAlreadyGotNum
	{ //AwardToClient
		BYTE* pAwardToClient = p;
		Write16(pAwardToClient, 0); //len

		Write32(pAwardToClient, 0); //Exp
		Write32(pAwardToClient, 0); //Money
		Write32(pAwardToClient, 0); //SuperMoney
		Write16(pAwardToClient, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAwardToClient;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAwardToClient;
			Set16(pAwardToClient, (WORD)len);
			pAwardToClient += len;
		}
		Write32(pAwardToClient, 0); //Coupons
		Write32(pAwardToClient, 0); //GuildPoint
		Write32(pAwardToClient, 0); //LuckMoney
		Write8(pAwardToClient, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAwardToClient;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAwardToClient;
			Set16(pAwardToClient, (WORD)len);
			pAwardToClient += len;
		}
		Write32(pAwardToClient, 0); //SpeedCoin

		len = pAwardToClient - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24615, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestLuckyShopAwardCfg(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseLuckyShopAwardCfg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //Result
	Write32(p, 0); //TimeRemain
	Write32(p, 0); //LuckyMoneyNum
	Write16(p, 0); //LuckyShopAwardNums
	for (size_t i = 0; i < n; i++)
	{ //LuckyShopAwardPollCfg
		BYTE* pLuckyShopAwardPollCfg = p;
		Write16(pLuckyShopAwardPollCfg, 0); //len

		Write32(pLuckyShopAwardPollCfg, 0); //ItemIndex
		Write32(pLuckyShopAwardPollCfg, 0); //ItemID
		Write32(pLuckyShopAwardPollCfg, 0); //ItemNum
		Write32(pLuckyShopAwardPollCfg, 0); //AvailPeriod
		WriteUn(pLuckyShopAwardPollCfg, 0); //ObtainTime
		Write16(pLuckyShopAwardPollCfg, 0); //ItemType
		Write32(pLuckyShopAwardPollCfg, 0); //CanExchangeNum
		Write32(pLuckyShopAwardPollCfg, 0); //TotalExchangeNum
		Write32(pLuckyShopAwardPollCfg, 0); //CostLuckyMoneyNum

		len = pLuckyShopAwardPollCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24603, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestLuckyShopExchangeItem(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT ItemIndex = Read32(p);

}

void ResponseLuckyShopExchangeItem(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //Result
	Write32(p, 0); //ItemIndex
	Write32(p, 0); //LuckyMoneyRemainNum
	Write32(p, 0); //CanExchangeNum
	{ //AwardToClient
		BYTE* pAwardToClient = p;
		Write16(pAwardToClient, 0); //len

		Write32(pAwardToClient, 0); //Exp
		Write32(pAwardToClient, 0); //Money
		Write32(pAwardToClient, 0); //SuperMoney
		Write16(pAwardToClient, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAwardToClient;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAwardToClient;
			Set16(pAwardToClient, (WORD)len);
			pAwardToClient += len;
		}
		Write32(pAwardToClient, 0); //Coupons
		Write32(pAwardToClient, 0); //GuildPoint
		Write32(pAwardToClient, 0); //LuckMoney
		Write8(pAwardToClient, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAwardToClient;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAwardToClient;
			Set16(pAwardToClient, (WORD)len);
			pAwardToClient += len;
		}
		Write32(pAwardToClient, 0); //SpeedCoin

		len = pAwardToClient - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24604, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyAnnualFestivalCfg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //OpenDate
	Write32(p, 0); //CloseDate
	Write32(p, 0); //PrimaryBoxCostItemID
	Write16(p, 0); //PrimaryBoxCostItemNum
	Write16(p, 0); //PrimaryItemRemainNum
	Write32(p, 0); //SeniorBoxCostItemID
	Write16(p, 0); //SeniorBoxCostItemNum
	Write16(p, 0); //SeniorItemRemainNum
	{ //PrimaryBoxAwardInfo
		BYTE* pPrimaryBoxAwardInfo = p;
		Write16(pPrimaryBoxAwardInfo, 0); //len

		Write32(pPrimaryBoxAwardInfo, 0); //Exp
		Write32(pPrimaryBoxAwardInfo, 0); //Money
		Write32(pPrimaryBoxAwardInfo, 0); //SuperMoney
		Write16(pPrimaryBoxAwardInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pPrimaryBoxAwardInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pPrimaryBoxAwardInfo;
			Set16(pPrimaryBoxAwardInfo, (WORD)len);
			pPrimaryBoxAwardInfo += len;
		}
		Write32(pPrimaryBoxAwardInfo, 0); //Coupons
		Write32(pPrimaryBoxAwardInfo, 0); //GuildPoint
		Write32(pPrimaryBoxAwardInfo, 0); //LuckMoney
		Write8(pPrimaryBoxAwardInfo, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pPrimaryBoxAwardInfo;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pPrimaryBoxAwardInfo;
			Set16(pPrimaryBoxAwardInfo, (WORD)len);
			pPrimaryBoxAwardInfo += len;
		}
		Write32(pPrimaryBoxAwardInfo, 0); //SpeedCoin

		len = pPrimaryBoxAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //SeniorBoxAwardInfo
		BYTE* pSeniorBoxAwardInfo = p;
		Write16(pSeniorBoxAwardInfo, 0); //len

		Write32(pSeniorBoxAwardInfo, 0); //Exp
		Write32(pSeniorBoxAwardInfo, 0); //Money
		Write32(pSeniorBoxAwardInfo, 0); //SuperMoney
		Write16(pSeniorBoxAwardInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pSeniorBoxAwardInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pSeniorBoxAwardInfo;
			Set16(pSeniorBoxAwardInfo, (WORD)len);
			pSeniorBoxAwardInfo += len;
		}
		Write32(pSeniorBoxAwardInfo, 0); //Coupons
		Write32(pSeniorBoxAwardInfo, 0); //GuildPoint
		Write32(pSeniorBoxAwardInfo, 0); //LuckMoney
		Write8(pSeniorBoxAwardInfo, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pSeniorBoxAwardInfo;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pSeniorBoxAwardInfo;
			Set16(pSeniorBoxAwardInfo, (WORD)len);
			pSeniorBoxAwardInfo += len;
		}
		Write32(pSeniorBoxAwardInfo, 0); //SpeedCoin

		len = pSeniorBoxAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //AcivityNum
	for (size_t i = 0; i < n; i++)
	{ //AnnualFestivalActivityCfg
		BYTE* pAnnualFestivalActivityCfg = p;
		Write16(pAnnualFestivalActivityCfg, 0); //len

		Write8(pAnnualFestivalActivityCfg, 0); //ActivityID
		Write8(pAnnualFestivalActivityCfg, 0); //ActivityType
		Write8(pAnnualFestivalActivityCfg, 0); //ActivityNameLen
		Write16(pAnnualFestivalActivityCfg, 0); //ActivityUrlLen

		len = pAnnualFestivalActivityCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestAnnualFestivalCfg(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseAnnualFestivalCfg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //Result
	Write32(p, 0); //OpenDate
	Write32(p, 0); //CloseDate
	Write32(p, 0); //PrimaryBoxCostItemID
	Write16(p, 0); //PrimaryBoxCostItemNum
	Write16(p, 0); //PrimaryItemRemainNum
	Write32(p, 0); //SeniorBoxCostItemID
	Write16(p, 0); //SeniorBoxCostItemNum
	Write16(p, 0); //SeniorItemRemainNum
	{ //PrimaryBoxAwardInfo
		BYTE* pPrimaryBoxAwardInfo = p;
		Write16(pPrimaryBoxAwardInfo, 0); //len

		Write32(pPrimaryBoxAwardInfo, 0); //Exp
		Write32(pPrimaryBoxAwardInfo, 0); //Money
		Write32(pPrimaryBoxAwardInfo, 0); //SuperMoney
		Write16(pPrimaryBoxAwardInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pPrimaryBoxAwardInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pPrimaryBoxAwardInfo;
			Set16(pPrimaryBoxAwardInfo, (WORD)len);
			pPrimaryBoxAwardInfo += len;
		}
		Write32(pPrimaryBoxAwardInfo, 0); //Coupons
		Write32(pPrimaryBoxAwardInfo, 0); //GuildPoint
		Write32(pPrimaryBoxAwardInfo, 0); //LuckMoney
		Write8(pPrimaryBoxAwardInfo, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pPrimaryBoxAwardInfo;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pPrimaryBoxAwardInfo;
			Set16(pPrimaryBoxAwardInfo, (WORD)len);
			pPrimaryBoxAwardInfo += len;
		}
		Write32(pPrimaryBoxAwardInfo, 0); //SpeedCoin

		len = pPrimaryBoxAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //SeniorBoxAwardInfo
		BYTE* pSeniorBoxAwardInfo = p;
		Write16(pSeniorBoxAwardInfo, 0); //len

		Write32(pSeniorBoxAwardInfo, 0); //Exp
		Write32(pSeniorBoxAwardInfo, 0); //Money
		Write32(pSeniorBoxAwardInfo, 0); //SuperMoney
		Write16(pSeniorBoxAwardInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pSeniorBoxAwardInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pSeniorBoxAwardInfo;
			Set16(pSeniorBoxAwardInfo, (WORD)len);
			pSeniorBoxAwardInfo += len;
		}
		Write32(pSeniorBoxAwardInfo, 0); //Coupons
		Write32(pSeniorBoxAwardInfo, 0); //GuildPoint
		Write32(pSeniorBoxAwardInfo, 0); //LuckMoney
		Write8(pSeniorBoxAwardInfo, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pSeniorBoxAwardInfo;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pSeniorBoxAwardInfo;
			Set16(pSeniorBoxAwardInfo, (WORD)len);
			pSeniorBoxAwardInfo += len;
		}
		Write32(pSeniorBoxAwardInfo, 0); //SpeedCoin

		len = pSeniorBoxAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //AcivityNum
	for (size_t i = 0; i < n; i++)
	{ //AnnualFestivalActivityCfg
		BYTE* pAnnualFestivalActivityCfg = p;
		Write16(pAnnualFestivalActivityCfg, 0); //len

		Write8(pAnnualFestivalActivityCfg, 0); //ActivityID
		Write8(pAnnualFestivalActivityCfg, 0); //ActivityType
		Write8(pAnnualFestivalActivityCfg, 0); //ActivityNameLen
		Write16(pAnnualFestivalActivityCfg, 0); //ActivityUrlLen

		len = pAnnualFestivalActivityCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetAnnualFestivalAward(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR AwardType = Read8(p);

}

void ResponseGetAnnualFestivalAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //Result
	Write8(p, 0); //AwardType
	{ //AwardToClient
		BYTE* pAwardToClient = p;
		Write16(pAwardToClient, 0); //len

		Write32(pAwardToClient, 0); //Exp
		Write32(pAwardToClient, 0); //Money
		Write32(pAwardToClient, 0); //SuperMoney
		Write16(pAwardToClient, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAwardToClient;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAwardToClient;
			Set16(pAwardToClient, (WORD)len);
			pAwardToClient += len;
		}
		Write32(pAwardToClient, 0); //Coupons
		Write32(pAwardToClient, 0); //GuildPoint
		Write32(pAwardToClient, 0); //LuckMoney
		Write8(pAwardToClient, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAwardToClient;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAwardToClient;
			Set16(pAwardToClient, (WORD)len);
			pAwardToClient += len;
		}
		Write32(pAwardToClient, 0); //SpeedCoin

		len = pAwardToClient - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyAnnualFestivalActiveAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //ActiveValue
	Write16(p, 0); //AwardNum
	for (size_t i = 0; i < n; i++)
	{ //AwardToClient
		BYTE* pAwardToClient = p;
		Write16(pAwardToClient, 0); //len

		Write32(pAwardToClient, 0); //Exp
		Write32(pAwardToClient, 0); //Money
		Write32(pAwardToClient, 0); //SuperMoney
		Write16(pAwardToClient, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAwardToClient;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAwardToClient;
			Set16(pAwardToClient, (WORD)len);
			pAwardToClient += len;
		}
		Write32(pAwardToClient, 0); //Coupons
		Write32(pAwardToClient, 0); //GuildPoint
		Write32(pAwardToClient, 0); //LuckMoney
		Write8(pAwardToClient, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAwardToClient;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAwardToClient;
			Set16(pAwardToClient, (WORD)len);
			pAwardToClient += len;
		}
		Write32(pAwardToClient, 0); //SpeedCoin

		len = pAwardToClient - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24614, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestAnnualFestivalActivity(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR ActivityID = Read8(p);

}

void RequestGetSpeedBuff(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	{ //SpeedBuffInfo
		BYTE* pSpeedBuffInfo = p;
		len = Read16(pSpeedBuffInfo);

		UCHAR SpeedBuffPos = Read8(pSpeedBuffInfo);
		int ItemID = Read32(pSpeedBuffInfo);

		p += len;
	}

}

void ResponseGetSpeedBuff(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen
	{ //SpeedBuffInfo
		BYTE* pSpeedBuffInfo = p;
		Write16(pSpeedBuffInfo, 0); //len

		Write8(pSpeedBuffInfo, 0); //SpeedBuffPos
		Write32(pSpeedBuffInfo, 0); //ItemID

		len = pSpeedBuffInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24623, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifySpeedBuff(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	{ //SpeedBuffInfo
		BYTE* pSpeedBuffInfo = p;
		Write16(pSpeedBuffInfo, 0); //len

		Write8(pSpeedBuffInfo, 0); //SpeedBuffPos
		Write32(pSpeedBuffInfo, 0); //ItemID

		len = pSpeedBuffInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24624, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyCrazyTimeOpen(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //CrazyTimeRemain

	len = p - buf;
	SendToClient(Client, 24627, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestStealPigAssist(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT DstSvrID = Read16(p);
	U DstGuildID = ReadU(p);
	U DstGuildRoomID = ReadU(p);

}

void ResponseStealPigAssist(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 24629, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestStealPigOpenTime(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseStealPigOpenTime(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write8(p, 0); //OpenCfgNum
	for (size_t i = 0; i < n; i++)
	{ //OpenCfg
		BYTE* pOpenCfg = p;
		Write16(pOpenCfg, 0); //len

		Write32(pOpenCfg, 0); //OpenTime
		Write32(pOpenCfg, 0); //CloseTime

		len = pOpenCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //DescLen

	len = p - buf;
	SendToClient(Client, 24630, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyStealPigActiveBoxInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //CurrentActiveValue
	Write8(p, 0); //Num
	for (size_t i = 0; i < n; i++)
	{ //StealPigAwardBoxInfo
		BYTE* pStealPigAwardBoxInfo = p;
		Write16(pStealPigAwardBoxInfo, 0); //len

		Write8(pStealPigAwardBoxInfo, 0); //Status
		Write32(pStealPigAwardBoxInfo, 0); //ActivityNeed
		{ //AwardToClient
			BYTE* pAwardToClient = pStealPigAwardBoxInfo;
			Write16(pAwardToClient, 0); //len

			Write32(pAwardToClient, 0); //Exp
			Write32(pAwardToClient, 0); //Money
			Write32(pAwardToClient, 0); //SuperMoney
			Write16(pAwardToClient, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAwardToClient;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAwardToClient;
				Set16(pAwardToClient, (WORD)len);
				pAwardToClient += len;
			}
			Write32(pAwardToClient, 0); //Coupons
			Write32(pAwardToClient, 0); //GuildPoint
			Write32(pAwardToClient, 0); //LuckMoney
			Write8(pAwardToClient, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAwardToClient;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAwardToClient;
				Set16(pAwardToClient, (WORD)len);
				pAwardToClient += len;
			}
			Write32(pAwardToClient, 0); //SpeedCoin

			len = pAwardToClient - pStealPigAwardBoxInfo;
			Set16(pStealPigAwardBoxInfo, (WORD)len);
			pStealPigAwardBoxInfo += len;
		}

		len = pStealPigAwardBoxInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //MinPlayerNumCanAssist
	Write8(p, 0); //MaxPlayerNumCanAttack
	Write8(p, 0); //ActiveValueDefend
	Write8(p, 0); //ActiveValueSubmitPig
	Write8(p, 0); //ActiveValueSubmitInCrazyTime

	len = p - buf;
	SendToClient(Client, 24632, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetStealPigActiveAward(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR Index = Read8(p);

}

void ResponseGetStealPigActiveAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //Result
	Write8(p, 0); //Index
	{ //AwardToClient
		BYTE* pAwardToClient = p;
		Write16(pAwardToClient, 0); //len

		Write32(pAwardToClient, 0); //Exp
		Write32(pAwardToClient, 0); //Money
		Write32(pAwardToClient, 0); //SuperMoney
		Write16(pAwardToClient, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAwardToClient;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAwardToClient;
			Set16(pAwardToClient, (WORD)len);
			pAwardToClient += len;
		}
		Write32(pAwardToClient, 0); //Coupons
		Write32(pAwardToClient, 0); //GuildPoint
		Write32(pAwardToClient, 0); //LuckMoney
		Write8(pAwardToClient, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAwardToClient;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAwardToClient;
			Set16(pAwardToClient, (WORD)len);
			pAwardToClient += len;
		}
		Write32(pAwardToClient, 0); //SpeedCoin

		len = pAwardToClient - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24633, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyPlayerInvadedInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //InvadedPlayerNum
	Write8(p, 0); //IsCanAssist

	len = p - buf;
	SendToClient(Client, 24634, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyPlayerStealPigPKInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //Result

	len = p - buf;
	SendToClient(Client, 24635, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyPlayerUseHammerInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //Result
	Write8(p, 0); //ActiveValue
	Write8(p, 0); //TotalNum
	Write8(p, 0); //CurrentNum
	Write32(p, 0); //Money
	Write32(p, 0); //SuperMoney
	Write32(p, 0); //Exp
	Write32(p, 0); //Charm
	Write32(p, 0); //DanceExp
	Write32(p, 0); //Coupons
	Write32(p, 0); //Admiration
	Write32(p, 0); //LuckMoney
	Write32(p, 0); //TeamWorkExp
	Write32(p, 0); //AchievePoint
	Write32(p, 0); //ConsumeScore
	Write32(p, 0); //HistoryConsumeScore
	Write32(p, 0); //LadderMatchAchievePoint
	Write32(p, 0); //SpeedBean
	Write32(p, 0); //SpeedCoin

	len = p - buf;
	SendToClient(Client, 24641, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyPlayerAreaInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //PlayerNum
	for (size_t i = 0; i < n; i++)
	{ //PlayerInfo
		BYTE* pPlayerInfo = p;
		Write16(pPlayerInfo, 0); //len

		Write8(pPlayerInfo, 0); //AreaID

		len = pPlayerInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestFindGuildByKeyName(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	char[] GuildName[] = ReadString(p);

}

void ResponseFindGuildByKeyName(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //GuildCount
	for (size_t i = 0; i < n; i++)
	{ //GuildDescInfo
		BYTE* pGuildDescInfo = p;
		Write16(pGuildDescInfo, 0); //len

		Write32(pGuildDescInfo, 0); //GuildID
		WriteString(pGuildDescInfo, 0); //Name[]
		Write32(pGuildDescInfo, 0); //Level
		Write32(pGuildDescInfo, 0); //Score
		Write32(pGuildDescInfo, 0); //CreateTime
		Write16(pGuildDescInfo, 0); //Attribute
		Write16(pGuildDescInfo, 0); //MaxMember
		Write16(pGuildDescInfo, 0); //CurrentMember
		Write32(pGuildDescInfo, 0); //Prosperity
		Write16(pGuildDescInfo, 0); //Level
		{ //GuildEnlistCond
			BYTE* pGuildEnlistCond = pGuildDescInfo;
			Write16(pGuildEnlistCond, 0); //len

			Write32(pGuildEnlistCond, 0); //ProsperityCondition
			Write32(pGuildEnlistCond, 0); //JoinTotalCondition
			Write32(pGuildEnlistCond, 0); //HonorCondition
			Write32(pGuildEnlistCond, 0); //CharmCondition
			Write32(pGuildEnlistCond, 0); //DanceExpCondition
			Write32(pGuildEnlistCond, 0); //SkillPointCondition
			Write32(pGuildEnlistCond, 0); //ExpLevelCondition
			Write32(pGuildEnlistCond, 0); //ApplyExpLevelCondition
			Write8(pGuildEnlistCond, 0); //EnlistType

			len = pGuildEnlistCond - pGuildDescInfo;
			Set16(pGuildDescInfo, (WORD)len);
			pGuildDescInfo += len;
		}
		Write8(pGuildDescInfo, 0); //SubType
		{ //CardOtherInfo
			BYTE* pCardOtherInfo = pGuildDescInfo;
			Write16(pCardOtherInfo, 0); //len

			Write32(pCardOtherInfo, 0); //MainZone1
			Write32(pCardOtherInfo, 0); //MainZone2
			Write32(pCardOtherInfo, 0); //MainMode1
			Write32(pCardOtherInfo, 0); //MainMode2
			Write32(pCardOtherInfo, 0); //OtherInterest1
			Write32(pCardOtherInfo, 0); //OtherInterest2

			len = pCardOtherInfo - pGuildDescInfo;
			Set16(pGuildDescInfo, (WORD)len);
			pGuildDescInfo += len;
		}
		Write16(pGuildDescInfo, 0); //DescLen
		Write32(pGuildDescInfo, 0); //WeekProsper
		Write32(pGuildDescInfo, 0); //GuildQQGroup
		Write8(pGuildDescInfo, 0); //RecommendType
		Write16(pGuildDescInfo, 0); //FriendNums
		Write16(pGuildDescInfo, 0); //DCRecommendIndex

		len = pGuildDescInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen
	WriteU(p, 0); //NextQueryNum
	Write(p, 0); //NextQueryKey[]

	len = p - buf;
	SendToClient(Client, 24637, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyAllAreaNameCfg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //Nums
	for (size_t i = 0; i < n; i++)
	{ //AllAreaName
		BYTE* pAllAreaName = p;
		Write16(pAllAreaName, 0); //len

		Write32(pAllAreaName, 0); //AreaId
		Write8(pAllAreaName, 0); //AreaNameLen

		len = pAllAreaName - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24639, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestPlayerAction(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	short ActionType = Read16(p);
	int Para0 = Read32(p);
	int Para1 = Read32(p);
	int Para2 = Read32(p);
	int Para3 = Read32(p);
	int Para4 = Read32(p);
	char[] Para0[] = ReadString(p);
	char[] Para1[] = ReadString(p);

}

void ResponsePlayerAction(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //ActionType
	Write32(p, 0); //Para0
	Write32(p, 0); //Para1
	Write32(p, 0); //Para2
	Write32(p, 0); //Para3
	Write32(p, 0); //Para4
	WriteString(p, 0); //Para0[]
	WriteString(p, 0); //Para1[]

	len = p - buf;
	SendToClient(Client, 24640, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetFoodFightingShowInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	char ReqType = Read8(p);

}

void ResponseGetFoodFightingShowInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write32(p, 0); //ActionBeginDate
	Write32(p, 0); //ActionEndDate
	Write32(p, 0); //ActionBeginTime
	Write32(p, 0); //ActionEndTime
	Write8(p, 0); //AlreadyBlessLuck
	{ //BlessLuckAwardInfo
		BYTE* pBlessLuckAwardInfo = p;
		Write16(pBlessLuckAwardInfo, 0); //len

		Write32(pBlessLuckAwardInfo, 0); //Exp
		Write32(pBlessLuckAwardInfo, 0); //Money
		Write32(pBlessLuckAwardInfo, 0); //SuperMoney
		Write16(pBlessLuckAwardInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pBlessLuckAwardInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pBlessLuckAwardInfo;
			Set16(pBlessLuckAwardInfo, (WORD)len);
			pBlessLuckAwardInfo += len;
		}
		Write32(pBlessLuckAwardInfo, 0); //Coupons
		Write32(pBlessLuckAwardInfo, 0); //GuildPoint
		Write32(pBlessLuckAwardInfo, 0); //LuckMoney
		Write8(pBlessLuckAwardInfo, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pBlessLuckAwardInfo;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pBlessLuckAwardInfo;
			Set16(pBlessLuckAwardInfo, (WORD)len);
			pBlessLuckAwardInfo += len;
		}
		Write32(pBlessLuckAwardInfo, 0); //SpeedCoin

		len = pBlessLuckAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //FoodNums
	for (size_t i = 0; i < n; i++)
	{ //FantasyFoodInfos
		BYTE* pFantasyFoodInfos = p;
		Write16(pFantasyFoodInfos, 0); //len

		Write32(pFantasyFoodInfos, 0); //FoodIndex
		Write8(pFantasyFoodInfos, 0); //HaveAlreadyTasted
		Write8(pFantasyFoodInfos, 0); //AwardBuffer
		{ //AwardInfo
			BYTE* pAwardInfo = pFantasyFoodInfos;
			Write16(pAwardInfo, 0); //len

			{ //AwardItemInfo
				BYTE* pAwardItemInfo = pAwardInfo;
				Write16(pAwardItemInfo, 0); //len

				Write32(pAwardItemInfo, 0); //Exp
				Write32(pAwardItemInfo, 0); //Money
				Write32(pAwardItemInfo, 0); //SuperMoney
				Write16(pAwardItemInfo, 0); //ItemNum
				for (size_t i = 0; i < n; i++)
				{ //ItemInfo
					BYTE* pItemInfo = pAwardItemInfo;
					Write16(pItemInfo, 0); //len

					Write32(pItemInfo, 0); //ItemID
					Write32(pItemInfo, 0); //ItemNum
					Write32(pItemInfo, 0); //AvailPeriod
					Write8(pItemInfo, 0); //Status
					WriteUn(pItemInfo, 0); //ObtainTime
					Write32(pItemInfo, 0); //OtherAttribute
					Write16(pItemInfo, 0); //ItemType

					len = pItemInfo - pAwardItemInfo;
					Set16(pAwardItemInfo, (WORD)len);
					pAwardItemInfo += len;
				}
				Write32(pAwardItemInfo, 0); //Coupons
				Write32(pAwardItemInfo, 0); //GuildPoint
				Write32(pAwardItemInfo, 0); //LuckMoney
				Write8(pAwardItemInfo, 0); //ExtendInfoNum
				for (size_t i = 0; i < n; i++)
				{ //ExtendInfoAward
					BYTE* pExtendInfoAward = pAwardItemInfo;
					Write16(pExtendInfoAward, 0); //len

					Write16(pExtendInfoAward, 0); //Key
					Write32(pExtendInfoAward, 0); //AddValue
					Write32(pExtendInfoAward, 0); //TotalValue
					Write8(pExtendInfoAward, 0); //ShowPriority
					Write16(pExtendInfoAward, 0); //BuyNeedScore
					Write8(pExtendInfoAward, 0); //OneMatchMaxNum

					len = pExtendInfoAward - pAwardItemInfo;
					Set16(pAwardItemInfo, (WORD)len);
					pAwardItemInfo += len;
				}
				Write32(pAwardItemInfo, 0); //SpeedCoin

				len = pAwardItemInfo - pAwardInfo;
				Set16(pAwardInfo, (WORD)len);
				pAwardInfo += len;
			}
			{ //AwardBufferInfo
				BYTE* pAwardBufferInfo = pAwardInfo;
				Write16(pAwardBufferInfo, 0); //len

				Write16(pAwardBufferInfo, 0); //RootBufferID
				Write16(pAwardBufferInfo, 0); //BufferID
				Write16(pAwardBufferInfo, 0); //AddBufferFactor
				Write16(pAwardBufferInfo, 0); //TaskBufferID

				len = pAwardBufferInfo - pAwardInfo;
				Set16(pAwardInfo, (WORD)len);
				pAwardInfo += len;
			}
			Write8(pAwardInfo, 0); //HaveBuffer

			len = pAwardInfo - pFantasyFoodInfos;
			Set16(pFantasyFoodInfos, (WORD)len);
			pFantasyFoodInfos += len;
		}

		len = pFantasyFoodInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HaveOpenedOfficalBuffer
	Write32(p, 0); //BufferOpenTime
	Write32(p, 0); //BufferCloseTime
	Write16(p, 0); //ActionRelatedTaskNums
	for (size_t i = 0; i < n; i++)
	{ //FoodFightingRelatedTaskInfos
		BYTE* pFoodFightingRelatedTaskInfos = p;
		Write16(pFoodFightingRelatedTaskInfos, 0); //len

		Write32(pFoodFightingRelatedTaskInfos, 0); //TaskID
		Write32(pFoodFightingRelatedTaskInfos, 0); //ItemID
		Write32(pFoodFightingRelatedTaskInfos, 0); //AwardItemNums

		len = pFoodFightingRelatedTaskInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //NeededItemNums
	Write32(p, 0); //CurrentTasteFoodNums
	Write8(p, 0); //OpenOfficalBufferTips
	{ //OfficalBufferAwardInfo
		BYTE* pOfficalBufferAwardInfo = p;
		Write16(pOfficalBufferAwardInfo, 0); //len

		Write32(pOfficalBufferAwardInfo, 0); //Exp
		Write32(pOfficalBufferAwardInfo, 0); //Money
		Write32(pOfficalBufferAwardInfo, 0); //SuperMoney
		Write16(pOfficalBufferAwardInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pOfficalBufferAwardInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pOfficalBufferAwardInfo;
			Set16(pOfficalBufferAwardInfo, (WORD)len);
			pOfficalBufferAwardInfo += len;
		}
		Write32(pOfficalBufferAwardInfo, 0); //Coupons
		Write32(pOfficalBufferAwardInfo, 0); //GuildPoint
		Write32(pOfficalBufferAwardInfo, 0); //LuckMoney
		Write8(pOfficalBufferAwardInfo, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pOfficalBufferAwardInfo;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pOfficalBufferAwardInfo;
			Set16(pOfficalBufferAwardInfo, (WORD)len);
			pOfficalBufferAwardInfo += len;
		}
		Write32(pOfficalBufferAwardInfo, 0); //SpeedCoin

		len = pOfficalBufferAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestTasteFoodInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT FoodIndex = Read32(p);

}

void ResponseTasteFoodInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //FoodIndex
	Write16(p, 0); //ResultID
	Write8(p, 0); //AwardBuffer
	{ //AwardInfo
		BYTE* pAwardInfo = p;
		Write16(pAwardInfo, 0); //len

		{ //AwardItemInfo
			BYTE* pAwardItemInfo = pAwardInfo;
			Write16(pAwardItemInfo, 0); //len

			Write32(pAwardItemInfo, 0); //Exp
			Write32(pAwardItemInfo, 0); //Money
			Write32(pAwardItemInfo, 0); //SuperMoney
			Write16(pAwardItemInfo, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAwardItemInfo;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //Coupons
			Write32(pAwardItemInfo, 0); //GuildPoint
			Write32(pAwardItemInfo, 0); //LuckMoney
			Write8(pAwardItemInfo, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAwardItemInfo;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //SpeedCoin

			len = pAwardItemInfo - pAwardInfo;
			Set16(pAwardInfo, (WORD)len);
			pAwardInfo += len;
		}
		{ //AwardBufferInfo
			BYTE* pAwardBufferInfo = pAwardInfo;
			Write16(pAwardBufferInfo, 0); //len

			Write16(pAwardBufferInfo, 0); //RootBufferID
			Write16(pAwardBufferInfo, 0); //BufferID
			Write16(pAwardBufferInfo, 0); //AddBufferFactor
			Write16(pAwardBufferInfo, 0); //TaskBufferID

			len = pAwardBufferInfo - pAwardInfo;
			Set16(pAwardInfo, (WORD)len);
			pAwardInfo += len;
		}
		Write8(pAwardInfo, 0); //HaveBuffer

		len = pAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //NeedItemNums

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestBlessLuckInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseBlessLuckInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write8(p, 0); //LuckType
	{ //BlessLuckAwardInfo
		BYTE* pBlessLuckAwardInfo = p;
		Write16(pBlessLuckAwardInfo, 0); //len

		Write32(pBlessLuckAwardInfo, 0); //Exp
		Write32(pBlessLuckAwardInfo, 0); //Money
		Write32(pBlessLuckAwardInfo, 0); //SuperMoney
		Write16(pBlessLuckAwardInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pBlessLuckAwardInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pBlessLuckAwardInfo;
			Set16(pBlessLuckAwardInfo, (WORD)len);
			pBlessLuckAwardInfo += len;
		}
		Write32(pBlessLuckAwardInfo, 0); //Coupons
		Write32(pBlessLuckAwardInfo, 0); //GuildPoint
		Write32(pBlessLuckAwardInfo, 0); //LuckMoney
		Write8(pBlessLuckAwardInfo, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pBlessLuckAwardInfo;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pBlessLuckAwardInfo;
			Set16(pBlessLuckAwardInfo, (WORD)len);
			pBlessLuckAwardInfo += len;
		}
		Write32(pBlessLuckAwardInfo, 0); //SpeedCoin

		len = pBlessLuckAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetMagicCubesInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetMagicCubesInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	{ //OpenTime
		BYTE* pOpenTime = p;
		Write16(pOpenTime, 0); //len

		Write32(pOpenTime, 0); //SeasonID
		Write32(pOpenTime, 0); //BeginDate
		Write32(pOpenTime, 0); //EndDate
		Write8(pOpenTime, 0); //SegInDayNum
		for (size_t i = 0; i < n; i++)
		{ //SegTimeInDay
			BYTE* pSegTimeInDay = pOpenTime;
			Write16(pSegTimeInDay, 0); //len

			Write32(pSegTimeInDay, 0); //BeginTime
			Write32(pSegTimeInDay, 0); //EndTime

			len = pSegTimeInDay - pOpenTime;
			Set16(pOpenTime, (WORD)len);
			pOpenTime += len;
		}
		Write8(pOpenTime, 0); //Mode

		len = pOpenTime - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //CandyItemID
	Write32(p, 0); //CandyCost
	Write16(p, 0); //ItemNum
	for (size_t i = 0; i < n; i++)
	{ //ItemInfo
		BYTE* pItemInfo = p;
		Write16(pItemInfo, 0); //len

		Write32(pItemInfo, 0); //ItemID
		Write32(pItemInfo, 0); //ItemNum
		Write32(pItemInfo, 0); //AvailPeriod
		Write8(pItemInfo, 0); //Status
		WriteUn(pItemInfo, 0); //ObtainTime
		Write32(pItemInfo, 0); //OtherAttribute
		Write16(pItemInfo, 0); //ItemType

		len = pItemInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24642, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetGuildChampionshipInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetGuildChampionshipInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write32(p, 0); //ChampionshipStage
	Write8(p, 0); //Applied
	Write32(p, 0); //JointlyHoldGuildID
	WriteString(p, 0); //GuildName[]
	Write32(p, 0); //LastChampionUin
	WriteString(p, 0); //NickName[]
	Write32(p, 0); //NeedMemberNum
	Write32(p, 0); //CanApplyMemberNum
	Write32(p, 0); //AppliedMemberNum
	Write32(p, 0); //CountDownTime
	Write32(p, 0); //Mode
	Write32(p, 0); //MapType
	Write32(p, 0); //HoldDay
	Write8(p, 0); //HoldTimeNum
	for (size_t i = 0; i < n; i++)
	{ //HoldTimes
		BYTE* pHoldTimes = p;
		Write16(pHoldTimes, 0); //len

		Write32(pHoldTimes, 0); //BeginTime
		Write32(pHoldTimes, 0); //EndTime

		len = pHoldTimes - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //HoldTimeIdx
	Write32(p, 0); //HoldBeginDay
	Write32(p, 0); //HoldEndDay
	Write32(p, 0); //MinCustomMapNum
	Write32(p, 0); //MaxCustomMapNum
	Write32(p, 0); //MapTypeProp
	Write8(p, 0); //RankNum
	for (size_t i = 0; i < n; i++)
	{ //RankInfo
		BYTE* pRankInfo = p;
		Write16(pRankInfo, 0); //len

		Write32(pRankInfo, 0); //Uin
		WriteString(pRankInfo, 0); //NickName[]
		Write32(pRankInfo, 0); //GuildID
		WriteString(pRankInfo, 0); //GuildName[]
		Write16(pRankInfo, 0); //Score
		Write8(pRankInfo, 0); //RaceNum

		len = pRankInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //SelfRank
	Write16(p, 0); //PlayerNum
	Write16(p, 0); //SelfScore
	Write8(p, 0); //AwardState
	{ //InviteInfo
		BYTE* pInviteInfo = p;
		Write16(pInviteInfo, 0); //len

		Write16(pInviteInfo, 0); //Num
		Write32(pInviteInfo, 0); //GuildID[]

		len = pInviteInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //CountDownTimeBeforeMatch
	Write8(p, 0); //RaceState
	Write32(p, 0); //JointlyHoldAppliedMemberNum
	Write8(p, 0); //TotalRound
	Write8(p, 0); //CanMatch
	Write32(p, 0); //KartID

	len = p - buf;
	SendToClient(Client, 21201, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestApplyGuildChampionship(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseApplyGuildChampionship(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write32(p, 0); //NeedWeekProsper
	Write32(p, 0); //WeekProsper
	Write8(p, 0); //HasAward
	for (size_t i = 0; i < n; i++)
	{ //AwardInfo
		BYTE* pAwardInfo = p;
		Write16(pAwardInfo, 0); //len

		Write32(pAwardInfo, 0); //Exp
		Write32(pAwardInfo, 0); //Money
		Write32(pAwardInfo, 0); //SuperMoney
		Write16(pAwardInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAwardInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAwardInfo;
			Set16(pAwardInfo, (WORD)len);
			pAwardInfo += len;
		}
		Write32(pAwardInfo, 0); //Coupons
		Write32(pAwardInfo, 0); //GuildPoint
		Write32(pAwardInfo, 0); //LuckMoney
		Write8(pAwardInfo, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAwardInfo;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAwardInfo;
			Set16(pAwardInfo, (WORD)len);
			pAwardInfo += len;
		}
		Write32(pAwardInfo, 0); //SpeedCoin

		len = pAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //Contribute
	Write32(p, 0); //AppliedMemberNum
	Write32(p, 0); //JointlyHoldAppliedMemberNum

	len = p - buf;
	SendToClient(Client, 21202, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyKeyValueInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //Type
	Write16(p, 0); //Num
	for (size_t i = 0; i < n; i++)
	{ //Info
		BYTE* pInfo = p;
		Write16(pInfo, 0); //len

		Write32(pInfo, 0); //Key
		Write32(pInfo, 0); //Value

		len = pInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 21204, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestModifyGuildChampionship(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int Mode = Read32(p);
	int MapType = Read32(p);
	int HoldDay = Read32(p);
	int HoldTime = Read32(p);
	int MapTypeProp = Read32(p);

}

void ResponseModifyGuildChampionship(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 21203, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetGuildChampionshipRecommendGuildInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetGuildChampionshipRecommendGuildInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write8(p, 0); //Num
	for (size_t i = 0; i < n; i++)
	{ //GuildInfo
		BYTE* pGuildInfo = p;
		Write16(pGuildInfo, 0); //len

		Write32(pGuildInfo, 0); //GuildID
		WriteString(pGuildInfo, 0); //Name[]
		Write32(pGuildInfo, 0); //Score
		Write16(pGuildInfo, 0); //Level
		Write32(pGuildInfo, 0); //AppliedMemberNum
		Write32(pGuildInfo, 0); //Mode
		Write32(pGuildInfo, 0); //MapType
		Write32(pGuildInfo, 0); //HoldDay
		Write32(pGuildInfo, 0); //HoldTimeIdx
		Write8(pGuildInfo, 0); //Invited
		Write32(pGuildInfo, 0); //MapTypeProp

		len = pGuildInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //BeInviteNum
	Write32(p, 0); //AutoJointlyHold

	len = p - buf;
	SendToClient(Client, 21205, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestFindGuildChampionshipGuild(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	char[] GuildName[] = ReadString(p);
	UINT GuildID = Read32(p);

}

void ResponseFindGuildChampionshipGuild(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	{ //Info
		BYTE* pInfo = p;
		Write16(pInfo, 0); //len

		Write32(pInfo, 0); //GuildID
		WriteString(pInfo, 0); //Name[]
		Write32(pInfo, 0); //Score
		Write16(pInfo, 0); //Level
		Write32(pInfo, 0); //AppliedMemberNum
		Write32(pInfo, 0); //Mode
		Write32(pInfo, 0); //MapType
		Write32(pInfo, 0); //HoldDay
		Write32(pInfo, 0); //HoldTimeIdx
		Write8(pInfo, 0); //Invited
		Write32(pInfo, 0); //MapTypeProp

		len = pInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 21206, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetGuildChampionshipBeInviteGuildInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	U NextQueryNum = ReadU(p);
	[] NextQueryKey[] = Read(p);

}

void ResponseGetGuildChampionshipBeInviteGuildInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write8(p, 0); //Num
	for (size_t i = 0; i < n; i++)
	{ //GuildInfo
		BYTE* pGuildInfo = p;
		Write16(pGuildInfo, 0); //len

		Write32(pGuildInfo, 0); //GuildID
		WriteString(pGuildInfo, 0); //Name[]
		Write32(pGuildInfo, 0); //Score
		Write16(pGuildInfo, 0); //Level
		Write32(pGuildInfo, 0); //AppliedMemberNum
		Write32(pGuildInfo, 0); //Mode
		Write32(pGuildInfo, 0); //MapType
		Write32(pGuildInfo, 0); //HoldDay
		Write32(pGuildInfo, 0); //HoldTimeIdx
		Write8(pGuildInfo, 0); //Invited
		Write32(pGuildInfo, 0); //MapTypeProp

		len = pGuildInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	WriteU(p, 0); //NextQueryNum
	Write(p, 0); //NextQueryKey[]

	len = p - buf;
	SendToClient(Client, 21207, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetGuildChampionshipGuildInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT GuildCount = Read32(p);
	[] GuildID[] = Read(p);

}

void ResponseGetGuildChampionshipGuildInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write32(p, 0); //GuildCount
	for (size_t i = 0; i < n; i++)
	{ //GuildInfo
		BYTE* pGuildInfo = p;
		Write16(pGuildInfo, 0); //len

		Write32(pGuildInfo, 0); //GuildID
		WriteString(pGuildInfo, 0); //Name[]
		Write32(pGuildInfo, 0); //Score
		Write16(pGuildInfo, 0); //Level
		Write32(pGuildInfo, 0); //AppliedMemberNum
		Write32(pGuildInfo, 0); //Mode
		Write32(pGuildInfo, 0); //MapType
		Write32(pGuildInfo, 0); //HoldDay
		Write32(pGuildInfo, 0); //HoldTimeIdx
		Write8(pGuildInfo, 0); //Invited
		Write32(pGuildInfo, 0); //MapTypeProp

		len = pGuildInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 21208, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestMREnterChatRoom(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT RoomID = Read32(p);

}

void ResponseMREnterChatRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen
	Write16(p, 0); //PlayerNum
	for (size_t i = 0; i < n; i++)
	{ //PlayerInfo
		BYTE* pPlayerInfo = p;
		Write16(pPlayerInfo, 0); //len

		Write32(pPlayerInfo, 0); //Uin
		WriteString(pPlayerInfo, 0); //NickName[]
		Write32(pPlayerInfo, 0); //Identify
		Write8(pPlayerInfo, 0); //Gender
		WriteUn(pPlayerInfo, 0); //VipFlag
		Write8(pPlayerInfo, 0); //HasNobleInfo
		for (size_t i = 0; i < n; i++)
		{ //NobleInfo
			BYTE* pNobleInfo = pPlayerInfo;
			Write16(pNobleInfo, 0); //len

			Write32(pNobleInfo, 0); //NobleID
			Write8(pNobleInfo, 0); //NobleLevel
			Write32(pNobleInfo, 0); //NoblePoint
			Write32(pNobleInfo, 0); //NobleLeftDays

			len = pNobleInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		Write8(pPlayerInfo, 0); //HasGuildVipInfo
		for (size_t i = 0; i < n; i++)
		{ //GuildVipBaseInfo
			BYTE* pGuildVipBaseInfo = pPlayerInfo;
			Write16(pGuildVipBaseInfo, 0); //len

			Write8(pGuildVipBaseInfo, 0); //GuildVipLevel
			Write32(pGuildVipBaseInfo, 0); //GuildVipPoint

			len = pGuildVipBaseInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		Write8(pPlayerInfo, 0); //HasLoverVip
		for (size_t i = 0; i < n; i++)
		{ //LoverVipInfo
			BYTE* pLoverVipInfo = pPlayerInfo;
			Write16(pLoverVipInfo, 0); //len

			Write8(pLoverVipInfo, 0); //LoverVipLevel
			Write32(pLoverVipInfo, 0); //LoverVipPoint
			Write8(pLoverVipInfo, 0); //GrowRate

			len = pLoverVipInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		Write8(pPlayerInfo, 0); //GardenLevel
		Write8(pPlayerInfo, 0); //HasEmperorInfo
		for (size_t i = 0; i < n; i++)
		{ //EmperorInfo
			BYTE* pEmperorInfo = pPlayerInfo;
			Write16(pEmperorInfo, 0); //len

			Write8(pEmperorInfo, 0); //EmperorLevel
			Write32(pEmperorInfo, 0); //EmperorPoint
			Write32(pEmperorInfo, 0); //EmperorLeftDays
			Write8(pEmperorInfo, 0); //EmperorGrowRate

			len = pEmperorInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		Write8(pPlayerInfo, 0); //HasConsumeVipInfo
		for (size_t i = 0; i < n; i++)
		{ //ConsumeVipInfo
			BYTE* pConsumeVipInfo = pPlayerInfo;
			Write16(pConsumeVipInfo, 0); //len

			WriteUn(pConsumeVipInfo, 0); //VipLevel
			WriteUn(pConsumeVipInfo, 0); //CharmValueOfMonth
			WriteUn(pConsumeVipInfo, 0); //SearchTreasureNums
			WriteUn(pConsumeVipInfo, 0); //GetTreasureNums

			len = pConsumeVipInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		Write8(pPlayerInfo, 0); //RaceNum
		Write16(pPlayerInfo, 0); //Score
		Write8(pPlayerInfo, 0); //IsInRoom
		Write32(pPlayerInfo, 0); //GuildID

		len = pPlayerInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //TotalRound

	len = p - buf;
	SendToClient(Client, 21211, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyMultiRaceInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //InfoType
	Write32(p, 0); //DstUin
	Write8(p, 0); //HasPlyaerInfo
	for (size_t i = 0; i < n; i++)
	{ //PlayerInfo
		BYTE* pPlayerInfo = p;
		Write16(pPlayerInfo, 0); //len

		Write32(pPlayerInfo, 0); //Uin
		WriteString(pPlayerInfo, 0); //NickName[]
		Write32(pPlayerInfo, 0); //Identify
		Write8(pPlayerInfo, 0); //Gender
		WriteUn(pPlayerInfo, 0); //VipFlag
		Write8(pPlayerInfo, 0); //HasNobleInfo
		for (size_t i = 0; i < n; i++)
		{ //NobleInfo
			BYTE* pNobleInfo = pPlayerInfo;
			Write16(pNobleInfo, 0); //len

			Write32(pNobleInfo, 0); //NobleID
			Write8(pNobleInfo, 0); //NobleLevel
			Write32(pNobleInfo, 0); //NoblePoint
			Write32(pNobleInfo, 0); //NobleLeftDays

			len = pNobleInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		Write8(pPlayerInfo, 0); //HasGuildVipInfo
		for (size_t i = 0; i < n; i++)
		{ //GuildVipBaseInfo
			BYTE* pGuildVipBaseInfo = pPlayerInfo;
			Write16(pGuildVipBaseInfo, 0); //len

			Write8(pGuildVipBaseInfo, 0); //GuildVipLevel
			Write32(pGuildVipBaseInfo, 0); //GuildVipPoint

			len = pGuildVipBaseInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		Write8(pPlayerInfo, 0); //HasLoverVip
		for (size_t i = 0; i < n; i++)
		{ //LoverVipInfo
			BYTE* pLoverVipInfo = pPlayerInfo;
			Write16(pLoverVipInfo, 0); //len

			Write8(pLoverVipInfo, 0); //LoverVipLevel
			Write32(pLoverVipInfo, 0); //LoverVipPoint
			Write8(pLoverVipInfo, 0); //GrowRate

			len = pLoverVipInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		Write8(pPlayerInfo, 0); //GardenLevel
		Write8(pPlayerInfo, 0); //HasEmperorInfo
		for (size_t i = 0; i < n; i++)
		{ //EmperorInfo
			BYTE* pEmperorInfo = pPlayerInfo;
			Write16(pEmperorInfo, 0); //len

			Write8(pEmperorInfo, 0); //EmperorLevel
			Write32(pEmperorInfo, 0); //EmperorPoint
			Write32(pEmperorInfo, 0); //EmperorLeftDays
			Write8(pEmperorInfo, 0); //EmperorGrowRate

			len = pEmperorInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		Write8(pPlayerInfo, 0); //HasConsumeVipInfo
		for (size_t i = 0; i < n; i++)
		{ //ConsumeVipInfo
			BYTE* pConsumeVipInfo = pPlayerInfo;
			Write16(pConsumeVipInfo, 0); //len

			WriteUn(pConsumeVipInfo, 0); //VipLevel
			WriteUn(pConsumeVipInfo, 0); //CharmValueOfMonth
			WriteUn(pConsumeVipInfo, 0); //SearchTreasureNums
			WriteUn(pConsumeVipInfo, 0); //GetTreasureNums

			len = pConsumeVipInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		Write8(pPlayerInfo, 0); //RaceNum
		Write16(pPlayerInfo, 0); //Score
		Write8(pPlayerInfo, 0); //IsInRoom
		Write32(pPlayerInfo, 0); //GuildID

		len = pPlayerInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //PlayerNum
	for (size_t i = 0; i < n; i++)
	{ //PlayerScore
		BYTE* pPlayerScore = p;
		Write16(pPlayerScore, 0); //len

		Write32(pPlayerScore, 0); //Uin
		Write8(pPlayerScore, 0); //RaceNum
		Write16(pPlayerScore, 0); //Score
		Write8(pPlayerScore, 0); //Status
		Write32(pPlayerScore, 0); //FinishTime

		len = pPlayerScore - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //MRStage
	Write32(p, 0); //StageLeftTime
	Write8(p, 0); //CurrentRound
	Write32(p, 0); //BaseMode
	Write32(p, 0); //SubMode

	len = p - buf;
	SendToClient(Client, 21212, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyMROpponentInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //PlayerNum
	for (size_t i = 0; i < n; i++)
	{ //MROpponentInfo
		BYTE* pMROpponentInfo = p;
		Write16(pMROpponentInfo, 0); //len

		{ //PlayerInfo
			BYTE* pPlayerInfo = pMROpponentInfo;
			Write16(pPlayerInfo, 0); //len

			WriteUn(pPlayerInfo, 0); //Uin
			WriteUn(pPlayerInfo, 0); //Identity
			Write8(pPlayerInfo, 0); //SeatID
			Write8(pPlayerInfo, 0); //TeamID
			Write16(pPlayerInfo, 0); //PlayerID
			Write8(pPlayerInfo, 0); //Status
			{ //PlayerDBBaseInfo
				BYTE* pPlayerDBBaseInfo = pPlayerInfo;
				Write16(pPlayerDBBaseInfo, 0); //len

				WriteString(pPlayerDBBaseInfo, 0); //NickName[]
				Write8(pPlayerDBBaseInfo, 0); //Gender
				Write8(pPlayerDBBaseInfo, 0); //Country
				Write32(pPlayerDBBaseInfo, 0); //License
				WriteUn(pPlayerDBBaseInfo, 0); //Experience
				Write32(pPlayerDBBaseInfo, 0); //SuperMoney
				Write32(pPlayerDBBaseInfo, 0); //Money
				WriteUn(pPlayerDBBaseInfo, 0); //WinNum
				Write32(pPlayerDBBaseInfo, 0); //SecondNum
				Write32(pPlayerDBBaseInfo, 0); //ThirdNum
				WriteUn(pPlayerDBBaseInfo, 0); //TotalNum
				Write32(pPlayerDBBaseInfo, 0); //CurHonor
				Write32(pPlayerDBBaseInfo, 0); //TotalHonor
				Write32(pPlayerDBBaseInfo, 0); //TodayHonor
				Write32(pPlayerDBBaseInfo, 0); //RelaxTime
				Write32(pPlayerDBBaseInfo, 0); //MonthDurationBefore
				Write32(pPlayerDBBaseInfo, 0); //MonthDurationCur
				Write32(pPlayerDBBaseInfo, 0); //Charm
				Write32(pPlayerDBBaseInfo, 0); //DurationGame
				Write32(pPlayerDBBaseInfo, 0); //DanceExp
				Write32(pPlayerDBBaseInfo, 0); //Coupons
				Write32(pPlayerDBBaseInfo, 0); //Admiration
				Write32(pPlayerDBBaseInfo, 0); //LuckMoney
				Write32(pPlayerDBBaseInfo, 0); //TeamWorkExp
				Write32(pPlayerDBBaseInfo, 0); //AchievePoint
				Write32(pPlayerDBBaseInfo, 0); //RegTime
				WriteString(pPlayerDBBaseInfo, 0); //Signature[]
				Write32(pPlayerDBBaseInfo, 0); //LuckyMatchPoint
				Write32(pPlayerDBBaseInfo, 0); //LuckyMatchNum
				Write16(pPlayerDBBaseInfo, 0); //LuckyMatchFirstNum
				Write8(pPlayerDBBaseInfo, 0); //LuckyMatchBestRand
				Write32(pPlayerDBBaseInfo, 0); //LuckyMatchWinNum
				Write32(pPlayerDBBaseInfo, 0); //FizzPointTotal
				Write16(pPlayerDBBaseInfo, 0); //FizzPointDaily
				Write16(pPlayerDBBaseInfo, 0); //FizzPointWeekly
				Write16(pPlayerDBBaseInfo, 0); //FizzPointLastWeek
				Write8(pPlayerDBBaseInfo, 0); //FizzLotteryStatus
				Write32(pPlayerDBBaseInfo, 0); //FizzLastUpdateTime
				Write32(pPlayerDBBaseInfo, 0); //SNSLocaleCode
				Write32(pPlayerDBBaseInfo, 0); //AuctionRightUnlockTime
				Write8(pPlayerDBBaseInfo, 0); //ReserveFlag
				Write32(pPlayerDBBaseInfo, 0); //CurConsumeScore
				Write32(pPlayerDBBaseInfo, 0); //HistoryConsumeScore
				Write8(pPlayerDBBaseInfo, 0); //CrashModeSponsorID
				Write32(pPlayerDBBaseInfo, 0); //Popularity
				Write32(pPlayerDBBaseInfo, 0); //LadderMatchAchievePoint
				Write32(pPlayerDBBaseInfo, 0); //Cash
				Write32(pPlayerDBBaseInfo, 0); //PlayerGPMIdentity
				Write32(pPlayerDBBaseInfo, 0); //PointTotalScore
				WriteUn(pPlayerDBBaseInfo, 0); //totalMapMedalNum
				WriteUn(pPlayerDBBaseInfo, 0); //lastMapMedalNum
				WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalNum
				WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalSeasonId
				WriteUn(pPlayerDBBaseInfo, 0); //lastClearMapMedalTime
				WriteUn(pPlayerDBBaseInfo, 0); //max2048Score
				WriteUn(pPlayerDBBaseInfo, 0); //curPlay2048LeftNum
				Write32(pPlayerDBBaseInfo, 0); //CheerValue
				Write16(pPlayerDBBaseInfo, 0); //SeasonID
				Write32(pPlayerDBBaseInfo, 0); //LastCheerValue
				Write32(pPlayerDBBaseInfo, 0); //SpeedBean
				Write32(pPlayerDBBaseInfo, 0); //SpeedCoin

				len = pPlayerDBBaseInfo - pPlayerInfo;
				Set16(pPlayerInfo, (WORD)len);
				pPlayerInfo += len;
			}
			{ //PlayerGuildInfo
				BYTE* pPlayerGuildInfo = pPlayerInfo;
				Write16(pPlayerGuildInfo, 0); //len

				WriteString(pPlayerGuildInfo, 0); //GuildName[]
				Write16(pPlayerGuildInfo, 0); //Duty
				Write32(pPlayerGuildInfo, 0); //GuildID
				Write32(pPlayerGuildInfo, 0); //Right
				Write32(pPlayerGuildInfo, 0); //Medal
				Write32(pPlayerGuildInfo, 0); //Contribute
				WriteString(pPlayerGuildInfo, 0); //DutyTitle[]

				len = pPlayerGuildInfo - pPlayerInfo;
				Set16(pPlayerInfo, (WORD)len);
				pPlayerInfo += len;
			}
			Write16(pPlayerInfo, 0); //EquipedItemNum
			for (size_t i = 0; i < n; i++)
			{ //PlayerItemInfo
				BYTE* pPlayerItemInfo = pPlayerInfo;
				Write16(pPlayerItemInfo, 0); //len

				Write32(pPlayerItemInfo, 0); //ItemID
				Write32(pPlayerItemInfo, 0); //ItemNum
				Write32(pPlayerItemInfo, 0); //AvailPeriod
				Write8(pPlayerItemInfo, 0); //Status
				WriteUn(pPlayerItemInfo, 0); //ObtainTime
				Write32(pPlayerItemInfo, 0); //OtherAttribute
				Write16(pPlayerItemInfo, 0); //ItemType

				len = pPlayerItemInfo - pPlayerInfo;
				Set16(pPlayerInfo, (WORD)len);
				pPlayerInfo += len;
			}
			Write16(pPlayerInfo, 0); //PetNum
			for (size_t i = 0; i < n; i++)
			{ //PetInfo
				BYTE* pPetInfo = pPlayerInfo;
				Write16(pPetInfo, 0); //len

				Write32(pPetInfo, 0); //Uin
				Write32(pPetInfo, 0); //PetId
				WriteString(pPetInfo, 0); //PetName[]
				Write8(pPetInfo, 0); //IsProper
				Write16(pPetInfo, 0); //Level
				Write8(pPetInfo, 0); //Status
				Write16(pPetInfo, 0); //PetSkillNum
				for (size_t i = 0; i < n; i++)
				{ //PetSkillList
					BYTE* pPetSkillList = pPetInfo;
					Write16(pPetSkillList, 0); //len

					Write16(pPetSkillList, 0); //SkillID
					Write8(pPetSkillList, 0); //Status
					Write8(pPetSkillList, 0); //Active
					Write32(pPetSkillList, 0); //Value

					len = pPetSkillList - pPetInfo;
					Set16(pPetInfo, (WORD)len);
					pPetInfo += len;
				}
				Write32(pPetInfo, 0); //StrengLevel
				Write8(pPetInfo, 0); //TopStatus
				{ //CommonInfo
					BYTE* pCommonInfo = pPetInfo;
					Write16(pCommonInfo, 0); //len

					Write32(pCommonInfo, 0); //HuanHuaLevel
					Write8(pCommonInfo, 0); //CanHuanHua

					len = pCommonInfo - pPetInfo;
					Set16(pPetInfo, (WORD)len);
					pPetInfo += len;
				}
				Write16(pPetInfo, 0); //PKStar
				Write32(pPetInfo, 0); //PetSkinID

				len = pPetInfo - pPlayerInfo;
				Set16(pPlayerInfo, (WORD)len);
				pPlayerInfo += len;
			}
			{ //PlayerGuildMatchInfo
				BYTE* pPlayerGuildMatchInfo = pPlayerInfo;
				Write16(pPlayerGuildMatchInfo, 0); //len

				Write32(pPlayerGuildMatchInfo, 0); //SelfPoint
				Write32(pPlayerGuildMatchInfo, 0); //WinNum
				Write32(pPlayerGuildMatchInfo, 0); //TotalNum

				len = pPlayerGuildMatchInfo - pPlayerInfo;
				Set16(pPlayerInfo, (WORD)len);
				pPlayerInfo += len;
			}
			Write8(pPlayerInfo, 0); //IsInTopList
			Write8(pPlayerInfo, 0); //LoverRaceOrPro
			Write8(pPlayerInfo, 0); //TmpEffectNum
			Write32(pPlayerInfo, 0); //TmpEffectItems[]
			Write8(pPlayerInfo, 0); //OBState
			Write8(pPlayerInfo, 0); //DebutOrX5
			Write8(pPlayerInfo, 0); //RandKeyFlag
			WriteUn(pPlayerInfo, 0); //VipFlag
			Write8(pPlayerInfo, 0); //HaveAppellation
			for (size_t i = 0; i < n; i++)
			{ //CurAppellation
				BYTE* pCurAppellation = pPlayerInfo;
				Write16(pCurAppellation, 0); //len

				Write8(pCurAppellation, 0); //Type
				Write8(pCurAppellation, 0); //Level
				Write8(pCurAppellation, 0); //Status
				Write8(pCurAppellation, 0); //Difficulty
				Write32(pCurAppellation, 0); //MapId
				Write32(pCurAppellation, 0); //Value

				len = pCurAppellation - pPlayerInfo;
				Set16(pPlayerInfo, (WORD)len);
				pPlayerInfo += len;
			}
			{ //NobleInfo
				BYTE* pNobleInfo = pPlayerInfo;
				Write16(pNobleInfo, 0); //len

				Write32(pNobleInfo, 0); //NobleID
				Write8(pNobleInfo, 0); //NobleLevel
				Write32(pNobleInfo, 0); //NoblePoint
				Write32(pNobleInfo, 0); //NobleLeftDays

				len = pNobleInfo - pPlayerInfo;
				Set16(pPlayerInfo, (WORD)len);
				pPlayerInfo += len;
			}
			Write8(pPlayerInfo, 0); //HasCarryWizard
			for (size_t i = 0; i < n; i++)
			{ //CarryWizardInfo
				BYTE* pCarryWizardInfo = pPlayerInfo;
				Write16(pCarryWizardInfo, 0); //len

				Write16(pCarryWizardInfo, 0); //WizardID
				WriteString(pCarryWizardInfo, 0); //NickName[]
				Write16(pCarryWizardInfo, 0); //WizardType
				Write8(pCarryWizardInfo, 0); //Order
				Write8(pCarryWizardInfo, 0); //EvolutionBranch
				Write8(pCarryWizardInfo, 0); //IsHuanHua

				len = pCarryWizardInfo - pPlayerInfo;
				Set16(pPlayerInfo, (WORD)len);
				pPlayerInfo += len;
			}
			{ //GuildVipBaseInfo
				BYTE* pGuildVipBaseInfo = pPlayerInfo;
				Write16(pGuildVipBaseInfo, 0); //len

				Write8(pGuildVipBaseInfo, 0); //GuildVipLevel
				Write32(pGuildVipBaseInfo, 0); //GuildVipPoint

				len = pGuildVipBaseInfo - pPlayerInfo;
				Set16(pPlayerInfo, (WORD)len);
				pPlayerInfo += len;
			}
			Write32(pPlayerInfo, 0); //ExFlag
			Write8(pPlayerInfo, 0); //HaveLDMBaseInfo
			for (size_t i = 0; i < n; i++)
			{ //PlayerLDMBaseInfo
				BYTE* pPlayerLDMBaseInfo = pPlayerInfo;
				Write16(pPlayerLDMBaseInfo, 0); //len

				Write8(pPlayerLDMBaseInfo, 0); //Grade
				Write32(pPlayerLDMBaseInfo, 0); //Score
				Write32(pPlayerLDMBaseInfo, 0); //MaxScore
				Write32(pPlayerLDMBaseInfo, 0); //MaxGrade

				len = pPlayerLDMBaseInfo - pPlayerInfo;
				Set16(pPlayerInfo, (WORD)len);
				pPlayerInfo += len;
			}
			Write8(pPlayerInfo, 0); //HasWl
			for (size_t i = 0; i < n; i++)
			{ //PlayerWlVisibleInfo
				BYTE* pPlayerWlVisibleInfo = pPlayerInfo;
				Write16(pPlayerWlVisibleInfo, 0); //len

				Write32(pPlayerWlVisibleInfo, 0); //WonderLandID
				WriteString(pPlayerWlVisibleInfo, 0); //WonderLandName[]
				Write16(pPlayerWlVisibleInfo, 0); //WonderLandDuty
				Write8(pPlayerWlVisibleInfo, 0); //SubType
				Write8(pPlayerWlVisibleInfo, 0); //GuildGrade

				len = pPlayerWlVisibleInfo - pPlayerInfo;
				Set16(pPlayerInfo, (WORD)len);
				pPlayerInfo += len;
			}
			Write8(pPlayerInfo, 0); //HasLoverVip
			for (size_t i = 0; i < n; i++)
			{ //LoverVipInfo
				BYTE* pLoverVipInfo = pPlayerInfo;
				Write16(pLoverVipInfo, 0); //len

				Write8(pLoverVipInfo, 0); //LoverVipLevel
				Write32(pLoverVipInfo, 0); //LoverVipPoint
				Write8(pLoverVipInfo, 0); //GrowRate

				len = pLoverVipInfo - pPlayerInfo;
				Set16(pPlayerInfo, (WORD)len);
				pPlayerInfo += len;
			}
			Write8(pPlayerInfo, 0); //HasBattleModeSkillInfoList
			for (size_t i = 0; i < n; i++)
			{ //BattleModeSkillInfoList
				BYTE* pBattleModeSkillInfoList = pPlayerInfo;
				Write16(pBattleModeSkillInfoList, 0); //len

				Write8(pBattleModeSkillInfoList, 0); //SkillNum
				for (size_t i = 0; i < n; i++)
				{ //SkillInfo
					BYTE* pSkillInfo = pBattleModeSkillInfoList;
					Write16(pSkillInfo, 0); //len

					Write16(pSkillInfo, 0); //SkillId
					Write8(pSkillInfo, 0); //SkillLevel

					len = pSkillInfo - pBattleModeSkillInfoList;
					Set16(pBattleModeSkillInfoList, (WORD)len);
					pBattleModeSkillInfoList += len;
				}

				len = pBattleModeSkillInfoList - pPlayerInfo;
				Set16(pPlayerInfo, (WORD)len);
				pPlayerInfo += len;
			}
			Write8(pPlayerInfo, 0); //HasGarden
			for (size_t i = 0; i < n; i++)
			{ //PersonalGardenBaseInfo
				BYTE* pPersonalGardenBaseInfo = pPlayerInfo;
				Write16(pPersonalGardenBaseInfo, 0); //len

				Write8(pPersonalGardenBaseInfo, 0); //GardenLevel
				Write32(pPersonalGardenBaseInfo, 0); //GardenPoint
				Write8(pPersonalGardenBaseInfo, 0); //GrowRate
				Write32(pPersonalGardenBaseInfo, 0); //GardenExpireTime
				{ //SimpleInfo
					BYTE* pSimpleInfo = pPersonalGardenBaseInfo;
					Write16(pSimpleInfo, 0); //len

					Write32(pSimpleInfo, 0); //WeekPopularity
					Write32(pSimpleInfo, 0); //TotalPopularity
					Write32(pSimpleInfo, 0); //LastUpdatePopularityTime
					Write8(pSimpleInfo, 0); //PrivateType

					len = pSimpleInfo - pPersonalGardenBaseInfo;
					Set16(pPersonalGardenBaseInfo, (WORD)len);
					pPersonalGardenBaseInfo += len;
				}

				len = pPersonalGardenBaseInfo - pPlayerInfo;
				Set16(pPlayerInfo, (WORD)len);
				pPlayerInfo += len;
			}
			{ //ConsumeVipInfo
				BYTE* pConsumeVipInfo = pPlayerInfo;
				Write16(pConsumeVipInfo, 0); //len

				WriteUn(pConsumeVipInfo, 0); //VipLevel
				WriteUn(pConsumeVipInfo, 0); //CharmValueOfMonth
				WriteUn(pConsumeVipInfo, 0); //SearchTreasureNums
				WriteUn(pConsumeVipInfo, 0); //GetTreasureNums

				len = pConsumeVipInfo - pPlayerInfo;
				Set16(pPlayerInfo, (WORD)len);
				pPlayerInfo += len;
			}
			Write8(pPlayerInfo, 0); //HaveBaby
			{ //LoverBabyInfo
				BYTE* pLoverBabyInfo = pPlayerInfo;
				Write16(pLoverBabyInfo, 0); //len

				Write32(pLoverBabyInfo, 0); //LoverBabyID
				Write32(pLoverBabyInfo, 0); //ItemID
				Write32(pLoverBabyInfo, 0); //GrowValue
				Write32(pLoverBabyInfo, 0); //MentalValue
				Write32(pLoverBabyInfo, 0); //BabyProfileLevel
				Write32(pLoverBabyInfo, 0); //StrengthLevel
				Write32(pLoverBabyInfo, 0); //GrowLevel
				WriteString(pLoverBabyInfo, 0); //LoveBabyNickName[]
				Write16(pLoverBabyInfo, 0); //LoverBabyStat
				Write16(pLoverBabyInfo, 0); //LoverBabyEquipStat
				Write16(pLoverBabyInfo, 0); //LoverBabyTransferdStatus

				len = pLoverBabyInfo - pPlayerInfo;
				Set16(pPlayerInfo, (WORD)len);
				pPlayerInfo += len;
			}
			{ //EmperorInfo
				BYTE* pEmperorInfo = pPlayerInfo;
				Write16(pEmperorInfo, 0); //len

				Write8(pEmperorInfo, 0); //EmperorLevel
				Write32(pEmperorInfo, 0); //EmperorPoint
				Write32(pEmperorInfo, 0); //EmperorLeftDays
				Write8(pEmperorInfo, 0); //EmperorGrowRate

				len = pEmperorInfo - pPlayerInfo;
				Set16(pPlayerInfo, (WORD)len);
				pPlayerInfo += len;
			}
			Write16(pPlayerInfo, 0); //RaceCardNums
			for (size_t i = 0; i < n; i++)
			{ //RaceCardAddValueInfo
				BYTE* pRaceCardAddValueInfo = pPlayerInfo;
				Write16(pRaceCardAddValueInfo, 0); //len

				Write32(pRaceCardAddValueInfo, 0); //RaceCardID
				Write32(pRaceCardAddValueInfo, 0); //AddValue

				len = pRaceCardAddValueInfo - pPlayerInfo;
				Set16(pPlayerInfo, (WORD)len);
				pPlayerInfo += len;
			}
			{ //GansterScoreInfo
				BYTE* pGansterScoreInfo = pPlayerInfo;
				Write16(pGansterScoreInfo, 0); //len

				Write32(pGansterScoreInfo, 0); //GansterSeasonID
				Write32(pGansterScoreInfo, 0); //GansterScore
				Write32(pGansterScoreInfo, 0); //PoliceScore
				Write32(pGansterScoreInfo, 0); //TotalGansterScore

				len = pGansterScoreInfo - pPlayerInfo;
				Set16(pPlayerInfo, (WORD)len);
				pPlayerInfo += len;
			}
			Write32(pPlayerInfo, 0); //OlympicId
			Write32(pPlayerInfo, 0); //NPCEliminateWinTimes
			Write8(pPlayerInfo, 0); //OriginTeamID
			Write8(pPlayerInfo, 0); //NxNpc
			Write16(pPlayerInfo, 0); //NxNpcAILevel
			{ //EquippedActiveKartInfo
				BYTE* pEquippedActiveKartInfo = pPlayerInfo;
				Write16(pEquippedActiveKartInfo, 0); //len

				Write8(pEquippedActiveKartInfo, 0); //HaveActiveInfo
				Write32(pEquippedActiveKartInfo, 0); //KartID
				Write32(pEquippedActiveKartInfo, 0); //ActiveLevel

				len = pEquippedActiveKartInfo - pPlayerInfo;
				Set16(pPlayerInfo, (WORD)len);
				pPlayerInfo += len;
			}
			Write8(pPlayerInfo, 0); //SpecialActivityStatus
			Write8(pPlayerInfo, 0); //AreaID
			Write8(pPlayerInfo, 0); //HaveRaiseSecondBaby
			{ //SecondLoverBabyInfo
				BYTE* pSecondLoverBabyInfo = pPlayerInfo;
				Write16(pSecondLoverBabyInfo, 0); //len

				Write32(pSecondLoverBabyInfo, 0); //LoverBabyID
				Write32(pSecondLoverBabyInfo, 0); //ItemID
				Write32(pSecondLoverBabyInfo, 0); //GrowValue
				Write32(pSecondLoverBabyInfo, 0); //MentalValue
				Write32(pSecondLoverBabyInfo, 0); //BabyProfileLevel
				Write32(pSecondLoverBabyInfo, 0); //StrengthLevel
				Write32(pSecondLoverBabyInfo, 0); //GrowLevel
				WriteString(pSecondLoverBabyInfo, 0); //LoveBabyNickName[]
				Write16(pSecondLoverBabyInfo, 0); //LoverBabyStat
				Write16(pSecondLoverBabyInfo, 0); //LoverBabyEquipStat
				Write16(pSecondLoverBabyInfo, 0); //LoverBabyTransferdStatus

				len = pSecondLoverBabyInfo - pPlayerInfo;
				Set16(pPlayerInfo, (WORD)len);
				pPlayerInfo += len;
			}
			Write8(pPlayerInfo, 0); //HasRankedMatchInfo
			for (size_t i = 0; i < n; i++)
			{ //RankedMatchGradeInfo
				BYTE* pRankedMatchGradeInfo = pPlayerInfo;
				Write16(pRankedMatchGradeInfo, 0); //len

				Write32(pRankedMatchGradeInfo, 0); //GradeLevel
				Write32(pRankedMatchGradeInfo, 0); //ChildLevel
				Write32(pRankedMatchGradeInfo, 0); //GradeScore
				Write32(pRankedMatchGradeInfo, 0); //MaxGradeScore
				Write32(pRankedMatchGradeInfo, 0); //TotalScore

				len = pRankedMatchGradeInfo - pPlayerInfo;
				Set16(pPlayerInfo, (WORD)len);
				pPlayerInfo += len;
			}
			Write8(pPlayerInfo, 0); //HasHuanLingChangeInfo
			for (size_t i = 0; i < n; i++)
			{ //HuanLingSuitInfo
				BYTE* pHuanLingSuitInfo = pPlayerInfo;
				Write16(pHuanLingSuitInfo, 0); //len

				Write32(pHuanLingSuitInfo, 0); //SuitID
				Write8(pHuanLingSuitInfo, 0); //ChangeLevel

				len = pHuanLingSuitInfo - pPlayerInfo;
				Set16(pPlayerInfo, (WORD)len);
				pPlayerInfo += len;
			}
			Write8(pPlayerInfo, 0); //EquipSealType
			Write16(pPlayerInfo, 0); //Role
			Write8(pPlayerInfo, 0); //SpecialActivityIDNum
			Write8(pPlayerInfo, 0); //CrewID
			Write8(pPlayerInfo, 0); //SpecialActivityInfoNum
			for (size_t i = 0; i < n; i++)
			{ //SpecialActivityInfo
				BYTE* pSpecialActivityInfo = pPlayerInfo;
				Write16(pSpecialActivityInfo, 0); //len

				Write8(pSpecialActivityInfo, 0); //ProfessionLicenseInfoNum
				for (size_t i = 0; i < n; i++)
				{ //ProfessionLicenseInfo
					BYTE* pProfessionLicenseInfo = pSpecialActivityInfo;
					Write16(pProfessionLicenseInfo, 0); //len

					Write8(pProfessionLicenseInfo, 0); //BigLevel
					Write8(pProfessionLicenseInfo, 0); //SmallLevel

					len = pProfessionLicenseInfo - pSpecialActivityInfo;
					Set16(pSpecialActivityInfo, (WORD)len);
					pSpecialActivityInfo += len;
				}

				len = pSpecialActivityInfo - pPlayerInfo;
				Set16(pPlayerInfo, (WORD)len);
				pPlayerInfo += len;
			}
			Write8(pPlayerInfo, 0); //ParaNum
			Write32(pPlayerInfo, 0); //ParaList[]
			Write8(pPlayerInfo, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemOrder
				BYTE* pItemOrder = pPlayerInfo;
				Write16(pItemOrder, 0); //len

				Write32(pItemOrder, 0); //KartID
				Write32(pItemOrder, 0); //Order
				Write32(pItemOrder, 0); //BackGroundID

				len = pItemOrder - pPlayerInfo;
				Set16(pPlayerInfo, (WORD)len);
				pPlayerInfo += len;
			}
			Write8(pPlayerInfo, 0); //TDCExcluItemNum
			Write32(pPlayerInfo, 0); //TDCExclusiveItemID[]
			Write8(pPlayerInfo, 0); //EquipNiChangItemNum
			for (size_t i = 0; i < n; i++)
			{ //NiChangPavilionEquipItemInfo
				BYTE* pNiChangPavilionEquipItemInfo = pPlayerInfo;
				Write16(pNiChangPavilionEquipItemInfo, 0); //len

				Write32(pNiChangPavilionEquipItemInfo, 0); //ItemId
				Write16(pNiChangPavilionEquipItemInfo, 0); //CurrentEquipColorationPlanId

				len = pNiChangPavilionEquipItemInfo - pPlayerInfo;
				Set16(pPlayerInfo, (WORD)len);
				pPlayerInfo += len;
			}
			Write8(pPlayerInfo, 0); //TestKartGameType
			Write32(pPlayerInfo, 0); //GameTestKartID
			Write8(pPlayerInfo, 0); //HasStarsFightingInfo
			for (size_t i = 0; i < n; i++)
			{ //StarsFightingInfo
				BYTE* pStarsFightingInfo = pPlayerInfo;
				Write16(pStarsFightingInfo, 0); //len

				Write32(pStarsFightingInfo, 0); //Star
				Write32(pStarsFightingInfo, 0); //StarVal
				Write32(pStarsFightingInfo, 0); //StarsFightingStarLevel

				len = pStarsFightingInfo - pPlayerInfo;
				Set16(pPlayerInfo, (WORD)len);
				pPlayerInfo += len;
			}
			Write8(pPlayerInfo, 0); //RoomBGSetting

			len = pPlayerInfo - pMROpponentInfo;
			Set16(pMROpponentInfo, (WORD)len);
			pMROpponentInfo += len;
		}
		{ //KartRefitInfo
			BYTE* pKartRefitInfo = pMROpponentInfo;
			Write16(pKartRefitInfo, 0); //len

			Write32(pKartRefitInfo, 0); //Uin
			Write32(pKartRefitInfo, 0); //KartId
			Write32(pKartRefitInfo, 0); //RefitCout
			Write16(pKartRefitInfo, 0); //MaxFlags
			Write16(pKartRefitInfo, 0); //WWeight
			Write16(pKartRefitInfo, 0); //SpeedWeight
			Write16(pKartRefitInfo, 0); //JetWeight
			Write16(pKartRefitInfo, 0); //SJetWeight
			Write16(pKartRefitInfo, 0); //AccuWeight
			Write32(pKartRefitInfo, 0); //ShapeRefitCount
			Write32(pKartRefitInfo, 0); //KartHeadRefitItemID
			Write32(pKartRefitInfo, 0); //KartTailRefitItemID
			Write32(pKartRefitInfo, 0); //KartFlankRefitItemID
			Write32(pKartRefitInfo, 0); //KartTireRefitItemID
			Write32(pKartRefitInfo, 0); //SecondRefitCount
			Write16(pKartRefitInfo, 0); //Speed2Weight
			Write16(pKartRefitInfo, 0); //DriftVecWeight
			Write16(pKartRefitInfo, 0); //AdditionalZSpeedWeight
			Write16(pKartRefitInfo, 0); //AntiCollisionWeight
			Write16(pKartRefitInfo, 0); //LuckyValue
			Write16(pKartRefitInfo, 0); //RefitLuckyValueMaxWeight
			Write32(pKartRefitInfo, 0); //ShapeSuitID
			Write8(pKartRefitInfo, 0); //LegendSuitLevel
			Write32(pKartRefitInfo, 0); //LegendSuitLevelChoice
			Write32(pKartRefitInfo, 0); //ShapeLegendSuitID

			len = pKartRefitInfo - pMROpponentInfo;
			Set16(pMROpponentInfo, (WORD)len);
			pMROpponentInfo += len;
		}

		len = pMROpponentInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //BaseMode
	Write32(p, 0); //SubMode

	len = p - buf;
	SendToClient(Client, 21213, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyMRRaceOver(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //CurrentPlayerNum
	for (size_t i = 0; i < n; i++)
	{ //RaceScore
		BYTE* pRaceScore = p;
		Write16(pRaceScore, 0); //len

		WriteUn(pRaceScore, 0); //Uin
		WriteUn(pRaceScore, 0); //FinTime
		Write32(pRaceScore, 0); //GuildID
		WriteString(pRaceScore, 0); //GuildName[]
		Write16(pRaceScore, 0); //Score

		len = pRaceScore - p;
		Set16(p, (WORD)len);
		p += len;
	}
	WriteUn(p, 0); //AwardTime
	Write8(p, 0); //KickOffPlayerNumber
	for (size_t i = 0; i < n; i++)
	{ //KickOffPlayer
		BYTE* pKickOffPlayer = p;
		Write16(pKickOffPlayer, 0); //len

		Write32(pKickOffPlayer, 0); //Uin
		WriteString(pKickOffPlayer, 0); //NickName[]
		Write8(pKickOffPlayer, 0); //Gender
		Write8(pKickOffPlayer, 0); //TeamID
		Write8(pKickOffPlayer, 0); //Country

		len = pKickOffPlayer - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 21214, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestMRGetAward(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR Action = Read8(p);

}

void ResponseMRGetAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen
	Write8(p, 0); //Action
	Write8(p, 0); //AwardType
	Write8(p, 0); //AwardDetailType
	{ //Award
		BYTE* pAward = p;
		Write16(pAward, 0); //len

		Write32(pAward, 0); //Exp
		Write32(pAward, 0); //Money
		Write32(pAward, 0); //SuperMoney
		Write16(pAward, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAward;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write32(pAward, 0); //Coupons
		Write32(pAward, 0); //GuildPoint
		Write32(pAward, 0); //LuckMoney
		Write8(pAward, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAward;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write32(pAward, 0); //SpeedCoin

		len = pAward - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //AwardCfgNum
	for (size_t i = 0; i < n; i++)
	{ //AwardCfg
		BYTE* pAwardCfg = p;
		Write16(pAwardCfg, 0); //len

		for (size_t i = 0; i < n; i++)
		{ //DisplayAward
			BYTE* pDisplayAward = pAwardCfg;
			Write16(pDisplayAward, 0); //len

			Write32(pDisplayAward, 0); //Exp
			Write32(pDisplayAward, 0); //Money
			Write32(pDisplayAward, 0); //SuperMoney
			Write16(pDisplayAward, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pDisplayAward;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pDisplayAward;
				Set16(pDisplayAward, (WORD)len);
				pDisplayAward += len;
			}
			Write32(pDisplayAward, 0); //Coupons
			Write32(pDisplayAward, 0); //GuildPoint
			Write32(pDisplayAward, 0); //LuckMoney
			Write8(pDisplayAward, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pDisplayAward;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pDisplayAward;
				Set16(pDisplayAward, (WORD)len);
				pDisplayAward += len;
			}
			Write32(pDisplayAward, 0); //SpeedCoin

			len = pDisplayAward - pAwardCfg;
			Set16(pAwardCfg, (WORD)len);
			pAwardCfg += len;
		}
		Write32(pAwardCfg, 0); //EliteScore
		Write16(pAwardCfg, 0); //MinPlayerNum

		len = pAwardCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //AwardState

	len = p - buf;
	SendToClient(Client, 21215, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestPlantMagicTree(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponsePlantMagicTree(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write32(p, 0); //PlantTreeNeedRainDropNums
	WriteUn(p, 0); //UshFruitAwardNums
	for (size_t i = 0; i < n; i++)
	{ //FruitAwardInfos
		BYTE* pFruitAwardInfos = p;
		Write16(pFruitAwardInfos, 0); //len

		{ //AwardInfo
			BYTE* pAwardInfo = pFruitAwardInfos;
			Write16(pAwardInfo, 0); //len

			Write32(pAwardInfo, 0); //Exp
			Write32(pAwardInfo, 0); //Money
			Write32(pAwardInfo, 0); //SuperMoney
			Write16(pAwardInfo, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAwardInfo;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAwardInfo;
				Set16(pAwardInfo, (WORD)len);
				pAwardInfo += len;
			}
			Write32(pAwardInfo, 0); //Coupons
			Write32(pAwardInfo, 0); //GuildPoint
			Write32(pAwardInfo, 0); //LuckMoney
			Write8(pAwardInfo, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAwardInfo;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAwardInfo;
				Set16(pAwardInfo, (WORD)len);
				pAwardInfo += len;
			}
			Write32(pAwardInfo, 0); //SpeedCoin

			len = pAwardInfo - pFruitAwardInfos;
			Set16(pFruitAwardInfos, (WORD)len);
			pFruitAwardInfos += len;
		}
		Write32(pFruitAwardInfos, 0); //AwardIndex
		Write32(pFruitAwardInfos, 0); //ItemType

		len = pFruitAwardInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestDevoteRainDrop(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT DevoteNums = Read32(p);

}

void ResponseDevoteRainDrop(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResutID
	Write32(p, 0); //CurrentDevotedRainDropNums
	Write8(p, 0); //RecePlantTreeAwardType
	Write8(p, 0); //HaveAlreadyChoosePlantAward
	Write32(p, 0); //PlantTreeNeedRainDropNums
	Write16(p, 0); //MaxDevotedNums

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestChooseFruit(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	USHORT ChooseNums = Read16(p);
	USHORT FruitIndex[] = Read16(p);
	UINT Time = Read32(p);

}

void ResponseChooseFruit(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //ChooseNums
	Write16(p, 0); //FruitIndex[]

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestRecePlantTreeAward(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseRecePlantTreeAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write8(p, 0); //PlantType
	Write16(p, 0); //ResultID
	{ //AwardInfo
		BYTE* pAwardInfo = p;
		Write16(pAwardInfo, 0); //len

		Write32(pAwardInfo, 0); //Exp
		Write32(pAwardInfo, 0); //Money
		Write32(pAwardInfo, 0); //SuperMoney
		Write16(pAwardInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAwardInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAwardInfo;
			Set16(pAwardInfo, (WORD)len);
			pAwardInfo += len;
		}
		Write32(pAwardInfo, 0); //Coupons
		Write32(pAwardInfo, 0); //GuildPoint
		Write32(pAwardInfo, 0); //LuckMoney
		Write8(pAwardInfo, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAwardInfo;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAwardInfo;
			Set16(pAwardInfo, (WORD)len);
			pAwardInfo += len;
		}
		Write32(pAwardInfo, 0); //SpeedCoin

		len = pAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestPickFruit(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UCHAR FruitType = Read8(p);
	UINT Time = Read32(p);

}

void ResponsePickFruit(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write8(p, 0); //FruitType
	Write16(p, 0); //ResultID
	{ //AwardInfo
		BYTE* pAwardInfo = p;
		Write16(pAwardInfo, 0); //len

		Write32(pAwardInfo, 0); //Exp
		Write32(pAwardInfo, 0); //Money
		Write32(pAwardInfo, 0); //SuperMoney
		Write16(pAwardInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAwardInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAwardInfo;
			Set16(pAwardInfo, (WORD)len);
			pAwardInfo += len;
		}
		Write32(pAwardInfo, 0); //Coupons
		Write32(pAwardInfo, 0); //GuildPoint
		Write32(pAwardInfo, 0); //LuckMoney
		Write8(pAwardInfo, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAwardInfo;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAwardInfo;
			Set16(pAwardInfo, (WORD)len);
			pAwardInfo += len;
		}
		Write32(pAwardInfo, 0); //SpeedCoin

		len = pAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetMagicTreeShowInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR ReqType = Read8(p);

}

void ResponseGetMagicTreeShowInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	WriteUn(p, 0); //UshFruitAwardNums
	for (size_t i = 0; i < n; i++)
	{ //FruitAwardInfos
		BYTE* pFruitAwardInfos = p;
		Write16(pFruitAwardInfos, 0); //len

		{ //AwardInfo
			BYTE* pAwardInfo = pFruitAwardInfos;
			Write16(pAwardInfo, 0); //len

			Write32(pAwardInfo, 0); //Exp
			Write32(pAwardInfo, 0); //Money
			Write32(pAwardInfo, 0); //SuperMoney
			Write16(pAwardInfo, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAwardInfo;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAwardInfo;
				Set16(pAwardInfo, (WORD)len);
				pAwardInfo += len;
			}
			Write32(pAwardInfo, 0); //Coupons
			Write32(pAwardInfo, 0); //GuildPoint
			Write32(pAwardInfo, 0); //LuckMoney
			Write8(pAwardInfo, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAwardInfo;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAwardInfo;
				Set16(pAwardInfo, (WORD)len);
				pAwardInfo += len;
			}
			Write32(pAwardInfo, 0); //SpeedCoin

			len = pAwardInfo - pFruitAwardInfos;
			Set16(pFruitAwardInfos, (WORD)len);
			pFruitAwardInfos += len;
		}
		Write32(pFruitAwardInfos, 0); //AwardIndex
		Write32(pFruitAwardInfos, 0); //ItemType

		len = pFruitAwardInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //CanRecePlantTreeAward
	Write8(p, 0); //PlantTreeType
	Write8(p, 0); //HavePlanted
	Write32(p, 0); //PlantTreeNeedRainDropNums
	Write32(p, 0); //CurrentDevotedRainDropNums
	Write8(p, 0); //HaveAlreadyChoosePlantAward
	Write16(p, 0); //ActionRelatedTaskNums
	for (size_t i = 0; i < n; i++)
	{ //SpringMagicTreeRelatedTaskInfos
		BYTE* pSpringMagicTreeRelatedTaskInfos = p;
		Write16(pSpringMagicTreeRelatedTaskInfos, 0); //len

		Write32(pSpringMagicTreeRelatedTaskInfos, 0); //TaskID
		Write32(pSpringMagicTreeRelatedTaskInfos, 0); //ItemID
		Write32(pSpringMagicTreeRelatedTaskInfos, 0); //AwardItemNums

		len = pSpringMagicTreeRelatedTaskInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //ActionBeginDate
	Write32(p, 0); //ActionEndDate
	Write32(p, 0); //ActionBeginTime
	Write32(p, 0); //ActionEndTime

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyGetKubi(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //Uin
	Write32(p, 0); //KubiNum
	for (size_t i = 0; i < n; i++)
	{ //Kubi
		BYTE* pKubi = p;
		Write16(pKubi, 0); //len

		Write32(pKubi, 0); //Key
		Write32(pKubi, 0); //Flags
		Write32(pKubi, 0); //PosIndex
		Write16(pKubi, 0); //KubiType

		len = pKubi - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //KubiPlayer
		BYTE* pKubiPlayer = p;
		Write16(pKubiPlayer, 0); //len

		Write32(pKubiPlayer, 0); //Uin
		Write32(pKubiPlayer, 0); //State
		Write32(pKubiPlayer, 0); //KubiNum
		Write32(pKubiPlayer, 0); //KubiKeyArray[]
		Write32(pKubiPlayer, 0); //PickKubiHistory
		Write32(pKubiPlayer, 0); //TeamID
		Write32(pKubiPlayer, 0); //FinTime
		Write32(pKubiPlayer, 0); //BigKubiNum
		Write32(pKubiPlayer, 0); //KubiScore

		len = pKubiPlayer - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24645, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestReportCurMoveInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT InfoNum = Read32(p);
	for (size_t i = 0; i < n; i++)
	{ //MoveInfo
		BYTE* pMoveInfo = p;
		len = Read16(pMoveInfo);

		Un TimeElaps = ReadUn(pMoveInfo);
		int[] Speed[] = Read32(pMoveInfo);
		int[] Pos[] = Read32(pMoveInfo);

		p += len;
	}

}

void RequestGetMayDayTreasureCfg(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetMayDayTreasureCfg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	{ //OpenCfg
		BYTE* pOpenCfg = p;
		Write16(pOpenCfg, 0); //len

		Write32(pOpenCfg, 0); //ShowOpenDate
		Write32(pOpenCfg, 0); //ShowCloseDate
		Write32(pOpenCfg, 0); //ShowOpenTime
		Write32(pOpenCfg, 0); //ShowCloseTime

		len = pOpenCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //MapTreasureThemeCfg
		BYTE* pMapTreasureThemeCfg = p;
		Write16(pMapTreasureThemeCfg, 0); //len

		Write32(pMapTreasureThemeCfg, 0); //ThemeID
		Write32(pMapTreasureThemeCfg, 0); //MapNum
		Write(pMapTreasureThemeCfg, 0); //MapPollCfg[]

		len = pMapTreasureThemeCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //MapTreasureTaskPollCfg
		BYTE* pMapTreasureTaskPollCfg = p;
		Write16(pMapTreasureTaskPollCfg, 0); //len

		Write32(pMapTreasureTaskPollCfg, 0); //TaskNum
		for (size_t i = 0; i < n; i++)
		{ //TaskIDPollCfg
			BYTE* pTaskIDPollCfg = pMapTreasureTaskPollCfg;
			Write16(pTaskIDPollCfg, 0); //len

			Write32(pTaskIDPollCfg, 0); //TaskID
			Write32(pTaskIDPollCfg, 0); //PieceNum
			Write32(pTaskIDPollCfg, 0); //PieceMaxNum

			len = pTaskIDPollCfg - pMapTreasureTaskPollCfg;
			Set16(pMapTreasureTaskPollCfg, (WORD)len);
			pMapTreasureTaskPollCfg += len;
		}

		len = pMapTreasureTaskPollCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //PingTuTreasureCfgToClient
		BYTE* pPingTuTreasureCfgToClient = p;
		Write16(pPingTuTreasureCfgToClient, 0); //len

		Write32(pPingTuTreasureCfgToClient, 0); //TaskNum
		for (size_t i = 0; i < n; i++)
		{ //TaskIDPollCfg
			BYTE* pTaskIDPollCfg = pPingTuTreasureCfgToClient;
			Write16(pTaskIDPollCfg, 0); //len

			Write32(pTaskIDPollCfg, 0); //TaskID
			Write32(pTaskIDPollCfg, 0); //PieceNum
			Write32(pTaskIDPollCfg, 0); //PieceMaxNum

			len = pTaskIDPollCfg - pPingTuTreasureCfgToClient;
			Set16(pPingTuTreasureCfgToClient, (WORD)len);
			pPingTuTreasureCfgToClient += len;
		}
		Write32(pPingTuTreasureCfgToClient, 0); //PieceItemNum
		Write(pPingTuTreasureCfgToClient, 0); //PieceItemIDCfg[]
		Write32(pPingTuTreasureCfgToClient, 0); //AwardLevNum
		for (size_t i = 0; i < n; i++)
		{ //PingTuTreasureAwardCfg
			BYTE* pPingTuTreasureAwardCfg = pPingTuTreasureCfgToClient;
			Write16(pPingTuTreasureAwardCfg, 0); //len

			Write32(pPingTuTreasureAwardCfg, 0); //NeedPieceNum
			Write8(pPingTuTreasureAwardCfg, 0); //Status
			{ //AwardInfo
				BYTE* pAwardInfo = pPingTuTreasureAwardCfg;
				Write16(pAwardInfo, 0); //len

				Write32(pAwardInfo, 0); //Exp
				Write32(pAwardInfo, 0); //Money
				Write32(pAwardInfo, 0); //SuperMoney
				Write16(pAwardInfo, 0); //ItemNum
				for (size_t i = 0; i < n; i++)
				{ //ItemInfo
					BYTE* pItemInfo = pAwardInfo;
					Write16(pItemInfo, 0); //len

					Write32(pItemInfo, 0); //ItemID
					Write32(pItemInfo, 0); //ItemNum
					Write32(pItemInfo, 0); //AvailPeriod
					Write8(pItemInfo, 0); //Status
					WriteUn(pItemInfo, 0); //ObtainTime
					Write32(pItemInfo, 0); //OtherAttribute
					Write16(pItemInfo, 0); //ItemType

					len = pItemInfo - pAwardInfo;
					Set16(pAwardInfo, (WORD)len);
					pAwardInfo += len;
				}
				Write32(pAwardInfo, 0); //Coupons
				Write32(pAwardInfo, 0); //GuildPoint
				Write32(pAwardInfo, 0); //LuckMoney
				Write8(pAwardInfo, 0); //ExtendInfoNum
				for (size_t i = 0; i < n; i++)
				{ //ExtendInfoAward
					BYTE* pExtendInfoAward = pAwardInfo;
					Write16(pExtendInfoAward, 0); //len

					Write16(pExtendInfoAward, 0); //Key
					Write32(pExtendInfoAward, 0); //AddValue
					Write32(pExtendInfoAward, 0); //TotalValue
					Write8(pExtendInfoAward, 0); //ShowPriority
					Write16(pExtendInfoAward, 0); //BuyNeedScore
					Write8(pExtendInfoAward, 0); //OneMatchMaxNum

					len = pExtendInfoAward - pAwardInfo;
					Set16(pAwardInfo, (WORD)len);
					pAwardInfo += len;
				}
				Write32(pAwardInfo, 0); //SpeedCoin

				len = pAwardInfo - pPingTuTreasureAwardCfg;
				Set16(pPingTuTreasureAwardCfg, (WORD)len);
				pPingTuTreasureAwardCfg += len;
			}

			len = pPingTuTreasureAwardCfg - pPingTuTreasureCfgToClient;
			Set16(pPingTuTreasureCfgToClient, (WORD)len);
			pPingTuTreasureCfgToClient += len;
		}
		Write8(pPingTuTreasureCfgToClient, 0); //IsHaveItem[]
		Write32(pPingTuTreasureCfgToClient, 0); //BeginDate
		Write32(pPingTuTreasureCfgToClient, 0); //CloseDate
		Write32(pPingTuTreasureCfgToClient, 0); //BeginTime
		Write32(pPingTuTreasureCfgToClient, 0); //EndTime

		len = pPingTuTreasureCfgToClient - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //WishTreasureCfgToClient
		BYTE* pWishTreasureCfgToClient = p;
		Write16(pWishTreasureCfgToClient, 0); //len

		Write32(pWishTreasureCfgToClient, 0); //FreeNum
		Write32(pWishTreasureCfgToClient, 0); //MagicBallCostNum
		Write32(pWishTreasureCfgToClient, 0); //WishItemID
		Write32(pWishTreasureCfgToClient, 0); //MagicBallItemID
		{ //AwardInfo
			BYTE* pAwardInfo = pWishTreasureCfgToClient;
			Write16(pAwardInfo, 0); //len

			Write32(pAwardInfo, 0); //Exp
			Write32(pAwardInfo, 0); //Money
			Write32(pAwardInfo, 0); //SuperMoney
			Write16(pAwardInfo, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAwardInfo;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAwardInfo;
				Set16(pAwardInfo, (WORD)len);
				pAwardInfo += len;
			}
			Write32(pAwardInfo, 0); //Coupons
			Write32(pAwardInfo, 0); //GuildPoint
			Write32(pAwardInfo, 0); //LuckMoney
			Write8(pAwardInfo, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAwardInfo;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAwardInfo;
				Set16(pAwardInfo, (WORD)len);
				pAwardInfo += len;
			}
			Write32(pAwardInfo, 0); //SpeedCoin

			len = pAwardInfo - pWishTreasureCfgToClient;
			Set16(pWishTreasureCfgToClient, (WORD)len);
			pWishTreasureCfgToClient += len;
		}
		Write8(pWishTreasureCfgToClient, 0); //Status
		Write32(pWishTreasureCfgToClient, 0); //MagicBallNum

		len = pWishTreasureCfgToClient - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //Status
	{ //AwardInfo
		BYTE* pAwardInfo = p;
		Write16(pAwardInfo, 0); //len

		Write32(pAwardInfo, 0); //Exp
		Write32(pAwardInfo, 0); //Money
		Write32(pAwardInfo, 0); //SuperMoney
		Write16(pAwardInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAwardInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAwardInfo;
			Set16(pAwardInfo, (WORD)len);
			pAwardInfo += len;
		}
		Write32(pAwardInfo, 0); //Coupons
		Write32(pAwardInfo, 0); //GuildPoint
		Write32(pAwardInfo, 0); //LuckMoney
		Write8(pAwardInfo, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAwardInfo;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAwardInfo;
			Set16(pAwardInfo, (WORD)len);
			pAwardInfo += len;
		}
		Write32(pAwardInfo, 0); //SpeedCoin

		len = pAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //ActiveLevNum
	Write(p, 0); //SendFreeNumActiveValueCfg[]
	Write32(p, 0); //FreeWishNumCfg

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyMayDayMedalAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	{ //AwardInfo
		BYTE* pAwardInfo = p;
		Write16(pAwardInfo, 0); //len

		Write32(pAwardInfo, 0); //Exp
		Write32(pAwardInfo, 0); //Money
		Write32(pAwardInfo, 0); //SuperMoney
		Write16(pAwardInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAwardInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAwardInfo;
			Set16(pAwardInfo, (WORD)len);
			pAwardInfo += len;
		}
		Write32(pAwardInfo, 0); //Coupons
		Write32(pAwardInfo, 0); //GuildPoint
		Write32(pAwardInfo, 0); //LuckMoney
		Write8(pAwardInfo, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAwardInfo;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAwardInfo;
			Set16(pAwardInfo, (WORD)len);
			pAwardInfo += len;
		}
		Write32(pAwardInfo, 0); //SpeedCoin

		len = pAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetPingTuAward(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR AwardIdx = Read8(p);

}

void ResponseGetPingTuAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	{ //Award
		BYTE* pAward = p;
		Write16(pAward, 0); //len

		Write32(pAward, 0); //Exp
		Write32(pAward, 0); //Money
		Write32(pAward, 0); //SuperMoney
		Write16(pAward, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAward;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write32(pAward, 0); //Coupons
		Write32(pAward, 0); //GuildPoint
		Write32(pAward, 0); //LuckMoney
		Write8(pAward, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAward;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write32(pAward, 0); //SpeedCoin

		len = pAward - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //AwardIdx

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetMayDayWishAward(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR Type = Read8(p);

}

void ResponseGetMayDayWishAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write8(p, 0); //Type
	{ //AwardToClient
		BYTE* pAwardToClient = p;
		Write16(pAwardToClient, 0); //len

		Write32(pAwardToClient, 0); //Exp
		Write32(pAwardToClient, 0); //Money
		Write32(pAwardToClient, 0); //SuperMoney
		Write16(pAwardToClient, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAwardToClient;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAwardToClient;
			Set16(pAwardToClient, (WORD)len);
			pAwardToClient += len;
		}
		Write32(pAwardToClient, 0); //Coupons
		Write32(pAwardToClient, 0); //GuildPoint
		Write32(pAwardToClient, 0); //LuckMoney
		Write8(pAwardToClient, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAwardToClient;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAwardToClient;
			Set16(pAwardToClient, (WORD)len);
			pAwardToClient += len;
		}
		Write32(pAwardToClient, 0); //SpeedCoin

		len = pAwardToClient - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestPVPLogin(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT RandKey = Read32(p);

}

void ResponsePVPLogin(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 697, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestPVPLogout(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponsePVPLogout(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 700, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyPVPKickoff(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ReasonID
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 702, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestPVPHello(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponsePVPHello(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 703, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GAlterWonderLandName(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT WonderLandID = Read32(p);
	char[] NewWonderLandName[] = ReadString(p);

}

void ResponseC2GAlterWonderLandName(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write32(p, 0); //WonderLandID
	WriteString(p, 0); //NewWonderLandName[]
	Write16(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 24717, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestSSCOpenStatus(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseSSCOpenStatus(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //Satus
	Write8(p, 0); //TipsLen

	len = p - buf;
	SendToClient(Client, 24721, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestSendPwdRedEnvelope(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT ContentLen = Read16(p);

}

void ResponseSendPwdRedEnvelope(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 24723, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetPwdRedEnvelopeContent(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetPwdRedEnvelopeContent(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //ContentLen

	len = p - buf;
	SendToClient(Client, 24724, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestOpenMayDaySubBoard(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	char Type = Read8(p);

}

void RequestGetMagicCupCfg(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetMagicCupCfg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	{ //MagicCupSeasonCfg
		BYTE* pMagicCupSeasonCfg = p;
		Write16(pMagicCupSeasonCfg, 0); //len

		Write32(pMagicCupSeasonCfg, 0); //SeasonID
		Write32(pMagicCupSeasonCfg, 0); //OpenDate
		Write32(pMagicCupSeasonCfg, 0); //OpenTime
		Write32(pMagicCupSeasonCfg, 0); //CloseDate
		Write32(pMagicCupSeasonCfg, 0); //CloseTime

		len = pMagicCupSeasonCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //LotteryDrawCfgNum
	for (size_t i = 0; i < n; i++)
	{ //LotteryDrawCfg
		BYTE* pLotteryDrawCfg = p;
		Write16(pLotteryDrawCfg, 0); //len

		Write32(pLotteryDrawCfg, 0); //CostItemID
		Write32(pLotteryDrawCfg, 0); //CostItemNum
		Write32(pLotteryDrawCfg, 0); //ProduceItemNum
		Write32(pLotteryDrawCfg, 0); //AlreadyGotNum

		len = pLotteryDrawCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //AwardItemPoll
	for (size_t i = 0; i < n; i++)
	{ //AwardItemPollInfo
		BYTE* pAwardItemPollInfo = p;
		Write16(pAwardItemPollInfo, 0); //len

		Write32(pAwardItemPollInfo, 0); //ItemID
		Write32(pAwardItemPollInfo, 0); //ItemNum
		Write32(pAwardItemPollInfo, 0); //AvailPeriod
		Write8(pAwardItemPollInfo, 0); //Status
		WriteUn(pAwardItemPollInfo, 0); //ObtainTime
		Write32(pAwardItemPollInfo, 0); //OtherAttribute
		Write16(pAwardItemPollInfo, 0); //ItemType

		len = pAwardItemPollInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //PieceItemNum
	Write32(p, 0); //PieceItemIDList[]

	len = p - buf;
	SendToClient(Client, 24726, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetTempBoxItemInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetTempBoxItemInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //CritItemNum
	Write16(p, 0); //TempBoxItemNum
	for (size_t i = 0; i < n; i++)
	{ //MagicCupTempBoxItemInfo
		BYTE* pMagicCupTempBoxItemInfo = p;
		Write16(pMagicCupTempBoxItemInfo, 0); //len

		Write32(pMagicCupTempBoxItemInfo, 0); //CostItemID
		Write32(pMagicCupTempBoxItemInfo, 0); //ItemType
		WriteUn(pMagicCupTempBoxItemInfo, 0); //ProducePieceID
		Write32(pMagicCupTempBoxItemInfo, 0); //ProducePieceNum
		Write32(pMagicCupTempBoxItemInfo, 0); //CostItemRecProb

		len = pMagicCupTempBoxItemInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24727, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestMagicCupGetAward(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	short Type = Read16(p);

}

void ResponseMagicCupGetAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //Type
	Write16(p, 0); //TempBoxItemNum
	{ //AwardToClient
		BYTE* pAwardToClient = p;
		Write16(pAwardToClient, 0); //len

		Write32(pAwardToClient, 0); //Exp
		Write32(pAwardToClient, 0); //Money
		Write32(pAwardToClient, 0); //SuperMoney
		Write16(pAwardToClient, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAwardToClient;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAwardToClient;
			Set16(pAwardToClient, (WORD)len);
			pAwardToClient += len;
		}
		Write32(pAwardToClient, 0); //Coupons
		Write32(pAwardToClient, 0); //GuildPoint
		Write32(pAwardToClient, 0); //LuckMoney
		Write8(pAwardToClient, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAwardToClient;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAwardToClient;
			Set16(pAwardToClient, (WORD)len);
			pAwardToClient += len;
		}
		Write32(pAwardToClient, 0); //SpeedCoin

		len = pAwardToClient - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24728, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestMagicCupExchangePiece(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	short ItemNum = Read16(p);
	int ItemList[] = Read32(p);
	short Type = Read16(p);

}

void ResponseMagicCupExchangePiece(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //AwardItemNum
	for (size_t i = 0; i < n; i++)
	{ //AwardItemInfo
		BYTE* pAwardItemInfo = p;
		Write16(pAwardItemInfo, 0); //len

		Write32(pAwardItemInfo, 0); //ItemID
		Write32(pAwardItemInfo, 0); //ItemNum
		Write32(pAwardItemInfo, 0); //AvailPeriod
		Write8(pAwardItemInfo, 0); //Status
		WriteUn(pAwardItemInfo, 0); //ObtainTime
		Write32(pAwardItemInfo, 0); //OtherAttribute
		Write16(pAwardItemInfo, 0); //ItemType

		len = pAwardItemInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //Type

	len = p - buf;
	SendToClient(Client, 24729, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyCommonRaceAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ActivityID
	{ //AwardInfo
		BYTE* pAwardInfo = p;
		Write16(pAwardInfo, 0); //len

		Write32(pAwardInfo, 0); //Exp
		Write32(pAwardInfo, 0); //Money
		Write32(pAwardInfo, 0); //SuperMoney
		Write16(pAwardInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAwardInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAwardInfo;
			Set16(pAwardInfo, (WORD)len);
			pAwardInfo += len;
		}
		Write32(pAwardInfo, 0); //Coupons
		Write32(pAwardInfo, 0); //GuildPoint
		Write32(pAwardInfo, 0); //LuckMoney
		Write8(pAwardInfo, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAwardInfo;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAwardInfo;
			Set16(pAwardInfo, (WORD)len);
			pAwardInfo += len;
		}
		Write32(pAwardInfo, 0); //SpeedCoin

		len = pAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24730, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetZongXiangShowInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR OpenType = Read8(p);
	USHORT FoodType = Read16(p);

}

void ResponseGetZongXiangShowInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write32(p, 0); //NuoMiNums
	Write32(p, 0); //ZongYeNums
	Write16(p, 0); //ZongZiAwardNums
	for (size_t i = 0; i < n; i++)
	{ //ZongziAwardInfo
		BYTE* pZongziAwardInfo = p;
		Write16(pZongziAwardInfo, 0); //len

		Write16(pZongziAwardInfo, 0); //ZongziType
		{ //AwardToClient
			BYTE* pAwardToClient = pZongziAwardInfo;
			Write16(pAwardToClient, 0); //len

			Write32(pAwardToClient, 0); //Exp
			Write32(pAwardToClient, 0); //Money
			Write32(pAwardToClient, 0); //SuperMoney
			Write16(pAwardToClient, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAwardToClient;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAwardToClient;
				Set16(pAwardToClient, (WORD)len);
				pAwardToClient += len;
			}
			Write32(pAwardToClient, 0); //Coupons
			Write32(pAwardToClient, 0); //GuildPoint
			Write32(pAwardToClient, 0); //LuckMoney
			Write8(pAwardToClient, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAwardToClient;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAwardToClient;
				Set16(pAwardToClient, (WORD)len);
				pAwardToClient += len;
			}
			Write32(pAwardToClient, 0); //SpeedCoin

			len = pAwardToClient - pZongziAwardInfo;
			Set16(pZongziAwardInfo, (WORD)len);
			pZongziAwardInfo += len;
		}

		len = pZongziAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //ActionRelatedTaskNums
	for (size_t i = 0; i < n; i++)
	{ //ZongXiangRelatedTaskInfos
		BYTE* pZongXiangRelatedTaskInfos = p;
		Write16(pZongXiangRelatedTaskInfos, 0); //len

		Write32(pZongXiangRelatedTaskInfos, 0); //TasKID
		Write16(pZongXiangRelatedTaskInfos, 0); //AwardItems
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pZongXiangRelatedTaskInfos;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //AwardItemNums

			len = pItemInfo - pZongXiangRelatedTaskInfos;
			Set16(pZongXiangRelatedTaskInfos, (WORD)len);
			pZongXiangRelatedTaskInfos += len;
		}

		len = pZongXiangRelatedTaskInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //OpenDate
	Write32(p, 0); //CloseDate
	Write32(p, 0); //OpenTime
	Write32(p, 0); //CloseTime
	Write32(p, 0); //TotalMakeZongziNums
	{ //ChildHoodCfg
		BYTE* pChildHoodCfg = p;
		Write16(pChildHoodCfg, 0); //len

		Write32(pChildHoodCfg, 0); //OpenDate
		Write32(pChildHoodCfg, 0); //CloseDate
		Write32(pChildHoodCfg, 0); //OpenTime
		Write32(pChildHoodCfg, 0); //CloseTime
		Write8(pChildHoodCfg, 0); //Flag

		len = pChildHoodCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HaveDoubleAward
	Write16(p, 0); //DailyAwardZongyeNums
	Write16(p, 0); //DailyAwardNuomiNums
	Write16(p, 0); //FoodType

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestMakeZongzi(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	USHORT MakeType = Read16(p);
	USHORT ZongziIngredientNums = Read16(p);
	short[] ZongZiIngre[] = Read16(p);
	USHORT FoodType = Read16(p);

}

void ResponseMakeZongzi(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //MakeType
	Write32(p, 0); //ZongyeNums
	Write32(p, 0); //NuomiNums
	{ //MakeAward
		BYTE* pMakeAward = p;
		Write16(pMakeAward, 0); //len

		Write32(pMakeAward, 0); //Exp
		Write32(pMakeAward, 0); //Money
		Write32(pMakeAward, 0); //SuperMoney
		Write16(pMakeAward, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pMakeAward;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pMakeAward;
			Set16(pMakeAward, (WORD)len);
			pMakeAward += len;
		}
		Write32(pMakeAward, 0); //Coupons
		Write32(pMakeAward, 0); //GuildPoint
		Write32(pMakeAward, 0); //LuckMoney
		Write8(pMakeAward, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pMakeAward;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pMakeAward;
			Set16(pMakeAward, (WORD)len);
			pMakeAward += len;
		}
		Write32(pMakeAward, 0); //SpeedCoin

		len = pMakeAward - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //TotalMakeZongziNums
	Write16(p, 0); //MakeNums
	Write16(p, 0); //MakeZongziType[]
	Write16(p, 0); //DailyAwardZongyeNums
	Write16(p, 0); //DailyAwardNuomiNums
	Write16(p, 0); //FoodType

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestZongziAnswerQuestion(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT AnswerIndex = Read32(p);
	UCHAR QuitAnswer = Read8(p);
	UCHAR AnswerType = Read8(p);

}

void RequestSaishiAnswerQuestion(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT AnswerIndex = Read32(p);
	UCHAR QuitAnswer = Read8(p);

}

void ResponseSaishiAnswerQuestion(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //CurrentAnswerNums
	Write32(p, 0); //TotalAnswerRightNums
	{ //AnswerAward
		BYTE* pAnswerAward = p;
		Write16(pAnswerAward, 0); //len

		Write32(pAnswerAward, 0); //Exp
		Write32(pAnswerAward, 0); //Money
		Write32(pAnswerAward, 0); //SuperMoney
		Write16(pAnswerAward, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAnswerAward;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAnswerAward;
			Set16(pAnswerAward, (WORD)len);
			pAnswerAward += len;
		}
		Write32(pAnswerAward, 0); //Coupons
		Write32(pAnswerAward, 0); //GuildPoint
		Write32(pAnswerAward, 0); //LuckMoney
		Write8(pAnswerAward, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAnswerAward;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAnswerAward;
			Set16(pAnswerAward, (WORD)len);
			pAnswerAward += len;
		}
		Write32(pAnswerAward, 0); //SpeedCoin

		len = pAnswerAward - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //AnswerResult
	Write16(p, 0); //Result

	len = p - buf;
	SendToClient(Client, 24736, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void ResponseZongziAnswerQuestion(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //CurrentAnswerNums
	Write32(p, 0); //TotalAnswerRightNums
	{ //AnswerAward
		BYTE* pAnswerAward = p;
		Write16(pAnswerAward, 0); //len

		Write32(pAnswerAward, 0); //Exp
		Write32(pAnswerAward, 0); //Money
		Write32(pAnswerAward, 0); //SuperMoney
		Write16(pAnswerAward, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAnswerAward;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAnswerAward;
			Set16(pAnswerAward, (WORD)len);
			pAnswerAward += len;
		}
		Write32(pAnswerAward, 0); //Coupons
		Write32(pAnswerAward, 0); //GuildPoint
		Write32(pAnswerAward, 0); //LuckMoney
		Write8(pAnswerAward, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAnswerAward;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAnswerAward;
			Set16(pAnswerAward, (WORD)len);
			pAnswerAward += len;
		}
		Write32(pAnswerAward, 0); //SpeedCoin

		len = pAnswerAward - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //AnswerResult
	Write16(p, 0); //Result
	Write8(p, 0); //AnswerType

	len = p - buf;
	SendToClient(Client, 24733, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetZongziQuestionInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR AnswerType = Read8(p);

}

void RequestGetSaishiQuestionInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetZongziQuestionInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write32(p, 0); //CurrentAnswerNums
	{ //ZongziQuestionInfo
		BYTE* pZongziQuestionInfo = p;
		Write16(pZongziQuestionInfo, 0); //len

		Write8(pZongziQuestionInfo, 0); //QuestionInfo[]
		Write16(pZongziQuestionInfo, 0); //AnswerNums
		for (size_t i = 0; i < n; i++)
		{ //AnswerInfos
			BYTE* pAnswerInfos = pZongziQuestionInfo;
			Write16(pAnswerInfos, 0); //len

			Write16(pAnswerInfos, 0); //AnswerIndex
			Write8(pAnswerInfos, 0); //AnswerInfo[]

			len = pAnswerInfos - pZongziQuestionInfo;
			Set16(pZongziQuestionInfo, (WORD)len);
			pZongziQuestionInfo += len;
		}

		len = pZongziQuestionInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //AnswerType

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void ResponseGetSaishiQuestionInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write32(p, 0); //CurrentAnswerNums
	{ //ZongziQuestionInfo
		BYTE* pZongziQuestionInfo = p;
		Write16(pZongziQuestionInfo, 0); //len

		Write8(pZongziQuestionInfo, 0); //QuestionInfo[]
		Write16(pZongziQuestionInfo, 0); //AnswerNums
		for (size_t i = 0; i < n; i++)
		{ //AnswerInfos
			BYTE* pAnswerInfos = pZongziQuestionInfo;
			Write16(pAnswerInfos, 0); //len

			Write16(pAnswerInfos, 0); //AnswerIndex
			Write8(pAnswerInfos, 0); //AnswerInfo[]

			len = pAnswerInfos - pZongziQuestionInfo;
			Set16(pZongziQuestionInfo, (WORD)len);
			pZongziQuestionInfo += len;
		}

		len = pZongziQuestionInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24735, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetGoldMedalMatchInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetGoldMedalMatchInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	{ //TimeLimit
		BYTE* pTimeLimit = p;
		Write16(pTimeLimit, 0); //len

		Write32(pTimeLimit, 0); //OpenTime
		Write32(pTimeLimit, 0); //CloseTime

		len = pTimeLimit - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //ApplyLevel
	Write32(p, 0); //ApplySuperMoney
	Write32(p, 0); //LastGlobalSuperMoney
	Write8(p, 0); //MapNum
	Write32(p, 0); //Map[]
	for (size_t i = 0; i < n; i++)
	{ //RoundInfo
		BYTE* pRoundInfo = p;
		Write16(pRoundInfo, 0); //len

		Write32(pRoundInfo, 0); //Score
		{ //TimeLimit
			BYTE* pTimeLimit = pRoundInfo;
			Write16(pTimeLimit, 0); //len

			Write32(pTimeLimit, 0); //OpenTime
			Write32(pTimeLimit, 0); //CloseTime

			len = pTimeLimit - pRoundInfo;
			Set16(pRoundInfo, (WORD)len);
			pRoundInfo += len;
		}
		Write32(pRoundInfo, 0); //ScoreLimit[]
		Write32(pRoundInfo, 0); //FinishGuildScore
		Write32(pRoundInfo, 0); //FirstGuildScore

		len = pRoundInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	for (size_t i = 0; i < n; i++)
	{ //DailyAwardInfo
		BYTE* pDailyAwardInfo = p;
		Write16(pDailyAwardInfo, 0); //len

		Write8(pDailyAwardInfo, 0); //Type
		Write8(pDailyAwardInfo, 0); //AwardType
		Write32(pDailyAwardInfo, 0); //Value
		Write32(pDailyAwardInfo, 0); //Status
		Write8(pDailyAwardInfo, 0); //HasAward
		for (size_t i = 0; i < n; i++)
		{ //Award
			BYTE* pAward = pDailyAwardInfo;
			Write16(pAward, 0); //len

			Write32(pAward, 0); //Exp
			Write32(pAward, 0); //Money
			Write32(pAward, 0); //SuperMoney
			Write16(pAward, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAward;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAward;
				Set16(pAward, (WORD)len);
				pAward += len;
			}
			Write32(pAward, 0); //Coupons
			Write32(pAward, 0); //GuildPoint
			Write32(pAward, 0); //LuckMoney
			Write8(pAward, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAward;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAward;
				Set16(pAward, (WORD)len);
				pAward += len;
			}
			Write32(pAward, 0); //SpeedCoin

			len = pAward - pDailyAwardInfo;
			Set16(pDailyAwardInfo, (WORD)len);
			pDailyAwardInfo += len;
		}
		WriteString(pDailyAwardInfo, 0); //Desc[]

		len = pDailyAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //WeekAwardInfo
		BYTE* pWeekAwardInfo = p;
		Write16(pWeekAwardInfo, 0); //len

		Write8(pWeekAwardInfo, 0); //Type
		Write8(pWeekAwardInfo, 0); //AwardType
		Write32(pWeekAwardInfo, 0); //Value
		Write32(pWeekAwardInfo, 0); //Status
		Write8(pWeekAwardInfo, 0); //HasAward
		for (size_t i = 0; i < n; i++)
		{ //Award
			BYTE* pAward = pWeekAwardInfo;
			Write16(pAward, 0); //len

			Write32(pAward, 0); //Exp
			Write32(pAward, 0); //Money
			Write32(pAward, 0); //SuperMoney
			Write16(pAward, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAward;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAward;
				Set16(pAward, (WORD)len);
				pAward += len;
			}
			Write32(pAward, 0); //Coupons
			Write32(pAward, 0); //GuildPoint
			Write32(pAward, 0); //LuckMoney
			Write8(pAward, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAward;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAward;
				Set16(pAward, (WORD)len);
				pAward += len;
			}
			Write32(pAward, 0); //SpeedCoin

			len = pAward - pWeekAwardInfo;
			Set16(pWeekAwardInfo, (WORD)len);
			pWeekAwardInfo += len;
		}
		WriteString(pWeekAwardInfo, 0); //Desc[]

		len = pWeekAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //Applied
	Write32(p, 0); //Score
	Write32(p, 0); //EndSuperMoney
	Write32(p, 0); //PrepareTime
	Write32(p, 0); //BuyScore
	Write32(p, 0); //BuyScoreTimes
	Write32(p, 0); //MaxBuyScoreTimes
	Write32(p, 0); //BuyScoreCost[]

	len = p - buf;
	SendToClient(Client, 21226, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestApplyGoldMedalMatch(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseApplyGoldMedalMatch(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write32(p, 0); //ApplyLevel
	Write32(p, 0); //ApplySuperMoney
	Write32(p, 0); //Score
	Write32(p, 0); //EndSuperMoney

	len = p - buf;
	SendToClient(Client, 21227, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestBuyScoreGoldMedalMatch(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseBuyScoreGoldMedalMatch(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write32(p, 0); //Score
	Write32(p, 0); //EndSuperMoney
	for (size_t i = 0; i < n; i++)
	{ //DailyAwardInfo
		BYTE* pDailyAwardInfo = p;
		Write16(pDailyAwardInfo, 0); //len

		Write8(pDailyAwardInfo, 0); //Type
		Write8(pDailyAwardInfo, 0); //AwardType
		Write32(pDailyAwardInfo, 0); //Value
		Write32(pDailyAwardInfo, 0); //Status
		Write8(pDailyAwardInfo, 0); //HasAward
		for (size_t i = 0; i < n; i++)
		{ //Award
			BYTE* pAward = pDailyAwardInfo;
			Write16(pAward, 0); //len

			Write32(pAward, 0); //Exp
			Write32(pAward, 0); //Money
			Write32(pAward, 0); //SuperMoney
			Write16(pAward, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAward;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAward;
				Set16(pAward, (WORD)len);
				pAward += len;
			}
			Write32(pAward, 0); //Coupons
			Write32(pAward, 0); //GuildPoint
			Write32(pAward, 0); //LuckMoney
			Write8(pAward, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAward;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAward;
				Set16(pAward, (WORD)len);
				pAward += len;
			}
			Write32(pAward, 0); //SpeedCoin

			len = pAward - pDailyAwardInfo;
			Set16(pDailyAwardInfo, (WORD)len);
			pDailyAwardInfo += len;
		}
		WriteString(pDailyAwardInfo, 0); //Desc[]

		len = pDailyAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 21228, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetItemTimeLimtCfg(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT UpdateTime = Read32(p);

}

void ResponsetGetItemTimeLimtCfg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	for (size_t i = 0; i < n; i++)
	{ //ItemTimeLimit
		BYTE* pItemTimeLimit = p;
		Write16(pItemTimeLimit, 0); //len

		Write32(pItemTimeLimit, 0); //ItemID
		Write32(pItemTimeLimit, 0); //ExpireTime

		len = pItemTimeLimit - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //UpdateTime

	len = p - buf;
	SendToClient(Client, 24201, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestHyperSpaceJumboGetCfg(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR CfgType = Read8(p);

}

void ResponseHyperSpaceJumboGetCfg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write32(p, 0); //BeginTime
	Write32(p, 0); //EndTime
	Write16(p, 0); //MapNum
	Write32(p, 0); //MapIDList[]
	Write32(p, 0); //BestItemIDList[]
	Write32(p, 0); //LeftOpenBoxNum
	Write8(p, 0); //CfgType
	Write32(p, 0); //Para1
	Write16(p, 0); //ValueNum
	Write32(p, 0); //Values[]
	Write16(p, 0); //MapListNum
	for (size_t i = 0; i < n; i++)
	{ //MapList
		BYTE* pMapList = p;
		Write16(pMapList, 0); //len

		Write32(pMapList, 0); //MapID
		Write8(pMapList, 0); //Para1

		len = pMapList - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //HighBoxAwardNum
	for (size_t i = 0; i < n; i++)
	{ //HighBoxAward
		BYTE* pHighBoxAward = p;
		Write16(pHighBoxAward, 0); //len

		Write32(pHighBoxAward, 0); //Exp
		Write32(pHighBoxAward, 0); //Money
		Write32(pHighBoxAward, 0); //SuperMoney
		Write16(pHighBoxAward, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pHighBoxAward;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pHighBoxAward;
			Set16(pHighBoxAward, (WORD)len);
			pHighBoxAward += len;
		}
		Write32(pHighBoxAward, 0); //Coupons
		Write32(pHighBoxAward, 0); //GuildPoint
		Write32(pHighBoxAward, 0); //LuckMoney
		Write8(pHighBoxAward, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pHighBoxAward;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pHighBoxAward;
			Set16(pHighBoxAward, (WORD)len);
			pHighBoxAward += len;
		}
		Write32(pHighBoxAward, 0); //SpeedCoin

		len = pHighBoxAward - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //LowBoxAwardNum
	for (size_t i = 0; i < n; i++)
	{ //LowBoxAward
		BYTE* pLowBoxAward = p;
		Write16(pLowBoxAward, 0); //len

		Write32(pLowBoxAward, 0); //Exp
		Write32(pLowBoxAward, 0); //Money
		Write32(pLowBoxAward, 0); //SuperMoney
		Write16(pLowBoxAward, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pLowBoxAward;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pLowBoxAward;
			Set16(pLowBoxAward, (WORD)len);
			pLowBoxAward += len;
		}
		Write32(pLowBoxAward, 0); //Coupons
		Write32(pLowBoxAward, 0); //GuildPoint
		Write32(pLowBoxAward, 0); //LuckMoney
		Write8(pLowBoxAward, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pLowBoxAward;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pLowBoxAward;
			Set16(pLowBoxAward, (WORD)len);
			pLowBoxAward += len;
		}
		Write32(pLowBoxAward, 0); //SpeedCoin

		len = pLowBoxAward - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //Para2
	Write16(p, 0); //ValueNum2
	Write32(p, 0); //Values2[]
	Write8(p, 0); //HasYuLeJiaNianHuaInfo
	for (size_t i = 0; i < n; i++)
	{ //YuLeJiaNianHuaInfo
		BYTE* pYuLeJiaNianHuaInfo = p;
		Write16(pYuLeJiaNianHuaInfo, 0); //len

		Write32(pYuLeJiaNianHuaInfo, 0); //Mode
		Write32(pYuLeJiaNianHuaInfo, 0); //Score
		Write8(pYuLeJiaNianHuaInfo, 0); //RankRangNum
		Write32(pYuLeJiaNianHuaInfo, 0); //RankRange[]
		Write8(pYuLeJiaNianHuaInfo, 0); //RankScoreNum
		Write32(pYuLeJiaNianHuaInfo, 0); //RankScore[]
		Write8(pYuLeJiaNianHuaInfo, 0); //InRecommend
		Write8(pYuLeJiaNianHuaInfo, 0); //InDoubleScore

		len = pYuLeJiaNianHuaInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24202, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestTimerChallenge2ndMoreHallInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseTimerChallenge2ndMoreHallInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //ValueNum
	Write32(p, 0); //Values[]
	Write16(p, 0); //TimerChallenge2ndLevelAwardInfoNum
	for (size_t i = 0; i < n; i++)
	{ //TimerChallenge2ndLevelAwardInfo
		BYTE* pTimerChallenge2ndLevelAwardInfo = p;
		Write16(pTimerChallenge2ndLevelAwardInfo, 0); //len

		Write32(pTimerChallenge2ndLevelAwardInfo, 0); //Level
		Write32(pTimerChallenge2ndLevelAwardInfo, 0); //JumpLevel
		Write32(pTimerChallenge2ndLevelAwardInfo, 0); //BoxFlag
		Write8(pTimerChallenge2ndLevelAwardInfo, 0); //CheckpointNum
		Write32(pTimerChallenge2ndLevelAwardInfo, 0); //CheckpointIdx[]
		Write8(pTimerChallenge2ndLevelAwardInfo, 0); //IsDragonGate

		len = pTimerChallenge2ndLevelAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasDoorCfg
	for (size_t i = 0; i < n; i++)
	{ //DoorCfg
		BYTE* pDoorCfg = p;
		Write16(pDoorCfg, 0); //len

		Write32(pDoorCfg, 0); //DoorPosNum
		for (size_t i = 0; i < n; i++)
		{ //DoorPosInfo
			BYTE* pDoorPosInfo = pDoorCfg;
			Write16(pDoorPosInfo, 0); //len

			Write32(pDoorPosInfo, 0); //Level
			Write8(pDoorPosInfo, 0); //DoorPosDetailNum
			for (size_t i = 0; i < n; i++)
			{ //DoorPosDetailInfo
				BYTE* pDoorPosDetailInfo = pDoorPosInfo;
				Write16(pDoorPosDetailInfo, 0); //len

				Write32(pDoorPosDetailInfo, 0); //Checkpoint
				Write32(pDoorPosDetailInfo, 0); //AxisX
				Write32(pDoorPosDetailInfo, 0); //AxisY
				Write32(pDoorPosDetailInfo, 0); //AxisZ
				Write32(pDoorPosDetailInfo, 0); //X
				Write32(pDoorPosDetailInfo, 0); //Y
				Write32(pDoorPosDetailInfo, 0); //Z

				len = pDoorPosDetailInfo - pDoorPosInfo;
				Set16(pDoorPosInfo, (WORD)len);
				pDoorPosInfo += len;
			}

			len = pDoorPosInfo - pDoorCfg;
			Set16(pDoorCfg, (WORD)len);
			pDoorCfg += len;
		}

		len = pDoorCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //AllowJumpLevelPerPlayer
	Write8(p, 0); //ShadowNpcNum
	for (size_t i = 0; i < n; i++)
	{ //TimerChallengeShadowNpcInfo
		BYTE* pTimerChallengeShadowNpcInfo = p;
		Write16(pTimerChallengeShadowNpcInfo, 0); //len

		Write8(pTimerChallengeShadowNpcInfo, 0); //FileMd5Len
		Write16(pTimerChallengeShadowNpcInfo, 0); //Len
		Write8(pTimerChallengeShadowNpcInfo, 0); //HasNPCItem
		for (size_t i = 0; i < n; i++)
		{ //NPCItemInfo
			BYTE* pNPCItemInfo = pTimerChallengeShadowNpcInfo;
			Write16(pNPCItemInfo, 0); //len

			Write32(pNPCItemInfo, 0); //RoleID
			Write32(pNPCItemInfo, 0); //HairID
			Write32(pNPCItemInfo, 0); //FaceID
			Write32(pNPCItemInfo, 0); //GlassID
			Write32(pNPCItemInfo, 0); //CoatID
			Write32(pNPCItemInfo, 0); //GloveID
			Write32(pNPCItemInfo, 0); //TrousersID
			Write32(pNPCItemInfo, 0); //PersonarID
			Write32(pNPCItemInfo, 0); //TattooID
			Write32(pNPCItemInfo, 0); //WingID
			Write32(pNPCItemInfo, 0); //DecoratorID
			Write32(pNPCItemInfo, 0); //KartID
			Write32(pNPCItemInfo, 0); //ColorID
			Write32(pNPCItemInfo, 0); //TrackID
			Write32(pNPCItemInfo, 0); //EffectID
			Write32(pNPCItemInfo, 0); //BrandID
			Write32(pNPCItemInfo, 0); //TailID

			len = pNPCItemInfo - pTimerChallengeShadowNpcInfo;
			Set16(pTimerChallengeShadowNpcInfo, (WORD)len);
			pTimerChallengeShadowNpcInfo += len;
		}
		Write16(pTimerChallengeShadowNpcInfo, 0); //BossNameLen
		Write16(pTimerChallengeShadowNpcInfo, 0); //TimeNum
		Write(pTimerChallengeShadowNpcInfo, 0); //LevTimeCfg[]

		len = pTimerChallengeShadowNpcInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //BuffNum
	for (size_t i = 0; i < n; i++)
	{ //TimerChallengeOneBuffInfo
		BYTE* pTimerChallengeOneBuffInfo = p;
		Write16(pTimerChallengeOneBuffInfo, 0); //len

		Write32(pTimerChallengeOneBuffInfo, 0); //BuffId
		Write32(pTimerChallengeOneBuffInfo, 0); //Prob
		Write8(pTimerChallengeOneBuffInfo, 0); //BuffType
		Write8(pTimerChallengeOneBuffInfo, 0); //BuffLev
		Write8(pTimerChallengeOneBuffInfo, 0); //ReduceDiscount
		Write32(pTimerChallengeOneBuffInfo, 0); //KartId
		Write8(pTimerChallengeOneBuffInfo, 0); //DailyExpKartTimeLimit
		Write16(pTimerChallengeOneBuffInfo, 0); //BuffNameLen
		Write16(pTimerChallengeOneBuffInfo, 0); //BuffDesLen
		Write8(pTimerChallengeOneBuffInfo, 0); //Icon
		Write8(pTimerChallengeOneBuffInfo, 0); //BuffShape
		Write8(pTimerChallengeOneBuffInfo, 0); //IsCanLevUp

		len = pTimerChallengeOneBuffInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //CurrentActiveValue
	Write8(p, 0); //GotBuffNum
	for (size_t i = 0; i < n; i++)
	{ //TimerChallenge3PlayerHasGotBuffInfo
		BYTE* pTimerChallenge3PlayerHasGotBuffInfo = p;
		Write16(pTimerChallenge3PlayerHasGotBuffInfo, 0); //len

		Write32(pTimerChallenge3PlayerHasGotBuffInfo, 0); //BuffId
		Write8(pTimerChallenge3PlayerHasGotBuffInfo, 0); //BuffSatus
		Write8(pTimerChallenge3PlayerHasGotBuffInfo, 0); //Position
		Write8(pTimerChallenge3PlayerHasGotBuffInfo, 0); //HasExpTime

		len = pTimerChallenge3PlayerHasGotBuffInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //TriggerProb
	Write8(p, 0); //NoTriggerN
	Write8(p, 0); //ASDSwitch
	{ //RefitInfo
		BYTE* pRefitInfo = p;
		Write16(pRefitInfo, 0); //len

		Write8(pRefitInfo, 0); //SpeedRefitStar
		Write8(pRefitInfo, 0); //JetRefitStar
		Write8(pRefitInfo, 0); //SJetRefitStar
		Write8(pRefitInfo, 0); //AccuRefitStar

		len = pRefitInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24258, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetGuanjiaInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int Type = Read32(p);
	UINT KeyLen = Read32(p);
	BYTE[] Key[] = Read8(p);

}

void ResponseGetGuanjiaInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write32(p, 0); //Type
	Write16(p, 0); //ValueNum
	Write32(p, 0); //Values[]
	Write16(p, 0); //StrLen

	len = p - buf;
	SendToClient(Client, 24259, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestZan(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT DstUin = Read32(p);
	int Type = Read32(p);

}

void ResponseZan(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write32(p, 0); //DstUin
	Write32(p, 0); //Type
	Write16(p, 0); //AwardNum

	len = p - buf;
	SendToClient(Client, 24260, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyOpenFireCracker(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //Type

	len = p - buf;
	SendToClient(Client, 28384, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyZan(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //DstUin
	Write32(p, 0); //Type
	Write32(p, 0); //AddBefore
	Write32(p, 0); //Add
	Write8(p, 0); //CanZan
	Write32(p, 0); //Status

	len = p - buf;
	SendToClient(Client, 24261, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetChattingBlackUinList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetChattingBlackUinList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write32(p, 0); //BlackUinNum
	for (size_t i = 0; i < n; i++)
	{ //BlackUin
		BYTE* pBlackUin = p;
		Write16(pBlackUin, 0); //len

		Write32(pBlackUin, 0); //Uin
		WriteString(pBlackUin, 0); //NickName[]

		len = pBlackUin - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24265, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestChangeChattingBlackUin(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT OpType = Read32(p);
	UINT BlackUinNum = Read32(p);
	for (size_t i = 0; i < n; i++)
	{ //BlackUin
		BYTE* pBlackUin = p;
		len = Read16(pBlackUin);

		UINT Uin = Read32(pBlackUin);
		char[] NickName[] = ReadString(pBlackUin);

		p += len;
	}

}

void ResponseChangeChattingBlackUin(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write32(p, 0); //OpType

	len = p - buf;
	SendToClient(Client, 24266, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestHyperSpaceJumboOperation(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR Operation = Read8(p);
	UCHAR Para1 = Read8(p);

}

void ResponseHyperSpaceJumboSelectOperation(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write8(p, 0); //Operation
	Write8(p, 0); //ReasonLen
	Write32(p, 0); //LeftTime

	len = p - buf;
	SendToClient(Client, 24204, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestRptSpeedFastClickInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UCHAR Type = Read8(p);

}

void RequestSpeedFastShowInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR ReqType = Read8(p);

}

void ResponseSpeedFastShowInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write32(p, 0); //CurrentMapIndex
	Write8(p, 0); //HaveNtro
	Write8(p, 0); //CurrentNtroValue
	Write16(p, 0); //MapIndexNums
	for (size_t i = 0; i < n; i++)
	{ //SpeedFastMapIndexAwardInfos
		BYTE* pSpeedFastMapIndexAwardInfos = p;
		Write16(pSpeedFastMapIndexAwardInfos, 0); //len

		Write8(pSpeedFastMapIndexAwardInfos, 0); //MapIndex
		Write16(pSpeedFastMapIndexAwardInfos, 0); //AwardType
		Write16(pSpeedFastMapIndexAwardInfos, 0); //EventAwardID
		Write8(pSpeedFastMapIndexAwardInfos, 0); //ShortCutIndexNums
		Write8(pSpeedFastMapIndexAwardInfos, 0); //BehaviorEventHasFinished
		Write8(pSpeedFastMapIndexAwardInfos, 0); //GetEventAward
		{ //AwardItemInfo
			BYTE* pAwardItemInfo = pSpeedFastMapIndexAwardInfos;
			Write16(pAwardItemInfo, 0); //len

			Write32(pAwardItemInfo, 0); //Exp
			Write32(pAwardItemInfo, 0); //Money
			Write32(pAwardItemInfo, 0); //SuperMoney
			Write16(pAwardItemInfo, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAwardItemInfo;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //Coupons
			Write32(pAwardItemInfo, 0); //GuildPoint
			Write32(pAwardItemInfo, 0); //LuckMoney
			Write8(pAwardItemInfo, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAwardItemInfo;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //SpeedCoin

			len = pAwardItemInfo - pSpeedFastMapIndexAwardInfos;
			Set16(pSpeedFastMapIndexAwardInfos, (WORD)len);
			pSpeedFastMapIndexAwardInfos += len;
		}

		len = pSpeedFastMapIndexAwardInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //RemainingMoveNums
	Write16(p, 0); //CurrentMoveNums
	Write32(p, 0); //BufferTag
	WriteUn(p, 0); //ushpeedFastFinalAwardCfgNums
	for (size_t i = 0; i < n; i++)
	{ //SpeedFastFinalAwadInfos
		BYTE* pSpeedFastFinalAwadInfos = p;
		Write16(pSpeedFastFinalAwadInfos, 0); //len

		Write32(pSpeedFastFinalAwadInfos, 0); //CostNums
		Write32(pSpeedFastFinalAwadInfos, 0); //LowAwardNums
		Write32(pSpeedFastFinalAwadInfos, 0); //HighAwardNums

		len = pSpeedFastFinalAwadInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //MoveTurnTableChanceGeneInfoNums
	for (size_t i = 0; i < n; i++)
	{ //MoveTurnTableChanceGeneInfos
		BYTE* pMoveTurnTableChanceGeneInfos = p;
		Write16(pMoveTurnTableChanceGeneInfos, 0); //len

		Write8(pMoveTurnTableChanceGeneInfos, 0); //TaskID
		Write32(pMoveTurnTableChanceGeneInfos, 0); //AlreadyAwardNums
		Write32(pMoveTurnTableChanceGeneInfos, 0); //AwardMoveNums
		Write32(pMoveTurnTableChanceGeneInfos, 0); //TaskFinishNums
		Write32(pMoveTurnTableChanceGeneInfos, 0); //TaskNeedValue

		len = pMoveTurnTableChanceGeneInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //SpeedFastOpenDate
	Write32(p, 0); //SpeedFastCloseDate
	Write32(p, 0); //SpeedFastOpenTime
	Write32(p, 0); //SpeedFastCloseTime
	Write32(p, 0); //CurrentSpeedRoundNums

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestMoveTurnTableInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseMoveTurnTableInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write32(p, 0); //StartMapIndex
	Write32(p, 0); //CurrentMapIndex
	Write8(p, 0); //UpdateMapAward
	Write32(p, 0); //FinalAwardMedalNums
	Write8(p, 0); //HaveNtro
	Write8(p, 0); //CurrentNtroValue
	Write8(p, 0); //NtroAward
	Write8(p, 0); //ShortCutAward
	Write16(p, 0); //AwardInfoNums
	for (size_t i = 0; i < n; i++)
	{ //SpeedFastMapIndexAwardInfos
		BYTE* pSpeedFastMapIndexAwardInfos = p;
		Write16(pSpeedFastMapIndexAwardInfos, 0); //len

		Write8(pSpeedFastMapIndexAwardInfos, 0); //MapIndex
		Write16(pSpeedFastMapIndexAwardInfos, 0); //AwardType
		Write16(pSpeedFastMapIndexAwardInfos, 0); //EventAwardID
		Write8(pSpeedFastMapIndexAwardInfos, 0); //ShortCutIndexNums
		Write8(pSpeedFastMapIndexAwardInfos, 0); //BehaviorEventHasFinished
		Write8(pSpeedFastMapIndexAwardInfos, 0); //GetEventAward
		{ //AwardItemInfo
			BYTE* pAwardItemInfo = pSpeedFastMapIndexAwardInfos;
			Write16(pAwardItemInfo, 0); //len

			Write32(pAwardItemInfo, 0); //Exp
			Write32(pAwardItemInfo, 0); //Money
			Write32(pAwardItemInfo, 0); //SuperMoney
			Write16(pAwardItemInfo, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAwardItemInfo;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //Coupons
			Write32(pAwardItemInfo, 0); //GuildPoint
			Write32(pAwardItemInfo, 0); //LuckMoney
			Write8(pAwardItemInfo, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAwardItemInfo;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //SpeedCoin

			len = pAwardItemInfo - pSpeedFastMapIndexAwardInfos;
			Set16(pSpeedFastMapIndexAwardInfos, (WORD)len);
			pSpeedFastMapIndexAwardInfos += len;
		}

		len = pSpeedFastMapIndexAwardInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestPointChallengeBuyItem(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;
	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	{ //AwardArray
		BYTE* pAwardArray = p;
		len = Read16(pAwardArray);

		UCHAR ExtendInfoNum = Read8(pAwardArray);
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAwardArray;
			len = Read16(pExtendInfoAward);

			USHORT Key = Read16(pExtendInfoAward);
			UINT AddValue = Read32(pExtendInfoAward);
			UINT TotalValue = Read32(pExtendInfoAward);
			UCHAR ShowPriority = Read8(pExtendInfoAward);
			USHORT BuyNeedScore = Read16(pExtendInfoAward);
			UCHAR OneMatchMaxNum = Read8(pExtendInfoAward);

			pAwardArray += len;
		}

		p += len;
	}

}

void ResponsePointChallengeBuyItem(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	{ //AwardArray
		BYTE* pAwardArray = p;
		Write16(pAwardArray, 0); //len

		Write8(pAwardArray, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAwardArray;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAwardArray;
			Set16(pAwardArray, (WORD)len);
			pAwardArray += len;
		}

		len = pAwardArray - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //ResultID
	Write32(p, 0); //CostScore
	Write32(p, 0); //TotalScore

	len = p - buf;
	SendToClient(Client, 24753, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestPointChallengeOpenMainBoard(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR OpenType = Read8(p);

}

void ResponsePointChallengeOpenMainBoard(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write32(p, 0); //TodayHighestTongGuanNum
	Write32(p, 0); //TodayHighestScore
	Write32(p, 0); //TotayTotalScore
	Write32(p, 0); //TiaoZhanNum
	Write32(p, 0); //TiaoZhanMaxNum
	Write32(p, 0); //GetTiaoZhanLeftSeconds
	Write32(p, 0); //HistoryHighestTongGuanNum
	Write32(p, 0); //HistoryHighestScore
	{ //AwardArray
		BYTE* pAwardArray = p;
		Write16(pAwardArray, 0); //len

		Write8(pAwardArray, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAwardArray;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAwardArray;
			Set16(pAwardArray, (WORD)len);
			pAwardArray += len;
		}

		len = pAwardArray - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //WeekTotalScore
	Write32(p, 0); //TiaoZhanNum_TodayRecover
	Write32(p, 0); //TiaoZhanNum_MaxTodayRecoverNum
	Write32(p, 0); //GetTiaoZhanTotalSeconds

	len = p - buf;
	SendToClient(Client, 24754, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyGenGameEndBoxAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ItemNum
	for (size_t i = 0; i < n; i++)
	{ //ItemInfo
		BYTE* pItemInfo = p;
		Write16(pItemInfo, 0); //len

		Write32(pItemInfo, 0); //ItemID
		Write32(pItemInfo, 0); //ItemNum
		Write32(pItemInfo, 0); //AvailPeriod
		Write8(pItemInfo, 0); //Status
		WriteUn(pItemInfo, 0); //ObtainTime
		Write32(pItemInfo, 0); //OtherAttribute
		Write16(pItemInfo, 0); //ItemType

		len = pItemInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //DescLen

	len = p - buf;
	SendToClient(Client, 24755, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetGameEndBoxAward(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void RequestGetZhangFeiBoxList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetZhangFeiBoxList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //Num
	Write32(p, 0); //BoxList[]

	len = p - buf;
	SendToClient(Client, 24766, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifySpecialActivityInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ActivityID
	Write8(p, 0); //Flag
	Write32(p, 0); //OpenDate
	Write32(p, 0); //CloseDate
	Write32(p, 0); //OpenTime
	Write32(p, 0); //CloseTime
	Write8(p, 0); //SpecialActivityIDNum
	Write8(p, 0); //SpecialActivityInfoNum
	for (size_t i = 0; i < n; i++)
	{ //SpecialActivityInfo
		BYTE* pSpecialActivityInfo = p;
		Write16(pSpecialActivityInfo, 0); //len

		Write8(pSpecialActivityInfo, 0); //ProfessionLicenseInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ProfessionLicenseInfo
			BYTE* pProfessionLicenseInfo = pSpecialActivityInfo;
			Write16(pProfessionLicenseInfo, 0); //len

			Write8(pProfessionLicenseInfo, 0); //BigLevel
			Write8(pProfessionLicenseInfo, 0); //SmallLevel

			len = pProfessionLicenseInfo - pSpecialActivityInfo;
			Set16(pSpecialActivityInfo, (WORD)len);
			pSpecialActivityInfo += len;
		}

		len = pSpecialActivityInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24767, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestOpenGlobalTravel(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR Type = Read8(p);

}

void ResponseOpenGlobalTravel(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write32(p, 0); //CurPoint
	Write8(p, 0); //MinGetPoint
	Write8(p, 0); //MaxGetPoint
	Write32(p, 0); //ItemID
	Write32(p, 0); //ItemLeftNum
	Write8(p, 0); //NameLen
	Write32(p, 0); //TotalRefreshLeftSeconds
	Write8(p, 0); //ItemRefreshLeftNums
	Write8(p, 0); //ItemRefreshTotalNums
	Write8(p, 0); //Type
	Write16(p, 0); //MoveTurnTableChanceGeneInfoNums
	for (size_t i = 0; i < n; i++)
	{ //MoveTurnTableChanceGeneInfos
		BYTE* pMoveTurnTableChanceGeneInfos = p;
		Write16(pMoveTurnTableChanceGeneInfos, 0); //len

		Write8(pMoveTurnTableChanceGeneInfos, 0); //TaskID
		Write32(pMoveTurnTableChanceGeneInfos, 0); //AlreadyAwardNums
		Write32(pMoveTurnTableChanceGeneInfos, 0); //AwardMoveNums
		Write32(pMoveTurnTableChanceGeneInfos, 0); //TaskFinishNums
		Write32(pMoveTurnTableChanceGeneInfos, 0); //TaskNeedValue

		len = pMoveTurnTableChanceGeneInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //MaxPoint
	Write32(p, 0); //BeginTime
	Write32(p, 0); //EndTime
	Write8(p, 0); //SpecialItemNum

	len = p - buf;
	SendToClient(Client, 24768, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGlobalTravelRefreshItem(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR Idx = Read8(p);

}

void ResponseGlobalTravelRefreshItem(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write8(p, 0); //Idx
	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 24769, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyQiXiZhanBuCfg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	{ //MatchMakerOpenCfg
		BYTE* pMatchMakerOpenCfg = p;
		Write16(pMatchMakerOpenCfg, 0); //len

		Write32(pMatchMakerOpenCfg, 0); //OpenDate
		Write32(pMatchMakerOpenCfg, 0); //CloseDate
		Write32(pMatchMakerOpenCfg, 0); //OpenTime
		Write32(pMatchMakerOpenCfg, 0); //CloseTime
		Write32(pMatchMakerOpenCfg, 0); //CurrentOpenActivityID

		len = pMatchMakerOpenCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //AwardToClient
		BYTE* pAwardToClient = p;
		Write16(pAwardToClient, 0); //len

		Write32(pAwardToClient, 0); //Exp
		Write32(pAwardToClient, 0); //Money
		Write32(pAwardToClient, 0); //SuperMoney
		Write16(pAwardToClient, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAwardToClient;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAwardToClient;
			Set16(pAwardToClient, (WORD)len);
			pAwardToClient += len;
		}
		Write32(pAwardToClient, 0); //Coupons
		Write32(pAwardToClient, 0); //GuildPoint
		Write32(pAwardToClient, 0); //LuckMoney
		Write8(pAwardToClient, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAwardToClient;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAwardToClient;
			Set16(pAwardToClient, (WORD)len);
			pAwardToClient += len;
		}
		Write32(pAwardToClient, 0); //SpeedCoin

		len = pAwardToClient - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24778, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetValentinesDayCfg(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR OpenType = Read8(p);

}

void ResponseGetValentinesDayCfg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //DstUin
	Write16(p, 0); //ResultID
	{ //ValentinesDayOpenCfg
		BYTE* pValentinesDayOpenCfg = p;
		Write16(pValentinesDayOpenCfg, 0); //len

		Write32(pValentinesDayOpenCfg, 0); //OpenDate
		Write32(pValentinesDayOpenCfg, 0); //CloseDate
		Write32(pValentinesDayOpenCfg, 0); //OpenTime
		Write32(pValentinesDayOpenCfg, 0); //CloseTime

		len = pValentinesDayOpenCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //RedLineCfg
		BYTE* pRedLineCfg = p;
		Write16(pRedLineCfg, 0); //len

		Write32(pRedLineCfg, 0); //ItemID
		Write32(pRedLineCfg, 0); //DayMaxNum
		Write32(pRedLineCfg, 0); //AddFateValueBrRedLine
		Write32(pRedLineCfg, 0); //RedLineTaskNum
		for (size_t i = 0; i < n; i++)
		{ //RedLineTaskCfg
			BYTE* pRedLineTaskCfg = pRedLineCfg;
			Write16(pRedLineTaskCfg, 0); //len

			Write32(pRedLineTaskCfg, 0); //TaskID
			Write32(pRedLineTaskCfg, 0); //AddRedLineNum
			Write32(pRedLineTaskCfg, 0); //AlreadyGotNum
			Write32(pRedLineTaskCfg, 0); //CanMaxGetNum

			len = pRedLineTaskCfg - pRedLineCfg;
			Set16(pRedLineCfg, (WORD)len);
			pRedLineCfg += len;
		}

		len = pRedLineCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //AwardToClient
		BYTE* pAwardToClient = p;
		Write16(pAwardToClient, 0); //len

		Write32(pAwardToClient, 0); //Exp
		Write32(pAwardToClient, 0); //Money
		Write32(pAwardToClient, 0); //SuperMoney
		Write16(pAwardToClient, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAwardToClient;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAwardToClient;
			Set16(pAwardToClient, (WORD)len);
			pAwardToClient += len;
		}
		Write32(pAwardToClient, 0); //Coupons
		Write32(pAwardToClient, 0); //GuildPoint
		Write32(pAwardToClient, 0); //LuckMoney
		Write8(pAwardToClient, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAwardToClient;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAwardToClient;
			Set16(pAwardToClient, (WORD)len);
			pAwardToClient += len;
		}
		Write32(pAwardToClient, 0); //SpeedCoin

		len = pAwardToClient - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //CurrentSNSValue
	Write16(p, 0); //TreeLevNum
	Write32(p, 0); //TreeLevNeedFateValue[]
	{ //GiftAndTipsInfo
		BYTE* pGiftAndTipsInfo = p;
		Write16(pGiftAndTipsInfo, 0); //len

		Write16(pGiftAndTipsInfo, 0); //GiftNum
		Write16(pGiftAndTipsInfo, 0); //CanSendGiftFlag
		Write16(pGiftAndTipsInfo, 0); //TipsLen
		Write32(pGiftAndTipsInfo, 0); //HasReceivedGiftNum
		Write32(pGiftAndTipsInfo, 0); //HasSendGiftNum

		len = pGiftAndTipsInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //Flag
	Write8(p, 0); //OpenType

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestTieRedRop(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT TieNum = Read16(p);

}

void ResponseTieRedRop(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //ValueAdd
	Write8(p, 0); //HasAward
	{ //AwardToClient
		BYTE* pAwardToClient = p;
		Write16(pAwardToClient, 0); //len

		Write32(pAwardToClient, 0); //Exp
		Write32(pAwardToClient, 0); //Money
		Write32(pAwardToClient, 0); //SuperMoney
		Write16(pAwardToClient, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAwardToClient;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAwardToClient;
			Set16(pAwardToClient, (WORD)len);
			pAwardToClient += len;
		}
		Write32(pAwardToClient, 0); //Coupons
		Write32(pAwardToClient, 0); //GuildPoint
		Write32(pAwardToClient, 0); //LuckMoney
		Write8(pAwardToClient, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAwardToClient;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAwardToClient;
			Set16(pAwardToClient, (WORD)len);
			pAwardToClient += len;
		}
		Write32(pAwardToClient, 0); //SpeedCoin

		len = pAwardToClient - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestInviteToBeSNSPerson(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT InviteeUin = Read32(p);
	UCHAR Type = Read8(p);
	char[] InviterName[] = ReadString(p);
	char[] InviteeName[] = ReadString(p);

}

void ResponseInviteToBeSNSPerson(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultId
	Write32(p, 0); //Uin
	Write32(p, 0); //InviteeUin
	Write8(p, 0); //Type
	WriteString(p, 0); //InviterName[]
	WriteString(p, 0); //InviteeName[]

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyInvitedToBeSNSPerson(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //InviteeUin
	Write8(p, 0); //Type
	WriteString(p, 0); //InviterName[]
	WriteString(p, 0); //InviteeName[]

	len = p - buf;
	SendToClient(Client, 24773, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestCancelToBeSNSPerson(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	char[] InviterName[] = ReadString(p);
	UINT SNSPersonUin = Read32(p);

}

void ResponseCancelToBeSNSPerson(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultId
	Write32(p, 0); //Uin

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyCancelToBeSNSPerson(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	WriteString(p, 0); //InviterName[]

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestSendGiftToSNSPerson(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	char[] SendName[] = ReadString(p);
	UINT SNSPersonUin = Read32(p);

}

void ResponseSendGiftToSNSPerson(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultId
	Write32(p, 0); //Uin
	{ //GiftAndTipsInfo
		BYTE* pGiftAndTipsInfo = p;
		Write16(pGiftAndTipsInfo, 0); //len

		Write16(pGiftAndTipsInfo, 0); //GiftNum
		Write16(pGiftAndTipsInfo, 0); //CanSendGiftFlag
		Write16(pGiftAndTipsInfo, 0); //TipsLen
		Write32(pGiftAndTipsInfo, 0); //HasReceivedGiftNum
		Write32(pGiftAndTipsInfo, 0); //HasSendGiftNum

		len = pGiftAndTipsInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyReceiveGiftFromSNSPerson(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	WriteString(p, 0); //SendName[]

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetSNSPersonMixInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT Type = Read16(p);

}

void ResponseGetSNSPersonMixInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultId
	Write32(p, 0); //Uin
	Write16(p, 0); //Type
	Write32(p, 0); //CDTime
	{ //GiftAndTipsInfo
		BYTE* pGiftAndTipsInfo = p;
		Write16(pGiftAndTipsInfo, 0); //len

		Write16(pGiftAndTipsInfo, 0); //GiftNum
		Write16(pGiftAndTipsInfo, 0); //CanSendGiftFlag
		Write16(pGiftAndTipsInfo, 0); //TipsLen
		Write32(pGiftAndTipsInfo, 0); //HasReceivedGiftNum
		Write32(pGiftAndTipsInfo, 0); //HasSendGiftNum

		len = pGiftAndTipsInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetSNSGift(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetSNSGift(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write32(p, 0); //FateValueAdd
	{ //AwardToClient
		BYTE* pAwardToClient = p;
		Write16(pAwardToClient, 0); //len

		Write32(pAwardToClient, 0); //Exp
		Write32(pAwardToClient, 0); //Money
		Write32(pAwardToClient, 0); //SuperMoney
		Write16(pAwardToClient, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAwardToClient;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAwardToClient;
			Set16(pAwardToClient, (WORD)len);
			pAwardToClient += len;
		}
		Write32(pAwardToClient, 0); //Coupons
		Write32(pAwardToClient, 0); //GuildPoint
		Write32(pAwardToClient, 0); //LuckMoney
		Write8(pAwardToClient, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAwardToClient;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAwardToClient;
			Set16(pAwardToClient, (WORD)len);
			pAwardToClient += len;
		}
		Write32(pAwardToClient, 0); //SpeedCoin

		len = pAwardToClient - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //GiftAndTipsInfo
		BYTE* pGiftAndTipsInfo = p;
		Write16(pGiftAndTipsInfo, 0); //len

		Write16(pGiftAndTipsInfo, 0); //GiftNum
		Write16(pGiftAndTipsInfo, 0); //CanSendGiftFlag
		Write16(pGiftAndTipsInfo, 0); //TipsLen
		Write32(pGiftAndTipsInfo, 0); //HasReceivedGiftNum
		Write32(pGiftAndTipsInfo, 0); //HasSendGiftNum

		len = pGiftAndTipsInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetLBFairgroundInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetLBFairgroundInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write32(p, 0); //LeftPlayTimes[]
	{ //RandomEvent
		BYTE* pRandomEvent = p;
		Write16(pRandomEvent, 0); //len

		Write8(pRandomEvent, 0); //EventType
		Write32(pRandomEvent, 0); //ExtraTimes[]
		Write32(pRandomEvent, 0); //LeftTimes[]

		len = pRandomEvent - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //RandEventPromot
	for (size_t i = 0; i < n; i++)
	{ //Award
		BYTE* pAward = p;
		Write16(pAward, 0); //len

		for (size_t i = 0; i < n; i++)
		{ //EntryAward
			BYTE* pEntryAward = pAward;
			Write16(pEntryAward, 0); //len

			Write32(pEntryAward, 0); //Exp
			Write32(pEntryAward, 0); //Money
			Write32(pEntryAward, 0); //SuperMoney
			Write16(pEntryAward, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pEntryAward;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pEntryAward;
				Set16(pEntryAward, (WORD)len);
				pEntryAward += len;
			}
			Write32(pEntryAward, 0); //Coupons
			Write32(pEntryAward, 0); //GuildPoint
			Write32(pEntryAward, 0); //LuckMoney
			Write8(pEntryAward, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pEntryAward;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pEntryAward;
				Set16(pEntryAward, (WORD)len);
				pEntryAward += len;
			}
			Write32(pEntryAward, 0); //SpeedCoin

			len = pEntryAward - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}

		len = pAward - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //TicketID[]
	Write32(p, 0); //CostTicketNum[]

	len = p - buf;
	SendToClient(Client, 24781, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestLBFairgroundPlay(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR Type = Read8(p);
	USHORT[] PlayEntry[] = Read16(p);

}

void ResponseLBFairgroundPlay(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write8(p, 0); //Type
	{ //Award
		BYTE* pAward = p;
		Write16(pAward, 0); //len

		Write32(pAward, 0); //Exp
		Write32(pAward, 0); //Money
		Write32(pAward, 0); //SuperMoney
		Write16(pAward, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAward;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write32(pAward, 0); //Coupons
		Write32(pAward, 0); //GuildPoint
		Write32(pAward, 0); //LuckMoney
		Write8(pAward, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAward;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write32(pAward, 0); //SpeedCoin

		len = pAward - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24782, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyLBFairgroundInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //LeftPlayTimes[]
	{ //RandomEvent
		BYTE* pRandomEvent = p;
		Write16(pRandomEvent, 0); //len

		Write8(pRandomEvent, 0); //EventType
		Write32(pRandomEvent, 0); //ExtraTimes[]
		Write32(pRandomEvent, 0); //LeftTimes[]

		len = pRandomEvent - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //RandEventPromot
	for (size_t i = 0; i < n; i++)
	{ //Award
		BYTE* pAward = p;
		Write16(pAward, 0); //len

		for (size_t i = 0; i < n; i++)
		{ //EntryAward
			BYTE* pEntryAward = pAward;
			Write16(pEntryAward, 0); //len

			Write32(pEntryAward, 0); //Exp
			Write32(pEntryAward, 0); //Money
			Write32(pEntryAward, 0); //SuperMoney
			Write16(pEntryAward, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pEntryAward;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pEntryAward;
				Set16(pEntryAward, (WORD)len);
				pEntryAward += len;
			}
			Write32(pEntryAward, 0); //Coupons
			Write32(pEntryAward, 0); //GuildPoint
			Write32(pEntryAward, 0); //LuckMoney
			Write8(pEntryAward, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pEntryAward;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pEntryAward;
				Set16(pEntryAward, (WORD)len);
				pEntryAward += len;
			}
			Write32(pEntryAward, 0); //SpeedCoin

			len = pEntryAward - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}

		len = pAward - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24783, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetLoveCrystalInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT Context = Read32(p);

}

void ResponseGetLoveCrystalInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write32(p, 0); //LoveCrystalValue
	for (size_t i = 0; i < n; i++)
	{ //Award
		BYTE* pAward = p;
		Write16(pAward, 0); //len

		{ //Condition
			BYTE* pCondition = pAward;
			Write16(pCondition, 0); //len

			Write32(pCondition, 0); //LoveCrystalValue
			Write32(pCondition, 0); //FirstLoveBabyLev
			Write32(pCondition, 0); //SecondLoveBabyLev

			len = pCondition - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write8(pAward, 0); //RaiseTicket
		Write16(pAward, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAward;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write8(pAward, 0); //Status

		len = pAward - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //LeftLoveBabyRaiseTicket
	Write32(p, 0); //AwardLoveCrystalValue
	Write8(p, 0); //CanAddValue
	Write32(p, 0); //Context

	len = p - buf;
	SendToClient(Client, 24784, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestAddLoveCrystalValue(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseAddLoveCrystalValue(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write32(p, 0); //LoveCrystalVauleInc
	Write32(p, 0); //LoveCrystalValue
	for (size_t i = 0; i < n; i++)
	{ //Award
		BYTE* pAward = p;
		Write16(pAward, 0); //len

		{ //Condition
			BYTE* pCondition = pAward;
			Write16(pCondition, 0); //len

			Write32(pCondition, 0); //LoveCrystalValue
			Write32(pCondition, 0); //FirstLoveBabyLev
			Write32(pCondition, 0); //SecondLoveBabyLev

			len = pCondition - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write8(pAward, 0); //RaiseTicket
		Write16(pAward, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAward;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write8(pAward, 0); //Status

		len = pAward - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //LeftLoveBabyRaiseTicket
	Write8(p, 0); //CanAddValue

	len = p - buf;
	SendToClient(Client, 24785, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetQiXiZhanBuCfg(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetQiXiZhanBuCfg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	{ //MatchMakerOpenCfg
		BYTE* pMatchMakerOpenCfg = p;
		Write16(pMatchMakerOpenCfg, 0); //len

		Write32(pMatchMakerOpenCfg, 0); //OpenDate
		Write32(pMatchMakerOpenCfg, 0); //CloseDate
		Write32(pMatchMakerOpenCfg, 0); //OpenTime
		Write32(pMatchMakerOpenCfg, 0); //CloseTime
		Write32(pMatchMakerOpenCfg, 0); //CurrentOpenActivityID

		len = pMatchMakerOpenCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //AwardToClient
		BYTE* pAwardToClient = p;
		Write16(pAwardToClient, 0); //len

		Write32(pAwardToClient, 0); //Exp
		Write32(pAwardToClient, 0); //Money
		Write32(pAwardToClient, 0); //SuperMoney
		Write16(pAwardToClient, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAwardToClient;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAwardToClient;
			Set16(pAwardToClient, (WORD)len);
			pAwardToClient += len;
		}
		Write32(pAwardToClient, 0); //Coupons
		Write32(pAwardToClient, 0); //GuildPoint
		Write32(pAwardToClient, 0); //LuckMoney
		Write8(pAwardToClient, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAwardToClient;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAwardToClient;
			Set16(pAwardToClient, (WORD)len);
			pAwardToClient += len;
		}
		Write32(pAwardToClient, 0); //SpeedCoin

		len = pAwardToClient - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //ActivityID

	len = p - buf;
	SendToClient(Client, 24797, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetArrestGameCfg(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetArrestGameCfg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write32(p, 0); //EscapeNum
	Write32(p, 0); //ArrestNum
	{ //ArrestOpenCfg
		BYTE* pArrestOpenCfg = p;
		Write16(pArrestOpenCfg, 0); //len

		Write32(pArrestOpenCfg, 0); //OpenDate
		Write32(pArrestOpenCfg, 0); //OpenTime
		Write32(pArrestOpenCfg, 0); //CloseDate
		Write32(pArrestOpenCfg, 0); //CloseTime

		len = pArrestOpenCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //MapNum
	Write32(p, 0); //MapList[]
	Write32(p, 0); //CurrentScore
	Write32(p, 0); //ReportFrequence

	len = p - buf;
	SendToClient(Client, 24805, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestArrestReportRank(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT Num = Read32(p);
	UINT[] Uin[] = Read32(p);

}

void RequestArrestQuitStatus(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR ReqType = Read8(p);

}

void NotifyPlayerRaceOver(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //CurrentPlayerNum
	for (size_t i = 0; i < n; i++)
	{ //RaceScore
		BYTE* pRaceScore = p;
		Write16(pRaceScore, 0); //len

		WriteUn(pRaceScore, 0); //Uin
		WriteUn(pRaceScore, 0); //FinTime
		Write32(pRaceScore, 0); //TP
		Write32(pRaceScore, 0); //MoneyInc
		Write32(pRaceScore, 0); //TotalMoney
		Write32(pRaceScore, 0); //ExpInc
		Write32(pRaceScore, 0); //TotalExp
		Write8(pRaceScore, 0); //AwardNum
		Write32(pRaceScore, 0); //SpecialAward[]
		Write32(pRaceScore, 0); //TeamWorkExpInc
		Write32(pRaceScore, 0); //PropPoint
		Write32(pRaceScore, 0); //PropPointAddExp
		Write32(pRaceScore, 0); //LuckyMatchPointInc
		Write32(pRaceScore, 0); //LuckyMatchPointTotal
		Write32(pRaceScore, 0); //LuckyMatchScoreInc
		Write32(pRaceScore, 0); //LuckyMatchScoreTotal
		Write32(pRaceScore, 0); //LuckMoneyInc
		Write32(pRaceScore, 0); //LuckMoneyTotal
		Write32(pRaceScore, 0); //GuildScoreInc
		Write8(pRaceScore, 0); //CrazyPropAchieveNum
		Write32(pRaceScore, 0); //CrazyPropAchieve[]
		WriteU(pRaceScore, 0); //IncWlMatchScore
		WriteU(pRaceScore, 0); //IncWlDegree
		WriteU(pRaceScore, 0); //IncItemNumByWl
		for (size_t i = 0; i < n; i++)
		{ //IncItemInfoByWl
			BYTE* pIncItemInfoByWl = pRaceScore;
			Write16(pIncItemInfoByWl, 0); //len

			Write16(pIncItemInfoByWl, 0); //GenderItemNum
			Write32(pIncItemInfoByWl, 0); //ItemID[]
			Write16(pIncItemInfoByWl, 0); //ItemNum
			Write32(pIncItemInfoByWl, 0); //AvailPeriod
			Write16(pIncItemInfoByWl, 0); //BroadcastType
			Write16(pIncItemInfoByWl, 0); //BroadcastFlag
			Write8(pIncItemInfoByWl, 0); //ShowPriority
			Write8(pIncItemInfoByWl, 0); //ItemType
			Write8(pIncItemInfoByWl, 0); //IgnoreItem
			Write32(pIncItemInfoByWl, 0); //LimitPara
			Write8(pIncItemInfoByWl, 0); //SpecialAwardCtrlType
			Write8(pIncItemInfoByWl, 0); //AwardCtrlType

			len = pIncItemInfoByWl - pRaceScore;
			Set16(pRaceScore, (WORD)len);
			pRaceScore += len;
		}
		Write32(pRaceScore, 0); //WlMutiplyCard
		Write32(pRaceScore, 0); //SkateCoinInc
		Write32(pRaceScore, 0); //SkateCoinTotal
		Write32(pRaceScore, 0); //SkateCoinHistoryTotal
		Write32(pRaceScore, 0); //TotalCoupons
		Write8(pRaceScore, 0); //ChallengeCheer
		for (size_t i = 0; i < n; i++)
		{ //ChallengeCheer
			BYTE* pChallengeCheer = pRaceScore;
			Write16(pChallengeCheer, 0); //len

			Write16(pChallengeCheer, 0); //GuildCheerValueInc
			Write16(pChallengeCheer, 0); //CheerValueInc
			Write32(pChallengeCheer, 0); //TotalCheerValue
			Write16(pChallengeCheer, 0); //CouponsInc
			Write32(pChallengeCheer, 0); //GuildScoreInc
			Write32(pChallengeCheer, 0); //SuperMoneyInc

			len = pChallengeCheer - pRaceScore;
			Set16(pRaceScore, (WORD)len);
			pRaceScore += len;
		}
		Write32(pRaceScore, 0); //LoveValue
		Write32(pRaceScore, 0); //SkateCoinEmperorBonus
		Write32(pRaceScore, 0); //DetailRecordID
		Write8(pRaceScore, 0); //HasGangsterResult
		for (size_t i = 0; i < n; i++)
		{ //GangsterResult
			BYTE* pGangsterResult = pRaceScore;
			Write16(pGangsterResult, 0); //len

			Write8(pGangsterResult, 0); //AbnormalFalg
			Write32(pGangsterResult, 0); //GangsterBlood
			Write32(pGangsterResult, 0); //GangsterTotalScore
			Write32(pGangsterResult, 0); //GangsterIndentity
			Write32(pGangsterResult, 0); //FragmentInc
			Write32(pGangsterResult, 0); //KillTimes
			Write32(pGangsterResult, 0); //DeadTimes
			Write8(pGangsterResult, 0); //IsMultiple
			Write8(pGangsterResult, 0); //IsLimited
			Write32(pGangsterResult, 0); //ScoreInc
			Write32(pGangsterResult, 0); //TotalScore
			Write32(pGangsterResult, 0); //LoseStreakCount

			len = pGangsterResult - pRaceScore;
			Set16(pRaceScore, (WORD)len);
			pRaceScore += len;
		}
		{ //EquippedActiveKartInfo
			BYTE* pEquippedActiveKartInfo = pRaceScore;
			Write16(pEquippedActiveKartInfo, 0); //len

			Write8(pEquippedActiveKartInfo, 0); //HaveActiveInfo
			Write32(pEquippedActiveKartInfo, 0); //KartID
			Write32(pEquippedActiveKartInfo, 0); //ActiveLevel

			len = pEquippedActiveKartInfo - pRaceScore;
			Set16(pRaceScore, (WORD)len);
			pRaceScore += len;
		}
		Write8(pRaceScore, 0); //HasWeRelayRaceOverInfo
		for (size_t i = 0; i < n; i++)
		{ //WeRelayRaceOverInfo
			BYTE* pWeRelayRaceOverInfo = pRaceScore;
			Write16(pWeRelayRaceOverInfo, 0); //len

			{ //SumStageInfo
				BYTE* pSumStageInfo = pWeRelayRaceOverInfo;
				Write16(pSumStageInfo, 0); //len

				Write32(pSumStageInfo, 0); //Score
				Write32(pSumStageInfo, 0); //ScoreInc
				Write32(pSumStageInfo, 0); //Supermoney
				Write32(pSumStageInfo, 0); //Coupons
				Write32(pSumStageInfo, 0); //SuperN2O

				len = pSumStageInfo - pWeRelayRaceOverInfo;
				Set16(pWeRelayRaceOverInfo, (WORD)len);
				pWeRelayRaceOverInfo += len;
			}
			Write32(pWeRelayRaceOverInfo, 0); //WeRelayScoreInc
			Write32(pWeRelayRaceOverInfo, 0); //WeRelayScoreNow
			Write32(pWeRelayRaceOverInfo, 0); //WeRelayScoreLevelNow
			Write32(pWeRelayRaceOverInfo, 0); //WeRelayScoreLevelLimit
			Write32(pWeRelayRaceOverInfo, 0); //SupermoneyLimit
			Write32(pWeRelayRaceOverInfo, 0); //SupermoneyNow
			Write32(pWeRelayRaceOverInfo, 0); //CouponsLimit
			Write32(pWeRelayRaceOverInfo, 0); //CouponsNow
			Write32(pWeRelayRaceOverInfo, 0); //LuckAwardMul

			len = pWeRelayRaceOverInfo - pRaceScore;
			Set16(pRaceScore, (WORD)len);
			pRaceScore += len;
		}
		Write8(pRaceScore, 0); //HaveSkatePropRaceInfo
		for (size_t i = 0; i < n; i++)
		{ //SkatePropRaceInfo
			BYTE* pSkatePropRaceInfo = pRaceScore;
			Write16(pSkatePropRaceInfo, 0); //len

			Write32(pSkatePropRaceInfo, 0); //ScoreAdd
			Write32(pSkatePropRaceInfo, 0); //ScoreTotal

			len = pSkatePropRaceInfo - pRaceScore;
			Set16(pRaceScore, (WORD)len);
			pRaceScore += len;
		}
		Write8(pRaceScore, 0); //IsNewBox
		Write8(pRaceScore, 0); //HaveArrestScoreInfo
		for (size_t i = 0; i < n; i++)
		{ //ArrestScoreInfo
			BYTE* pArrestScoreInfo = pRaceScore;
			Write16(pArrestScoreInfo, 0); //len

			Write32(pArrestScoreInfo, 0); //ScoreInGame
			Write32(pArrestScoreInfo, 0); //ScoreByGold
			Write32(pArrestScoreInfo, 0); //GoldMoney
			Write32(pArrestScoreInfo, 0); //ArrestNum
			Write8(pArrestScoreInfo, 0); //ResultType
			Write8(pArrestScoreInfo, 0); //TeamID

			len = pArrestScoreInfo - pRaceScore;
			Set16(pRaceScore, (WORD)len);
			pRaceScore += len;
		}
		Write8(pRaceScore, 0); //HasRankedMatchInfo
		for (size_t i = 0; i < n; i++)
		{ //RankedMatchScore
			BYTE* pRankedMatchScore = pRaceScore;
			Write16(pRankedMatchScore, 0); //len

			{ //RankedMatchLastGradeInfo
				BYTE* pRankedMatchLastGradeInfo = pRankedMatchScore;
				Write16(pRankedMatchLastGradeInfo, 0); //len

				Write32(pRankedMatchLastGradeInfo, 0); //GradeLevel
				Write32(pRankedMatchLastGradeInfo, 0); //ChildLevel
				Write32(pRankedMatchLastGradeInfo, 0); //GradeScore
				Write32(pRankedMatchLastGradeInfo, 0); //MaxGradeScore
				Write32(pRankedMatchLastGradeInfo, 0); //TotalScore

				len = pRankedMatchLastGradeInfo - pRankedMatchScore;
				Set16(pRankedMatchScore, (WORD)len);
				pRankedMatchScore += len;
			}
			{ //RankedMatchGradeInfo
				BYTE* pRankedMatchGradeInfo = pRankedMatchScore;
				Write16(pRankedMatchGradeInfo, 0); //len

				Write32(pRankedMatchGradeInfo, 0); //GradeLevel
				Write32(pRankedMatchGradeInfo, 0); //ChildLevel
				Write32(pRankedMatchGradeInfo, 0); //GradeScore
				Write32(pRankedMatchGradeInfo, 0); //MaxGradeScore
				Write32(pRankedMatchGradeInfo, 0); //TotalScore

				len = pRankedMatchGradeInfo - pRankedMatchScore;
				Set16(pRankedMatchScore, (WORD)len);
				pRankedMatchScore += len;
			}
			{ //RankedMatchPromoInfo
				BYTE* pRankedMatchPromoInfo = pRankedMatchScore;
				Write16(pRankedMatchPromoInfo, 0); //len

				Write8(pRankedMatchPromoInfo, 0); //PromotionMatch
				Write32(pRankedMatchPromoInfo, 0); //PromotionRoundNums
				Write32(pRankedMatchPromoInfo, 0); //PromotionSuccessRoundNums
				Write32(pRankedMatchPromoInfo, 0); //PromotionAlreadySuccessRoundNums
				Write32(pRankedMatchPromoInfo, 0); //PromotionRecordTag
				Write32(pRankedMatchPromoInfo, 0); //CurrentPromotionRoundNums
				Write32(pRankedMatchPromoInfo, 0); //PromoFailedMinusScore
				Write32(pRankedMatchPromoInfo, 0); //PromoSuccAddScore
				Write8(pRankedMatchPromoInfo, 0); //PromoDirectly
				Write8(pRankedMatchPromoInfo, 0); //GradeNoNeedPromo
				Write8(pRankedMatchPromoInfo, 0); //RankedMemoryNoNeedPromo
				Write8(pRankedMatchPromoInfo, 0); //PromotionExtraScore
				Write8(pRankedMatchPromoInfo, 0); //PromtRaceFailedDefendFlag

				len = pRankedMatchPromoInfo - pRankedMatchScore;
				Set16(pRankedMatchScore, (WORD)len);
				pRankedMatchScore += len;
			}
			{ //RankedMatchComputeInfo
				BYTE* pRankedMatchComputeInfo = pRankedMatchScore;
				Write16(pRankedMatchComputeInfo, 0); //len

				Write32(pRankedMatchComputeInfo, 0); //RankAddScore
				Write32(pRankedMatchComputeInfo, 0); //FinishAddScore
				Write32(pRankedMatchComputeInfo, 0); //KillAllAddScore
				Write32(pRankedMatchComputeInfo, 0); //GradeProtectAddScore
				Write32(pRankedMatchComputeInfo, 0); //GradeAddScore
				Write32(pRankedMatchComputeInfo, 0); //ProtectAddScoreGradeLimit
				Write32(pRankedMatchComputeInfo, 0); //DailyExtraAddScore
				Write32(pRankedMatchComputeInfo, 0); //AwardRankCoinNums
				Write32(pRankedMatchComputeInfo, 0); //WeeklyAwardRankCoinNums
				Write32(pRankedMatchComputeInfo, 0); //WeeklyAwardRankCoinLimit
				Write32(pRankedMatchComputeInfo, 0); //AwardRankCoinNumsByRank
				Write32(pRankedMatchComputeInfo, 0); //AwardRankCoinNumsByFinish
				Write32(pRankedMatchComputeInfo, 0); //BanMapExtraAddScore
				Write32(pRankedMatchComputeInfo, 0); //TeamRankAddScore
				Write32(pRankedMatchComputeInfo, 0); //AwardRankCoinNumsByTeamRank
				Write32(pRankedMatchComputeInfo, 0); //AwardRankCoinNumsByTask
				Write8(pRankedMatchComputeInfo, 0); //UseDoubleScoreItem
				Write8(pRankedMatchComputeInfo, 0); //UserNotDecreaseItem
				Write8(pRankedMatchComputeInfo, 0); //FinishSeasonChallengeTaskOrNot
				Write32(pRankedMatchComputeInfo, 0); //FinishedSeasonChallengeTaskIndex
				Write32(pRankedMatchComputeInfo, 0); //SeasonChallengeTaskProtectAddScore
				Write8(pRankedMatchComputeInfo, 0); //NotDecreaseReason
				Write8(pRankedMatchComputeInfo, 0); //HaveSpeedKingInfo
				for (size_t i = 0; i < n; i++)
				{ //RankedMatchSpeedKingInfos
					BYTE* pRankedMatchSpeedKingInfos = pRankedMatchComputeInfo;
					Write16(pRankedMatchSpeedKingInfos, 0); //len

					Write8(pRankedMatchSpeedKingInfos, 0); //WinOrNot
					WriteUn(pRankedMatchSpeedKingInfos, 0); //UiAwardSpeedKingEnergyItemNums
					Write32(pRankedMatchSpeedKingInfos, 0); //WeeklyAwardSpeedKingEnergyItemNums
					Write32(pRankedMatchSpeedKingInfos, 0); //WeeklyAwardSpeedKingEnergyItemLimitNums

					len = pRankedMatchSpeedKingInfos - pRankedMatchComputeInfo;
					Set16(pRankedMatchComputeInfo, (WORD)len);
					pRankedMatchComputeInfo += len;
				}
				Write8(pRankedMatchComputeInfo, 0); //HaveExtraComputeInfo
				for (size_t i = 0; i < n; i++)
				{ //RankedMatchExtracComputeInfos
					BYTE* pRankedMatchExtracComputeInfos = pRankedMatchComputeInfo;
					Write16(pRankedMatchExtracComputeInfos, 0); //len

					Write32(pRankedMatchExtracComputeInfos, 0); //ExtraComputeType
					Write32(pRankedMatchExtracComputeInfos, 0); //AwardItemNums
					Write32(pRankedMatchExtracComputeInfos, 0); //WeekylyAwardItemNums
					Write32(pRankedMatchExtracComputeInfos, 0); //WeeklyAwardItemLimitNums
					Write8(pRankedMatchExtracComputeInfos, 0); //HaveGameLogicTask
					for (size_t i = 0; i < n; i++)
					{ //RakedMatchGamelogicTaskInfo
						BYTE* pRakedMatchGamelogicTaskInfo = pRankedMatchExtracComputeInfos;
						Write16(pRakedMatchGamelogicTaskInfo, 0); //len

						Write32(pRakedMatchGamelogicTaskInfo, 0); //GameLogicTaskType
						Write32(pRakedMatchGamelogicTaskInfo, 0); //TaskFinishCondValue
						Write8(pRakedMatchGamelogicTaskInfo, 0); //JudgeRule
						Write32(pRakedMatchGamelogicTaskInfo, 0); //TaskAddGradeScore
						Write8(pRakedMatchGamelogicTaskInfo, 0); //GradeScoreRangeNum
						Write32(pRakedMatchGamelogicTaskInfo, 0); //GradeScoreRange[]
						Write8(pRakedMatchGamelogicTaskInfo, 0); //TaskFinishCondValueNum
						Write32(pRakedMatchGamelogicTaskInfo, 0); //TaskFinishCondValueRange[]
						Write8(pRakedMatchGamelogicTaskInfo, 0); //TaskAddGradeScoreNum
						Write32(pRakedMatchGamelogicTaskInfo, 0); //TaskAddGradeScoreRange[]
						Write8(pRakedMatchGamelogicTaskInfo, 0); //FailedAddGradeScoreNum
						Write32(pRakedMatchGamelogicTaskInfo, 0); //FailedAddGradeScoreRange[]
						Write8(pRakedMatchGamelogicTaskInfo, 0); //FinishTask
						Write32(pRakedMatchGamelogicTaskInfo, 0); //ExtraFinishTaskAddScore

						len = pRakedMatchGamelogicTaskInfo - pRankedMatchExtracComputeInfos;
						Set16(pRankedMatchExtracComputeInfos, (WORD)len);
						pRankedMatchExtracComputeInfos += len;
					}
					Write8(pRankedMatchExtracComputeInfos, 0); //Win
					Write8(pRankedMatchExtracComputeInfos, 0); //NormalPlayerOrNot
					Write8(pRankedMatchExtracComputeInfos, 0); //LeadRolePlayerNums

					len = pRankedMatchExtracComputeInfos - pRankedMatchComputeInfo;
					Set16(pRankedMatchComputeInfo, (WORD)len);
					pRankedMatchComputeInfo += len;
				}
				Write32(pRankedMatchComputeInfo, 0); //SeasonNewMapAddScore
				Write8(pRankedMatchComputeInfo, 0); //SeasonChallengeBaseScore
				Write8(pRankedMatchComputeInfo, 0); //SeasonChallengeContiWinExtrScore
				Write8(pRankedMatchComputeInfo, 0); //SeasonChallengeRegretDefeatScore
				Write8(pRankedMatchComputeInfo, 0); //SeasonChallengeRespectableOpponentScore
				Write8(pRankedMatchComputeInfo, 0); //SpeedGodChallengeAddScore
				Write8(pRankedMatchComputeInfo, 0); //SpeedGodChallengeAddCoin
				Write8(pRankedMatchComputeInfo, 0); //SpeedFlashAddFactoryCoin
				Write8(pRankedMatchComputeInfo, 0); //PinnacleBattleAddScore
				Write8(pRankedMatchComputeInfo, 0); //PromotionExtraScore
				Write32(pRankedMatchComputeInfo, 0); //SavedExtraScore
				Write32(pRankedMatchComputeInfo, 0); //DailyExtraTaskID
				Write8(pRankedMatchComputeInfo, 0); //SuitActiveAddScore
				Write8(pRankedMatchComputeInfo, 0); //SpeedGodChallengeType
				Write8(pRankedMatchComputeInfo, 0); //SuitActiveEffectID

				len = pRankedMatchComputeInfo - pRankedMatchScore;
				Set16(pRankedMatchScore, (WORD)len);
				pRankedMatchScore += len;
			}
			Write8(pRankedMatchScore, 0); //HavePromotionExtraScoreInfo
			for (size_t i = 0; i < n; i++)
			{ //PromotionExtraScoreInfo
				BYTE* pPromotionExtraScoreInfo = pRankedMatchScore;
				Write16(pPromotionExtraScoreInfo, 0); //len

				Write8(pPromotionExtraScoreInfo, 0); //PromotionMatch
				Write32(pPromotionExtraScoreInfo, 0); //PromotionRoundNums
				Write32(pPromotionExtraScoreInfo, 0); //PromotionSuccessRoundNums
				Write32(pPromotionExtraScoreInfo, 0); //PromotionAlreadySuccessRoundNums
				Write32(pPromotionExtraScoreInfo, 0); //PromotionRecordTag
				Write32(pPromotionExtraScoreInfo, 0); //CurrentPromotionRoundNums
				Write32(pPromotionExtraScoreInfo, 0); //PromoFailedMinusScore
				Write32(pPromotionExtraScoreInfo, 0); //PromoSuccAddScore
				Write8(pPromotionExtraScoreInfo, 0); //PromoDirectly
				Write8(pPromotionExtraScoreInfo, 0); //GradeNoNeedPromo
				Write8(pPromotionExtraScoreInfo, 0); //RankedMemoryNoNeedPromo
				Write8(pPromotionExtraScoreInfo, 0); //PromotionExtraScore
				Write8(pPromotionExtraScoreInfo, 0); //PromtRaceFailedDefendFlag

				len = pPromotionExtraScoreInfo - pRankedMatchScore;
				Set16(pRankedMatchScore, (WORD)len);
				pRankedMatchScore += len;
			}

			len = pRankedMatchScore - pRaceScore;
			Set16(pRaceScore, (WORD)len);
			pRaceScore += len;
		}
		Write8(pRaceScore, 0); //HaveCrazyChaseScoreInfo
		for (size_t i = 0; i < n; i++)
		{ //CrazyChaseScoreInfo
			BYTE* pCrazyChaseScoreInfo = pRaceScore;
			Write16(pCrazyChaseScoreInfo, 0); //len

			Write32(pCrazyChaseScoreInfo, 0); //Uin
			Write16(pCrazyChaseScoreInfo, 0); //Role
			Write32(pCrazyChaseScoreInfo, 0); //Score
			Write8(pCrazyChaseScoreInfo, 0); //ScoreNum
			for (size_t i = 0; i < n; i++)
			{ //ScoreInfo
				BYTE* pScoreInfo = pCrazyChaseScoreInfo;
				Write16(pScoreInfo, 0); //len

				Write8(pScoreInfo, 0); //ScoreType
				Write32(pScoreInfo, 0); //Value
				Write32(pScoreInfo, 0); //Score

				len = pScoreInfo - pCrazyChaseScoreInfo;
				Set16(pCrazyChaseScoreInfo, (WORD)len);
				pCrazyChaseScoreInfo += len;
			}

			len = pCrazyChaseScoreInfo - pRaceScore;
			Set16(pRaceScore, (WORD)len);
			pRaceScore += len;
		}
		Write8(pRaceScore, 0); //TeamID
		Write8(pRaceScore, 0); //HasRankedMatchArenaInfo
		for (size_t i = 0; i < n; i++)
		{ //RankedMatchArenaScore
			BYTE* pRankedMatchArenaScore = pRaceScore;
			Write16(pRankedMatchArenaScore, 0); //len

			Write8(pRankedMatchArenaScore, 0); //Win
			Write8(pRankedMatchArenaScore, 0); //Rank
			Write8(pRankedMatchArenaScore, 0); //TaskScore
			Write32(pRankedMatchArenaScore, 0); //AwardRankCoinNums
			{ //RankedMatchLastGradeInfo
				BYTE* pRankedMatchLastGradeInfo = pRankedMatchArenaScore;
				Write16(pRankedMatchLastGradeInfo, 0); //len

				Write32(pRankedMatchLastGradeInfo, 0); //GradeLevel
				Write32(pRankedMatchLastGradeInfo, 0); //ChildLevel
				Write32(pRankedMatchLastGradeInfo, 0); //GradeScore
				Write32(pRankedMatchLastGradeInfo, 0); //MaxGradeScore
				Write32(pRankedMatchLastGradeInfo, 0); //TotalScore

				len = pRankedMatchLastGradeInfo - pRankedMatchArenaScore;
				Set16(pRankedMatchArenaScore, (WORD)len);
				pRankedMatchArenaScore += len;
			}
			{ //RankedMatchGradeInfo
				BYTE* pRankedMatchGradeInfo = pRankedMatchArenaScore;
				Write16(pRankedMatchGradeInfo, 0); //len

				Write32(pRankedMatchGradeInfo, 0); //GradeLevel
				Write32(pRankedMatchGradeInfo, 0); //ChildLevel
				Write32(pRankedMatchGradeInfo, 0); //GradeScore
				Write32(pRankedMatchGradeInfo, 0); //MaxGradeScore
				Write32(pRankedMatchGradeInfo, 0); //TotalScore

				len = pRankedMatchGradeInfo - pRankedMatchArenaScore;
				Set16(pRankedMatchArenaScore, (WORD)len);
				pRankedMatchArenaScore += len;
			}
			{ //RankedMatchPromoInfo
				BYTE* pRankedMatchPromoInfo = pRankedMatchArenaScore;
				Write16(pRankedMatchPromoInfo, 0); //len

				Write8(pRankedMatchPromoInfo, 0); //PromotionMatch
				Write32(pRankedMatchPromoInfo, 0); //PromotionRoundNums
				Write32(pRankedMatchPromoInfo, 0); //PromotionSuccessRoundNums
				Write32(pRankedMatchPromoInfo, 0); //PromotionAlreadySuccessRoundNums
				Write32(pRankedMatchPromoInfo, 0); //PromotionRecordTag
				Write32(pRankedMatchPromoInfo, 0); //CurrentPromotionRoundNums
				Write32(pRankedMatchPromoInfo, 0); //PromoFailedMinusScore
				Write32(pRankedMatchPromoInfo, 0); //PromoSuccAddScore
				Write8(pRankedMatchPromoInfo, 0); //PromoDirectly
				Write8(pRankedMatchPromoInfo, 0); //GradeNoNeedPromo
				Write8(pRankedMatchPromoInfo, 0); //RankedMemoryNoNeedPromo
				Write8(pRankedMatchPromoInfo, 0); //PromotionExtraScore
				Write8(pRankedMatchPromoInfo, 0); //PromtRaceFailedDefendFlag

				len = pRankedMatchPromoInfo - pRankedMatchArenaScore;
				Set16(pRankedMatchArenaScore, (WORD)len);
				pRankedMatchArenaScore += len;
			}
			Write8(pRankedMatchArenaScore, 0); //WinNum
			Write16(pRankedMatchArenaScore, 0); //CurrentScore
			Write8(pRankedMatchArenaScore, 0); //FinishScore
			Write16(pRankedMatchArenaScore, 0); //AwardRankScore
			Write8(pRankedMatchArenaScore, 0); //AwardRankCoinNumsByRank
			Write8(pRankedMatchArenaScore, 0); //AwardRankCoinNumsByFinish
			Write32(pRankedMatchArenaScore, 0); //WeeklyAwardRankCoinNums
			Write32(pRankedMatchArenaScore, 0); //WeeklyAwardRankCoinLimit
			Write32(pRankedMatchArenaScore, 0); //AwardRankCoinNumsByTask

			len = pRankedMatchArenaScore - pRaceScore;
			Set16(pRaceScore, (WORD)len);
			pRaceScore += len;
		}
		Write32(pRaceScore, 0); //DistanceToEnd
		Write8(pRaceScore, 0); //ShortDistancWinPoint
		Write8(pRaceScore, 0); //Status
		Write8(pRaceScore, 0); //HaveRankedMatchSpeedKingInfo
		for (size_t i = 0; i < n; i++)
		{ //RankedMatchSpeedKingScoreInfo
			BYTE* pRankedMatchSpeedKingScoreInfo = pRaceScore;
			Write16(pRankedMatchSpeedKingScoreInfo, 0); //len

			Write32(pRankedMatchSpeedKingScoreInfo, 0); //AwardSpeedKingEnergyNums
			Write8(pRankedMatchSpeedKingScoreInfo, 0); //Win

			len = pRankedMatchSpeedKingScoreInfo - pRaceScore;
			Set16(pRaceScore, (WORD)len);
			pRaceScore += len;
		}
		Write8(pRaceScore, 0); //ProfessionLicenseAwardNum
		for (size_t i = 0; i < n; i++)
		{ //ProfessionLicenseAward
			BYTE* pProfessionLicenseAward = pRaceScore;
			Write16(pProfessionLicenseAward, 0); //len

			Write32(pProfessionLicenseAward, 0); //PointInc
			Write32(pProfessionLicenseAward, 0); //PointLevelCur
			Write32(pProfessionLicenseAward, 0); //PointLevelMax
			Write16(pProfessionLicenseAward, 0); //IncResultID
			Write8(pProfessionLicenseAward, 0); //ShowQiPao
			Write32(pProfessionLicenseAward, 0); //PointWeekTotal
			Write32(pProfessionLicenseAward, 0); //PointWeekCur
			{ //ProfessionLicenseInfo
				BYTE* pProfessionLicenseInfo = pProfessionLicenseAward;
				Write16(pProfessionLicenseInfo, 0); //len

				Write8(pProfessionLicenseInfo, 0); //BigLevel
				Write8(pProfessionLicenseInfo, 0); //SmallLevel

				len = pProfessionLicenseInfo - pProfessionLicenseAward;
				Set16(pProfessionLicenseAward, (WORD)len);
				pProfessionLicenseAward += len;
			}
			Write8(pProfessionLicenseAward, 0); //SwitchShowExtraAddPoint
			Write16(pProfessionLicenseAward, 0); //BeginOffsetSeconds

			len = pProfessionLicenseAward - pRaceScore;
			Set16(pRaceScore, (WORD)len);
			pRaceScore += len;
		}
		{ //RaceResult
			BYTE* pRaceResult = pRaceScore;
			Write16(pRaceResult, 0); //len

			Write8(pRaceResult, 0); //PLExpPowerValid
			Write8(pRaceResult, 0); //PLHonorPowerValid
			Write8(pRaceResult, 0); //ExpMultiNum
			Write8(pRaceResult, 0); //HonorMultiNum

			len = pRaceResult - pRaceScore;
			Set16(pRaceScore, (WORD)len);
			pRaceScore += len;
		}
		Write8(pRaceScore, 0); //HaveRankedMatchExtraInfo
		for (size_t i = 0; i < n; i++)
		{ //RankedMatchExtraScoreInfo
			BYTE* pRankedMatchExtraScoreInfo = pRaceScore;
			Write16(pRankedMatchExtraScoreInfo, 0); //len

			Write32(pRankedMatchExtraScoreInfo, 0); //AwardItemNums
			Write8(pRankedMatchExtraScoreInfo, 0); //Win

			len = pRankedMatchExtraScoreInfo - pRaceScore;
			Set16(pRaceScore, (WORD)len);
			pRaceScore += len;
		}
		Write8(pRaceScore, 0); //HasYuLeJiaNianHuaComputeData
		for (size_t i = 0; i < n; i++)
		{ //YuLeJiaNianHuaComputeData
			BYTE* pYuLeJiaNianHuaComputeData = pRaceScore;
			Write16(pYuLeJiaNianHuaComputeData, 0); //len

			Write32(pYuLeJiaNianHuaComputeData, 0); //AwardScore
			Write8(pYuLeJiaNianHuaComputeData, 0); //Recommend
			Write8(pYuLeJiaNianHuaComputeData, 0); //ScoreDouble
			Write8(pYuLeJiaNianHuaComputeData, 0); //GuaJi

			len = pYuLeJiaNianHuaComputeData - pRaceScore;
			Set16(pRaceScore, (WORD)len);
			pRaceScore += len;
		}

		len = pRaceScore - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ArresterNum
	for (size_t i = 0; i < n; i++)
	{ //ArrestNPCResultInfo
		BYTE* pArrestNPCResultInfo = p;
		Write16(pArrestNPCResultInfo, 0); //len

		Write32(pArrestNPCResultInfo, 0); //Uin
		Write32(pArrestNPCResultInfo, 0); //ArrestCnt
		WriteString(pArrestNPCResultInfo, 0); //NickName[]

		len = pArrestNPCResultInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24810, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestTwistMachineShowInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR ReqType = Read8(p);

}

void ResponseTwistMachineShowInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //MapIndexNums
	for (size_t i = 0; i < n; i++)
	{ //TwistMachAwardInfos
		BYTE* pTwistMachAwardInfos = p;
		Write16(pTwistMachAwardInfos, 0); //len

		Write8(pTwistMachAwardInfos, 0); //AwardIndex
		Write16(pTwistMachAwardInfos, 0); //AwardType
		Write16(pTwistMachAwardInfos, 0); //EventAwardID
		Write8(pTwistMachAwardInfos, 0); //BehaviorEventHasFinished
		Write8(pTwistMachAwardInfos, 0); //GetEventAward
		{ //AwardItemInfo
			BYTE* pAwardItemInfo = pTwistMachAwardInfos;
			Write16(pAwardItemInfo, 0); //len

			Write32(pAwardItemInfo, 0); //Exp
			Write32(pAwardItemInfo, 0); //Money
			Write32(pAwardItemInfo, 0); //SuperMoney
			Write16(pAwardItemInfo, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAwardItemInfo;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //Coupons
			Write32(pAwardItemInfo, 0); //GuildPoint
			Write32(pAwardItemInfo, 0); //LuckMoney
			Write8(pAwardItemInfo, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAwardItemInfo;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //SpeedCoin

			len = pAwardItemInfo - pTwistMachAwardInfos;
			Set16(pTwistMachAwardInfos, (WORD)len);
			pTwistMachAwardInfos += len;
		}
		Write8(pTwistMachAwardInfos, 0); //LuckyEventAward
		Write8(pTwistMachAwardInfos, 0); //FiveTwistMustAward

		len = pTwistMachAwardInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //BufferTag
	Write16(p, 0); //TwistChanceGeneInfoNums
	for (size_t i = 0; i < n; i++)
	{ //TwistChanceGeneInfos
		BYTE* pTwistChanceGeneInfos = p;
		Write16(pTwistChanceGeneInfos, 0); //len

		Write8(pTwistChanceGeneInfos, 0); //TaskID
		Write32(pTwistChanceGeneInfos, 0); //AlreadyAwardNums
		Write32(pTwistChanceGeneInfos, 0); //AwardMoveNums
		Write32(pTwistChanceGeneInfos, 0); //TaskFinishNums
		Write32(pTwistChanceGeneInfos, 0); //TaskNeedValue

		len = pTwistChanceGeneInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //TwistMachineOpenDate
	Write32(p, 0); //TwistMachineCloseDate
	Write32(p, 0); //TwistMachineOpenTime
	Write32(p, 0); //TwistMachineCloseTime
	Write32(p, 0); //CurrentTwistNums
	Write8(p, 0); //LuckEvent
	Write16(p, 0); //AwardGoldCoinInfoNums
	for (size_t i = 0; i < n; i++)
	{ //AwardGoldCoinInfos
		BYTE* pAwardGoldCoinInfos = p;
		Write16(pAwardGoldCoinInfos, 0); //len

		Write16(pAwardGoldCoinInfos, 0); //AwardType
		Write16(pAwardGoldCoinInfos, 0); //AwardGoldCoinNums

		len = pAwardGoldCoinInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //HistoryAwardNums
	Write8(p, 0); //AwardInfos[]
	Write8(p, 0); //DoubleAward

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestTwistMachineInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR TwistType = Read8(p);

}

void ResponseTwistMachineInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write8(p, 0); //UpdateAwardInfo
	Write32(p, 0); //FinalAwardMedalNums
	Write16(p, 0); //AwardInfoNums
	for (size_t i = 0; i < n; i++)
	{ //TwistMachineAwardInfos
		BYTE* pTwistMachineAwardInfos = p;
		Write16(pTwistMachineAwardInfos, 0); //len

		Write8(pTwistMachineAwardInfos, 0); //AwardIndex
		Write16(pTwistMachineAwardInfos, 0); //AwardType
		Write16(pTwistMachineAwardInfos, 0); //EventAwardID
		Write8(pTwistMachineAwardInfos, 0); //BehaviorEventHasFinished
		Write8(pTwistMachineAwardInfos, 0); //GetEventAward
		{ //AwardItemInfo
			BYTE* pAwardItemInfo = pTwistMachineAwardInfos;
			Write16(pAwardItemInfo, 0); //len

			Write32(pAwardItemInfo, 0); //Exp
			Write32(pAwardItemInfo, 0); //Money
			Write32(pAwardItemInfo, 0); //SuperMoney
			Write16(pAwardItemInfo, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAwardItemInfo;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //Coupons
			Write32(pAwardItemInfo, 0); //GuildPoint
			Write32(pAwardItemInfo, 0); //LuckMoney
			Write8(pAwardItemInfo, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAwardItemInfo;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //SpeedCoin

			len = pAwardItemInfo - pTwistMachineAwardInfos;
			Set16(pTwistMachineAwardInfos, (WORD)len);
			pTwistMachineAwardInfos += len;
		}
		Write8(pTwistMachineAwardInfos, 0); //LuckyEventAward
		Write8(pTwistMachineAwardInfos, 0); //FiveTwistMustAward

		len = pTwistMachineAwardInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //CurrentTwistNums
	Write16(p, 0); //HistoryAwardNums
	Write8(p, 0); //AwardInfos[]
	Write16(p, 0); //NewHistoryAwardNums
	Write8(p, 0); //NewAwardInfos[]
	Write8(p, 0); //TwistType
	Write8(p, 0); //DoubleAward
	Write32(p, 0); //BufferTag

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyWareHousePermanentItemList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	{ //WareHousePermanentItemList
		BYTE* pWareHousePermanentItemList = p;
		Write16(pWareHousePermanentItemList, 0); //len

		Write16(pWareHousePermanentItemList, 0); //ItemNum
		Write32(pWareHousePermanentItemList, 0); //ItemID[]

		len = pWareHousePermanentItemList - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 693, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyAllCityGameLogicInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //LeftSecondsToSuper
	Write8(p, 0); //Step
	Write8(p, 0); //PlayerNum
	for (size_t i = 0; i < n; i++)
	{ //PlayerInfo
		BYTE* pPlayerInfo = p;
		Write16(pPlayerInfo, 0); //len

		Write32(pPlayerInfo, 0); //Uin
		Write8(pPlayerInfo, 0); //Identity
		Write8(pPlayerInfo, 0); //SpecialIdentity
		Write8(pPlayerInfo, 0); //Progress
		Write8(pPlayerInfo, 0); //RelationNum
		Write32(pPlayerInfo, 0); //Relation[]
		Write8(pPlayerInfo, 0); //CurSkill
		Write8(pPlayerInfo, 0); //LeadAndCatch_PoliceNum

		len = pPlayerInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24807, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestAllCityReportEvent(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR EventType = Read8(p);

}

void ResponseAllCityReportEvent(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write8(p, 0); //EventType
	Write8(p, 0); //ParaNum
	Write32(p, 0); //Paras[]
	Write8(p, 0); //RelationNum
	Write32(p, 0); //Relation[]

	len = p - buf;
	SendToClient(Client, 24808, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyAllCityCfg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //TotalProgress
	Write8(p, 0); //TotalSkillProgess
	Write8(p, 0); //ClientReportDetailInfoSeconds

	len = p - buf;
	SendToClient(Client, 24811, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestReportAllCityDetailInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR Step = Read8(p);
	UCHAR Identity = Read8(p);
	UCHAR SpecialIdentity = Read8(p);
	UCHAR SuperNo2Num = Read8(p);
	UCHAR ParaNum = Read8(p);
	int[] Paras[] = Read32(p);

}

void ResponseReportAllCityDetailInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 24812, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetExchangeShopInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetExchangeShopInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	for (size_t i = 0; i < n; i++)
	{ //ExchangeItemList
		BYTE* pExchangeItemList = p;
		Write16(pExchangeItemList, 0); //len

		Write32(pExchangeItemList, 0); //ExchangeItemID
		Write16(pExchangeItemList, 0); //Num
		for (size_t i = 0; i < n; i++)
		{ //ExchangeItem
			BYTE* pExchangeItem = pExchangeItemList;
			Write16(pExchangeItem, 0); //len

			Write32(pExchangeItem, 0); //ItemID
			Write32(pExchangeItem, 0); //ItemNum
			Write32(pExchangeItem, 0); //AvailPeriod
			Write32(pExchangeItem, 0); //CostExchangeItemNum
			Write8(pExchangeItem, 0); //Flag

			len = pExchangeItem - pExchangeItemList;
			Set16(pExchangeItemList, (WORD)len);
			pExchangeItemList += len;
		}

		len = pExchangeItemList - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //OpenStartTime
	Write32(p, 0); //OpenEndTime

	len = p - buf;
	SendToClient(Client, 24786, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestDoShopExchange(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	{ //ExchangeInfo
		BYTE* pExchangeInfo = p;
		len = Read16(pExchangeInfo);

		int ItemID = Read32(pExchangeInfo);
		int ItemNum = Read32(pExchangeInfo);
		int AvailPeriod = Read32(pExchangeInfo);
		int CostExchangeItemNum = Read32(pExchangeInfo);
		char Flag = Read8(pExchangeInfo);

		p += len;
	}
	char ExchangeShopType = Read8(p);

}

void ResponseDoShopExchange(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	{ //AwardItemInfo
		BYTE* pAwardItemInfo = p;
		Write16(pAwardItemInfo, 0); //len

		Write32(pAwardItemInfo, 0); //Exp
		Write32(pAwardItemInfo, 0); //Money
		Write32(pAwardItemInfo, 0); //SuperMoney
		Write16(pAwardItemInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAwardItemInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAwardItemInfo;
			Set16(pAwardItemInfo, (WORD)len);
			pAwardItemInfo += len;
		}
		Write32(pAwardItemInfo, 0); //Coupons
		Write32(pAwardItemInfo, 0); //GuildPoint
		Write32(pAwardItemInfo, 0); //LuckMoney
		Write8(pAwardItemInfo, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAwardItemInfo;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAwardItemInfo;
			Set16(pAwardItemInfo, (WORD)len);
			pAwardItemInfo += len;
		}
		Write32(pAwardItemInfo, 0); //SpeedCoin

		len = pAwardItemInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //ExchangeInfo
		BYTE* pExchangeInfo = p;
		Write16(pExchangeInfo, 0); //len

		Write32(pExchangeInfo, 0); //ItemID
		Write32(pExchangeInfo, 0); //ItemNum
		Write32(pExchangeInfo, 0); //AvailPeriod
		Write32(pExchangeInfo, 0); //CostExchangeItemNum
		Write8(pExchangeInfo, 0); //Flag

		len = pExchangeInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ExchangeShopType

	len = p - buf;
	SendToClient(Client, 24787, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyClientUpdateItemDescInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Version
	Write16(p, 0); //ItemCount
	for (size_t i = 0; i < n; i++)
	{ //ItemList
		BYTE* pItemList = p;
		Write16(pItemList, 0); //len

		Write32(pItemList, 0); //ItemID
		Write16(pItemList, 0); //NameLen

		len = pItemList - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24379, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetThanksGivingCfg(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR OpenType = Read8(p);

}

void ResponseGetThanksGivingCfg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	{ //ValentinesDayOpenCfg
		BYTE* pValentinesDayOpenCfg = p;
		Write16(pValentinesDayOpenCfg, 0); //len

		Write32(pValentinesDayOpenCfg, 0); //OpenDate
		Write32(pValentinesDayOpenCfg, 0); //CloseDate
		Write32(pValentinesDayOpenCfg, 0); //OpenTime
		Write32(pValentinesDayOpenCfg, 0); //CloseTime

		len = pValentinesDayOpenCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //RedLineCfg
		BYTE* pRedLineCfg = p;
		Write16(pRedLineCfg, 0); //len

		Write32(pRedLineCfg, 0); //ItemID
		Write32(pRedLineCfg, 0); //DayMaxNum
		Write32(pRedLineCfg, 0); //AddFateValueBrRedLine
		Write32(pRedLineCfg, 0); //RedLineTaskNum
		for (size_t i = 0; i < n; i++)
		{ //RedLineTaskCfg
			BYTE* pRedLineTaskCfg = pRedLineCfg;
			Write16(pRedLineTaskCfg, 0); //len

			Write32(pRedLineTaskCfg, 0); //TaskID
			Write32(pRedLineTaskCfg, 0); //AddRedLineNum
			Write32(pRedLineTaskCfg, 0); //AlreadyGotNum
			Write32(pRedLineTaskCfg, 0); //CanMaxGetNum

			len = pRedLineTaskCfg - pRedLineCfg;
			Set16(pRedLineCfg, (WORD)len);
			pRedLineCfg += len;
		}

		len = pRedLineCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //ThanksGivingFinalAwardCfg
		BYTE* pThanksGivingFinalAwardCfg = p;
		Write16(pThanksGivingFinalAwardCfg, 0); //len

		Write32(pThanksGivingFinalAwardCfg, 0); //CurrentWishTime
		Write32(pThanksGivingFinalAwardCfg, 0); //NeedTotalWishTime
		{ //AwardItemInfo
			BYTE* pAwardItemInfo = pThanksGivingFinalAwardCfg;
			Write16(pAwardItemInfo, 0); //len

			Write32(pAwardItemInfo, 0); //Exp
			Write32(pAwardItemInfo, 0); //Money
			Write32(pAwardItemInfo, 0); //SuperMoney
			Write16(pAwardItemInfo, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAwardItemInfo;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //Coupons
			Write32(pAwardItemInfo, 0); //GuildPoint
			Write32(pAwardItemInfo, 0); //LuckMoney
			Write8(pAwardItemInfo, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAwardItemInfo;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //SpeedCoin

			len = pAwardItemInfo - pThanksGivingFinalAwardCfg;
			Set16(pThanksGivingFinalAwardCfg, (WORD)len);
			pThanksGivingFinalAwardCfg += len;
		}
		Write8(pThanksGivingFinalAwardCfg, 0); //Status

		len = pThanksGivingFinalAwardCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //ThanksGivingWishAwardCfg
		BYTE* pThanksGivingWishAwardCfg = p;
		Write16(pThanksGivingWishAwardCfg, 0); //len

		Write16(pThanksGivingWishAwardCfg, 0); //ItemNum
		Write16(pThanksGivingWishAwardCfg, 0); //CostItemNumOneTime
		Write16(pThanksGivingWishAwardCfg, 0); //CostItemNumMulTime
		{ //AwardItemInfo
			BYTE* pAwardItemInfo = pThanksGivingWishAwardCfg;
			Write16(pAwardItemInfo, 0); //len

			Write32(pAwardItemInfo, 0); //Exp
			Write32(pAwardItemInfo, 0); //Money
			Write32(pAwardItemInfo, 0); //SuperMoney
			Write16(pAwardItemInfo, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAwardItemInfo;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //Coupons
			Write32(pAwardItemInfo, 0); //GuildPoint
			Write32(pAwardItemInfo, 0); //LuckMoney
			Write8(pAwardItemInfo, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAwardItemInfo;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //SpeedCoin

			len = pAwardItemInfo - pThanksGivingWishAwardCfg;
			Set16(pThanksGivingWishAwardCfg, (WORD)len);
			pThanksGivingWishAwardCfg += len;
		}

		len = pThanksGivingWishAwardCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //ThanksGivingBoxNum
	for (size_t i = 0; i < n; i++)
	{ //sthanksGivingBoxAwardCfg
		BYTE* psthanksGivingBoxAwardCfg = p;
		Write16(psthanksGivingBoxAwardCfg, 0); //len

		Write32(psthanksGivingBoxAwardCfg, 0); //KeyItemID
		Write16(psthanksGivingBoxAwardCfg, 0); //KeyNum
		Write32(psthanksGivingBoxAwardCfg, 0); //OpenNum
		Write16(psthanksGivingBoxAwardCfg, 0); //Num
		for (size_t i = 0; i < n; i++)
		{ //AwardItemInfo
			BYTE* pAwardItemInfo = psthanksGivingBoxAwardCfg;
			Write16(pAwardItemInfo, 0); //len

			Write32(pAwardItemInfo, 0); //Exp
			Write32(pAwardItemInfo, 0); //Money
			Write32(pAwardItemInfo, 0); //SuperMoney
			Write16(pAwardItemInfo, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAwardItemInfo;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //Coupons
			Write32(pAwardItemInfo, 0); //GuildPoint
			Write32(pAwardItemInfo, 0); //LuckMoney
			Write8(pAwardItemInfo, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAwardItemInfo;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //SpeedCoin

			len = pAwardItemInfo - psthanksGivingBoxAwardCfg;
			Set16(psthanksGivingBoxAwardCfg, (WORD)len);
			psthanksGivingBoxAwardCfg += len;
		}

		len = psthanksGivingBoxAwardCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //WishNum

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetThanksGivingWishAward(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR Type = Read8(p);

}

void ResponseGetThanksGivingWishAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write8(p, 0); //Type
	Write16(p, 0); //ItemNum
	{ //AwardToClient
		BYTE* pAwardToClient = p;
		Write16(pAwardToClient, 0); //len

		Write32(pAwardToClient, 0); //Exp
		Write32(pAwardToClient, 0); //Money
		Write32(pAwardToClient, 0); //SuperMoney
		Write16(pAwardToClient, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAwardToClient;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAwardToClient;
			Set16(pAwardToClient, (WORD)len);
			pAwardToClient += len;
		}
		Write32(pAwardToClient, 0); //Coupons
		Write32(pAwardToClient, 0); //GuildPoint
		Write32(pAwardToClient, 0); //LuckMoney
		Write8(pAwardToClient, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAwardToClient;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAwardToClient;
			Set16(pAwardToClient, (WORD)len);
			pAwardToClient += len;
		}
		Write32(pAwardToClient, 0); //SpeedCoin

		len = pAwardToClient - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //WishNum

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetThanksGivingFinalAward(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetThanksGivingFinalAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	{ //AwardToClient
		BYTE* pAwardToClient = p;
		Write16(pAwardToClient, 0); //len

		Write32(pAwardToClient, 0); //Exp
		Write32(pAwardToClient, 0); //Money
		Write32(pAwardToClient, 0); //SuperMoney
		Write16(pAwardToClient, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAwardToClient;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAwardToClient;
			Set16(pAwardToClient, (WORD)len);
			pAwardToClient += len;
		}
		Write32(pAwardToClient, 0); //Coupons
		Write32(pAwardToClient, 0); //GuildPoint
		Write32(pAwardToClient, 0); //LuckMoney
		Write8(pAwardToClient, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAwardToClient;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAwardToClient;
			Set16(pAwardToClient, (WORD)len);
			pAwardToClient += len;
		}
		Write32(pAwardToClient, 0); //SpeedCoin

		len = pAwardToClient - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyHelperInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write8(p, 0); //ActiveStatus
	Write32(p, 0); //HelperLev

	len = p - buf;
	SendToClient(Client, 24820, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestThanksGivingOpenBox(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR Type = Read8(p);

}

void ResponseThanksGivingOpenBox(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write8(p, 0); //Type
	{ //AwardToClient
		BYTE* pAwardToClient = p;
		Write16(pAwardToClient, 0); //len

		Write32(pAwardToClient, 0); //Exp
		Write32(pAwardToClient, 0); //Money
		Write32(pAwardToClient, 0); //SuperMoney
		Write16(pAwardToClient, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAwardToClient;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAwardToClient;
			Set16(pAwardToClient, (WORD)len);
			pAwardToClient += len;
		}
		Write32(pAwardToClient, 0); //Coupons
		Write32(pAwardToClient, 0); //GuildPoint
		Write32(pAwardToClient, 0); //LuckMoney
		Write8(pAwardToClient, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAwardToClient;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAwardToClient;
			Set16(pAwardToClient, (WORD)len);
			pAwardToClient += len;
		}
		Write32(pAwardToClient, 0); //SpeedCoin

		len = pAwardToClient - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //OpenNum

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyTVLiveInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //CommonTipsNum
	for (size_t i = 0; i < n; i++)
	{ //CommonTipsInfo
		BYTE* pCommonTipsInfo = p;
		Write16(pCommonTipsInfo, 0); //len

		Write8(pCommonTipsInfo, 0); //TipsType
		Write32(pCommonTipsInfo, 0); //Second
		Write32(pCommonTipsInfo, 0); //TipsLen

		len = pCommonTipsInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 24822, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetRankedMatchShowInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR Type = Read8(p);

}

void ResponseGetRankedMatchShowInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write32(p, 0); //SeasonID
	Write16(p, 0); //DailyOpenTimeInfoNums
	for (size_t i = 0; i < n; i++)
	{ //OpenTimeInfos
		BYTE* pOpenTimeInfos = p;
		Write16(pOpenTimeInfos, 0); //len

		Write32(pOpenTimeInfos, 0); //OpenTime
		Write32(pOpenTimeInfos, 0); //CloseTime

		len = pOpenTimeInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //SeasonOpenDate
	Write32(p, 0); //SeasonCloseDate
	{ //RankedMatchGradeInfo
		BYTE* pRankedMatchGradeInfo = p;
		Write16(pRankedMatchGradeInfo, 0); //len

		Write32(pRankedMatchGradeInfo, 0); //GradeLevel
		Write32(pRankedMatchGradeInfo, 0); //ChildLevel
		Write32(pRankedMatchGradeInfo, 0); //GradeScore
		Write32(pRankedMatchGradeInfo, 0); //MaxGradeScore
		Write32(pRankedMatchGradeInfo, 0); //TotalScore

		len = pRankedMatchGradeInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //NextLevelReceAwardInfo
		BYTE* pNextLevelReceAwardInfo = p;
		Write16(pNextLevelReceAwardInfo, 0); //len

		{ //AwardInfo
			BYTE* pAwardInfo = pNextLevelReceAwardInfo;
			Write16(pAwardInfo, 0); //len

			Write32(pAwardInfo, 0); //Exp
			Write32(pAwardInfo, 0); //Money
			Write32(pAwardInfo, 0); //SuperMoney
			Write16(pAwardInfo, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAwardInfo;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAwardInfo;
				Set16(pAwardInfo, (WORD)len);
				pAwardInfo += len;
			}
			Write32(pAwardInfo, 0); //Coupons
			Write32(pAwardInfo, 0); //GuildPoint
			Write32(pAwardInfo, 0); //LuckMoney
			Write8(pAwardInfo, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAwardInfo;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAwardInfo;
				Set16(pAwardInfo, (WORD)len);
				pAwardInfo += len;
			}
			Write32(pAwardInfo, 0); //SpeedCoin

			len = pAwardInfo - pNextLevelReceAwardInfo;
			Set16(pNextLevelReceAwardInfo, (WORD)len);
			pNextLevelReceAwardInfo += len;
		}
		Write32(pNextLevelReceAwardInfo, 0); //GradeLevel
		Write32(pNextLevelReceAwardInfo, 0); //ChildLevel
		Write32(pNextLevelReceAwardInfo, 0); //FinishMatchNums

		len = pNextLevelReceAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //SeasonAwardInfo
		BYTE* pSeasonAwardInfo = p;
		Write16(pSeasonAwardInfo, 0); //len

		Write32(pSeasonAwardInfo, 0); //Exp
		Write32(pSeasonAwardInfo, 0); //Money
		Write32(pSeasonAwardInfo, 0); //SuperMoney
		Write16(pSeasonAwardInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pSeasonAwardInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pSeasonAwardInfo;
			Set16(pSeasonAwardInfo, (WORD)len);
			pSeasonAwardInfo += len;
		}
		Write32(pSeasonAwardInfo, 0); //Coupons
		Write32(pSeasonAwardInfo, 0); //GuildPoint
		Write32(pSeasonAwardInfo, 0); //LuckMoney
		Write8(pSeasonAwardInfo, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pSeasonAwardInfo;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pSeasonAwardInfo;
			Set16(pSeasonAwardInfo, (WORD)len);
			pSeasonAwardInfo += len;
		}
		Write32(pSeasonAwardInfo, 0); //SpeedCoin

		len = pSeasonAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //AnotherSeasonAwardInfo
		BYTE* pAnotherSeasonAwardInfo = p;
		Write16(pAnotherSeasonAwardInfo, 0); //len

		Write32(pAnotherSeasonAwardInfo, 0); //Exp
		Write32(pAnotherSeasonAwardInfo, 0); //Money
		Write32(pAnotherSeasonAwardInfo, 0); //SuperMoney
		Write16(pAnotherSeasonAwardInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAnotherSeasonAwardInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAnotherSeasonAwardInfo;
			Set16(pAnotherSeasonAwardInfo, (WORD)len);
			pAnotherSeasonAwardInfo += len;
		}
		Write32(pAnotherSeasonAwardInfo, 0); //Coupons
		Write32(pAnotherSeasonAwardInfo, 0); //GuildPoint
		Write32(pAnotherSeasonAwardInfo, 0); //LuckMoney
		Write8(pAnotherSeasonAwardInfo, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAnotherSeasonAwardInfo;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAnotherSeasonAwardInfo;
			Set16(pAnotherSeasonAwardInfo, (WORD)len);
			pAnotherSeasonAwardInfo += len;
		}
		Write32(pAnotherSeasonAwardInfo, 0); //SpeedCoin

		len = pAnotherSeasonAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //SeasonMapNums
	for (size_t i = 0; i < n; i++)
	{ //MapInfos
		BYTE* pMapInfos = p;
		Write16(pMapInfos, 0); //len

		Write16(pMapInfos, 0); //GradeMapNums
		for (size_t i = 0; i < n; i++)
		{ //MapInfo
			BYTE* pMapInfo = pMapInfos;
			Write16(pMapInfo, 0); //len

			Write16(pMapInfo, 0); //GradeLevel
			Write16(pMapInfo, 0); //MapNums
			Write32(pMapInfo, 0); //MapArray[]
			Write16(pMapInfo, 0); //SuperRaceMapNums
			Write32(pMapInfo, 0); //SuperRaceMapArray[]
			Write16(pMapInfo, 0); //CarFactoryMapNums
			Write32(pMapInfo, 0); //CarFactoryMapArray[]
			Write16(pMapInfo, 0); //NewMapNums
			Write32(pMapInfo, 0); //NewMapArray[]

			len = pMapInfo - pMapInfos;
			Set16(pMapInfos, (WORD)len);
			pMapInfos += len;
		}

		len = pMapInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //PlayerSeasonInfoNums
	for (size_t i = 0; i < n; i++)
	{ //PlayerSeasonInfos
		BYTE* pPlayerSeasonInfos = p;
		Write16(pPlayerSeasonInfos, 0); //len

		Write16(pPlayerSeasonInfos, 0); //SeasonID
		Write16(pPlayerSeasonInfos, 0); //GradeLevel
		Write8(pPlayerSeasonInfos, 0); //ChildLevel
		Write16(pPlayerSeasonInfos, 0); //HighGradeLevel
		Write8(pPlayerSeasonInfos, 0); //HighChildLevel
		Write8(pPlayerSeasonInfos, 0); //SeasonInfoProcesedTag
		Write8(pPlayerSeasonInfos, 0); //SeasonComputeInfoTipTag
		Write16(pPlayerSeasonInfos, 0); //SeasonInheritTag
		Write8(pPlayerSeasonInfos, 0); //SeasonInheritTipTag
		Write16(pPlayerSeasonInfos, 0); //SpeedGodNums
		Write32(pPlayerSeasonInfos, 0); //SpeedRoundNums
		Write32(pPlayerSeasonInfos, 0); //SpeedFinishRoundNums
		Write32(pPlayerSeasonInfos, 0); //TotalRankIndex
		Write32(pPlayerSeasonInfos, 0); //ContiFinishRoundNums
		Write32(pPlayerSeasonInfos, 0); //SpeedKillAllRoundNums
		Write32(pPlayerSeasonInfos, 0); //PropRoundNums
		Write32(pPlayerSeasonInfos, 0); //PropFinishRoundNums
		Write32(pPlayerSeasonInfos, 0); //ContiFinishPropRoundNums
		Write32(pPlayerSeasonInfos, 0); //PropKillAllRoundNums
		Write8(pPlayerSeasonInfos, 0); //LastRoundIndex
		Write32(pPlayerSeasonInfos, 0); //OpenDate
		Write32(pPlayerSeasonInfos, 0); //CloseDate
		Write32(pPlayerSeasonInfos, 0); //HistroyContFinishRoundNums

		len = pPlayerSeasonInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //RankedMatchPromoInfo
		BYTE* pRankedMatchPromoInfo = p;
		Write16(pRankedMatchPromoInfo, 0); //len

		Write8(pRankedMatchPromoInfo, 0); //PromotionMatch
		Write32(pRankedMatchPromoInfo, 0); //PromotionRoundNums
		Write32(pRankedMatchPromoInfo, 0); //PromotionSuccessRoundNums
		Write32(pRankedMatchPromoInfo, 0); //PromotionAlreadySuccessRoundNums
		Write32(pRankedMatchPromoInfo, 0); //PromotionRecordTag
		Write32(pRankedMatchPromoInfo, 0); //CurrentPromotionRoundNums
		Write32(pRankedMatchPromoInfo, 0); //PromoFailedMinusScore
		Write32(pRankedMatchPromoInfo, 0); //PromoSuccAddScore
		Write8(pRankedMatchPromoInfo, 0); //PromoDirectly
		Write8(pRankedMatchPromoInfo, 0); //GradeNoNeedPromo
		Write8(pRankedMatchPromoInfo, 0); //RankedMemoryNoNeedPromo
		Write8(pRankedMatchPromoInfo, 0); //PromotionExtraScore
		Write8(pRankedMatchPromoInfo, 0); //PromtRaceFailedDefendFlag

		len = pRankedMatchPromoInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //InhertGradeTag
	{ //GradeInheritInfo
		BYTE* pGradeInheritInfo = p;
		Write16(pGradeInheritInfo, 0); //len

		Write16(pGradeInheritInfo, 0); //OriginalGradeLevel
		Write16(pGradeInheritInfo, 0); //OriginalChildLevel
		Write16(pGradeInheritInfo, 0); //InheritedGradeLevel
		Write16(pGradeInheritInfo, 0); //InheritedChildLevel
		Write16(pGradeInheritInfo, 0); //InheritedLowLimitGradeLevel
		Write16(pGradeInheritInfo, 0); //InheritedLowLimitChildLevel

		len = pGradeInheritInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //RewardSeasonAward
	{ //LastSeasonAwardInfo
		BYTE* pLastSeasonAwardInfo = p;
		Write16(pLastSeasonAwardInfo, 0); //len

		Write32(pLastSeasonAwardInfo, 0); //Exp
		Write32(pLastSeasonAwardInfo, 0); //Money
		Write32(pLastSeasonAwardInfo, 0); //SuperMoney
		Write16(pLastSeasonAwardInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pLastSeasonAwardInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pLastSeasonAwardInfo;
			Set16(pLastSeasonAwardInfo, (WORD)len);
			pLastSeasonAwardInfo += len;
		}
		Write32(pLastSeasonAwardInfo, 0); //Coupons
		Write32(pLastSeasonAwardInfo, 0); //GuildPoint
		Write32(pLastSeasonAwardInfo, 0); //LuckMoney
		Write8(pLastSeasonAwardInfo, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pLastSeasonAwardInfo;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pLastSeasonAwardInfo;
			Set16(pLastSeasonAwardInfo, (WORD)len);
			pLastSeasonAwardInfo += len;
		}
		Write32(pLastSeasonAwardInfo, 0); //SpeedCoin

		len = pLastSeasonAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //AnotherLastSeasonAwardInfo
		BYTE* pAnotherLastSeasonAwardInfo = p;
		Write16(pAnotherLastSeasonAwardInfo, 0); //len

		Write32(pAnotherLastSeasonAwardInfo, 0); //Exp
		Write32(pAnotherLastSeasonAwardInfo, 0); //Money
		Write32(pAnotherLastSeasonAwardInfo, 0); //SuperMoney
		Write16(pAnotherLastSeasonAwardInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAnotherLastSeasonAwardInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAnotherLastSeasonAwardInfo;
			Set16(pAnotherLastSeasonAwardInfo, (WORD)len);
			pAnotherLastSeasonAwardInfo += len;
		}
		Write32(pAnotherLastSeasonAwardInfo, 0); //Coupons
		Write32(pAnotherLastSeasonAwardInfo, 0); //GuildPoint
		Write32(pAnotherLastSeasonAwardInfo, 0); //LuckMoney
		Write8(pAnotherLastSeasonAwardInfo, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAnotherLastSeasonAwardInfo;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAnotherLastSeasonAwardInfo;
			Set16(pAnotherLastSeasonAwardInfo, (WORD)len);
			pAnotherLastSeasonAwardInfo += len;
		}
		Write32(pAnotherLastSeasonAwardInfo, 0); //SpeedCoin

		len = pAnotherLastSeasonAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //DailyAwardInfo
		BYTE* pDailyAwardInfo = p;
		Write16(pDailyAwardInfo, 0); //len

		Write16(pDailyAwardInfo, 0); //ScoreInc
		Write16(pDailyAwardInfo, 0); //DailyScoreInc
		Write8(pDailyAwardInfo, 0); //DailyAwardGot
		Write32(pDailyAwardInfo, 0); //SuperMoney
		Write32(pDailyAwardInfo, 0); //CouponMoney

		len = pDailyAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //CreateRoom
	Write8(p, 0); //RemindLengnedSpeedGodTip
	Write8(p, 0); //DisableSwitchGameSvr
	Write8(p, 0); //InheritFromOldSysTag
	Write32(p, 0); //OldSysGrade
	Write32(p, 0); //WeeklyAwardRankCoinNums
	Write32(p, 0); //WeeklyAwardRankCoinLimit
	Write32(p, 0); //CurrentRankCoinNums
	Write32(p, 0); //RankTaskNum
	for (size_t i = 0; i < n; i++)
	{ //RankTaskCfgWithCurrentStatus
		BYTE* pRankTaskCfgWithCurrentStatus = p;
		Write16(pRankTaskCfgWithCurrentStatus, 0); //len

		{ //Cfg
			BYTE* pCfg = pRankTaskCfgWithCurrentStatus;
			Write16(pCfg, 0); //len

			Write32(pCfg, 0); //DescLen
			Write32(pCfg, 0); //DailyNum
			Write32(pCfg, 0); //Score
			Write32(pCfg, 0); //TaskInfoNum
			for (size_t i = 0; i < n; i++)
			{ //TaskInfo
				BYTE* pTaskInfo = pCfg;
				Write16(pTaskInfo, 0); //len

				Write32(pTaskInfo, 0); //TaskConditionNum
				for (size_t i = 0; i < n; i++)
				{ //TaskCondition
					BYTE* pTaskCondition = pTaskInfo;
					Write16(pTaskCondition, 0); //len

					Write32(pTaskCondition, 0); //Type
					Write32(pTaskCondition, 0); //Condition

					len = pTaskCondition - pTaskInfo;
					Set16(pTaskInfo, (WORD)len);
					pTaskInfo += len;
				}

				len = pTaskInfo - pCfg;
				Set16(pCfg, (WORD)len);
				pCfg += len;
			}
			Write32(pCfg, 0); //RankedCoinNums
			Write32(pCfg, 0); //DailyExtraTaskID

			len = pCfg - pRankTaskCfgWithCurrentStatus;
			Set16(pRankTaskCfgWithCurrentStatus, (WORD)len);
			pRankTaskCfgWithCurrentStatus += len;
		}
		Write32(pRankTaskCfgWithCurrentStatus, 0); //CurrentFinishNum

		len = pRankTaskCfgWithCurrentStatus - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //FeiShiDescLen
	Write32(p, 0); //FeiShiID
	Write32(p, 0); //ShopItemNums
	for (size_t i = 0; i < n; i++)
	{ //ShopItemInfos
		BYTE* pShopItemInfos = p;
		Write16(pShopItemInfos, 0); //len

		Write8(pShopItemInfos, 0); //ItemLabelType
		Write32(pShopItemInfos, 0); //ItemID

		len = pShopItemInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	WriteString(p, 0); //SeasonName[]
	Write32(p, 0); //BackgroundSceneId
	{ //RankedMatchSeasonChallengeInfo
		BYTE* pRankedMatchSeasonChallengeInfo = p;
		Write16(pRankedMatchSeasonChallengeInfo, 0); //len

		Write32(pRankedMatchSeasonChallengeInfo, 0); //SeasonStarNums
		Write32(pRankedMatchSeasonChallengeInfo, 0); //SeasonTaskNums
		for (size_t i = 0; i < n; i++)
		{ //RankedMatchSeasonTaskInfos
			BYTE* pRankedMatchSeasonTaskInfos = pRankedMatchSeasonChallengeInfo;
			Write16(pRankedMatchSeasonTaskInfos, 0); //len

			Write32(pRankedMatchSeasonTaskInfos, 0); //TaskIndex
			Write32(pRankedMatchSeasonTaskInfos, 0); //TaskType
			Write32(pRankedMatchSeasonTaskInfos, 0); //FinshiNeedValue
			Write32(pRankedMatchSeasonTaskInfos, 0); //CurrentProcessValue
			Write8(pRankedMatchSeasonTaskInfos, 0); //FinishOrNot

			len = pRankedMatchSeasonTaskInfos - pRankedMatchSeasonChallengeInfo;
			Set16(pRankedMatchSeasonChallengeInfo, (WORD)len);
			pRankedMatchSeasonChallengeInfo += len;
		}
		{ //RankedMatchSeasonChallengeHonorDefendInfo
			BYTE* pRankedMatchSeasonChallengeHonorDefendInfo = pRankedMatchSeasonChallengeInfo;
			Write16(pRankedMatchSeasonChallengeHonorDefendInfo, 0); //len

			Write32(pRankedMatchSeasonChallengeHonorDefendInfo, 0); //NeedStarNums
			Write32(pRankedMatchSeasonChallengeHonorDefendInfo, 0); //AwardHonorDefendNums
			Write32(pRankedMatchSeasonChallengeHonorDefendInfo, 0); //DefendAddSocre

			len = pRankedMatchSeasonChallengeHonorDefendInfo - pRankedMatchSeasonChallengeInfo;
			Set16(pRankedMatchSeasonChallengeInfo, (WORD)len);
			pRankedMatchSeasonChallengeInfo += len;
		}
		Write8(pRankedMatchSeasonChallengeInfo, 0); //FinishNewTask
		Write32(pRankedMatchSeasonChallengeInfo, 0); //CurrentDefendHonorNums
		WriteUn(pRankedMatchSeasonChallengeInfo, 0); //UiDefendHonorLimitNums

		len = pRankedMatchSeasonChallengeInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //RaceTipType
	Write8(p, 0); //NewSeasonBegain
	Write8(p, 0); //HaveSeasonMapChallengeInfo
	for (size_t i = 0; i < n; i++)
	{ //RankedMatchSeasonNewMapInfos
		BYTE* pRankedMatchSeasonNewMapInfos = p;
		Write16(pRankedMatchSeasonNewMapInfos, 0); //len

		Write32(pRankedMatchSeasonNewMapInfos, 0); //SeasonID
		Write32(pRankedMatchSeasonNewMapInfos, 0); //OpenDate
		Write32(pRankedMatchSeasonNewMapInfos, 0); //CloseDate
		Write32(pRankedMatchSeasonNewMapInfos, 0); //OpenTime
		Write32(pRankedMatchSeasonNewMapInfos, 0); //CloseTime
		Write16(pRankedMatchSeasonNewMapInfos, 0); //NewMapNums
		for (size_t i = 0; i < n; i++)
		{ //SeasonNewMapInfos
			BYTE* pSeasonNewMapInfos = pRankedMatchSeasonNewMapInfos;
			Write16(pSeasonNewMapInfos, 0); //len

			Write32(pSeasonNewMapInfos, 0); //MapID
			Write32(pSeasonNewMapInfos, 0); //MapIndex
			Write32(pSeasonNewMapInfos, 0); //MaxFinishiTime
			Write16(pSeasonNewMapInfos, 0); //ChallengeLevelNums
			for (size_t i = 0; i < n; i++)
			{ //ChallengeInfos
				BYTE* pChallengeInfos = pSeasonNewMapInfos;
				Write16(pChallengeInfos, 0); //len

				Write16(pChallengeInfos, 0); //ChallengeLevel
				Write32(pChallengeInfos, 0); //FinishTime
				Write8(pChallengeInfos, 0); //FinishOrNot
				Write32(pChallengeInfos, 0); //AddRankedScore
				Write32(pChallengeInfos, 0); //AddRankedCoinNums

				len = pChallengeInfos - pSeasonNewMapInfos;
				Set16(pSeasonNewMapInfos, (WORD)len);
				pSeasonNewMapInfos += len;
			}
			Write8(pSeasonNewMapInfos, 0); //PromotionExtraScore

			len = pSeasonNewMapInfos - pRankedMatchSeasonNewMapInfos;
			Set16(pRankedMatchSeasonNewMapInfos, (WORD)len);
			pRankedMatchSeasonNewMapInfos += len;
		}

		len = pRankedMatchSeasonNewMapInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //NewSeasonMapAddDate
	Write8(p, 0); //HaveTippedSuperRaceGuard
	Write16(p, 0); //PromoAwardNums
	for (size_t i = 0; i < n; i++)
	{ //RankedMatchPromAwardInfos
		BYTE* pRankedMatchPromAwardInfos = p;
		Write16(pRankedMatchPromAwardInfos, 0); //len

		Write32(pRankedMatchPromAwardInfos, 0); //GradeLevel
		Write32(pRankedMatchPromAwardInfos, 0); //ChildLevel
		{ //AwardInfo
			BYTE* pAwardInfo = pRankedMatchPromAwardInfos;
			Write16(pAwardInfo, 0); //len

			Write32(pAwardInfo, 0); //Exp
			Write32(pAwardInfo, 0); //Money
			Write32(pAwardInfo, 0); //SuperMoney
			Write16(pAwardInfo, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAwardInfo;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAwardInfo;
				Set16(pAwardInfo, (WORD)len);
				pAwardInfo += len;
			}
			Write32(pAwardInfo, 0); //Coupons
			Write32(pAwardInfo, 0); //GuildPoint
			Write32(pAwardInfo, 0); //LuckMoney
			Write8(pAwardInfo, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAwardInfo;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAwardInfo;
				Set16(pAwardInfo, (WORD)len);
				pAwardInfo += len;
			}
			Write32(pAwardInfo, 0); //SpeedCoin

			len = pAwardInfo - pRankedMatchPromAwardInfos;
			Set16(pRankedMatchPromAwardInfos, (WORD)len);
			pRankedMatchPromAwardInfos += len;
		}
		Write8(pRankedMatchPromAwardInfos, 0); //HaveAwarded
		Write32(pRankedMatchPromAwardInfos, 0); //AwardNeedFinishNums

		len = pRankedMatchPromAwardInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //SeasonAwardNums
	for (size_t i = 0; i < n; i++)
	{ //RankedMatchSeasonAwardInfos
		BYTE* pRankedMatchSeasonAwardInfos = p;
		Write16(pRankedMatchSeasonAwardInfos, 0); //len

		Write32(pRankedMatchSeasonAwardInfos, 0); //GradeLevel
		Write32(pRankedMatchSeasonAwardInfos, 0); //ChildLevel
		{ //AwardInfo
			BYTE* pAwardInfo = pRankedMatchSeasonAwardInfos;
			Write16(pAwardInfo, 0); //len

			Write32(pAwardInfo, 0); //Exp
			Write32(pAwardInfo, 0); //Money
			Write32(pAwardInfo, 0); //SuperMoney
			Write16(pAwardInfo, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAwardInfo;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAwardInfo;
				Set16(pAwardInfo, (WORD)len);
				pAwardInfo += len;
			}
			Write32(pAwardInfo, 0); //Coupons
			Write32(pAwardInfo, 0); //GuildPoint
			Write32(pAwardInfo, 0); //LuckMoney
			Write8(pAwardInfo, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAwardInfo;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAwardInfo;
				Set16(pAwardInfo, (WORD)len);
				pAwardInfo += len;
			}
			Write32(pAwardInfo, 0); //SpeedCoin

			len = pAwardInfo - pRankedMatchSeasonAwardInfos;
			Set16(pRankedMatchSeasonAwardInfos, (WORD)len);
			pRankedMatchSeasonAwardInfos += len;
		}

		len = pRankedMatchSeasonAwardInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //CurrentHighGradeLevel
	Write32(p, 0); //CurrentHighChildLevel
	Write16(p, 0); //SpecialTipInfoLen
	Write16(p, 0); //SeasonNewMapNums
	Write32(p, 0); //SeasonNewMapID[]
	Write8(p, 0); //IsTriggerInheritedLowLimit
	Write8(p, 0); //InheritedLowLimitContentLens
	Write8(p, 0); //IsInheritedLowLimitUpdate
	Write8(p, 0); //InheritedLowLimitUpdateContentLens
	Write8(p, 0); //RankedMatchMissionTaskNums
	for (size_t i = 0; i < n; i++)
	{ //RankedMatchMissionTask
		BYTE* pRankedMatchMissionTask = p;
		Write16(pRankedMatchMissionTask, 0); //len

		Write32(pRankedMatchMissionTask, 0); //SeasonID
		Write8(pRankedMatchMissionTask, 0); //SeasonTaskNums
		Write32(pRankedMatchMissionTask, 0); //SeasonTask[]
		Write8(pRankedMatchMissionTask, 0); //RankTaskNums
		Write32(pRankedMatchMissionTask, 0); //RankTask[]

		len = pRankedMatchMissionTask - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //RankedMatchSuperRacePartLevelLimit
	Write16(p, 0); //NextGradeAndChildLevelSeasonTask
	Write16(p, 0); //CurrentSeasonTotalPartiNum
	Write8(p, 0); //SeasonMileStoneCfgNum
	for (size_t i = 0; i < n; i++)
	{ //SeasonMileStoneCfg
		BYTE* pSeasonMileStoneCfg = p;
		Write16(pSeasonMileStoneCfg, 0); //len

		Write16(pSeasonMileStoneCfg, 0); //SeasonID
		Write16(pSeasonMileStoneCfg, 0); //TotalPartiNums
		Write16(pSeasonMileStoneCfg, 0); //IntervalNum
		Write8(pSeasonMileStoneCfg, 0); //AwardNumCfgNums
		Write16(pSeasonMileStoneCfg, 0); //AwardNumCfg[]

		len = pSeasonMileStoneCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //SeasonMileStoneAwardNum
	Write8(p, 0); //TestDriveKartCfgNum
	for (size_t i = 0; i < n; i++)
	{ //KartfactoryTestDriveCfg
		BYTE* pKartfactoryTestDriveCfg = p;
		Write16(pKartfactoryTestDriveCfg, 0); //len

		Write16(pKartfactoryTestDriveCfg, 0); //SeasonID
		Write32(pKartfactoryTestDriveCfg, 0); //TestDriveTaskID
		Write8(pKartfactoryTestDriveCfg, 0); //TestDriveKartNum
		Write32(pKartfactoryTestDriveCfg, 0); //TestDirivekartID[]
		Write8(pKartfactoryTestDriveCfg, 0); //KartShowIntervalTime
		Write32(pKartfactoryTestDriveCfg, 0); //PlayerTestKartItemID[]
		Write8(pKartfactoryTestDriveCfg, 0); //TestKartRefitLevel
		Write16(pKartfactoryTestDriveCfg, 0); //UnLockSuitNum[]

		len = pKartfactoryTestDriveCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //TestDriveKartIdx
	Write32(p, 0); //TipContiUseTestKart
	Write8(p, 0); //MileStoneAddTip
	Write8(p, 0); //Type
	Write8(p, 0); //HasRankedMemoryData
	for (size_t i = 0; i < n; i++)
	{ //RankedMatchMemoryData
		BYTE* pRankedMatchMemoryData = p;
		Write16(pRankedMatchMemoryData, 0); //len

		Write32(pRankedMatchMemoryData, 0); //RegisterDiffDayNum
		Write32(pRankedMatchMemoryData, 0); //FirstParticipateSeasonID
		Write32(pRankedMatchMemoryData, 0); //FirstTopGradeSeasonID
		Write32(pRankedMatchMemoryData, 0); //TopGrade
		Write32(pRankedMatchMemoryData, 0); //TopChild
		Write8(pRankedMatchMemoryData, 0); //TopNum

		len = pRankedMatchMemoryData - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasRankedSpeedFlashData
	for (size_t i = 0; i < n; i++)
	{ //RankedSpeedFlash
		BYTE* pRankedSpeedFlash = p;
		Write16(pRankedSpeedFlash, 0); //len

		Write16(pRankedSpeedFlash, 0); //SeasonID
		Write32(pRankedSpeedFlash, 0); //AwardItemID
		Write8(pRankedSpeedFlash, 0); //PerAwardNum
		Write8(pRankedSpeedFlash, 0); //PerRoundAwardNumMax
		Write8(pRankedSpeedFlash, 0); //WeeklyAwardNumMax
		Write16(pRankedSpeedFlash, 0); //SeasonAwardNumMax
		Write8(pRankedSpeedFlash, 0); //N2OAwardProb
		Write8(pRankedSpeedFlash, 0); //JetAwardProb
		Write8(pRankedSpeedFlash, 0); //CDTime
		Write8(pRankedSpeedFlash, 0); //WeeklyHasAwardNum
		Write16(pRankedSpeedFlash, 0); //SeasonHasAwardNum

		len = pRankedSpeedFlash - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //CanPlayPinnacleBattle
	Write32(p, 0); //SavedExtraScore
	Write32(p, 0); //AnonymousModeStartScore
	Write16(p, 0); //SeasonHonerAwardNums
	for (size_t i = 0; i < n; i++)
	{ //SeasonHonerAwardInfo
		BYTE* pSeasonHonerAwardInfo = p;
		Write16(pSeasonHonerAwardInfo, 0); //len

		Write16(pSeasonHonerAwardInfo, 0); //GradeLevel
		Write8(pSeasonHonerAwardInfo, 0); //Level
		Write16(pSeasonHonerAwardInfo, 0); //RankRange[]
		Write16(pSeasonHonerAwardInfo, 0); //SeasonAppelationType
		{ //AwardInfo
			BYTE* pAwardInfo = pSeasonHonerAwardInfo;
			Write16(pAwardInfo, 0); //len

			Write32(pAwardInfo, 0); //Exp
			Write32(pAwardInfo, 0); //Money
			Write32(pAwardInfo, 0); //SuperMoney
			Write16(pAwardInfo, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAwardInfo;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAwardInfo;
				Set16(pAwardInfo, (WORD)len);
				pAwardInfo += len;
			}
			Write32(pAwardInfo, 0); //Coupons
			Write32(pAwardInfo, 0); //GuildPoint
			Write32(pAwardInfo, 0); //LuckMoney
			Write8(pAwardInfo, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAwardInfo;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAwardInfo;
				Set16(pAwardInfo, (WORD)len);
				pAwardInfo += len;
			}
			Write32(pAwardInfo, 0); //SpeedCoin

			len = pAwardInfo - pSeasonHonerAwardInfo;
			Set16(pSeasonHonerAwardInfo, (WORD)len);
			pSeasonHonerAwardInfo += len;
		}
		Write8(pSeasonHonerAwardInfo, 0); //Difficulty

		len = pSeasonHonerAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //LastSeasonTopHonerInfoIdx
	Write8(p, 0); //HasFengJianSunRenAwardData
	for (size_t i = 0; i < n; i++)
	{ //RankedMatchFengJianSunRenAwardData
		BYTE* pRankedMatchFengJianSunRenAwardData = p;
		Write16(pRankedMatchFengJianSunRenAwardData, 0); //len

		Write32(pRankedMatchFengJianSunRenAwardData, 0); //FragmentItemID
		Write32(pRankedMatchFengJianSunRenAwardData, 0); //FragmentItemNum
		Write32(pRankedMatchFengJianSunRenAwardData, 0); //RankedScoreNum
		Write32(pRankedMatchFengJianSunRenAwardData, 0); //RankedCoinItemID
		Write32(pRankedMatchFengJianSunRenAwardData, 0); //RankedCoinNum
		Write32(pRankedMatchFengJianSunRenAwardData, 0); //RankedFactoryItemID
		Write32(pRankedMatchFengJianSunRenAwardData, 0); //RankedFactoryNum
		Write32(pRankedMatchFengJianSunRenAwardData, 0); //SuperMoneyNum

		len = pRankedMatchFengJianSunRenAwardData - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //RankedCoinGradeCfgNum
	for (size_t i = 0; i < n; i++)
	{ //RankedCoinGradeCfg
		BYTE* pRankedCoinGradeCfg = p;
		Write16(pRankedCoinGradeCfg, 0); //len

		Write16(pRankedCoinGradeCfg, 0); //GradeLevel
		Write32(pRankedCoinGradeCfg, 0); //RankCoinWeeklyLimit

		len = pRankedCoinGradeCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //WeeklyAwardFactoryCoinLimit

	len = p - buf;
	SendToClient(Client, 25000, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetRankedMatchMapRecordInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetRankedMatchMapRecordInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //RecordNums
	for (size_t i = 0; i < n; i++)
	{ //RankedMatchMapRecordElementInfos
		BYTE* pRankedMatchMapRecordElementInfos = p;
		Write16(pRankedMatchMapRecordElementInfos, 0); //len

		Write32(pRankedMatchMapRecordElementInfos, 0); //MapID
		Write32(pRankedMatchMapRecordElementInfos, 0); //ParticipateNums
		Write32(pRankedMatchMapRecordElementInfos, 0); //TotalLeadingNums
		Write32(pRankedMatchMapRecordElementInfos, 0); //FinishKaoChaTaskNums
		Write32(pRankedMatchMapRecordElementInfos, 0); //MapBestRaceFinishTime
		Write32(pRankedMatchMapRecordElementInfos, 0); //ToplistID

		len = pRankedMatchMapRecordElementInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 25014, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetRankedMatchSeasonRptInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT SeasonID = Read32(p);

}

void ResponseGetRankedMatchSeasonRptInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write32(p, 0); //SeasonFinalGradeLevel
	Write32(p, 0); //SeasonFinalChildLevel
	Write32(p, 0); //SeasonFirstRankNums
	Write32(p, 0); //SeasonPartiNums
	Write32(p, 0); //SeasonWinNums
	Write32(p, 0); //SpeedGodScore
	Write32(p, 0); //SpeedGodRank
	Write16(p, 0); //SeasonAppelationInfoNums
	for (size_t i = 0; i < n; i++)
	{ //SeasonAppelationInfos
		BYTE* pSeasonAppelationInfos = p;
		Write16(pSeasonAppelationInfos, 0); //len

		Write16(pSeasonAppelationInfos, 0); //SeasonRptType
		Write16(pSeasonAppelationInfos, 0); //AppelationType
		Write16(pSeasonAppelationInfos, 0); //SeasonRptValue
		Write8(pSeasonAppelationInfos, 0); //JudgeType

		len = pSeasonAppelationInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //TotalLeadPlayerNums
	Write32(p, 0); //ParticapteLimitNums
	Write8(p, 0); //HasRankedMemoryData
	for (size_t i = 0; i < n; i++)
	{ //RankedMatchMemoryData
		BYTE* pRankedMatchMemoryData = p;
		Write16(pRankedMatchMemoryData, 0); //len

		Write32(pRankedMatchMemoryData, 0); //RegisterDiffDayNum
		Write32(pRankedMatchMemoryData, 0); //FirstParticipateSeasonID
		Write32(pRankedMatchMemoryData, 0); //FirstTopGradeSeasonID
		Write32(pRankedMatchMemoryData, 0); //TopGrade
		Write32(pRankedMatchMemoryData, 0); //TopChild
		Write8(pRankedMatchMemoryData, 0); //TopNum

		len = pRankedMatchMemoryData - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 25015, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyRankedMatchSeasonInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //PlayerSeasonInfoNums
	for (size_t i = 0; i < n; i++)
	{ //PlayerSeasonInfos
		BYTE* pPlayerSeasonInfos = p;
		Write16(pPlayerSeasonInfos, 0); //len

		Write16(pPlayerSeasonInfos, 0); //SeasonID
		Write16(pPlayerSeasonInfos, 0); //GradeLevel
		Write8(pPlayerSeasonInfos, 0); //ChildLevel
		Write16(pPlayerSeasonInfos, 0); //HighGradeLevel
		Write8(pPlayerSeasonInfos, 0); //HighChildLevel
		Write8(pPlayerSeasonInfos, 0); //SeasonInfoProcesedTag
		Write8(pPlayerSeasonInfos, 0); //SeasonComputeInfoTipTag
		Write16(pPlayerSeasonInfos, 0); //SeasonInheritTag
		Write8(pPlayerSeasonInfos, 0); //SeasonInheritTipTag
		Write16(pPlayerSeasonInfos, 0); //SpeedGodNums
		Write32(pPlayerSeasonInfos, 0); //SpeedRoundNums
		Write32(pPlayerSeasonInfos, 0); //SpeedFinishRoundNums
		Write32(pPlayerSeasonInfos, 0); //TotalRankIndex
		Write32(pPlayerSeasonInfos, 0); //ContiFinishRoundNums
		Write32(pPlayerSeasonInfos, 0); //SpeedKillAllRoundNums
		Write32(pPlayerSeasonInfos, 0); //PropRoundNums
		Write32(pPlayerSeasonInfos, 0); //PropFinishRoundNums
		Write32(pPlayerSeasonInfos, 0); //ContiFinishPropRoundNums
		Write32(pPlayerSeasonInfos, 0); //PropKillAllRoundNums
		Write8(pPlayerSeasonInfos, 0); //LastRoundIndex
		Write32(pPlayerSeasonInfos, 0); //OpenDate
		Write32(pPlayerSeasonInfos, 0); //CloseDate
		Write32(pPlayerSeasonInfos, 0); //HistroyContFinishRoundNums

		len = pPlayerSeasonInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //RankedMatchSpeedGodNums
	Write8(p, 0); //LegendSpeedGod
	Write32(p, 0); //CurrentSeasonID

	len = p - buf;
	SendToClient(Client, 25005, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyRankedMatchPromotionAwardInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //AwardNums
	for (size_t i = 0; i < n; i++)
	{ //RankedMatchPromAwardInfos
		BYTE* pRankedMatchPromAwardInfos = p;
		Write16(pRankedMatchPromAwardInfos, 0); //len

		Write32(pRankedMatchPromAwardInfos, 0); //GradeLevel
		Write32(pRankedMatchPromAwardInfos, 0); //ChildLevel
		{ //AwardInfo
			BYTE* pAwardInfo = pRankedMatchPromAwardInfos;
			Write16(pAwardInfo, 0); //len

			Write32(pAwardInfo, 0); //Exp
			Write32(pAwardInfo, 0); //Money
			Write32(pAwardInfo, 0); //SuperMoney
			Write16(pAwardInfo, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAwardInfo;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAwardInfo;
				Set16(pAwardInfo, (WORD)len);
				pAwardInfo += len;
			}
			Write32(pAwardInfo, 0); //Coupons
			Write32(pAwardInfo, 0); //GuildPoint
			Write32(pAwardInfo, 0); //LuckMoney
			Write8(pAwardInfo, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAwardInfo;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAwardInfo;
				Set16(pAwardInfo, (WORD)len);
				pAwardInfo += len;
			}
			Write32(pAwardInfo, 0); //SpeedCoin

			len = pAwardInfo - pRankedMatchPromAwardInfos;
			Set16(pRankedMatchPromAwardInfos, (WORD)len);
			pRankedMatchPromAwardInfos += len;
		}
		Write8(pRankedMatchPromAwardInfos, 0); //HaveAwarded
		Write32(pRankedMatchPromAwardInfos, 0); //AwardNeedFinishNums

		len = pRankedMatchPromAwardInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 25003, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestRankedMatchPersonalPanelInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT DstUin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseRankedMatchPersonalPanelInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResltID
	Write16(p, 0); //SeasonRecordInfoNums
	for (size_t i = 0; i < n; i++)
	{ //SeasonRecordInfos
		BYTE* pSeasonRecordInfos = p;
		Write16(pSeasonRecordInfos, 0); //len

		Write32(pSeasonRecordInfos, 0); //SeasonID
		Write32(pSeasonRecordInfos, 0); //MapID
		Write32(pSeasonRecordInfos, 0); //RaceNums
		Write32(pSeasonRecordInfos, 0); //WinNums
		Write32(pSeasonRecordInfos, 0); //FinishNums
		Write32(pSeasonRecordInfos, 0); //ArenaWinNums
		Write32(pSeasonRecordInfos, 0); //ArenaRaceNums
		Write32(pSeasonRecordInfos, 0); //ArenaFiveWinNums
		Write32(pSeasonRecordInfos, 0); //CommonlyUsedKartID
		Write32(pSeasonRecordInfos, 0); //MaxContinuousWinNums
		Write32(pSeasonRecordInfos, 0); //CurrentContinuousWinNums
		Write32(pSeasonRecordInfos, 0); //SeasonRankTop1Nums
		Write32(pSeasonRecordInfos, 0); //SeasonFinishNums
		Write32(pSeasonRecordInfos, 0); //BenmingKartID

		len = pSeasonRecordInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //FeishInfoNums
	for (size_t i = 0; i < n; i++)
	{ //FeishiInfos
		BYTE* pFeishiInfos = p;
		Write16(pFeishiInfos, 0); //len

		Write32(pFeishiInfos, 0); //FeishItemID
		Write32(pFeishiInfos, 0); //FeiShiDescLen
		Write8(pFeishiInfos, 0); //HaveOrNot

		len = pFeishiInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //SeasonDesInfoNums
	for (size_t i = 0; i < n; i++)
	{ //RankedMatchSeasonDesInfos
		BYTE* pRankedMatchSeasonDesInfos = p;
		Write16(pRankedMatchSeasonDesInfos, 0); //len

		Write32(pRankedMatchSeasonDesInfos, 0); //SeasonID
		WriteString(pRankedMatchSeasonDesInfos, 0); //SeasonName[]

		len = pRankedMatchSeasonDesInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //SeasonSuperRaceInfoNums
	for (size_t i = 0; i < n; i++)
	{ //SuperRaceInfo
		BYTE* pSuperRaceInfo = p;
		Write16(pSuperRaceInfo, 0); //len

		Write32(pSuperRaceInfo, 0); //SeasonID
		Write32(pSuperRaceInfo, 0); //SuperRaceTotalRank
		Write32(pSuperRaceInfo, 0); //SuperRaceTotalRaceNums
		Write32(pSuperRaceInfo, 0); //SuperRaceTotalFinishNums
		Write32(pSuperRaceInfo, 0); //Para1
		Write32(pSuperRaceInfo, 0); //Para2
		Write32(pSuperRaceInfo, 0); //Para3
		Write32(pSuperRaceInfo, 0); //Para4
		Write32(pSuperRaceInfo, 0); //Para5

		len = pSuperRaceInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //BestSpeedGodShowStep
	Write32(p, 0); //MaxSeasonRankTop1Nums
	Write32(p, 0); //MaxSeasonFinishNums

	len = p - buf;
	SendToClient(Client, 25012, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestRankedMatchPannelOperate(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT OperateType = Read32(p);
	UINT Time = Read32(p);

}

void ResponseRankedMatchPannelOperate(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write32(p, 0); //CurrentStat

	len = p - buf;
	SendToClient(Client, 25013, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyErrorInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //Type
	Write16(p, 0); //ReasonLen
	Write16(p, 0); //ParaNum
	Write32(p, 0); //ParaList[]

	len = p - buf;
	SendToClient(Client, 720, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestTenYearsActivityShowInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseTenYearsActivityShowInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write32(p, 0); //GlobalEquipSealPlayerNums
	Write16(p, 0); //YearMapTypeNums
	for (size_t i = 0; i < n; i++)
	{ //YearMapInfos
		BYTE* pYearMapInfos = p;
		Write16(pYearMapInfos, 0); //len

		Write16(pYearMapInfos, 0); //YearType
		Write16(pYearMapInfos, 0); //MapNums
		Write32(pYearMapInfos, 0); //MapArray[]

		len = pYearMapInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //CakeFeastInfo
		BYTE* pCakeFeastInfo = p;
		Write16(pCakeFeastInfo, 0); //len

		Write32(pCakeFeastInfo, 0); //OpenDate
		Write32(pCakeFeastInfo, 0); //CloseDate
		Write32(pCakeFeastInfo, 0); //OpenTime
		Write32(pCakeFeastInfo, 0); //CloseTime
		Write32(pCakeFeastInfo, 0); //GlobalBlessPlayerNums
		Write32(pCakeFeastInfo, 0); //PersonalBlessNums
		Write16(pCakeFeastInfo, 0); //BlessItemGeneInfoNums
		for (size_t i = 0; i < n; i++)
		{ //BlessItemGeneInfos
			BYTE* pBlessItemGeneInfos = pCakeFeastInfo;
			Write16(pBlessItemGeneInfos, 0); //len

			Write8(pBlessItemGeneInfos, 0); //TaskID
			Write32(pBlessItemGeneInfos, 0); //AlreadyAwardNums
			Write32(pBlessItemGeneInfos, 0); //AwardMoveNums
			Write32(pBlessItemGeneInfos, 0); //TaskFinishNums
			Write32(pBlessItemGeneInfos, 0); //TaskNeedValue

			len = pBlessItemGeneInfos - pCakeFeastInfo;
			Set16(pCakeFeastInfo, (WORD)len);
			pCakeFeastInfo += len;
		}
		Write16(pCakeFeastInfo, 0); //BlessWordTypeNums
		for (size_t i = 0; i < n; i++)
		{ //BlessWordInfos
			BYTE* pBlessWordInfos = pCakeFeastInfo;
			Write16(pBlessWordInfos, 0); //len

			Write32(pBlessWordInfos, 0); //BlessIndex
			Write16(pBlessWordInfos, 0); //WordInfos

			len = pBlessWordInfos - pCakeFeastInfo;
			Set16(pCakeFeastInfo, (WORD)len);
			pCakeFeastInfo += len;
		}

		len = pCakeFeastInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //AnniversaryExchangeInfo
		BYTE* pAnniversaryExchangeInfo = p;
		Write16(pAnniversaryExchangeInfo, 0); //len

		Write32(pAnniversaryExchangeInfo, 0); //OpenDate
		Write32(pAnniversaryExchangeInfo, 0); //CloseDate
		Write32(pAnniversaryExchangeInfo, 0); //OpenTime
		Write32(pAnniversaryExchangeInfo, 0); //CloseTime
		Write16(pAnniversaryExchangeInfo, 0); //AnniiversaryItemGeneInfoNums
		for (size_t i = 0; i < n; i++)
		{ //AnniversaryItemGeneInfos
			BYTE* pAnniversaryItemGeneInfos = pAnniversaryExchangeInfo;
			Write16(pAnniversaryItemGeneInfos, 0); //len

			Write8(pAnniversaryItemGeneInfos, 0); //TaskID
			Write32(pAnniversaryItemGeneInfos, 0); //AlreadyAwardNums
			Write32(pAnniversaryItemGeneInfos, 0); //AwardMoveNums
			Write32(pAnniversaryItemGeneInfos, 0); //TaskFinishNums
			Write32(pAnniversaryItemGeneInfos, 0); //TaskNeedValue

			len = pAnniversaryItemGeneInfos - pAnniversaryExchangeInfo;
			Set16(pAnniversaryExchangeInfo, (WORD)len);
			pAnniversaryExchangeInfo += len;
		}

		len = pAnniversaryExchangeInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //ActivityOpenDate
	Write32(p, 0); //ActivityCloseDate
	Write32(p, 0); //ActivityOpenTime
	Write32(p, 0); //ActivityCloseTime
	Write32(p, 0); //DailyAwardCapsuleLimitNums
	Write32(p, 0); //CurrentAwardCapsuleNums
	Write32(p, 0); //CakeFeastLastAwardBoxOpenDate
	Write8(p, 0); //CakeFeastLastAwardBoxOpenOrNot

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestTenYearsBless(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT BlessNums = Read32(p);
	UINT BlessWordIndex = Read32(p);

}

void ResponseTenYearsBless(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResutID
	Write32(p, 0); //CurrentBlessNums
	Write32(p, 0); //GlobalBlessNums

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestEquipSeal(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT SealID = Read16(p);

}

void ResponseEquipSeal(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write32(p, 0); //GlobalEquipNums
	{ //AwardInfo
		BYTE* pAwardInfo = p;
		Write16(pAwardInfo, 0); //len

		Write32(pAwardInfo, 0); //Exp
		Write32(pAwardInfo, 0); //Money
		Write32(pAwardInfo, 0); //SuperMoney
		Write16(pAwardInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAwardInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAwardInfo;
			Set16(pAwardInfo, (WORD)len);
			pAwardInfo += len;
		}
		Write32(pAwardInfo, 0); //Coupons
		Write32(pAwardInfo, 0); //GuildPoint
		Write32(pAwardInfo, 0); //LuckMoney
		Write8(pAwardInfo, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAwardInfo;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAwardInfo;
			Set16(pAwardInfo, (WORD)len);
			pAwardInfo += len;
		}
		Write32(pAwardInfo, 0); //SpeedCoin

		len = pAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //SealID

	len = p - buf;
	SendToClient(Client, 25063, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyTenYearsCfgInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //YearMedalNums
	for (size_t i = 0; i < n; i++)
	{ //YearMedalInfos
		BYTE* pYearMedalInfos = p;
		Write16(pYearMedalInfos, 0); //len

		Write32(pYearMedalInfos, 0); //ItemID
		Write16(pYearMedalInfos, 0); //YearType

		len = pYearMedalInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //YearCapusleNums
	for (size_t i = 0; i < n; i++)
	{ //CapsuleInfos
		BYTE* pCapsuleInfos = p;
		Write16(pCapsuleInfos, 0); //len

		Write32(pCapsuleInfos, 0); //ItemID
		Write16(pCapsuleInfos, 0); //YearType

		len = pCapsuleInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //YearMapTypeNums
	for (size_t i = 0; i < n; i++)
	{ //YearMapInfos
		BYTE* pYearMapInfos = p;
		Write16(pYearMapInfos, 0); //len

		Write16(pYearMapInfos, 0); //YearType
		Write16(pYearMapInfos, 0); //MapNums
		Write32(pYearMapInfos, 0); //MapArray[]

		len = pYearMapInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //YearPostCardNums
	for (size_t i = 0; i < n; i++)
	{ //YearPostCardInfos
		BYTE* pYearPostCardInfos = p;
		Write16(pYearPostCardInfos, 0); //len

		Write16(pYearPostCardInfos, 0); //YearType
		Write16(pYearPostCardInfos, 0); //PostCardNums
		for (size_t i = 0; i < n; i++)
		{ //PostCardInfos
			BYTE* pPostCardInfos = pYearPostCardInfos;
			Write16(pPostCardInfos, 0); //len

			Write32(pPostCardInfos, 0); //PostCardIndex
			Write16(pPostCardInfos, 0); //WordInfos
			Write16(pPostCardInfos, 0); //TagInfos

			len = pPostCardInfos - pYearPostCardInfos;
			Set16(pYearPostCardInfos, (WORD)len);
			pYearPostCardInfos += len;
		}

		len = pYearPostCardInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestC2SSaveDIYMapFile(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int MapID = Read32(p);
	UCHAR ExpectArea = Read8(p);
	UCHAR Cmd = Read8(p);
	USHORT PointID = Read16(p);

}

void ResponseC2SSaveDIYMapFile(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 1716, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyG2CSaveDIYMapFileResult(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen
	Write8(p, 0); //Cmd

	len = p - buf;
	SendToClient(Client, 1717, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyTenYearsCapusleInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //InfoLen
	{ //PostCardAwardInfo
		BYTE* pPostCardAwardInfo = p;
		Write16(pPostCardAwardInfo, 0); //len

		Write32(pPostCardAwardInfo, 0); //Exp
		Write32(pPostCardAwardInfo, 0); //Money
		Write32(pPostCardAwardInfo, 0); //SuperMoney
		Write16(pPostCardAwardInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pPostCardAwardInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pPostCardAwardInfo;
			Set16(pPostCardAwardInfo, (WORD)len);
			pPostCardAwardInfo += len;
		}
		Write32(pPostCardAwardInfo, 0); //Coupons
		Write32(pPostCardAwardInfo, 0); //GuildPoint
		Write32(pPostCardAwardInfo, 0); //LuckMoney
		Write8(pPostCardAwardInfo, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pPostCardAwardInfo;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pPostCardAwardInfo;
			Set16(pPostCardAwardInfo, (WORD)len);
			pPostCardAwardInfo += len;
		}
		Write32(pPostCardAwardInfo, 0); //SpeedCoin

		len = pPostCardAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //TagInfos
	Write8(p, 0); //PostCardWithPlayerData
	Write32(p, 0); //PostCardIndex
	Write32(p, 0); //RegisterDate
	Write32(p, 0); //FirstPerPetID
	Write32(p, 0); //FirstPerKartID
	Write32(p, 0); //BorderHonorValue
	Write32(p, 0); //CharmValue
	Write32(p, 0); //AccountValue
	Write32(p, 0); //PlayerNumsInSameBirDay

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestSharePostCardInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	USHORT PostCardInfoLen = Read16(p);
	USHORT PostCardUrlLen = Read16(p);

}

void ResponseSharePostCardInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyClientDomainResolve(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //DomainCnt
	for (size_t i = 0; i < n; i++)
	{ //DomainList
		BYTE* pDomainList = p;
		Write16(pDomainList, 0); //len

		{ //MultiIPInfo
			BYTE* pMultiIPInfo = pDomainList;
			Write16(pMultiIPInfo, 0); //len

			Write8(pMultiIPInfo, 0); //IPCount
			Write32(pMultiIPInfo, 0); //ServerIP[]
			Write8(pMultiIPInfo, 0); //DomainLen

			len = pMultiIPInfo - pDomainList;
			Set16(pDomainList, (WORD)len);
			pDomainList += len;
		}
		Write16(pDomainList, 0); //Port
		Write32(pDomainList, 0); //Uin
		Write32(pDomainList, 0); //AreaID
		WriteString(pDomainList, 0); //HttpDNSAddr[]

		len = pDomainList - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 2100, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestReportDomainResolveResult(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	{ //DomainResult
		BYTE* pDomainResult = p;
		len = Read16(pDomainResult);

		{ //MultiIPInfo
			BYTE* pMultiIPInfo = pDomainResult;
			len = Read16(pMultiIPInfo);

			UCHAR IPCount = Read8(pMultiIPInfo);
			UINT[] ServerIP[] = Read32(pMultiIPInfo);
			UCHAR DomainLen = Read8(pMultiIPInfo);

			pDomainResult += len;
		}
		{ //UDPResult
			BYTE* pUDPResult = pDomainResult;
			len = Read16(pUDPResult);

			UCHAR IPCount = Read8(pUDPResult);
			for (size_t i = 0; i < n; i++)
			{ //SingleIPResult
				BYTE* pSingleIPResult = pUDPResult;
				len = Read16(pSingleIPResult);

				UINT ServerIP = Read32(pSingleIPResult);
				USHORT Port = Read16(pSingleIPResult);
				UINT ClientOuterIP = Read32(pSingleIPResult);
				int DetectCnt = Read32(pSingleIPResult);
				for (size_t i = 0; i < n; i++)
				{ //SingleTimesResult
					BYTE* pSingleTimesResult = pSingleIPResult;
					len = Read16(pSingleTimesResult);

					int DetectRTT = Read32(pSingleTimesResult);
					int DetectInnerRTT = Read32(pSingleTimesResult);
					UINT ServerRecvTime_s = Read32(pSingleTimesResult);
					UINT ServerRecvTime_us = Read32(pSingleTimesResult);
					UINT ServerSendTime_s = Read32(pSingleTimesResult);
					UINT ServerSendTime_us = Read32(pSingleTimesResult);
					UINT ClientSendTime = Read32(pSingleTimesResult);
					UINT ClientRecvTime = Read32(pSingleTimesResult);

					pSingleIPResult += len;
				}
				int TimeoutCnt = Read32(pSingleIPResult);
				UINT TimeoutPercent = Read32(pSingleIPResult);
				int SuccCnt = Read32(pSingleIPResult);
				int SysErrCnt = Read32(pSingleIPResult);
				UINT AvgRTT = Read32(pSingleIPResult);
				UINT AvgInnerRTT = Read32(pSingleIPResult);
				UINT AvgNetRTT = Read32(pSingleIPResult);
				UINT SDNetRTT = Read32(pSingleIPResult);

				pUDPResult += len;
			}

			pDomainResult += len;
		}
		{ //PingResult
			BYTE* pPingResult = pDomainResult;
			len = Read16(pPingResult);

			int DetectCnt = Read32(pPingResult);
			int[] DetectRTT[] = Read32(pPingResult);
			int TimeoutCnt = Read32(pPingResult);
			UINT TimeoutPercent = Read32(pPingResult);
			UINT AvgRTT = Read32(pPingResult);

			pDomainResult += len;
		}
		{ //DNSResult
			BYTE* pDNSResult = pDomainResult;
			len = Read16(pDNSResult);

			int ResolveCost = Read32(pDNSResult);
			UINT ResolvedIP = Read32(pDNSResult);
			int ResultID = Read32(pDNSResult);

			pDomainResult += len;
		}
		{ //HttpDNSResult
			BYTE* pHttpDNSResult = pDomainResult;
			len = Read16(pHttpDNSResult);

			int ResolveCost = Read32(pHttpDNSResult);
			UINT ResolvedIP = Read32(pHttpDNSResult);
			int ResultID = Read32(pHttpDNSResult);

			pDomainResult += len;
		}
		{ //EncryptHttpDNSResult
			BYTE* pEncryptHttpDNSResult = pDomainResult;
			len = Read16(pEncryptHttpDNSResult);

			int ResolveCost = Read32(pEncryptHttpDNSResult);
			UINT ResolvedIP = Read32(pEncryptHttpDNSResult);
			int ResultID = Read32(pEncryptHttpDNSResult);

			pDomainResult += len;
		}

		p += len;
	}

}

void RequestReportGameFrameInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT GameSeqIDHigh = Read32(p);
	UINT GameSeqIDLow = Read32(p);
	int MapID = Read32(p);
	USHORT CheckPointID = Read16(p);
	UINT Num = Read32(p);
	for (size_t i = 0; i < n; i++)
	{ //FrameList
		BYTE* pFrameList = p;
		len = Read16(pFrameList);

		Un TimeElaps = ReadUn(pFrameList);
		Un fInPosX[] = ReadUn(pFrameList);
		Un fInPosY[] = ReadUn(pFrameList);
		Un fInPosZ[] = ReadUn(pFrameList);
		Un fStepX[] = ReadUn(pFrameList);
		Un fStepY[] = ReadUn(pFrameList);
		Un fStepZ[] = ReadUn(pFrameList);
		Un fCarMat[] = ReadUn(pFrameList);
		Un fOutPosX[] = ReadUn(pFrameList);
		Un fOutPosY[] = ReadUn(pFrameList);
		Un fOutPosZ[] = ReadUn(pFrameList);
		Un fAccTime[] = ReadUn(pFrameList);
		Un fFrameTime[] = ReadUn(pFrameList);
		UCHAR SetPos = Read8(pFrameList);
		UCHAR Collision = Read8(pFrameList);

		p += len;
	}

}

void RequestReportGameFrameCheckInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT Result = Read16(p);
	{ //GameFrameInfo
		BYTE* pGameFrameInfo = p;
		len = Read16(pGameFrameInfo);

		UINT Uin = Read32(pGameFrameInfo);
		int MapID = Read32(pGameFrameInfo);
		USHORT FrameNum = Read16(pGameFrameInfo);
		for (size_t i = 0; i < n; i++)
		{ //FrameInfo
			BYTE* pFrameInfo = pGameFrameInfo;
			len = Read16(pFrameInfo);

			USHORT CheckPointID = Read16(pFrameInfo);
			UINT Num = Read32(pFrameInfo);
			for (size_t i = 0; i < n; i++)
			{ //FrameList
				BYTE* pFrameList = pFrameInfo;
				len = Read16(pFrameList);

				Un TimeElaps = ReadUn(pFrameList);
				Un fInPosX[] = ReadUn(pFrameList);
				Un fInPosY[] = ReadUn(pFrameList);
				Un fInPosZ[] = ReadUn(pFrameList);
				Un fStepX[] = ReadUn(pFrameList);
				Un fStepY[] = ReadUn(pFrameList);
				Un fStepZ[] = ReadUn(pFrameList);
				Un fCarMat[] = ReadUn(pFrameList);
				Un fOutPosX[] = ReadUn(pFrameList);
				Un fOutPosY[] = ReadUn(pFrameList);
				Un fOutPosZ[] = ReadUn(pFrameList);
				Un fAccTime[] = ReadUn(pFrameList);
				Un fFrameTime[] = ReadUn(pFrameList);
				UCHAR SetPos = Read8(pFrameList);
				UCHAR Collision = Read8(pFrameList);

				pFrameInfo += len;
			}

			pGameFrameInfo += len;
		}

		p += len;
	}

}

void RequestGetNewSpringYearsShowInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR ReqType = Read8(p);

}

void ResponseGetNewSpringYearShowInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //MapIndexNums
	for (size_t i = 0; i < n; i++)
	{ //LuckBagExtractAwardInfos
		BYTE* pLuckBagExtractAwardInfos = p;
		Write16(pLuckBagExtractAwardInfos, 0); //len

		Write8(pLuckBagExtractAwardInfos, 0); //AwardIndex
		Write16(pLuckBagExtractAwardInfos, 0); //AwardType
		Write16(pLuckBagExtractAwardInfos, 0); //EventAwardID
		Write8(pLuckBagExtractAwardInfos, 0); //BehaviorEventHasFinished
		Write8(pLuckBagExtractAwardInfos, 0); //GetEventAward
		{ //AwardItemInfo
			BYTE* pAwardItemInfo = pLuckBagExtractAwardInfos;
			Write16(pAwardItemInfo, 0); //len

			Write32(pAwardItemInfo, 0); //Exp
			Write32(pAwardItemInfo, 0); //Money
			Write32(pAwardItemInfo, 0); //SuperMoney
			Write16(pAwardItemInfo, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAwardItemInfo;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //Coupons
			Write32(pAwardItemInfo, 0); //GuildPoint
			Write32(pAwardItemInfo, 0); //LuckMoney
			Write8(pAwardItemInfo, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAwardItemInfo;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //SpeedCoin

			len = pAwardItemInfo - pLuckBagExtractAwardInfos;
			Set16(pLuckBagExtractAwardInfos, (WORD)len);
			pLuckBagExtractAwardInfos += len;
		}

		len = pLuckBagExtractAwardInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //LuckBagChanceGeneInfoNums
	for (size_t i = 0; i < n; i++)
	{ //ExtractLuckBagChanceGeneInfos
		BYTE* pExtractLuckBagChanceGeneInfos = p;
		Write16(pExtractLuckBagChanceGeneInfos, 0); //len

		Write8(pExtractLuckBagChanceGeneInfos, 0); //TaskID
		Write32(pExtractLuckBagChanceGeneInfos, 0); //AlreadyAwardNums
		Write32(pExtractLuckBagChanceGeneInfos, 0); //AwardMoveNums
		Write32(pExtractLuckBagChanceGeneInfos, 0); //TaskFinishNums
		Write32(pExtractLuckBagChanceGeneInfos, 0); //TaskNeedValue

		len = pExtractLuckBagChanceGeneInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //OpenDate
	Write32(p, 0); //CloseDate
	Write32(p, 0); //OpenTime
	Write32(p, 0); //CloseTime
	Write32(p, 0); //CurrentExtractLevelID
	Write32(p, 0); //CurrentLevelExtractNums
	Write32(p, 0); //CurrentLevelExtractMaxNums
	Write32(p, 0); //BufferTag
	Write16(p, 0); //ExtractLuckBagLevelNums
	for (size_t i = 0; i < n; i++)
	{ //ExtractLevelCfgInfos
		BYTE* pExtractLevelCfgInfos = p;
		Write16(pExtractLevelCfgInfos, 0); //len

		Write32(pExtractLevelCfgInfos, 0); //LevelID
		Write32(pExtractLevelCfgInfos, 0); //NeedExtractNums
		Write32(pExtractLevelCfgInfos, 0); //AwardElementNums
		Write32(pExtractLevelCfgInfos, 0); //AwardLuckItemNums
		Write32(pExtractLevelCfgInfos, 0); //AwardLowLuckItemNums
		Write32(pExtractLevelCfgInfos, 0); //AwardHighLuckItemNums

		len = pExtractLevelCfgInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //SpringFestivalEntryOpenOrNot
	Write32(p, 0); //LuckExchangeOpenDate
	Write32(p, 0); //LuckExchangeCloseDate
	Write32(p, 0); //LuckExchangeOpenTime
	Write32(p, 0); //LuckExchangeCloseTime
	Write32(p, 0); //TotalExtractNums

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestExtractLuckBagInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseExtractLuckBagInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write8(p, 0); //UpdateAwardInfo
	Write16(p, 0); //AwardInfoNums
	for (size_t i = 0; i < n; i++)
	{ //LuckBagAwardInfos
		BYTE* pLuckBagAwardInfos = p;
		Write16(pLuckBagAwardInfos, 0); //len

		Write8(pLuckBagAwardInfos, 0); //AwardIndex
		Write16(pLuckBagAwardInfos, 0); //AwardType
		Write16(pLuckBagAwardInfos, 0); //EventAwardID
		Write8(pLuckBagAwardInfos, 0); //BehaviorEventHasFinished
		Write8(pLuckBagAwardInfos, 0); //GetEventAward
		{ //AwardItemInfo
			BYTE* pAwardItemInfo = pLuckBagAwardInfos;
			Write16(pAwardItemInfo, 0); //len

			Write32(pAwardItemInfo, 0); //Exp
			Write32(pAwardItemInfo, 0); //Money
			Write32(pAwardItemInfo, 0); //SuperMoney
			Write16(pAwardItemInfo, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAwardItemInfo;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //Coupons
			Write32(pAwardItemInfo, 0); //GuildPoint
			Write32(pAwardItemInfo, 0); //LuckMoney
			Write8(pAwardItemInfo, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAwardItemInfo;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //SpeedCoin

			len = pAwardItemInfo - pLuckBagAwardInfos;
			Set16(pLuckBagAwardInfos, (WORD)len);
			pLuckBagAwardInfos += len;
		}

		len = pLuckBagAwardInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //BufferTag
	Write8(p, 0); //Promotion
	Write32(p, 0); //CurrentExtractLevelID
	Write32(p, 0); //CurrentLevelExtractNums
	Write32(p, 0); //CurrentLevelExtractMaxNums
	Write32(p, 0); //ExtractedMapIndex
	Write32(p, 0); //AwardLuckItemNums
	Write32(p, 0); //TotalExtractNums

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetBigDeliveryShowInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetBigDeliveryShowInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //DeliveryInfoNums
	for (size_t i = 0; i < n; i++)
	{ //DeliveryInfos
		BYTE* pDeliveryInfos = p;
		Write16(pDeliveryInfos, 0); //len

		Write32(pDeliveryInfos, 0); //DeliveryIndex
		Write32(pDeliveryInfos, 0); //OpenDate
		Write32(pDeliveryInfos, 0); //CloseDate
		Write32(pDeliveryInfos, 0); //OpenTime
		Write32(pDeliveryInfos, 0); //CloseTime
		Write16(pDeliveryInfos, 0); //AwardNums
		for (size_t i = 0; i < n; i++)
		{ //DeliveryAwardInfos
			BYTE* pDeliveryAwardInfos = pDeliveryInfos;
			Write16(pDeliveryAwardInfos, 0); //len

			{ //AwardInfo
				BYTE* pAwardInfo = pDeliveryAwardInfos;
				Write16(pAwardInfo, 0); //len

				Write32(pAwardInfo, 0); //Exp
				Write32(pAwardInfo, 0); //Money
				Write32(pAwardInfo, 0); //SuperMoney
				Write16(pAwardInfo, 0); //ItemNum
				for (size_t i = 0; i < n; i++)
				{ //ItemInfo
					BYTE* pItemInfo = pAwardInfo;
					Write16(pItemInfo, 0); //len

					Write32(pItemInfo, 0); //ItemID
					Write32(pItemInfo, 0); //ItemNum
					Write32(pItemInfo, 0); //AvailPeriod
					Write8(pItemInfo, 0); //Status
					WriteUn(pItemInfo, 0); //ObtainTime
					Write32(pItemInfo, 0); //OtherAttribute
					Write16(pItemInfo, 0); //ItemType

					len = pItemInfo - pAwardInfo;
					Set16(pAwardInfo, (WORD)len);
					pAwardInfo += len;
				}
				Write32(pAwardInfo, 0); //Coupons
				Write32(pAwardInfo, 0); //GuildPoint
				Write32(pAwardInfo, 0); //LuckMoney
				Write8(pAwardInfo, 0); //ExtendInfoNum
				for (size_t i = 0; i < n; i++)
				{ //ExtendInfoAward
					BYTE* pExtendInfoAward = pAwardInfo;
					Write16(pExtendInfoAward, 0); //len

					Write16(pExtendInfoAward, 0); //Key
					Write32(pExtendInfoAward, 0); //AddValue
					Write32(pExtendInfoAward, 0); //TotalValue
					Write8(pExtendInfoAward, 0); //ShowPriority
					Write16(pExtendInfoAward, 0); //BuyNeedScore
					Write8(pExtendInfoAward, 0); //OneMatchMaxNum

					len = pExtendInfoAward - pAwardInfo;
					Set16(pAwardInfo, (WORD)len);
					pAwardInfo += len;
				}
				Write32(pAwardInfo, 0); //SpeedCoin

				len = pAwardInfo - pDeliveryAwardInfos;
				Set16(pDeliveryAwardInfos, (WORD)len);
				pDeliveryAwardInfos += len;
			}
			Write32(pDeliveryAwardInfos, 0); //CurrentWishPlayerNums
			Write32(pDeliveryAwardInfos, 0); //TotalAwardNums
			Write32(pDeliveryAwardInfos, 0); //MakeWishNeedItemNums
			Write32(pDeliveryAwardInfos, 0); //AwardIndex

			len = pDeliveryAwardInfos - pDeliveryInfos;
			Set16(pDeliveryInfos, (WORD)len);
			pDeliveryInfos += len;
		}
		Write32(pDeliveryInfos, 0); //ReceAwardOpenDate
		Write32(pDeliveryInfos, 0); //ReceAwardCloseDate
		Write32(pDeliveryInfos, 0); //ReceAwardOpenTime
		Write32(pDeliveryInfos, 0); //ReceAwardCloseTime
		Write32(pDeliveryInfos, 0); //MakeWishAwardIndex

		len = pDeliveryInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //WeeklyCollectLuckNums
	Write16(p, 0); //LuckChanceGeneInfoNums
	for (size_t i = 0; i < n; i++)
	{ //ExtractLuckChanceGeneInfos
		BYTE* pExtractLuckChanceGeneInfos = p;
		Write16(pExtractLuckChanceGeneInfos, 0); //len

		Write8(pExtractLuckChanceGeneInfos, 0); //TaskID
		Write32(pExtractLuckChanceGeneInfos, 0); //AlreadyAwardNums
		Write32(pExtractLuckChanceGeneInfos, 0); //AwardMoveNums
		Write32(pExtractLuckChanceGeneInfos, 0); //TaskFinishNums
		Write32(pExtractLuckChanceGeneInfos, 0); //TaskNeedValue

		len = pExtractLuckChanceGeneInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //CurrentOpenDeliveryIndex
	Write32(p, 0); //CurrentMakeWishAwardIndex

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestMakeWishForBigDelivery(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT AwardIndex = Read32(p);
	UINT DeliveryIndex = Read32(p);

}

void ResponseMakeWishForBigDelivery(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write32(p, 0); //AwardIndex
	Write32(p, 0); //DeliveryIndex

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyMakeWishAwardInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	{ //AwardInfo
		BYTE* pAwardInfo = p;
		Write16(pAwardInfo, 0); //len

		Write32(pAwardInfo, 0); //Exp
		Write32(pAwardInfo, 0); //Money
		Write32(pAwardInfo, 0); //SuperMoney
		Write16(pAwardInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAwardInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAwardInfo;
			Set16(pAwardInfo, (WORD)len);
			pAwardInfo += len;
		}
		Write32(pAwardInfo, 0); //Coupons
		Write32(pAwardInfo, 0); //GuildPoint
		Write32(pAwardInfo, 0); //LuckMoney
		Write8(pAwardInfo, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAwardInfo;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAwardInfo;
			Set16(pAwardInfo, (WORD)len);
			pAwardInfo += len;
		}
		Write32(pAwardInfo, 0); //SpeedCoin

		len = pAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //MakeWishSucc
	Write32(p, 0); //MakeWishDeliveryIndex

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyTopUIItemInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //Num
	for (size_t i = 0; i < n; i++)
	{ //TopUIItemInfo
		BYTE* pTopUIItemInfo = p;
		Write16(pTopUIItemInfo, 0); //len

		Write8(pTopUIItemInfo, 0); //Type
		Write16(pTopUIItemInfo, 0); //ID
		Write16(pTopUIItemInfo, 0); //Tag
		Write16(pTopUIItemInfo, 0); //NameLen
		Write16(pTopUIItemInfo, 0); //PrompLen

		len = pTopUIItemInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //RecommendModeInfo
		BYTE* pRecommendModeInfo = p;
		Write16(pRecommendModeInfo, 0); //len

		Write16(pRecommendModeInfo, 0); //ModeNum
		for (size_t i = 0; i < n; i++)
		{ //ModeInfo
			BYTE* pModeInfo = pRecommendModeInfo;
			Write16(pModeInfo, 0); //len

			Write16(pModeInfo, 0); //ModeID
			Write16(pModeInfo, 0); //Status
			Write32(pModeInfo, 0); //Privige
			Write16(pModeInfo, 0); //PrompLen

			len = pModeInfo - pRecommendModeInfo;
			Set16(pRecommendModeInfo, (WORD)len);
			pRecommendModeInfo += len;
		}

		len = pRecommendModeInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //Count
	for (size_t i = 0; i < n; i++)
	{ //EntryList
		BYTE* pEntryList = p;
		Write16(pEntryList, 0); //len

		Write8(pEntryList, 0); //Type
		Write8(pEntryList, 0); //Status
		Write16(pEntryList, 0); //PromptLen
		Write8(pEntryList, 0); //Tag
		Write8(pEntryList, 0); //Icon
		Write8(pEntryList, 0); //Kind
		Write8(pEntryList, 0); //Privilige
		Write8(pEntryList, 0); //IsTodayOpen
		Write8(pEntryList, 0); //SetType
		Write8(pEntryList, 0); //EmbedType
		Write8(pEntryList, 0); //LoginWindow

		len = pEntryList - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //SetNum
	for (size_t i = 0; i < n; i++)
	{ //EntrySet
		BYTE* pEntrySet = p;
		Write16(pEntrySet, 0); //len

		Write8(pEntrySet, 0); //Count
		for (size_t i = 0; i < n; i++)
		{ //EntryList
			BYTE* pEntryList = pEntrySet;
			Write16(pEntryList, 0); //len

			Write8(pEntryList, 0); //Type
			Write8(pEntryList, 0); //Status
			Write16(pEntryList, 0); //PromptLen
			Write8(pEntryList, 0); //Tag
			Write8(pEntryList, 0); //Icon
			Write8(pEntryList, 0); //Kind
			Write8(pEntryList, 0); //Privilige
			Write8(pEntryList, 0); //IsTodayOpen
			Write8(pEntryList, 0); //SetType
			Write8(pEntryList, 0); //EmbedType
			Write8(pEntryList, 0); //LoginWindow

			len = pEntryList - pEntrySet;
			Set16(pEntrySet, (WORD)len);
			pEntrySet += len;
		}

		len = pEntrySet - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //MouseOverNum
	for (size_t i = 0; i < n; i++)
	{ //MouseOverTipsCfg
		BYTE* pMouseOverTipsCfg = p;
		Write16(pMouseOverTipsCfg, 0); //len

		Write16(pMouseOverTipsCfg, 0); //ID
		Write16(pMouseOverTipsCfg, 0); //PrompLen

		len = pMouseOverTipsCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 25116, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetBarrageInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR Type = Read8(p);

}

void ResponseGetBarrageInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write8(p, 0); //Type
	Write32(p, 0); //Num
	for (size_t i = 0; i < n; i++)
	{ //BarrageInfo
		BYTE* pBarrageInfo = p;
		Write16(pBarrageInfo, 0); //len

		Write32(pBarrageInfo, 0); //Uin
		Write32(pBarrageInfo, 0); //Time
		Write16(pBarrageInfo, 0); //ContentLen

		len = pBarrageInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasMoreInfo

	len = p - buf;
	SendToClient(Client, 25107, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyGetBarrageMoreInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //Type
	Write32(p, 0); //Num
	for (size_t i = 0; i < n; i++)
	{ //BarrageInfo
		BYTE* pBarrageInfo = p;
		Write16(pBarrageInfo, 0); //len

		Write32(pBarrageInfo, 0); //Uin
		Write32(pBarrageInfo, 0); //Time
		Write16(pBarrageInfo, 0); //ContentLen

		len = pBarrageInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasNext

	len = p - buf;
	SendToClient(Client, 25109, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestSendOneBarrage(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR Type = Read8(p);
	{ //BarrageInfo
		BYTE* pBarrageInfo = p;
		len = Read16(pBarrageInfo);

		UINT Uin = Read32(pBarrageInfo);
		UINT Time = Read32(pBarrageInfo);
		USHORT ContentLen = Read16(pBarrageInfo);

		p += len;
	}

}

void ResponseSendOneBarrage(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write8(p, 0); //Type
	{ //BarrageInfo
		BYTE* pBarrageInfo = p;
		Write16(pBarrageInfo, 0); //len

		Write32(pBarrageInfo, 0); //Uin
		Write32(pBarrageInfo, 0); //Time
		Write16(pBarrageInfo, 0); //ContentLen

		len = pBarrageInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 25106, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestReportMapDIYEditInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR Type = Read8(p);
	USHORT Num = Read16(p);
	for (size_t i = 0; i < n; i++)
	{ //Info
		BYTE* pInfo = p;
		len = Read16(pInfo);

		UINT Index = Read32(pInfo);
		UINT MaterialIndex = Read32(pInfo);
		UINT ModeIndex = Read32(pInfo);
		UINT EditablePosIndex = Read32(pInfo);
		int PosX = Read32(pInfo);
		int PosY = Read32(pInfo);
		int PosZ = Read32(pInfo);

		p += len;
	}

}

void ResponseReportMapDIYEditInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write8(p, 0); //Type

	len = p - buf;
	SendToClient(Client, 25108, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestInternationalSeriesGetInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseInternationalSeriesGetInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen
	Write32(p, 0); //CoinNum
	Write16(p, 0); //Score
	Write16(p, 0); //CanGetCoinNum
	Write16(p, 0); //NextRefreshCoinTime
	Write32(p, 0); //BeginDate
	Write32(p, 0); //EndDate
	Write32(p, 0); //CoinClearDate
	for (size_t i = 0; i < n; i++)
	{ //MapIDList
		BYTE* pMapIDList = p;
		Write16(pMapIDList, 0); //len

		Write32(pMapIDList, 0); //MapIDList[]

		len = pMapIDList - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasGotAward
	for (size_t i = 0; i < n; i++)
	{ //BoxInfo
		BYTE* pBoxInfo = p;
		Write16(pBoxInfo, 0); //len

		Write16(pBoxInfo, 0); //BoxNeedCoins
		{ //Award
			BYTE* pAward = pBoxInfo;
			Write16(pAward, 0); //len

			Write32(pAward, 0); //Exp
			Write32(pAward, 0); //Money
			Write32(pAward, 0); //SuperMoney
			Write16(pAward, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAward;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAward;
				Set16(pAward, (WORD)len);
				pAward += len;
			}
			Write32(pAward, 0); //Coupons
			Write32(pAward, 0); //GuildPoint
			Write32(pAward, 0); //LuckMoney
			Write8(pAward, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAward;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAward;
				Set16(pAward, (WORD)len);
				pAward += len;
			}
			Write32(pAward, 0); //SpeedCoin

			len = pAward - pBoxInfo;
			Set16(pBoxInfo, (WORD)len);
			pBoxInfo += len;
		}

		len = pBoxInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //CurScoreCanGetCoinNum

	len = p - buf;
	SendToClient(Client, 25110, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestInternationalSeriesGetChallengeData(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR IsRefresh = Read8(p);

}

void ResponseInternationalSeriesGetChallengeData(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen
	Write8(p, 0); //IsRefresh
	Write16(p, 0); //Score
	Write8(p, 0); //LeftChallengeNum
	Write8(p, 0); //LeftRefreshNum
	Write8(p, 0); //ObjNum
	for (size_t i = 0; i < n; i++)
	{ //ChallengeObjList
		BYTE* pChallengeObjList = p;
		Write16(pChallengeObjList, 0); //len

		Write32(pChallengeObjList, 0); //Uin
		Write8(pChallengeObjList, 0); //NickNameLen
		Write8(pChallengeObjList, 0); //AreaID
		Write16(pChallengeObjList, 0); //Score
		Write16(pChallengeObjList, 0); //CurCoinNum
		Write16(pChallengeObjList, 0); //CanWinNum
		Write32(pChallengeObjList, 0); //MapID1
		Write16(pChallengeObjList, 0); //TargetDistance1
		Write32(pChallengeObjList, 0); //MapID2
		Write16(pChallengeObjList, 0); //TargetDistance2
		Write32(pChallengeObjList, 0); //MapID3
		Write16(pChallengeObjList, 0); //TargetDistance3
		Write8(pChallengeObjList, 0); //IsRobProtected

		len = pChallengeObjList - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //NextRefreshLefttime
	Write32(p, 0); //SelfMapID1
	Write16(p, 0); //SelfDistance1
	Write32(p, 0); //SelfMapID2
	Write16(p, 0); //SelfDistance2
	Write32(p, 0); //SelfMapID3
	Write16(p, 0); //SelfDistance3
	Write8(p, 0); //IsScoreDesc

	len = p - buf;
	SendToClient(Client, 25111, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestInternationalSeriesOperate(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR OperateType = Read8(p);
	UCHAR BoxIndex = Read8(p);
	UCHAR ChallengeIndex = Read8(p);

}

void ResponseInternationalSeriesOperate(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //Time
	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen
	Write8(p, 0); //OperateType
	Write8(p, 0); //BoxIndex
	Write16(p, 0); //AwardCoins
	{ //Award
		BYTE* pAward = p;
		Write16(pAward, 0); //len

		Write32(pAward, 0); //Exp
		Write32(pAward, 0); //Money
		Write32(pAward, 0); //SuperMoney
		Write16(pAward, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAward;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write32(pAward, 0); //Coupons
		Write32(pAward, 0); //GuildPoint
		Write32(pAward, 0); //LuckMoney
		Write8(pAward, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAward;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write32(pAward, 0); //SpeedCoin

		len = pAward - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasNewChallengeObj
	for (size_t i = 0; i < n; i++)
	{ //ChallengeObjList
		BYTE* pChallengeObjList = p;
		Write16(pChallengeObjList, 0); //len

		Write32(pChallengeObjList, 0); //Uin
		Write8(pChallengeObjList, 0); //NickNameLen
		Write8(pChallengeObjList, 0); //AreaID
		Write16(pChallengeObjList, 0); //Score
		Write16(pChallengeObjList, 0); //CurCoinNum
		Write16(pChallengeObjList, 0); //CanWinNum
		Write32(pChallengeObjList, 0); //MapID1
		Write16(pChallengeObjList, 0); //TargetDistance1
		Write32(pChallengeObjList, 0); //MapID2
		Write16(pChallengeObjList, 0); //TargetDistance2
		Write32(pChallengeObjList, 0); //MapID3
		Write16(pChallengeObjList, 0); //TargetDistance3
		Write8(pChallengeObjList, 0); //IsRobProtected

		len = pChallengeObjList - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ChallengeIndex
	Write8(p, 0); //StageNum
	for (size_t i = 0; i < n; i++)
	{ //MapInfo
		BYTE* pMapInfo = p;
		Write16(pMapInfo, 0); //len

		Write32(pMapInfo, 0); //MapID
		Write16(pMapInfo, 0); //TargetDistance
		Write8(pMapInfo, 0); //UuidLen

		len = pMapInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //CurrentCoins
	Write8(p, 0); //HasChallengeRecord
	for (size_t i = 0; i < n; i++)
	{ //ChallengeRecord
		BYTE* pChallengeRecord = p;
		Write16(pChallengeRecord, 0); //len

		Write8(pChallengeRecord, 0); //RecordNum
		for (size_t i = 0; i < n; i++)
		{ //RecordList
			BYTE* pRecordList = pChallengeRecord;
			Write16(pRecordList, 0); //len

			Write32(pRecordList, 0); //Uin
			Write8(pRecordList, 0); //NickNameLen
			Write8(pRecordList, 0); //Type
			Write8(pRecordList, 0); //Stage
			Write16(pRecordList, 0); //CurScore
			Write16(pRecordList, 0); //ScoreInc
			Write16(pRecordList, 0); //CoinInc
			Write8(pRecordList, 0); //Result
			Write32(pRecordList, 0); //MapID1
			Write16(pRecordList, 0); //Distance1
			Write16(pRecordList, 0); //OppoDistance1
			Write32(pRecordList, 0); //MapID2
			Write16(pRecordList, 0); //Distance2
			Write16(pRecordList, 0); //OppoDistance2
			Write32(pRecordList, 0); //MapID3
			Write16(pRecordList, 0); //Distance3
			Write16(pRecordList, 0); //OppoDistance3
			Write32(pRecordList, 0); //ChallengeTime

			len = pRecordList - pChallengeRecord;
			Set16(pChallengeRecord, (WORD)len);
			pChallengeRecord += len;
		}

		len = pChallengeRecord - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //CurScoreCanGetCoinNum

	len = p - buf;
	SendToClient(Client, 25112, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyInternationalSeriesChallengeResult(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write8(p, 0); //Result
	Write16(p, 0); //ScoreInc
	Write16(p, 0); //ChallengeAwardCoin
	Write16(p, 0); //ScoreIncAwardCoin
	Write16(p, 0); //RobCoin
	Write16(p, 0); //CurrentScore
	Write16(p, 0); //OppoScore
	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen
	Write8(p, 0); //OriLevel
	Write8(p, 0); //NewLevel

	len = p - buf;
	SendToClient(Client, 25113, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetDreamKiteCfg(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetDreamKiteCfg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //TodayWeather
	Write16(p, 0); //TotalFlyTime
	Write16(p, 0); //TodayLeftTime
	Write16(p, 0); //IsHelpOtherPlayer
	Write32(p, 0); //SelfHight
	{ //OpenCfg
		BYTE* pOpenCfg = p;
		Write16(pOpenCfg, 0); //len

		Write32(pOpenCfg, 0); //OpenDate
		Write32(pOpenCfg, 0); //CloseDate
		Write32(pOpenCfg, 0); //OpenTime
		Write32(pOpenCfg, 0); //CloseTime

		len = pOpenCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //TaskCfg
		BYTE* pTaskCfg = p;
		Write16(pTaskCfg, 0); //len

		Write32(pTaskCfg, 0); //ItemID
		Write32(pTaskCfg, 0); //DayMaxNum
		Write32(pTaskCfg, 0); //AddFateValueBrRedLine
		Write32(pTaskCfg, 0); //RedLineTaskNum
		for (size_t i = 0; i < n; i++)
		{ //RedLineTaskCfg
			BYTE* pRedLineTaskCfg = pTaskCfg;
			Write16(pRedLineTaskCfg, 0); //len

			Write32(pRedLineTaskCfg, 0); //TaskID
			Write32(pRedLineTaskCfg, 0); //AddRedLineNum
			Write32(pRedLineTaskCfg, 0); //AlreadyGotNum
			Write32(pRedLineTaskCfg, 0); //CanMaxGetNum

			len = pRedLineTaskCfg - pTaskCfg;
			Set16(pTaskCfg, (WORD)len);
			pTaskCfg += len;
		}

		len = pTaskCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //OtherPlayerNum
	for (size_t i = 0; i < n; i++)
	{ //OtherPlayerKiteInfo
		BYTE* pOtherPlayerKiteInfo = p;
		Write16(pOtherPlayerKiteInfo, 0); //len

		Write32(pOtherPlayerKiteInfo, 0); //Uin
		Write8(pOtherPlayerKiteInfo, 0); //NickName[]
		Write32(pOtherPlayerKiteInfo, 0); //Hight

		len = pOtherPlayerKiteInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //MaterialCfgNum
	for (size_t i = 0; i < n; i++)
	{ //MaterialCfg
		BYTE* pMaterialCfg = p;
		Write16(pMaterialCfg, 0); //len

		Write16(pMaterialCfg, 0); //Num
		for (size_t i = 0; i < n; i++)
		{ //MaterialPropertyCfg
			BYTE* pMaterialPropertyCfg = pMaterialCfg;
			Write16(pMaterialPropertyCfg, 0); //len

			Write8(pMaterialPropertyCfg, 0); //Type
			Write16(pMaterialPropertyCfg, 0); //Value

			len = pMaterialPropertyCfg - pMaterialCfg;
			Set16(pMaterialCfg, (WORD)len);
			pMaterialCfg += len;
		}

		len = pMaterialCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //FinalAwardNeedFlyTime
	Write16(p, 0); //TodayNum
	Write16(p, 0); //Num
	Write16(p, 0); //MaterialType[]
	Write16(p, 0); //IsTodayHasMakeKite
	Write32(p, 0); //ItemIDForReset
	Write16(p, 0); //HasResetKite
	Write16(p, 0); //TodayFlyTime

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestMakeDreamKite(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT Num = Read16(p);
	USHORT MaterialType[] = Read16(p);
	USHORT KiteType = Read16(p);
	UCHAR MakeType = Read8(p);

}

void ResponseMakeDreamKite(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //KiteType

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestFlyDreamKite(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseFlyDreamKite(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //HightAdd
	{ //AwardToClient
		BYTE* pAwardToClient = p;
		Write16(pAwardToClient, 0); //len

		Write32(pAwardToClient, 0); //Exp
		Write32(pAwardToClient, 0); //Money
		Write32(pAwardToClient, 0); //SuperMoney
		Write16(pAwardToClient, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAwardToClient;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAwardToClient;
			Set16(pAwardToClient, (WORD)len);
			pAwardToClient += len;
		}
		Write32(pAwardToClient, 0); //Coupons
		Write32(pAwardToClient, 0); //GuildPoint
		Write32(pAwardToClient, 0); //LuckMoney
		Write8(pAwardToClient, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAwardToClient;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAwardToClient;
			Set16(pAwardToClient, (WORD)len);
			pAwardToClient += len;
		}
		Write32(pAwardToClient, 0); //SpeedCoin

		len = pAwardToClient - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestDreamKiteHelp(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR OtherPlayerNum = Read8(p);
	for (size_t i = 0; i < n; i++)
	{ //OtherPlayerKiteInfo
		BYTE* pOtherPlayerKiteInfo = p;
		len = Read16(pOtherPlayerKiteInfo);

		UINT Uin = Read32(pOtherPlayerKiteInfo);
		char NickName[] = Read8(pOtherPlayerKiteInfo);
		UINT Hight = Read32(pOtherPlayerKiteInfo);

		p += len;
	}

}

void ResponseDreamKiteHelp(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	for (size_t i = 0; i < n; i++)
	{ //AwardToClient
		BYTE* pAwardToClient = p;
		Write16(pAwardToClient, 0); //len

		Write32(pAwardToClient, 0); //Exp
		Write32(pAwardToClient, 0); //Money
		Write32(pAwardToClient, 0); //SuperMoney
		Write16(pAwardToClient, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAwardToClient;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAwardToClient;
			Set16(pAwardToClient, (WORD)len);
			pAwardToClient += len;
		}
		Write32(pAwardToClient, 0); //Coupons
		Write32(pAwardToClient, 0); //GuildPoint
		Write32(pAwardToClient, 0); //LuckMoney
		Write8(pAwardToClient, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAwardToClient;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAwardToClient;
			Set16(pAwardToClient, (WORD)len);
			pAwardToClient += len;
		}
		Write32(pAwardToClient, 0); //SpeedCoin

		len = pAwardToClient - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestDreamKiteBeHelpedHistory(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseDreamKiteBeHelpedHistory(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write8(p, 0); //OtherPlayerNum
	for (size_t i = 0; i < n; i++)
	{ //OtherPlayerKiteInfo
		BYTE* pOtherPlayerKiteInfo = p;
		Write16(pOtherPlayerKiteInfo, 0); //len

		Write32(pOtherPlayerKiteInfo, 0); //Uin
		Write8(pOtherPlayerKiteInfo, 0); //NickName[]
		Write32(pOtherPlayerKiteInfo, 0); //Hight

		len = pOtherPlayerKiteInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyDreamKiteHelpInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	WriteString(p, 0); //SendName[]
	Write8(p, 0); //Type

	len = p - buf;
	SendToClient(Client, 25123, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyClientNewDay(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin

	len = p - buf;
	SendToClient(Client, 25125, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetDailyExtractShowInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetDailyExtractShowInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write8(p, 0); //ChoosedAward
	Write16(p, 0); //ChooseAwardNums
	for (size_t i = 0; i < n; i++)
	{ //ChooseAwardInfos
		BYTE* pChooseAwardInfos = p;
		Write16(pChooseAwardInfos, 0); //len

		Write32(pChooseAwardInfos, 0); //ChooseIndex
		Write16(pChooseAwardInfos, 0); //AwardType
		{ //AwardInfo
			BYTE* pAwardInfo = pChooseAwardInfos;
			Write16(pAwardInfo, 0); //len

			Write32(pAwardInfo, 0); //Exp
			Write32(pAwardInfo, 0); //Money
			Write32(pAwardInfo, 0); //SuperMoney
			Write16(pAwardInfo, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAwardInfo;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAwardInfo;
				Set16(pAwardInfo, (WORD)len);
				pAwardInfo += len;
			}
			Write32(pAwardInfo, 0); //Coupons
			Write32(pAwardInfo, 0); //GuildPoint
			Write32(pAwardInfo, 0); //LuckMoney
			Write8(pAwardInfo, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAwardInfo;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAwardInfo;
				Set16(pAwardInfo, (WORD)len);
				pAwardInfo += len;
			}
			Write32(pAwardInfo, 0); //SpeedCoin

			len = pAwardInfo - pChooseAwardInfos;
			Set16(pChooseAwardInfos, (WORD)len);
			pChooseAwardInfos += len;
		}
		Write8(pChooseAwardInfos, 0); //AlreayGotten
		Write8(pChooseAwardInfos, 0); //HaveAlreadyGottenPermanentItem

		len = pChooseAwardInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //ChoosedAwardInfo
		BYTE* pChoosedAwardInfo = p;
		Write16(pChoosedAwardInfo, 0); //len

		Write32(pChoosedAwardInfo, 0); //ChooseIndex
		Write16(pChoosedAwardInfo, 0); //AwardType
		{ //AwardInfo
			BYTE* pAwardInfo = pChoosedAwardInfo;
			Write16(pAwardInfo, 0); //len

			Write32(pAwardInfo, 0); //Exp
			Write32(pAwardInfo, 0); //Money
			Write32(pAwardInfo, 0); //SuperMoney
			Write16(pAwardInfo, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAwardInfo;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAwardInfo;
				Set16(pAwardInfo, (WORD)len);
				pAwardInfo += len;
			}
			Write32(pAwardInfo, 0); //Coupons
			Write32(pAwardInfo, 0); //GuildPoint
			Write32(pAwardInfo, 0); //LuckMoney
			Write8(pAwardInfo, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAwardInfo;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAwardInfo;
				Set16(pAwardInfo, (WORD)len);
				pAwardInfo += len;
			}
			Write32(pAwardInfo, 0); //SpeedCoin

			len = pAwardInfo - pChoosedAwardInfo;
			Set16(pChoosedAwardInfo, (WORD)len);
			pChoosedAwardInfo += len;
		}
		Write8(pChoosedAwardInfo, 0); //AlreayGotten
		Write8(pChoosedAwardInfo, 0); //HaveAlreadyGottenPermanentItem

		len = pChoosedAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //DailyExtarctAwardNums
	for (size_t i = 0; i < n; i++)
	{ //DailyExtractAwardInfos
		BYTE* pDailyExtractAwardInfos = p;
		Write16(pDailyExtractAwardInfos, 0); //len

		Write32(pDailyExtractAwardInfos, 0); //ChooseIndex
		Write16(pDailyExtractAwardInfos, 0); //AwardType
		{ //AwardInfo
			BYTE* pAwardInfo = pDailyExtractAwardInfos;
			Write16(pAwardInfo, 0); //len

			Write32(pAwardInfo, 0); //Exp
			Write32(pAwardInfo, 0); //Money
			Write32(pAwardInfo, 0); //SuperMoney
			Write16(pAwardInfo, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAwardInfo;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAwardInfo;
				Set16(pAwardInfo, (WORD)len);
				pAwardInfo += len;
			}
			Write32(pAwardInfo, 0); //Coupons
			Write32(pAwardInfo, 0); //GuildPoint
			Write32(pAwardInfo, 0); //LuckMoney
			Write8(pAwardInfo, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAwardInfo;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAwardInfo;
				Set16(pAwardInfo, (WORD)len);
				pAwardInfo += len;
			}
			Write32(pAwardInfo, 0); //SpeedCoin

			len = pAwardInfo - pDailyExtractAwardInfos;
			Set16(pDailyExtractAwardInfos, (WORD)len);
			pDailyExtractAwardInfos += len;
		}
		Write8(pDailyExtractAwardInfos, 0); //AlreayGotten
		Write8(pDailyExtractAwardInfos, 0); //HaveAlreadyGottenPermanentItem

		len = pDailyExtractAwardInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //OpenDate
	Write32(p, 0); //CloseDate
	Write32(p, 0); //OpenTime
	Write32(p, 0); //CloseTime
	Write32(p, 0); //CostItemNums
	Write32(p, 0); //CurrentCaiDanAwardNums
	Write8(p, 0); //CanChangeChooseAward
	Write8(p, 0); //HaveExtractedAllAward

	len = p - buf;
	SendToClient(Client, 25130, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestChooseAwardForDailyExtract(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT ChooseIndex = Read32(p);

}

void ResponseChooseAwardForDailyExtract(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write32(p, 0); //ChooseIndex

	len = p - buf;
	SendToClient(Client, 25132, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestDailyExtractInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseDailyExtractInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	{ //AwardInfo
		BYTE* pAwardInfo = p;
		Write16(pAwardInfo, 0); //len

		Write32(pAwardInfo, 0); //Exp
		Write32(pAwardInfo, 0); //Money
		Write32(pAwardInfo, 0); //SuperMoney
		Write16(pAwardInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAwardInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAwardInfo;
			Set16(pAwardInfo, (WORD)len);
			pAwardInfo += len;
		}
		Write32(pAwardInfo, 0); //Coupons
		Write32(pAwardInfo, 0); //GuildPoint
		Write32(pAwardInfo, 0); //LuckMoney
		Write8(pAwardInfo, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAwardInfo;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAwardInfo;
			Set16(pAwardInfo, (WORD)len);
			pAwardInfo += len;
		}
		Write32(pAwardInfo, 0); //SpeedCoin

		len = pAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //CaiDanAwardNums
	Write32(p, 0); //CostItemNums
	Write8(p, 0); //CanChangeChooseAward
	Write32(p, 0); //AwardType
	Write32(p, 0); //CurrentCaiDanAwardNums
	Write8(p, 0); //HaveExtractedAllAward
	Write8(p, 0); //HaveAlreadyGottenItem

	len = p - buf;
	SendToClient(Client, 25131, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetMakeFoodActShowInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT FoodType = Read32(p);
	Un cuOpenType = ReadUn(p);

}

void ResponseGetMakeFoodActShowInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write32(p, 0); //IngreOneNums
	Write32(p, 0); //IngreTwoNums
	Write32(p, 0); //FoodType
	Write16(p, 0); //ChanceGeneNums
	for (size_t i = 0; i < n; i++)
	{ //SpecialActPartiChanceGeneInfos
		BYTE* pSpecialActPartiChanceGeneInfos = p;
		Write16(pSpecialActPartiChanceGeneInfos, 0); //len

		Write8(pSpecialActPartiChanceGeneInfos, 0); //TaskID
		Write8(pSpecialActPartiChanceGeneInfos, 0); //TaskPeriod
		Write32(pSpecialActPartiChanceGeneInfos, 0); //AlreadyAwardNums
		Write32(pSpecialActPartiChanceGeneInfos, 0); //AwardMoveNums
		Write32(pSpecialActPartiChanceGeneInfos, 0); //TaskFinishNums
		Write32(pSpecialActPartiChanceGeneInfos, 0); //TaskNeedValue

		len = pSpecialActPartiChanceGeneInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //AwardNums
	for (size_t i = 0; i < n; i++)
	{ //AwardInfo
		BYTE* pAwardInfo = p;
		Write16(pAwardInfo, 0); //len

		Write16(pAwardInfo, 0); //FoodClassType
		{ //AwardToClient
			BYTE* pAwardToClient = pAwardInfo;
			Write16(pAwardToClient, 0); //len

			Write32(pAwardToClient, 0); //Exp
			Write32(pAwardToClient, 0); //Money
			Write32(pAwardToClient, 0); //SuperMoney
			Write16(pAwardToClient, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAwardToClient;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAwardToClient;
				Set16(pAwardToClient, (WORD)len);
				pAwardToClient += len;
			}
			Write32(pAwardToClient, 0); //Coupons
			Write32(pAwardToClient, 0); //GuildPoint
			Write32(pAwardToClient, 0); //LuckMoney
			Write8(pAwardToClient, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAwardToClient;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAwardToClient;
				Set16(pAwardToClient, (WORD)len);
				pAwardToClient += len;
			}
			Write32(pAwardToClient, 0); //SpeedCoin

			len = pAwardToClient - pAwardInfo;
			Set16(pAwardInfo, (WORD)len);
			pAwardInfo += len;
		}

		len = pAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //OpenDate
	Write32(p, 0); //CloseDate
	Write32(p, 0); //OpenTime
	Write32(p, 0); //CloseTime
	Write32(p, 0); //TotalMakeFoodNums
	Write8(p, 0); //HaveDoubleAward
	Write16(p, 0); //DailyAwardIngreOneNums
	Write16(p, 0); //DailyAwardIngreTwoNums

	len = p - buf;
	SendToClient(Client, 24764, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestMakeFood(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	USHORT MakeType = Read16(p);
	USHORT IngredientNums = Read16(p);
	short[] Ingre[] = Read16(p);
	UINT FoodType = Read32(p);

}

void ResponseMakeFood(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //MakeType
	Write32(p, 0); //FoodType
	Write32(p, 0); //IngreOneNums
	Write32(p, 0); //IngreTwoNums
	{ //MakeAward
		BYTE* pMakeAward = p;
		Write16(pMakeAward, 0); //len

		Write32(pMakeAward, 0); //Exp
		Write32(pMakeAward, 0); //Money
		Write32(pMakeAward, 0); //SuperMoney
		Write16(pMakeAward, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pMakeAward;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pMakeAward;
			Set16(pMakeAward, (WORD)len);
			pMakeAward += len;
		}
		Write32(pMakeAward, 0); //Coupons
		Write32(pMakeAward, 0); //GuildPoint
		Write32(pMakeAward, 0); //LuckMoney
		Write8(pMakeAward, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pMakeAward;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pMakeAward;
			Set16(pMakeAward, (WORD)len);
			pMakeAward += len;
		}
		Write32(pMakeAward, 0); //SpeedCoin

		len = pMakeAward - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //TotalMakeFoodNums
	Write16(p, 0); //MakeNums
	Write16(p, 0); //MakeType[]
	Write16(p, 0); //DailyAwardIngreOneNums
	Write16(p, 0); //DailyAwardIngreTwoNums

	len = p - buf;
	SendToClient(Client, 24765, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestFastSearchTreasureCfgInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseFastSearchTreasureCfgInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write32(p, 0); //OpenDate
	Write32(p, 0); //CloseDate
	Write32(p, 0); //OpenTime
	Write32(p, 0); //CloseTime
	Write32(p, 0); //CurrentEquipSealNums

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetTrackTreasureShowInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetTrackTreasureShowInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //MapIndexNums
	for (size_t i = 0; i < n; i++)
	{ //TrackTreasureSearchAwardInfos
		BYTE* pTrackTreasureSearchAwardInfos = p;
		Write16(pTrackTreasureSearchAwardInfos, 0); //len

		Write8(pTrackTreasureSearchAwardInfos, 0); //MapIndex
		Write16(pTrackTreasureSearchAwardInfos, 0); //AwardType
		Write16(pTrackTreasureSearchAwardInfos, 0); //EventAwardID
		{ //AwardItemInfo
			BYTE* pAwardItemInfo = pTrackTreasureSearchAwardInfos;
			Write16(pAwardItemInfo, 0); //len

			Write32(pAwardItemInfo, 0); //Exp
			Write32(pAwardItemInfo, 0); //Money
			Write32(pAwardItemInfo, 0); //SuperMoney
			Write16(pAwardItemInfo, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAwardItemInfo;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //Coupons
			Write32(pAwardItemInfo, 0); //GuildPoint
			Write32(pAwardItemInfo, 0); //LuckMoney
			Write8(pAwardItemInfo, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAwardItemInfo;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //SpeedCoin

			len = pAwardItemInfo - pTrackTreasureSearchAwardInfos;
			Set16(pTrackTreasureSearchAwardInfos, (WORD)len);
			pTrackTreasureSearchAwardInfos += len;
		}
		Write32(pTrackTreasureSearchAwardInfos, 0); //AwardRound
		Write16(pTrackTreasureSearchAwardInfos, 0); //AwardIndex
		Write32(pTrackTreasureSearchAwardInfos, 0); //AwardMaxNums
		Write32(pTrackTreasureSearchAwardInfos, 0); //AwardLowNums

		len = pTrackTreasureSearchAwardInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //KartIDNums
	Write32(p, 0); //KartIDS[]
	Write32(p, 0); //DailyMapIDForSearchTreasure
	Write16(p, 0); //MapDescInfoLen
	Write32(p, 0); //OpenDate
	Write32(p, 0); //CloseDate
	Write32(p, 0); //OpenTime
	Write32(p, 0); //CloseTime
	Write32(p, 0); //TotalSearchTreasureNums
	Write16(p, 0); //ChanceGeneNums
	for (size_t i = 0; i < n; i++)
	{ //SpecialActPartiChanceGeneInfos
		BYTE* pSpecialActPartiChanceGeneInfos = p;
		Write16(pSpecialActPartiChanceGeneInfos, 0); //len

		Write8(pSpecialActPartiChanceGeneInfos, 0); //TaskID
		Write8(pSpecialActPartiChanceGeneInfos, 0); //TaskPeriod
		Write32(pSpecialActPartiChanceGeneInfos, 0); //AlreadyAwardNums
		Write32(pSpecialActPartiChanceGeneInfos, 0); //AwardMoveNums
		Write32(pSpecialActPartiChanceGeneInfos, 0); //TaskFinishNums
		Write32(pSpecialActPartiChanceGeneInfos, 0); //TaskNeedValue

		len = pSpecialActPartiChanceGeneInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //SearchTreasureItemID
	Write32(p, 0); //GemItemID
	Write32(p, 0); //SelectedKartID
	Write32(p, 0); //DailyAwardGemNums
	Write16(p, 0); //CurrentTrackRound

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestStartTrackTreasureSearch(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT SelectedKartID = Read32(p);
	UINT Time = Read32(p);

}

void ResponseStartTrackTreasureSearch(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //CurrentTrackRound
	Write16(p, 0); //AwardItemNums
	for (size_t i = 0; i < n; i++)
	{ //AwardInfos
		BYTE* pAwardInfos = p;
		Write16(pAwardInfos, 0); //len

		Write8(pAwardInfos, 0); //MapIndex
		Write16(pAwardInfos, 0); //AwardType
		Write16(pAwardInfos, 0); //EventAwardID
		{ //AwardItemInfo
			BYTE* pAwardItemInfo = pAwardInfos;
			Write16(pAwardItemInfo, 0); //len

			Write32(pAwardItemInfo, 0); //Exp
			Write32(pAwardItemInfo, 0); //Money
			Write32(pAwardItemInfo, 0); //SuperMoney
			Write16(pAwardItemInfo, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAwardItemInfo;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //Coupons
			Write32(pAwardItemInfo, 0); //GuildPoint
			Write32(pAwardItemInfo, 0); //LuckMoney
			Write8(pAwardItemInfo, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAwardItemInfo;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //SpeedCoin

			len = pAwardItemInfo - pAwardInfos;
			Set16(pAwardInfos, (WORD)len);
			pAwardInfos += len;
		}
		Write32(pAwardInfos, 0); //AwardRound
		Write16(pAwardInfos, 0); //AwardIndex
		Write32(pAwardInfos, 0); //AwardMaxNums
		Write32(pAwardInfos, 0); //AwardLowNums

		len = pAwardInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //TotalSearchTreasureNums

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetQuanmingTreasureShowInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseQuanmingTreasureShowInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write32(p, 0); //CurrentAwardNums
	Write32(p, 0); //OpenDate
	Write32(p, 0); //CloseDate
	Write32(p, 0); //OpenTime
	Write32(p, 0); //CloseTime
	Write32(p, 0); //FinalAwardExtractOpenDate
	Write32(p, 0); //FinalAwardExtractCloseDate
	Write32(p, 0); //FinalAwardExtractOpenTime
	Write32(p, 0); //FinalAwardExtractCloseTime
	Write16(p, 0); //BestItemNums
	for (size_t i = 0; i < n; i++)
	{ //SpecialActCommonAwardInfos
		BYTE* pSpecialActCommonAwardInfos = p;
		Write16(pSpecialActCommonAwardInfos, 0); //len

		Write32(pSpecialActCommonAwardInfos, 0); //ItemID
		Write32(pSpecialActCommonAwardInfos, 0); //BaseGeneNums
		Write16(pSpecialActCommonAwardInfos, 0); //GeneLevelNums
		for (size_t i = 0; i < n; i++)
		{ //SpecActCommonAwardGeneLeveInfos
			BYTE* pSpecActCommonAwardGeneLeveInfos = pSpecialActCommonAwardInfos;
			Write16(pSpecActCommonAwardGeneLeveInfos, 0); //len

			Write16(pSpecActCommonAwardGeneLeveInfos, 0); //GeneLevel
			Write32(pSpecActCommonAwardGeneLeveInfos, 0); //AddPercent

			len = pSpecActCommonAwardGeneLeveInfos - pSpecialActCommonAwardInfos;
			Set16(pSpecialActCommonAwardInfos, (WORD)len);
			pSpecialActCommonAwardInfos += len;
		}

		len = pSpecialActCommonAwardInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //CurrentAwardBoxType
	{ //FinalAwardInfo
		BYTE* pFinalAwardInfo = p;
		Write16(pFinalAwardInfo, 0); //len

		Write32(pFinalAwardInfo, 0); //Exp
		Write32(pFinalAwardInfo, 0); //Money
		Write32(pFinalAwardInfo, 0); //SuperMoney
		Write16(pFinalAwardInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pFinalAwardInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pFinalAwardInfo;
			Set16(pFinalAwardInfo, (WORD)len);
			pFinalAwardInfo += len;
		}
		Write32(pFinalAwardInfo, 0); //Coupons
		Write32(pFinalAwardInfo, 0); //GuildPoint
		Write32(pFinalAwardInfo, 0); //LuckMoney
		Write8(pFinalAwardInfo, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pFinalAwardInfo;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pFinalAwardInfo;
			Set16(pFinalAwardInfo, (WORD)len);
			pFinalAwardInfo += len;
		}
		Write32(pFinalAwardInfo, 0); //SpeedCoin

		len = pFinalAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //ChanceGeneNums
	for (size_t i = 0; i < n; i++)
	{ //SpecialActPartiChanceGeneInfos
		BYTE* pSpecialActPartiChanceGeneInfos = p;
		Write16(pSpecialActPartiChanceGeneInfos, 0); //len

		Write8(pSpecialActPartiChanceGeneInfos, 0); //TaskID
		Write8(pSpecialActPartiChanceGeneInfos, 0); //TaskPeriod
		Write32(pSpecialActPartiChanceGeneInfos, 0); //AlreadyAwardNums
		Write32(pSpecialActPartiChanceGeneInfos, 0); //AwardMoveNums
		Write32(pSpecialActPartiChanceGeneInfos, 0); //TaskFinishNums
		Write32(pSpecialActPartiChanceGeneInfos, 0); //TaskNeedValue

		len = pSpecialActPartiChanceGeneInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //QuanmiItemID
	Write32(p, 0); //CurrentTreasureValue
	Write32(p, 0); //PersonalDevoteNums
	Write32(p, 0); //ExtractFinalAwardNeedDevotedNums

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestQuanmingTreasureExtract(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseQuanmingTreasureExtract(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	{ //AwardInfo
		BYTE* pAwardInfo = p;
		Write16(pAwardInfo, 0); //len

		Write32(pAwardInfo, 0); //Exp
		Write32(pAwardInfo, 0); //Money
		Write32(pAwardInfo, 0); //SuperMoney
		Write16(pAwardInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAwardInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAwardInfo;
			Set16(pAwardInfo, (WORD)len);
			pAwardInfo += len;
		}
		Write32(pAwardInfo, 0); //Coupons
		Write32(pAwardInfo, 0); //GuildPoint
		Write32(pAwardInfo, 0); //LuckMoney
		Write8(pAwardInfo, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAwardInfo;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAwardInfo;
			Set16(pAwardInfo, (WORD)len);
			pAwardInfo += len;
		}
		Write32(pAwardInfo, 0); //SpeedCoin

		len = pAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //BestAward
	Write32(p, 0); //CurrentAwardNums

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestSpecialActDevote(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT DevotedType = Read16(p);

}

void ResponseSpecialActDevote(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //Time
	Write16(p, 0); //ResultID
	Write32(p, 0); //PersonalDevoteNums
	Write32(p, 0); //GlobalDevoteNums

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetWeekLyGiftInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetWeekLyGiftInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen
	{ //WeeklyGiftSeasonCfg
		BYTE* pWeeklyGiftSeasonCfg = p;
		Write16(pWeeklyGiftSeasonCfg, 0); //len

		Write32(pWeeklyGiftSeasonCfg, 0); //SeasonID
		Write32(pWeeklyGiftSeasonCfg, 0); //SeasonOpenDate
		Write32(pWeeklyGiftSeasonCfg, 0); //SeasonCloseDate
		Write32(pWeeklyGiftSeasonCfg, 0); //SeasonExchangeCloseDate
		Write8(pWeeklyGiftSeasonCfg, 0); //WeeklyGiftNum
		for (size_t i = 0; i < n; i++)
		{ //AwardTypeList
			BYTE* pAwardTypeList = pWeeklyGiftSeasonCfg;
			Write16(pAwardTypeList, 0); //len

			Write8(pAwardTypeList, 0); //AwardType
			Write16(pAwardTypeList, 0); //GainRate
			Write8(pAwardTypeList, 0); //ConsumeItemNum
			Write8(pAwardTypeList, 0); //AwardTypeNum
			for (size_t i = 0; i < n; i++)
			{ //AwardList
				BYTE* pAwardList = pAwardTypeList;
				Write16(pAwardList, 0); //len

				Write8(pAwardList, 0); //LoginDayNum
				{ //Award
					BYTE* pAward = pAwardList;
					Write16(pAward, 0); //len

					Write32(pAward, 0); //Exp
					Write32(pAward, 0); //Money
					Write32(pAward, 0); //SuperMoney
					Write16(pAward, 0); //ItemNum
					for (size_t i = 0; i < n; i++)
					{ //ItemInfo
						BYTE* pItemInfo = pAward;
						Write16(pItemInfo, 0); //len

						Write32(pItemInfo, 0); //ItemID
						Write32(pItemInfo, 0); //ItemNum
						Write32(pItemInfo, 0); //AvailPeriod
						Write8(pItemInfo, 0); //Status
						WriteUn(pItemInfo, 0); //ObtainTime
						Write32(pItemInfo, 0); //OtherAttribute
						Write16(pItemInfo, 0); //ItemType

						len = pItemInfo - pAward;
						Set16(pAward, (WORD)len);
						pAward += len;
					}
					Write32(pAward, 0); //Coupons
					Write32(pAward, 0); //GuildPoint
					Write32(pAward, 0); //LuckMoney
					Write8(pAward, 0); //ExtendInfoNum
					for (size_t i = 0; i < n; i++)
					{ //ExtendInfoAward
						BYTE* pExtendInfoAward = pAward;
						Write16(pExtendInfoAward, 0); //len

						Write16(pExtendInfoAward, 0); //Key
						Write32(pExtendInfoAward, 0); //AddValue
						Write32(pExtendInfoAward, 0); //TotalValue
						Write8(pExtendInfoAward, 0); //ShowPriority
						Write16(pExtendInfoAward, 0); //BuyNeedScore
						Write8(pExtendInfoAward, 0); //OneMatchMaxNum

						len = pExtendInfoAward - pAward;
						Set16(pAward, (WORD)len);
						pAward += len;
					}
					Write32(pAward, 0); //SpeedCoin

					len = pAward - pAwardList;
					Set16(pAwardList, (WORD)len);
					pAwardList += len;
				}
				Write8(pAwardList, 0); //AwardState
				Write8(pAwardList, 0); //VipActIDLen
				Write8(pAwardList, 0); //VipGoodsIDLen

				len = pAwardList - pAwardTypeList;
				Set16(pAwardTypeList, (WORD)len);
				pAwardTypeList += len;
			}
			Write32(pAwardTypeList, 0); //LeftRefreshTime

			len = pAwardTypeList - pWeeklyGiftSeasonCfg;
			Set16(pWeeklyGiftSeasonCfg, (WORD)len);
			pWeeklyGiftSeasonCfg += len;
		}
		Write32(pWeeklyGiftSeasonCfg, 0); //LeftBuyTime

		len = pWeeklyGiftSeasonCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //WeeklyGiftNum
	for (size_t i = 0; i < n; i++)
	{ //WeeklyGiftQualificationInfo
		BYTE* pWeeklyGiftQualificationInfo = p;
		Write16(pWeeklyGiftQualificationInfo, 0); //len

		Write8(pWeeklyGiftQualificationInfo, 0); //IsAlreadyGotQualification
		Write8(pWeeklyGiftQualificationInfo, 0); //HasAlreadyLoginNum

		len = pWeeklyGiftQualificationInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //IsExchangeOpen

	len = p - buf;
	SendToClient(Client, 25135, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestWeeklyGiftExchangeQualification(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR ExchangeType = Read8(p);
	UCHAR GiftType = Read8(p);
	UCHAR GiftIndex = Read8(p);

}

void ResponseWeeklyGiftExchangeQualification(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen
	Write8(p, 0); //ExchangeType
	Write8(p, 0); //GiftType
	Write8(p, 0); //GiftIndex
	{ //Award
		BYTE* pAward = p;
		Write16(pAward, 0); //len

		Write32(pAward, 0); //Exp
		Write32(pAward, 0); //Money
		Write32(pAward, 0); //SuperMoney
		Write16(pAward, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAward;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write32(pAward, 0); //Coupons
		Write32(pAward, 0); //GuildPoint
		Write32(pAward, 0); //LuckMoney
		Write8(pAward, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAward;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write32(pAward, 0); //SpeedCoin

		len = pAward - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 25136, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetIndianaChanllageCfg(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetIndianaChanllageCfg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	{ //TodayMapAndNpcInfo
		BYTE* pTodayMapAndNpcInfo = p;
		Write16(pTodayMapAndNpcInfo, 0); //len

		Write16(pTodayMapAndNpcInfo, 0); //NpcID
		Write16(pTodayMapAndNpcInfo, 0); //NpcTipsLen
		Write16(pTodayMapAndNpcInfo, 0); //MapID
		Write32(pTodayMapAndNpcInfo, 0); //TimeArray[]
		Write16(pTodayMapAndNpcInfo, 0); //NpcTipsLen_1

		len = pTodayMapAndNpcInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //AwardInfo
		BYTE* pAwardInfo = p;
		Write16(pAwardInfo, 0); //len

		Write32(pAwardInfo, 0); //Exp
		Write32(pAwardInfo, 0); //Money
		Write32(pAwardInfo, 0); //SuperMoney
		Write16(pAwardInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAwardInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAwardInfo;
			Set16(pAwardInfo, (WORD)len);
			pAwardInfo += len;
		}
		Write32(pAwardInfo, 0); //Coupons
		Write32(pAwardInfo, 0); //GuildPoint
		Write32(pAwardInfo, 0); //LuckMoney
		Write8(pAwardInfo, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAwardInfo;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAwardInfo;
			Set16(pAwardInfo, (WORD)len);
			pAwardInfo += len;
		}
		Write32(pAwardInfo, 0); //SpeedCoin

		len = pAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //TaskID
	Write16(p, 0); //ExtraScoreAdd
	Write16(p, 0); //ChanllageTimeLeft
	Write32(p, 0); //TodayBestScore
	Write16(p, 0); //ScoreAdd[]
	{ //OpenCfg
		BYTE* pOpenCfg = p;
		Write16(pOpenCfg, 0); //len

		Write32(pOpenCfg, 0); //OpenDate
		Write32(pOpenCfg, 0); //CloseDate
		Write32(pOpenCfg, 0); //OpenTime
		Write32(pOpenCfg, 0); //CloseTime

		len = pOpenCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //TotalScore
	Write16(p, 0); //TotayScore

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyMuchPlayerInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //BaseMode
	Write32(p, 0); //SubMode
	Write8(p, 0); //PlayerCount
	for (size_t i = 0; i < n; i++)
	{ //PlayerRoomVisibleInfo
		BYTE* pPlayerRoomVisibleInfo = p;
		Write16(pPlayerRoomVisibleInfo, 0); //len

		WriteUn(pPlayerRoomVisibleInfo, 0); //Uin
		WriteUn(pPlayerRoomVisibleInfo, 0); //Identity
		Write8(pPlayerRoomVisibleInfo, 0); //SeatID
		Write8(pPlayerRoomVisibleInfo, 0); //TeamID
		Write16(pPlayerRoomVisibleInfo, 0); //PlayerID
		Write8(pPlayerRoomVisibleInfo, 0); //Status
		{ //PlayerDBBaseInfo
			BYTE* pPlayerDBBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerDBBaseInfo, 0); //len

			WriteString(pPlayerDBBaseInfo, 0); //NickName[]
			Write8(pPlayerDBBaseInfo, 0); //Gender
			Write8(pPlayerDBBaseInfo, 0); //Country
			Write32(pPlayerDBBaseInfo, 0); //License
			WriteUn(pPlayerDBBaseInfo, 0); //Experience
			Write32(pPlayerDBBaseInfo, 0); //SuperMoney
			Write32(pPlayerDBBaseInfo, 0); //Money
			WriteUn(pPlayerDBBaseInfo, 0); //WinNum
			Write32(pPlayerDBBaseInfo, 0); //SecondNum
			Write32(pPlayerDBBaseInfo, 0); //ThirdNum
			WriteUn(pPlayerDBBaseInfo, 0); //TotalNum
			Write32(pPlayerDBBaseInfo, 0); //CurHonor
			Write32(pPlayerDBBaseInfo, 0); //TotalHonor
			Write32(pPlayerDBBaseInfo, 0); //TodayHonor
			Write32(pPlayerDBBaseInfo, 0); //RelaxTime
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationBefore
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationCur
			Write32(pPlayerDBBaseInfo, 0); //Charm
			Write32(pPlayerDBBaseInfo, 0); //DurationGame
			Write32(pPlayerDBBaseInfo, 0); //DanceExp
			Write32(pPlayerDBBaseInfo, 0); //Coupons
			Write32(pPlayerDBBaseInfo, 0); //Admiration
			Write32(pPlayerDBBaseInfo, 0); //LuckMoney
			Write32(pPlayerDBBaseInfo, 0); //TeamWorkExp
			Write32(pPlayerDBBaseInfo, 0); //AchievePoint
			Write32(pPlayerDBBaseInfo, 0); //RegTime
			WriteString(pPlayerDBBaseInfo, 0); //Signature[]
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchPoint
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchNum
			Write16(pPlayerDBBaseInfo, 0); //LuckyMatchFirstNum
			Write8(pPlayerDBBaseInfo, 0); //LuckyMatchBestRand
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchWinNum
			Write32(pPlayerDBBaseInfo, 0); //FizzPointTotal
			Write16(pPlayerDBBaseInfo, 0); //FizzPointDaily
			Write16(pPlayerDBBaseInfo, 0); //FizzPointWeekly
			Write16(pPlayerDBBaseInfo, 0); //FizzPointLastWeek
			Write8(pPlayerDBBaseInfo, 0); //FizzLotteryStatus
			Write32(pPlayerDBBaseInfo, 0); //FizzLastUpdateTime
			Write32(pPlayerDBBaseInfo, 0); //SNSLocaleCode
			Write32(pPlayerDBBaseInfo, 0); //AuctionRightUnlockTime
			Write8(pPlayerDBBaseInfo, 0); //ReserveFlag
			Write32(pPlayerDBBaseInfo, 0); //CurConsumeScore
			Write32(pPlayerDBBaseInfo, 0); //HistoryConsumeScore
			Write8(pPlayerDBBaseInfo, 0); //CrashModeSponsorID
			Write32(pPlayerDBBaseInfo, 0); //Popularity
			Write32(pPlayerDBBaseInfo, 0); //LadderMatchAchievePoint
			Write32(pPlayerDBBaseInfo, 0); //Cash
			Write32(pPlayerDBBaseInfo, 0); //PlayerGPMIdentity
			Write32(pPlayerDBBaseInfo, 0); //PointTotalScore
			WriteUn(pPlayerDBBaseInfo, 0); //totalMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //lastMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalSeasonId
			WriteUn(pPlayerDBBaseInfo, 0); //lastClearMapMedalTime
			WriteUn(pPlayerDBBaseInfo, 0); //max2048Score
			WriteUn(pPlayerDBBaseInfo, 0); //curPlay2048LeftNum
			Write32(pPlayerDBBaseInfo, 0); //CheerValue
			Write16(pPlayerDBBaseInfo, 0); //SeasonID
			Write32(pPlayerDBBaseInfo, 0); //LastCheerValue
			Write32(pPlayerDBBaseInfo, 0); //SpeedBean
			Write32(pPlayerDBBaseInfo, 0); //SpeedCoin

			len = pPlayerDBBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //PlayerGuildInfo
			BYTE* pPlayerGuildInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerGuildInfo, 0); //len

			WriteString(pPlayerGuildInfo, 0); //GuildName[]
			Write16(pPlayerGuildInfo, 0); //Duty
			Write32(pPlayerGuildInfo, 0); //GuildID
			Write32(pPlayerGuildInfo, 0); //Right
			Write32(pPlayerGuildInfo, 0); //Medal
			Write32(pPlayerGuildInfo, 0); //Contribute
			WriteString(pPlayerGuildInfo, 0); //DutyTitle[]

			len = pPlayerGuildInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write16(pPlayerRoomVisibleInfo, 0); //EquipedItemNum
		for (size_t i = 0; i < n; i++)
		{ //PlayerItemInfo
			BYTE* pPlayerItemInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerItemInfo, 0); //len

			Write32(pPlayerItemInfo, 0); //ItemID
			Write32(pPlayerItemInfo, 0); //ItemNum
			Write32(pPlayerItemInfo, 0); //AvailPeriod
			Write8(pPlayerItemInfo, 0); //Status
			WriteUn(pPlayerItemInfo, 0); //ObtainTime
			Write32(pPlayerItemInfo, 0); //OtherAttribute
			Write16(pPlayerItemInfo, 0); //ItemType

			len = pPlayerItemInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write16(pPlayerRoomVisibleInfo, 0); //PetNum
		for (size_t i = 0; i < n; i++)
		{ //PetInfo
			BYTE* pPetInfo = pPlayerRoomVisibleInfo;
			Write16(pPetInfo, 0); //len

			Write32(pPetInfo, 0); //Uin
			Write32(pPetInfo, 0); //PetId
			WriteString(pPetInfo, 0); //PetName[]
			Write8(pPetInfo, 0); //IsProper
			Write16(pPetInfo, 0); //Level
			Write8(pPetInfo, 0); //Status
			Write16(pPetInfo, 0); //PetSkillNum
			for (size_t i = 0; i < n; i++)
			{ //PetSkillList
				BYTE* pPetSkillList = pPetInfo;
				Write16(pPetSkillList, 0); //len

				Write16(pPetSkillList, 0); //SkillID
				Write8(pPetSkillList, 0); //Status
				Write8(pPetSkillList, 0); //Active
				Write32(pPetSkillList, 0); //Value

				len = pPetSkillList - pPetInfo;
				Set16(pPetInfo, (WORD)len);
				pPetInfo += len;
			}
			Write32(pPetInfo, 0); //StrengLevel
			Write8(pPetInfo, 0); //TopStatus
			{ //CommonInfo
				BYTE* pCommonInfo = pPetInfo;
				Write16(pCommonInfo, 0); //len

				Write32(pCommonInfo, 0); //HuanHuaLevel
				Write8(pCommonInfo, 0); //CanHuanHua

				len = pCommonInfo - pPetInfo;
				Set16(pPetInfo, (WORD)len);
				pPetInfo += len;
			}
			Write16(pPetInfo, 0); //PKStar
			Write32(pPetInfo, 0); //PetSkinID

			len = pPetInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //PlayerGuildMatchInfo
			BYTE* pPlayerGuildMatchInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerGuildMatchInfo, 0); //len

			Write32(pPlayerGuildMatchInfo, 0); //SelfPoint
			Write32(pPlayerGuildMatchInfo, 0); //WinNum
			Write32(pPlayerGuildMatchInfo, 0); //TotalNum

			len = pPlayerGuildMatchInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //IsInTopList
		Write8(pPlayerRoomVisibleInfo, 0); //LoverRaceOrPro
		Write8(pPlayerRoomVisibleInfo, 0); //TmpEffectNum
		Write32(pPlayerRoomVisibleInfo, 0); //TmpEffectItems[]
		Write8(pPlayerRoomVisibleInfo, 0); //OBState
		Write8(pPlayerRoomVisibleInfo, 0); //DebutOrX5
		Write8(pPlayerRoomVisibleInfo, 0); //RandKeyFlag
		WriteUn(pPlayerRoomVisibleInfo, 0); //VipFlag
		Write8(pPlayerRoomVisibleInfo, 0); //HaveAppellation
		for (size_t i = 0; i < n; i++)
		{ //CurAppellation
			BYTE* pCurAppellation = pPlayerRoomVisibleInfo;
			Write16(pCurAppellation, 0); //len

			Write8(pCurAppellation, 0); //Type
			Write8(pCurAppellation, 0); //Level
			Write8(pCurAppellation, 0); //Status
			Write8(pCurAppellation, 0); //Difficulty
			Write32(pCurAppellation, 0); //MapId
			Write32(pCurAppellation, 0); //Value

			len = pCurAppellation - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //NobleInfo
			BYTE* pNobleInfo = pPlayerRoomVisibleInfo;
			Write16(pNobleInfo, 0); //len

			Write32(pNobleInfo, 0); //NobleID
			Write8(pNobleInfo, 0); //NobleLevel
			Write32(pNobleInfo, 0); //NoblePoint
			Write32(pNobleInfo, 0); //NobleLeftDays

			len = pNobleInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasCarryWizard
		for (size_t i = 0; i < n; i++)
		{ //CarryWizardInfo
			BYTE* pCarryWizardInfo = pPlayerRoomVisibleInfo;
			Write16(pCarryWizardInfo, 0); //len

			Write16(pCarryWizardInfo, 0); //WizardID
			WriteString(pCarryWizardInfo, 0); //NickName[]
			Write16(pCarryWizardInfo, 0); //WizardType
			Write8(pCarryWizardInfo, 0); //Order
			Write8(pCarryWizardInfo, 0); //EvolutionBranch
			Write8(pCarryWizardInfo, 0); //IsHuanHua

			len = pCarryWizardInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //GuildVipBaseInfo
			BYTE* pGuildVipBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pGuildVipBaseInfo, 0); //len

			Write8(pGuildVipBaseInfo, 0); //GuildVipLevel
			Write32(pGuildVipBaseInfo, 0); //GuildVipPoint

			len = pGuildVipBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write32(pPlayerRoomVisibleInfo, 0); //ExFlag
		Write8(pPlayerRoomVisibleInfo, 0); //HaveLDMBaseInfo
		for (size_t i = 0; i < n; i++)
		{ //PlayerLDMBaseInfo
			BYTE* pPlayerLDMBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerLDMBaseInfo, 0); //len

			Write8(pPlayerLDMBaseInfo, 0); //Grade
			Write32(pPlayerLDMBaseInfo, 0); //Score
			Write32(pPlayerLDMBaseInfo, 0); //MaxScore
			Write32(pPlayerLDMBaseInfo, 0); //MaxGrade

			len = pPlayerLDMBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasWl
		for (size_t i = 0; i < n; i++)
		{ //PlayerWlVisibleInfo
			BYTE* pPlayerWlVisibleInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerWlVisibleInfo, 0); //len

			Write32(pPlayerWlVisibleInfo, 0); //WonderLandID
			WriteString(pPlayerWlVisibleInfo, 0); //WonderLandName[]
			Write16(pPlayerWlVisibleInfo, 0); //WonderLandDuty
			Write8(pPlayerWlVisibleInfo, 0); //SubType
			Write8(pPlayerWlVisibleInfo, 0); //GuildGrade

			len = pPlayerWlVisibleInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasLoverVip
		for (size_t i = 0; i < n; i++)
		{ //LoverVipInfo
			BYTE* pLoverVipInfo = pPlayerRoomVisibleInfo;
			Write16(pLoverVipInfo, 0); //len

			Write8(pLoverVipInfo, 0); //LoverVipLevel
			Write32(pLoverVipInfo, 0); //LoverVipPoint
			Write8(pLoverVipInfo, 0); //GrowRate

			len = pLoverVipInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasBattleModeSkillInfoList
		for (size_t i = 0; i < n; i++)
		{ //BattleModeSkillInfoList
			BYTE* pBattleModeSkillInfoList = pPlayerRoomVisibleInfo;
			Write16(pBattleModeSkillInfoList, 0); //len

			Write8(pBattleModeSkillInfoList, 0); //SkillNum
			for (size_t i = 0; i < n; i++)
			{ //SkillInfo
				BYTE* pSkillInfo = pBattleModeSkillInfoList;
				Write16(pSkillInfo, 0); //len

				Write16(pSkillInfo, 0); //SkillId
				Write8(pSkillInfo, 0); //SkillLevel

				len = pSkillInfo - pBattleModeSkillInfoList;
				Set16(pBattleModeSkillInfoList, (WORD)len);
				pBattleModeSkillInfoList += len;
			}

			len = pBattleModeSkillInfoList - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasGarden
		for (size_t i = 0; i < n; i++)
		{ //PersonalGardenBaseInfo
			BYTE* pPersonalGardenBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pPersonalGardenBaseInfo, 0); //len

			Write8(pPersonalGardenBaseInfo, 0); //GardenLevel
			Write32(pPersonalGardenBaseInfo, 0); //GardenPoint
			Write8(pPersonalGardenBaseInfo, 0); //GrowRate
			Write32(pPersonalGardenBaseInfo, 0); //GardenExpireTime
			{ //SimpleInfo
				BYTE* pSimpleInfo = pPersonalGardenBaseInfo;
				Write16(pSimpleInfo, 0); //len

				Write32(pSimpleInfo, 0); //WeekPopularity
				Write32(pSimpleInfo, 0); //TotalPopularity
				Write32(pSimpleInfo, 0); //LastUpdatePopularityTime
				Write8(pSimpleInfo, 0); //PrivateType

				len = pSimpleInfo - pPersonalGardenBaseInfo;
				Set16(pPersonalGardenBaseInfo, (WORD)len);
				pPersonalGardenBaseInfo += len;
			}

			len = pPersonalGardenBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //ConsumeVipInfo
			BYTE* pConsumeVipInfo = pPlayerRoomVisibleInfo;
			Write16(pConsumeVipInfo, 0); //len

			WriteUn(pConsumeVipInfo, 0); //VipLevel
			WriteUn(pConsumeVipInfo, 0); //CharmValueOfMonth
			WriteUn(pConsumeVipInfo, 0); //SearchTreasureNums
			WriteUn(pConsumeVipInfo, 0); //GetTreasureNums

			len = pConsumeVipInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HaveBaby
		{ //LoverBabyInfo
			BYTE* pLoverBabyInfo = pPlayerRoomVisibleInfo;
			Write16(pLoverBabyInfo, 0); //len

			Write32(pLoverBabyInfo, 0); //LoverBabyID
			Write32(pLoverBabyInfo, 0); //ItemID
			Write32(pLoverBabyInfo, 0); //GrowValue
			Write32(pLoverBabyInfo, 0); //MentalValue
			Write32(pLoverBabyInfo, 0); //BabyProfileLevel
			Write32(pLoverBabyInfo, 0); //StrengthLevel
			Write32(pLoverBabyInfo, 0); //GrowLevel
			WriteString(pLoverBabyInfo, 0); //LoveBabyNickName[]
			Write16(pLoverBabyInfo, 0); //LoverBabyStat
			Write16(pLoverBabyInfo, 0); //LoverBabyEquipStat
			Write16(pLoverBabyInfo, 0); //LoverBabyTransferdStatus

			len = pLoverBabyInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //EmperorInfo
			BYTE* pEmperorInfo = pPlayerRoomVisibleInfo;
			Write16(pEmperorInfo, 0); //len

			Write8(pEmperorInfo, 0); //EmperorLevel
			Write32(pEmperorInfo, 0); //EmperorPoint
			Write32(pEmperorInfo, 0); //EmperorLeftDays
			Write8(pEmperorInfo, 0); //EmperorGrowRate

			len = pEmperorInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write16(pPlayerRoomVisibleInfo, 0); //RaceCardNums
		for (size_t i = 0; i < n; i++)
		{ //RaceCardAddValueInfo
			BYTE* pRaceCardAddValueInfo = pPlayerRoomVisibleInfo;
			Write16(pRaceCardAddValueInfo, 0); //len

			Write32(pRaceCardAddValueInfo, 0); //RaceCardID
			Write32(pRaceCardAddValueInfo, 0); //AddValue

			len = pRaceCardAddValueInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //GansterScoreInfo
			BYTE* pGansterScoreInfo = pPlayerRoomVisibleInfo;
			Write16(pGansterScoreInfo, 0); //len

			Write32(pGansterScoreInfo, 0); //GansterSeasonID
			Write32(pGansterScoreInfo, 0); //GansterScore
			Write32(pGansterScoreInfo, 0); //PoliceScore
			Write32(pGansterScoreInfo, 0); //TotalGansterScore

			len = pGansterScoreInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write32(pPlayerRoomVisibleInfo, 0); //OlympicId
		Write32(pPlayerRoomVisibleInfo, 0); //NPCEliminateWinTimes
		Write8(pPlayerRoomVisibleInfo, 0); //OriginTeamID
		Write8(pPlayerRoomVisibleInfo, 0); //NxNpc
		Write16(pPlayerRoomVisibleInfo, 0); //NxNpcAILevel
		{ //EquippedActiveKartInfo
			BYTE* pEquippedActiveKartInfo = pPlayerRoomVisibleInfo;
			Write16(pEquippedActiveKartInfo, 0); //len

			Write8(pEquippedActiveKartInfo, 0); //HaveActiveInfo
			Write32(pEquippedActiveKartInfo, 0); //KartID
			Write32(pEquippedActiveKartInfo, 0); //ActiveLevel

			len = pEquippedActiveKartInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //SpecialActivityStatus
		Write8(pPlayerRoomVisibleInfo, 0); //AreaID
		Write8(pPlayerRoomVisibleInfo, 0); //HaveRaiseSecondBaby
		{ //SecondLoverBabyInfo
			BYTE* pSecondLoverBabyInfo = pPlayerRoomVisibleInfo;
			Write16(pSecondLoverBabyInfo, 0); //len

			Write32(pSecondLoverBabyInfo, 0); //LoverBabyID
			Write32(pSecondLoverBabyInfo, 0); //ItemID
			Write32(pSecondLoverBabyInfo, 0); //GrowValue
			Write32(pSecondLoverBabyInfo, 0); //MentalValue
			Write32(pSecondLoverBabyInfo, 0); //BabyProfileLevel
			Write32(pSecondLoverBabyInfo, 0); //StrengthLevel
			Write32(pSecondLoverBabyInfo, 0); //GrowLevel
			WriteString(pSecondLoverBabyInfo, 0); //LoveBabyNickName[]
			Write16(pSecondLoverBabyInfo, 0); //LoverBabyStat
			Write16(pSecondLoverBabyInfo, 0); //LoverBabyEquipStat
			Write16(pSecondLoverBabyInfo, 0); //LoverBabyTransferdStatus

			len = pSecondLoverBabyInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasRankedMatchInfo
		for (size_t i = 0; i < n; i++)
		{ //RankedMatchGradeInfo
			BYTE* pRankedMatchGradeInfo = pPlayerRoomVisibleInfo;
			Write16(pRankedMatchGradeInfo, 0); //len

			Write32(pRankedMatchGradeInfo, 0); //GradeLevel
			Write32(pRankedMatchGradeInfo, 0); //ChildLevel
			Write32(pRankedMatchGradeInfo, 0); //GradeScore
			Write32(pRankedMatchGradeInfo, 0); //MaxGradeScore
			Write32(pRankedMatchGradeInfo, 0); //TotalScore

			len = pRankedMatchGradeInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasHuanLingChangeInfo
		for (size_t i = 0; i < n; i++)
		{ //HuanLingSuitInfo
			BYTE* pHuanLingSuitInfo = pPlayerRoomVisibleInfo;
			Write16(pHuanLingSuitInfo, 0); //len

			Write32(pHuanLingSuitInfo, 0); //SuitID
			Write8(pHuanLingSuitInfo, 0); //ChangeLevel

			len = pHuanLingSuitInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //EquipSealType
		Write16(pPlayerRoomVisibleInfo, 0); //Role
		Write8(pPlayerRoomVisibleInfo, 0); //SpecialActivityIDNum
		Write8(pPlayerRoomVisibleInfo, 0); //CrewID
		Write8(pPlayerRoomVisibleInfo, 0); //SpecialActivityInfoNum
		for (size_t i = 0; i < n; i++)
		{ //SpecialActivityInfo
			BYTE* pSpecialActivityInfo = pPlayerRoomVisibleInfo;
			Write16(pSpecialActivityInfo, 0); //len

			Write8(pSpecialActivityInfo, 0); //ProfessionLicenseInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ProfessionLicenseInfo
				BYTE* pProfessionLicenseInfo = pSpecialActivityInfo;
				Write16(pProfessionLicenseInfo, 0); //len

				Write8(pProfessionLicenseInfo, 0); //BigLevel
				Write8(pProfessionLicenseInfo, 0); //SmallLevel

				len = pProfessionLicenseInfo - pSpecialActivityInfo;
				Set16(pSpecialActivityInfo, (WORD)len);
				pSpecialActivityInfo += len;
			}

			len = pSpecialActivityInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //ParaNum
		Write32(pPlayerRoomVisibleInfo, 0); //ParaList[]
		Write8(pPlayerRoomVisibleInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemOrder
			BYTE* pItemOrder = pPlayerRoomVisibleInfo;
			Write16(pItemOrder, 0); //len

			Write32(pItemOrder, 0); //KartID
			Write32(pItemOrder, 0); //Order
			Write32(pItemOrder, 0); //BackGroundID

			len = pItemOrder - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //TDCExcluItemNum
		Write32(pPlayerRoomVisibleInfo, 0); //TDCExclusiveItemID[]
		Write8(pPlayerRoomVisibleInfo, 0); //EquipNiChangItemNum
		for (size_t i = 0; i < n; i++)
		{ //NiChangPavilionEquipItemInfo
			BYTE* pNiChangPavilionEquipItemInfo = pPlayerRoomVisibleInfo;
			Write16(pNiChangPavilionEquipItemInfo, 0); //len

			Write32(pNiChangPavilionEquipItemInfo, 0); //ItemId
			Write16(pNiChangPavilionEquipItemInfo, 0); //CurrentEquipColorationPlanId

			len = pNiChangPavilionEquipItemInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //TestKartGameType
		Write32(pPlayerRoomVisibleInfo, 0); //GameTestKartID
		Write8(pPlayerRoomVisibleInfo, 0); //HasStarsFightingInfo
		for (size_t i = 0; i < n; i++)
		{ //StarsFightingInfo
			BYTE* pStarsFightingInfo = pPlayerRoomVisibleInfo;
			Write16(pStarsFightingInfo, 0); //len

			Write32(pStarsFightingInfo, 0); //Star
			Write32(pStarsFightingInfo, 0); //StarVal
			Write32(pStarsFightingInfo, 0); //StarsFightingStarLevel

			len = pStarsFightingInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //RoomBGSetting

		len = pPlayerRoomVisibleInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //KartNum
	for (size_t i = 0; i < n; i++)
	{ //KartRefitInfo
		BYTE* pKartRefitInfo = p;
		Write16(pKartRefitInfo, 0); //len

		Write32(pKartRefitInfo, 0); //Uin
		Write32(pKartRefitInfo, 0); //KartId
		Write32(pKartRefitInfo, 0); //RefitCout
		Write16(pKartRefitInfo, 0); //MaxFlags
		Write16(pKartRefitInfo, 0); //WWeight
		Write16(pKartRefitInfo, 0); //SpeedWeight
		Write16(pKartRefitInfo, 0); //JetWeight
		Write16(pKartRefitInfo, 0); //SJetWeight
		Write16(pKartRefitInfo, 0); //AccuWeight
		Write32(pKartRefitInfo, 0); //ShapeRefitCount
		Write32(pKartRefitInfo, 0); //KartHeadRefitItemID
		Write32(pKartRefitInfo, 0); //KartTailRefitItemID
		Write32(pKartRefitInfo, 0); //KartFlankRefitItemID
		Write32(pKartRefitInfo, 0); //KartTireRefitItemID
		Write32(pKartRefitInfo, 0); //SecondRefitCount
		Write16(pKartRefitInfo, 0); //Speed2Weight
		Write16(pKartRefitInfo, 0); //DriftVecWeight
		Write16(pKartRefitInfo, 0); //AdditionalZSpeedWeight
		Write16(pKartRefitInfo, 0); //AntiCollisionWeight
		Write16(pKartRefitInfo, 0); //LuckyValue
		Write16(pKartRefitInfo, 0); //RefitLuckyValueMaxWeight
		Write32(pKartRefitInfo, 0); //ShapeSuitID
		Write8(pKartRefitInfo, 0); //LegendSuitLevel
		Write32(pKartRefitInfo, 0); //LegendSuitLevelChoice
		Write32(pKartRefitInfo, 0); //ShapeLegendSuitID

		len = pKartRefitInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasMoreInfo

	len = p - buf;
	SendToClient(Client, 1718, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyMuchPlayerMoreInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //PlayerCount
	for (size_t i = 0; i < n; i++)
	{ //PlayerRoomVisibleInfo
		BYTE* pPlayerRoomVisibleInfo = p;
		Write16(pPlayerRoomVisibleInfo, 0); //len

		WriteUn(pPlayerRoomVisibleInfo, 0); //Uin
		WriteUn(pPlayerRoomVisibleInfo, 0); //Identity
		Write8(pPlayerRoomVisibleInfo, 0); //SeatID
		Write8(pPlayerRoomVisibleInfo, 0); //TeamID
		Write16(pPlayerRoomVisibleInfo, 0); //PlayerID
		Write8(pPlayerRoomVisibleInfo, 0); //Status
		{ //PlayerDBBaseInfo
			BYTE* pPlayerDBBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerDBBaseInfo, 0); //len

			WriteString(pPlayerDBBaseInfo, 0); //NickName[]
			Write8(pPlayerDBBaseInfo, 0); //Gender
			Write8(pPlayerDBBaseInfo, 0); //Country
			Write32(pPlayerDBBaseInfo, 0); //License
			WriteUn(pPlayerDBBaseInfo, 0); //Experience
			Write32(pPlayerDBBaseInfo, 0); //SuperMoney
			Write32(pPlayerDBBaseInfo, 0); //Money
			WriteUn(pPlayerDBBaseInfo, 0); //WinNum
			Write32(pPlayerDBBaseInfo, 0); //SecondNum
			Write32(pPlayerDBBaseInfo, 0); //ThirdNum
			WriteUn(pPlayerDBBaseInfo, 0); //TotalNum
			Write32(pPlayerDBBaseInfo, 0); //CurHonor
			Write32(pPlayerDBBaseInfo, 0); //TotalHonor
			Write32(pPlayerDBBaseInfo, 0); //TodayHonor
			Write32(pPlayerDBBaseInfo, 0); //RelaxTime
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationBefore
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationCur
			Write32(pPlayerDBBaseInfo, 0); //Charm
			Write32(pPlayerDBBaseInfo, 0); //DurationGame
			Write32(pPlayerDBBaseInfo, 0); //DanceExp
			Write32(pPlayerDBBaseInfo, 0); //Coupons
			Write32(pPlayerDBBaseInfo, 0); //Admiration
			Write32(pPlayerDBBaseInfo, 0); //LuckMoney
			Write32(pPlayerDBBaseInfo, 0); //TeamWorkExp
			Write32(pPlayerDBBaseInfo, 0); //AchievePoint
			Write32(pPlayerDBBaseInfo, 0); //RegTime
			WriteString(pPlayerDBBaseInfo, 0); //Signature[]
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchPoint
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchNum
			Write16(pPlayerDBBaseInfo, 0); //LuckyMatchFirstNum
			Write8(pPlayerDBBaseInfo, 0); //LuckyMatchBestRand
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchWinNum
			Write32(pPlayerDBBaseInfo, 0); //FizzPointTotal
			Write16(pPlayerDBBaseInfo, 0); //FizzPointDaily
			Write16(pPlayerDBBaseInfo, 0); //FizzPointWeekly
			Write16(pPlayerDBBaseInfo, 0); //FizzPointLastWeek
			Write8(pPlayerDBBaseInfo, 0); //FizzLotteryStatus
			Write32(pPlayerDBBaseInfo, 0); //FizzLastUpdateTime
			Write32(pPlayerDBBaseInfo, 0); //SNSLocaleCode
			Write32(pPlayerDBBaseInfo, 0); //AuctionRightUnlockTime
			Write8(pPlayerDBBaseInfo, 0); //ReserveFlag
			Write32(pPlayerDBBaseInfo, 0); //CurConsumeScore
			Write32(pPlayerDBBaseInfo, 0); //HistoryConsumeScore
			Write8(pPlayerDBBaseInfo, 0); //CrashModeSponsorID
			Write32(pPlayerDBBaseInfo, 0); //Popularity
			Write32(pPlayerDBBaseInfo, 0); //LadderMatchAchievePoint
			Write32(pPlayerDBBaseInfo, 0); //Cash
			Write32(pPlayerDBBaseInfo, 0); //PlayerGPMIdentity
			Write32(pPlayerDBBaseInfo, 0); //PointTotalScore
			WriteUn(pPlayerDBBaseInfo, 0); //totalMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //lastMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalSeasonId
			WriteUn(pPlayerDBBaseInfo, 0); //lastClearMapMedalTime
			WriteUn(pPlayerDBBaseInfo, 0); //max2048Score
			WriteUn(pPlayerDBBaseInfo, 0); //curPlay2048LeftNum
			Write32(pPlayerDBBaseInfo, 0); //CheerValue
			Write16(pPlayerDBBaseInfo, 0); //SeasonID
			Write32(pPlayerDBBaseInfo, 0); //LastCheerValue
			Write32(pPlayerDBBaseInfo, 0); //SpeedBean
			Write32(pPlayerDBBaseInfo, 0); //SpeedCoin

			len = pPlayerDBBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //PlayerGuildInfo
			BYTE* pPlayerGuildInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerGuildInfo, 0); //len

			WriteString(pPlayerGuildInfo, 0); //GuildName[]
			Write16(pPlayerGuildInfo, 0); //Duty
			Write32(pPlayerGuildInfo, 0); //GuildID
			Write32(pPlayerGuildInfo, 0); //Right
			Write32(pPlayerGuildInfo, 0); //Medal
			Write32(pPlayerGuildInfo, 0); //Contribute
			WriteString(pPlayerGuildInfo, 0); //DutyTitle[]

			len = pPlayerGuildInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write16(pPlayerRoomVisibleInfo, 0); //EquipedItemNum
		for (size_t i = 0; i < n; i++)
		{ //PlayerItemInfo
			BYTE* pPlayerItemInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerItemInfo, 0); //len

			Write32(pPlayerItemInfo, 0); //ItemID
			Write32(pPlayerItemInfo, 0); //ItemNum
			Write32(pPlayerItemInfo, 0); //AvailPeriod
			Write8(pPlayerItemInfo, 0); //Status
			WriteUn(pPlayerItemInfo, 0); //ObtainTime
			Write32(pPlayerItemInfo, 0); //OtherAttribute
			Write16(pPlayerItemInfo, 0); //ItemType

			len = pPlayerItemInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write16(pPlayerRoomVisibleInfo, 0); //PetNum
		for (size_t i = 0; i < n; i++)
		{ //PetInfo
			BYTE* pPetInfo = pPlayerRoomVisibleInfo;
			Write16(pPetInfo, 0); //len

			Write32(pPetInfo, 0); //Uin
			Write32(pPetInfo, 0); //PetId
			WriteString(pPetInfo, 0); //PetName[]
			Write8(pPetInfo, 0); //IsProper
			Write16(pPetInfo, 0); //Level
			Write8(pPetInfo, 0); //Status
			Write16(pPetInfo, 0); //PetSkillNum
			for (size_t i = 0; i < n; i++)
			{ //PetSkillList
				BYTE* pPetSkillList = pPetInfo;
				Write16(pPetSkillList, 0); //len

				Write16(pPetSkillList, 0); //SkillID
				Write8(pPetSkillList, 0); //Status
				Write8(pPetSkillList, 0); //Active
				Write32(pPetSkillList, 0); //Value

				len = pPetSkillList - pPetInfo;
				Set16(pPetInfo, (WORD)len);
				pPetInfo += len;
			}
			Write32(pPetInfo, 0); //StrengLevel
			Write8(pPetInfo, 0); //TopStatus
			{ //CommonInfo
				BYTE* pCommonInfo = pPetInfo;
				Write16(pCommonInfo, 0); //len

				Write32(pCommonInfo, 0); //HuanHuaLevel
				Write8(pCommonInfo, 0); //CanHuanHua

				len = pCommonInfo - pPetInfo;
				Set16(pPetInfo, (WORD)len);
				pPetInfo += len;
			}
			Write16(pPetInfo, 0); //PKStar
			Write32(pPetInfo, 0); //PetSkinID

			len = pPetInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //PlayerGuildMatchInfo
			BYTE* pPlayerGuildMatchInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerGuildMatchInfo, 0); //len

			Write32(pPlayerGuildMatchInfo, 0); //SelfPoint
			Write32(pPlayerGuildMatchInfo, 0); //WinNum
			Write32(pPlayerGuildMatchInfo, 0); //TotalNum

			len = pPlayerGuildMatchInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //IsInTopList
		Write8(pPlayerRoomVisibleInfo, 0); //LoverRaceOrPro
		Write8(pPlayerRoomVisibleInfo, 0); //TmpEffectNum
		Write32(pPlayerRoomVisibleInfo, 0); //TmpEffectItems[]
		Write8(pPlayerRoomVisibleInfo, 0); //OBState
		Write8(pPlayerRoomVisibleInfo, 0); //DebutOrX5
		Write8(pPlayerRoomVisibleInfo, 0); //RandKeyFlag
		WriteUn(pPlayerRoomVisibleInfo, 0); //VipFlag
		Write8(pPlayerRoomVisibleInfo, 0); //HaveAppellation
		for (size_t i = 0; i < n; i++)
		{ //CurAppellation
			BYTE* pCurAppellation = pPlayerRoomVisibleInfo;
			Write16(pCurAppellation, 0); //len

			Write8(pCurAppellation, 0); //Type
			Write8(pCurAppellation, 0); //Level
			Write8(pCurAppellation, 0); //Status
			Write8(pCurAppellation, 0); //Difficulty
			Write32(pCurAppellation, 0); //MapId
			Write32(pCurAppellation, 0); //Value

			len = pCurAppellation - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //NobleInfo
			BYTE* pNobleInfo = pPlayerRoomVisibleInfo;
			Write16(pNobleInfo, 0); //len

			Write32(pNobleInfo, 0); //NobleID
			Write8(pNobleInfo, 0); //NobleLevel
			Write32(pNobleInfo, 0); //NoblePoint
			Write32(pNobleInfo, 0); //NobleLeftDays

			len = pNobleInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasCarryWizard
		for (size_t i = 0; i < n; i++)
		{ //CarryWizardInfo
			BYTE* pCarryWizardInfo = pPlayerRoomVisibleInfo;
			Write16(pCarryWizardInfo, 0); //len

			Write16(pCarryWizardInfo, 0); //WizardID
			WriteString(pCarryWizardInfo, 0); //NickName[]
			Write16(pCarryWizardInfo, 0); //WizardType
			Write8(pCarryWizardInfo, 0); //Order
			Write8(pCarryWizardInfo, 0); //EvolutionBranch
			Write8(pCarryWizardInfo, 0); //IsHuanHua

			len = pCarryWizardInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //GuildVipBaseInfo
			BYTE* pGuildVipBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pGuildVipBaseInfo, 0); //len

			Write8(pGuildVipBaseInfo, 0); //GuildVipLevel
			Write32(pGuildVipBaseInfo, 0); //GuildVipPoint

			len = pGuildVipBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write32(pPlayerRoomVisibleInfo, 0); //ExFlag
		Write8(pPlayerRoomVisibleInfo, 0); //HaveLDMBaseInfo
		for (size_t i = 0; i < n; i++)
		{ //PlayerLDMBaseInfo
			BYTE* pPlayerLDMBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerLDMBaseInfo, 0); //len

			Write8(pPlayerLDMBaseInfo, 0); //Grade
			Write32(pPlayerLDMBaseInfo, 0); //Score
			Write32(pPlayerLDMBaseInfo, 0); //MaxScore
			Write32(pPlayerLDMBaseInfo, 0); //MaxGrade

			len = pPlayerLDMBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasWl
		for (size_t i = 0; i < n; i++)
		{ //PlayerWlVisibleInfo
			BYTE* pPlayerWlVisibleInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerWlVisibleInfo, 0); //len

			Write32(pPlayerWlVisibleInfo, 0); //WonderLandID
			WriteString(pPlayerWlVisibleInfo, 0); //WonderLandName[]
			Write16(pPlayerWlVisibleInfo, 0); //WonderLandDuty
			Write8(pPlayerWlVisibleInfo, 0); //SubType
			Write8(pPlayerWlVisibleInfo, 0); //GuildGrade

			len = pPlayerWlVisibleInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasLoverVip
		for (size_t i = 0; i < n; i++)
		{ //LoverVipInfo
			BYTE* pLoverVipInfo = pPlayerRoomVisibleInfo;
			Write16(pLoverVipInfo, 0); //len

			Write8(pLoverVipInfo, 0); //LoverVipLevel
			Write32(pLoverVipInfo, 0); //LoverVipPoint
			Write8(pLoverVipInfo, 0); //GrowRate

			len = pLoverVipInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasBattleModeSkillInfoList
		for (size_t i = 0; i < n; i++)
		{ //BattleModeSkillInfoList
			BYTE* pBattleModeSkillInfoList = pPlayerRoomVisibleInfo;
			Write16(pBattleModeSkillInfoList, 0); //len

			Write8(pBattleModeSkillInfoList, 0); //SkillNum
			for (size_t i = 0; i < n; i++)
			{ //SkillInfo
				BYTE* pSkillInfo = pBattleModeSkillInfoList;
				Write16(pSkillInfo, 0); //len

				Write16(pSkillInfo, 0); //SkillId
				Write8(pSkillInfo, 0); //SkillLevel

				len = pSkillInfo - pBattleModeSkillInfoList;
				Set16(pBattleModeSkillInfoList, (WORD)len);
				pBattleModeSkillInfoList += len;
			}

			len = pBattleModeSkillInfoList - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasGarden
		for (size_t i = 0; i < n; i++)
		{ //PersonalGardenBaseInfo
			BYTE* pPersonalGardenBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pPersonalGardenBaseInfo, 0); //len

			Write8(pPersonalGardenBaseInfo, 0); //GardenLevel
			Write32(pPersonalGardenBaseInfo, 0); //GardenPoint
			Write8(pPersonalGardenBaseInfo, 0); //GrowRate
			Write32(pPersonalGardenBaseInfo, 0); //GardenExpireTime
			{ //SimpleInfo
				BYTE* pSimpleInfo = pPersonalGardenBaseInfo;
				Write16(pSimpleInfo, 0); //len

				Write32(pSimpleInfo, 0); //WeekPopularity
				Write32(pSimpleInfo, 0); //TotalPopularity
				Write32(pSimpleInfo, 0); //LastUpdatePopularityTime
				Write8(pSimpleInfo, 0); //PrivateType

				len = pSimpleInfo - pPersonalGardenBaseInfo;
				Set16(pPersonalGardenBaseInfo, (WORD)len);
				pPersonalGardenBaseInfo += len;
			}

			len = pPersonalGardenBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //ConsumeVipInfo
			BYTE* pConsumeVipInfo = pPlayerRoomVisibleInfo;
			Write16(pConsumeVipInfo, 0); //len

			WriteUn(pConsumeVipInfo, 0); //VipLevel
			WriteUn(pConsumeVipInfo, 0); //CharmValueOfMonth
			WriteUn(pConsumeVipInfo, 0); //SearchTreasureNums
			WriteUn(pConsumeVipInfo, 0); //GetTreasureNums

			len = pConsumeVipInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HaveBaby
		{ //LoverBabyInfo
			BYTE* pLoverBabyInfo = pPlayerRoomVisibleInfo;
			Write16(pLoverBabyInfo, 0); //len

			Write32(pLoverBabyInfo, 0); //LoverBabyID
			Write32(pLoverBabyInfo, 0); //ItemID
			Write32(pLoverBabyInfo, 0); //GrowValue
			Write32(pLoverBabyInfo, 0); //MentalValue
			Write32(pLoverBabyInfo, 0); //BabyProfileLevel
			Write32(pLoverBabyInfo, 0); //StrengthLevel
			Write32(pLoverBabyInfo, 0); //GrowLevel
			WriteString(pLoverBabyInfo, 0); //LoveBabyNickName[]
			Write16(pLoverBabyInfo, 0); //LoverBabyStat
			Write16(pLoverBabyInfo, 0); //LoverBabyEquipStat
			Write16(pLoverBabyInfo, 0); //LoverBabyTransferdStatus

			len = pLoverBabyInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //EmperorInfo
			BYTE* pEmperorInfo = pPlayerRoomVisibleInfo;
			Write16(pEmperorInfo, 0); //len

			Write8(pEmperorInfo, 0); //EmperorLevel
			Write32(pEmperorInfo, 0); //EmperorPoint
			Write32(pEmperorInfo, 0); //EmperorLeftDays
			Write8(pEmperorInfo, 0); //EmperorGrowRate

			len = pEmperorInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write16(pPlayerRoomVisibleInfo, 0); //RaceCardNums
		for (size_t i = 0; i < n; i++)
		{ //RaceCardAddValueInfo
			BYTE* pRaceCardAddValueInfo = pPlayerRoomVisibleInfo;
			Write16(pRaceCardAddValueInfo, 0); //len

			Write32(pRaceCardAddValueInfo, 0); //RaceCardID
			Write32(pRaceCardAddValueInfo, 0); //AddValue

			len = pRaceCardAddValueInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //GansterScoreInfo
			BYTE* pGansterScoreInfo = pPlayerRoomVisibleInfo;
			Write16(pGansterScoreInfo, 0); //len

			Write32(pGansterScoreInfo, 0); //GansterSeasonID
			Write32(pGansterScoreInfo, 0); //GansterScore
			Write32(pGansterScoreInfo, 0); //PoliceScore
			Write32(pGansterScoreInfo, 0); //TotalGansterScore

			len = pGansterScoreInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write32(pPlayerRoomVisibleInfo, 0); //OlympicId
		Write32(pPlayerRoomVisibleInfo, 0); //NPCEliminateWinTimes
		Write8(pPlayerRoomVisibleInfo, 0); //OriginTeamID
		Write8(pPlayerRoomVisibleInfo, 0); //NxNpc
		Write16(pPlayerRoomVisibleInfo, 0); //NxNpcAILevel
		{ //EquippedActiveKartInfo
			BYTE* pEquippedActiveKartInfo = pPlayerRoomVisibleInfo;
			Write16(pEquippedActiveKartInfo, 0); //len

			Write8(pEquippedActiveKartInfo, 0); //HaveActiveInfo
			Write32(pEquippedActiveKartInfo, 0); //KartID
			Write32(pEquippedActiveKartInfo, 0); //ActiveLevel

			len = pEquippedActiveKartInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //SpecialActivityStatus
		Write8(pPlayerRoomVisibleInfo, 0); //AreaID
		Write8(pPlayerRoomVisibleInfo, 0); //HaveRaiseSecondBaby
		{ //SecondLoverBabyInfo
			BYTE* pSecondLoverBabyInfo = pPlayerRoomVisibleInfo;
			Write16(pSecondLoverBabyInfo, 0); //len

			Write32(pSecondLoverBabyInfo, 0); //LoverBabyID
			Write32(pSecondLoverBabyInfo, 0); //ItemID
			Write32(pSecondLoverBabyInfo, 0); //GrowValue
			Write32(pSecondLoverBabyInfo, 0); //MentalValue
			Write32(pSecondLoverBabyInfo, 0); //BabyProfileLevel
			Write32(pSecondLoverBabyInfo, 0); //StrengthLevel
			Write32(pSecondLoverBabyInfo, 0); //GrowLevel
			WriteString(pSecondLoverBabyInfo, 0); //LoveBabyNickName[]
			Write16(pSecondLoverBabyInfo, 0); //LoverBabyStat
			Write16(pSecondLoverBabyInfo, 0); //LoverBabyEquipStat
			Write16(pSecondLoverBabyInfo, 0); //LoverBabyTransferdStatus

			len = pSecondLoverBabyInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasRankedMatchInfo
		for (size_t i = 0; i < n; i++)
		{ //RankedMatchGradeInfo
			BYTE* pRankedMatchGradeInfo = pPlayerRoomVisibleInfo;
			Write16(pRankedMatchGradeInfo, 0); //len

			Write32(pRankedMatchGradeInfo, 0); //GradeLevel
			Write32(pRankedMatchGradeInfo, 0); //ChildLevel
			Write32(pRankedMatchGradeInfo, 0); //GradeScore
			Write32(pRankedMatchGradeInfo, 0); //MaxGradeScore
			Write32(pRankedMatchGradeInfo, 0); //TotalScore

			len = pRankedMatchGradeInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasHuanLingChangeInfo
		for (size_t i = 0; i < n; i++)
		{ //HuanLingSuitInfo
			BYTE* pHuanLingSuitInfo = pPlayerRoomVisibleInfo;
			Write16(pHuanLingSuitInfo, 0); //len

			Write32(pHuanLingSuitInfo, 0); //SuitID
			Write8(pHuanLingSuitInfo, 0); //ChangeLevel

			len = pHuanLingSuitInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //EquipSealType
		Write16(pPlayerRoomVisibleInfo, 0); //Role
		Write8(pPlayerRoomVisibleInfo, 0); //SpecialActivityIDNum
		Write8(pPlayerRoomVisibleInfo, 0); //CrewID
		Write8(pPlayerRoomVisibleInfo, 0); //SpecialActivityInfoNum
		for (size_t i = 0; i < n; i++)
		{ //SpecialActivityInfo
			BYTE* pSpecialActivityInfo = pPlayerRoomVisibleInfo;
			Write16(pSpecialActivityInfo, 0); //len

			Write8(pSpecialActivityInfo, 0); //ProfessionLicenseInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ProfessionLicenseInfo
				BYTE* pProfessionLicenseInfo = pSpecialActivityInfo;
				Write16(pProfessionLicenseInfo, 0); //len

				Write8(pProfessionLicenseInfo, 0); //BigLevel
				Write8(pProfessionLicenseInfo, 0); //SmallLevel

				len = pProfessionLicenseInfo - pSpecialActivityInfo;
				Set16(pSpecialActivityInfo, (WORD)len);
				pSpecialActivityInfo += len;
			}

			len = pSpecialActivityInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //ParaNum
		Write32(pPlayerRoomVisibleInfo, 0); //ParaList[]
		Write8(pPlayerRoomVisibleInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemOrder
			BYTE* pItemOrder = pPlayerRoomVisibleInfo;
			Write16(pItemOrder, 0); //len

			Write32(pItemOrder, 0); //KartID
			Write32(pItemOrder, 0); //Order
			Write32(pItemOrder, 0); //BackGroundID

			len = pItemOrder - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //TDCExcluItemNum
		Write32(pPlayerRoomVisibleInfo, 0); //TDCExclusiveItemID[]
		Write8(pPlayerRoomVisibleInfo, 0); //EquipNiChangItemNum
		for (size_t i = 0; i < n; i++)
		{ //NiChangPavilionEquipItemInfo
			BYTE* pNiChangPavilionEquipItemInfo = pPlayerRoomVisibleInfo;
			Write16(pNiChangPavilionEquipItemInfo, 0); //len

			Write32(pNiChangPavilionEquipItemInfo, 0); //ItemId
			Write16(pNiChangPavilionEquipItemInfo, 0); //CurrentEquipColorationPlanId

			len = pNiChangPavilionEquipItemInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //TestKartGameType
		Write32(pPlayerRoomVisibleInfo, 0); //GameTestKartID
		Write8(pPlayerRoomVisibleInfo, 0); //HasStarsFightingInfo
		for (size_t i = 0; i < n; i++)
		{ //StarsFightingInfo
			BYTE* pStarsFightingInfo = pPlayerRoomVisibleInfo;
			Write16(pStarsFightingInfo, 0); //len

			Write32(pStarsFightingInfo, 0); //Star
			Write32(pStarsFightingInfo, 0); //StarVal
			Write32(pStarsFightingInfo, 0); //StarsFightingStarLevel

			len = pStarsFightingInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //RoomBGSetting

		len = pPlayerRoomVisibleInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasNext

	len = p - buf;
	SendToClient(Client, 1719, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyMuchPlayerGameBegin(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //BaseGameMode
	Write16(p, 0); //SubGameMode
	Write32(p, 0); //MapID
	WriteString(p, 0); //MapHash[]
	WriteUn(p, 0); //GameID
	Write8(p, 0); //SyncCarNum
	for (size_t i = 0; i < n; i++)
	{ //SyncCar
		BYTE* pSyncCar = p;
		Write16(pSyncCar, 0); //len

		WriteUn(pSyncCar, 0); //PlayerUin
		Write16(pSyncCar, 0); //CurCarID
		Write8(pSyncCar, 0); //HasStoneInfo
		for (size_t i = 0; i < n; i++)
		{ //STKartStoneGrooveInfo
			BYTE* pSTKartStoneGrooveInfo = pSyncCar;
			Write16(pSTKartStoneGrooveInfo, 0); //len

			Write32(pSTKartStoneGrooveInfo, 0); //KartID
			Write32(pSTKartStoneGrooveInfo, 0); //StoneGrooveNum
			for (size_t i = 0; i < n; i++)
			{ //StoneGrooveInfo
				BYTE* pStoneGrooveInfo = pSTKartStoneGrooveInfo;
				Write16(pStoneGrooveInfo, 0); //len

				Write32(pStoneGrooveInfo, 0); //StoneUseOccaType
				Write32(pStoneGrooveInfo, 0); //SkillStoneID

				len = pStoneGrooveInfo - pSTKartStoneGrooveInfo;
				Set16(pSTKartStoneGrooveInfo, (WORD)len);
				pSTKartStoneGrooveInfo += len;
			}

			len = pSTKartStoneGrooveInfo - pSyncCar;
			Set16(pSyncCar, (WORD)len);
			pSyncCar += len;
		}

		len = pSyncCar - p;
		Set16(p, (WORD)len);
		p += len;
	}
	WriteUn(p, 0); //NormalLoadTime
	Write16(p, 0); //TotalMapRound
	Write8(p, 0); //CurrentPlayers
	Write16(p, 0); //RaceTrackOrders[]
	Write16(p, 0); //NPCTrackOrders[]

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyMuchPlayerKartPhysParamInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //KartNum
	for (size_t i = 0; i < n; i++)
	{ //KartPhysParam
		BYTE* pKartPhysParam = p;
		Write16(pKartPhysParam, 0); //len

		Write32(pKartPhysParam, 0); //KartID
		Write8(pKartPhysParam, 0); //PhysInfoCount
		for (size_t i = 0; i < n; i++)
		{ //PhysInfo
			BYTE* pPhysInfo = pKartPhysParam;
			Write16(pPhysInfo, 0); //len

			Write32(pPhysInfo, 0); //PID
			Write32(pPhysInfo, 0); //AffectID
			Write32(pPhysInfo, 0); //Param
			Write32(pPhysInfo, 0); //LifeTime

			len = pPhysInfo - pKartPhysParam;
			Set16(pKartPhysParam, (WORD)len);
			pKartPhysParam += len;
		}
		Write8(pKartPhysParam, 0); //CompensateParamCount
		for (size_t i = 0; i < n; i++)
		{ //CompensateParam
			BYTE* pCompensateParam = pKartPhysParam;
			Write16(pCompensateParam, 0); //len

			Write32(pCompensateParam, 0); //Percent
			Write32(pCompensateParam, 0); //Value

			len = pCompensateParam - pKartPhysParam;
			Set16(pKartPhysParam, (WORD)len);
			pKartPhysParam += len;
		}
		{ //CollisionBoxParam
			BYTE* pCollisionBoxParam = pKartPhysParam;
			Write16(pCollisionBoxParam, 0); //len

			Write32(pCollisionBoxParam, 0); //BoxLength
			Write32(pCollisionBoxParam, 0); //BoxWidth
			Write32(pCollisionBoxParam, 0); //BoxHeight
			Write32(pCollisionBoxParam, 0); //AdjustOffset
			Write32(pCollisionBoxParam, 0); //AdjustPickGap
			Write32(pCollisionBoxParam, 0); //AdjustRemoteOffset
			Write32(pCollisionBoxParam, 0); //AdjustBevelOffset
			Write32(pCollisionBoxParam, 0); //ControllerOffset

			len = pCollisionBoxParam - pKartPhysParam;
			Set16(pKartPhysParam, (WORD)len);
			pKartPhysParam += len;
		}
		{ //CarToCarCollisionParam
			BYTE* pCarToCarCollisionParam = pKartPhysParam;
			Write16(pCarToCarCollisionParam, 0); //len

			Write32(pCarToCarCollisionParam, 0); //CollisionRadius
			Write32(pCarToCarCollisionParam, 0); //CollisionLength
			Write32(pCarToCarCollisionParam, 0); //CollisionWidth
			Write32(pCarToCarCollisionParam, 0); //CollisionHeight
			Write32(pCarToCarCollisionParam, 0); //CollisionLostCtrlTime

			len = pCarToCarCollisionParam - pKartPhysParam;
			Set16(pKartPhysParam, (WORD)len);
			pKartPhysParam += len;
		}
		Write32(pKartPhysParam, 0); //BaseTurnRate
		Write32(pKartPhysParam, 0); //VolatileTurnRate
		Write32(pKartPhysParam, 0); //MaxTurnSpeed
		Write32(pKartPhysParam, 0); //MinTurnSpeed
		Write32(pKartPhysParam, 0); //MaxAccuTime
		Write32(pKartPhysParam, 0); //BaseAccuRate
		Write32(pKartPhysParam, 0); //MaxAffectSpeed
		Write32(pKartPhysParam, 0); //Gravity
		Write32(pKartPhysParam, 0); //AdditionalLocalZSpeed
		Write32(pKartPhysParam, 0); //StartVec
		Write32(pKartPhysParam, 0); //EndVecFist
		Write32(pKartPhysParam, 0); //EndVecSecon
		Write32(pKartPhysParam, 0); //DirKeyForce
		Write32(pKartPhysParam, 0); //DirKeyTwist
		Write32(pKartPhysParam, 0); //BannerTwist
		Write32(pKartPhysParam, 0); //BannerKeyTwist
		Write32(pKartPhysParam, 0); //BannerVecForce
		Write32(pKartPhysParam, 0); //BannerHeadForce
		Write32(pKartPhysParam, 0); //SlidFricForce
		Write32(pKartPhysParam, 0); //RollFricForce
		Write32(pKartPhysParam, 0); //StartWec
		Write32(pKartPhysParam, 0); //MaxWec
		Write32(pKartPhysParam, 0); //SuaiJianTwist
		Write32(pKartPhysParam, 0); //DirUpKeyForce
		Write8(pKartPhysParam, 0); //AccelStatusCount
		Write32(pKartPhysParam, 0); //AccelStatus[]
		Write8(pKartPhysParam, 0); //ForwardAccelNum
		for (size_t i = 0; i < n; i++)
		{ //ForwardAccel
			BYTE* pForwardAccel = pKartPhysParam;
			Write16(pForwardAccel, 0); //len

			Write32(pForwardAccel, 0); //Key
			Write32(pForwardAccel, 0); //Value

			len = pForwardAccel - pKartPhysParam;
			Set16(pKartPhysParam, (WORD)len);
			pKartPhysParam += len;
		}
		Write8(pKartPhysParam, 0); //ForwardDecelNum
		for (size_t i = 0; i < n; i++)
		{ //ForwardDecel
			BYTE* pForwardDecel = pKartPhysParam;
			Write16(pForwardDecel, 0); //len

			Write32(pForwardDecel, 0); //Key
			Write32(pForwardDecel, 0); //Value

			len = pForwardDecel - pKartPhysParam;
			Set16(pKartPhysParam, (WORD)len);
			pKartPhysParam += len;
		}
		Write8(pKartPhysParam, 0); //BackwardAccelNum
		for (size_t i = 0; i < n; i++)
		{ //BackwardAccel
			BYTE* pBackwardAccel = pKartPhysParam;
			Write16(pBackwardAccel, 0); //len

			Write32(pBackwardAccel, 0); //Key
			Write32(pBackwardAccel, 0); //Value

			len = pBackwardAccel - pKartPhysParam;
			Set16(pKartPhysParam, (WORD)len);
			pKartPhysParam += len;
		}
		Write8(pKartPhysParam, 0); //BackwardDecelNum
		for (size_t i = 0; i < n; i++)
		{ //BackwardDecel
			BYTE* pBackwardDecel = pKartPhysParam;
			Write16(pBackwardDecel, 0); //len

			Write32(pBackwardDecel, 0); //Key
			Write32(pBackwardDecel, 0); //Value

			len = pBackwardDecel - pKartPhysParam;
			Set16(pKartPhysParam, (WORD)len);
			pKartPhysParam += len;
		}
		Write32(pKartPhysParam, 0); //CrashCompensatePower
		Write32(pKartPhysParam, 0); //DefenseRate
		Write32(pKartPhysParam, 0); //Uin
		Write32(pKartPhysParam, 0); //SpeedupCardGenRate
		Write32(pKartPhysParam, 0); //ExtraFuncFlag
		Write8(pKartPhysParam, 0); //SkatePara
		for (size_t i = 0; i < n; i++)
		{ //hasSkatePara
			BYTE* phasSkatePara = pKartPhysParam;
			Write16(phasSkatePara, 0); //len

			Write32(phasSkatePara, 0); //TrackSpeed
			Write32(phasSkatePara, 0); //SkateSpeedCoef_AirBigJet
			Write32(phasSkatePara, 0); //SkateSpeedCoef_Jump
			Write32(phasSkatePara, 0); //SkateSpeedCoef_AirJetPoint
			Write32(phasSkatePara, 0); //SkateSpeedCoef_MaxForce
			Write32(phasSkatePara, 0); //OntrackAccRef
			Write32(phasSkatePara, 0); //TrackAccRef
			Write32(phasSkatePara, 0); //DashSkill

			len = phasSkatePara - pKartPhysParam;
			Set16(pKartPhysParam, (WORD)len);
			pKartPhysParam += len;
		}
		Write8(pKartPhysParam, 0); //HasBattleModeSkillInfoList
		for (size_t i = 0; i < n; i++)
		{ //BattleModeSkillInfoList
			BYTE* pBattleModeSkillInfoList = pKartPhysParam;
			Write16(pBattleModeSkillInfoList, 0); //len

			Write8(pBattleModeSkillInfoList, 0); //SkillNum
			for (size_t i = 0; i < n; i++)
			{ //SkillInfo
				BYTE* pSkillInfo = pBattleModeSkillInfoList;
				Write16(pSkillInfo, 0); //len

				Write16(pSkillInfo, 0); //SkillId
				Write8(pSkillInfo, 0); //SkillLevel

				len = pSkillInfo - pBattleModeSkillInfoList;
				Set16(pBattleModeSkillInfoList, (WORD)len);
				pBattleModeSkillInfoList += len;
			}

			len = pBattleModeSkillInfoList - pKartPhysParam;
			Set16(pKartPhysParam, (WORD)len);
			pKartPhysParam += len;
		}
		Write32(pKartPhysParam, 0); //EnergyConvert
		Write16(pKartPhysParam, 0); //SuperN2ORate
		Write16(pKartPhysParam, 0); //CollisionLoseRate
		Write8(pKartPhysParam, 0); //NotInterruptDrift
		Write8(pKartPhysParam, 0); //AddWeightNum
		Write8(pKartPhysParam, 0); //WeightNum
		Write8(pKartPhysParam, 0); //HasAntiCollisionCfg
		for (size_t i = 0; i < n; i++)
		{ //AntiCollistionCfg
			BYTE* pAntiCollistionCfg = pKartPhysParam;
			Write16(pAntiCollistionCfg, 0); //len

			Write8(pAntiCollistionCfg, 0); //Num
			Write32(pAntiCollistionCfg, 0); //Position[]

			len = pAntiCollistionCfg - pKartPhysParam;
			Set16(pKartPhysParam, (WORD)len);
			pKartPhysParam += len;
		}
		Write8(pKartPhysParam, 0); //HasBoatParam
		for (size_t i = 0; i < n; i++)
		{ //BoatParam
			BYTE* pBoatParam = pKartPhysParam;
			Write16(pBoatParam, 0); //len

			Write32(pBoatParam, 0); //DirKeyForceParamC
			Write32(pBoatParam, 0); //DirKeyForceParamD
			Write32(pBoatParam, 0); //DTFLimitAngle
			Write32(pBoatParam, 0); //DTFRatio
			Write32(pBoatParam, 0); //UpKeyVecForce
			Write32(pBoatParam, 0); //UpKeyVecForceParamA
			Write32(pBoatParam, 0); //UpKeyVecForceParamB
			Write32(pBoatParam, 0); //LRKeyVecForce
			Write32(pBoatParam, 0); //LRKeyVecForceParamA
			Write32(pBoatParam, 0); //LRKeyVecForceParamB
			Write32(pBoatParam, 0); //VecForce
			Write32(pBoatParam, 0); //VecForceParamA
			Write32(pBoatParam, 0); //VecForceParamB
			Write32(pBoatParam, 0); //BoatShape[]
			Write32(pBoatParam, 0); //WecEffect
			Write32(pBoatParam, 0); //BannerKeyTwist
			Write32(pBoatParam, 0); //BannerKeyTwistParamA
			Write32(pBoatParam, 0); //BannerKeyTwistParamB
			Write32(pBoatParam, 0); //SuaiJianTwist
			Write32(pBoatParam, 0); //BoatHeighRatio
			Write32(pBoatParam, 0); //BannerTwist
			Write32(pBoatParam, 0); //BannerTwistParamA
			Write32(pBoatParam, 0); //DirUpKeyForce
			Write32(pBoatParam, 0); //DirUpKeyForceParamA
			Write32(pBoatParam, 0); //DirUpKeyForceParamB
			Write32(pBoatParam, 0); //DirKeyForce
			Write32(pBoatParam, 0); //DirKeyForceParamA
			Write32(pBoatParam, 0); //DirKeyForceParamB
			Write32(pBoatParam, 0); //AddNO2PerSec
			Write32(pBoatParam, 0); //BoatAirValue
			WriteUn(pBoatParam, 0); //ifSlidFricForce

			len = pBoatParam - pKartPhysParam;
			Set16(pKartPhysParam, (WORD)len);
			pKartPhysParam += len;
		}
		Write8(pKartPhysParam, 0); //BoatForwardAccelNum
		for (size_t i = 0; i < n; i++)
		{ //BoatForwardAccel
			BYTE* pBoatForwardAccel = pKartPhysParam;
			Write16(pBoatForwardAccel, 0); //len

			Write32(pBoatForwardAccel, 0); //Key
			Write32(pBoatForwardAccel, 0); //Value

			len = pBoatForwardAccel - pKartPhysParam;
			Set16(pKartPhysParam, (WORD)len);
			pKartPhysParam += len;
		}
		Write32(pKartPhysParam, 0); //DirUpKeyForceParamA
		Write32(pKartPhysParam, 0); //DirUpKeyForceParamB

		len = pKartPhysParam - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //SuperN2ORate
	Write8(p, 0); //HasMoreInfo

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyMuchPlayerKartPhysParamMoreInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //KartNum
	for (size_t i = 0; i < n; i++)
	{ //KartPhysParam
		BYTE* pKartPhysParam = p;
		Write16(pKartPhysParam, 0); //len

		Write32(pKartPhysParam, 0); //KartID
		Write8(pKartPhysParam, 0); //PhysInfoCount
		for (size_t i = 0; i < n; i++)
		{ //PhysInfo
			BYTE* pPhysInfo = pKartPhysParam;
			Write16(pPhysInfo, 0); //len

			Write32(pPhysInfo, 0); //PID
			Write32(pPhysInfo, 0); //AffectID
			Write32(pPhysInfo, 0); //Param
			Write32(pPhysInfo, 0); //LifeTime

			len = pPhysInfo - pKartPhysParam;
			Set16(pKartPhysParam, (WORD)len);
			pKartPhysParam += len;
		}
		Write8(pKartPhysParam, 0); //CompensateParamCount
		for (size_t i = 0; i < n; i++)
		{ //CompensateParam
			BYTE* pCompensateParam = pKartPhysParam;
			Write16(pCompensateParam, 0); //len

			Write32(pCompensateParam, 0); //Percent
			Write32(pCompensateParam, 0); //Value

			len = pCompensateParam - pKartPhysParam;
			Set16(pKartPhysParam, (WORD)len);
			pKartPhysParam += len;
		}
		{ //CollisionBoxParam
			BYTE* pCollisionBoxParam = pKartPhysParam;
			Write16(pCollisionBoxParam, 0); //len

			Write32(pCollisionBoxParam, 0); //BoxLength
			Write32(pCollisionBoxParam, 0); //BoxWidth
			Write32(pCollisionBoxParam, 0); //BoxHeight
			Write32(pCollisionBoxParam, 0); //AdjustOffset
			Write32(pCollisionBoxParam, 0); //AdjustPickGap
			Write32(pCollisionBoxParam, 0); //AdjustRemoteOffset
			Write32(pCollisionBoxParam, 0); //AdjustBevelOffset
			Write32(pCollisionBoxParam, 0); //ControllerOffset

			len = pCollisionBoxParam - pKartPhysParam;
			Set16(pKartPhysParam, (WORD)len);
			pKartPhysParam += len;
		}
		{ //CarToCarCollisionParam
			BYTE* pCarToCarCollisionParam = pKartPhysParam;
			Write16(pCarToCarCollisionParam, 0); //len

			Write32(pCarToCarCollisionParam, 0); //CollisionRadius
			Write32(pCarToCarCollisionParam, 0); //CollisionLength
			Write32(pCarToCarCollisionParam, 0); //CollisionWidth
			Write32(pCarToCarCollisionParam, 0); //CollisionHeight
			Write32(pCarToCarCollisionParam, 0); //CollisionLostCtrlTime

			len = pCarToCarCollisionParam - pKartPhysParam;
			Set16(pKartPhysParam, (WORD)len);
			pKartPhysParam += len;
		}
		Write32(pKartPhysParam, 0); //BaseTurnRate
		Write32(pKartPhysParam, 0); //VolatileTurnRate
		Write32(pKartPhysParam, 0); //MaxTurnSpeed
		Write32(pKartPhysParam, 0); //MinTurnSpeed
		Write32(pKartPhysParam, 0); //MaxAccuTime
		Write32(pKartPhysParam, 0); //BaseAccuRate
		Write32(pKartPhysParam, 0); //MaxAffectSpeed
		Write32(pKartPhysParam, 0); //Gravity
		Write32(pKartPhysParam, 0); //AdditionalLocalZSpeed
		Write32(pKartPhysParam, 0); //StartVec
		Write32(pKartPhysParam, 0); //EndVecFist
		Write32(pKartPhysParam, 0); //EndVecSecon
		Write32(pKartPhysParam, 0); //DirKeyForce
		Write32(pKartPhysParam, 0); //DirKeyTwist
		Write32(pKartPhysParam, 0); //BannerTwist
		Write32(pKartPhysParam, 0); //BannerKeyTwist
		Write32(pKartPhysParam, 0); //BannerVecForce
		Write32(pKartPhysParam, 0); //BannerHeadForce
		Write32(pKartPhysParam, 0); //SlidFricForce
		Write32(pKartPhysParam, 0); //RollFricForce
		Write32(pKartPhysParam, 0); //StartWec
		Write32(pKartPhysParam, 0); //MaxWec
		Write32(pKartPhysParam, 0); //SuaiJianTwist
		Write32(pKartPhysParam, 0); //DirUpKeyForce
		Write8(pKartPhysParam, 0); //AccelStatusCount
		Write32(pKartPhysParam, 0); //AccelStatus[]
		Write8(pKartPhysParam, 0); //ForwardAccelNum
		for (size_t i = 0; i < n; i++)
		{ //ForwardAccel
			BYTE* pForwardAccel = pKartPhysParam;
			Write16(pForwardAccel, 0); //len

			Write32(pForwardAccel, 0); //Key
			Write32(pForwardAccel, 0); //Value

			len = pForwardAccel - pKartPhysParam;
			Set16(pKartPhysParam, (WORD)len);
			pKartPhysParam += len;
		}
		Write8(pKartPhysParam, 0); //ForwardDecelNum
		for (size_t i = 0; i < n; i++)
		{ //ForwardDecel
			BYTE* pForwardDecel = pKartPhysParam;
			Write16(pForwardDecel, 0); //len

			Write32(pForwardDecel, 0); //Key
			Write32(pForwardDecel, 0); //Value

			len = pForwardDecel - pKartPhysParam;
			Set16(pKartPhysParam, (WORD)len);
			pKartPhysParam += len;
		}
		Write8(pKartPhysParam, 0); //BackwardAccelNum
		for (size_t i = 0; i < n; i++)
		{ //BackwardAccel
			BYTE* pBackwardAccel = pKartPhysParam;
			Write16(pBackwardAccel, 0); //len

			Write32(pBackwardAccel, 0); //Key
			Write32(pBackwardAccel, 0); //Value

			len = pBackwardAccel - pKartPhysParam;
			Set16(pKartPhysParam, (WORD)len);
			pKartPhysParam += len;
		}
		Write8(pKartPhysParam, 0); //BackwardDecelNum
		for (size_t i = 0; i < n; i++)
		{ //BackwardDecel
			BYTE* pBackwardDecel = pKartPhysParam;
			Write16(pBackwardDecel, 0); //len

			Write32(pBackwardDecel, 0); //Key
			Write32(pBackwardDecel, 0); //Value

			len = pBackwardDecel - pKartPhysParam;
			Set16(pKartPhysParam, (WORD)len);
			pKartPhysParam += len;
		}
		Write32(pKartPhysParam, 0); //CrashCompensatePower
		Write32(pKartPhysParam, 0); //DefenseRate
		Write32(pKartPhysParam, 0); //Uin
		Write32(pKartPhysParam, 0); //SpeedupCardGenRate
		Write32(pKartPhysParam, 0); //ExtraFuncFlag
		Write8(pKartPhysParam, 0); //SkatePara
		for (size_t i = 0; i < n; i++)
		{ //hasSkatePara
			BYTE* phasSkatePara = pKartPhysParam;
			Write16(phasSkatePara, 0); //len

			Write32(phasSkatePara, 0); //TrackSpeed
			Write32(phasSkatePara, 0); //SkateSpeedCoef_AirBigJet
			Write32(phasSkatePara, 0); //SkateSpeedCoef_Jump
			Write32(phasSkatePara, 0); //SkateSpeedCoef_AirJetPoint
			Write32(phasSkatePara, 0); //SkateSpeedCoef_MaxForce
			Write32(phasSkatePara, 0); //OntrackAccRef
			Write32(phasSkatePara, 0); //TrackAccRef
			Write32(phasSkatePara, 0); //DashSkill

			len = phasSkatePara - pKartPhysParam;
			Set16(pKartPhysParam, (WORD)len);
			pKartPhysParam += len;
		}
		Write8(pKartPhysParam, 0); //HasBattleModeSkillInfoList
		for (size_t i = 0; i < n; i++)
		{ //BattleModeSkillInfoList
			BYTE* pBattleModeSkillInfoList = pKartPhysParam;
			Write16(pBattleModeSkillInfoList, 0); //len

			Write8(pBattleModeSkillInfoList, 0); //SkillNum
			for (size_t i = 0; i < n; i++)
			{ //SkillInfo
				BYTE* pSkillInfo = pBattleModeSkillInfoList;
				Write16(pSkillInfo, 0); //len

				Write16(pSkillInfo, 0); //SkillId
				Write8(pSkillInfo, 0); //SkillLevel

				len = pSkillInfo - pBattleModeSkillInfoList;
				Set16(pBattleModeSkillInfoList, (WORD)len);
				pBattleModeSkillInfoList += len;
			}

			len = pBattleModeSkillInfoList - pKartPhysParam;
			Set16(pKartPhysParam, (WORD)len);
			pKartPhysParam += len;
		}
		Write32(pKartPhysParam, 0); //EnergyConvert
		Write16(pKartPhysParam, 0); //SuperN2ORate
		Write16(pKartPhysParam, 0); //CollisionLoseRate
		Write8(pKartPhysParam, 0); //NotInterruptDrift
		Write8(pKartPhysParam, 0); //AddWeightNum
		Write8(pKartPhysParam, 0); //WeightNum
		Write8(pKartPhysParam, 0); //HasAntiCollisionCfg
		for (size_t i = 0; i < n; i++)
		{ //AntiCollistionCfg
			BYTE* pAntiCollistionCfg = pKartPhysParam;
			Write16(pAntiCollistionCfg, 0); //len

			Write8(pAntiCollistionCfg, 0); //Num
			Write32(pAntiCollistionCfg, 0); //Position[]

			len = pAntiCollistionCfg - pKartPhysParam;
			Set16(pKartPhysParam, (WORD)len);
			pKartPhysParam += len;
		}
		Write8(pKartPhysParam, 0); //HasBoatParam
		for (size_t i = 0; i < n; i++)
		{ //BoatParam
			BYTE* pBoatParam = pKartPhysParam;
			Write16(pBoatParam, 0); //len

			Write32(pBoatParam, 0); //DirKeyForceParamC
			Write32(pBoatParam, 0); //DirKeyForceParamD
			Write32(pBoatParam, 0); //DTFLimitAngle
			Write32(pBoatParam, 0); //DTFRatio
			Write32(pBoatParam, 0); //UpKeyVecForce
			Write32(pBoatParam, 0); //UpKeyVecForceParamA
			Write32(pBoatParam, 0); //UpKeyVecForceParamB
			Write32(pBoatParam, 0); //LRKeyVecForce
			Write32(pBoatParam, 0); //LRKeyVecForceParamA
			Write32(pBoatParam, 0); //LRKeyVecForceParamB
			Write32(pBoatParam, 0); //VecForce
			Write32(pBoatParam, 0); //VecForceParamA
			Write32(pBoatParam, 0); //VecForceParamB
			Write32(pBoatParam, 0); //BoatShape[]
			Write32(pBoatParam, 0); //WecEffect
			Write32(pBoatParam, 0); //BannerKeyTwist
			Write32(pBoatParam, 0); //BannerKeyTwistParamA
			Write32(pBoatParam, 0); //BannerKeyTwistParamB
			Write32(pBoatParam, 0); //SuaiJianTwist
			Write32(pBoatParam, 0); //BoatHeighRatio
			Write32(pBoatParam, 0); //BannerTwist
			Write32(pBoatParam, 0); //BannerTwistParamA
			Write32(pBoatParam, 0); //DirUpKeyForce
			Write32(pBoatParam, 0); //DirUpKeyForceParamA
			Write32(pBoatParam, 0); //DirUpKeyForceParamB
			Write32(pBoatParam, 0); //DirKeyForce
			Write32(pBoatParam, 0); //DirKeyForceParamA
			Write32(pBoatParam, 0); //DirKeyForceParamB
			Write32(pBoatParam, 0); //AddNO2PerSec
			Write32(pBoatParam, 0); //BoatAirValue
			WriteUn(pBoatParam, 0); //ifSlidFricForce

			len = pBoatParam - pKartPhysParam;
			Set16(pKartPhysParam, (WORD)len);
			pKartPhysParam += len;
		}
		Write8(pKartPhysParam, 0); //BoatForwardAccelNum
		for (size_t i = 0; i < n; i++)
		{ //BoatForwardAccel
			BYTE* pBoatForwardAccel = pKartPhysParam;
			Write16(pBoatForwardAccel, 0); //len

			Write32(pBoatForwardAccel, 0); //Key
			Write32(pBoatForwardAccel, 0); //Value

			len = pBoatForwardAccel - pKartPhysParam;
			Set16(pKartPhysParam, (WORD)len);
			pKartPhysParam += len;
		}
		Write32(pKartPhysParam, 0); //DirUpKeyForceParamA
		Write32(pKartPhysParam, 0); //DirUpKeyForceParamB

		len = pKartPhysParam - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasNext

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyMuchPlayerRaceOver(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //BaseGameMode
	Write16(p, 0); //SubGameMode
	Write8(p, 0); //CurrentPlayerNum
	for (size_t i = 0; i < n; i++)
	{ //RaceScore
		BYTE* pRaceScore = p;
		Write16(pRaceScore, 0); //len

		WriteUn(pRaceScore, 0); //Uin
		WriteUn(pRaceScore, 0); //FinTime
		Write32(pRaceScore, 0); //BorderGameType
		Write32(pRaceScore, 0); //ExpInc
		Write32(pRaceScore, 0); //TotalExp
		Write32(pRaceScore, 0); //SuperMoneyInc
		Write32(pRaceScore, 0); //TotalSuperMoney
		Write32(pRaceScore, 0); //PersonalHonor
		Write32(pRaceScore, 0); //TotalPersonalHonor
		Write32(pRaceScore, 0); //NationalHonor
		Write32(pRaceScore, 0); //TotalNationalHonor
		Write32(pRaceScore, 0); //GuildPointInc
		Write32(pRaceScore, 0); //GuildPointSpecialInc
		Write8(pRaceScore, 0); //TeamID
		Write8(pRaceScore, 0); //AwardNum
		Write32(pRaceScore, 0); //SpecialAward[]
		Write8(pRaceScore, 0); //VipMemberFreeFlag
		Write8(pRaceScore, 0); //IsTeamMatch
		Write32(pRaceScore, 0); //ZhanXunInc
		Write32(pRaceScore, 0); //ZhanXunTotal
		Write32(pRaceScore, 0); //TeamHonourInc
		Write32(pRaceScore, 0); //MedalInc
		Write32(pRaceScore, 0); //SeasonZhanXunTotal
		Write32(pRaceScore, 0); //ReduceReturnRate
		Write32(pRaceScore, 0); //ReduceReturnAvailPeriod
		Write32(pRaceScore, 0); //DetailRecordID
		Write32(pRaceScore, 0); //GuildID
		WriteString(pRaceScore, 0); //GuildName[]
		Write32(pRaceScore, 0); //GMMScoreInc
		Write8(pRaceScore, 0); //HasRankedMatchInfo
		for (size_t i = 0; i < n; i++)
		{ //RankedMatchScore
			BYTE* pRankedMatchScore = pRaceScore;
			Write16(pRankedMatchScore, 0); //len

			{ //RankedMatchLastGradeInfo
				BYTE* pRankedMatchLastGradeInfo = pRankedMatchScore;
				Write16(pRankedMatchLastGradeInfo, 0); //len

				Write32(pRankedMatchLastGradeInfo, 0); //GradeLevel
				Write32(pRankedMatchLastGradeInfo, 0); //ChildLevel
				Write32(pRankedMatchLastGradeInfo, 0); //GradeScore
				Write32(pRankedMatchLastGradeInfo, 0); //MaxGradeScore
				Write32(pRankedMatchLastGradeInfo, 0); //TotalScore

				len = pRankedMatchLastGradeInfo - pRankedMatchScore;
				Set16(pRankedMatchScore, (WORD)len);
				pRankedMatchScore += len;
			}
			{ //RankedMatchGradeInfo
				BYTE* pRankedMatchGradeInfo = pRankedMatchScore;
				Write16(pRankedMatchGradeInfo, 0); //len

				Write32(pRankedMatchGradeInfo, 0); //GradeLevel
				Write32(pRankedMatchGradeInfo, 0); //ChildLevel
				Write32(pRankedMatchGradeInfo, 0); //GradeScore
				Write32(pRankedMatchGradeInfo, 0); //MaxGradeScore
				Write32(pRankedMatchGradeInfo, 0); //TotalScore

				len = pRankedMatchGradeInfo - pRankedMatchScore;
				Set16(pRankedMatchScore, (WORD)len);
				pRankedMatchScore += len;
			}
			{ //RankedMatchPromoInfo
				BYTE* pRankedMatchPromoInfo = pRankedMatchScore;
				Write16(pRankedMatchPromoInfo, 0); //len

				Write8(pRankedMatchPromoInfo, 0); //PromotionMatch
				Write32(pRankedMatchPromoInfo, 0); //PromotionRoundNums
				Write32(pRankedMatchPromoInfo, 0); //PromotionSuccessRoundNums
				Write32(pRankedMatchPromoInfo, 0); //PromotionAlreadySuccessRoundNums
				Write32(pRankedMatchPromoInfo, 0); //PromotionRecordTag
				Write32(pRankedMatchPromoInfo, 0); //CurrentPromotionRoundNums
				Write32(pRankedMatchPromoInfo, 0); //PromoFailedMinusScore
				Write32(pRankedMatchPromoInfo, 0); //PromoSuccAddScore
				Write8(pRankedMatchPromoInfo, 0); //PromoDirectly
				Write8(pRankedMatchPromoInfo, 0); //GradeNoNeedPromo
				Write8(pRankedMatchPromoInfo, 0); //RankedMemoryNoNeedPromo
				Write8(pRankedMatchPromoInfo, 0); //PromotionExtraScore
				Write8(pRankedMatchPromoInfo, 0); //PromtRaceFailedDefendFlag

				len = pRankedMatchPromoInfo - pRankedMatchScore;
				Set16(pRankedMatchScore, (WORD)len);
				pRankedMatchScore += len;
			}
			{ //RankedMatchComputeInfo
				BYTE* pRankedMatchComputeInfo = pRankedMatchScore;
				Write16(pRankedMatchComputeInfo, 0); //len

				Write32(pRankedMatchComputeInfo, 0); //RankAddScore
				Write32(pRankedMatchComputeInfo, 0); //FinishAddScore
				Write32(pRankedMatchComputeInfo, 0); //KillAllAddScore
				Write32(pRankedMatchComputeInfo, 0); //GradeProtectAddScore
				Write32(pRankedMatchComputeInfo, 0); //GradeAddScore
				Write32(pRankedMatchComputeInfo, 0); //ProtectAddScoreGradeLimit
				Write32(pRankedMatchComputeInfo, 0); //DailyExtraAddScore
				Write32(pRankedMatchComputeInfo, 0); //AwardRankCoinNums
				Write32(pRankedMatchComputeInfo, 0); //WeeklyAwardRankCoinNums
				Write32(pRankedMatchComputeInfo, 0); //WeeklyAwardRankCoinLimit
				Write32(pRankedMatchComputeInfo, 0); //AwardRankCoinNumsByRank
				Write32(pRankedMatchComputeInfo, 0); //AwardRankCoinNumsByFinish
				Write32(pRankedMatchComputeInfo, 0); //BanMapExtraAddScore
				Write32(pRankedMatchComputeInfo, 0); //TeamRankAddScore
				Write32(pRankedMatchComputeInfo, 0); //AwardRankCoinNumsByTeamRank
				Write32(pRankedMatchComputeInfo, 0); //AwardRankCoinNumsByTask
				Write8(pRankedMatchComputeInfo, 0); //UseDoubleScoreItem
				Write8(pRankedMatchComputeInfo, 0); //UserNotDecreaseItem
				Write8(pRankedMatchComputeInfo, 0); //FinishSeasonChallengeTaskOrNot
				Write32(pRankedMatchComputeInfo, 0); //FinishedSeasonChallengeTaskIndex
				Write32(pRankedMatchComputeInfo, 0); //SeasonChallengeTaskProtectAddScore
				Write8(pRankedMatchComputeInfo, 0); //NotDecreaseReason
				Write8(pRankedMatchComputeInfo, 0); //HaveSpeedKingInfo
				for (size_t i = 0; i < n; i++)
				{ //RankedMatchSpeedKingInfos
					BYTE* pRankedMatchSpeedKingInfos = pRankedMatchComputeInfo;
					Write16(pRankedMatchSpeedKingInfos, 0); //len

					Write8(pRankedMatchSpeedKingInfos, 0); //WinOrNot
					WriteUn(pRankedMatchSpeedKingInfos, 0); //UiAwardSpeedKingEnergyItemNums
					Write32(pRankedMatchSpeedKingInfos, 0); //WeeklyAwardSpeedKingEnergyItemNums
					Write32(pRankedMatchSpeedKingInfos, 0); //WeeklyAwardSpeedKingEnergyItemLimitNums

					len = pRankedMatchSpeedKingInfos - pRankedMatchComputeInfo;
					Set16(pRankedMatchComputeInfo, (WORD)len);
					pRankedMatchComputeInfo += len;
				}
				Write8(pRankedMatchComputeInfo, 0); //HaveExtraComputeInfo
				for (size_t i = 0; i < n; i++)
				{ //RankedMatchExtracComputeInfos
					BYTE* pRankedMatchExtracComputeInfos = pRankedMatchComputeInfo;
					Write16(pRankedMatchExtracComputeInfos, 0); //len

					Write32(pRankedMatchExtracComputeInfos, 0); //ExtraComputeType
					Write32(pRankedMatchExtracComputeInfos, 0); //AwardItemNums
					Write32(pRankedMatchExtracComputeInfos, 0); //WeekylyAwardItemNums
					Write32(pRankedMatchExtracComputeInfos, 0); //WeeklyAwardItemLimitNums
					Write8(pRankedMatchExtracComputeInfos, 0); //HaveGameLogicTask
					for (size_t i = 0; i < n; i++)
					{ //RakedMatchGamelogicTaskInfo
						BYTE* pRakedMatchGamelogicTaskInfo = pRankedMatchExtracComputeInfos;
						Write16(pRakedMatchGamelogicTaskInfo, 0); //len

						Write32(pRakedMatchGamelogicTaskInfo, 0); //GameLogicTaskType
						Write32(pRakedMatchGamelogicTaskInfo, 0); //TaskFinishCondValue
						Write8(pRakedMatchGamelogicTaskInfo, 0); //JudgeRule
						Write32(pRakedMatchGamelogicTaskInfo, 0); //TaskAddGradeScore
						Write8(pRakedMatchGamelogicTaskInfo, 0); //GradeScoreRangeNum
						Write32(pRakedMatchGamelogicTaskInfo, 0); //GradeScoreRange[]
						Write8(pRakedMatchGamelogicTaskInfo, 0); //TaskFinishCondValueNum
						Write32(pRakedMatchGamelogicTaskInfo, 0); //TaskFinishCondValueRange[]
						Write8(pRakedMatchGamelogicTaskInfo, 0); //TaskAddGradeScoreNum
						Write32(pRakedMatchGamelogicTaskInfo, 0); //TaskAddGradeScoreRange[]
						Write8(pRakedMatchGamelogicTaskInfo, 0); //FailedAddGradeScoreNum
						Write32(pRakedMatchGamelogicTaskInfo, 0); //FailedAddGradeScoreRange[]
						Write8(pRakedMatchGamelogicTaskInfo, 0); //FinishTask
						Write32(pRakedMatchGamelogicTaskInfo, 0); //ExtraFinishTaskAddScore

						len = pRakedMatchGamelogicTaskInfo - pRankedMatchExtracComputeInfos;
						Set16(pRankedMatchExtracComputeInfos, (WORD)len);
						pRankedMatchExtracComputeInfos += len;
					}
					Write8(pRankedMatchExtracComputeInfos, 0); //Win
					Write8(pRankedMatchExtracComputeInfos, 0); //NormalPlayerOrNot
					Write8(pRankedMatchExtracComputeInfos, 0); //LeadRolePlayerNums

					len = pRankedMatchExtracComputeInfos - pRankedMatchComputeInfo;
					Set16(pRankedMatchComputeInfo, (WORD)len);
					pRankedMatchComputeInfo += len;
				}
				Write32(pRankedMatchComputeInfo, 0); //SeasonNewMapAddScore
				Write8(pRankedMatchComputeInfo, 0); //SeasonChallengeBaseScore
				Write8(pRankedMatchComputeInfo, 0); //SeasonChallengeContiWinExtrScore
				Write8(pRankedMatchComputeInfo, 0); //SeasonChallengeRegretDefeatScore
				Write8(pRankedMatchComputeInfo, 0); //SeasonChallengeRespectableOpponentScore
				Write8(pRankedMatchComputeInfo, 0); //SpeedGodChallengeAddScore
				Write8(pRankedMatchComputeInfo, 0); //SpeedGodChallengeAddCoin
				Write8(pRankedMatchComputeInfo, 0); //SpeedFlashAddFactoryCoin
				Write8(pRankedMatchComputeInfo, 0); //PinnacleBattleAddScore
				Write8(pRankedMatchComputeInfo, 0); //PromotionExtraScore
				Write32(pRankedMatchComputeInfo, 0); //SavedExtraScore
				Write32(pRankedMatchComputeInfo, 0); //DailyExtraTaskID
				Write8(pRankedMatchComputeInfo, 0); //SuitActiveAddScore
				Write8(pRankedMatchComputeInfo, 0); //SpeedGodChallengeType
				Write8(pRankedMatchComputeInfo, 0); //SuitActiveEffectID

				len = pRankedMatchComputeInfo - pRankedMatchScore;
				Set16(pRankedMatchScore, (WORD)len);
				pRankedMatchScore += len;
			}
			Write8(pRankedMatchScore, 0); //HavePromotionExtraScoreInfo
			for (size_t i = 0; i < n; i++)
			{ //PromotionExtraScoreInfo
				BYTE* pPromotionExtraScoreInfo = pRankedMatchScore;
				Write16(pPromotionExtraScoreInfo, 0); //len

				Write8(pPromotionExtraScoreInfo, 0); //PromotionMatch
				Write32(pPromotionExtraScoreInfo, 0); //PromotionRoundNums
				Write32(pPromotionExtraScoreInfo, 0); //PromotionSuccessRoundNums
				Write32(pPromotionExtraScoreInfo, 0); //PromotionAlreadySuccessRoundNums
				Write32(pPromotionExtraScoreInfo, 0); //PromotionRecordTag
				Write32(pPromotionExtraScoreInfo, 0); //CurrentPromotionRoundNums
				Write32(pPromotionExtraScoreInfo, 0); //PromoFailedMinusScore
				Write32(pPromotionExtraScoreInfo, 0); //PromoSuccAddScore
				Write8(pPromotionExtraScoreInfo, 0); //PromoDirectly
				Write8(pPromotionExtraScoreInfo, 0); //GradeNoNeedPromo
				Write8(pPromotionExtraScoreInfo, 0); //RankedMemoryNoNeedPromo
				Write8(pPromotionExtraScoreInfo, 0); //PromotionExtraScore
				Write8(pPromotionExtraScoreInfo, 0); //PromtRaceFailedDefendFlag

				len = pPromotionExtraScoreInfo - pRankedMatchScore;
				Set16(pRankedMatchScore, (WORD)len);
				pRankedMatchScore += len;
			}

			len = pRankedMatchScore - pRaceScore;
			Set16(pRaceScore, (WORD)len);
			pRaceScore += len;
		}
		Write32(pRaceScore, 0); //MoneyInc
		Write32(pRaceScore, 0); //TotalMoney
		Write32(pRaceScore, 0); //DistanceToEnd
		Write16(pRaceScore, 0); //Score
		Write8(pRaceScore, 0); //ParaNum
		Write32(pRaceScore, 0); //ParaList[]
		Write8(pRaceScore, 0); //HasRankedMatchArenaInfo
		for (size_t i = 0; i < n; i++)
		{ //RankedMatchArenaScore
			BYTE* pRankedMatchArenaScore = pRaceScore;
			Write16(pRankedMatchArenaScore, 0); //len

			Write8(pRankedMatchArenaScore, 0); //Win
			Write8(pRankedMatchArenaScore, 0); //Rank
			Write8(pRankedMatchArenaScore, 0); //TaskScore
			Write32(pRankedMatchArenaScore, 0); //AwardRankCoinNums
			{ //RankedMatchLastGradeInfo
				BYTE* pRankedMatchLastGradeInfo = pRankedMatchArenaScore;
				Write16(pRankedMatchLastGradeInfo, 0); //len

				Write32(pRankedMatchLastGradeInfo, 0); //GradeLevel
				Write32(pRankedMatchLastGradeInfo, 0); //ChildLevel
				Write32(pRankedMatchLastGradeInfo, 0); //GradeScore
				Write32(pRankedMatchLastGradeInfo, 0); //MaxGradeScore
				Write32(pRankedMatchLastGradeInfo, 0); //TotalScore

				len = pRankedMatchLastGradeInfo - pRankedMatchArenaScore;
				Set16(pRankedMatchArenaScore, (WORD)len);
				pRankedMatchArenaScore += len;
			}
			{ //RankedMatchGradeInfo
				BYTE* pRankedMatchGradeInfo = pRankedMatchArenaScore;
				Write16(pRankedMatchGradeInfo, 0); //len

				Write32(pRankedMatchGradeInfo, 0); //GradeLevel
				Write32(pRankedMatchGradeInfo, 0); //ChildLevel
				Write32(pRankedMatchGradeInfo, 0); //GradeScore
				Write32(pRankedMatchGradeInfo, 0); //MaxGradeScore
				Write32(pRankedMatchGradeInfo, 0); //TotalScore

				len = pRankedMatchGradeInfo - pRankedMatchArenaScore;
				Set16(pRankedMatchArenaScore, (WORD)len);
				pRankedMatchArenaScore += len;
			}
			{ //RankedMatchPromoInfo
				BYTE* pRankedMatchPromoInfo = pRankedMatchArenaScore;
				Write16(pRankedMatchPromoInfo, 0); //len

				Write8(pRankedMatchPromoInfo, 0); //PromotionMatch
				Write32(pRankedMatchPromoInfo, 0); //PromotionRoundNums
				Write32(pRankedMatchPromoInfo, 0); //PromotionSuccessRoundNums
				Write32(pRankedMatchPromoInfo, 0); //PromotionAlreadySuccessRoundNums
				Write32(pRankedMatchPromoInfo, 0); //PromotionRecordTag
				Write32(pRankedMatchPromoInfo, 0); //CurrentPromotionRoundNums
				Write32(pRankedMatchPromoInfo, 0); //PromoFailedMinusScore
				Write32(pRankedMatchPromoInfo, 0); //PromoSuccAddScore
				Write8(pRankedMatchPromoInfo, 0); //PromoDirectly
				Write8(pRankedMatchPromoInfo, 0); //GradeNoNeedPromo
				Write8(pRankedMatchPromoInfo, 0); //RankedMemoryNoNeedPromo
				Write8(pRankedMatchPromoInfo, 0); //PromotionExtraScore
				Write8(pRankedMatchPromoInfo, 0); //PromtRaceFailedDefendFlag

				len = pRankedMatchPromoInfo - pRankedMatchArenaScore;
				Set16(pRankedMatchArenaScore, (WORD)len);
				pRankedMatchArenaScore += len;
			}
			Write8(pRankedMatchArenaScore, 0); //WinNum
			Write16(pRankedMatchArenaScore, 0); //CurrentScore
			Write8(pRankedMatchArenaScore, 0); //FinishScore
			Write16(pRankedMatchArenaScore, 0); //AwardRankScore
			Write8(pRankedMatchArenaScore, 0); //AwardRankCoinNumsByRank
			Write8(pRankedMatchArenaScore, 0); //AwardRankCoinNumsByFinish
			Write32(pRankedMatchArenaScore, 0); //WeeklyAwardRankCoinNums
			Write32(pRankedMatchArenaScore, 0); //WeeklyAwardRankCoinLimit
			Write32(pRankedMatchArenaScore, 0); //AwardRankCoinNumsByTask

			len = pRankedMatchArenaScore - pRaceScore;
			Set16(pRaceScore, (WORD)len);
			pRaceScore += len;
		}
		Write8(pRaceScore, 0); //ProfessionLicenseAwardNum
		for (size_t i = 0; i < n; i++)
		{ //ProfessionLicenseAward
			BYTE* pProfessionLicenseAward = pRaceScore;
			Write16(pProfessionLicenseAward, 0); //len

			Write32(pProfessionLicenseAward, 0); //PointInc
			Write32(pProfessionLicenseAward, 0); //PointLevelCur
			Write32(pProfessionLicenseAward, 0); //PointLevelMax
			Write16(pProfessionLicenseAward, 0); //IncResultID
			Write8(pProfessionLicenseAward, 0); //ShowQiPao
			Write32(pProfessionLicenseAward, 0); //PointWeekTotal
			Write32(pProfessionLicenseAward, 0); //PointWeekCur
			{ //ProfessionLicenseInfo
				BYTE* pProfessionLicenseInfo = pProfessionLicenseAward;
				Write16(pProfessionLicenseInfo, 0); //len

				Write8(pProfessionLicenseInfo, 0); //BigLevel
				Write8(pProfessionLicenseInfo, 0); //SmallLevel

				len = pProfessionLicenseInfo - pProfessionLicenseAward;
				Set16(pProfessionLicenseAward, (WORD)len);
				pProfessionLicenseAward += len;
			}
			Write8(pProfessionLicenseAward, 0); //SwitchShowExtraAddPoint
			Write16(pProfessionLicenseAward, 0); //BeginOffsetSeconds

			len = pProfessionLicenseAward - pRaceScore;
			Set16(pRaceScore, (WORD)len);
			pRaceScore += len;
		}
		Write8(pRaceScore, 0); //HaveRankedMatchSpeedKingInfo
		for (size_t i = 0; i < n; i++)
		{ //RankedMatchSpeedKingScoreInfo
			BYTE* pRankedMatchSpeedKingScoreInfo = pRaceScore;
			Write16(pRankedMatchSpeedKingScoreInfo, 0); //len

			Write32(pRankedMatchSpeedKingScoreInfo, 0); //AwardSpeedKingEnergyNums
			Write8(pRankedMatchSpeedKingScoreInfo, 0); //Win

			len = pRankedMatchSpeedKingScoreInfo - pRaceScore;
			Set16(pRaceScore, (WORD)len);
			pRaceScore += len;
		}
		{ //RaceResult
			BYTE* pRaceResult = pRaceScore;
			Write16(pRaceResult, 0); //len

			Write8(pRaceResult, 0); //PLExpPowerValid
			Write8(pRaceResult, 0); //PLHonorPowerValid
			Write8(pRaceResult, 0); //ExpMultiNum
			Write8(pRaceResult, 0); //HonorMultiNum

			len = pRaceResult - pRaceScore;
			Set16(pRaceScore, (WORD)len);
			pRaceScore += len;
		}
		Write8(pRaceScore, 0); //HaveRankedMatchExtraInfo
		for (size_t i = 0; i < n; i++)
		{ //RankedMatchExtraScoreInfo
			BYTE* pRankedMatchExtraScoreInfo = pRaceScore;
			Write16(pRankedMatchExtraScoreInfo, 0); //len

			Write32(pRankedMatchExtraScoreInfo, 0); //AwardItemNums
			Write8(pRankedMatchExtraScoreInfo, 0); //Win

			len = pRankedMatchExtraScoreInfo - pRaceScore;
			Set16(pRaceScore, (WORD)len);
			pRaceScore += len;
		}
		Write16(pRaceScore, 0); //Status
		Write8(pRaceScore, 0); //HasAward
		for (size_t i = 0; i < n; i++)
		{ //Award
			BYTE* pAward = pRaceScore;
			Write16(pAward, 0); //len

			Write32(pAward, 0); //Exp
			Write32(pAward, 0); //Money
			Write32(pAward, 0); //SuperMoney
			Write16(pAward, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAward;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAward;
				Set16(pAward, (WORD)len);
				pAward += len;
			}
			Write32(pAward, 0); //Coupons
			Write32(pAward, 0); //GuildPoint
			Write32(pAward, 0); //LuckMoney
			Write8(pAward, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAward;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAward;
				Set16(pAward, (WORD)len);
				pAward += len;
			}
			Write32(pAward, 0); //SpeedCoin

			len = pAward - pRaceScore;
			Set16(pRaceScore, (WORD)len);
			pRaceScore += len;
		}
		Write8(pRaceScore, 0); //HasYuLeJiaNianHuaComputeData
		for (size_t i = 0; i < n; i++)
		{ //YuLeJiaNianHuaComputeData
			BYTE* pYuLeJiaNianHuaComputeData = pRaceScore;
			Write16(pYuLeJiaNianHuaComputeData, 0); //len

			Write32(pYuLeJiaNianHuaComputeData, 0); //AwardScore
			Write8(pYuLeJiaNianHuaComputeData, 0); //Recommend
			Write8(pYuLeJiaNianHuaComputeData, 0); //ScoreDouble
			Write8(pYuLeJiaNianHuaComputeData, 0); //GuaJi

			len = pYuLeJiaNianHuaComputeData - pRaceScore;
			Set16(pRaceScore, (WORD)len);
			pRaceScore += len;
		}

		len = pRaceScore - p;
		Set16(p, (WORD)len);
		p += len;
	}
	WriteUn(p, 0); //AwardTime
	Write8(p, 0); //KickOffPlayerNumber
	for (size_t i = 0; i < n; i++)
	{ //KickOffPlayer
		BYTE* pKickOffPlayer = p;
		Write16(pKickOffPlayer, 0); //len

		Write32(pKickOffPlayer, 0); //Uin
		WriteString(pKickOffPlayer, 0); //NickName[]
		Write8(pKickOffPlayer, 0); //Gender
		Write8(pKickOffPlayer, 0); //TeamID
		Write8(pKickOffPlayer, 0); //Country

		len = pKickOffPlayer - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //TeamNum
	for (size_t i = 0; i < n; i++)
	{ //TeamScore
		BYTE* pTeamScore = p;
		Write16(pTeamScore, 0); //len

		Write8(pTeamScore, 0); //TeamID
		Write32(pTeamScore, 0); //TeamScore
		Write8(pTeamScore, 0); //TeamMinRank
		Write8(pTeamScore, 0); //CooperNum
		Write8(pTeamScore, 0); //IncCooper
		Write8(pTeamScore, 0); //CurCooper

		len = pTeamScore - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //LeavePlayerNum
	for (size_t i = 0; i < n; i++)
	{ //LeaveGamePlayer
		BYTE* pLeaveGamePlayer = p;
		Write16(pLeaveGamePlayer, 0); //len

		Write32(pLeaveGamePlayer, 0); //Uin
		Write8(pLeaveGamePlayer, 0); //TeamID

		len = pLeaveGamePlayer - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //IsLastRound

	len = p - buf;
	SendToClient(Client, 1721, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyInfectionGameStatus(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //GameStatus
	Write16(p, 0); //StageSpan
	Write8(p, 0); //UinNum
	Write32(p, 0); //Uin[]
	Write8(p, 0); //SecurityZoneNum
	for (size_t i = 0; i < n; i++)
	{ //SecurityZoneInfo
		BYTE* pSecurityZoneInfo = p;
		Write16(pSecurityZoneInfo, 0); //len

		Write8(pSecurityZoneInfo, 0); //Idx

		len = pSecurityZoneInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //CurRound
	Write8(p, 0); //PropNum
	for (size_t i = 0; i < n; i++)
	{ //PropInfo
		BYTE* pPropInfo = p;
		Write16(pPropInfo, 0); //len

		Write8(pPropInfo, 0); //Idx
		Write8(pPropInfo, 0); //PropType
		Write8(pPropInfo, 0); //PropSubType
		Write32(pPropInfo, 0); //CarID
		Write8(pPropInfo, 0); //Status

		len = pPropInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 1724, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestInfectionAction(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR ActionType = Read8(p);
	UCHAR DstUinNum = Read8(p);
	UINT DstUinList[] = Read32(p);
	UCHAR Idx = Read8(p);
	Un cuDstUinPosNum = ReadUn(p);
	for (size_t i = 0; i < n; i++)
	{ //DstUinPosList
		BYTE* pDstUinPosList = p;
		len = Read16(pDstUinPosList);

		UINT Uin = Read32(pDstUinPosList);
		int[] Posion[] = Read32(pDstUinPosList);
		int[] Ori[] = Read32(pDstUinPosList);
		USHORT Speed = Read16(pDstUinPosList);

		p += len;
	}
	UCHAR MonsterNum = Read8(p);
	for (size_t i = 0; i < n; i++)
	{ //ShuangRenCheMonsterIDList
		BYTE* pShuangRenCheMonsterIDList = p;
		len = Read16(pShuangRenCheMonsterIDList);

		UINT Uin = Read32(pShuangRenCheMonsterIDList);
		UINT MonsterID = Read32(pShuangRenCheMonsterIDList);

		p += len;
	}
	UINT Para0 = Read32(p);
	USHORT SpeedFramNum = Read16(p);
	int SpeedFramList[] = Read32(p);

}

void ResponseInfectionAction(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen
	Write8(p, 0); //ActionType
	Write8(p, 0); //DstUinNum
	Write32(p, 0); //DstUinList[]
	Write8(p, 0); //PropType
	Write8(p, 0); //PropSubType
	Write32(p, 0); //Value
	Write8(p, 0); //HasKart
	for (size_t i = 0; i < n; i++)
	{ //KartPhysParam
		BYTE* pKartPhysParam = p;
		Write16(pKartPhysParam, 0); //len

		Write32(pKartPhysParam, 0); //KartID
		Write8(pKartPhysParam, 0); //PhysInfoCount
		for (size_t i = 0; i < n; i++)
		{ //PhysInfo
			BYTE* pPhysInfo = pKartPhysParam;
			Write16(pPhysInfo, 0); //len

			Write32(pPhysInfo, 0); //PID
			Write32(pPhysInfo, 0); //AffectID
			Write32(pPhysInfo, 0); //Param
			Write32(pPhysInfo, 0); //LifeTime

			len = pPhysInfo - pKartPhysParam;
			Set16(pKartPhysParam, (WORD)len);
			pKartPhysParam += len;
		}
		Write8(pKartPhysParam, 0); //CompensateParamCount
		for (size_t i = 0; i < n; i++)
		{ //CompensateParam
			BYTE* pCompensateParam = pKartPhysParam;
			Write16(pCompensateParam, 0); //len

			Write32(pCompensateParam, 0); //Percent
			Write32(pCompensateParam, 0); //Value

			len = pCompensateParam - pKartPhysParam;
			Set16(pKartPhysParam, (WORD)len);
			pKartPhysParam += len;
		}
		{ //CollisionBoxParam
			BYTE* pCollisionBoxParam = pKartPhysParam;
			Write16(pCollisionBoxParam, 0); //len

			Write32(pCollisionBoxParam, 0); //BoxLength
			Write32(pCollisionBoxParam, 0); //BoxWidth
			Write32(pCollisionBoxParam, 0); //BoxHeight
			Write32(pCollisionBoxParam, 0); //AdjustOffset
			Write32(pCollisionBoxParam, 0); //AdjustPickGap
			Write32(pCollisionBoxParam, 0); //AdjustRemoteOffset
			Write32(pCollisionBoxParam, 0); //AdjustBevelOffset
			Write32(pCollisionBoxParam, 0); //ControllerOffset

			len = pCollisionBoxParam - pKartPhysParam;
			Set16(pKartPhysParam, (WORD)len);
			pKartPhysParam += len;
		}
		{ //CarToCarCollisionParam
			BYTE* pCarToCarCollisionParam = pKartPhysParam;
			Write16(pCarToCarCollisionParam, 0); //len

			Write32(pCarToCarCollisionParam, 0); //CollisionRadius
			Write32(pCarToCarCollisionParam, 0); //CollisionLength
			Write32(pCarToCarCollisionParam, 0); //CollisionWidth
			Write32(pCarToCarCollisionParam, 0); //CollisionHeight
			Write32(pCarToCarCollisionParam, 0); //CollisionLostCtrlTime

			len = pCarToCarCollisionParam - pKartPhysParam;
			Set16(pKartPhysParam, (WORD)len);
			pKartPhysParam += len;
		}
		Write32(pKartPhysParam, 0); //BaseTurnRate
		Write32(pKartPhysParam, 0); //VolatileTurnRate
		Write32(pKartPhysParam, 0); //MaxTurnSpeed
		Write32(pKartPhysParam, 0); //MinTurnSpeed
		Write32(pKartPhysParam, 0); //MaxAccuTime
		Write32(pKartPhysParam, 0); //BaseAccuRate
		Write32(pKartPhysParam, 0); //MaxAffectSpeed
		Write32(pKartPhysParam, 0); //Gravity
		Write32(pKartPhysParam, 0); //AdditionalLocalZSpeed
		Write32(pKartPhysParam, 0); //StartVec
		Write32(pKartPhysParam, 0); //EndVecFist
		Write32(pKartPhysParam, 0); //EndVecSecon
		Write32(pKartPhysParam, 0); //DirKeyForce
		Write32(pKartPhysParam, 0); //DirKeyTwist
		Write32(pKartPhysParam, 0); //BannerTwist
		Write32(pKartPhysParam, 0); //BannerKeyTwist
		Write32(pKartPhysParam, 0); //BannerVecForce
		Write32(pKartPhysParam, 0); //BannerHeadForce
		Write32(pKartPhysParam, 0); //SlidFricForce
		Write32(pKartPhysParam, 0); //RollFricForce
		Write32(pKartPhysParam, 0); //StartWec
		Write32(pKartPhysParam, 0); //MaxWec
		Write32(pKartPhysParam, 0); //SuaiJianTwist
		Write32(pKartPhysParam, 0); //DirUpKeyForce
		Write8(pKartPhysParam, 0); //AccelStatusCount
		Write32(pKartPhysParam, 0); //AccelStatus[]
		Write8(pKartPhysParam, 0); //ForwardAccelNum
		for (size_t i = 0; i < n; i++)
		{ //ForwardAccel
			BYTE* pForwardAccel = pKartPhysParam;
			Write16(pForwardAccel, 0); //len

			Write32(pForwardAccel, 0); //Key
			Write32(pForwardAccel, 0); //Value

			len = pForwardAccel - pKartPhysParam;
			Set16(pKartPhysParam, (WORD)len);
			pKartPhysParam += len;
		}
		Write8(pKartPhysParam, 0); //ForwardDecelNum
		for (size_t i = 0; i < n; i++)
		{ //ForwardDecel
			BYTE* pForwardDecel = pKartPhysParam;
			Write16(pForwardDecel, 0); //len

			Write32(pForwardDecel, 0); //Key
			Write32(pForwardDecel, 0); //Value

			len = pForwardDecel - pKartPhysParam;
			Set16(pKartPhysParam, (WORD)len);
			pKartPhysParam += len;
		}
		Write8(pKartPhysParam, 0); //BackwardAccelNum
		for (size_t i = 0; i < n; i++)
		{ //BackwardAccel
			BYTE* pBackwardAccel = pKartPhysParam;
			Write16(pBackwardAccel, 0); //len

			Write32(pBackwardAccel, 0); //Key
			Write32(pBackwardAccel, 0); //Value

			len = pBackwardAccel - pKartPhysParam;
			Set16(pKartPhysParam, (WORD)len);
			pKartPhysParam += len;
		}
		Write8(pKartPhysParam, 0); //BackwardDecelNum
		for (size_t i = 0; i < n; i++)
		{ //BackwardDecel
			BYTE* pBackwardDecel = pKartPhysParam;
			Write16(pBackwardDecel, 0); //len

			Write32(pBackwardDecel, 0); //Key
			Write32(pBackwardDecel, 0); //Value

			len = pBackwardDecel - pKartPhysParam;
			Set16(pKartPhysParam, (WORD)len);
			pKartPhysParam += len;
		}
		Write32(pKartPhysParam, 0); //CrashCompensatePower
		Write32(pKartPhysParam, 0); //DefenseRate
		Write32(pKartPhysParam, 0); //Uin
		Write32(pKartPhysParam, 0); //SpeedupCardGenRate
		Write32(pKartPhysParam, 0); //ExtraFuncFlag
		Write8(pKartPhysParam, 0); //SkatePara
		for (size_t i = 0; i < n; i++)
		{ //hasSkatePara
			BYTE* phasSkatePara = pKartPhysParam;
			Write16(phasSkatePara, 0); //len

			Write32(phasSkatePara, 0); //TrackSpeed
			Write32(phasSkatePara, 0); //SkateSpeedCoef_AirBigJet
			Write32(phasSkatePara, 0); //SkateSpeedCoef_Jump
			Write32(phasSkatePara, 0); //SkateSpeedCoef_AirJetPoint
			Write32(phasSkatePara, 0); //SkateSpeedCoef_MaxForce
			Write32(phasSkatePara, 0); //OntrackAccRef
			Write32(phasSkatePara, 0); //TrackAccRef
			Write32(phasSkatePara, 0); //DashSkill

			len = phasSkatePara - pKartPhysParam;
			Set16(pKartPhysParam, (WORD)len);
			pKartPhysParam += len;
		}
		Write8(pKartPhysParam, 0); //HasBattleModeSkillInfoList
		for (size_t i = 0; i < n; i++)
		{ //BattleModeSkillInfoList
			BYTE* pBattleModeSkillInfoList = pKartPhysParam;
			Write16(pBattleModeSkillInfoList, 0); //len

			Write8(pBattleModeSkillInfoList, 0); //SkillNum
			for (size_t i = 0; i < n; i++)
			{ //SkillInfo
				BYTE* pSkillInfo = pBattleModeSkillInfoList;
				Write16(pSkillInfo, 0); //len

				Write16(pSkillInfo, 0); //SkillId
				Write8(pSkillInfo, 0); //SkillLevel

				len = pSkillInfo - pBattleModeSkillInfoList;
				Set16(pBattleModeSkillInfoList, (WORD)len);
				pBattleModeSkillInfoList += len;
			}

			len = pBattleModeSkillInfoList - pKartPhysParam;
			Set16(pKartPhysParam, (WORD)len);
			pKartPhysParam += len;
		}
		Write32(pKartPhysParam, 0); //EnergyConvert
		Write16(pKartPhysParam, 0); //SuperN2ORate
		Write16(pKartPhysParam, 0); //CollisionLoseRate
		Write8(pKartPhysParam, 0); //NotInterruptDrift
		Write8(pKartPhysParam, 0); //AddWeightNum
		Write8(pKartPhysParam, 0); //WeightNum
		Write8(pKartPhysParam, 0); //HasAntiCollisionCfg
		for (size_t i = 0; i < n; i++)
		{ //AntiCollistionCfg
			BYTE* pAntiCollistionCfg = pKartPhysParam;
			Write16(pAntiCollistionCfg, 0); //len

			Write8(pAntiCollistionCfg, 0); //Num
			Write32(pAntiCollistionCfg, 0); //Position[]

			len = pAntiCollistionCfg - pKartPhysParam;
			Set16(pKartPhysParam, (WORD)len);
			pKartPhysParam += len;
		}
		Write8(pKartPhysParam, 0); //HasBoatParam
		for (size_t i = 0; i < n; i++)
		{ //BoatParam
			BYTE* pBoatParam = pKartPhysParam;
			Write16(pBoatParam, 0); //len

			Write32(pBoatParam, 0); //DirKeyForceParamC
			Write32(pBoatParam, 0); //DirKeyForceParamD
			Write32(pBoatParam, 0); //DTFLimitAngle
			Write32(pBoatParam, 0); //DTFRatio
			Write32(pBoatParam, 0); //UpKeyVecForce
			Write32(pBoatParam, 0); //UpKeyVecForceParamA
			Write32(pBoatParam, 0); //UpKeyVecForceParamB
			Write32(pBoatParam, 0); //LRKeyVecForce
			Write32(pBoatParam, 0); //LRKeyVecForceParamA
			Write32(pBoatParam, 0); //LRKeyVecForceParamB
			Write32(pBoatParam, 0); //VecForce
			Write32(pBoatParam, 0); //VecForceParamA
			Write32(pBoatParam, 0); //VecForceParamB
			Write32(pBoatParam, 0); //BoatShape[]
			Write32(pBoatParam, 0); //WecEffect
			Write32(pBoatParam, 0); //BannerKeyTwist
			Write32(pBoatParam, 0); //BannerKeyTwistParamA
			Write32(pBoatParam, 0); //BannerKeyTwistParamB
			Write32(pBoatParam, 0); //SuaiJianTwist
			Write32(pBoatParam, 0); //BoatHeighRatio
			Write32(pBoatParam, 0); //BannerTwist
			Write32(pBoatParam, 0); //BannerTwistParamA
			Write32(pBoatParam, 0); //DirUpKeyForce
			Write32(pBoatParam, 0); //DirUpKeyForceParamA
			Write32(pBoatParam, 0); //DirUpKeyForceParamB
			Write32(pBoatParam, 0); //DirKeyForce
			Write32(pBoatParam, 0); //DirKeyForceParamA
			Write32(pBoatParam, 0); //DirKeyForceParamB
			Write32(pBoatParam, 0); //AddNO2PerSec
			Write32(pBoatParam, 0); //BoatAirValue
			WriteUn(pBoatParam, 0); //ifSlidFricForce

			len = pBoatParam - pKartPhysParam;
			Set16(pKartPhysParam, (WORD)len);
			pKartPhysParam += len;
		}
		Write8(pKartPhysParam, 0); //BoatForwardAccelNum
		for (size_t i = 0; i < n; i++)
		{ //BoatForwardAccel
			BYTE* pBoatForwardAccel = pKartPhysParam;
			Write16(pBoatForwardAccel, 0); //len

			Write32(pBoatForwardAccel, 0); //Key
			Write32(pBoatForwardAccel, 0); //Value

			len = pBoatForwardAccel - pKartPhysParam;
			Set16(pKartPhysParam, (WORD)len);
			pKartPhysParam += len;
		}
		Write32(pKartPhysParam, 0); //DirUpKeyForceParamA
		Write32(pKartPhysParam, 0); //DirUpKeyForceParamB

		len = pKartPhysParam - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //Idx
	WriteUn(p, 0); //cuDstUinPosNum
	for (size_t i = 0; i < n; i++)
	{ //DstUinPosList
		BYTE* pDstUinPosList = p;
		Write16(pDstUinPosList, 0); //len

		Write32(pDstUinPosList, 0); //Uin
		Write32(pDstUinPosList, 0); //Posion[]
		Write32(pDstUinPosList, 0); //Ori[]
		Write16(pDstUinPosList, 0); //Speed

		len = pDstUinPosList - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //Distance

	len = p - buf;
	SendToClient(Client, 1725, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyCrazyChaseGameEvent(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //GameEvent
	Write16(p, 0); //ScanStan
	Write16(p, 0); //Distance
	Write8(p, 0); //Idx
	Write8(p, 0); //PropType
	Write8(p, 0); //Status
	Write32(p, 0); //TargetUin
	Write8(p, 0); //BloodNum
	Write16(p, 0); //SkillProgress
	Write16(p, 0); //CfgNum
	for (size_t i = 0; i < n; i++)
	{ //CrazyChaseCfg
		BYTE* pCrazyChaseCfg = p;
		Write16(pCrazyChaseCfg, 0); //len

		Write16(pCrazyChaseCfg, 0); //BeginCountDownTime
		Write16(pCrazyChaseCfg, 0); //PoliceBeginCountDownTime
		Write16(pCrazyChaseCfg, 0); //PoliceVisionRadii
		Write16(pCrazyChaseCfg, 0); //GansterVisionRadii
		Write16(pCrazyChaseCfg, 0); //PoliceSkillStan
		Write16(pCrazyChaseCfg, 0); //PoliceSkillCDValue
		Write16(pCrazyChaseCfg, 0); //WarningDistance
		Write16(pCrazyChaseCfg, 0); //UrgentDistance
		Write16(pCrazyChaseCfg, 0); //PoliceSkillAddProgress
		Write16(pCrazyChaseCfg, 0); //CrazyModeAccelParam
		Write16(pCrazyChaseCfg, 0); //CrazyModePowerAccelFactorPolice
		Write16(pCrazyChaseCfg, 0); //CrazyModePowerAccelFactorGanster
		Write16(pCrazyChaseCfg, 0); //BloodNum
		Write16(pCrazyChaseCfg, 0); //BlockZoneDebuffValue
		Write16(pCrazyChaseCfg, 0); //EnableProtect
		Write16(pCrazyChaseCfg, 0); //GhostModeTime
		Write32(pCrazyChaseCfg, 0); //MaintenanceTime
		Write16(pCrazyChaseCfg, 0); //GansterOverturnTime
		Write16(pCrazyChaseCfg, 0); //CrazyModeAccelParamForGanster
		Write16(pCrazyChaseCfg, 0); //HunterVisualRegionRadius
		Write16(pCrazyChaseCfg, 0); //PreyVisualRegionRadius
		Write16(pCrazyChaseCfg, 0); //LockRegionDriftFactor
		Write16(pCrazyChaseCfg, 0); //LockRegionNO2Factor
		Write16(pCrazyChaseCfg, 0); //ShellEffScale
		Write16(pCrazyChaseCfg, 0); //CollisionRadius

		len = pCrazyChaseCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //HitCount
	Write32(p, 0); //KillCount
	Write8(p, 0); //HasScore
	for (size_t i = 0; i < n; i++)
	{ //ScoreInfo
		BYTE* pScoreInfo = p;
		Write16(pScoreInfo, 0); //len

		Write32(pScoreInfo, 0); //Uin
		Write16(pScoreInfo, 0); //Role
		Write32(pScoreInfo, 0); //Score
		Write8(pScoreInfo, 0); //ScoreNum
		for (size_t i = 0; i < n; i++)
		{ //ScoreInfo
			BYTE* pScoreInfo = pScoreInfo;
			Write16(pScoreInfo, 0); //len

			Write8(pScoreInfo, 0); //ScoreType
			Write32(pScoreInfo, 0); //Value
			Write32(pScoreInfo, 0); //Score

			len = pScoreInfo - pScoreInfo;
			Set16(pScoreInfo, (WORD)len);
			pScoreInfo += len;
		}

		len = pScoreInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //SrcUin
	Write8(p, 0); //HasYuLeJiaNianHuaComputeData
	for (size_t i = 0; i < n; i++)
	{ //YuLeJiaNianHuaComputeData
		BYTE* pYuLeJiaNianHuaComputeData = p;
		Write16(pYuLeJiaNianHuaComputeData, 0); //len

		Write32(pYuLeJiaNianHuaComputeData, 0); //AwardScore
		Write8(pYuLeJiaNianHuaComputeData, 0); //Recommend
		Write8(pYuLeJiaNianHuaComputeData, 0); //ScoreDouble
		Write8(pYuLeJiaNianHuaComputeData, 0); //GuaJi

		len = pYuLeJiaNianHuaComputeData - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 1726, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetWorldCupShowInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetWorldCupShowInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //AwardNums
	for (size_t i = 0; i < n; i++)
	{ //WorldCupAwardInfos
		BYTE* pWorldCupAwardInfos = p;
		Write16(pWorldCupAwardInfos, 0); //len

		Write8(pWorldCupAwardInfos, 0); //MapIndex
		Write16(pWorldCupAwardInfos, 0); //AwardType
		Write16(pWorldCupAwardInfos, 0); //AwardIndex
		Write16(pWorldCupAwardInfos, 0); //EventAwardID
		{ //AwardItemInfo
			BYTE* pAwardItemInfo = pWorldCupAwardInfos;
			Write16(pAwardItemInfo, 0); //len

			Write32(pAwardItemInfo, 0); //Exp
			Write32(pAwardItemInfo, 0); //Money
			Write32(pAwardItemInfo, 0); //SuperMoney
			Write16(pAwardItemInfo, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAwardItemInfo;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //Coupons
			Write32(pAwardItemInfo, 0); //GuildPoint
			Write32(pAwardItemInfo, 0); //LuckMoney
			Write8(pAwardItemInfo, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAwardItemInfo;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //SpeedCoin

			len = pAwardItemInfo - pWorldCupAwardInfos;
			Set16(pWorldCupAwardInfos, (WORD)len);
			pWorldCupAwardInfos += len;
		}
		Write32(pWorldCupAwardInfos, 0); //AwardRound
		Write32(pWorldCupAwardInfos, 0); //AwardMaxNums
		Write32(pWorldCupAwardInfos, 0); //AwardLowNums
		Write32(pWorldCupAwardInfos, 0); //CurrentProcessValue
		Write32(pWorldCupAwardInfos, 0); //AwardNeedProcessValue
		Write8(pWorldCupAwardInfos, 0); //GetAward
		Write8(pWorldCupAwardInfos, 0); //BestItemAward
		Write16(pWorldCupAwardInfos, 0); //AwardExtraType
		Write32(pWorldCupAwardInfos, 0); //ReceBeginDate
		Write32(pWorldCupAwardInfos, 0); //ReceEndDate
		Write16(pWorldCupAwardInfos, 0); //AwardPoolID
		Write8(pWorldCupAwardInfos, 0); //AwardStatus

		len = pWorldCupAwardInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //CurrentBallKingEnergyValue
	Write8(p, 0); //EnerygyFullOrNot
	Write32(p, 0); //CurrentPopularityValue
	Write16(p, 0); //ChanceGeneNums
	for (size_t i = 0; i < n; i++)
	{ //SpecialActPartiChanceGeneInfos
		BYTE* pSpecialActPartiChanceGeneInfos = p;
		Write16(pSpecialActPartiChanceGeneInfos, 0); //len

		Write8(pSpecialActPartiChanceGeneInfos, 0); //TaskID
		Write8(pSpecialActPartiChanceGeneInfos, 0); //TaskPeriod
		Write32(pSpecialActPartiChanceGeneInfos, 0); //AlreadyAwardNums
		Write32(pSpecialActPartiChanceGeneInfos, 0); //AwardMoveNums
		Write32(pSpecialActPartiChanceGeneInfos, 0); //TaskFinishNums
		Write32(pSpecialActPartiChanceGeneInfos, 0); //TaskNeedValue

		len = pSpecialActPartiChanceGeneInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //BallKingEnergyMaxValue
	{ //OpenTimeInfo
		BYTE* pOpenTimeInfo = p;
		Write16(pOpenTimeInfo, 0); //len

		Write32(pOpenTimeInfo, 0); //OpenDate
		Write32(pOpenTimeInfo, 0); //CloseDate
		Write32(pOpenTimeInfo, 0); //OpenTime
		Write32(pOpenTimeInfo, 0); //CloseTime

		len = pOpenTimeInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //ShootItemID

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestStartShoot(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR ShootType = Read8(p);
	UCHAR PerfectShoot = Read8(p);

}

void ResponseStartShoot(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	{ //AwardInfo
		BYTE* pAwardInfo = p;
		Write16(pAwardInfo, 0); //len

		Write8(pAwardInfo, 0); //MapIndex
		Write16(pAwardInfo, 0); //AwardType
		Write16(pAwardInfo, 0); //AwardIndex
		Write16(pAwardInfo, 0); //EventAwardID
		{ //AwardItemInfo
			BYTE* pAwardItemInfo = pAwardInfo;
			Write16(pAwardItemInfo, 0); //len

			Write32(pAwardItemInfo, 0); //Exp
			Write32(pAwardItemInfo, 0); //Money
			Write32(pAwardItemInfo, 0); //SuperMoney
			Write16(pAwardItemInfo, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAwardItemInfo;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //Coupons
			Write32(pAwardItemInfo, 0); //GuildPoint
			Write32(pAwardItemInfo, 0); //LuckMoney
			Write8(pAwardItemInfo, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAwardItemInfo;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //SpeedCoin

			len = pAwardItemInfo - pAwardInfo;
			Set16(pAwardInfo, (WORD)len);
			pAwardInfo += len;
		}
		Write32(pAwardInfo, 0); //AwardRound
		Write32(pAwardInfo, 0); //AwardMaxNums
		Write32(pAwardInfo, 0); //AwardLowNums
		Write32(pAwardInfo, 0); //CurrentProcessValue
		Write32(pAwardInfo, 0); //AwardNeedProcessValue
		Write8(pAwardInfo, 0); //GetAward
		Write8(pAwardInfo, 0); //BestItemAward
		Write16(pAwardInfo, 0); //AwardExtraType
		Write32(pAwardInfo, 0); //ReceBeginDate
		Write32(pAwardInfo, 0); //ReceEndDate
		Write16(pAwardInfo, 0); //AwardPoolID
		Write8(pAwardInfo, 0); //AwardStatus

		len = pAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //TargetOrNot
	Write32(p, 0); //CurrentBallKingEnergyValue
	Write8(p, 0); //TargetDirection
	Write32(p, 0); //CurrentPopularityValue
	Write16(p, 0); //AwardNums
	for (size_t i = 0; i < n; i++)
	{ //WorldCupAwardInfos
		BYTE* pWorldCupAwardInfos = p;
		Write16(pWorldCupAwardInfos, 0); //len

		Write8(pWorldCupAwardInfos, 0); //MapIndex
		Write16(pWorldCupAwardInfos, 0); //AwardType
		Write16(pWorldCupAwardInfos, 0); //AwardIndex
		Write16(pWorldCupAwardInfos, 0); //EventAwardID
		{ //AwardItemInfo
			BYTE* pAwardItemInfo = pWorldCupAwardInfos;
			Write16(pAwardItemInfo, 0); //len

			Write32(pAwardItemInfo, 0); //Exp
			Write32(pAwardItemInfo, 0); //Money
			Write32(pAwardItemInfo, 0); //SuperMoney
			Write16(pAwardItemInfo, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAwardItemInfo;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //Coupons
			Write32(pAwardItemInfo, 0); //GuildPoint
			Write32(pAwardItemInfo, 0); //LuckMoney
			Write8(pAwardItemInfo, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAwardItemInfo;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //SpeedCoin

			len = pAwardItemInfo - pWorldCupAwardInfos;
			Set16(pWorldCupAwardInfos, (WORD)len);
			pWorldCupAwardInfos += len;
		}
		Write32(pWorldCupAwardInfos, 0); //AwardRound
		Write32(pWorldCupAwardInfos, 0); //AwardMaxNums
		Write32(pWorldCupAwardInfos, 0); //AwardLowNums
		Write32(pWorldCupAwardInfos, 0); //CurrentProcessValue
		Write32(pWorldCupAwardInfos, 0); //AwardNeedProcessValue
		Write8(pWorldCupAwardInfos, 0); //GetAward
		Write8(pWorldCupAwardInfos, 0); //BestItemAward
		Write16(pWorldCupAwardInfos, 0); //AwardExtraType
		Write32(pWorldCupAwardInfos, 0); //ReceBeginDate
		Write32(pWorldCupAwardInfos, 0); //ReceEndDate
		Write16(pWorldCupAwardInfos, 0); //AwardPoolID
		Write8(pWorldCupAwardInfos, 0); //AwardStatus

		len = pWorldCupAwardInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //EnerygyFullOrNot
	Write32(p, 0); //AddedPopularityValue

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetMakeZongziShowInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetMakeZongziShowInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //AwardNums
	for (size_t i = 0; i < n; i++)
	{ //MakeZongziAwardInfos
		BYTE* pMakeZongziAwardInfos = p;
		Write16(pMakeZongziAwardInfos, 0); //len

		Write8(pMakeZongziAwardInfos, 0); //MapIndex
		Write16(pMakeZongziAwardInfos, 0); //AwardType
		Write16(pMakeZongziAwardInfos, 0); //AwardIndex
		Write16(pMakeZongziAwardInfos, 0); //EventAwardID
		{ //AwardItemInfo
			BYTE* pAwardItemInfo = pMakeZongziAwardInfos;
			Write16(pAwardItemInfo, 0); //len

			Write32(pAwardItemInfo, 0); //Exp
			Write32(pAwardItemInfo, 0); //Money
			Write32(pAwardItemInfo, 0); //SuperMoney
			Write16(pAwardItemInfo, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAwardItemInfo;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //Coupons
			Write32(pAwardItemInfo, 0); //GuildPoint
			Write32(pAwardItemInfo, 0); //LuckMoney
			Write8(pAwardItemInfo, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAwardItemInfo;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //SpeedCoin

			len = pAwardItemInfo - pMakeZongziAwardInfos;
			Set16(pMakeZongziAwardInfos, (WORD)len);
			pMakeZongziAwardInfos += len;
		}
		Write32(pMakeZongziAwardInfos, 0); //AwardRound
		Write32(pMakeZongziAwardInfos, 0); //AwardMaxNums
		Write32(pMakeZongziAwardInfos, 0); //AwardLowNums
		Write32(pMakeZongziAwardInfos, 0); //CurrentProcessValue
		Write32(pMakeZongziAwardInfos, 0); //AwardNeedProcessValue
		Write8(pMakeZongziAwardInfos, 0); //GetAward
		Write8(pMakeZongziAwardInfos, 0); //BestItemAward
		Write16(pMakeZongziAwardInfos, 0); //AwardExtraType
		Write32(pMakeZongziAwardInfos, 0); //ReceBeginDate
		Write32(pMakeZongziAwardInfos, 0); //ReceEndDate
		Write16(pMakeZongziAwardInfos, 0); //AwardPoolID
		Write8(pMakeZongziAwardInfos, 0); //AwardStatus

		len = pMakeZongziAwardInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //MagicZongziValue
	Write32(p, 0); //CanLightZongzi
	Write32(p, 0); //CurrentRefreshZongziNums
	Write8(p, 0); //CanRefreshAllAward
	Write16(p, 0); //ChanceGeneNums
	for (size_t i = 0; i < n; i++)
	{ //SpecialActPartiChanceGeneInfos
		BYTE* pSpecialActPartiChanceGeneInfos = p;
		Write16(pSpecialActPartiChanceGeneInfos, 0); //len

		Write8(pSpecialActPartiChanceGeneInfos, 0); //TaskID
		Write8(pSpecialActPartiChanceGeneInfos, 0); //TaskPeriod
		Write32(pSpecialActPartiChanceGeneInfos, 0); //AlreadyAwardNums
		Write32(pSpecialActPartiChanceGeneInfos, 0); //AwardMoveNums
		Write32(pSpecialActPartiChanceGeneInfos, 0); //TaskFinishNums
		Write32(pSpecialActPartiChanceGeneInfos, 0); //TaskNeedValue

		len = pSpecialActPartiChanceGeneInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //DoubleAward
	{ //OpenTimeInfo
		BYTE* pOpenTimeInfo = p;
		Write16(pOpenTimeInfo, 0); //len

		Write32(pOpenTimeInfo, 0); //OpenDate
		Write32(pOpenTimeInfo, 0); //CloseDate
		Write32(pOpenTimeInfo, 0); //OpenTime
		Write32(pOpenTimeInfo, 0); //CloseTime

		len = pOpenTimeInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //RefreshCDDays
	Write32(p, 0); //RefreshSingleCDDays
	Write32(p, 0); //MakeZongziItemID
	Write32(p, 0); //MagicZongziMaxValue
	Write32(p, 0); //CurrentFeedZongziFullyNums
	Write32(p, 0); //MakeZongziAddMagicMiniValue
	Write32(p, 0); //MaKeZongziAddMagicMaxValue

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestRefreshAwardInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT MapIndex = Read32(p);
	UINT AwardType = Read32(p);
	UINT AwardIndex = Read32(p);
	UCHAR RefreshType = Read8(p);

}

void ResponseRefreshAwardInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write32(p, 0); //MapIndex
	Write8(p, 0); //RefreshType
	Write16(p, 0); //AwardNums
	for (size_t i = 0; i < n; i++)
	{ //AwardInfo
		BYTE* pAwardInfo = p;
		Write16(pAwardInfo, 0); //len

		Write8(pAwardInfo, 0); //MapIndex
		Write16(pAwardInfo, 0); //AwardType
		Write16(pAwardInfo, 0); //AwardIndex
		Write16(pAwardInfo, 0); //EventAwardID
		{ //AwardItemInfo
			BYTE* pAwardItemInfo = pAwardInfo;
			Write16(pAwardItemInfo, 0); //len

			Write32(pAwardItemInfo, 0); //Exp
			Write32(pAwardItemInfo, 0); //Money
			Write32(pAwardItemInfo, 0); //SuperMoney
			Write16(pAwardItemInfo, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAwardItemInfo;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //Coupons
			Write32(pAwardItemInfo, 0); //GuildPoint
			Write32(pAwardItemInfo, 0); //LuckMoney
			Write8(pAwardItemInfo, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAwardItemInfo;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //SpeedCoin

			len = pAwardItemInfo - pAwardInfo;
			Set16(pAwardInfo, (WORD)len);
			pAwardInfo += len;
		}
		Write32(pAwardInfo, 0); //AwardRound
		Write32(pAwardInfo, 0); //AwardMaxNums
		Write32(pAwardInfo, 0); //AwardLowNums
		Write32(pAwardInfo, 0); //CurrentProcessValue
		Write32(pAwardInfo, 0); //AwardNeedProcessValue
		Write8(pAwardInfo, 0); //GetAward
		Write8(pAwardInfo, 0); //BestItemAward
		Write16(pAwardInfo, 0); //AwardExtraType
		Write32(pAwardInfo, 0); //ReceBeginDate
		Write32(pAwardInfo, 0); //ReceEndDate
		Write16(pAwardInfo, 0); //AwardPoolID
		Write8(pAwardInfo, 0); //AwardStatus

		len = pAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //CurrentRefreshZongziNums
	Write8(p, 0); //CanRefreshAllAward

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestStartMakeZongzi(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseStartMakeZongzi(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	{ //MakedZongziAwardInfo
		BYTE* pMakedZongziAwardInfo = p;
		Write16(pMakedZongziAwardInfo, 0); //len

		Write8(pMakedZongziAwardInfo, 0); //MapIndex
		Write16(pMakedZongziAwardInfo, 0); //AwardType
		Write16(pMakedZongziAwardInfo, 0); //AwardIndex
		Write16(pMakedZongziAwardInfo, 0); //EventAwardID
		{ //AwardItemInfo
			BYTE* pAwardItemInfo = pMakedZongziAwardInfo;
			Write16(pAwardItemInfo, 0); //len

			Write32(pAwardItemInfo, 0); //Exp
			Write32(pAwardItemInfo, 0); //Money
			Write32(pAwardItemInfo, 0); //SuperMoney
			Write16(pAwardItemInfo, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAwardItemInfo;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //Coupons
			Write32(pAwardItemInfo, 0); //GuildPoint
			Write32(pAwardItemInfo, 0); //LuckMoney
			Write8(pAwardItemInfo, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAwardItemInfo;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //SpeedCoin

			len = pAwardItemInfo - pMakedZongziAwardInfo;
			Set16(pMakedZongziAwardInfo, (WORD)len);
			pMakedZongziAwardInfo += len;
		}
		Write32(pMakedZongziAwardInfo, 0); //AwardRound
		Write32(pMakedZongziAwardInfo, 0); //AwardMaxNums
		Write32(pMakedZongziAwardInfo, 0); //AwardLowNums
		Write32(pMakedZongziAwardInfo, 0); //CurrentProcessValue
		Write32(pMakedZongziAwardInfo, 0); //AwardNeedProcessValue
		Write8(pMakedZongziAwardInfo, 0); //GetAward
		Write8(pMakedZongziAwardInfo, 0); //BestItemAward
		Write16(pMakedZongziAwardInfo, 0); //AwardExtraType
		Write32(pMakedZongziAwardInfo, 0); //ReceBeginDate
		Write32(pMakedZongziAwardInfo, 0); //ReceEndDate
		Write16(pMakedZongziAwardInfo, 0); //AwardPoolID
		Write8(pMakedZongziAwardInfo, 0); //AwardStatus

		len = pMakedZongziAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //MagicZongziValue
	Write32(p, 0); //CanLightZongzi
	Write16(p, 0); //TipsInfoLen
	Write8(p, 0); //CanAward
	Write32(p, 0); //CurrentFeedZongziFullyNums
	Write8(p, 0); //GetAllAward
	Write32(p, 0); //AddedMagicZongziValue

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestLightZongzi(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT MapIndex = Read32(p);
	UINT AwardType = Read32(p);
	UINT AwardIndex = Read32(p);

}

void ResponseLightZongzi(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	{ //LightZongziAwardInfo
		BYTE* pLightZongziAwardInfo = p;
		Write16(pLightZongziAwardInfo, 0); //len

		Write8(pLightZongziAwardInfo, 0); //MapIndex
		Write16(pLightZongziAwardInfo, 0); //AwardType
		Write16(pLightZongziAwardInfo, 0); //AwardIndex
		Write16(pLightZongziAwardInfo, 0); //EventAwardID
		{ //AwardItemInfo
			BYTE* pAwardItemInfo = pLightZongziAwardInfo;
			Write16(pAwardItemInfo, 0); //len

			Write32(pAwardItemInfo, 0); //Exp
			Write32(pAwardItemInfo, 0); //Money
			Write32(pAwardItemInfo, 0); //SuperMoney
			Write16(pAwardItemInfo, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAwardItemInfo;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //Coupons
			Write32(pAwardItemInfo, 0); //GuildPoint
			Write32(pAwardItemInfo, 0); //LuckMoney
			Write8(pAwardItemInfo, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAwardItemInfo;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //SpeedCoin

			len = pAwardItemInfo - pLightZongziAwardInfo;
			Set16(pLightZongziAwardInfo, (WORD)len);
			pLightZongziAwardInfo += len;
		}
		Write32(pLightZongziAwardInfo, 0); //AwardRound
		Write32(pLightZongziAwardInfo, 0); //AwardMaxNums
		Write32(pLightZongziAwardInfo, 0); //AwardLowNums
		Write32(pLightZongziAwardInfo, 0); //CurrentProcessValue
		Write32(pLightZongziAwardInfo, 0); //AwardNeedProcessValue
		Write8(pLightZongziAwardInfo, 0); //GetAward
		Write8(pLightZongziAwardInfo, 0); //BestItemAward
		Write16(pLightZongziAwardInfo, 0); //AwardExtraType
		Write32(pLightZongziAwardInfo, 0); //ReceBeginDate
		Write32(pLightZongziAwardInfo, 0); //ReceEndDate
		Write16(pLightZongziAwardInfo, 0); //AwardPoolID
		Write8(pLightZongziAwardInfo, 0); //AwardStatus

		len = pLightZongziAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //MagicZongziValue
	Write32(p, 0); //CanLightZongzi
	Write8(p, 0); //NeedAward
	Write32(p, 0); //CurrentFeedZongziFullyNums
	Write8(p, 0); //GetAllAward
	Write16(p, 0); //TipsInfoLen

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetSummerZhanxinShowInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetSummerZhanxinShowInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //AwardNums
	for (size_t i = 0; i < n; i++)
	{ //ZhanxinAwardInfos
		BYTE* pZhanxinAwardInfos = p;
		Write16(pZhanxinAwardInfos, 0); //len

		Write8(pZhanxinAwardInfos, 0); //MapIndex
		Write16(pZhanxinAwardInfos, 0); //AwardType
		Write16(pZhanxinAwardInfos, 0); //AwardIndex
		Write16(pZhanxinAwardInfos, 0); //EventAwardID
		{ //AwardItemInfo
			BYTE* pAwardItemInfo = pZhanxinAwardInfos;
			Write16(pAwardItemInfo, 0); //len

			Write32(pAwardItemInfo, 0); //Exp
			Write32(pAwardItemInfo, 0); //Money
			Write32(pAwardItemInfo, 0); //SuperMoney
			Write16(pAwardItemInfo, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAwardItemInfo;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //Coupons
			Write32(pAwardItemInfo, 0); //GuildPoint
			Write32(pAwardItemInfo, 0); //LuckMoney
			Write8(pAwardItemInfo, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAwardItemInfo;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //SpeedCoin

			len = pAwardItemInfo - pZhanxinAwardInfos;
			Set16(pZhanxinAwardInfos, (WORD)len);
			pZhanxinAwardInfos += len;
		}
		Write32(pZhanxinAwardInfos, 0); //AwardRound
		Write32(pZhanxinAwardInfos, 0); //AwardMaxNums
		Write32(pZhanxinAwardInfos, 0); //AwardLowNums
		Write32(pZhanxinAwardInfos, 0); //CurrentProcessValue
		Write32(pZhanxinAwardInfos, 0); //AwardNeedProcessValue
		Write8(pZhanxinAwardInfos, 0); //GetAward
		Write8(pZhanxinAwardInfos, 0); //BestItemAward
		Write16(pZhanxinAwardInfos, 0); //AwardExtraType
		Write32(pZhanxinAwardInfos, 0); //ReceBeginDate
		Write32(pZhanxinAwardInfos, 0); //ReceEndDate
		Write16(pZhanxinAwardInfos, 0); //AwardPoolID
		Write8(pZhanxinAwardInfos, 0); //AwardStatus

		len = pZhanxinAwardInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //ChanceGeneNums
	for (size_t i = 0; i < n; i++)
	{ //SpecialActPartiChanceGeneInfos
		BYTE* pSpecialActPartiChanceGeneInfos = p;
		Write16(pSpecialActPartiChanceGeneInfos, 0); //len

		Write8(pSpecialActPartiChanceGeneInfos, 0); //TaskID
		Write8(pSpecialActPartiChanceGeneInfos, 0); //TaskPeriod
		Write32(pSpecialActPartiChanceGeneInfos, 0); //AlreadyAwardNums
		Write32(pSpecialActPartiChanceGeneInfos, 0); //AwardMoveNums
		Write32(pSpecialActPartiChanceGeneInfos, 0); //TaskFinishNums
		Write32(pSpecialActPartiChanceGeneInfos, 0); //TaskNeedValue

		len = pSpecialActPartiChanceGeneInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //OpenTimeInfo
		BYTE* pOpenTimeInfo = p;
		Write16(pOpenTimeInfo, 0); //len

		Write32(pOpenTimeInfo, 0); //OpenDate
		Write32(pOpenTimeInfo, 0); //CloseDate
		Write32(pOpenTimeInfo, 0); //OpenTime
		Write32(pOpenTimeInfo, 0); //CloseTime

		len = pOpenTimeInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //CurrentLightLevel
	Write32(p, 0); //CurrentLevelLightNums
	Write32(p, 0); //CurrentLevelLightMaxNums
	Write32(p, 0); //PresentStarValueRecordNums
	for (size_t i = 0; i < n; i++)
	{ //RecordInfos
		BYTE* pRecordInfos = p;
		Write16(pRecordInfos, 0); //len

		Write32(pRecordInfos, 0); //Uin
		Write32(pRecordInfos, 0); //PlayerType
		WriteString(pRecordInfos, 0); //NickName[]
		Write16(pRecordInfos, 0); //WordLen
		Write32(pRecordInfos, 0); //PresentStarValue

		len = pRecordInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //DailyReceStarValue
	Write32(p, 0); //TotalReceStarValue
	Write32(p, 0); //CurrentStarValue
	Write8(p, 0); //NeedConstellateCallOn
	Write32(p, 0); //TotalLightStarNums
	Write32(p, 0); //ZhanxinItemID
	Write16(p, 0); //ArrayStarToAwardType[]
	Write8(p, 0); //NeedTipPresentStarValue
	Write32(p, 0); //DailyReceStarValueLimit
	Write8(p, 0); //DailyFirstOpenPanel
	Write32(p, 0); //FinalAwardNeedLightNums

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetPresentStarValueRecordInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetPresentStarValueRecordInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write32(p, 0); //PresentStarValueRecordNums
	for (size_t i = 0; i < n; i++)
	{ //RecordInfos
		BYTE* pRecordInfos = p;
		Write16(pRecordInfos, 0); //len

		Write32(pRecordInfos, 0); //Uin
		Write32(pRecordInfos, 0); //PlayerType
		WriteString(pRecordInfos, 0); //NickName[]
		Write16(pRecordInfos, 0); //WordLen
		Write32(pRecordInfos, 0); //PresentStarValue

		len = pRecordInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //DailyReceStarValue
	Write32(p, 0); //TotalReceStarValue
	Write32(p, 0); //CurrentStarValue
	Write32(p, 0); //DailyReceStarValueLimit
	Write32(p, 0); //MaxPresentRecordNums

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetPresentPlayerListInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetPresentPlayerListInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //PlayerListNums
	for (size_t i = 0; i < n; i++)
	{ //PlayerInfos
		BYTE* pPlayerInfos = p;
		Write16(pPlayerInfos, 0); //len

		Write32(pPlayerInfos, 0); //Uin
		Write32(pPlayerInfos, 0); //PlayerType
		WriteString(pPlayerInfos, 0); //NickName[]
		Write16(pPlayerInfos, 0); //WordInfoNums
		for (size_t i = 0; i < n; i++)
		{ //PresentWordInfos
			BYTE* pPresentWordInfos = pPlayerInfos;
			Write16(pPresentWordInfos, 0); //len

			Write16(pPresentWordInfos, 0); //WordLen

			len = pPresentWordInfos - pPlayerInfos;
			Set16(pPlayerInfos, (WORD)len);
			pPlayerInfos += len;
		}

		len = pPlayerInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestLightSummerStar(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseLightSummerStar(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	{ //AwardInfo
		BYTE* pAwardInfo = p;
		Write16(pAwardInfo, 0); //len

		Write8(pAwardInfo, 0); //MapIndex
		Write16(pAwardInfo, 0); //AwardType
		Write16(pAwardInfo, 0); //AwardIndex
		Write16(pAwardInfo, 0); //EventAwardID
		{ //AwardItemInfo
			BYTE* pAwardItemInfo = pAwardInfo;
			Write16(pAwardItemInfo, 0); //len

			Write32(pAwardItemInfo, 0); //Exp
			Write32(pAwardItemInfo, 0); //Money
			Write32(pAwardItemInfo, 0); //SuperMoney
			Write16(pAwardItemInfo, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAwardItemInfo;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //Coupons
			Write32(pAwardItemInfo, 0); //GuildPoint
			Write32(pAwardItemInfo, 0); //LuckMoney
			Write8(pAwardItemInfo, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAwardItemInfo;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //SpeedCoin

			len = pAwardItemInfo - pAwardInfo;
			Set16(pAwardInfo, (WORD)len);
			pAwardInfo += len;
		}
		Write32(pAwardInfo, 0); //AwardRound
		Write32(pAwardInfo, 0); //AwardMaxNums
		Write32(pAwardInfo, 0); //AwardLowNums
		Write32(pAwardInfo, 0); //CurrentProcessValue
		Write32(pAwardInfo, 0); //AwardNeedProcessValue
		Write8(pAwardInfo, 0); //GetAward
		Write8(pAwardInfo, 0); //BestItemAward
		Write16(pAwardInfo, 0); //AwardExtraType
		Write32(pAwardInfo, 0); //ReceBeginDate
		Write32(pAwardInfo, 0); //ReceEndDate
		Write16(pAwardInfo, 0); //AwardPoolID
		Write8(pAwardInfo, 0); //AwardStatus

		len = pAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //Promotion
	Write32(p, 0); //CurrentLightLevel
	Write32(p, 0); //CurrentLevelLightNums
	Write32(p, 0); //CurrentLevelLightMaxNums
	Write32(p, 0); //AddStarValue
	Write8(p, 0); //NeedConstellateCallOn
	Write32(p, 0); //TotalLightStarNums
	Write32(p, 0); //FinalAwardNeedLightNums

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestConstellateCallOn(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseConstellateCallOn(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	{ //CallOnAwardInfo
		BYTE* pCallOnAwardInfo = p;
		Write16(pCallOnAwardInfo, 0); //len

		Write32(pCallOnAwardInfo, 0); //Exp
		Write32(pCallOnAwardInfo, 0); //Money
		Write32(pCallOnAwardInfo, 0); //SuperMoney
		Write16(pCallOnAwardInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pCallOnAwardInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pCallOnAwardInfo;
			Set16(pCallOnAwardInfo, (WORD)len);
			pCallOnAwardInfo += len;
		}
		Write32(pCallOnAwardInfo, 0); //Coupons
		Write32(pCallOnAwardInfo, 0); //GuildPoint
		Write32(pCallOnAwardInfo, 0); //LuckMoney
		Write8(pCallOnAwardInfo, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pCallOnAwardInfo;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pCallOnAwardInfo;
			Set16(pCallOnAwardInfo, (WORD)len);
			pCallOnAwardInfo += len;
		}
		Write32(pCallOnAwardInfo, 0); //SpeedCoin

		len = pCallOnAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //CurrentStarValue

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetConstellateCallOnShowInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetConstellateCallOnShowInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //AwardStarInfoNums
	for (size_t i = 0; i < n; i++)
	{ //AwardStarInfos
		BYTE* pAwardStarInfos = p;
		Write16(pAwardStarInfos, 0); //len

		Write32(pAwardStarInfos, 0); //AwardLowNums
		Write32(pAwardStarInfos, 0); //AwardHighNums
		Write8(pAwardStarInfos, 0); //StarType

		len = pAwardStarInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //CurrentStarValue
	Write16(p, 0); //AddStarValueInfoNums
	for (size_t i = 0; i < n; i++)
	{ //AddStarValueInfos
		BYTE* pAddStarValueInfos = p;
		Write16(pAddStarValueInfos, 0); //len

		Write8(pAddStarValueInfos, 0); //StarType
		Write32(pAddStarValueInfos, 0); //AddValue

		len = pAddStarValueInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //PresentAddStarValueInfoNums
	for (size_t i = 0; i < n; i++)
	{ //PresentAddStarValueInfos
		BYTE* pPresentAddStarValueInfos = p;
		Write16(pPresentAddStarValueInfos, 0); //len

		Write8(pPresentAddStarValueInfos, 0); //PlayerType
		Write32(pPresentAddStarValueInfos, 0); //AddValue

		len = pPresentAddStarValueInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //CallOnNeedLightNums

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestPresentStarValue(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT PresentUin = Read32(p);
	UINT PlayerType = Read32(p);

}

void ResponsePresentStarValue(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestReceStarValue(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseReceStarValue(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write32(p, 0); //CurrentStarValue
	Write32(p, 0); //RecedStarValue
	Write8(p, 0); //ReachDailyLimit
	Write32(p, 0); //TotalReceValue
	Write32(p, 0); //DailyReceValue

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestSummerZhanbu(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseSummerZhanBu(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write32(p, 0); //ZhanbuFateValue
	Write16(p, 0); //ZhanbuContentLen
	Write32(p, 0); //ZhanbuRelationType[]
	{ //AwardInfo
		BYTE* pAwardInfo = p;
		Write16(pAwardInfo, 0); //len

		Write32(pAwardInfo, 0); //Exp
		Write32(pAwardInfo, 0); //Money
		Write32(pAwardInfo, 0); //SuperMoney
		Write16(pAwardInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAwardInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAwardInfo;
			Set16(pAwardInfo, (WORD)len);
			pAwardInfo += len;
		}
		Write32(pAwardInfo, 0); //Coupons
		Write32(pAwardInfo, 0); //GuildPoint
		Write32(pAwardInfo, 0); //LuckMoney
		Write8(pAwardInfo, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAwardInfo;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAwardInfo;
			Set16(pAwardInfo, (WORD)len);
			pAwardInfo += len;
		}
		Write32(pAwardInfo, 0); //SpeedCoin

		len = pAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetZhanbuShowInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetZhanbuShowInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write32(p, 0); //ZhanBuNeedCallOnNums
	Write32(p, 0); //CurrentCallOnNums
	{ //AwardInfo
		BYTE* pAwardInfo = p;
		Write16(pAwardInfo, 0); //len

		Write32(pAwardInfo, 0); //Exp
		Write32(pAwardInfo, 0); //Money
		Write32(pAwardInfo, 0); //SuperMoney
		Write16(pAwardInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAwardInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAwardInfo;
			Set16(pAwardInfo, (WORD)len);
			pAwardInfo += len;
		}
		Write32(pAwardInfo, 0); //Coupons
		Write32(pAwardInfo, 0); //GuildPoint
		Write32(pAwardInfo, 0); //LuckMoney
		Write8(pAwardInfo, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAwardInfo;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAwardInfo;
			Set16(pAwardInfo, (WORD)len);
			pAwardInfo += len;
		}
		Write32(pAwardInfo, 0); //SpeedCoin

		len = pAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestSuperSpokesPerson(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR OperateType = Read8(p);
	USHORT AvatarNum = Read16(p);
	int[] AvatarIDList[] = Read32(p);
	UCHAR VoteIndex = Read8(p);
	UCHAR VotePlayerIndex = Read8(p);
	UCHAR VoteLabelIndex = Read8(p);
	USHORT TopListID = Read16(p);
	UCHAR Gender = Read8(p);

}

void ResponseSuperSpokesPerson(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen
	Write8(p, 0); //OperateType
	Write8(p, 0); //HasSeasonCfg
	for (size_t i = 0; i < n; i++)
	{ //SuperSpokesPersonCfg
		BYTE* pSuperSpokesPersonCfg = p;
		Write16(pSuperSpokesPersonCfg, 0); //len

		Write8(pSuperSpokesPersonCfg, 0); //InnerSeasonID
		Write32(pSuperSpokesPersonCfg, 0); //BeginDate
		Write32(pSuperSpokesPersonCfg, 0); //EndDate
		Write32(pSuperSpokesPersonCfg, 0); //EndVoteTime
		Write32(pSuperSpokesPersonCfg, 0); //KartID
		Write16(pSuperSpokesPersonCfg, 0); //KeyWordsLen
		Write16(pSuperSpokesPersonCfg, 0); //DayMaxAuthority
		Write8(pSuperSpokesPersonCfg, 0); //DayMaxVoteBoxNum
		Write8(pSuperSpokesPersonCfg, 0); //TopListCfgNum
		for (size_t i = 0; i < n; i++)
		{ //TopListCfg
			BYTE* pTopListCfg = pSuperSpokesPersonCfg;
			Write16(pTopListCfg, 0); //len

			Write8(pTopListCfg, 0); //InnerSeasonID
			Write32(pTopListCfg, 0); //BeginDate
			Write32(pTopListCfg, 0); //EndDate
			Write32(pTopListCfg, 0); //KartID
			Write16(pTopListCfg, 0); //TopListID
			Write8(pTopListCfg, 0); //AwardState

			len = pTopListCfg - pSuperSpokesPersonCfg;
			Set16(pSuperSpokesPersonCfg, (WORD)len);
			pSuperSpokesPersonCfg += len;
		}
		Write32(pSuperSpokesPersonCfg, 0); //TotalBeginDate
		Write32(pSuperSpokesPersonCfg, 0); //TotalEndDate
		Write8(pSuperSpokesPersonCfg, 0); //DayMaxVoteRoundNum

		len = pSuperSpokesPersonCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //AvatarNum
	Write32(p, 0); //AvatarIDList[]
	Write32(p, 0); //WeekVoteNum
	Write8(p, 0); //LabelNum
	for (size_t i = 0; i < n; i++)
	{ //LabelList
		BYTE* pLabelList = p;
		Write16(pLabelList, 0); //len

		Write8(pLabelList, 0); //LabelID
		Write32(pLabelList, 0); //LavelVoteNum

		len = pLabelList - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //VotePlayerNum
	for (size_t i = 0; i < n; i++)
	{ //VotePlayerTeam
		BYTE* pVotePlayerTeam = p;
		Write16(pVotePlayerTeam, 0); //len

		{ //VotePlayer1
			BYTE* pVotePlayer1 = pVotePlayerTeam;
			Write16(pVotePlayer1, 0); //len

			WriteString(pVotePlayer1, 0); //NickName[]
			Write16(pVotePlayer1, 0); //AvatarNum
			Write32(pVotePlayer1, 0); //AvatarIDList[]
			Write8(pVotePlayer1, 0); //Gender
			Write32(pVotePlayer1, 0); //CurPopularity
			Write32(pVotePlayer1, 0); //Uin
			Write8(pVotePlayer1, 0); //AreaID

			len = pVotePlayer1 - pVotePlayerTeam;
			Set16(pVotePlayerTeam, (WORD)len);
			pVotePlayerTeam += len;
		}
		{ //VotePlayer2
			BYTE* pVotePlayer2 = pVotePlayerTeam;
			Write16(pVotePlayer2, 0); //len

			WriteString(pVotePlayer2, 0); //NickName[]
			Write16(pVotePlayer2, 0); //AvatarNum
			Write32(pVotePlayer2, 0); //AvatarIDList[]
			Write8(pVotePlayer2, 0); //Gender
			Write32(pVotePlayer2, 0); //CurPopularity
			Write32(pVotePlayer2, 0); //Uin
			Write8(pVotePlayer2, 0); //AreaID

			len = pVotePlayer2 - pVotePlayerTeam;
			Set16(pVotePlayerTeam, (WORD)len);
			pVotePlayerTeam += len;
		}

		len = pVotePlayerTeam - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //LeftVoteNumForAward
	Write8(p, 0); //LeftVoteRound
	Write32(p, 0); //TotalPopularity
	Write32(p, 0); //TotalAuthority
	Write8(p, 0); //HasTopListInfo
	for (size_t i = 0; i < n; i++)
	{ //TopListInfo
		BYTE* pTopListInfo = p;
		Write16(pTopListInfo, 0); //len

		Write16(pTopListInfo, 0); //ID
		Write16(pTopListInfo, 0); //Count
		for (size_t i = 0; i < n; i++)
		{ //Items
			BYTE* pItems = pTopListInfo;
			Write16(pItems, 0); //len

			Write32(pItems, 0); //Uin
			WriteString(pItems, 0); //NickName[]
			Write32(pItems, 0); //Value
			Write8(pItems, 0); //HasOtherInfo
			for (size_t i = 0; i < n; i++)
			{ //Other
				BYTE* pOther = pItems;
				Write16(pOther, 0); //len

				Write32(pOther, 0); //IntPara0
				Write32(pOther, 0); //IntPara1
				WriteString(pOther, 0); //StrPara0[]
				WriteString(pOther, 0); //StrPara1[]
				Write32(pOther, 0); //IntPara2
				Write8(pOther, 0); //HasMapInfo
				for (size_t i = 0; i < n; i++)
				{ //MapInfo
					BYTE* pMapInfo = pOther;
					Write16(pMapInfo, 0); //len

					Write8(pMapInfo, 0); //MapItemNum
					for (size_t i = 0; i < n; i++)
					{ //MapItemList
						BYTE* pMapItemList = pMapInfo;
						Write16(pMapItemList, 0); //len

						Write32(pMapItemList, 0); //Uin
						Write8(pMapItemList, 0); //Area

						len = pMapItemList - pMapInfo;
						Set16(pMapInfo, (WORD)len);
						pMapInfo += len;
					}

					len = pMapInfo - pOther;
					Set16(pOther, (WORD)len);
					pOther += len;
				}

				len = pOther - pItems;
				Set16(pItems, (WORD)len);
				pItems += len;
			}
			Write8(pItems, 0); //AreaId
			Write8(pItems, 0); //ParaNum
			Write32(pItems, 0); //Para[]
			Write8(pItems, 0); //AnchorNum
			for (size_t i = 0; i < n; i++)
			{ //AnchorInfo
				BYTE* pAnchorInfo = pItems;
				Write16(pAnchorInfo, 0); //len

				Write32(pAnchorInfo, 0); //Uin
				Write32(pAnchorInfo, 0); //RoomID
				Write8(pAnchorInfo, 0); //StrNum

				len = pAnchorInfo - pItems;
				Set16(pItems, (WORD)len);
				pItems += len;
			}

			len = pItems - pTopListInfo;
			Set16(pTopListInfo, (WORD)len);
			pTopListInfo += len;
		}
		Write32(pTopListInfo, 0); //SelfRank
		Write8(pTopListInfo, 0); //AwardState
		Write32(pTopListInfo, 0); //SelfValue

		len = pTopListInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasAward
	for (size_t i = 0; i < n; i++)
	{ //Award
		BYTE* pAward = p;
		Write16(pAward, 0); //len

		Write32(pAward, 0); //Exp
		Write32(pAward, 0); //Money
		Write32(pAward, 0); //SuperMoney
		Write16(pAward, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAward;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write32(pAward, 0); //Coupons
		Write32(pAward, 0); //GuildPoint
		Write32(pAward, 0); //LuckMoney
		Write8(pAward, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAward;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write32(pAward, 0); //SpeedCoin

		len = pAward - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasTopListRed
	Write8(p, 0); //NeedGuide
	Write8(p, 0); //SelfGender
	Write16(p, 0); //CurRoundAuthority

	len = p - buf;
	SendToClient(Client, 25139, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyDesperateEscapeGameEvent(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //GameEvent
	Write16(p, 0); //CfgNum
	for (size_t i = 0; i < n; i++)
	{ //GameCfg
		BYTE* pGameCfg = p;
		Write16(pGameCfg, 0); //len

		Write16(pGameCfg, 0); //SmallRoundGameEndPlayerNum
		Write16(pGameCfg, 0); //SmallRoundEliminatePlayerNum
		Write16(pGameCfg, 0); //SmallRoundPrepareTime
		Write16(pGameCfg, 0); //SmallRoundDayTime
		Write16(pGameCfg, 0); //SmallRoundNightTime
		Write16(pGameCfg, 0); //StartCompensation
		Write16(pGameCfg, 0); //PowerAccelFactor
		Write16(pGameCfg, 0); //PowerSpeedBase
		Write16(pGameCfg, 0); //CheckPowerSpeedFreq
		Write16(pGameCfg, 0); //StartCompensationTime
		Write16(pGameCfg, 0); //PowerAccelFactorInRankNum
		Write16(pGameCfg, 0); //PowerAccelFactorInRank[]
		Write16(pGameCfg, 0); //SpeedAccelBase
		Write16(pGameCfg, 0); //SpeedAccelFactorInRankNum
		Write16(pGameCfg, 0); //SpeedAccelFactorInRank[]
		Write8(pGameCfg, 0); //RoundNum
		Write16(pGameCfg, 0); //RoundBanMapNum[]
		Write16(pGameCfg, 0); //BanTuShowTime
		Write16(pGameCfg, 0); //SelectBuffShowTime
		Write16(pGameCfg, 0); //BanTuShowTimeLastRound

		len = pGameCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //UinNum
	Write32(p, 0); //UinList[]
	Write32(p, 0); //Value
	Write32(p, 0); //Value2
	Write8(p, 0); //ParaNum
	Write32(p, 0); //ParaList[]
	Write8(p, 0); //OtherPropPosNum
	for (size_t i = 0; i < n; i++)
	{ //OtherPropPos
		BYTE* pOtherPropPos = p;
		Write16(pOtherPropPos, 0); //len

		Write32(pOtherPropPos, 0); //Idx
		Write32(pOtherPropPos, 0); //Postion[]

		len = pOtherPropPos - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 1727, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestDesperateEscapeGetTrophyInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR Type = Read8(p);

}

void ResponseDesperateEscapeGetTrophyInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write8(p, 0); //Has
	for (size_t i = 0; i < n; i++)
	{ //DesperateEscapeTrophyInfo
		BYTE* pDesperateEscapeTrophyInfo = p;
		Write16(pDesperateEscapeTrophyInfo, 0); //len

		Write8(pDesperateEscapeTrophyInfo, 0); //Num
		for (size_t i = 0; i < n; i++)
		{ //Info
			BYTE* pInfo = pDesperateEscapeTrophyInfo;
			Write16(pInfo, 0); //len

			Write32(pInfo, 0); //Uin
			Write32(pInfo, 0); //SrcUin
			Write8(pInfo, 0); //TrophyType
			Write32(pInfo, 0); //ID
			Write32(pInfo, 0); //RefitCount
			Write8(pInfo, 0); //Status
			Write8(pInfo, 0); //HasRefit
			for (size_t i = 0; i < n; i++)
			{ //KartRefitInfo
				BYTE* pKartRefitInfo = pInfo;
				Write16(pKartRefitInfo, 0); //len

				Write32(pKartRefitInfo, 0); //Uin
				Write32(pKartRefitInfo, 0); //KartId
				Write32(pKartRefitInfo, 0); //RefitCout
				Write16(pKartRefitInfo, 0); //MaxFlags
				Write16(pKartRefitInfo, 0); //WWeight
				Write16(pKartRefitInfo, 0); //SpeedWeight
				Write16(pKartRefitInfo, 0); //JetWeight
				Write16(pKartRefitInfo, 0); //SJetWeight
				Write16(pKartRefitInfo, 0); //AccuWeight
				Write32(pKartRefitInfo, 0); //ShapeRefitCount
				Write32(pKartRefitInfo, 0); //KartHeadRefitItemID
				Write32(pKartRefitInfo, 0); //KartTailRefitItemID
				Write32(pKartRefitInfo, 0); //KartFlankRefitItemID
				Write32(pKartRefitInfo, 0); //KartTireRefitItemID
				Write32(pKartRefitInfo, 0); //SecondRefitCount
				Write16(pKartRefitInfo, 0); //Speed2Weight
				Write16(pKartRefitInfo, 0); //DriftVecWeight
				Write16(pKartRefitInfo, 0); //AdditionalZSpeedWeight
				Write16(pKartRefitInfo, 0); //AntiCollisionWeight
				Write16(pKartRefitInfo, 0); //LuckyValue
				Write16(pKartRefitInfo, 0); //RefitLuckyValueMaxWeight
				Write32(pKartRefitInfo, 0); //ShapeSuitID
				Write8(pKartRefitInfo, 0); //LegendSuitLevel
				Write32(pKartRefitInfo, 0); //LegendSuitLevelChoice
				Write32(pKartRefitInfo, 0); //ShapeLegendSuitID

				len = pKartRefitInfo - pInfo;
				Set16(pInfo, (WORD)len);
				pInfo += len;
			}

			len = pInfo - pDesperateEscapeTrophyInfo;
			Set16(pDesperateEscapeTrophyInfo, (WORD)len);
			pDesperateEscapeTrophyInfo += len;
		}

		len = pDesperateEscapeTrophyInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasNew
	Write8(p, 0); //Type

	len = p - buf;
	SendToClient(Client, 1730, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestDesperateEscapeEquipTrophy(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	{ //Item
		BYTE* pItem = p;
		len = Read16(pItem);

		UCHAR TrophyType = Read8(pItem);
		UINT ID = Read32(pItem);
		UINT Idx = Read32(pItem);
		bool NewStatus = Read8(pItem);

		p += len;
	}
	UCHAR Type = Read8(p);

}

void ResponseDesperateEscapeEquipTrophy(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write8(p, 0); //ItemNum
	for (size_t i = 0; i < n; i++)
	{ //Item
		BYTE* pItem = p;
		Write16(pItem, 0); //len

		Write8(pItem, 0); //TrophyType
		Write32(pItem, 0); //ID
		Write32(pItem, 0); //Idx
		Write8(pItem, 0); //NewStatus

		len = pItem - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //Type

	len = p - buf;
	SendToClient(Client, 1731, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyMatchRoomInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //MatchRoomType
	Write8(p, 0); //EventType
	Write8(p, 0); //HasBeginInfo
	for (size_t i = 0; i < n; i++)
	{ //BeginInfo
		BYTE* pBeginInfo = p;
		Write16(pBeginInfo, 0); //len

		Write8(pBeginInfo, 0); //PlayerNum
		for (size_t i = 0; i < n; i++)
		{ //PlayerInfo
			BYTE* pPlayerInfo = pBeginInfo;
			Write16(pPlayerInfo, 0); //len

			Write32(pPlayerInfo, 0); //Uin
			WriteString(pPlayerInfo, 0); //NickName[]
			Write8(pPlayerInfo, 0); //Gender
			Write8(pPlayerInfo, 0); //EquipedItemNum
			Write32(pPlayerInfo, 0); //EquipedItemList[]
			Write32(pPlayerInfo, 0); //AreaID
			Write8(pPlayerInfo, 0); //ReserveFlag
			Write8(pPlayerInfo, 0); //TeamID
			Write8(pPlayerInfo, 0); //HasRoomVisibleInfo
			for (size_t i = 0; i < n; i++)
			{ //RoomVisibleInfo
				BYTE* pRoomVisibleInfo = pPlayerInfo;
				Write16(pRoomVisibleInfo, 0); //len

				WriteUn(pRoomVisibleInfo, 0); //Uin
				WriteUn(pRoomVisibleInfo, 0); //Identity
				Write8(pRoomVisibleInfo, 0); //SeatID
				Write8(pRoomVisibleInfo, 0); //TeamID
				Write16(pRoomVisibleInfo, 0); //PlayerID
				Write8(pRoomVisibleInfo, 0); //Status
				{ //PlayerDBBaseInfo
					BYTE* pPlayerDBBaseInfo = pRoomVisibleInfo;
					Write16(pPlayerDBBaseInfo, 0); //len

					WriteString(pPlayerDBBaseInfo, 0); //NickName[]
					Write8(pPlayerDBBaseInfo, 0); //Gender
					Write8(pPlayerDBBaseInfo, 0); //Country
					Write32(pPlayerDBBaseInfo, 0); //License
					WriteUn(pPlayerDBBaseInfo, 0); //Experience
					Write32(pPlayerDBBaseInfo, 0); //SuperMoney
					Write32(pPlayerDBBaseInfo, 0); //Money
					WriteUn(pPlayerDBBaseInfo, 0); //WinNum
					Write32(pPlayerDBBaseInfo, 0); //SecondNum
					Write32(pPlayerDBBaseInfo, 0); //ThirdNum
					WriteUn(pPlayerDBBaseInfo, 0); //TotalNum
					Write32(pPlayerDBBaseInfo, 0); //CurHonor
					Write32(pPlayerDBBaseInfo, 0); //TotalHonor
					Write32(pPlayerDBBaseInfo, 0); //TodayHonor
					Write32(pPlayerDBBaseInfo, 0); //RelaxTime
					Write32(pPlayerDBBaseInfo, 0); //MonthDurationBefore
					Write32(pPlayerDBBaseInfo, 0); //MonthDurationCur
					Write32(pPlayerDBBaseInfo, 0); //Charm
					Write32(pPlayerDBBaseInfo, 0); //DurationGame
					Write32(pPlayerDBBaseInfo, 0); //DanceExp
					Write32(pPlayerDBBaseInfo, 0); //Coupons
					Write32(pPlayerDBBaseInfo, 0); //Admiration
					Write32(pPlayerDBBaseInfo, 0); //LuckMoney
					Write32(pPlayerDBBaseInfo, 0); //TeamWorkExp
					Write32(pPlayerDBBaseInfo, 0); //AchievePoint
					Write32(pPlayerDBBaseInfo, 0); //RegTime
					WriteString(pPlayerDBBaseInfo, 0); //Signature[]
					Write32(pPlayerDBBaseInfo, 0); //LuckyMatchPoint
					Write32(pPlayerDBBaseInfo, 0); //LuckyMatchNum
					Write16(pPlayerDBBaseInfo, 0); //LuckyMatchFirstNum
					Write8(pPlayerDBBaseInfo, 0); //LuckyMatchBestRand
					Write32(pPlayerDBBaseInfo, 0); //LuckyMatchWinNum
					Write32(pPlayerDBBaseInfo, 0); //FizzPointTotal
					Write16(pPlayerDBBaseInfo, 0); //FizzPointDaily
					Write16(pPlayerDBBaseInfo, 0); //FizzPointWeekly
					Write16(pPlayerDBBaseInfo, 0); //FizzPointLastWeek
					Write8(pPlayerDBBaseInfo, 0); //FizzLotteryStatus
					Write32(pPlayerDBBaseInfo, 0); //FizzLastUpdateTime
					Write32(pPlayerDBBaseInfo, 0); //SNSLocaleCode
					Write32(pPlayerDBBaseInfo, 0); //AuctionRightUnlockTime
					Write8(pPlayerDBBaseInfo, 0); //ReserveFlag
					Write32(pPlayerDBBaseInfo, 0); //CurConsumeScore
					Write32(pPlayerDBBaseInfo, 0); //HistoryConsumeScore
					Write8(pPlayerDBBaseInfo, 0); //CrashModeSponsorID
					Write32(pPlayerDBBaseInfo, 0); //Popularity
					Write32(pPlayerDBBaseInfo, 0); //LadderMatchAchievePoint
					Write32(pPlayerDBBaseInfo, 0); //Cash
					Write32(pPlayerDBBaseInfo, 0); //PlayerGPMIdentity
					Write32(pPlayerDBBaseInfo, 0); //PointTotalScore
					WriteUn(pPlayerDBBaseInfo, 0); //totalMapMedalNum
					WriteUn(pPlayerDBBaseInfo, 0); //lastMapMedalNum
					WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalNum
					WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalSeasonId
					WriteUn(pPlayerDBBaseInfo, 0); //lastClearMapMedalTime
					WriteUn(pPlayerDBBaseInfo, 0); //max2048Score
					WriteUn(pPlayerDBBaseInfo, 0); //curPlay2048LeftNum
					Write32(pPlayerDBBaseInfo, 0); //CheerValue
					Write16(pPlayerDBBaseInfo, 0); //SeasonID
					Write32(pPlayerDBBaseInfo, 0); //LastCheerValue
					Write32(pPlayerDBBaseInfo, 0); //SpeedBean
					Write32(pPlayerDBBaseInfo, 0); //SpeedCoin

					len = pPlayerDBBaseInfo - pRoomVisibleInfo;
					Set16(pRoomVisibleInfo, (WORD)len);
					pRoomVisibleInfo += len;
				}
				{ //PlayerGuildInfo
					BYTE* pPlayerGuildInfo = pRoomVisibleInfo;
					Write16(pPlayerGuildInfo, 0); //len

					WriteString(pPlayerGuildInfo, 0); //GuildName[]
					Write16(pPlayerGuildInfo, 0); //Duty
					Write32(pPlayerGuildInfo, 0); //GuildID
					Write32(pPlayerGuildInfo, 0); //Right
					Write32(pPlayerGuildInfo, 0); //Medal
					Write32(pPlayerGuildInfo, 0); //Contribute
					WriteString(pPlayerGuildInfo, 0); //DutyTitle[]

					len = pPlayerGuildInfo - pRoomVisibleInfo;
					Set16(pRoomVisibleInfo, (WORD)len);
					pRoomVisibleInfo += len;
				}
				Write16(pRoomVisibleInfo, 0); //EquipedItemNum
				for (size_t i = 0; i < n; i++)
				{ //PlayerItemInfo
					BYTE* pPlayerItemInfo = pRoomVisibleInfo;
					Write16(pPlayerItemInfo, 0); //len

					Write32(pPlayerItemInfo, 0); //ItemID
					Write32(pPlayerItemInfo, 0); //ItemNum
					Write32(pPlayerItemInfo, 0); //AvailPeriod
					Write8(pPlayerItemInfo, 0); //Status
					WriteUn(pPlayerItemInfo, 0); //ObtainTime
					Write32(pPlayerItemInfo, 0); //OtherAttribute
					Write16(pPlayerItemInfo, 0); //ItemType

					len = pPlayerItemInfo - pRoomVisibleInfo;
					Set16(pRoomVisibleInfo, (WORD)len);
					pRoomVisibleInfo += len;
				}
				Write16(pRoomVisibleInfo, 0); //PetNum
				for (size_t i = 0; i < n; i++)
				{ //PetInfo
					BYTE* pPetInfo = pRoomVisibleInfo;
					Write16(pPetInfo, 0); //len

					Write32(pPetInfo, 0); //Uin
					Write32(pPetInfo, 0); //PetId
					WriteString(pPetInfo, 0); //PetName[]
					Write8(pPetInfo, 0); //IsProper
					Write16(pPetInfo, 0); //Level
					Write8(pPetInfo, 0); //Status
					Write16(pPetInfo, 0); //PetSkillNum
					for (size_t i = 0; i < n; i++)
					{ //PetSkillList
						BYTE* pPetSkillList = pPetInfo;
						Write16(pPetSkillList, 0); //len

						Write16(pPetSkillList, 0); //SkillID
						Write8(pPetSkillList, 0); //Status
						Write8(pPetSkillList, 0); //Active
						Write32(pPetSkillList, 0); //Value

						len = pPetSkillList - pPetInfo;
						Set16(pPetInfo, (WORD)len);
						pPetInfo += len;
					}
					Write32(pPetInfo, 0); //StrengLevel
					Write8(pPetInfo, 0); //TopStatus
					{ //CommonInfo
						BYTE* pCommonInfo = pPetInfo;
						Write16(pCommonInfo, 0); //len

						Write32(pCommonInfo, 0); //HuanHuaLevel
						Write8(pCommonInfo, 0); //CanHuanHua

						len = pCommonInfo - pPetInfo;
						Set16(pPetInfo, (WORD)len);
						pPetInfo += len;
					}
					Write16(pPetInfo, 0); //PKStar
					Write32(pPetInfo, 0); //PetSkinID

					len = pPetInfo - pRoomVisibleInfo;
					Set16(pRoomVisibleInfo, (WORD)len);
					pRoomVisibleInfo += len;
				}
				{ //PlayerGuildMatchInfo
					BYTE* pPlayerGuildMatchInfo = pRoomVisibleInfo;
					Write16(pPlayerGuildMatchInfo, 0); //len

					Write32(pPlayerGuildMatchInfo, 0); //SelfPoint
					Write32(pPlayerGuildMatchInfo, 0); //WinNum
					Write32(pPlayerGuildMatchInfo, 0); //TotalNum

					len = pPlayerGuildMatchInfo - pRoomVisibleInfo;
					Set16(pRoomVisibleInfo, (WORD)len);
					pRoomVisibleInfo += len;
				}
				Write8(pRoomVisibleInfo, 0); //IsInTopList
				Write8(pRoomVisibleInfo, 0); //LoverRaceOrPro
				Write8(pRoomVisibleInfo, 0); //TmpEffectNum
				Write32(pRoomVisibleInfo, 0); //TmpEffectItems[]
				Write8(pRoomVisibleInfo, 0); //OBState
				Write8(pRoomVisibleInfo, 0); //DebutOrX5
				Write8(pRoomVisibleInfo, 0); //RandKeyFlag
				WriteUn(pRoomVisibleInfo, 0); //VipFlag
				Write8(pRoomVisibleInfo, 0); //HaveAppellation
				for (size_t i = 0; i < n; i++)
				{ //CurAppellation
					BYTE* pCurAppellation = pRoomVisibleInfo;
					Write16(pCurAppellation, 0); //len

					Write8(pCurAppellation, 0); //Type
					Write8(pCurAppellation, 0); //Level
					Write8(pCurAppellation, 0); //Status
					Write8(pCurAppellation, 0); //Difficulty
					Write32(pCurAppellation, 0); //MapId
					Write32(pCurAppellation, 0); //Value

					len = pCurAppellation - pRoomVisibleInfo;
					Set16(pRoomVisibleInfo, (WORD)len);
					pRoomVisibleInfo += len;
				}
				{ //NobleInfo
					BYTE* pNobleInfo = pRoomVisibleInfo;
					Write16(pNobleInfo, 0); //len

					Write32(pNobleInfo, 0); //NobleID
					Write8(pNobleInfo, 0); //NobleLevel
					Write32(pNobleInfo, 0); //NoblePoint
					Write32(pNobleInfo, 0); //NobleLeftDays

					len = pNobleInfo - pRoomVisibleInfo;
					Set16(pRoomVisibleInfo, (WORD)len);
					pRoomVisibleInfo += len;
				}
				Write8(pRoomVisibleInfo, 0); //HasCarryWizard
				for (size_t i = 0; i < n; i++)
				{ //CarryWizardInfo
					BYTE* pCarryWizardInfo = pRoomVisibleInfo;
					Write16(pCarryWizardInfo, 0); //len

					Write16(pCarryWizardInfo, 0); //WizardID
					WriteString(pCarryWizardInfo, 0); //NickName[]
					Write16(pCarryWizardInfo, 0); //WizardType
					Write8(pCarryWizardInfo, 0); //Order
					Write8(pCarryWizardInfo, 0); //EvolutionBranch
					Write8(pCarryWizardInfo, 0); //IsHuanHua

					len = pCarryWizardInfo - pRoomVisibleInfo;
					Set16(pRoomVisibleInfo, (WORD)len);
					pRoomVisibleInfo += len;
				}
				{ //GuildVipBaseInfo
					BYTE* pGuildVipBaseInfo = pRoomVisibleInfo;
					Write16(pGuildVipBaseInfo, 0); //len

					Write8(pGuildVipBaseInfo, 0); //GuildVipLevel
					Write32(pGuildVipBaseInfo, 0); //GuildVipPoint

					len = pGuildVipBaseInfo - pRoomVisibleInfo;
					Set16(pRoomVisibleInfo, (WORD)len);
					pRoomVisibleInfo += len;
				}
				Write32(pRoomVisibleInfo, 0); //ExFlag
				Write8(pRoomVisibleInfo, 0); //HaveLDMBaseInfo
				for (size_t i = 0; i < n; i++)
				{ //PlayerLDMBaseInfo
					BYTE* pPlayerLDMBaseInfo = pRoomVisibleInfo;
					Write16(pPlayerLDMBaseInfo, 0); //len

					Write8(pPlayerLDMBaseInfo, 0); //Grade
					Write32(pPlayerLDMBaseInfo, 0); //Score
					Write32(pPlayerLDMBaseInfo, 0); //MaxScore
					Write32(pPlayerLDMBaseInfo, 0); //MaxGrade

					len = pPlayerLDMBaseInfo - pRoomVisibleInfo;
					Set16(pRoomVisibleInfo, (WORD)len);
					pRoomVisibleInfo += len;
				}
				Write8(pRoomVisibleInfo, 0); //HasWl
				for (size_t i = 0; i < n; i++)
				{ //PlayerWlVisibleInfo
					BYTE* pPlayerWlVisibleInfo = pRoomVisibleInfo;
					Write16(pPlayerWlVisibleInfo, 0); //len

					Write32(pPlayerWlVisibleInfo, 0); //WonderLandID
					WriteString(pPlayerWlVisibleInfo, 0); //WonderLandName[]
					Write16(pPlayerWlVisibleInfo, 0); //WonderLandDuty
					Write8(pPlayerWlVisibleInfo, 0); //SubType
					Write8(pPlayerWlVisibleInfo, 0); //GuildGrade

					len = pPlayerWlVisibleInfo - pRoomVisibleInfo;
					Set16(pRoomVisibleInfo, (WORD)len);
					pRoomVisibleInfo += len;
				}
				Write8(pRoomVisibleInfo, 0); //HasLoverVip
				for (size_t i = 0; i < n; i++)
				{ //LoverVipInfo
					BYTE* pLoverVipInfo = pRoomVisibleInfo;
					Write16(pLoverVipInfo, 0); //len

					Write8(pLoverVipInfo, 0); //LoverVipLevel
					Write32(pLoverVipInfo, 0); //LoverVipPoint
					Write8(pLoverVipInfo, 0); //GrowRate

					len = pLoverVipInfo - pRoomVisibleInfo;
					Set16(pRoomVisibleInfo, (WORD)len);
					pRoomVisibleInfo += len;
				}
				Write8(pRoomVisibleInfo, 0); //HasBattleModeSkillInfoList
				for (size_t i = 0; i < n; i++)
				{ //BattleModeSkillInfoList
					BYTE* pBattleModeSkillInfoList = pRoomVisibleInfo;
					Write16(pBattleModeSkillInfoList, 0); //len

					Write8(pBattleModeSkillInfoList, 0); //SkillNum
					for (size_t i = 0; i < n; i++)
					{ //SkillInfo
						BYTE* pSkillInfo = pBattleModeSkillInfoList;
						Write16(pSkillInfo, 0); //len

						Write16(pSkillInfo, 0); //SkillId
						Write8(pSkillInfo, 0); //SkillLevel

						len = pSkillInfo - pBattleModeSkillInfoList;
						Set16(pBattleModeSkillInfoList, (WORD)len);
						pBattleModeSkillInfoList += len;
					}

					len = pBattleModeSkillInfoList - pRoomVisibleInfo;
					Set16(pRoomVisibleInfo, (WORD)len);
					pRoomVisibleInfo += len;
				}
				Write8(pRoomVisibleInfo, 0); //HasGarden
				for (size_t i = 0; i < n; i++)
				{ //PersonalGardenBaseInfo
					BYTE* pPersonalGardenBaseInfo = pRoomVisibleInfo;
					Write16(pPersonalGardenBaseInfo, 0); //len

					Write8(pPersonalGardenBaseInfo, 0); //GardenLevel
					Write32(pPersonalGardenBaseInfo, 0); //GardenPoint
					Write8(pPersonalGardenBaseInfo, 0); //GrowRate
					Write32(pPersonalGardenBaseInfo, 0); //GardenExpireTime
					{ //SimpleInfo
						BYTE* pSimpleInfo = pPersonalGardenBaseInfo;
						Write16(pSimpleInfo, 0); //len

						Write32(pSimpleInfo, 0); //WeekPopularity
						Write32(pSimpleInfo, 0); //TotalPopularity
						Write32(pSimpleInfo, 0); //LastUpdatePopularityTime
						Write8(pSimpleInfo, 0); //PrivateType

						len = pSimpleInfo - pPersonalGardenBaseInfo;
						Set16(pPersonalGardenBaseInfo, (WORD)len);
						pPersonalGardenBaseInfo += len;
					}

					len = pPersonalGardenBaseInfo - pRoomVisibleInfo;
					Set16(pRoomVisibleInfo, (WORD)len);
					pRoomVisibleInfo += len;
				}
				{ //ConsumeVipInfo
					BYTE* pConsumeVipInfo = pRoomVisibleInfo;
					Write16(pConsumeVipInfo, 0); //len

					WriteUn(pConsumeVipInfo, 0); //VipLevel
					WriteUn(pConsumeVipInfo, 0); //CharmValueOfMonth
					WriteUn(pConsumeVipInfo, 0); //SearchTreasureNums
					WriteUn(pConsumeVipInfo, 0); //GetTreasureNums

					len = pConsumeVipInfo - pRoomVisibleInfo;
					Set16(pRoomVisibleInfo, (WORD)len);
					pRoomVisibleInfo += len;
				}
				Write8(pRoomVisibleInfo, 0); //HaveBaby
				{ //LoverBabyInfo
					BYTE* pLoverBabyInfo = pRoomVisibleInfo;
					Write16(pLoverBabyInfo, 0); //len

					Write32(pLoverBabyInfo, 0); //LoverBabyID
					Write32(pLoverBabyInfo, 0); //ItemID
					Write32(pLoverBabyInfo, 0); //GrowValue
					Write32(pLoverBabyInfo, 0); //MentalValue
					Write32(pLoverBabyInfo, 0); //BabyProfileLevel
					Write32(pLoverBabyInfo, 0); //StrengthLevel
					Write32(pLoverBabyInfo, 0); //GrowLevel
					WriteString(pLoverBabyInfo, 0); //LoveBabyNickName[]
					Write16(pLoverBabyInfo, 0); //LoverBabyStat
					Write16(pLoverBabyInfo, 0); //LoverBabyEquipStat
					Write16(pLoverBabyInfo, 0); //LoverBabyTransferdStatus

					len = pLoverBabyInfo - pRoomVisibleInfo;
					Set16(pRoomVisibleInfo, (WORD)len);
					pRoomVisibleInfo += len;
				}
				{ //EmperorInfo
					BYTE* pEmperorInfo = pRoomVisibleInfo;
					Write16(pEmperorInfo, 0); //len

					Write8(pEmperorInfo, 0); //EmperorLevel
					Write32(pEmperorInfo, 0); //EmperorPoint
					Write32(pEmperorInfo, 0); //EmperorLeftDays
					Write8(pEmperorInfo, 0); //EmperorGrowRate

					len = pEmperorInfo - pRoomVisibleInfo;
					Set16(pRoomVisibleInfo, (WORD)len);
					pRoomVisibleInfo += len;
				}
				Write16(pRoomVisibleInfo, 0); //RaceCardNums
				for (size_t i = 0; i < n; i++)
				{ //RaceCardAddValueInfo
					BYTE* pRaceCardAddValueInfo = pRoomVisibleInfo;
					Write16(pRaceCardAddValueInfo, 0); //len

					Write32(pRaceCardAddValueInfo, 0); //RaceCardID
					Write32(pRaceCardAddValueInfo, 0); //AddValue

					len = pRaceCardAddValueInfo - pRoomVisibleInfo;
					Set16(pRoomVisibleInfo, (WORD)len);
					pRoomVisibleInfo += len;
				}
				{ //GansterScoreInfo
					BYTE* pGansterScoreInfo = pRoomVisibleInfo;
					Write16(pGansterScoreInfo, 0); //len

					Write32(pGansterScoreInfo, 0); //GansterSeasonID
					Write32(pGansterScoreInfo, 0); //GansterScore
					Write32(pGansterScoreInfo, 0); //PoliceScore
					Write32(pGansterScoreInfo, 0); //TotalGansterScore

					len = pGansterScoreInfo - pRoomVisibleInfo;
					Set16(pRoomVisibleInfo, (WORD)len);
					pRoomVisibleInfo += len;
				}
				Write32(pRoomVisibleInfo, 0); //OlympicId
				Write32(pRoomVisibleInfo, 0); //NPCEliminateWinTimes
				Write8(pRoomVisibleInfo, 0); //OriginTeamID
				Write8(pRoomVisibleInfo, 0); //NxNpc
				Write16(pRoomVisibleInfo, 0); //NxNpcAILevel
				{ //EquippedActiveKartInfo
					BYTE* pEquippedActiveKartInfo = pRoomVisibleInfo;
					Write16(pEquippedActiveKartInfo, 0); //len

					Write8(pEquippedActiveKartInfo, 0); //HaveActiveInfo
					Write32(pEquippedActiveKartInfo, 0); //KartID
					Write32(pEquippedActiveKartInfo, 0); //ActiveLevel

					len = pEquippedActiveKartInfo - pRoomVisibleInfo;
					Set16(pRoomVisibleInfo, (WORD)len);
					pRoomVisibleInfo += len;
				}
				Write8(pRoomVisibleInfo, 0); //SpecialActivityStatus
				Write8(pRoomVisibleInfo, 0); //AreaID
				Write8(pRoomVisibleInfo, 0); //HaveRaiseSecondBaby
				{ //SecondLoverBabyInfo
					BYTE* pSecondLoverBabyInfo = pRoomVisibleInfo;
					Write16(pSecondLoverBabyInfo, 0); //len

					Write32(pSecondLoverBabyInfo, 0); //LoverBabyID
					Write32(pSecondLoverBabyInfo, 0); //ItemID
					Write32(pSecondLoverBabyInfo, 0); //GrowValue
					Write32(pSecondLoverBabyInfo, 0); //MentalValue
					Write32(pSecondLoverBabyInfo, 0); //BabyProfileLevel
					Write32(pSecondLoverBabyInfo, 0); //StrengthLevel
					Write32(pSecondLoverBabyInfo, 0); //GrowLevel
					WriteString(pSecondLoverBabyInfo, 0); //LoveBabyNickName[]
					Write16(pSecondLoverBabyInfo, 0); //LoverBabyStat
					Write16(pSecondLoverBabyInfo, 0); //LoverBabyEquipStat
					Write16(pSecondLoverBabyInfo, 0); //LoverBabyTransferdStatus

					len = pSecondLoverBabyInfo - pRoomVisibleInfo;
					Set16(pRoomVisibleInfo, (WORD)len);
					pRoomVisibleInfo += len;
				}
				Write8(pRoomVisibleInfo, 0); //HasRankedMatchInfo
				for (size_t i = 0; i < n; i++)
				{ //RankedMatchGradeInfo
					BYTE* pRankedMatchGradeInfo = pRoomVisibleInfo;
					Write16(pRankedMatchGradeInfo, 0); //len

					Write32(pRankedMatchGradeInfo, 0); //GradeLevel
					Write32(pRankedMatchGradeInfo, 0); //ChildLevel
					Write32(pRankedMatchGradeInfo, 0); //GradeScore
					Write32(pRankedMatchGradeInfo, 0); //MaxGradeScore
					Write32(pRankedMatchGradeInfo, 0); //TotalScore

					len = pRankedMatchGradeInfo - pRoomVisibleInfo;
					Set16(pRoomVisibleInfo, (WORD)len);
					pRoomVisibleInfo += len;
				}
				Write8(pRoomVisibleInfo, 0); //HasHuanLingChangeInfo
				for (size_t i = 0; i < n; i++)
				{ //HuanLingSuitInfo
					BYTE* pHuanLingSuitInfo = pRoomVisibleInfo;
					Write16(pHuanLingSuitInfo, 0); //len

					Write32(pHuanLingSuitInfo, 0); //SuitID
					Write8(pHuanLingSuitInfo, 0); //ChangeLevel

					len = pHuanLingSuitInfo - pRoomVisibleInfo;
					Set16(pRoomVisibleInfo, (WORD)len);
					pRoomVisibleInfo += len;
				}
				Write8(pRoomVisibleInfo, 0); //EquipSealType
				Write16(pRoomVisibleInfo, 0); //Role
				Write8(pRoomVisibleInfo, 0); //SpecialActivityIDNum
				Write8(pRoomVisibleInfo, 0); //CrewID
				Write8(pRoomVisibleInfo, 0); //SpecialActivityInfoNum
				for (size_t i = 0; i < n; i++)
				{ //SpecialActivityInfo
					BYTE* pSpecialActivityInfo = pRoomVisibleInfo;
					Write16(pSpecialActivityInfo, 0); //len

					Write8(pSpecialActivityInfo, 0); //ProfessionLicenseInfoNum
					for (size_t i = 0; i < n; i++)
					{ //ProfessionLicenseInfo
						BYTE* pProfessionLicenseInfo = pSpecialActivityInfo;
						Write16(pProfessionLicenseInfo, 0); //len

						Write8(pProfessionLicenseInfo, 0); //BigLevel
						Write8(pProfessionLicenseInfo, 0); //SmallLevel

						len = pProfessionLicenseInfo - pSpecialActivityInfo;
						Set16(pSpecialActivityInfo, (WORD)len);
						pSpecialActivityInfo += len;
					}

					len = pSpecialActivityInfo - pRoomVisibleInfo;
					Set16(pRoomVisibleInfo, (WORD)len);
					pRoomVisibleInfo += len;
				}
				Write8(pRoomVisibleInfo, 0); //ParaNum
				Write32(pRoomVisibleInfo, 0); //ParaList[]
				Write8(pRoomVisibleInfo, 0); //ItemNum
				for (size_t i = 0; i < n; i++)
				{ //ItemOrder
					BYTE* pItemOrder = pRoomVisibleInfo;
					Write16(pItemOrder, 0); //len

					Write32(pItemOrder, 0); //KartID
					Write32(pItemOrder, 0); //Order
					Write32(pItemOrder, 0); //BackGroundID

					len = pItemOrder - pRoomVisibleInfo;
					Set16(pRoomVisibleInfo, (WORD)len);
					pRoomVisibleInfo += len;
				}
				Write8(pRoomVisibleInfo, 0); //TDCExcluItemNum
				Write32(pRoomVisibleInfo, 0); //TDCExclusiveItemID[]
				Write8(pRoomVisibleInfo, 0); //EquipNiChangItemNum
				for (size_t i = 0; i < n; i++)
				{ //NiChangPavilionEquipItemInfo
					BYTE* pNiChangPavilionEquipItemInfo = pRoomVisibleInfo;
					Write16(pNiChangPavilionEquipItemInfo, 0); //len

					Write32(pNiChangPavilionEquipItemInfo, 0); //ItemId
					Write16(pNiChangPavilionEquipItemInfo, 0); //CurrentEquipColorationPlanId

					len = pNiChangPavilionEquipItemInfo - pRoomVisibleInfo;
					Set16(pRoomVisibleInfo, (WORD)len);
					pRoomVisibleInfo += len;
				}
				Write8(pRoomVisibleInfo, 0); //TestKartGameType
				Write32(pRoomVisibleInfo, 0); //GameTestKartID
				Write8(pRoomVisibleInfo, 0); //HasStarsFightingInfo
				for (size_t i = 0; i < n; i++)
				{ //StarsFightingInfo
					BYTE* pStarsFightingInfo = pRoomVisibleInfo;
					Write16(pStarsFightingInfo, 0); //len

					Write32(pStarsFightingInfo, 0); //Star
					Write32(pStarsFightingInfo, 0); //StarVal
					Write32(pStarsFightingInfo, 0); //StarsFightingStarLevel

					len = pStarsFightingInfo - pRoomVisibleInfo;
					Set16(pRoomVisibleInfo, (WORD)len);
					pRoomVisibleInfo += len;
				}
				Write8(pRoomVisibleInfo, 0); //RoomBGSetting

				len = pRoomVisibleInfo - pPlayerInfo;
				Set16(pPlayerInfo, (WORD)len);
				pPlayerInfo += len;
			}
			Write8(pPlayerInfo, 0); //NPC

			len = pPlayerInfo - pBeginInfo;
			Set16(pBeginInfo, (WORD)len);
			pBeginInfo += len;
		}
		Write8(pBeginInfo, 0); //StageNum
		for (size_t i = 0; i < n; i++)
		{ //StageInfo
			BYTE* pStageInfo = pBeginInfo;
			Write16(pStageInfo, 0); //len

			Write8(pStageInfo, 0); //StageID
			Write32(pStageInfo, 0); //MapID

			len = pStageInfo - pBeginInfo;
			Set16(pBeginInfo, (WORD)len);
			pBeginInfo += len;
		}

		len = pBeginInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasMatchInfo
	for (size_t i = 0; i < n; i++)
	{ //MatchInfo
		BYTE* pMatchInfo = p;
		Write16(pMatchInfo, 0); //len

		Write8(pMatchInfo, 0); //CurRound
		Write32(pMatchInfo, 0); //LeftTime
		Write8(pMatchInfo, 0); //HasDesperateEscapeInfo
		for (size_t i = 0; i < n; i++)
		{ //DesperateEscapeInfo
			BYTE* pDesperateEscapeInfo = pMatchInfo;
			Write16(pDesperateEscapeInfo, 0); //len

			Write8(pDesperateEscapeInfo, 0); //PlayerNum
			for (size_t i = 0; i < n; i++)
			{ //PlayerStat
				BYTE* pPlayerStat = pDesperateEscapeInfo;
				Write16(pPlayerStat, 0); //len

				Write32(pPlayerStat, 0); //PlayerIdx
				Write32(pPlayerStat, 0); //Uin
				Write8(pPlayerStat, 0); //Status
				Write8(pPlayerStat, 0); //IsMyTeamMate
				Write8(pPlayerStat, 0); //Rank
				Write8(pPlayerStat, 0); //TotalRank
				Write32(pPlayerStat, 0); //BanMapID
				Write32(pPlayerStat, 0); //SelectMapID
				Write8(pPlayerStat, 0); //BuffNum
				for (size_t i = 0; i < n; i++)
				{ //BuffIDListInfo
					BYTE* pBuffIDListInfo = pPlayerStat;
					Write16(pBuffIDListInfo, 0); //len

					Write32(pBuffIDListInfo, 0); //BuffID
					Write8(pBuffIDListInfo, 0); //Lev

					len = pBuffIDListInfo - pPlayerStat;
					Set16(pPlayerStat, (WORD)len);
					pPlayerStat += len;
				}
				Write8(pPlayerStat, 0); //HasSelectOrLevUpBuff
				Write8(pPlayerStat, 0); //ChampionCnt

				len = pPlayerStat - pDesperateEscapeInfo;
				Set16(pDesperateEscapeInfo, (WORD)len);
				pDesperateEscapeInfo += len;
			}
			Write8(pDesperateEscapeInfo, 0); //AlivePlayerNum
			Write16(pDesperateEscapeInfo, 0); //FireCrackerNum

			len = pDesperateEscapeInfo - pMatchInfo;
			Set16(pMatchInfo, (WORD)len);
			pMatchInfo += len;
		}
		Write8(pMatchInfo, 0); //HasShortDistanceInfo
		for (size_t i = 0; i < n; i++)
		{ //ShortDistanceInfo
			BYTE* pShortDistanceInfo = pMatchInfo;
			Write16(pShortDistanceInfo, 0); //len

			Write8(pShortDistanceInfo, 0); //PlayerNum
			for (size_t i = 0; i < n; i++)
			{ //PlayerStat
				BYTE* pPlayerStat = pShortDistanceInfo;
				Write16(pPlayerStat, 0); //len

				Write32(pPlayerStat, 0); //Uin
				Write8(pPlayerStat, 0); //Status
				Write8(pPlayerStat, 0); //IsMyTeamMate
				Write8(pPlayerStat, 0); //Rank
				Write8(pPlayerStat, 0); //TotalRank
				Write8(pPlayerStat, 0); //GroupId
				Write8(pPlayerStat, 0); //IsNpc
				Write8(pPlayerStat, 0); //OutRound

				len = pPlayerStat - pShortDistanceInfo;
				Set16(pShortDistanceInfo, (WORD)len);
				pShortDistanceInfo += len;
			}
			WriteUn(pShortDistanceInfo, 0); //uszMapNum
			for (size_t i = 0; i < n; i++)
			{ //ShuttleMapList
				BYTE* pShuttleMapList = pShortDistanceInfo;
				Write16(pShuttleMapList, 0); //len

				Write32(pShuttleMapList, 0); //MapID
				Write16(pShuttleMapList, 0); //BeginIdx
				Write16(pShuttleMapList, 0); //EndIdx
				Write8(pShuttleMapList, 0); //Reverse
				Write16(pShuttleMapList, 0); //BeginCheckPointIdx

				len = pShuttleMapList - pShortDistanceInfo;
				Set16(pShortDistanceInfo, (WORD)len);
				pShortDistanceInfo += len;
			}

			len = pShortDistanceInfo - pMatchInfo;
			Set16(pMatchInfo, (WORD)len);
			pMatchInfo += len;
		}
		Write8(pMatchInfo, 0); //HasRallyEliminationInfo
		for (size_t i = 0; i < n; i++)
		{ //RallyEliminationInfo
			BYTE* pRallyEliminationInfo = pMatchInfo;
			Write16(pRallyEliminationInfo, 0); //len

			Write8(pRallyEliminationInfo, 0); //FinishedPlayerNum
			Write8(pRallyEliminationInfo, 0); //Status
			Write8(pRallyEliminationInfo, 0); //TeamID

			len = pRallyEliminationInfo - pMatchInfo;
			Set16(pMatchInfo, (WORD)len);
			pMatchInfo += len;
		}
		Write8(pMatchInfo, 0); //IsNextRound
		Write8(pMatchInfo, 0); //AfterGame
		Write8(pMatchInfo, 0); //HasTangDouCheInfo
		for (size_t i = 0; i < n; i++)
		{ //TangDouCheInfo
			BYTE* pTangDouCheInfo = pMatchInfo;
			Write16(pTangDouCheInfo, 0); //len

			Write8(pTangDouCheInfo, 0); //PlayerNum
			for (size_t i = 0; i < n; i++)
			{ //PlayerStat
				BYTE* pPlayerStat = pTangDouCheInfo;
				Write16(pPlayerStat, 0); //len

				Write32(pPlayerStat, 0); //PlayerIdx
				Write32(pPlayerStat, 0); //Uin
				Write8(pPlayerStat, 0); //Status
				Write8(pPlayerStat, 0); //IsMyTeamMate
				Write8(pPlayerStat, 0); //Rank
				Write8(pPlayerStat, 0); //TotalRank

				len = pPlayerStat - pTangDouCheInfo;
				Set16(pTangDouCheInfo, (WORD)len);
				pTangDouCheInfo += len;
			}
			Write8(pTangDouCheInfo, 0); //HasPointCfg
			for (size_t i = 0; i < n; i++)
			{ //PointCfg
				BYTE* pPointCfg = pTangDouCheInfo;
				Write16(pPointCfg, 0); //len

				Write16(pPointCfg, 0); //PointID
				Write32(pPointCfg, 0); //MapID
				Write8(pPointCfg, 0); //PerformanceNum
				Write8(pPointCfg, 0); //PointType
				Write16(pPointCfg, 0); //MaxTime
				Write8(pPointCfg, 0); //PreFinishPercentage
				Write8(pPointCfg, 0); //AllowDeathTime
				Write32(pPointCfg, 0); //PropPoolID
				Write32(pPointCfg, 0); //StartRowPlayerNum

				len = pPointCfg - pTangDouCheInfo;
				Set16(pTangDouCheInfo, (WORD)len);
				pTangDouCheInfo += len;
			}
			Write8(pTangDouCheInfo, 0); //AlivePlayerNum
			Write8(pTangDouCheInfo, 0); //TotalRound

			len = pTangDouCheInfo - pMatchInfo;
			Set16(pMatchInfo, (WORD)len);
			pMatchInfo += len;
		}

		len = pMatchInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasEndInfo
	for (size_t i = 0; i < n; i++)
	{ //EndInfo
		BYTE* pEndInfo = p;
		Write16(pEndInfo, 0); //len

		Write8(pEndInfo, 0); //Type
		Write32(pEndInfo, 0); //Rank
		Write32(pEndInfo, 0); //AvgRank
		Write32(pEndInfo, 0); //ChampionCnt
		{ //Award
			BYTE* pAward = pEndInfo;
			Write16(pAward, 0); //len

			Write32(pAward, 0); //Exp
			Write32(pAward, 0); //Money
			Write32(pAward, 0); //SuperMoney
			Write16(pAward, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAward;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAward;
				Set16(pAward, (WORD)len);
				pAward += len;
			}
			Write32(pAward, 0); //Coupons
			Write32(pAward, 0); //GuildPoint
			Write32(pAward, 0); //LuckMoney
			Write8(pAward, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAward;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAward;
				Set16(pAward, (WORD)len);
				pAward += len;
			}
			Write32(pAward, 0); //SpeedCoin

			len = pAward - pEndInfo;
			Set16(pEndInfo, (WORD)len);
			pEndInfo += len;
		}
		Write32(pEndInfo, 0); //AwardID
		Write16(pEndInfo, 0); //FireCrackerNum
		Write16(pEndInfo, 0); //SuperMoneyNum
		Write8(pEndInfo, 0); //HasOtherIntValues
		Write32(pEndInfo, 0); //OtherIntValues[]
		Write8(pEndInfo, 0); //HasRankMatchInfoBeforeGameBegin
		for (size_t i = 0; i < n; i++)
		{ //RankMatchInfoBeforeEscapeClauseGameBegin
			BYTE* pRankMatchInfoBeforeEscapeClauseGameBegin = pEndInfo;
			Write16(pRankMatchInfoBeforeEscapeClauseGameBegin, 0); //len

			{ //RankedMatchGradeInfo
				BYTE* pRankedMatchGradeInfo = pRankMatchInfoBeforeEscapeClauseGameBegin;
				Write16(pRankedMatchGradeInfo, 0); //len

				Write32(pRankedMatchGradeInfo, 0); //GradeLevel
				Write32(pRankedMatchGradeInfo, 0); //ChildLevel
				Write32(pRankedMatchGradeInfo, 0); //GradeScore
				Write32(pRankedMatchGradeInfo, 0); //MaxGradeScore
				Write32(pRankedMatchGradeInfo, 0); //TotalScore

				len = pRankedMatchGradeInfo - pRankMatchInfoBeforeEscapeClauseGameBegin;
				Set16(pRankMatchInfoBeforeEscapeClauseGameBegin, (WORD)len);
				pRankMatchInfoBeforeEscapeClauseGameBegin += len;
			}
			{ //RankedMatchPromotionInfo
				BYTE* pRankedMatchPromotionInfo = pRankMatchInfoBeforeEscapeClauseGameBegin;
				Write16(pRankedMatchPromotionInfo, 0); //len

				Write8(pRankedMatchPromotionInfo, 0); //PromotionMatch
				Write32(pRankedMatchPromotionInfo, 0); //PromotionRoundNums
				Write32(pRankedMatchPromotionInfo, 0); //PromotionSuccessRoundNums
				Write32(pRankedMatchPromotionInfo, 0); //PromotionAlreadySuccessRoundNums
				Write32(pRankedMatchPromotionInfo, 0); //PromotionRecordTag
				Write32(pRankedMatchPromotionInfo, 0); //CurrentPromotionRoundNums
				Write32(pRankedMatchPromotionInfo, 0); //PromoFailedMinusScore
				Write32(pRankedMatchPromotionInfo, 0); //PromoSuccAddScore
				Write8(pRankedMatchPromotionInfo, 0); //PromoDirectly
				Write8(pRankedMatchPromotionInfo, 0); //GradeNoNeedPromo
				Write8(pRankedMatchPromotionInfo, 0); //RankedMemoryNoNeedPromo
				Write8(pRankedMatchPromotionInfo, 0); //PromotionExtraScore
				Write8(pRankedMatchPromotionInfo, 0); //PromtRaceFailedDefendFlag

				len = pRankedMatchPromotionInfo - pRankMatchInfoBeforeEscapeClauseGameBegin;
				Set16(pRankMatchInfoBeforeEscapeClauseGameBegin, (WORD)len);
				pRankMatchInfoBeforeEscapeClauseGameBegin += len;
			}

			len = pRankMatchInfoBeforeEscapeClauseGameBegin - pEndInfo;
			Set16(pEndInfo, (WORD)len);
			pEndInfo += len;
		}
		Write8(pEndInfo, 0); //AttackUimNum
		Write32(pEndInfo, 0); //AttackUin[]
		Write8(pEndInfo, 0); //AttachNum
		Write32(pEndInfo, 0); //AttackNum[]
		Write8(pEndInfo, 0); //BeAttackUimNum
		Write32(pEndInfo, 0); //BeAttackUin[]
		Write8(pEndInfo, 0); //BeAttachNum
		Write32(pEndInfo, 0); //BeAttackNum[]
		Write32(pEndInfo, 0); //TDCDaoMeiDanUin
		Write32(pEndInfo, 0); //TDCMuHouHeiShouUin
		Write32(pEndInfo, 0); //TDCKouTuLianHuaFlag
		Write8(pEndInfo, 0); //RacerNum
		Write32(pEndInfo, 0); //RacerRankUin[]
		Write8(pEndInfo, 0); //HasYuLeJiaNianHuaComputeData
		for (size_t i = 0; i < n; i++)
		{ //YuLeJiaNianHuaComputeData
			BYTE* pYuLeJiaNianHuaComputeData = pEndInfo;
			Write16(pYuLeJiaNianHuaComputeData, 0); //len

			Write32(pYuLeJiaNianHuaComputeData, 0); //AwardScore
			Write8(pYuLeJiaNianHuaComputeData, 0); //Recommend
			Write8(pYuLeJiaNianHuaComputeData, 0); //ScoreDouble
			Write8(pYuLeJiaNianHuaComputeData, 0); //GuaJi

			len = pYuLeJiaNianHuaComputeData - pEndInfo;
			Set16(pEndInfo, (WORD)len);
			pEndInfo += len;
		}

		len = pEndInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 1728, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyGameBeginForRecord(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //NormalLoadTime
	Write32(p, 0); //MapID
	WriteString(p, 0); //MapHash[]
	WriteUn(p, 0); //GameID
	WriteUn(p, 0); //Seed
	Write8(p, 0); //CurrentPlayers
	Write16(p, 0); //RaceTrackOrders[]
	Write16(p, 0); //TotalMapRound
	WriteUn(p, 0); //PropUpdateInterval
	Write32(p, 0); //Record
	Write8(p, 0); //NianShouTypeNum
	for (size_t i = 0; i < n; i++)
	{ //NianShouAwardInfo
		BYTE* pNianShouAwardInfo = p;
		Write16(pNianShouAwardInfo, 0); //len

		Write8(pNianShouAwardInfo, 0); //AwardInGameType
		Write32(pNianShouAwardInfo, 0); //ActIDForClient
		Write8(pNianShouAwardInfo, 0); //PointArrayIdx
		Write8(pNianShouAwardInfo, 0); //CurrAwardNum
		Write8(pNianShouAwardInfo, 0); //AwardPos[]

		len = pNianShouAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //SyncCarNum
	for (size_t i = 0; i < n; i++)
	{ //SyncCar
		BYTE* pSyncCar = p;
		Write16(pSyncCar, 0); //len

		WriteUn(pSyncCar, 0); //PlayerUin
		Write16(pSyncCar, 0); //CurCarID
		Write8(pSyncCar, 0); //HasStoneInfo
		for (size_t i = 0; i < n; i++)
		{ //STKartStoneGrooveInfo
			BYTE* pSTKartStoneGrooveInfo = pSyncCar;
			Write16(pSTKartStoneGrooveInfo, 0); //len

			Write32(pSTKartStoneGrooveInfo, 0); //KartID
			Write32(pSTKartStoneGrooveInfo, 0); //StoneGrooveNum
			for (size_t i = 0; i < n; i++)
			{ //StoneGrooveInfo
				BYTE* pStoneGrooveInfo = pSTKartStoneGrooveInfo;
				Write16(pStoneGrooveInfo, 0); //len

				Write32(pStoneGrooveInfo, 0); //StoneUseOccaType
				Write32(pStoneGrooveInfo, 0); //SkillStoneID

				len = pStoneGrooveInfo - pSTKartStoneGrooveInfo;
				Set16(pSTKartStoneGrooveInfo, (WORD)len);
				pSTKartStoneGrooveInfo += len;
			}

			len = pSTKartStoneGrooveInfo - pSyncCar;
			Set16(pSyncCar, (WORD)len);
			pSyncCar += len;
		}

		len = pSyncCar - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReportDataFlag
	Write8(p, 0); //CheckDataNum
	for (size_t i = 0; i < n; i++)
	{ //MapCheckDiv
		BYTE* pMapCheckDiv = p;
		Write16(pMapCheckDiv, 0); //len

		Write16(pMapCheckDiv, 0); //BeginIdx
		Write16(pMapCheckDiv, 0); //EndIdx

		len = pMapCheckDiv - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //P2PMode
	Write8(p, 0); //TcpFrequence
	Write8(p, 0); //MultiInfoLen
	Write8(p, 0); //FeedBackEnabled
	Write8(p, 0); //SpeedSectionNum
	Write16(p, 0); //SpeedSectionLowerBound[]
	Write8(p, 0); //NormalSpeedSectionNum
	Write16(p, 0); //NormalSpeedSectionLowerBound[]
	Write8(p, 0); //MemCheckInfoNum
	for (size_t i = 0; i < n; i++)
	{ //MemCheckInfo
		BYTE* pMemCheckInfo = p;
		Write16(pMemCheckInfo, 0); //len

		Write8(pMemCheckInfo, 0); //MemIdxNum
		Write32(pMemCheckInfo, 0); //MemOffset[]
		Write8(pMemCheckInfo, 0); //DataType
		WriteU(pMemCheckInfo, 0); //Para

		len = pMemCheckInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ExtraInfoInterval
	Write16(p, 0); //OffsetThreshold
	Write32(p, 0); //SpeedRatioThreshold1
	Write32(p, 0); //SpeedRatioThreshold2
	Write32(p, 0); //HideTaskId
	Write8(p, 0); //HideTaskType
	Write32(p, 0); //HideTaskParam1
	Write8(p, 0); //ForceReportCPNum
	Write16(p, 0); //ForceReportCP[]
	Write8(p, 0); //CliReserveFlag
	Write8(p, 0); //EnableAntiDriftCheat
	for (size_t i = 0; i < n; i++)
	{ //AntiDriftCheatPara
		BYTE* pAntiDriftCheatPara = p;
		Write16(pAntiDriftCheatPara, 0); //len

		WriteU(pAntiDriftCheatPara, 0); //MaxDriftHistoryTime
		WriteU(pAntiDriftCheatPara, 0); //MinTimeInterval
		WriteU(pAntiDriftCheatPara, 0); //MaxTimeInterval
		Write32(pAntiDriftCheatPara, 0); //NormalThreshold
		Write32(pAntiDriftCheatPara, 0); //JetThreshold
		WriteU(pAntiDriftCheatPara, 0); //JetInterval
		WriteU(pAntiDriftCheatPara, 0); //OneSideSlidingInterval

		len = pAntiDriftCheatPara - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasCrashModePara
	for (size_t i = 0; i < n; i++)
	{ //CrashModePara
		BYTE* pCrashModePara = p;
		Write16(pCrashModePara, 0); //len

		Write8(pCrashModePara, 0); //SponsorSkillNum
		for (size_t i = 0; i < n; i++)
		{ //SponsorSkill
			BYTE* pSponsorSkill = pCrashModePara;
			Write16(pSponsorSkill, 0); //len

			Write8(pSponsorSkill, 0); //SkillID
			Write32(pSponsorSkill, 0); //Para1

			len = pSponsorSkill - pCrashModePara;
			Set16(pCrashModePara, (WORD)len);
			pCrashModePara += len;
		}
		Write8(pCrashModePara, 0); //InitEggNum
		Write8(pCrashModePara, 0); //EggRefreshInterval
		Write8(pCrashModePara, 0); //EggRefreshNum
		Write8(pCrashModePara, 0); //InitN2ONum
		Write8(pCrashModePara, 0); //EggSourceIncNum
		Write32(pCrashModePara, 0); //RandSeed
		Write8(pCrashModePara, 0); //PropPointRatio
		Write8(pCrashModePara, 0); //EggPropRatio
		Write8(pCrashModePara, 0); //AddN2ONumOnEggLost

		len = pCrashModePara - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //FizzStarTaskId
	Write8(p, 0); //FizzStarTaskType
	Write32(p, 0); //FizzStarTaskParam1
	Write32(p, 0); //LDMRecordID
	Write32(p, 0); //GameSeq
	Write8(p, 0); //PlayerNums
	for (size_t i = 0; i < n; i++)
	{ //GameBeginPlayerInfo
		BYTE* pGameBeginPlayerInfo = p;
		Write16(pGameBeginPlayerInfo, 0); //len

		Write32(pGameBeginPlayerInfo, 0); //Uin
		Write32(pGameBeginPlayerInfo, 0); //ChumCircleID
		Write8(pGameBeginPlayerInfo, 0); //SkillNums
		for (size_t i = 0; i < n; i++)
		{ //ChumCircleSkillInfo
			BYTE* pChumCircleSkillInfo = pGameBeginPlayerInfo;
			Write16(pChumCircleSkillInfo, 0); //len

			Write32(pChumCircleSkillInfo, 0); //SkillID
			Write32(pChumCircleSkillInfo, 0); //SkillLv

			len = pChumCircleSkillInfo - pGameBeginPlayerInfo;
			Set16(pGameBeginPlayerInfo, (WORD)len);
			pGameBeginPlayerInfo += len;
		}
		Write32(pGameBeginPlayerInfo, 0); //WorldEscapeTaskID
		{ //ProfessionLicenseInfo
			BYTE* pProfessionLicenseInfo = pGameBeginPlayerInfo;
			Write16(pProfessionLicenseInfo, 0); //len

			Write8(pProfessionLicenseInfo, 0); //BigLevel
			Write8(pProfessionLicenseInfo, 0); //SmallLevel

			len = pProfessionLicenseInfo - pGameBeginPlayerInfo;
			Set16(pGameBeginPlayerInfo, (WORD)len);
			pGameBeginPlayerInfo += len;
		}
		Write8(pGameBeginPlayerInfo, 0); //ParaNum
		for (size_t i = 0; i < n; i++)
		{ //EffectGameBuffInfo
			BYTE* pEffectGameBuffInfo = pGameBeginPlayerInfo;
			Write16(pEffectGameBuffInfo, 0); //len

			Write16(pEffectGameBuffInfo, 0); //BuffID
			Write8(pEffectGameBuffInfo, 0); //FeatureID
			Write8(pEffectGameBuffInfo, 0); //BuffLevel
			Write8(pEffectGameBuffInfo, 0); //IsIcon

			len = pEffectGameBuffInfo - pGameBeginPlayerInfo;
			Set16(pGameBeginPlayerInfo, (WORD)len);
			pGameBeginPlayerInfo += len;
		}
		Write32(pGameBeginPlayerInfo, 0); //StarsFightingStar
		Write8(pGameBeginPlayerInfo, 0); //ParaNum
		Write32(pGameBeginPlayerInfo, 0); //ParaList[]

		len = pGameBeginPlayerInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //PlayeCheerNums
	Write(p, 0); //Cheers[]
	WriteUn(p, 0); //uszMapNum
	for (size_t i = 0; i < n; i++)
	{ //ShuttleMapList
		BYTE* pShuttleMapList = p;
		Write16(pShuttleMapList, 0); //len

		Write32(pShuttleMapList, 0); //MapID
		Write16(pShuttleMapList, 0); //BeginIdx
		Write16(pShuttleMapList, 0); //EndIdx
		Write8(pShuttleMapList, 0); //Reverse
		Write16(pShuttleMapList, 0); //BeginCheckPointIdx

		len = pShuttleMapList - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //SpecialMapId
	Write8(p, 0); //NPCNum
	for (size_t i = 0; i < n; i++)
	{ //NPCInfo
		BYTE* pNPCInfo = p;
		Write16(pNPCInfo, 0); //len

		Write32(pNPCInfo, 0); //NpcID
		WriteString(pNPCInfo, 0); //NPCName[]
		WriteString(pNPCInfo, 0); //GuildName[]
		{ //NpcItemInfo
			BYTE* pNpcItemInfo = pNPCInfo;
			Write16(pNpcItemInfo, 0); //len

			Write32(pNpcItemInfo, 0); //RoleID
			Write32(pNpcItemInfo, 0); //HairID
			Write32(pNpcItemInfo, 0); //FaceID
			Write32(pNpcItemInfo, 0); //GlassID
			Write32(pNpcItemInfo, 0); //CoatID
			Write32(pNpcItemInfo, 0); //GloveID
			Write32(pNpcItemInfo, 0); //TrousersID
			Write32(pNpcItemInfo, 0); //PersonarID
			Write32(pNpcItemInfo, 0); //TattooID
			Write32(pNpcItemInfo, 0); //WingID
			Write32(pNpcItemInfo, 0); //DecoratorID
			Write32(pNpcItemInfo, 0); //KartID
			Write32(pNpcItemInfo, 0); //ColorID
			Write32(pNpcItemInfo, 0); //TrackID
			Write32(pNpcItemInfo, 0); //EffectID
			Write32(pNpcItemInfo, 0); //BrandID
			Write32(pNpcItemInfo, 0); //TailID

			len = pNpcItemInfo - pNPCInfo;
			Set16(pNPCInfo, (WORD)len);
			pNPCInfo += len;
		}
		Write32(pNPCInfo, 0); //GpSkillPeriod
		Write32(pNPCInfo, 0); //BaseValue
		{ //DefaultSpeedPara
			BYTE* pDefaultSpeedPara = pNPCInfo;
			Write16(pDefaultSpeedPara, 0); //len

			Write32(pDefaultSpeedPara, 0); //MaxSpeed
			Write32(pDefaultSpeedPara, 0); //MinSpeed
			Write32(pDefaultSpeedPara, 0); //MaxPlusForce
			Write32(pDefaultSpeedPara, 0); //MinPlusForce
			Write32(pDefaultSpeedPara, 0); //MaxTurnSpeed
			Write32(pDefaultSpeedPara, 0); //MinTurnSpeed
			Write32(pDefaultSpeedPara, 0); //MaxDist
			Write32(pDefaultSpeedPara, 0); //MinDist

			len = pDefaultSpeedPara - pNPCInfo;
			Set16(pNPCInfo, (WORD)len);
			pNPCInfo += len;
		}
		Write8(pNPCInfo, 0); //NormalSpeedNum
		for (size_t i = 0; i < n; i++)
		{ //NormalSpeedPara
			BYTE* pNormalSpeedPara = pNPCInfo;
			Write16(pNormalSpeedPara, 0); //len

			Write32(pNormalSpeedPara, 0); //MaxSpeed
			Write32(pNormalSpeedPara, 0); //MinSpeed
			Write32(pNormalSpeedPara, 0); //MaxPlusForce
			Write32(pNormalSpeedPara, 0); //MinPlusForce
			Write32(pNormalSpeedPara, 0); //MaxTurnSpeed
			Write32(pNormalSpeedPara, 0); //MinTurnSpeed
			Write32(pNormalSpeedPara, 0); //MaxDist
			Write32(pNormalSpeedPara, 0); //MinDist

			len = pNormalSpeedPara - pNPCInfo;
			Set16(pNPCInfo, (WORD)len);
			pNPCInfo += len;
		}
		Write8(pNPCInfo, 0); //GpNum
		for (size_t i = 0; i < n; i++)
		{ //GpPara
			BYTE* pGpPara = pNPCInfo;
			Write16(pGpPara, 0); //len

			Write32(pGpPara, 0); //GpID
			Write32(pGpPara, 0); //Probability
			Write32(pGpPara, 0); //MaxDist
			Write32(pGpPara, 0); //MinDist

			len = pGpPara - pNPCInfo;
			Set16(pNPCInfo, (WORD)len);
			pNPCInfo += len;
		}
		Write16(pNPCInfo, 0); //NPCAILevel
		Write16(pNPCInfo, 0); //TeamID

		len = pNPCInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //MapNum
	for (size_t i = 0; i < n; i++)
	{ //MapInfo
		BYTE* pMapInfo = p;
		Write16(pMapInfo, 0); //len

		Write32(pMapInfo, 0); //MapID
		Write8(pMapInfo, 0); //ReportDataFlag
		Write8(pMapInfo, 0); //CheckDataNum
		for (size_t i = 0; i < n; i++)
		{ //MapCheckDiv
			BYTE* pMapCheckDiv = pMapInfo;
			Write16(pMapCheckDiv, 0); //len

			Write16(pMapCheckDiv, 0); //BeginIdx
			Write16(pMapCheckDiv, 0); //EndIdx

			len = pMapCheckDiv - pMapInfo;
			Set16(pMapInfo, (WORD)len);
			pMapInfo += len;
		}
		Write16(pMapInfo, 0); //TotalMapRound

		len = pMapInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //NPCTrackOrders[]
	Write8(p, 0); //PlayerNum
	for (size_t i = 0; i < n; i++)
	{ //AvatarChangeInfo
		BYTE* pAvatarChangeInfo = p;
		Write16(pAvatarChangeInfo, 0); //len

		Write32(pAvatarChangeInfo, 0); //PlayerUin
		Write32(pAvatarChangeInfo, 0); //HairID
		Write32(pAvatarChangeInfo, 0); //CoatID
		Write32(pAvatarChangeInfo, 0); //TrousersID
		Write32(pAvatarChangeInfo, 0); //SuitID
		Write32(pAvatarChangeInfo, 0); //KartID
		Write8(pAvatarChangeInfo, 0); //HasItemInfo
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAvatarChangeInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //RoleID
			Write32(pItemInfo, 0); //HairID
			Write32(pItemInfo, 0); //FaceID
			Write32(pItemInfo, 0); //GlassID
			Write32(pItemInfo, 0); //CoatID
			Write32(pItemInfo, 0); //GloveID
			Write32(pItemInfo, 0); //TrousersID
			Write32(pItemInfo, 0); //PersonarID
			Write32(pItemInfo, 0); //TattooID
			Write32(pItemInfo, 0); //WingID
			Write32(pItemInfo, 0); //DecoratorID
			Write32(pItemInfo, 0); //KartID
			Write32(pItemInfo, 0); //ColorID
			Write32(pItemInfo, 0); //TrackID
			Write32(pItemInfo, 0); //EffectID
			Write32(pItemInfo, 0); //BrandID
			Write32(pItemInfo, 0); //TailID

			len = pItemInfo - pAvatarChangeInfo;
			Set16(pAvatarChangeInfo, (WORD)len);
			pAvatarChangeInfo += len;
		}

		len = pAvatarChangeInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasTowerInfo
	for (size_t i = 0; i < n; i++)
	{ //TowerLevelTask
		BYTE* pTowerLevelTask = p;
		Write16(pTowerLevelTask, 0); //len

		Write32(pTowerLevelTask, 0); //TaskID
		Write8(pTowerLevelTask, 0); //LevelDifficulty
		Write32(pTowerLevelTask, 0); //SpecialFlag
		for (size_t i = 0; i < n; i++)
		{ //JudgeStarCondition
			BYTE* pJudgeStarCondition = pTowerLevelTask;
			Write16(pJudgeStarCondition, 0); //len

			Write32(pJudgeStarCondition, 0); //Type
			Write32(pJudgeStarCondition, 0); //ConditionNum

			len = pJudgeStarCondition - pTowerLevelTask;
			Set16(pTowerLevelTask, (WORD)len);
			pTowerLevelTask += len;
		}
		Write32(pTowerLevelTask, 0); //TrackElementNum
		for (size_t i = 0; i < n; i++)
		{ //TrackElement
			BYTE* pTrackElement = pTowerLevelTask;
			Write16(pTrackElement, 0); //len

			Write8(pTrackElement, 0); //Type
			Write8(pTrackElement, 0); //CheckpointNum
			Write8(pTrackElement, 0); //Checkpoint[]
			Write32(pTrackElement, 0); //CarID
			Write16(pTrackElement, 0); //ReverseTimeLimit
			Write8(pTrackElement, 0); //CoinFrequence
			Write8(pTrackElement, 0); //CoinNumLimit
			Write8(pTrackElement, 0); //ShadowID

			len = pTrackElement - pTowerLevelTask;
			Set16(pTowerLevelTask, (WORD)len);
			pTowerLevelTask += len;
		}

		len = pTowerLevelTask - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasWeRelayGameBeginInfo
	for (size_t i = 0; i < n; i++)
	{ //WeRelayGameBeginInfo
		BYTE* pWeRelayGameBeginInfo = p;
		Write16(pWeRelayGameBeginInfo, 0); //len

		Write32(pWeRelayGameBeginInfo, 0); //PlayerNum
		for (size_t i = 0; i < n; i++)
		{ //WeRelayGameBeginPlayerInfo
			BYTE* pWeRelayGameBeginPlayerInfo = pWeRelayGameBeginInfo;
			Write16(pWeRelayGameBeginPlayerInfo, 0); //len

			Write32(pWeRelayGameBeginPlayerInfo, 0); //Uin
			Write32(pWeRelayGameBeginPlayerInfo, 0); //CarID
			Write32(pWeRelayGameBeginPlayerInfo, 0); //SuperN2O
			Write32(pWeRelayGameBeginPlayerInfo, 0); //Score

			len = pWeRelayGameBeginPlayerInfo - pWeRelayGameBeginInfo;
			Set16(pWeRelayGameBeginInfo, (WORD)len);
			pWeRelayGameBeginInfo += len;
		}
		Write32(pWeRelayGameBeginInfo, 0); //MapID
		Write16(pWeRelayGameBeginInfo, 0); //TotalMapRound
		Write8(pWeRelayGameBeginInfo, 0); //ReportDataFlag
		Write8(pWeRelayGameBeginInfo, 0); //CheckDataNum
		for (size_t i = 0; i < n; i++)
		{ //MapCheckDiv
			BYTE* pMapCheckDiv = pWeRelayGameBeginInfo;
			Write16(pMapCheckDiv, 0); //len

			Write16(pMapCheckDiv, 0); //BeginIdx
			Write16(pMapCheckDiv, 0); //EndIdx

			len = pMapCheckDiv - pWeRelayGameBeginInfo;
			Set16(pWeRelayGameBeginInfo, (WORD)len);
			pWeRelayGameBeginInfo += len;
		}
		Write32(pWeRelayGameBeginInfo, 0); //SuperN2OCoolDownTime
		Write32(pWeRelayGameBeginInfo, 0); //Dis2No1ToFinishRace

		len = pWeRelayGameBeginInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ChangeCar
	Write32(p, 0); //GameSeqIDHigh
	Write32(p, 0); //GameSeqIDLow
	Write32(p, 0); //KubiBigCoinReplaceItem
	Write32(p, 0); //TimerChallengeJumpLevel
	Write8(p, 0); //ShadowRunDelay
	Write16(p, 0); //ShadowCatchUpContinuesTime
	Write8(p, 0); //ArrestPlayerNums
	for (size_t i = 0; i < n; i++)
	{ //ArrestRoleInfo
		BYTE* pArrestRoleInfo = p;
		Write16(pArrestRoleInfo, 0); //len

		Write32(pArrestRoleInfo, 0); //Uin
		Write8(pArrestRoleInfo, 0); //TeamID

		len = pArrestRoleInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //MonitorCheckPointBegin
	Write16(p, 0); //MonitorCheckPointEnd
	Write8(p, 0); //MonitorLapCnt
	Write8(p, 0); //GameType
	Write8(p, 0); //PointID
	Write16(p, 0); //BaseMode
	Write16(p, 0); //SubMode
	Write8(p, 0); //GameType
	Write16(p, 0); //ReportPosSpan

	len = p - buf;
	SendToClient(Client, 1735, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifySuperRaceInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write8(p, 0); //InfoType
	Write8(p, 0); //PropNum
	Write16(p, 0); //PropType[]
	Write8(p, 0); //PlayerNum
	for (size_t i = 0; i < n; i++)
	{ //PlayerRaceInfo
		BYTE* pPlayerRaceInfo = p;
		Write16(pPlayerRaceInfo, 0); //len

		Write32(pPlayerRaceInfo, 0); //Uin
		Write32(pPlayerRaceInfo, 0); //Status
		Write16(pPlayerRaceInfo, 0); //MaxSpeedInc
		Write16(pPlayerRaceInfo, 0); //PowerInc
		Write8(pPlayerRaceInfo, 0); //GasProtect

		len = pPlayerRaceInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //DoorPointNum
	for (size_t i = 0; i < n; i++)
	{ //FoxSpiritDoorPointInfo
		BYTE* pFoxSpiritDoorPointInfo = p;
		Write16(pFoxSpiritDoorPointInfo, 0); //len

		Write32(pFoxSpiritDoorPointInfo, 0); //PointID
		Write32(pFoxSpiritDoorPointInfo, 0); //PointArray[]
		Write32(pFoxSpiritDoorPointInfo, 0); //ZOffset

		len = pFoxSpiritDoorPointInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //DoorPointOffsetNum
	for (size_t i = 0; i < n; i++)
	{ //MapDoorPointOffsetInfo
		BYTE* pMapDoorPointOffsetInfo = p;
		Write16(pMapDoorPointOffsetInfo, 0); //len

		Write32(pMapDoorPointOffsetInfo, 0); //PointID
		Write32(pMapDoorPointOffsetInfo, 0); //PointArray[]
		Write32(pMapDoorPointOffsetInfo, 0); //ZOffset

		len = pMapDoorPointOffsetInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 25140, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestSuperRaceOperate(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR OpType = Read8(p);

}

void ResponseSuperRaceOperate(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write8(p, 0); //OpType
	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetSummerActShowInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR ActType = Read8(p);

}

void ResponseGetSummerActShowInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write8(p, 0); //ActType
	Write16(p, 0); //AwardNums
	for (size_t i = 0; i < n; i++)
	{ //SummerActAwardInfos
		BYTE* pSummerActAwardInfos = p;
		Write16(pSummerActAwardInfos, 0); //len

		Write8(pSummerActAwardInfos, 0); //MapIndex
		Write16(pSummerActAwardInfos, 0); //AwardType
		Write16(pSummerActAwardInfos, 0); //AwardIndex
		Write16(pSummerActAwardInfos, 0); //EventAwardID
		{ //AwardItemInfo
			BYTE* pAwardItemInfo = pSummerActAwardInfos;
			Write16(pAwardItemInfo, 0); //len

			Write32(pAwardItemInfo, 0); //Exp
			Write32(pAwardItemInfo, 0); //Money
			Write32(pAwardItemInfo, 0); //SuperMoney
			Write16(pAwardItemInfo, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAwardItemInfo;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //Coupons
			Write32(pAwardItemInfo, 0); //GuildPoint
			Write32(pAwardItemInfo, 0); //LuckMoney
			Write8(pAwardItemInfo, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAwardItemInfo;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //SpeedCoin

			len = pAwardItemInfo - pSummerActAwardInfos;
			Set16(pSummerActAwardInfos, (WORD)len);
			pSummerActAwardInfos += len;
		}
		Write32(pSummerActAwardInfos, 0); //AwardRound
		Write32(pSummerActAwardInfos, 0); //AwardMaxNums
		Write32(pSummerActAwardInfos, 0); //AwardLowNums
		Write32(pSummerActAwardInfos, 0); //CurrentProcessValue
		Write32(pSummerActAwardInfos, 0); //AwardNeedProcessValue
		Write8(pSummerActAwardInfos, 0); //GetAward
		Write8(pSummerActAwardInfos, 0); //BestItemAward
		Write16(pSummerActAwardInfos, 0); //AwardExtraType
		Write32(pSummerActAwardInfos, 0); //ReceBeginDate
		Write32(pSummerActAwardInfos, 0); //ReceEndDate
		Write16(pSummerActAwardInfos, 0); //AwardPoolID
		Write8(pSummerActAwardInfos, 0); //AwardStatus

		len = pSummerActAwardInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //StoryInfoNums
	for (size_t i = 0; i < n; i++)
	{ //SummerActStoryInfos
		BYTE* pSummerActStoryInfos = p;
		Write16(pSummerActStoryInfos, 0); //len

		Write32(pSummerActStoryInfos, 0); //MapID
		Write16(pSummerActStoryInfos, 0); //StoryInfoLen

		len = pSummerActStoryInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //ShowAwardInfo
		BYTE* pShowAwardInfo = p;
		Write16(pShowAwardInfo, 0); //len

		Write32(pShowAwardInfo, 0); //Exp
		Write32(pShowAwardInfo, 0); //Money
		Write32(pShowAwardInfo, 0); //SuperMoney
		Write16(pShowAwardInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pShowAwardInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pShowAwardInfo;
			Set16(pShowAwardInfo, (WORD)len);
			pShowAwardInfo += len;
		}
		Write32(pShowAwardInfo, 0); //Coupons
		Write32(pShowAwardInfo, 0); //GuildPoint
		Write32(pShowAwardInfo, 0); //LuckMoney
		Write8(pShowAwardInfo, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pShowAwardInfo;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pShowAwardInfo;
			Set16(pShowAwardInfo, (WORD)len);
			pShowAwardInfo += len;
		}
		Write32(pShowAwardInfo, 0); //SpeedCoin

		len = pShowAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //ChanceGeneNums
	for (size_t i = 0; i < n; i++)
	{ //SummerActPartiChanceGeneInfos
		BYTE* pSummerActPartiChanceGeneInfos = p;
		Write16(pSummerActPartiChanceGeneInfos, 0); //len

		Write8(pSummerActPartiChanceGeneInfos, 0); //TaskID
		Write8(pSummerActPartiChanceGeneInfos, 0); //TaskPeriod
		Write32(pSummerActPartiChanceGeneInfos, 0); //AlreadyAwardNums
		Write32(pSummerActPartiChanceGeneInfos, 0); //AwardMoveNums
		Write32(pSummerActPartiChanceGeneInfos, 0); //TaskFinishNums
		Write32(pSummerActPartiChanceGeneInfos, 0); //TaskNeedValue

		len = pSummerActPartiChanceGeneInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //OpenTimeInfo
		BYTE* pOpenTimeInfo = p;
		Write16(pOpenTimeInfo, 0); //len

		Write32(pOpenTimeInfo, 0); //OpenDate
		Write32(pOpenTimeInfo, 0); //CloseDate
		Write32(pOpenTimeInfo, 0); //OpenTime
		Write32(pOpenTimeInfo, 0); //CloseTime

		len = pOpenTimeInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //SummerActItemID
	{ //LowLevelShowAwardInfo
		BYTE* pLowLevelShowAwardInfo = p;
		Write16(pLowLevelShowAwardInfo, 0); //len

		Write32(pLowLevelShowAwardInfo, 0); //Exp
		Write32(pLowLevelShowAwardInfo, 0); //Money
		Write32(pLowLevelShowAwardInfo, 0); //SuperMoney
		Write16(pLowLevelShowAwardInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pLowLevelShowAwardInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pLowLevelShowAwardInfo;
			Set16(pLowLevelShowAwardInfo, (WORD)len);
			pLowLevelShowAwardInfo += len;
		}
		Write32(pLowLevelShowAwardInfo, 0); //Coupons
		Write32(pLowLevelShowAwardInfo, 0); //GuildPoint
		Write32(pLowLevelShowAwardInfo, 0); //LuckMoney
		Write8(pLowLevelShowAwardInfo, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pLowLevelShowAwardInfo;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pLowLevelShowAwardInfo;
			Set16(pLowLevelShowAwardInfo, (WORD)len);
			pLowLevelShowAwardInfo += len;
		}
		Write32(pLowLevelShowAwardInfo, 0); //SpeedCoin

		len = pLowLevelShowAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //NormaItemShowInfo
		BYTE* pNormaItemShowInfo = p;
		Write16(pNormaItemShowInfo, 0); //len

		Write32(pNormaItemShowInfo, 0); //Exp
		Write32(pNormaItemShowInfo, 0); //Money
		Write32(pNormaItemShowInfo, 0); //SuperMoney
		Write16(pNormaItemShowInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pNormaItemShowInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pNormaItemShowInfo;
			Set16(pNormaItemShowInfo, (WORD)len);
			pNormaItemShowInfo += len;
		}
		Write32(pNormaItemShowInfo, 0); //Coupons
		Write32(pNormaItemShowInfo, 0); //GuildPoint
		Write32(pNormaItemShowInfo, 0); //LuckMoney
		Write8(pNormaItemShowInfo, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pNormaItemShowInfo;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pNormaItemShowInfo;
			Set16(pNormaItemShowInfo, (WORD)len);
			pNormaItemShowInfo += len;
		}
		Write32(pNormaItemShowInfo, 0); //SpeedCoin

		len = pNormaItemShowInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //CurrentTotalExtractNums

	len = p - buf;
	SendToClient(Client, 28220, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestDoSummerActExtract(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR ActType = Read8(p);

}

void ResponseDoSummerActExtract(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write8(p, 0); //ActType
	Write16(p, 0); //ResultID
	{ //HighLevelAwardInfo
		BYTE* pHighLevelAwardInfo = p;
		Write16(pHighLevelAwardInfo, 0); //len

		Write8(pHighLevelAwardInfo, 0); //MapIndex
		Write16(pHighLevelAwardInfo, 0); //AwardType
		Write16(pHighLevelAwardInfo, 0); //AwardIndex
		Write16(pHighLevelAwardInfo, 0); //EventAwardID
		{ //AwardItemInfo
			BYTE* pAwardItemInfo = pHighLevelAwardInfo;
			Write16(pAwardItemInfo, 0); //len

			Write32(pAwardItemInfo, 0); //Exp
			Write32(pAwardItemInfo, 0); //Money
			Write32(pAwardItemInfo, 0); //SuperMoney
			Write16(pAwardItemInfo, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAwardItemInfo;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //Coupons
			Write32(pAwardItemInfo, 0); //GuildPoint
			Write32(pAwardItemInfo, 0); //LuckMoney
			Write8(pAwardItemInfo, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAwardItemInfo;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //SpeedCoin

			len = pAwardItemInfo - pHighLevelAwardInfo;
			Set16(pHighLevelAwardInfo, (WORD)len);
			pHighLevelAwardInfo += len;
		}
		Write32(pHighLevelAwardInfo, 0); //AwardRound
		Write32(pHighLevelAwardInfo, 0); //AwardMaxNums
		Write32(pHighLevelAwardInfo, 0); //AwardLowNums
		Write32(pHighLevelAwardInfo, 0); //CurrentProcessValue
		Write32(pHighLevelAwardInfo, 0); //AwardNeedProcessValue
		Write8(pHighLevelAwardInfo, 0); //GetAward
		Write8(pHighLevelAwardInfo, 0); //BestItemAward
		Write16(pHighLevelAwardInfo, 0); //AwardExtraType
		Write32(pHighLevelAwardInfo, 0); //ReceBeginDate
		Write32(pHighLevelAwardInfo, 0); //ReceEndDate
		Write16(pHighLevelAwardInfo, 0); //AwardPoolID
		Write8(pHighLevelAwardInfo, 0); //AwardStatus

		len = pHighLevelAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //AwardStoryInfo
		BYTE* pAwardStoryInfo = p;
		Write16(pAwardStoryInfo, 0); //len

		Write32(pAwardStoryInfo, 0); //MapID
		Write16(pAwardStoryInfo, 0); //StoryInfoLen

		len = pAwardStoryInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //LowLevelAwardInfo
		BYTE* pLowLevelAwardInfo = p;
		Write16(pLowLevelAwardInfo, 0); //len

		Write32(pLowLevelAwardInfo, 0); //Exp
		Write32(pLowLevelAwardInfo, 0); //Money
		Write32(pLowLevelAwardInfo, 0); //SuperMoney
		Write16(pLowLevelAwardInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pLowLevelAwardInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pLowLevelAwardInfo;
			Set16(pLowLevelAwardInfo, (WORD)len);
			pLowLevelAwardInfo += len;
		}
		Write32(pLowLevelAwardInfo, 0); //Coupons
		Write32(pLowLevelAwardInfo, 0); //GuildPoint
		Write32(pLowLevelAwardInfo, 0); //LuckMoney
		Write8(pLowLevelAwardInfo, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pLowLevelAwardInfo;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pLowLevelAwardInfo;
			Set16(pLowLevelAwardInfo, (WORD)len);
			pLowLevelAwardInfo += len;
		}
		Write32(pLowLevelAwardInfo, 0); //SpeedCoin

		len = pLowLevelAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //FinalAwardInfo
		BYTE* pFinalAwardInfo = p;
		Write16(pFinalAwardInfo, 0); //len

		Write8(pFinalAwardInfo, 0); //MapIndex
		Write16(pFinalAwardInfo, 0); //AwardType
		Write16(pFinalAwardInfo, 0); //AwardIndex
		Write16(pFinalAwardInfo, 0); //EventAwardID
		{ //AwardItemInfo
			BYTE* pAwardItemInfo = pFinalAwardInfo;
			Write16(pAwardItemInfo, 0); //len

			Write32(pAwardItemInfo, 0); //Exp
			Write32(pAwardItemInfo, 0); //Money
			Write32(pAwardItemInfo, 0); //SuperMoney
			Write16(pAwardItemInfo, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAwardItemInfo;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //Coupons
			Write32(pAwardItemInfo, 0); //GuildPoint
			Write32(pAwardItemInfo, 0); //LuckMoney
			Write8(pAwardItemInfo, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAwardItemInfo;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //SpeedCoin

			len = pAwardItemInfo - pFinalAwardInfo;
			Set16(pFinalAwardInfo, (WORD)len);
			pFinalAwardInfo += len;
		}
		Write32(pFinalAwardInfo, 0); //AwardRound
		Write32(pFinalAwardInfo, 0); //AwardMaxNums
		Write32(pFinalAwardInfo, 0); //AwardLowNums
		Write32(pFinalAwardInfo, 0); //CurrentProcessValue
		Write32(pFinalAwardInfo, 0); //AwardNeedProcessValue
		Write8(pFinalAwardInfo, 0); //GetAward
		Write8(pFinalAwardInfo, 0); //BestItemAward
		Write16(pFinalAwardInfo, 0); //AwardExtraType
		Write32(pFinalAwardInfo, 0); //ReceBeginDate
		Write32(pFinalAwardInfo, 0); //ReceEndDate
		Write16(pFinalAwardInfo, 0); //AwardPoolID
		Write8(pFinalAwardInfo, 0); //AwardStatus

		len = pFinalAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //SummerActID
	Write16(p, 0); //StoryInfoLen
	Write32(p, 0); //TopItemID
	Write32(p, 0); //ExpressionItemID
	Write16(p, 0); //AwardNums
	for (size_t i = 0; i < n; i++)
	{ //SummerActAwardInfos
		BYTE* pSummerActAwardInfos = p;
		Write16(pSummerActAwardInfos, 0); //len

		Write8(pSummerActAwardInfos, 0); //MapIndex
		Write16(pSummerActAwardInfos, 0); //AwardType
		Write16(pSummerActAwardInfos, 0); //AwardIndex
		Write16(pSummerActAwardInfos, 0); //EventAwardID
		{ //AwardItemInfo
			BYTE* pAwardItemInfo = pSummerActAwardInfos;
			Write16(pAwardItemInfo, 0); //len

			Write32(pAwardItemInfo, 0); //Exp
			Write32(pAwardItemInfo, 0); //Money
			Write32(pAwardItemInfo, 0); //SuperMoney
			Write16(pAwardItemInfo, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAwardItemInfo;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //Coupons
			Write32(pAwardItemInfo, 0); //GuildPoint
			Write32(pAwardItemInfo, 0); //LuckMoney
			Write8(pAwardItemInfo, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAwardItemInfo;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //SpeedCoin

			len = pAwardItemInfo - pSummerActAwardInfos;
			Set16(pSummerActAwardInfos, (WORD)len);
			pSummerActAwardInfos += len;
		}
		Write32(pSummerActAwardInfos, 0); //AwardRound
		Write32(pSummerActAwardInfos, 0); //AwardMaxNums
		Write32(pSummerActAwardInfos, 0); //AwardLowNums
		Write32(pSummerActAwardInfos, 0); //CurrentProcessValue
		Write32(pSummerActAwardInfos, 0); //AwardNeedProcessValue
		Write8(pSummerActAwardInfos, 0); //GetAward
		Write8(pSummerActAwardInfos, 0); //BestItemAward
		Write16(pSummerActAwardInfos, 0); //AwardExtraType
		Write32(pSummerActAwardInfos, 0); //ReceBeginDate
		Write32(pSummerActAwardInfos, 0); //ReceEndDate
		Write16(pSummerActAwardInfos, 0); //AwardPoolID
		Write8(pSummerActAwardInfos, 0); //AwardStatus

		len = pSummerActAwardInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //CurrentTotalExtractNums

	len = p - buf;
	SendToClient(Client, 28221, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestMonopolyCfg(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseMonopolyCfg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write32(p, 0); //ItemID
	Write32(p, 0); //ItemNum
	Write16(p, 0); //ConsumeNum
	Write16(p, 0); //CurrentIndex
	Write32(p, 0); //CurrentProgress
	Write32(p, 0); //TotalProgress
	{ //OpenCfg
		BYTE* pOpenCfg = p;
		Write16(pOpenCfg, 0); //len

		Write32(pOpenCfg, 0); //SeasonID
		Write32(pOpenCfg, 0); //Opendate
		Write32(pOpenCfg, 0); //Opentime
		Write32(pOpenCfg, 0); //Closedate
		Write32(pOpenCfg, 0); //Closetime

		len = pOpenCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //AwardTypeNum
	for (size_t i = 0; i < n; i++)
	{ //MonopolyAwardMapToClient
		BYTE* pMonopolyAwardMapToClient = p;
		Write16(pMonopolyAwardMapToClient, 0); //len

		Write32(pMonopolyAwardMapToClient, 0); //AwardType
		{ //AwardCfg
			BYTE* pAwardCfg = pMonopolyAwardMapToClient;
			Write16(pAwardCfg, 0); //len

			Write32(pAwardCfg, 0); //Exp
			Write32(pAwardCfg, 0); //Money
			Write32(pAwardCfg, 0); //SuperMoney
			Write16(pAwardCfg, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAwardCfg;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAwardCfg;
				Set16(pAwardCfg, (WORD)len);
				pAwardCfg += len;
			}
			Write32(pAwardCfg, 0); //Coupons
			Write32(pAwardCfg, 0); //GuildPoint
			Write32(pAwardCfg, 0); //LuckMoney
			Write8(pAwardCfg, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAwardCfg;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAwardCfg;
				Set16(pAwardCfg, (WORD)len);
				pAwardCfg += len;
			}
			Write32(pAwardCfg, 0); //SpeedCoin

			len = pAwardCfg - pMonopolyAwardMapToClient;
			Set16(pMonopolyAwardMapToClient, (WORD)len);
			pMonopolyAwardMapToClient += len;
		}
		Write32(pMonopolyAwardMapToClient, 0); //ColorEggNum
		for (size_t i = 0; i < n; i++)
		{ //ColorEggCfg
			BYTE* pColorEggCfg = pMonopolyAwardMapToClient;
			Write16(pColorEggCfg, 0); //len

			Write32(pColorEggCfg, 0); //ColorEggType
			Write32(pColorEggCfg, 0); //Probality
			Write32(pColorEggCfg, 0); //BaoJiStartCount
			Write32(pColorEggCfg, 0); //BaojiProbality
			Write32(pColorEggCfg, 0); //OtherValue1

			len = pColorEggCfg - pMonopolyAwardMapToClient;
			Set16(pMonopolyAwardMapToClient, (WORD)len);
			pMonopolyAwardMapToClient += len;
		}

		len = pMonopolyAwardMapToClient - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //JumpFlag

	len = p - buf;
	SendToClient(Client, 28225, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetMonopolyAward(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR Type = Read8(p);
	UCHAR JumpFlag = Read8(p);

}

void ResponseGetMonopolyAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //Num
	Write32(p, 0); //CurrentProgress
	Write8(p, 0); //HasAward
	for (size_t i = 0; i < n; i++)
	{ //Award
		BYTE* pAward = p;
		Write16(pAward, 0); //len

		Write32(pAward, 0); //Exp
		Write32(pAward, 0); //Money
		Write32(pAward, 0); //SuperMoney
		Write16(pAward, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAward;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write32(pAward, 0); //Coupons
		Write32(pAward, 0); //GuildPoint
		Write32(pAward, 0); //LuckMoney
		Write8(pAward, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAward;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write32(pAward, 0); //SpeedCoin

		len = pAward - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasCrazy
	for (size_t i = 0; i < n; i++)
	{ //CrazyAward
		BYTE* pCrazyAward = p;
		Write16(pCrazyAward, 0); //len

		Write32(pCrazyAward, 0); //Exp
		Write32(pCrazyAward, 0); //Money
		Write32(pCrazyAward, 0); //SuperMoney
		Write16(pCrazyAward, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pCrazyAward;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pCrazyAward;
			Set16(pCrazyAward, (WORD)len);
			pCrazyAward += len;
		}
		Write32(pCrazyAward, 0); //Coupons
		Write32(pCrazyAward, 0); //GuildPoint
		Write32(pCrazyAward, 0); //LuckMoney
		Write8(pCrazyAward, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pCrazyAward;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pCrazyAward;
			Set16(pCrazyAward, (WORD)len);
			pCrazyAward += len;
		}
		Write32(pCrazyAward, 0); //SpeedCoin

		len = pCrazyAward - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasColorEgg
	for (size_t i = 0; i < n; i++)
	{ //ColorEggInfo
		BYTE* pColorEggInfo = p;
		Write16(pColorEggInfo, 0); //len

		Write32(pColorEggInfo, 0); //ColorEggType
		Write8(pColorEggInfo, 0); //HasAward
		for (size_t i = 0; i < n; i++)
		{ //Award
			BYTE* pAward = pColorEggInfo;
			Write16(pAward, 0); //len

			Write32(pAward, 0); //Exp
			Write32(pAward, 0); //Money
			Write32(pAward, 0); //SuperMoney
			Write16(pAward, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAward;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAward;
				Set16(pAward, (WORD)len);
				pAward += len;
			}
			Write32(pAward, 0); //Coupons
			Write32(pAward, 0); //GuildPoint
			Write32(pAward, 0); //LuckMoney
			Write8(pAward, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAward;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAward;
				Set16(pAward, (WORD)len);
				pAward += len;
			}
			Write32(pAward, 0); //SpeedCoin

			len = pAward - pColorEggInfo;
			Set16(pColorEggInfo, (WORD)len);
			pColorEggInfo += len;
		}
		Write32(pColorEggInfo, 0); //OtherValue1
		Write32(pColorEggInfo, 0); //OtherValue2

		len = pColorEggInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasOneRoundBuff
	for (size_t i = 0; i < n; i++)
	{ //OneRoundBuffInfo
		BYTE* pOneRoundBuffInfo = p;
		Write16(pOneRoundBuffInfo, 0); //len

		Write32(pOneRoundBuffInfo, 0); //ColorEggType
		Write8(pOneRoundBuffInfo, 0); //HasAward
		for (size_t i = 0; i < n; i++)
		{ //Award
			BYTE* pAward = pOneRoundBuffInfo;
			Write16(pAward, 0); //len

			Write32(pAward, 0); //Exp
			Write32(pAward, 0); //Money
			Write32(pAward, 0); //SuperMoney
			Write16(pAward, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAward;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAward;
				Set16(pAward, (WORD)len);
				pAward += len;
			}
			Write32(pAward, 0); //Coupons
			Write32(pAward, 0); //GuildPoint
			Write32(pAward, 0); //LuckMoney
			Write8(pAward, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAward;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAward;
				Set16(pAward, (WORD)len);
				pAward += len;
			}
			Write32(pAward, 0); //SpeedCoin

			len = pAward - pOneRoundBuffInfo;
			Set16(pOneRoundBuffInfo, (WORD)len);
			pOneRoundBuffInfo += len;
		}
		Write32(pOneRoundBuffInfo, 0); //OtherValue1
		Write32(pOneRoundBuffInfo, 0); //OtherValue2

		len = pOneRoundBuffInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //TotalProgress

	len = p - buf;
	SendToClient(Client, 28226, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestSelectAward(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT ItemNum = Read16(p);
	int ItemList[] = Read32(p);

}

void ResponseSelectAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 28227, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetHappyLuckyCoinShowInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	Un uitTime = ReadUn(p);

}

void ResponseGetHappyLuckyCoinShowInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //AwardNums
	for (size_t i = 0; i < n; i++)
	{ //HappyLuckyCoinAwardInfos
		BYTE* pHappyLuckyCoinAwardInfos = p;
		Write16(pHappyLuckyCoinAwardInfos, 0); //len

		Write8(pHappyLuckyCoinAwardInfos, 0); //MapIndex
		Write16(pHappyLuckyCoinAwardInfos, 0); //AwardType
		Write16(pHappyLuckyCoinAwardInfos, 0); //AwardIndex
		Write16(pHappyLuckyCoinAwardInfos, 0); //EventAwardID
		{ //AwardItemInfo
			BYTE* pAwardItemInfo = pHappyLuckyCoinAwardInfos;
			Write16(pAwardItemInfo, 0); //len

			Write32(pAwardItemInfo, 0); //Exp
			Write32(pAwardItemInfo, 0); //Money
			Write32(pAwardItemInfo, 0); //SuperMoney
			Write16(pAwardItemInfo, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAwardItemInfo;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //Coupons
			Write32(pAwardItemInfo, 0); //GuildPoint
			Write32(pAwardItemInfo, 0); //LuckMoney
			Write8(pAwardItemInfo, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAwardItemInfo;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //SpeedCoin

			len = pAwardItemInfo - pHappyLuckyCoinAwardInfos;
			Set16(pHappyLuckyCoinAwardInfos, (WORD)len);
			pHappyLuckyCoinAwardInfos += len;
		}
		Write32(pHappyLuckyCoinAwardInfos, 0); //AwardRound
		Write32(pHappyLuckyCoinAwardInfos, 0); //AwardMaxNums
		Write32(pHappyLuckyCoinAwardInfos, 0); //AwardLowNums
		Write32(pHappyLuckyCoinAwardInfos, 0); //CurrentProcessValue
		Write32(pHappyLuckyCoinAwardInfos, 0); //AwardNeedProcessValue
		Write8(pHappyLuckyCoinAwardInfos, 0); //GetAward
		Write8(pHappyLuckyCoinAwardInfos, 0); //BestItemAward
		Write16(pHappyLuckyCoinAwardInfos, 0); //AwardExtraType
		Write32(pHappyLuckyCoinAwardInfos, 0); //ReceBeginDate
		Write32(pHappyLuckyCoinAwardInfos, 0); //ReceEndDate
		Write16(pHappyLuckyCoinAwardInfos, 0); //AwardPoolID
		Write8(pHappyLuckyCoinAwardInfos, 0); //AwardStatus

		len = pHappyLuckyCoinAwardInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //ChanceGeneNums
	for (size_t i = 0; i < n; i++)
	{ //HappyHappyCoinPartiChanceGeneInfos
		BYTE* pHappyHappyCoinPartiChanceGeneInfos = p;
		Write16(pHappyHappyCoinPartiChanceGeneInfos, 0); //len

		Write8(pHappyHappyCoinPartiChanceGeneInfos, 0); //TaskID
		Write8(pHappyHappyCoinPartiChanceGeneInfos, 0); //TaskPeriod
		Write32(pHappyHappyCoinPartiChanceGeneInfos, 0); //AlreadyAwardNums
		Write32(pHappyHappyCoinPartiChanceGeneInfos, 0); //AwardMoveNums
		Write32(pHappyHappyCoinPartiChanceGeneInfos, 0); //TaskFinishNums
		Write32(pHappyHappyCoinPartiChanceGeneInfos, 0); //TaskNeedValue

		len = pHappyHappyCoinPartiChanceGeneInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //OpenTimeInfo
		BYTE* pOpenTimeInfo = p;
		Write16(pOpenTimeInfo, 0); //len

		Write32(pOpenTimeInfo, 0); //OpenDate
		Write32(pOpenTimeInfo, 0); //CloseDate
		Write32(pOpenTimeInfo, 0); //OpenTime
		Write32(pOpenTimeInfo, 0); //CloseTime

		len = pOpenTimeInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //LuckValueAddPeriodInfo
		BYTE* pLuckValueAddPeriodInfo = p;
		Write16(pLuckValueAddPeriodInfo, 0); //len

		Write32(pLuckValueAddPeriodInfo, 0); //OpenDate
		Write32(pLuckValueAddPeriodInfo, 0); //CloseDate
		Write32(pLuckValueAddPeriodInfo, 0); //OpenTime
		Write32(pLuckValueAddPeriodInfo, 0); //CloseTime

		len = pLuckValueAddPeriodInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //DailyAddLuckValue
	Write32(p, 0); //LoginNums
	Write32(p, 0); //CurrentExtractNums
	Write32(p, 0); //CostItemID
	Write32(p, 0); //DailyAwardYellowGeneNums
	Write32(p, 0); //DailyAwardRedGeneNums
	Write32(p, 0); //TotalLuckValue
	Write32(p, 0); //ExtractMaxNumsPerRound
	Write8(p, 0); //DailyLuckyLabel
	Write16(p, 0); //GeneBaoshiInfoNums
	for (size_t i = 0; i < n; i++)
	{ //HappyLuckyCoinGeneBaoshiInfos
		BYTE* pHappyLuckyCoinGeneBaoshiInfos = p;
		Write16(pHappyLuckyCoinGeneBaoshiInfos, 0); //len

		Write32(pHappyLuckyCoinGeneBaoshiInfos, 0); //AwardRedHighNums
		Write32(pHappyLuckyCoinGeneBaoshiInfos, 0); //AwardRedLowNums
		Write32(pHappyLuckyCoinGeneBaoshiInfos, 0); //AwardYellowHighNums
		Write32(pHappyLuckyCoinGeneBaoshiInfos, 0); //AwardYellowLowNums
		Write32(pHappyLuckyCoinGeneBaoshiInfos, 0); //ExtractRound

		len = pHappyLuckyCoinGeneBaoshiInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 28222, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestDoHappyLuckyCoinExtract(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR ExtractDirection = Read8(p);

}

void ResponseDoHappyLuckyCoinExtract(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	{ //ExtractAwardInfo
		BYTE* pExtractAwardInfo = p;
		Write16(pExtractAwardInfo, 0); //len

		Write8(pExtractAwardInfo, 0); //MapIndex
		Write16(pExtractAwardInfo, 0); //AwardType
		Write16(pExtractAwardInfo, 0); //AwardIndex
		Write16(pExtractAwardInfo, 0); //EventAwardID
		{ //AwardItemInfo
			BYTE* pAwardItemInfo = pExtractAwardInfo;
			Write16(pAwardItemInfo, 0); //len

			Write32(pAwardItemInfo, 0); //Exp
			Write32(pAwardItemInfo, 0); //Money
			Write32(pAwardItemInfo, 0); //SuperMoney
			Write16(pAwardItemInfo, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAwardItemInfo;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //Coupons
			Write32(pAwardItemInfo, 0); //GuildPoint
			Write32(pAwardItemInfo, 0); //LuckMoney
			Write8(pAwardItemInfo, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAwardItemInfo;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //SpeedCoin

			len = pAwardItemInfo - pExtractAwardInfo;
			Set16(pExtractAwardInfo, (WORD)len);
			pExtractAwardInfo += len;
		}
		Write32(pExtractAwardInfo, 0); //AwardRound
		Write32(pExtractAwardInfo, 0); //AwardMaxNums
		Write32(pExtractAwardInfo, 0); //AwardLowNums
		Write32(pExtractAwardInfo, 0); //CurrentProcessValue
		Write32(pExtractAwardInfo, 0); //AwardNeedProcessValue
		Write8(pExtractAwardInfo, 0); //GetAward
		Write8(pExtractAwardInfo, 0); //BestItemAward
		Write16(pExtractAwardInfo, 0); //AwardExtraType
		Write32(pExtractAwardInfo, 0); //ReceBeginDate
		Write32(pExtractAwardInfo, 0); //ReceEndDate
		Write16(pExtractAwardInfo, 0); //AwardPoolID
		Write8(pExtractAwardInfo, 0); //AwardStatus

		len = pExtractAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //CurrentExtractNums
	Write8(p, 0); //NeedRefreshAward
	Write16(p, 0); //AwardNums
	for (size_t i = 0; i < n; i++)
	{ //HappyLuckyCoinAwardInfos
		BYTE* pHappyLuckyCoinAwardInfos = p;
		Write16(pHappyLuckyCoinAwardInfos, 0); //len

		Write8(pHappyLuckyCoinAwardInfos, 0); //MapIndex
		Write16(pHappyLuckyCoinAwardInfos, 0); //AwardType
		Write16(pHappyLuckyCoinAwardInfos, 0); //AwardIndex
		Write16(pHappyLuckyCoinAwardInfos, 0); //EventAwardID
		{ //AwardItemInfo
			BYTE* pAwardItemInfo = pHappyLuckyCoinAwardInfos;
			Write16(pAwardItemInfo, 0); //len

			Write32(pAwardItemInfo, 0); //Exp
			Write32(pAwardItemInfo, 0); //Money
			Write32(pAwardItemInfo, 0); //SuperMoney
			Write16(pAwardItemInfo, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAwardItemInfo;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //Coupons
			Write32(pAwardItemInfo, 0); //GuildPoint
			Write32(pAwardItemInfo, 0); //LuckMoney
			Write8(pAwardItemInfo, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAwardItemInfo;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //SpeedCoin

			len = pAwardItemInfo - pHappyLuckyCoinAwardInfos;
			Set16(pHappyLuckyCoinAwardInfos, (WORD)len);
			pHappyLuckyCoinAwardInfos += len;
		}
		Write32(pHappyLuckyCoinAwardInfos, 0); //AwardRound
		Write32(pHappyLuckyCoinAwardInfos, 0); //AwardMaxNums
		Write32(pHappyLuckyCoinAwardInfos, 0); //AwardLowNums
		Write32(pHappyLuckyCoinAwardInfos, 0); //CurrentProcessValue
		Write32(pHappyLuckyCoinAwardInfos, 0); //AwardNeedProcessValue
		Write8(pHappyLuckyCoinAwardInfos, 0); //GetAward
		Write8(pHappyLuckyCoinAwardInfos, 0); //BestItemAward
		Write16(pHappyLuckyCoinAwardInfos, 0); //AwardExtraType
		Write32(pHappyLuckyCoinAwardInfos, 0); //ReceBeginDate
		Write32(pHappyLuckyCoinAwardInfos, 0); //ReceEndDate
		Write16(pHappyLuckyCoinAwardInfos, 0); //AwardPoolID
		Write8(pHappyLuckyCoinAwardInfos, 0); //AwardStatus

		len = pHappyLuckyCoinAwardInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //DailyAwardYellowGeneNums
	Write32(p, 0); //DailyAwardRedGeneNums
	{ //GeneAwardInfo
		BYTE* pGeneAwardInfo = p;
		Write16(pGeneAwardInfo, 0); //len

		Write32(pGeneAwardInfo, 0); //Exp
		Write32(pGeneAwardInfo, 0); //Money
		Write32(pGeneAwardInfo, 0); //SuperMoney
		Write16(pGeneAwardInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pGeneAwardInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pGeneAwardInfo;
			Set16(pGeneAwardInfo, (WORD)len);
			pGeneAwardInfo += len;
		}
		Write32(pGeneAwardInfo, 0); //Coupons
		Write32(pGeneAwardInfo, 0); //GuildPoint
		Write32(pGeneAwardInfo, 0); //LuckMoney
		Write8(pGeneAwardInfo, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pGeneAwardInfo;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pGeneAwardInfo;
			Set16(pGeneAwardInfo, (WORD)len);
			pGeneAwardInfo += len;
		}
		Write32(pGeneAwardInfo, 0); //SpeedCoin

		len = pGeneAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //TotalLuckValue

	len = p - buf;
	SendToClient(Client, 28223, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestCarExchangeCfg(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR Type = Read8(p);

}

void ResponseCarExchangeCfg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	{ //OpenCfg
		BYTE* pOpenCfg = p;
		Write16(pOpenCfg, 0); //len

		Write32(pOpenCfg, 0); //SeasonID
		Write32(pOpenCfg, 0); //Opendate
		Write32(pOpenCfg, 0); //Opentime
		Write32(pOpenCfg, 0); //Closedate
		Write32(pOpenCfg, 0); //Closetime

		len = pOpenCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //DstItemNum
	for (size_t i = 0; i < n; i++)
	{ //CarExchangePollCfg
		BYTE* pCarExchangePollCfg = p;
		Write16(pCarExchangePollCfg, 0); //len

		{ //DstItemCfg
			BYTE* pDstItemCfg = pCarExchangePollCfg;
			Write16(pDstItemCfg, 0); //len

			Write32(pDstItemCfg, 0); //ItemID
			Write32(pDstItemCfg, 0); //ItemNum
			Write32(pDstItemCfg, 0); //AvailPeriod
			Write16(pDstItemCfg, 0); //ItemType
			Write8(pDstItemCfg, 0); //HasAlready
			Write16(pDstItemCfg, 0); //ConsumNum
			Write16(pDstItemCfg, 0); //ReturnNum
			Write8(pDstItemCfg, 0); //LimitTimeNum
			for (size_t i = 0; i < n; i++)
			{ //OpenCfg
				BYTE* pOpenCfg = pDstItemCfg;
				Write16(pOpenCfg, 0); //len

				Write32(pOpenCfg, 0); //SeasonID
				Write32(pOpenCfg, 0); //Opendate
				Write32(pOpenCfg, 0); //Opentime
				Write32(pOpenCfg, 0); //Closedate
				Write32(pOpenCfg, 0); //Closetime

				len = pOpenCfg - pDstItemCfg;
				Set16(pDstItemCfg, (WORD)len);
				pDstItemCfg += len;
			}
			Write32(pDstItemCfg, 0); //TimeLeft

			len = pDstItemCfg - pCarExchangePollCfg;
			Set16(pCarExchangePollCfg, (WORD)len);
			pCarExchangePollCfg += len;
		}
		Write16(pCarExchangePollCfg, 0); //SrcItemNum
		for (size_t i = 0; i < n; i++)
		{ //SrcItemCfg
			BYTE* pSrcItemCfg = pCarExchangePollCfg;
			Write16(pSrcItemCfg, 0); //len

			Write32(pSrcItemCfg, 0); //ItemID
			Write32(pSrcItemCfg, 0); //ItemNum
			Write32(pSrcItemCfg, 0); //AvailPeriod
			Write16(pSrcItemCfg, 0); //ItemType
			Write8(pSrcItemCfg, 0); //HasAlready
			Write16(pSrcItemCfg, 0); //ConsumNum
			Write16(pSrcItemCfg, 0); //ReturnNum
			Write8(pSrcItemCfg, 0); //LimitTimeNum
			for (size_t i = 0; i < n; i++)
			{ //OpenCfg
				BYTE* pOpenCfg = pSrcItemCfg;
				Write16(pOpenCfg, 0); //len

				Write32(pOpenCfg, 0); //SeasonID
				Write32(pOpenCfg, 0); //Opendate
				Write32(pOpenCfg, 0); //Opentime
				Write32(pOpenCfg, 0); //Closedate
				Write32(pOpenCfg, 0); //Closetime

				len = pOpenCfg - pSrcItemCfg;
				Set16(pSrcItemCfg, (WORD)len);
				pSrcItemCfg += len;
			}
			Write32(pSrcItemCfg, 0); //TimeLeft

			len = pSrcItemCfg - pCarExchangePollCfg;
			Set16(pCarExchangePollCfg, (WORD)len);
			pCarExchangePollCfg += len;
		}

		len = pCarExchangePollCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //HistoryNum
	for (size_t i = 0; i < n; i++)
	{ //CarExchangeHistoryInfo
		BYTE* pCarExchangeHistoryInfo = p;
		Write16(pCarExchangeHistoryInfo, 0); //len

		Write32(pCarExchangeHistoryInfo, 0); //Uin
		Write32(pCarExchangeHistoryInfo, 0); //TimeLeft
		Write8(pCarExchangeHistoryInfo, 0); //OverFlag
		Write32(pCarExchangeHistoryInfo, 0); //DstItemID
		Write32(pCarExchangeHistoryInfo, 0); //DstItemAvailPeriod
		Write32(pCarExchangeHistoryInfo, 0); //SrcItemID
		Write32(pCarExchangeHistoryInfo, 0); //SrcItemAvailPeriod
		Write32(pCarExchangeHistoryInfo, 0); //OpTime
		Write8(pCarExchangeHistoryInfo, 0); //OpType

		len = pCarExchangeHistoryInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //Type
	Write8(p, 0); //Day
	Write32(p, 0); //PayType

	len = p - buf;
	SendToClient(Client, 28230, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetCarExchangeAward(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	{ //DstItemInfo
		BYTE* pDstItemInfo = p;
		len = Read16(pDstItemInfo);

		int ItemID = Read32(pDstItemInfo);
		int AvailPeriod = Read32(pDstItemInfo);

		p += len;
	}
	{ //SrcItemInfo
		BYTE* pSrcItemInfo = p;
		len = Read16(pSrcItemInfo);

		int ItemID = Read32(pSrcItemInfo);
		int AvailPeriod = Read32(pSrcItemInfo);

		p += len;
	}
	UCHAR Type = Read8(p);
	UCHAR IsRefitValueTrans = Read8(p);

}

void ResponseGetCarExchangeAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	{ //AwardInfo
		BYTE* pAwardInfo = p;
		Write16(pAwardInfo, 0); //len

		Write32(pAwardInfo, 0); //Exp
		Write32(pAwardInfo, 0); //Money
		Write32(pAwardInfo, 0); //SuperMoney
		Write16(pAwardInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAwardInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAwardInfo;
			Set16(pAwardInfo, (WORD)len);
			pAwardInfo += len;
		}
		Write32(pAwardInfo, 0); //Coupons
		Write32(pAwardInfo, 0); //GuildPoint
		Write32(pAwardInfo, 0); //LuckMoney
		Write8(pAwardInfo, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAwardInfo;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAwardInfo;
			Set16(pAwardInfo, (WORD)len);
			pAwardInfo += len;
		}
		Write32(pAwardInfo, 0); //SpeedCoin

		len = pAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //Type

	len = p - buf;
	SendToClient(Client, 28231, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestCarRefitInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR Type = Read8(p);
	int SrcItemID = Read32(p);
	int DstItemID = Read32(p);

}

void ResponseCarRefitInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	{ //KartRefitInfo
		BYTE* pKartRefitInfo = p;
		Write16(pKartRefitInfo, 0); //len

		Write32(pKartRefitInfo, 0); //Uin
		Write32(pKartRefitInfo, 0); //KartId
		Write32(pKartRefitInfo, 0); //RefitCout
		Write16(pKartRefitInfo, 0); //MaxFlags
		Write16(pKartRefitInfo, 0); //WWeight
		Write16(pKartRefitInfo, 0); //SpeedWeight
		Write16(pKartRefitInfo, 0); //JetWeight
		Write16(pKartRefitInfo, 0); //SJetWeight
		Write16(pKartRefitInfo, 0); //AccuWeight
		Write32(pKartRefitInfo, 0); //ShapeRefitCount
		Write32(pKartRefitInfo, 0); //KartHeadRefitItemID
		Write32(pKartRefitInfo, 0); //KartTailRefitItemID
		Write32(pKartRefitInfo, 0); //KartFlankRefitItemID
		Write32(pKartRefitInfo, 0); //KartTireRefitItemID
		Write32(pKartRefitInfo, 0); //SecondRefitCount
		Write16(pKartRefitInfo, 0); //Speed2Weight
		Write16(pKartRefitInfo, 0); //DriftVecWeight
		Write16(pKartRefitInfo, 0); //AdditionalZSpeedWeight
		Write16(pKartRefitInfo, 0); //AntiCollisionWeight
		Write16(pKartRefitInfo, 0); //LuckyValue
		Write16(pKartRefitInfo, 0); //RefitLuckyValueMaxWeight
		Write32(pKartRefitInfo, 0); //ShapeSuitID
		Write8(pKartRefitInfo, 0); //LegendSuitLevel
		Write32(pKartRefitInfo, 0); //LegendSuitLevelChoice
		Write32(pKartRefitInfo, 0); //ShapeLegendSuitID

		len = pKartRefitInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //Type

	len = p - buf;
	SendToClient(Client, 28233, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestReportCarPickInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int DstItemID = Read32(p);

}

void ResponseReportCarPickInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //Time
	Write16(p, 0); //ResultID
	Write32(p, 0); //DstItemID
	Write32(p, 0); //TimeLeft

	len = p - buf;
	SendToClient(Client, 28234, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetSuperTurkeyShowInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetSuperTurkeyShowInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //AwardNums
	for (size_t i = 0; i < n; i++)
	{ //SuperTurkeyAwardInfos
		BYTE* pSuperTurkeyAwardInfos = p;
		Write16(pSuperTurkeyAwardInfos, 0); //len

		Write8(pSuperTurkeyAwardInfos, 0); //MapIndex
		Write16(pSuperTurkeyAwardInfos, 0); //AwardType
		Write16(pSuperTurkeyAwardInfos, 0); //AwardIndex
		Write16(pSuperTurkeyAwardInfos, 0); //EventAwardID
		{ //AwardItemInfo
			BYTE* pAwardItemInfo = pSuperTurkeyAwardInfos;
			Write16(pAwardItemInfo, 0); //len

			Write32(pAwardItemInfo, 0); //Exp
			Write32(pAwardItemInfo, 0); //Money
			Write32(pAwardItemInfo, 0); //SuperMoney
			Write16(pAwardItemInfo, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAwardItemInfo;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //Coupons
			Write32(pAwardItemInfo, 0); //GuildPoint
			Write32(pAwardItemInfo, 0); //LuckMoney
			Write8(pAwardItemInfo, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAwardItemInfo;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //SpeedCoin

			len = pAwardItemInfo - pSuperTurkeyAwardInfos;
			Set16(pSuperTurkeyAwardInfos, (WORD)len);
			pSuperTurkeyAwardInfos += len;
		}
		Write32(pSuperTurkeyAwardInfos, 0); //AwardRound
		Write32(pSuperTurkeyAwardInfos, 0); //AwardMaxNums
		Write32(pSuperTurkeyAwardInfos, 0); //AwardLowNums
		Write32(pSuperTurkeyAwardInfos, 0); //CurrentProcessValue
		Write32(pSuperTurkeyAwardInfos, 0); //AwardNeedProcessValue
		Write8(pSuperTurkeyAwardInfos, 0); //GetAward
		Write8(pSuperTurkeyAwardInfos, 0); //BestItemAward
		Write16(pSuperTurkeyAwardInfos, 0); //AwardExtraType
		Write32(pSuperTurkeyAwardInfos, 0); //ReceBeginDate
		Write32(pSuperTurkeyAwardInfos, 0); //ReceEndDate
		Write16(pSuperTurkeyAwardInfos, 0); //AwardPoolID
		Write8(pSuperTurkeyAwardInfos, 0); //AwardStatus

		len = pSuperTurkeyAwardInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //ChanceGeneNums
	for (size_t i = 0; i < n; i++)
	{ //SuperTurkeyPartiChanceGeneInfos
		BYTE* pSuperTurkeyPartiChanceGeneInfos = p;
		Write16(pSuperTurkeyPartiChanceGeneInfos, 0); //len

		Write8(pSuperTurkeyPartiChanceGeneInfos, 0); //TaskID
		Write8(pSuperTurkeyPartiChanceGeneInfos, 0); //TaskPeriod
		Write32(pSuperTurkeyPartiChanceGeneInfos, 0); //AlreadyAwardNums
		Write32(pSuperTurkeyPartiChanceGeneInfos, 0); //AwardMoveNums
		Write32(pSuperTurkeyPartiChanceGeneInfos, 0); //TaskFinishNums
		Write32(pSuperTurkeyPartiChanceGeneInfos, 0); //TaskNeedValue

		len = pSuperTurkeyPartiChanceGeneInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //OpenTimeInfo
		BYTE* pOpenTimeInfo = p;
		Write16(pOpenTimeInfo, 0); //len

		Write32(pOpenTimeInfo, 0); //OpenDate
		Write32(pOpenTimeInfo, 0); //CloseDate
		Write32(pOpenTimeInfo, 0); //OpenTime
		Write32(pOpenTimeInfo, 0); //CloseTime

		len = pOpenTimeInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //RefreshThrowStoneNumsLimit
	Write32(p, 0); //CurrentThrowStoneNums
	Write32(p, 0); //CurrentDanggongType
	Write8(p, 0); //HaveHelpedFriend
	{ //HelpedPlayerInfo
		BYTE* pHelpedPlayerInfo = p;
		Write16(pHelpedPlayerInfo, 0); //len

		Write32(pHelpedPlayerInfo, 0); //Uin
		Write8(pHelpedPlayerInfo, 0); //PlayeType
		WriteString(pHelpedPlayerInfo, 0); //NickName[]
		Write8(pHelpedPlayerInfo, 0); //PlayerGender

		len = pHelpedPlayerInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //SharedPlayerInfoNums
	for (size_t i = 0; i < n; i++)
	{ //SuperTurkeySharedInfos
		BYTE* pSuperTurkeySharedInfos = p;
		Write16(pSuperTurkeySharedInfos, 0); //len

		{ //HelpedPlayerInfo
			BYTE* pHelpedPlayerInfo = pSuperTurkeySharedInfos;
			Write16(pHelpedPlayerInfo, 0); //len

			Write32(pHelpedPlayerInfo, 0); //Uin
			Write8(pHelpedPlayerInfo, 0); //PlayeType
			WriteString(pHelpedPlayerInfo, 0); //NickName[]
			Write8(pHelpedPlayerInfo, 0); //PlayerGender

			len = pHelpedPlayerInfo - pSuperTurkeySharedInfos;
			Set16(pSuperTurkeySharedInfos, (WORD)len);
			pSuperTurkeySharedInfos += len;
		}
		Write8(pSuperTurkeySharedInfos, 0); //ShareType
		Write32(pSuperTurkeySharedInfos, 0); //ShareTime

		len = pSuperTurkeySharedInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //CostItemID
	Write8(p, 0); //TipSharedPlayerInfo
	Write32(p, 0); //DailyAwardTurkeyNums
	Write32(p, 0); //DailyAwardYumaoNums

	len = p - buf;
	SendToClient(Client, 28300, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestDoSuperTurkeyExtract(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR ExtractType = Read8(p);
	UINT ExtractIndex = Read32(p);
	UCHAR SuiyuanOrNot = Read8(p);

}

void ResponseDoSuperTurkeyExtract(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write8(p, 0); //ExtractSuccOrNot
	Write16(p, 0); //AwardNums
	for (size_t i = 0; i < n; i++)
	{ //ExtractAwardInfo
		BYTE* pExtractAwardInfo = p;
		Write16(pExtractAwardInfo, 0); //len

		Write8(pExtractAwardInfo, 0); //MapIndex
		Write16(pExtractAwardInfo, 0); //AwardType
		Write16(pExtractAwardInfo, 0); //AwardIndex
		Write16(pExtractAwardInfo, 0); //EventAwardID
		{ //AwardItemInfo
			BYTE* pAwardItemInfo = pExtractAwardInfo;
			Write16(pAwardItemInfo, 0); //len

			Write32(pAwardItemInfo, 0); //Exp
			Write32(pAwardItemInfo, 0); //Money
			Write32(pAwardItemInfo, 0); //SuperMoney
			Write16(pAwardItemInfo, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAwardItemInfo;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //Coupons
			Write32(pAwardItemInfo, 0); //GuildPoint
			Write32(pAwardItemInfo, 0); //LuckMoney
			Write8(pAwardItemInfo, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAwardItemInfo;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //SpeedCoin

			len = pAwardItemInfo - pExtractAwardInfo;
			Set16(pExtractAwardInfo, (WORD)len);
			pExtractAwardInfo += len;
		}
		Write32(pExtractAwardInfo, 0); //AwardRound
		Write32(pExtractAwardInfo, 0); //AwardMaxNums
		Write32(pExtractAwardInfo, 0); //AwardLowNums
		Write32(pExtractAwardInfo, 0); //CurrentProcessValue
		Write32(pExtractAwardInfo, 0); //AwardNeedProcessValue
		Write8(pExtractAwardInfo, 0); //GetAward
		Write8(pExtractAwardInfo, 0); //BestItemAward
		Write16(pExtractAwardInfo, 0); //AwardExtraType
		Write32(pExtractAwardInfo, 0); //ReceBeginDate
		Write32(pExtractAwardInfo, 0); //ReceEndDate
		Write16(pExtractAwardInfo, 0); //AwardPoolID
		Write8(pExtractAwardInfo, 0); //AwardStatus

		len = pExtractAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //NeedRefreshAward
	Write8(p, 0); //RefreshType
	Write16(p, 0); //RefreshAwardNums
	for (size_t i = 0; i < n; i++)
	{ //SuperTurkeyAwardInfos
		BYTE* pSuperTurkeyAwardInfos = p;
		Write16(pSuperTurkeyAwardInfos, 0); //len

		Write8(pSuperTurkeyAwardInfos, 0); //MapIndex
		Write16(pSuperTurkeyAwardInfos, 0); //AwardType
		Write16(pSuperTurkeyAwardInfos, 0); //AwardIndex
		Write16(pSuperTurkeyAwardInfos, 0); //EventAwardID
		{ //AwardItemInfo
			BYTE* pAwardItemInfo = pSuperTurkeyAwardInfos;
			Write16(pAwardItemInfo, 0); //len

			Write32(pAwardItemInfo, 0); //Exp
			Write32(pAwardItemInfo, 0); //Money
			Write32(pAwardItemInfo, 0); //SuperMoney
			Write16(pAwardItemInfo, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAwardItemInfo;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //Coupons
			Write32(pAwardItemInfo, 0); //GuildPoint
			Write32(pAwardItemInfo, 0); //LuckMoney
			Write8(pAwardItemInfo, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAwardItemInfo;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //SpeedCoin

			len = pAwardItemInfo - pSuperTurkeyAwardInfos;
			Set16(pSuperTurkeyAwardInfos, (WORD)len);
			pSuperTurkeyAwardInfos += len;
		}
		Write32(pSuperTurkeyAwardInfos, 0); //AwardRound
		Write32(pSuperTurkeyAwardInfos, 0); //AwardMaxNums
		Write32(pSuperTurkeyAwardInfos, 0); //AwardLowNums
		Write32(pSuperTurkeyAwardInfos, 0); //CurrentProcessValue
		Write32(pSuperTurkeyAwardInfos, 0); //AwardNeedProcessValue
		Write8(pSuperTurkeyAwardInfos, 0); //GetAward
		Write8(pSuperTurkeyAwardInfos, 0); //BestItemAward
		Write16(pSuperTurkeyAwardInfos, 0); //AwardExtraType
		Write32(pSuperTurkeyAwardInfos, 0); //ReceBeginDate
		Write32(pSuperTurkeyAwardInfos, 0); //ReceEndDate
		Write16(pSuperTurkeyAwardInfos, 0); //AwardPoolID
		Write8(pSuperTurkeyAwardInfos, 0); //AwardStatus

		len = pSuperTurkeyAwardInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //CurrentThrowStoneNums
	Write32(p, 0); //CurrentDanggongType
	Write8(p, 0); //HaveHelpedFriend
	Write32(p, 0); //SuiyuanIndex
	Write32(p, 0); //AwardTurkeyItemNums
	Write32(p, 0); //DailyAwardTurkeyNums
	Write32(p, 0); //DailyAwardYumaoNums

	len = p - buf;
	SendToClient(Client, 28301, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetSuperTurkeyFriendListInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetSuperTurkeyFriendListInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	{ //HelpedPlayerInfo
		BYTE* pHelpedPlayerInfo = p;
		Write16(pHelpedPlayerInfo, 0); //len

		Write32(pHelpedPlayerInfo, 0); //Uin
		Write8(pHelpedPlayerInfo, 0); //PlayeType
		WriteString(pHelpedPlayerInfo, 0); //NickName[]
		Write8(pHelpedPlayerInfo, 0); //PlayerGender

		len = pHelpedPlayerInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //PlayerInfoNums
	for (size_t i = 0; i < n; i++)
	{ //SuperTurkeyInteractPlayerInfos
		BYTE* pSuperTurkeyInteractPlayerInfos = p;
		Write16(pSuperTurkeyInteractPlayerInfos, 0); //len

		Write32(pSuperTurkeyInteractPlayerInfos, 0); //Uin
		Write8(pSuperTurkeyInteractPlayerInfos, 0); //PlayeType
		WriteString(pSuperTurkeyInteractPlayerInfos, 0); //NickName[]
		Write8(pSuperTurkeyInteractPlayerInfos, 0); //PlayerGender

		len = pSuperTurkeyInteractPlayerInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //DailyHelpedPlayerNums
	for (size_t i = 0; i < n; i++)
	{ //DailyHelpedPlayerInfos
		BYTE* pDailyHelpedPlayerInfos = p;
		Write16(pDailyHelpedPlayerInfos, 0); //len

		Write32(pDailyHelpedPlayerInfos, 0); //Uin
		Write8(pDailyHelpedPlayerInfos, 0); //PlayeType
		WriteString(pDailyHelpedPlayerInfos, 0); //NickName[]
		Write8(pDailyHelpedPlayerInfos, 0); //PlayerGender

		len = pDailyHelpedPlayerInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 28302, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestDoSuperTurkeyHelp(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	{ //InteractPlayerInfo
		BYTE* pInteractPlayerInfo = p;
		len = Read16(pInteractPlayerInfo);

		UINT Uin = Read32(pInteractPlayerInfo);
		UCHAR PlayeType = Read8(pInteractPlayerInfo);
		char[] NickName[] = ReadString(pInteractPlayerInfo);
		char PlayerGender = Read8(pInteractPlayerInfo);

		p += len;
	}

}

void ResponseDoSuperTrukeyHelp(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	{ //InteractPlayerInfo
		BYTE* pInteractPlayerInfo = p;
		Write16(pInteractPlayerInfo, 0); //len

		Write32(pInteractPlayerInfo, 0); //Uin
		Write8(pInteractPlayerInfo, 0); //PlayeType
		WriteString(pInteractPlayerInfo, 0); //NickName[]
		Write8(pInteractPlayerInfo, 0); //PlayerGender

		len = pInteractPlayerInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 28303, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetSuperTurkeyHelpedPlayerInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetSuperTurkeyHelpedPlayerInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //PlayerInfoNums
	for (size_t i = 0; i < n; i++)
	{ //InteractPlayerInfos
		BYTE* pInteractPlayerInfos = p;
		Write16(pInteractPlayerInfos, 0); //len

		Write32(pInteractPlayerInfos, 0); //Uin
		Write8(pInteractPlayerInfos, 0); //PlayeType
		WriteString(pInteractPlayerInfos, 0); //NickName[]
		Write8(pInteractPlayerInfos, 0); //PlayerGender

		len = pInteractPlayerInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 28304, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestDoSuperTurkeyShare(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	{ //SuperTurkeySharedInfo
		BYTE* pSuperTurkeySharedInfo = p;
		len = Read16(pSuperTurkeySharedInfo);

		{ //HelpedPlayerInfo
			BYTE* pHelpedPlayerInfo = pSuperTurkeySharedInfo;
			len = Read16(pHelpedPlayerInfo);

			UINT Uin = Read32(pHelpedPlayerInfo);
			UCHAR PlayeType = Read8(pHelpedPlayerInfo);
			char[] NickName[] = ReadString(pHelpedPlayerInfo);
			char PlayerGender = Read8(pHelpedPlayerInfo);

			pSuperTurkeySharedInfo += len;
		}
		UCHAR ShareType = Read8(pSuperTurkeySharedInfo);
		UINT ShareTime = Read32(pSuperTurkeySharedInfo);

		p += len;
	}

}

void ResponseDoSuperTurkeyShare(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 28305, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestReceSuperTurkeyShareAwardInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseReceSuperTurkeyShareAwardInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write8(p, 0); //HaveShareAward
	{ //AwardInfo
		BYTE* pAwardInfo = p;
		Write16(pAwardInfo, 0); //len

		Write32(pAwardInfo, 0); //Exp
		Write32(pAwardInfo, 0); //Money
		Write32(pAwardInfo, 0); //SuperMoney
		Write16(pAwardInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAwardInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAwardInfo;
			Set16(pAwardInfo, (WORD)len);
			pAwardInfo += len;
		}
		Write32(pAwardInfo, 0); //Coupons
		Write32(pAwardInfo, 0); //GuildPoint
		Write32(pAwardInfo, 0); //LuckMoney
		Write8(pAwardInfo, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAwardInfo;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAwardInfo;
			Set16(pAwardInfo, (WORD)len);
			pAwardInfo += len;
		}
		Write32(pAwardInfo, 0); //SpeedCoin

		len = pAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //DailyAwardTurkeyNums
	Write32(p, 0); //DailyAwardYumaoNums

	len = p - buf;
	SendToClient(Client, 28306, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyShuangRenCheGameEvent(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //GameEvent
	Write16(p, 0); //CfgNum
	for (size_t i = 0; i < n; i++)
	{ //GameCfg
		BYTE* pGameCfg = p;
		Write16(pGameCfg, 0); //len

		Write16(pGameCfg, 0); //PrepareTime
		Write16(pGameCfg, 0); //RefreshGhostTime
		Write16(pGameCfg, 0); //AfterRefreshGhostTime
		Write16(pGameCfg, 0); //RefreshGhostTimeInterVal
		Write16(pGameCfg, 0); //MonsterLifeCycle
		Write16(pGameCfg, 0); //MaxSkillPower
		Write16(pGameCfg, 0); //KillAddPowerValue
		Write16(pGameCfg, 0); //GatherN2OAddPowerValue
		Write16(pGameCfg, 0); //SkillSusTime
		Write16(pGameCfg, 0); //SpeedAddPercent
		Write16(pGameCfg, 0); //SpeedCalculDistance
		Write16(pGameCfg, 0); //BloodNum
		Write16(pGameCfg, 0); //ResumeTime
		Write16(pGameCfg, 0); //PropNum
		for (size_t i = 0; i < n; i++)
		{ //PropCfg
			BYTE* pPropCfg = pGameCfg;
			Write16(pPropCfg, 0); //len

			Write8(pPropCfg, 0); //Type
			Write16(pPropCfg, 0); //MaxNum
			Write16(pPropCfg, 0); //Num
			Write16(pPropCfg, 0); //Range
			Write16(pPropCfg, 0); //Radius
			Write16(pPropCfg, 0); //IncNum
			Write8(pPropCfg, 0); //ReloadBullet
			Write16(pPropCfg, 0); //LifeTime
			Write16(pPropCfg, 0); //CollisionBoxRadius
			Write16(pPropCfg, 0); //SpaceTime
			Write16(pPropCfg, 0); //UseTime

			len = pPropCfg - pGameCfg;
			Set16(pGameCfg, (WORD)len);
			pGameCfg += len;
		}
		Write16(pGameCfg, 0); //RefreshGhostWaitTime
		Write16(pGameCfg, 0); //RefreshBulletTime
		Write16(pGameCfg, 0); //HitDecBloodNum
		Write16(pGameCfg, 0); //KillAddN2OValue
		Write8(pGameCfg, 0); //PropNum
		Write16(pGameCfg, 0); //MapPropType[]
		Write16(pGameCfg, 0); //ShieldBloodNum
		Write16(pGameCfg, 0); //KillPlayerAddPowerValue
		Write16(pGameCfg, 0); //ShootPlayerAddPowerValue
		Write16(pGameCfg, 0); //BloodPackTime
		Write16(pGameCfg, 0); //CommonMonsterMaxDistance
		Write16(pGameCfg, 0); //OutStandMonsterMaxDistance
		Write16(pGameCfg, 0); //AwardMonsterMaxDistance
		Write16(pGameCfg, 0); //BeKilledAddPowerValue[]
		Write16(pGameCfg, 0); //BeShootedAddPowerValue
		Write16(pGameCfg, 0); //BeShootedHasShieldAddPowerValue
		Write16(pGameCfg, 0); //ShootedPlayerAddN2O
		Write16(pGameCfg, 0); //KillPlayerAddN2OValue[]
		Write16(pGameCfg, 0); //NormalMaxQuickLerpThrehold
		Write16(pGameCfg, 0); //FocusMaxQuickLerpTherehold

		len = pGameCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //MonsterInfoNum
	for (size_t i = 0; i < n; i++)
	{ //PlayerMonsterInfo
		BYTE* pPlayerMonsterInfo = p;
		Write16(pPlayerMonsterInfo, 0); //len

		Write16(pPlayerMonsterInfo, 0); //CommonMonsterNum
		Write16(pPlayerMonsterInfo, 0); //CommonMonsterBloodNum
		Write16(pPlayerMonsterInfo, 0); //OutStandMonsterNum
		Write16(pPlayerMonsterInfo, 0); //OutStandMonsterBloodNum
		Write16(pPlayerMonsterInfo, 0); //AwardMonsterNum
		Write16(pPlayerMonsterInfo, 0); //AwardMonsterBloodNum

		len = pPlayerMonsterInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //AllMonsterDetailInfoNum
	for (size_t i = 0; i < n; i++)
	{ //AllMonsterDetailInfo
		BYTE* pAllMonsterDetailInfo = p;
		Write16(pAllMonsterDetailInfo, 0); //len

		Write32(pAllMonsterDetailInfo, 0); //PlayerNum
		for (size_t i = 0; i < n; i++)
		{ //PlayerAllMonsterDetailInfo
			BYTE* pPlayerAllMonsterDetailInfo = pAllMonsterDetailInfo;
			Write16(pPlayerAllMonsterDetailInfo, 0); //len

			Write32(pPlayerAllMonsterDetailInfo, 0); //Uin
			Write16(pPlayerAllMonsterDetailInfo, 0); //MonsterTypeNum
			for (size_t i = 0; i < n; i++)
			{ //MonsterDetailInfo
				BYTE* pMonsterDetailInfo = pPlayerAllMonsterDetailInfo;
				Write16(pMonsterDetailInfo, 0); //len

				Write16(pMonsterDetailInfo, 0); //MonsterType
				Write16(pMonsterDetailInfo, 0); //MonsterNum
				for (size_t i = 0; i < n; i++)
				{ //MonsterPositionInfo
					BYTE* pMonsterPositionInfo = pMonsterDetailInfo;
					Write16(pMonsterPositionInfo, 0); //len

					Write32(pMonsterPositionInfo, 0); //X
					Write32(pMonsterPositionInfo, 0); //Y
					Write32(pMonsterPositionInfo, 0); //Z
					Write16(pMonsterPositionInfo, 0); //MonsterID
					Write32(pMonsterPositionInfo, 0); //Time
					Write32(pMonsterPositionInfo, 0); //ExtraX
					Write32(pMonsterPositionInfo, 0); //ExtraY
					Write32(pMonsterPositionInfo, 0); //ExtraZ
					Write16(pMonsterPositionInfo, 0); //MonsterBloodNum

					len = pMonsterPositionInfo - pMonsterDetailInfo;
					Set16(pMonsterDetailInfo, (WORD)len);
					pMonsterDetailInfo += len;
				}
				Write16(pMonsterDetailInfo, 0); //MonsterBloodNum

				len = pMonsterDetailInfo - pPlayerAllMonsterDetailInfo;
				Set16(pPlayerAllMonsterDetailInfo, (WORD)len);
				pPlayerAllMonsterDetailInfo += len;
			}

			len = pPlayerAllMonsterDetailInfo - pAllMonsterDetailInfo;
			Set16(pAllMonsterDetailInfo, (WORD)len);
			pAllMonsterDetailInfo += len;
		}

		len = pAllMonsterDetailInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //TargetUin
	Write16(p, 0); //BloodNum
	Write32(p, 0); //SrcUin
	Write16(p, 0); //CycleLifeOverMonsterNum
	Write32(p, 0); //MonsterList[]
	Write8(p, 0); //Idx
	Write32(p, 0); //MonsterId
	Write8(p, 0); //ValueChangeType
	Write32(p, 0); //ComboBloodNum

	len = p - buf;
	SendToClient(Client, 28235, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestShuangRenCheGetCarInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseShuangRenCheGetCarInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write8(p, 0); //CarNum
	Write32(p, 0); //CarList[]
	Write32(p, 0); //EquipedCarID

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestShuangRenCheEquipCar(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int EquipedCarID = Read32(p);

}

void ResponseShuangRenCheEquipCar(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write32(p, 0); //EquipedCarID

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestChangeRole(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	Un DstUin = ReadUn(p);

}

void NotifyChangeRole(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //Uin
	WriteUn(p, 0); //SrcUin

	len = p - buf;
	SendToClient(Client, 28239, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestResponseChangeRole(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	short ResultID = Read16(p);

}

void NotifyChangeRoleResult(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	WriteUn(p, 0); //Uin
	Write16(p, 0); //Role
	WriteUn(p, 0); //DstUin
	Write16(p, 0); //DstRole

	len = p - buf;
	SendToClient(Client, 28241, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestRefreshMonster(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT MonsterTypeNum = Read16(p);
	for (size_t i = 0; i < n; i++)
	{ //MonsterDetailInfo
		BYTE* pMonsterDetailInfo = p;
		len = Read16(pMonsterDetailInfo);

		USHORT MonsterType = Read16(pMonsterDetailInfo);
		short MonsterNum = Read16(pMonsterDetailInfo);
		for (size_t i = 0; i < n; i++)
		{ //MonsterPositionInfo
			BYTE* pMonsterPositionInfo = pMonsterDetailInfo;
			len = Read16(pMonsterPositionInfo);

			int X = Read32(pMonsterPositionInfo);
			int Y = Read32(pMonsterPositionInfo);
			int Z = Read32(pMonsterPositionInfo);
			USHORT MonsterID = Read16(pMonsterPositionInfo);
			UINT Time = Read32(pMonsterPositionInfo);
			int ExtraX = Read32(pMonsterPositionInfo);
			int ExtraY = Read32(pMonsterPositionInfo);
			int ExtraZ = Read32(pMonsterPositionInfo);
			USHORT MonsterBloodNum = Read16(pMonsterPositionInfo);

			pMonsterDetailInfo += len;
		}
		USHORT MonsterBloodNum = Read16(pMonsterDetailInfo);

		p += len;
	}

}

void ResponseRefreshMonster(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 28242, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestShuangRenCheExtraAward(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseShuangRenCheExtraAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //AwardNum
	for (size_t i = 0; i < n; i++)
	{ //AwardToClient
		BYTE* pAwardToClient = p;
		Write16(pAwardToClient, 0); //len

		Write32(pAwardToClient, 0); //Exp
		Write32(pAwardToClient, 0); //Money
		Write32(pAwardToClient, 0); //SuperMoney
		Write16(pAwardToClient, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAwardToClient;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAwardToClient;
			Set16(pAwardToClient, (WORD)len);
			pAwardToClient += len;
		}
		Write32(pAwardToClient, 0); //Coupons
		Write32(pAwardToClient, 0); //GuildPoint
		Write32(pAwardToClient, 0); //LuckMoney
		Write8(pAwardToClient, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAwardToClient;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAwardToClient;
			Set16(pAwardToClient, (WORD)len);
			pAwardToClient += len;
		}
		Write32(pAwardToClient, 0); //SpeedCoin

		len = pAwardToClient - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //Exp
	Write32(p, 0); //Money
	Write32(p, 0); //SuperMoney
	Write16(p, 0); //ItemNum
	for (size_t i = 0; i < n; i++)
	{ //ItemInfo
		BYTE* pItemInfo = p;
		Write16(pItemInfo, 0); //len

		Write32(pItemInfo, 0); //ItemID
		Write32(pItemInfo, 0); //ItemNum
		Write32(pItemInfo, 0); //AvailPeriod
		Write8(pItemInfo, 0); //Status
		WriteUn(pItemInfo, 0); //ObtainTime
		Write32(pItemInfo, 0); //OtherAttribute
		Write16(pItemInfo, 0); //ItemType

		len = pItemInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //Coupons
	Write32(p, 0); //GuildPoint
	Write32(p, 0); //LuckMoney
	Write8(p, 0); //ExtendInfoNum
	for (size_t i = 0; i < n; i++)
	{ //ExtendInfoAward
		BYTE* pExtendInfoAward = p;
		Write16(pExtendInfoAward, 0); //len

		Write16(pExtendInfoAward, 0); //Key
		Write32(pExtendInfoAward, 0); //AddValue
		Write32(pExtendInfoAward, 0); //TotalValue
		Write8(pExtendInfoAward, 0); //ShowPriority
		Write16(pExtendInfoAward, 0); //BuyNeedScore
		Write8(pExtendInfoAward, 0); //OneMatchMaxNum

		len = pExtendInfoAward - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //SpeedCoin

	len = p - buf;
	SendToClient(Client, 28243, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetGoldenBellShowInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetGoldenBellShowInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //ChanceGeneNums
	for (size_t i = 0; i < n; i++)
	{ //GoldenBellPartiChanceGeneInfos
		BYTE* pGoldenBellPartiChanceGeneInfos = p;
		Write16(pGoldenBellPartiChanceGeneInfos, 0); //len

		Write8(pGoldenBellPartiChanceGeneInfos, 0); //TaskID
		Write8(pGoldenBellPartiChanceGeneInfos, 0); //TaskPeriod
		Write32(pGoldenBellPartiChanceGeneInfos, 0); //AlreadyAwardNums
		Write32(pGoldenBellPartiChanceGeneInfos, 0); //AwardMoveNums
		Write32(pGoldenBellPartiChanceGeneInfos, 0); //TaskFinishNums
		Write32(pGoldenBellPartiChanceGeneInfos, 0); //TaskNeedValue

		len = pGoldenBellPartiChanceGeneInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //GoldenBellTag
	Write32(p, 0); //CurrentShakeBellLevel
	{ //NormalAwardInfo
		BYTE* pNormalAwardInfo = p;
		Write16(pNormalAwardInfo, 0); //len

		Write32(pNormalAwardInfo, 0); //Exp
		Write32(pNormalAwardInfo, 0); //Money
		Write32(pNormalAwardInfo, 0); //SuperMoney
		Write16(pNormalAwardInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pNormalAwardInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pNormalAwardInfo;
			Set16(pNormalAwardInfo, (WORD)len);
			pNormalAwardInfo += len;
		}
		Write32(pNormalAwardInfo, 0); //Coupons
		Write32(pNormalAwardInfo, 0); //GuildPoint
		Write32(pNormalAwardInfo, 0); //LuckMoney
		Write8(pNormalAwardInfo, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pNormalAwardInfo;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pNormalAwardInfo;
			Set16(pNormalAwardInfo, (WORD)len);
			pNormalAwardInfo += len;
		}
		Write32(pNormalAwardInfo, 0); //SpeedCoin

		len = pNormalAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //BestAwardInfo
		BYTE* pBestAwardInfo = p;
		Write16(pBestAwardInfo, 0); //len

		Write32(pBestAwardInfo, 0); //Exp
		Write32(pBestAwardInfo, 0); //Money
		Write32(pBestAwardInfo, 0); //SuperMoney
		Write16(pBestAwardInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pBestAwardInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pBestAwardInfo;
			Set16(pBestAwardInfo, (WORD)len);
			pBestAwardInfo += len;
		}
		Write32(pBestAwardInfo, 0); //Coupons
		Write32(pBestAwardInfo, 0); //GuildPoint
		Write32(pBestAwardInfo, 0); //LuckMoney
		Write8(pBestAwardInfo, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pBestAwardInfo;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pBestAwardInfo;
			Set16(pBestAwardInfo, (WORD)len);
			pBestAwardInfo += len;
		}
		Write32(pBestAwardInfo, 0); //SpeedCoin

		len = pBestAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //OpenTimeInfo
		BYTE* pOpenTimeInfo = p;
		Write16(pOpenTimeInfo, 0); //len

		Write32(pOpenTimeInfo, 0); //OpenDate
		Write32(pOpenTimeInfo, 0); //CloseDate
		Write32(pOpenTimeInfo, 0); //OpenTime
		Write32(pOpenTimeInfo, 0); //CloseTime

		len = pOpenTimeInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //CostItemID
	Write32(p, 0); //TotalShakeNums
	Write16(p, 0); //AwardLinyinCfgNums
	for (size_t i = 0; i < n; i++)
	{ //GoldenBellLingYinGeneCfgInfo
		BYTE* pGoldenBellLingYinGeneCfgInfo = p;
		Write16(pGoldenBellLingYinGeneCfgInfo, 0); //len

		Write32(pGoldenBellLingYinGeneCfgInfo, 0); //GoldenNums
		Write32(pGoldenBellLingYinGeneCfgInfo, 0); //AwardLingYinNums

		len = pGoldenBellLingYinGeneCfgInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //LinyinItemID

	len = p - buf;
	SendToClient(Client, 28307, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestShakeGoldBell(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseShakeGoldBell(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write8(p, 0); //ShakeGoldenOrNot
	Write32(p, 0); //GoldenBellTag
	Write32(p, 0); //CurrentShakeBellLevel
	{ //AwardInfo
		BYTE* pAwardInfo = p;
		Write16(pAwardInfo, 0); //len

		Write32(pAwardInfo, 0); //Exp
		Write32(pAwardInfo, 0); //Money
		Write32(pAwardInfo, 0); //SuperMoney
		Write16(pAwardInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAwardInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAwardInfo;
			Set16(pAwardInfo, (WORD)len);
			pAwardInfo += len;
		}
		Write32(pAwardInfo, 0); //Coupons
		Write32(pAwardInfo, 0); //GuildPoint
		Write32(pAwardInfo, 0); //LuckMoney
		Write8(pAwardInfo, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAwardInfo;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAwardInfo;
			Set16(pAwardInfo, (WORD)len);
			pAwardInfo += len;
		}
		Write32(pAwardInfo, 0); //SpeedCoin

		len = pAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //TotalShakeNums
	Write32(p, 0); //AwardLinItemNums

	len = p - buf;
	SendToClient(Client, 28308, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetFiveDaysExchangeCarsInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetFiveDaysExchangeCarsInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //AwardNums
	for (size_t i = 0; i < n; i++)
	{ //AwardInfos
		BYTE* pAwardInfos = p;
		Write16(pAwardInfos, 0); //len

		Write8(pAwardInfos, 0); //MapIndex
		Write16(pAwardInfos, 0); //AwardType
		Write16(pAwardInfos, 0); //AwardIndex
		Write16(pAwardInfos, 0); //EventAwardID
		{ //AwardItemInfo
			BYTE* pAwardItemInfo = pAwardInfos;
			Write16(pAwardItemInfo, 0); //len

			Write32(pAwardItemInfo, 0); //Exp
			Write32(pAwardItemInfo, 0); //Money
			Write32(pAwardItemInfo, 0); //SuperMoney
			Write16(pAwardItemInfo, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAwardItemInfo;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //Coupons
			Write32(pAwardItemInfo, 0); //GuildPoint
			Write32(pAwardItemInfo, 0); //LuckMoney
			Write8(pAwardItemInfo, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAwardItemInfo;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //SpeedCoin

			len = pAwardItemInfo - pAwardInfos;
			Set16(pAwardInfos, (WORD)len);
			pAwardInfos += len;
		}
		Write32(pAwardInfos, 0); //AwardRound
		Write32(pAwardInfos, 0); //AwardMaxNums
		Write32(pAwardInfos, 0); //AwardLowNums
		Write32(pAwardInfos, 0); //CurrentProcessValue
		Write32(pAwardInfos, 0); //AwardNeedProcessValue
		Write8(pAwardInfos, 0); //GetAward
		Write8(pAwardInfos, 0); //BestItemAward
		Write16(pAwardInfos, 0); //AwardExtraType
		Write32(pAwardInfos, 0); //ReceBeginDate
		Write32(pAwardInfos, 0); //ReceEndDate
		Write16(pAwardInfos, 0); //AwardPoolID
		Write8(pAwardInfos, 0); //AwardStatus

		len = pAwardInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //ChanceGeneNumsByDay
	for (size_t i = 0; i < n; i++)
	{ //PartiChanceGeneInfosByDay
		BYTE* pPartiChanceGeneInfosByDay = p;
		Write16(pPartiChanceGeneInfosByDay, 0); //len

		Write8(pPartiChanceGeneInfosByDay, 0); //TaskID
		Write8(pPartiChanceGeneInfosByDay, 0); //TaskPeriod
		Write32(pPartiChanceGeneInfosByDay, 0); //AlreadyAwardNums
		Write32(pPartiChanceGeneInfosByDay, 0); //AwardMoveNums
		Write32(pPartiChanceGeneInfosByDay, 0); //TaskFinishNums
		Write32(pPartiChanceGeneInfosByDay, 0); //TaskNeedValue

		len = pPartiChanceGeneInfosByDay - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //ChanceGeneNumsByWeek
	for (size_t i = 0; i < n; i++)
	{ //PartiChanceGeneInfosByWeek
		BYTE* pPartiChanceGeneInfosByWeek = p;
		Write16(pPartiChanceGeneInfosByWeek, 0); //len

		Write8(pPartiChanceGeneInfosByWeek, 0); //TaskID
		Write8(pPartiChanceGeneInfosByWeek, 0); //TaskPeriod
		Write32(pPartiChanceGeneInfosByWeek, 0); //AlreadyAwardNums
		Write32(pPartiChanceGeneInfosByWeek, 0); //AwardMoveNums
		Write32(pPartiChanceGeneInfosByWeek, 0); //TaskFinishNums
		Write32(pPartiChanceGeneInfosByWeek, 0); //TaskNeedValue

		len = pPartiChanceGeneInfosByWeek - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //OpenTimeInfo
		BYTE* pOpenTimeInfo = p;
		Write16(pOpenTimeInfo, 0); //len

		Write32(pOpenTimeInfo, 0); //OpenDate
		Write32(pOpenTimeInfo, 0); //CloseDate
		Write32(pOpenTimeInfo, 0); //OpenTime
		Write32(pOpenTimeInfo, 0); //CloseTime

		len = pOpenTimeInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //CostItemID
	Write32(p, 0); //CostItemNums
	Write32(p, 0); //CostItemNumsForOne
	Write32(p, 0); //CostItemNumsForFive
	Write32(p, 0); //ExchangeCarsItemID
	Write32(p, 0); //ExchangeCarsItemNums
	Write32(p, 0); //ExchangeCarsItemGetByToday
	Write32(p, 0); //ExchangeCarsItemGetByTotal
	Write32(p, 0); //DailyRemainingRefreshAwardNums
	Write8(p, 0); //PresentBoxVaild
	{ //WeekTaskDate
		BYTE* pWeekTaskDate = p;
		Write16(pWeekTaskDate, 0); //len

		Write32(pWeekTaskDate, 0); //StartDate
		Write32(pWeekTaskDate, 0); //EndDate

		len = pWeekTaskDate - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //TipLuckyEggInfo
	Write8(p, 0); //HaveLuckyEgg
	{ //LuckyEggInfo
		BYTE* pLuckyEggInfo = p;
		Write16(pLuckyEggInfo, 0); //len

		{ //OpenTimeInfo
			BYTE* pOpenTimeInfo = pLuckyEggInfo;
			Write16(pOpenTimeInfo, 0); //len

			Write32(pOpenTimeInfo, 0); //OpenDate
			Write32(pOpenTimeInfo, 0); //CloseDate
			Write32(pOpenTimeInfo, 0); //OpenTime
			Write32(pOpenTimeInfo, 0); //CloseTime

			len = pOpenTimeInfo - pLuckyEggInfo;
			Set16(pLuckyEggInfo, (WORD)len);
			pLuckyEggInfo += len;
		}
		{ //AwardInfo
			BYTE* pAwardInfo = pLuckyEggInfo;
			Write16(pAwardInfo, 0); //len

			Write32(pAwardInfo, 0); //Exp
			Write32(pAwardInfo, 0); //Money
			Write32(pAwardInfo, 0); //SuperMoney
			Write16(pAwardInfo, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAwardInfo;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAwardInfo;
				Set16(pAwardInfo, (WORD)len);
				pAwardInfo += len;
			}
			Write32(pAwardInfo, 0); //Coupons
			Write32(pAwardInfo, 0); //GuildPoint
			Write32(pAwardInfo, 0); //LuckMoney
			Write8(pAwardInfo, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAwardInfo;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAwardInfo;
				Set16(pAwardInfo, (WORD)len);
				pAwardInfo += len;
			}
			Write32(pAwardInfo, 0); //SpeedCoin

			len = pAwardInfo - pLuckyEggInfo;
			Set16(pLuckyEggInfo, (WORD)len);
			pLuckyEggInfo += len;
		}
		Write32(pLuckyEggInfo, 0); //NeedLoginTotal
		Write32(pLuckyEggInfo, 0); //HasLoginNum

		len = pLuckyEggInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 28371, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestFiveDaysExchangeCarsRefreshAwardInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT MapIndex = Read32(p);
	UINT AwardType = Read32(p);
	UINT AwardIndex = Read32(p);
	UCHAR RefreshType = Read8(p);

}

void ResponseFiveDaysExchangeCarsRefershAwardInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write32(p, 0); //MapIndex
	Write8(p, 0); //RefreshType
	Write16(p, 0); //AwardNums
	for (size_t i = 0; i < n; i++)
	{ //AwardInfo
		BYTE* pAwardInfo = p;
		Write16(pAwardInfo, 0); //len

		Write8(pAwardInfo, 0); //MapIndex
		Write16(pAwardInfo, 0); //AwardType
		Write16(pAwardInfo, 0); //AwardIndex
		Write16(pAwardInfo, 0); //EventAwardID
		{ //AwardItemInfo
			BYTE* pAwardItemInfo = pAwardInfo;
			Write16(pAwardItemInfo, 0); //len

			Write32(pAwardItemInfo, 0); //Exp
			Write32(pAwardItemInfo, 0); //Money
			Write32(pAwardItemInfo, 0); //SuperMoney
			Write16(pAwardItemInfo, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAwardItemInfo;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //Coupons
			Write32(pAwardItemInfo, 0); //GuildPoint
			Write32(pAwardItemInfo, 0); //LuckMoney
			Write8(pAwardItemInfo, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAwardItemInfo;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //SpeedCoin

			len = pAwardItemInfo - pAwardInfo;
			Set16(pAwardInfo, (WORD)len);
			pAwardInfo += len;
		}
		Write32(pAwardInfo, 0); //AwardRound
		Write32(pAwardInfo, 0); //AwardMaxNums
		Write32(pAwardInfo, 0); //AwardLowNums
		Write32(pAwardInfo, 0); //CurrentProcessValue
		Write32(pAwardInfo, 0); //AwardNeedProcessValue
		Write8(pAwardInfo, 0); //GetAward
		Write8(pAwardInfo, 0); //BestItemAward
		Write16(pAwardInfo, 0); //AwardExtraType
		Write32(pAwardInfo, 0); //ReceBeginDate
		Write32(pAwardInfo, 0); //ReceEndDate
		Write16(pAwardInfo, 0); //AwardPoolID
		Write8(pAwardInfo, 0); //AwardStatus

		len = pAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //DailyRemainingRefreshNums

	len = p - buf;
	SendToClient(Client, 28373, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestFiveDaysExchangeCarsDrawLottory(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT DrawTimes = Read32(p);

}

void ResponseFiveDaysExchangeCarsDrawLottory(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write8(p, 0); //GetCostItemNumsNow
	Write16(p, 0); //GetAwardNums
	for (size_t i = 0; i < n; i++)
	{ //ExtractAwardInfo
		BYTE* pExtractAwardInfo = p;
		Write16(pExtractAwardInfo, 0); //len

		Write8(pExtractAwardInfo, 0); //MapIndex
		Write16(pExtractAwardInfo, 0); //AwardType
		Write16(pExtractAwardInfo, 0); //AwardIndex
		Write16(pExtractAwardInfo, 0); //EventAwardID
		{ //AwardItemInfo
			BYTE* pAwardItemInfo = pExtractAwardInfo;
			Write16(pAwardItemInfo, 0); //len

			Write32(pAwardItemInfo, 0); //Exp
			Write32(pAwardItemInfo, 0); //Money
			Write32(pAwardItemInfo, 0); //SuperMoney
			Write16(pAwardItemInfo, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAwardItemInfo;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //Coupons
			Write32(pAwardItemInfo, 0); //GuildPoint
			Write32(pAwardItemInfo, 0); //LuckMoney
			Write8(pAwardItemInfo, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAwardItemInfo;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //SpeedCoin

			len = pAwardItemInfo - pExtractAwardInfo;
			Set16(pExtractAwardInfo, (WORD)len);
			pExtractAwardInfo += len;
		}
		Write32(pExtractAwardInfo, 0); //AwardRound
		Write32(pExtractAwardInfo, 0); //AwardMaxNums
		Write32(pExtractAwardInfo, 0); //AwardLowNums
		Write32(pExtractAwardInfo, 0); //CurrentProcessValue
		Write32(pExtractAwardInfo, 0); //AwardNeedProcessValue
		Write8(pExtractAwardInfo, 0); //GetAward
		Write8(pExtractAwardInfo, 0); //BestItemAward
		Write16(pExtractAwardInfo, 0); //AwardExtraType
		Write32(pExtractAwardInfo, 0); //ReceBeginDate
		Write32(pExtractAwardInfo, 0); //ReceEndDate
		Write16(pExtractAwardInfo, 0); //AwardPoolID
		Write8(pExtractAwardInfo, 0); //AwardStatus

		len = pExtractAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //NeedRefreshAward
	Write16(p, 0); //RefreshAwardNums
	for (size_t i = 0; i < n; i++)
	{ //FiveDaysExchangeCarsAwardInfos
		BYTE* pFiveDaysExchangeCarsAwardInfos = p;
		Write16(pFiveDaysExchangeCarsAwardInfos, 0); //len

		Write8(pFiveDaysExchangeCarsAwardInfos, 0); //MapIndex
		Write16(pFiveDaysExchangeCarsAwardInfos, 0); //AwardType
		Write16(pFiveDaysExchangeCarsAwardInfos, 0); //AwardIndex
		Write16(pFiveDaysExchangeCarsAwardInfos, 0); //EventAwardID
		{ //AwardItemInfo
			BYTE* pAwardItemInfo = pFiveDaysExchangeCarsAwardInfos;
			Write16(pAwardItemInfo, 0); //len

			Write32(pAwardItemInfo, 0); //Exp
			Write32(pAwardItemInfo, 0); //Money
			Write32(pAwardItemInfo, 0); //SuperMoney
			Write16(pAwardItemInfo, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAwardItemInfo;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //Coupons
			Write32(pAwardItemInfo, 0); //GuildPoint
			Write32(pAwardItemInfo, 0); //LuckMoney
			Write8(pAwardItemInfo, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAwardItemInfo;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //SpeedCoin

			len = pAwardItemInfo - pFiveDaysExchangeCarsAwardInfos;
			Set16(pFiveDaysExchangeCarsAwardInfos, (WORD)len);
			pFiveDaysExchangeCarsAwardInfos += len;
		}
		Write32(pFiveDaysExchangeCarsAwardInfos, 0); //AwardRound
		Write32(pFiveDaysExchangeCarsAwardInfos, 0); //AwardMaxNums
		Write32(pFiveDaysExchangeCarsAwardInfos, 0); //AwardLowNums
		Write32(pFiveDaysExchangeCarsAwardInfos, 0); //CurrentProcessValue
		Write32(pFiveDaysExchangeCarsAwardInfos, 0); //AwardNeedProcessValue
		Write8(pFiveDaysExchangeCarsAwardInfos, 0); //GetAward
		Write8(pFiveDaysExchangeCarsAwardInfos, 0); //BestItemAward
		Write16(pFiveDaysExchangeCarsAwardInfos, 0); //AwardExtraType
		Write32(pFiveDaysExchangeCarsAwardInfos, 0); //ReceBeginDate
		Write32(pFiveDaysExchangeCarsAwardInfos, 0); //ReceEndDate
		Write16(pFiveDaysExchangeCarsAwardInfos, 0); //AwardPoolID
		Write8(pFiveDaysExchangeCarsAwardInfos, 0); //AwardStatus

		len = pFiveDaysExchangeCarsAwardInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //RemainCostItemNums
	Write8(p, 0); //RemainRefreshTimes
	Write32(p, 0); //GetExchangeLottoryNumsToday
	Write32(p, 0); //GetExchangeLottoryNumsTotally

	len = p - buf;
	SendToClient(Client, 28372, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetSpecialActivityInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT ActID = Read32(p);

}

void ResponseGetSpecialActivityInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write32(p, 0); //ActID
	for (size_t i = 0; i < n; i++)
	{ //RabbitPurseMoonGetInfo
		BYTE* pRabbitPurseMoonGetInfo = p;
		Write16(pRabbitPurseMoonGetInfo, 0); //len

		Write16(pRabbitPurseMoonGetInfo, 0); //AwardNums
		for (size_t i = 0; i < n; i++)
		{ //AwardInfos
			BYTE* pAwardInfos = pRabbitPurseMoonGetInfo;
			Write16(pAwardInfos, 0); //len

			Write8(pAwardInfos, 0); //MapIndex
			Write16(pAwardInfos, 0); //AwardType
			Write16(pAwardInfos, 0); //AwardIndex
			Write16(pAwardInfos, 0); //EventAwardID
			{ //AwardItemInfo
				BYTE* pAwardItemInfo = pAwardInfos;
				Write16(pAwardItemInfo, 0); //len

				Write32(pAwardItemInfo, 0); //Exp
				Write32(pAwardItemInfo, 0); //Money
				Write32(pAwardItemInfo, 0); //SuperMoney
				Write16(pAwardItemInfo, 0); //ItemNum
				for (size_t i = 0; i < n; i++)
				{ //ItemInfo
					BYTE* pItemInfo = pAwardItemInfo;
					Write16(pItemInfo, 0); //len

					Write32(pItemInfo, 0); //ItemID
					Write32(pItemInfo, 0); //ItemNum
					Write32(pItemInfo, 0); //AvailPeriod
					Write8(pItemInfo, 0); //Status
					WriteUn(pItemInfo, 0); //ObtainTime
					Write32(pItemInfo, 0); //OtherAttribute
					Write16(pItemInfo, 0); //ItemType

					len = pItemInfo - pAwardItemInfo;
					Set16(pAwardItemInfo, (WORD)len);
					pAwardItemInfo += len;
				}
				Write32(pAwardItemInfo, 0); //Coupons
				Write32(pAwardItemInfo, 0); //GuildPoint
				Write32(pAwardItemInfo, 0); //LuckMoney
				Write8(pAwardItemInfo, 0); //ExtendInfoNum
				for (size_t i = 0; i < n; i++)
				{ //ExtendInfoAward
					BYTE* pExtendInfoAward = pAwardItemInfo;
					Write16(pExtendInfoAward, 0); //len

					Write16(pExtendInfoAward, 0); //Key
					Write32(pExtendInfoAward, 0); //AddValue
					Write32(pExtendInfoAward, 0); //TotalValue
					Write8(pExtendInfoAward, 0); //ShowPriority
					Write16(pExtendInfoAward, 0); //BuyNeedScore
					Write8(pExtendInfoAward, 0); //OneMatchMaxNum

					len = pExtendInfoAward - pAwardItemInfo;
					Set16(pAwardItemInfo, (WORD)len);
					pAwardItemInfo += len;
				}
				Write32(pAwardItemInfo, 0); //SpeedCoin

				len = pAwardItemInfo - pAwardInfos;
				Set16(pAwardInfos, (WORD)len);
				pAwardInfos += len;
			}
			Write32(pAwardInfos, 0); //AwardRound
			Write32(pAwardInfos, 0); //AwardMaxNums
			Write32(pAwardInfos, 0); //AwardLowNums
			Write32(pAwardInfos, 0); //CurrentProcessValue
			Write32(pAwardInfos, 0); //AwardNeedProcessValue
			Write8(pAwardInfos, 0); //GetAward
			Write8(pAwardInfos, 0); //BestItemAward
			Write16(pAwardInfos, 0); //AwardExtraType
			Write32(pAwardInfos, 0); //ReceBeginDate
			Write32(pAwardInfos, 0); //ReceEndDate
			Write16(pAwardInfos, 0); //AwardPoolID
			Write8(pAwardInfos, 0); //AwardStatus

			len = pAwardInfos - pRabbitPurseMoonGetInfo;
			Set16(pRabbitPurseMoonGetInfo, (WORD)len);
			pRabbitPurseMoonGetInfo += len;
		}
		Write16(pRabbitPurseMoonGetInfo, 0); //ChanceGeneNumsByDay
		for (size_t i = 0; i < n; i++)
		{ //PartiChanceGeneInfosByDay
			BYTE* pPartiChanceGeneInfosByDay = pRabbitPurseMoonGetInfo;
			Write16(pPartiChanceGeneInfosByDay, 0); //len

			Write8(pPartiChanceGeneInfosByDay, 0); //TaskID
			Write8(pPartiChanceGeneInfosByDay, 0); //TaskPeriod
			Write32(pPartiChanceGeneInfosByDay, 0); //AlreadyAwardNums
			Write32(pPartiChanceGeneInfosByDay, 0); //AwardMoveNums
			Write32(pPartiChanceGeneInfosByDay, 0); //TaskFinishNums
			Write32(pPartiChanceGeneInfosByDay, 0); //TaskNeedValue

			len = pPartiChanceGeneInfosByDay - pRabbitPurseMoonGetInfo;
			Set16(pRabbitPurseMoonGetInfo, (WORD)len);
			pRabbitPurseMoonGetInfo += len;
		}
		Write16(pRabbitPurseMoonGetInfo, 0); //ChanceGeneNumsByWeek
		for (size_t i = 0; i < n; i++)
		{ //PartiChanceGeneInfosByWeek
			BYTE* pPartiChanceGeneInfosByWeek = pRabbitPurseMoonGetInfo;
			Write16(pPartiChanceGeneInfosByWeek, 0); //len

			Write8(pPartiChanceGeneInfosByWeek, 0); //TaskID
			Write8(pPartiChanceGeneInfosByWeek, 0); //TaskPeriod
			Write32(pPartiChanceGeneInfosByWeek, 0); //AlreadyAwardNums
			Write32(pPartiChanceGeneInfosByWeek, 0); //AwardMoveNums
			Write32(pPartiChanceGeneInfosByWeek, 0); //TaskFinishNums
			Write32(pPartiChanceGeneInfosByWeek, 0); //TaskNeedValue

			len = pPartiChanceGeneInfosByWeek - pRabbitPurseMoonGetInfo;
			Set16(pRabbitPurseMoonGetInfo, (WORD)len);
			pRabbitPurseMoonGetInfo += len;
		}
		{ //OpenTimeInfo
			BYTE* pOpenTimeInfo = pRabbitPurseMoonGetInfo;
			Write16(pOpenTimeInfo, 0); //len

			Write32(pOpenTimeInfo, 0); //OpenDate
			Write32(pOpenTimeInfo, 0); //CloseDate
			Write32(pOpenTimeInfo, 0); //OpenTime
			Write32(pOpenTimeInfo, 0); //CloseTime

			len = pOpenTimeInfo - pRabbitPurseMoonGetInfo;
			Set16(pRabbitPurseMoonGetInfo, (WORD)len);
			pRabbitPurseMoonGetInfo += len;
		}
		Write32(pRabbitPurseMoonGetInfo, 0); //CostItemID
		Write32(pRabbitPurseMoonGetInfo, 0); //CostItemNums
		Write32(pRabbitPurseMoonGetInfo, 0); //CostItemNumsForOne
		Write32(pRabbitPurseMoonGetInfo, 0); //ExchangeItemID
		Write32(pRabbitPurseMoonGetInfo, 0); //ExchangeItemNums
		Write16(pRabbitPurseMoonGetInfo, 0); //ExchangeStatNum
		Write16(pRabbitPurseMoonGetInfo, 0); //ExchangeStat[]
		Write8(pRabbitPurseMoonGetInfo, 0); //CanExchangeIndex
		Write8(pRabbitPurseMoonGetInfo, 0); //IsPopWindow
		{ //LuckyTaskDate
			BYTE* pLuckyTaskDate = pRabbitPurseMoonGetInfo;
			Write16(pLuckyTaskDate, 0); //len

			Write32(pLuckyTaskDate, 0); //StartDate
			Write32(pLuckyTaskDate, 0); //EndDate

			len = pLuckyTaskDate - pRabbitPurseMoonGetInfo;
			Set16(pRabbitPurseMoonGetInfo, (WORD)len);
			pRabbitPurseMoonGetInfo += len;
		}
		Write8(pRabbitPurseMoonGetInfo, 0); //ShowDay

		len = pRabbitPurseMoonGetInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 28374, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestSpecialActivityDoLottery(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT ActID = Read32(p);

}

void ResponseSpecialActivityDoLottery(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write32(p, 0); //ActID
	for (size_t i = 0; i < n; i++)
	{ //RabbitPurseMoonDoLottery
		BYTE* pRabbitPurseMoonDoLottery = p;
		Write16(pRabbitPurseMoonDoLottery, 0); //len

		Write8(pRabbitPurseMoonDoLottery, 0); //GetMileageNow
		Write32(pRabbitPurseMoonDoLottery, 0); //ExchangeItemNums
		{ //ExtractAwardInfo
			BYTE* pExtractAwardInfo = pRabbitPurseMoonDoLottery;
			Write16(pExtractAwardInfo, 0); //len

			Write8(pExtractAwardInfo, 0); //MapIndex
			Write16(pExtractAwardInfo, 0); //AwardType
			Write16(pExtractAwardInfo, 0); //AwardIndex
			Write16(pExtractAwardInfo, 0); //EventAwardID
			{ //AwardItemInfo
				BYTE* pAwardItemInfo = pExtractAwardInfo;
				Write16(pAwardItemInfo, 0); //len

				Write32(pAwardItemInfo, 0); //Exp
				Write32(pAwardItemInfo, 0); //Money
				Write32(pAwardItemInfo, 0); //SuperMoney
				Write16(pAwardItemInfo, 0); //ItemNum
				for (size_t i = 0; i < n; i++)
				{ //ItemInfo
					BYTE* pItemInfo = pAwardItemInfo;
					Write16(pItemInfo, 0); //len

					Write32(pItemInfo, 0); //ItemID
					Write32(pItemInfo, 0); //ItemNum
					Write32(pItemInfo, 0); //AvailPeriod
					Write8(pItemInfo, 0); //Status
					WriteUn(pItemInfo, 0); //ObtainTime
					Write32(pItemInfo, 0); //OtherAttribute
					Write16(pItemInfo, 0); //ItemType

					len = pItemInfo - pAwardItemInfo;
					Set16(pAwardItemInfo, (WORD)len);
					pAwardItemInfo += len;
				}
				Write32(pAwardItemInfo, 0); //Coupons
				Write32(pAwardItemInfo, 0); //GuildPoint
				Write32(pAwardItemInfo, 0); //LuckMoney
				Write8(pAwardItemInfo, 0); //ExtendInfoNum
				for (size_t i = 0; i < n; i++)
				{ //ExtendInfoAward
					BYTE* pExtendInfoAward = pAwardItemInfo;
					Write16(pExtendInfoAward, 0); //len

					Write16(pExtendInfoAward, 0); //Key
					Write32(pExtendInfoAward, 0); //AddValue
					Write32(pExtendInfoAward, 0); //TotalValue
					Write8(pExtendInfoAward, 0); //ShowPriority
					Write16(pExtendInfoAward, 0); //BuyNeedScore
					Write8(pExtendInfoAward, 0); //OneMatchMaxNum

					len = pExtendInfoAward - pAwardItemInfo;
					Set16(pAwardItemInfo, (WORD)len);
					pAwardItemInfo += len;
				}
				Write32(pAwardItemInfo, 0); //SpeedCoin

				len = pAwardItemInfo - pExtractAwardInfo;
				Set16(pExtractAwardInfo, (WORD)len);
				pExtractAwardInfo += len;
			}
			Write32(pExtractAwardInfo, 0); //AwardRound
			Write32(pExtractAwardInfo, 0); //AwardMaxNums
			Write32(pExtractAwardInfo, 0); //AwardLowNums
			Write32(pExtractAwardInfo, 0); //CurrentProcessValue
			Write32(pExtractAwardInfo, 0); //AwardNeedProcessValue
			Write8(pExtractAwardInfo, 0); //GetAward
			Write8(pExtractAwardInfo, 0); //BestItemAward
			Write16(pExtractAwardInfo, 0); //AwardExtraType
			Write32(pExtractAwardInfo, 0); //ReceBeginDate
			Write32(pExtractAwardInfo, 0); //ReceEndDate
			Write16(pExtractAwardInfo, 0); //AwardPoolID
			Write8(pExtractAwardInfo, 0); //AwardStatus

			len = pExtractAwardInfo - pRabbitPurseMoonDoLottery;
			Set16(pRabbitPurseMoonDoLottery, (WORD)len);
			pRabbitPurseMoonDoLottery += len;
		}
		Write8(pRabbitPurseMoonDoLottery, 0); //NeedRefreshAward
		Write16(pRabbitPurseMoonDoLottery, 0); //RefreshAwardNums
		for (size_t i = 0; i < n; i++)
		{ //FiveDaysExchangeCarsAwardInfos
			BYTE* pFiveDaysExchangeCarsAwardInfos = pRabbitPurseMoonDoLottery;
			Write16(pFiveDaysExchangeCarsAwardInfos, 0); //len

			Write8(pFiveDaysExchangeCarsAwardInfos, 0); //MapIndex
			Write16(pFiveDaysExchangeCarsAwardInfos, 0); //AwardType
			Write16(pFiveDaysExchangeCarsAwardInfos, 0); //AwardIndex
			Write16(pFiveDaysExchangeCarsAwardInfos, 0); //EventAwardID
			{ //AwardItemInfo
				BYTE* pAwardItemInfo = pFiveDaysExchangeCarsAwardInfos;
				Write16(pAwardItemInfo, 0); //len

				Write32(pAwardItemInfo, 0); //Exp
				Write32(pAwardItemInfo, 0); //Money
				Write32(pAwardItemInfo, 0); //SuperMoney
				Write16(pAwardItemInfo, 0); //ItemNum
				for (size_t i = 0; i < n; i++)
				{ //ItemInfo
					BYTE* pItemInfo = pAwardItemInfo;
					Write16(pItemInfo, 0); //len

					Write32(pItemInfo, 0); //ItemID
					Write32(pItemInfo, 0); //ItemNum
					Write32(pItemInfo, 0); //AvailPeriod
					Write8(pItemInfo, 0); //Status
					WriteUn(pItemInfo, 0); //ObtainTime
					Write32(pItemInfo, 0); //OtherAttribute
					Write16(pItemInfo, 0); //ItemType

					len = pItemInfo - pAwardItemInfo;
					Set16(pAwardItemInfo, (WORD)len);
					pAwardItemInfo += len;
				}
				Write32(pAwardItemInfo, 0); //Coupons
				Write32(pAwardItemInfo, 0); //GuildPoint
				Write32(pAwardItemInfo, 0); //LuckMoney
				Write8(pAwardItemInfo, 0); //ExtendInfoNum
				for (size_t i = 0; i < n; i++)
				{ //ExtendInfoAward
					BYTE* pExtendInfoAward = pAwardItemInfo;
					Write16(pExtendInfoAward, 0); //len

					Write16(pExtendInfoAward, 0); //Key
					Write32(pExtendInfoAward, 0); //AddValue
					Write32(pExtendInfoAward, 0); //TotalValue
					Write8(pExtendInfoAward, 0); //ShowPriority
					Write16(pExtendInfoAward, 0); //BuyNeedScore
					Write8(pExtendInfoAward, 0); //OneMatchMaxNum

					len = pExtendInfoAward - pAwardItemInfo;
					Set16(pAwardItemInfo, (WORD)len);
					pAwardItemInfo += len;
				}
				Write32(pAwardItemInfo, 0); //SpeedCoin

				len = pAwardItemInfo - pFiveDaysExchangeCarsAwardInfos;
				Set16(pFiveDaysExchangeCarsAwardInfos, (WORD)len);
				pFiveDaysExchangeCarsAwardInfos += len;
			}
			Write32(pFiveDaysExchangeCarsAwardInfos, 0); //AwardRound
			Write32(pFiveDaysExchangeCarsAwardInfos, 0); //AwardMaxNums
			Write32(pFiveDaysExchangeCarsAwardInfos, 0); //AwardLowNums
			Write32(pFiveDaysExchangeCarsAwardInfos, 0); //CurrentProcessValue
			Write32(pFiveDaysExchangeCarsAwardInfos, 0); //AwardNeedProcessValue
			Write8(pFiveDaysExchangeCarsAwardInfos, 0); //GetAward
			Write8(pFiveDaysExchangeCarsAwardInfos, 0); //BestItemAward
			Write16(pFiveDaysExchangeCarsAwardInfos, 0); //AwardExtraType
			Write32(pFiveDaysExchangeCarsAwardInfos, 0); //ReceBeginDate
			Write32(pFiveDaysExchangeCarsAwardInfos, 0); //ReceEndDate
			Write16(pFiveDaysExchangeCarsAwardInfos, 0); //AwardPoolID
			Write8(pFiveDaysExchangeCarsAwardInfos, 0); //AwardStatus

			len = pFiveDaysExchangeCarsAwardInfos - pRabbitPurseMoonDoLottery;
			Set16(pRabbitPurseMoonDoLottery, (WORD)len);
			pRabbitPurseMoonDoLottery += len;
		}
		Write32(pRabbitPurseMoonDoLottery, 0); //RemainCostItemNums

		len = pRabbitPurseMoonDoLottery - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 28375, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestRecePresentBoxItem(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT AwardType = Read32(p);
	UINT AwardIndex = Read32(p);
	UINT AwardPoolID = Read32(p);

}

void ResponseRecePresentBoxItem(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	{ //AwardInfo
		BYTE* pAwardInfo = p;
		Write16(pAwardInfo, 0); //len

		Write32(pAwardInfo, 0); //Exp
		Write32(pAwardInfo, 0); //Money
		Write32(pAwardInfo, 0); //SuperMoney
		Write16(pAwardInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAwardInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAwardInfo;
			Set16(pAwardInfo, (WORD)len);
			pAwardInfo += len;
		}
		Write32(pAwardInfo, 0); //Coupons
		Write32(pAwardInfo, 0); //GuildPoint
		Write32(pAwardInfo, 0); //LuckMoney
		Write8(pAwardInfo, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAwardInfo;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAwardInfo;
			Set16(pAwardInfo, (WORD)len);
			pAwardInfo += len;
		}
		Write32(pAwardInfo, 0); //SpeedCoin

		len = pAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 28313, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestFindBackAniversaryCoin(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseFindBackAniversaryCoin(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	{ //AwardInfo
		BYTE* pAwardInfo = p;
		Write16(pAwardInfo, 0); //len

		Write32(pAwardInfo, 0); //Exp
		Write32(pAwardInfo, 0); //Money
		Write32(pAwardInfo, 0); //SuperMoney
		Write16(pAwardInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAwardInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAwardInfo;
			Set16(pAwardInfo, (WORD)len);
			pAwardInfo += len;
		}
		Write32(pAwardInfo, 0); //Coupons
		Write32(pAwardInfo, 0); //GuildPoint
		Write32(pAwardInfo, 0); //LuckMoney
		Write8(pAwardInfo, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAwardInfo;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAwardInfo;
			Set16(pAwardInfo, (WORD)len);
			pAwardInfo += len;
		}
		Write32(pAwardInfo, 0); //SpeedCoin

		len = pAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //RemainingFindBackNums

	len = p - buf;
	SendToClient(Client, 28314, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestElevenAniversaryPresentShowInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseElevenAniversaryPresentShowInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //AwardNums
	for (size_t i = 0; i < n; i++)
	{ //ElevenAniversaryAwardInfos
		BYTE* pElevenAniversaryAwardInfos = p;
		Write16(pElevenAniversaryAwardInfos, 0); //len

		Write8(pElevenAniversaryAwardInfos, 0); //MapIndex
		Write16(pElevenAniversaryAwardInfos, 0); //AwardType
		Write16(pElevenAniversaryAwardInfos, 0); //AwardIndex
		Write16(pElevenAniversaryAwardInfos, 0); //EventAwardID
		{ //AwardItemInfo
			BYTE* pAwardItemInfo = pElevenAniversaryAwardInfos;
			Write16(pAwardItemInfo, 0); //len

			Write32(pAwardItemInfo, 0); //Exp
			Write32(pAwardItemInfo, 0); //Money
			Write32(pAwardItemInfo, 0); //SuperMoney
			Write16(pAwardItemInfo, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAwardItemInfo;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //Coupons
			Write32(pAwardItemInfo, 0); //GuildPoint
			Write32(pAwardItemInfo, 0); //LuckMoney
			Write8(pAwardItemInfo, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAwardItemInfo;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //SpeedCoin

			len = pAwardItemInfo - pElevenAniversaryAwardInfos;
			Set16(pElevenAniversaryAwardInfos, (WORD)len);
			pElevenAniversaryAwardInfos += len;
		}
		Write32(pElevenAniversaryAwardInfos, 0); //AwardRound
		Write32(pElevenAniversaryAwardInfos, 0); //AwardMaxNums
		Write32(pElevenAniversaryAwardInfos, 0); //AwardLowNums
		Write32(pElevenAniversaryAwardInfos, 0); //CurrentProcessValue
		Write32(pElevenAniversaryAwardInfos, 0); //AwardNeedProcessValue
		Write8(pElevenAniversaryAwardInfos, 0); //GetAward
		Write8(pElevenAniversaryAwardInfos, 0); //BestItemAward
		Write16(pElevenAniversaryAwardInfos, 0); //AwardExtraType
		Write32(pElevenAniversaryAwardInfos, 0); //ReceBeginDate
		Write32(pElevenAniversaryAwardInfos, 0); //ReceEndDate
		Write16(pElevenAniversaryAwardInfos, 0); //AwardPoolID
		Write8(pElevenAniversaryAwardInfos, 0); //AwardStatus

		len = pElevenAniversaryAwardInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //ChanceGeneNums
	for (size_t i = 0; i < n; i++)
	{ //ElevenAniversaryPartiChanceGeneInfos
		BYTE* pElevenAniversaryPartiChanceGeneInfos = p;
		Write16(pElevenAniversaryPartiChanceGeneInfos, 0); //len

		Write8(pElevenAniversaryPartiChanceGeneInfos, 0); //TaskID
		Write8(pElevenAniversaryPartiChanceGeneInfos, 0); //TaskPeriod
		Write32(pElevenAniversaryPartiChanceGeneInfos, 0); //AlreadyAwardNums
		Write32(pElevenAniversaryPartiChanceGeneInfos, 0); //AwardMoveNums
		Write32(pElevenAniversaryPartiChanceGeneInfos, 0); //TaskFinishNums
		Write32(pElevenAniversaryPartiChanceGeneInfos, 0); //TaskNeedValue

		len = pElevenAniversaryPartiChanceGeneInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //OpenTimeInfo
		BYTE* pOpenTimeInfo = p;
		Write16(pOpenTimeInfo, 0); //len

		Write32(pOpenTimeInfo, 0); //OpenDate
		Write32(pOpenTimeInfo, 0); //CloseDate
		Write32(pOpenTimeInfo, 0); //OpenTime
		Write32(pOpenTimeInfo, 0); //CloseTime

		len = pOpenTimeInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //PresentBoxOpenTimeInfo
		BYTE* pPresentBoxOpenTimeInfo = p;
		Write16(pPresentBoxOpenTimeInfo, 0); //len

		Write32(pPresentBoxOpenTimeInfo, 0); //OpenDate
		Write32(pPresentBoxOpenTimeInfo, 0); //CloseDate
		Write32(pPresentBoxOpenTimeInfo, 0); //OpenTime
		Write32(pPresentBoxOpenTimeInfo, 0); //CloseTime

		len = pPresentBoxOpenTimeInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //CostItemID
	Write32(p, 0); //AniversaryCoinItemID
	Write32(p, 0); //CurrentMakeWishLevel
	Write16(p, 0); //MakeWishAddBufferLevelNums
	Write32(p, 0); //ArrayAddBufferLevel[]
	Write16(p, 0); //ExtraAwardGeneInfoNums
	for (size_t i = 0; i < n; i++)
	{ //SpecialActExtraAwardItemGeneInfos
		BYTE* pSpecialActExtraAwardItemGeneInfos = p;
		Write16(pSpecialActExtraAwardItemGeneInfos, 0); //len

		Write32(pSpecialActExtraAwardItemGeneInfos, 0); //AwardMaxNums
		Write32(pSpecialActExtraAwardItemGeneInfos, 0); //AwardLowNums
		Write32(pSpecialActExtraAwardItemGeneInfos, 0); //ExtractLevel

		len = pSpecialActExtraAwardItemGeneInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //DailyRemainingRefreshAwardNums
	Write32(p, 0); //DailyAwardAniversaryCoinNums
	Write32(p, 0); //PresentBoxCurrentItemNums
	Write8(p, 0); //TipLuckyEggInfo
	Write8(p, 0); //HaveLuckyEgg
	{ //ElevenAniversaryLuckyEggInfo
		BYTE* pElevenAniversaryLuckyEggInfo = p;
		Write16(pElevenAniversaryLuckyEggInfo, 0); //len

		Write16(pElevenAniversaryLuckyEggInfo, 0); //EggType
		Write32(pElevenAniversaryLuckyEggInfo, 0); //DirectAwardCoinNums
		Write32(pElevenAniversaryLuckyEggInfo, 0); //LoginOpenDate
		Write32(pElevenAniversaryLuckyEggInfo, 0); //LoginCloseDate
		Write16(pElevenAniversaryLuckyEggInfo, 0); //LoginAwardNums
		for (size_t i = 0; i < n; i++)
		{ //EleventAniversaryAwardCoinInfos
			BYTE* pEleventAniversaryAwardCoinInfos = pElevenAniversaryLuckyEggInfo;
			Write16(pEleventAniversaryAwardCoinInfos, 0); //len

			Write32(pEleventAniversaryAwardCoinInfos, 0); //LoginNums
			Write32(pEleventAniversaryAwardCoinInfos, 0); //AwardNums
			Write8(pEleventAniversaryAwardCoinInfos, 0); //HaveAwarded
			Write32(pEleventAniversaryAwardCoinInfos, 0); //FinishNeedLoginNums

			len = pEleventAniversaryAwardCoinInfos - pElevenAniversaryLuckyEggInfo;
			Set16(pElevenAniversaryLuckyEggInfo, (WORD)len);
			pElevenAniversaryLuckyEggInfo += len;
		}
		Write32(pElevenAniversaryLuckyEggInfo, 0); //LuckyEggRemainingTime
		Write32(pElevenAniversaryLuckyEggInfo, 0); //OnlineMinutesForReceCoin
		Write32(pElevenAniversaryLuckyEggInfo, 0); //CurrentOnlineTime
		Write32(pElevenAniversaryLuckyEggInfo, 0); //CanReceNums
		Write32(pElevenAniversaryLuckyEggInfo, 0); //ReceLimitRound
		Write8(pElevenAniversaryLuckyEggInfo, 0); //CanRece
		Write32(pElevenAniversaryLuckyEggInfo, 0); //CurrentReceNums
		Write32(pElevenAniversaryLuckyEggInfo, 0); //EggInvalidDate
		Write32(pElevenAniversaryLuckyEggInfo, 0); //ReceLuckyEggTime
		Write8(pElevenAniversaryLuckyEggInfo, 0); //Finished

		len = pElevenAniversaryLuckyEggInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 28309, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetElevenAniversaryLuckyEggInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetElevenAniversaryLuckyEggInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write32(p, 0); //ActID
	Write8(p, 0); //TipLuckyEggInfo
	Write8(p, 0); //HaveLuckyEgg
	{ //ElevenAniversaryLuckyEggInfo
		BYTE* pElevenAniversaryLuckyEggInfo = p;
		Write16(pElevenAniversaryLuckyEggInfo, 0); //len

		Write16(pElevenAniversaryLuckyEggInfo, 0); //EggType
		Write32(pElevenAniversaryLuckyEggInfo, 0); //DirectAwardCoinNums
		Write32(pElevenAniversaryLuckyEggInfo, 0); //LoginOpenDate
		Write32(pElevenAniversaryLuckyEggInfo, 0); //LoginCloseDate
		Write16(pElevenAniversaryLuckyEggInfo, 0); //LoginAwardNums
		for (size_t i = 0; i < n; i++)
		{ //EleventAniversaryAwardCoinInfos
			BYTE* pEleventAniversaryAwardCoinInfos = pElevenAniversaryLuckyEggInfo;
			Write16(pEleventAniversaryAwardCoinInfos, 0); //len

			Write32(pEleventAniversaryAwardCoinInfos, 0); //LoginNums
			Write32(pEleventAniversaryAwardCoinInfos, 0); //AwardNums
			Write8(pEleventAniversaryAwardCoinInfos, 0); //HaveAwarded
			Write32(pEleventAniversaryAwardCoinInfos, 0); //FinishNeedLoginNums

			len = pEleventAniversaryAwardCoinInfos - pElevenAniversaryLuckyEggInfo;
			Set16(pElevenAniversaryLuckyEggInfo, (WORD)len);
			pElevenAniversaryLuckyEggInfo += len;
		}
		Write32(pElevenAniversaryLuckyEggInfo, 0); //LuckyEggRemainingTime
		Write32(pElevenAniversaryLuckyEggInfo, 0); //OnlineMinutesForReceCoin
		Write32(pElevenAniversaryLuckyEggInfo, 0); //CurrentOnlineTime
		Write32(pElevenAniversaryLuckyEggInfo, 0); //CanReceNums
		Write32(pElevenAniversaryLuckyEggInfo, 0); //ReceLimitRound
		Write8(pElevenAniversaryLuckyEggInfo, 0); //CanRece
		Write32(pElevenAniversaryLuckyEggInfo, 0); //CurrentReceNums
		Write32(pElevenAniversaryLuckyEggInfo, 0); //EggInvalidDate
		Write32(pElevenAniversaryLuckyEggInfo, 0); //ReceLuckyEggTime
		Write8(pElevenAniversaryLuckyEggInfo, 0); //Finished

		len = pElevenAniversaryLuckyEggInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 28315, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestDoElevenAniversaryMakeWish(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT AwardSeq = Read32(p);

}

void ResponseDoElevenAniversaryMakeWish(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write8(p, 0); //ExtractSuccOrNot
	{ //ExtractAwardInfo
		BYTE* pExtractAwardInfo = p;
		Write16(pExtractAwardInfo, 0); //len

		Write8(pExtractAwardInfo, 0); //MapIndex
		Write16(pExtractAwardInfo, 0); //AwardType
		Write16(pExtractAwardInfo, 0); //AwardIndex
		Write16(pExtractAwardInfo, 0); //EventAwardID
		{ //AwardItemInfo
			BYTE* pAwardItemInfo = pExtractAwardInfo;
			Write16(pAwardItemInfo, 0); //len

			Write32(pAwardItemInfo, 0); //Exp
			Write32(pAwardItemInfo, 0); //Money
			Write32(pAwardItemInfo, 0); //SuperMoney
			Write16(pAwardItemInfo, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAwardItemInfo;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //Coupons
			Write32(pAwardItemInfo, 0); //GuildPoint
			Write32(pAwardItemInfo, 0); //LuckMoney
			Write8(pAwardItemInfo, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAwardItemInfo;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //SpeedCoin

			len = pAwardItemInfo - pExtractAwardInfo;
			Set16(pExtractAwardInfo, (WORD)len);
			pExtractAwardInfo += len;
		}
		Write32(pExtractAwardInfo, 0); //AwardRound
		Write32(pExtractAwardInfo, 0); //AwardMaxNums
		Write32(pExtractAwardInfo, 0); //AwardLowNums
		Write32(pExtractAwardInfo, 0); //CurrentProcessValue
		Write32(pExtractAwardInfo, 0); //AwardNeedProcessValue
		Write8(pExtractAwardInfo, 0); //GetAward
		Write8(pExtractAwardInfo, 0); //BestItemAward
		Write16(pExtractAwardInfo, 0); //AwardExtraType
		Write32(pExtractAwardInfo, 0); //ReceBeginDate
		Write32(pExtractAwardInfo, 0); //ReceEndDate
		Write16(pExtractAwardInfo, 0); //AwardPoolID
		Write8(pExtractAwardInfo, 0); //AwardStatus

		len = pExtractAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //NeedRefreshAward
	Write16(p, 0); //RefreshAwardNums
	for (size_t i = 0; i < n; i++)
	{ //ElevenAniversaryAwardInfos
		BYTE* pElevenAniversaryAwardInfos = p;
		Write16(pElevenAniversaryAwardInfos, 0); //len

		Write8(pElevenAniversaryAwardInfos, 0); //MapIndex
		Write16(pElevenAniversaryAwardInfos, 0); //AwardType
		Write16(pElevenAniversaryAwardInfos, 0); //AwardIndex
		Write16(pElevenAniversaryAwardInfos, 0); //EventAwardID
		{ //AwardItemInfo
			BYTE* pAwardItemInfo = pElevenAniversaryAwardInfos;
			Write16(pAwardItemInfo, 0); //len

			Write32(pAwardItemInfo, 0); //Exp
			Write32(pAwardItemInfo, 0); //Money
			Write32(pAwardItemInfo, 0); //SuperMoney
			Write16(pAwardItemInfo, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAwardItemInfo;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //Coupons
			Write32(pAwardItemInfo, 0); //GuildPoint
			Write32(pAwardItemInfo, 0); //LuckMoney
			Write8(pAwardItemInfo, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAwardItemInfo;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //SpeedCoin

			len = pAwardItemInfo - pElevenAniversaryAwardInfos;
			Set16(pElevenAniversaryAwardInfos, (WORD)len);
			pElevenAniversaryAwardInfos += len;
		}
		Write32(pElevenAniversaryAwardInfos, 0); //AwardRound
		Write32(pElevenAniversaryAwardInfos, 0); //AwardMaxNums
		Write32(pElevenAniversaryAwardInfos, 0); //AwardLowNums
		Write32(pElevenAniversaryAwardInfos, 0); //CurrentProcessValue
		Write32(pElevenAniversaryAwardInfos, 0); //AwardNeedProcessValue
		Write8(pElevenAniversaryAwardInfos, 0); //GetAward
		Write8(pElevenAniversaryAwardInfos, 0); //BestItemAward
		Write16(pElevenAniversaryAwardInfos, 0); //AwardExtraType
		Write32(pElevenAniversaryAwardInfos, 0); //ReceBeginDate
		Write32(pElevenAniversaryAwardInfos, 0); //ReceEndDate
		Write16(pElevenAniversaryAwardInfos, 0); //AwardPoolID
		Write8(pElevenAniversaryAwardInfos, 0); //AwardStatus

		len = pElevenAniversaryAwardInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //CurrentMakeWishLevel
	Write32(p, 0); //DailyRemainingRefreshAwardNums
	Write32(p, 0); //DailyAwardAniversaryCoinNums
	Write8(p, 0); //HaveAwardAniversaryCoin
	{ //AniversaryCoinAward
		BYTE* pAniversaryCoinAward = p;
		Write16(pAniversaryCoinAward, 0); //len

		Write32(pAniversaryCoinAward, 0); //Exp
		Write32(pAniversaryCoinAward, 0); //Money
		Write32(pAniversaryCoinAward, 0); //SuperMoney
		Write16(pAniversaryCoinAward, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAniversaryCoinAward;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAniversaryCoinAward;
			Set16(pAniversaryCoinAward, (WORD)len);
			pAniversaryCoinAward += len;
		}
		Write32(pAniversaryCoinAward, 0); //Coupons
		Write32(pAniversaryCoinAward, 0); //GuildPoint
		Write32(pAniversaryCoinAward, 0); //LuckMoney
		Write8(pAniversaryCoinAward, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAniversaryCoinAward;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAniversaryCoinAward;
			Set16(pAniversaryCoinAward, (WORD)len);
			pAniversaryCoinAward += len;
		}
		Write32(pAniversaryCoinAward, 0); //SpeedCoin

		len = pAniversaryCoinAward - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //ReceMakeWishAwardBeginDate
	Write32(p, 0); //ReceMakeWishAwardEndDate
	Write32(p, 0); //ReceMakeWishAwardNeedLoginNums

	len = p - buf;
	SendToClient(Client, 28310, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestElevenAniversaryPresentBoxInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseElevenAniversaryPresentBoxInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write32(p, 0); //ActID
	Write16(p, 0); //PresentBoxAwardNums
	for (size_t i = 0; i < n; i++)
	{ //PresentBoxAwardInfos
		BYTE* pPresentBoxAwardInfos = p;
		Write16(pPresentBoxAwardInfos, 0); //len

		Write8(pPresentBoxAwardInfos, 0); //MapIndex
		Write16(pPresentBoxAwardInfos, 0); //AwardType
		Write16(pPresentBoxAwardInfos, 0); //AwardIndex
		Write16(pPresentBoxAwardInfos, 0); //EventAwardID
		{ //AwardItemInfo
			BYTE* pAwardItemInfo = pPresentBoxAwardInfos;
			Write16(pAwardItemInfo, 0); //len

			Write32(pAwardItemInfo, 0); //Exp
			Write32(pAwardItemInfo, 0); //Money
			Write32(pAwardItemInfo, 0); //SuperMoney
			Write16(pAwardItemInfo, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAwardItemInfo;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //Coupons
			Write32(pAwardItemInfo, 0); //GuildPoint
			Write32(pAwardItemInfo, 0); //LuckMoney
			Write8(pAwardItemInfo, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAwardItemInfo;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //SpeedCoin

			len = pAwardItemInfo - pPresentBoxAwardInfos;
			Set16(pPresentBoxAwardInfos, (WORD)len);
			pPresentBoxAwardInfos += len;
		}
		Write32(pPresentBoxAwardInfos, 0); //AwardRound
		Write32(pPresentBoxAwardInfos, 0); //AwardMaxNums
		Write32(pPresentBoxAwardInfos, 0); //AwardLowNums
		Write32(pPresentBoxAwardInfos, 0); //CurrentProcessValue
		Write32(pPresentBoxAwardInfos, 0); //AwardNeedProcessValue
		Write8(pPresentBoxAwardInfos, 0); //GetAward
		Write8(pPresentBoxAwardInfos, 0); //BestItemAward
		Write16(pPresentBoxAwardInfos, 0); //AwardExtraType
		Write32(pPresentBoxAwardInfos, 0); //ReceBeginDate
		Write32(pPresentBoxAwardInfos, 0); //ReceEndDate
		Write16(pPresentBoxAwardInfos, 0); //AwardPoolID
		Write8(pPresentBoxAwardInfos, 0); //AwardStatus

		len = pPresentBoxAwardInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //PresentBoxOpenTimeInfo
		BYTE* pPresentBoxOpenTimeInfo = p;
		Write16(pPresentBoxOpenTimeInfo, 0); //len

		Write32(pPresentBoxOpenTimeInfo, 0); //OpenDate
		Write32(pPresentBoxOpenTimeInfo, 0); //CloseDate
		Write32(pPresentBoxOpenTimeInfo, 0); //OpenTime
		Write32(pPresentBoxOpenTimeInfo, 0); //CloseTime

		len = pPresentBoxOpenTimeInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 28311, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestRefreshSpecialAwardInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT MapIndex = Read32(p);
	UINT AwardType = Read32(p);
	UINT AwardIndex = Read32(p);
	UCHAR RefreshType = Read8(p);

}

void ResponseRefershSpecialAwardInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write32(p, 0); //MapIndex
	Write8(p, 0); //RefreshType
	Write16(p, 0); //AwardNums
	for (size_t i = 0; i < n; i++)
	{ //AwardInfo
		BYTE* pAwardInfo = p;
		Write16(pAwardInfo, 0); //len

		Write8(pAwardInfo, 0); //MapIndex
		Write16(pAwardInfo, 0); //AwardType
		Write16(pAwardInfo, 0); //AwardIndex
		Write16(pAwardInfo, 0); //EventAwardID
		{ //AwardItemInfo
			BYTE* pAwardItemInfo = pAwardInfo;
			Write16(pAwardItemInfo, 0); //len

			Write32(pAwardItemInfo, 0); //Exp
			Write32(pAwardItemInfo, 0); //Money
			Write32(pAwardItemInfo, 0); //SuperMoney
			Write16(pAwardItemInfo, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAwardItemInfo;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //Coupons
			Write32(pAwardItemInfo, 0); //GuildPoint
			Write32(pAwardItemInfo, 0); //LuckMoney
			Write8(pAwardItemInfo, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAwardItemInfo;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //SpeedCoin

			len = pAwardItemInfo - pAwardInfo;
			Set16(pAwardInfo, (WORD)len);
			pAwardInfo += len;
		}
		Write32(pAwardInfo, 0); //AwardRound
		Write32(pAwardInfo, 0); //AwardMaxNums
		Write32(pAwardInfo, 0); //AwardLowNums
		Write32(pAwardInfo, 0); //CurrentProcessValue
		Write32(pAwardInfo, 0); //AwardNeedProcessValue
		Write8(pAwardInfo, 0); //GetAward
		Write8(pAwardInfo, 0); //BestItemAward
		Write16(pAwardInfo, 0); //AwardExtraType
		Write32(pAwardInfo, 0); //ReceBeginDate
		Write32(pAwardInfo, 0); //ReceEndDate
		Write16(pAwardInfo, 0); //AwardPoolID
		Write8(pAwardInfo, 0); //AwardStatus

		len = pAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //DailyRemainingRefreshNums

	len = p - buf;
	SendToClient(Client, 28312, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyTeamN2OProgressInc(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //TeamN2OProgressInc
	Write32(p, 0); //TeamN2OProgress
	Write32(p, 0); //Uin
	Write32(p, 0); //PropIndex
	Write16(p, 0); //PropID
	Write32(p, 0); //TeamN2OMaxProgress

	len = p - buf;
	SendToClient(Client, 1207, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyClientXCarEvent(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //Time
	Write32(p, 0); //TriggerUin
	Write32(p, 0); //KartID
	Write32(p, 0); //EventFlag
	Write32(p, 0); //EventDuration
	Write8(p, 0); //EnhancedPhysInfoCount
	for (size_t i = 0; i < n; i++)
	{ //EnhancedPhysInfo
		BYTE* pEnhancedPhysInfo = p;
		Write16(pEnhancedPhysInfo, 0); //len

		Write32(pEnhancedPhysInfo, 0); //PID
		Write32(pEnhancedPhysInfo, 0); //AffectID
		Write32(pEnhancedPhysInfo, 0); //Param
		Write32(pEnhancedPhysInfo, 0); //LifeTime

		len = pEnhancedPhysInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 5100, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyClientSkillTrainingTipsInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //Time
	Write8(p, 0); //TipsType
	Write8(p, 0); //TipsID
	Write32(p, 0); //TipsCDTime
	Write8(p, 0); //LevLimit
	Write8(p, 0); //Status
	Write8(p, 0); //ModeNum
	for (size_t i = 0; i < n; i++)
	{ //ModeRecommendInfo
		BYTE* pModeRecommendInfo = p;
		Write16(pModeRecommendInfo, 0); //len

		Write8(pModeRecommendInfo, 0); //ButtonID
		Write8(pModeRecommendInfo, 0); //SusTime
		Write8(pModeRecommendInfo, 0); //SurfaceID
		Write16(pModeRecommendInfo, 0); //Urlen

		len = pModeRecommendInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 28341, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestReportSkillTrainingTips(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR TipsType = Read8(p);
	UCHAR SkillID = Read8(p);
	int TaskID = Read32(p);

}

void RequestGetTrainingSkillInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR Type = Read8(p);
	UCHAR SkillID = Read8(p);
	UCHAR TipsID = Read8(p);

}

void ResponseGetTrainingSkillInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write8(p, 0); //SkillTypeNum
	for (size_t i = 0; i < n; i++)
	{ //TrainingSkillInfo
		BYTE* pTrainingSkillInfo = p;
		Write16(pTrainingSkillInfo, 0); //len

		Write8(pTrainingSkillInfo, 0); //SkillNum
		for (size_t i = 0; i < n; i++)
		{ //OneTrainingSkillInfo
			BYTE* pOneTrainingSkillInfo = pTrainingSkillInfo;
			Write16(pOneTrainingSkillInfo, 0); //len

			Write8(pOneTrainingSkillInfo, 0); //SkillID
			Write8(pOneTrainingSkillInfo, 0); //SkillType
			Write8(pOneTrainingSkillInfo, 0); //SkillNameLen
			Write8(pOneTrainingSkillInfo, 0); //SkillStatus
			Write32(pOneTrainingSkillInfo, 0); //TaskID
			Write8(pOneTrainingSkillInfo, 0); //SkillNeedNum
			Write8(pOneTrainingSkillInfo, 0); //MapCheckpointFileIndex
			Write8(pOneTrainingSkillInfo, 0); //SkillTrainingFlag
			Write8(pOneTrainingSkillInfo, 0); //AddN2ONum
			Write8(pOneTrainingSkillInfo, 0); //ChallengeMapNum
			for (size_t i = 0; i < n; i++)
			{ //ChallengeMapInfo
				BYTE* pChallengeMapInfo = pOneTrainingSkillInfo;
				Write16(pChallengeMapInfo, 0); //len

				Write32(pChallengeMapInfo, 0); //MapID
				Write32(pChallengeMapInfo, 0); //TaskID
				Write32(pChallengeMapInfo, 0); //TimeLimit
				Write8(pChallengeMapInfo, 0); //Status
				Write8(pChallengeMapInfo, 0); //MapCheckpointFileIndex
				Write8(pChallengeMapInfo, 0); //SkillNeedNum

				len = pChallengeMapInfo - pOneTrainingSkillInfo;
				Set16(pOneTrainingSkillInfo, (WORD)len);
				pOneTrainingSkillInfo += len;
			}
			Write32(pOneTrainingSkillInfo, 0); //MapID

			len = pOneTrainingSkillInfo - pTrainingSkillInfo;
			Set16(pTrainingSkillInfo, (WORD)len);
			pTrainingSkillInfo += len;
		}

		len = pTrainingSkillInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //SkillID
	Write8(p, 0); //Type

	len = p - buf;
	SendToClient(Client, 28343, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyClientSkillTrainingMapInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write8(p, 0); //TrainingSkillMapNum
	for (size_t i = 0; i < n; i++)
	{ //TrainingSkillMapInfo
		BYTE* pTrainingSkillMapInfo = p;
		Write16(pTrainingSkillMapInfo, 0); //len

		Write32(pTrainingSkillMapInfo, 0); //MapID
		Write8(pTrainingSkillMapInfo, 0); //SkillNum
		Write32(pTrainingSkillMapInfo, 0); //SkillIDList[]

		len = pTrainingSkillMapInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 28344, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestRestartSingleTask(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR LogicType = Read8(p);

}

void ResponseRestartSingleTask(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write8(p, 0); //LogicType

	len = p - buf;
	SendToClient(Client, 28345, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetNewSpringBlessingShowInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetNewSpringBlessingShowInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write32(p, 0); //CurrentMapIndex
	Write8(p, 0); //InsideOrNot
	Write16(p, 0); //AwardNums
	for (size_t i = 0; i < n; i++)
	{ //NewSpringBlessingAwardInfos
		BYTE* pNewSpringBlessingAwardInfos = p;
		Write16(pNewSpringBlessingAwardInfos, 0); //len

		Write8(pNewSpringBlessingAwardInfos, 0); //MapIndex
		Write16(pNewSpringBlessingAwardInfos, 0); //AwardType
		Write16(pNewSpringBlessingAwardInfos, 0); //AwardIndex
		Write16(pNewSpringBlessingAwardInfos, 0); //EventAwardID
		{ //AwardItemInfo
			BYTE* pAwardItemInfo = pNewSpringBlessingAwardInfos;
			Write16(pAwardItemInfo, 0); //len

			Write32(pAwardItemInfo, 0); //Exp
			Write32(pAwardItemInfo, 0); //Money
			Write32(pAwardItemInfo, 0); //SuperMoney
			Write16(pAwardItemInfo, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAwardItemInfo;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //Coupons
			Write32(pAwardItemInfo, 0); //GuildPoint
			Write32(pAwardItemInfo, 0); //LuckMoney
			Write8(pAwardItemInfo, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAwardItemInfo;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //SpeedCoin

			len = pAwardItemInfo - pNewSpringBlessingAwardInfos;
			Set16(pNewSpringBlessingAwardInfos, (WORD)len);
			pNewSpringBlessingAwardInfos += len;
		}
		Write32(pNewSpringBlessingAwardInfos, 0); //AwardRound
		Write32(pNewSpringBlessingAwardInfos, 0); //AwardMaxNums
		Write32(pNewSpringBlessingAwardInfos, 0); //AwardLowNums
		Write32(pNewSpringBlessingAwardInfos, 0); //CurrentProcessValue
		Write32(pNewSpringBlessingAwardInfos, 0); //AwardNeedProcessValue
		Write8(pNewSpringBlessingAwardInfos, 0); //GetAward
		Write8(pNewSpringBlessingAwardInfos, 0); //BestItemAward
		Write16(pNewSpringBlessingAwardInfos, 0); //AwardExtraType
		Write32(pNewSpringBlessingAwardInfos, 0); //ReceBeginDate
		Write32(pNewSpringBlessingAwardInfos, 0); //ReceEndDate
		Write16(pNewSpringBlessingAwardInfos, 0); //AwardPoolID
		Write8(pNewSpringBlessingAwardInfos, 0); //AwardStatus

		len = pNewSpringBlessingAwardInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //ChanceGeneNums
	for (size_t i = 0; i < n; i++)
	{ //NewSpringBlessingPartiChanceGeneInfos
		BYTE* pNewSpringBlessingPartiChanceGeneInfos = p;
		Write16(pNewSpringBlessingPartiChanceGeneInfos, 0); //len

		Write8(pNewSpringBlessingPartiChanceGeneInfos, 0); //TaskID
		Write8(pNewSpringBlessingPartiChanceGeneInfos, 0); //TaskPeriod
		Write32(pNewSpringBlessingPartiChanceGeneInfos, 0); //AlreadyAwardNums
		Write32(pNewSpringBlessingPartiChanceGeneInfos, 0); //AwardMoveNums
		Write32(pNewSpringBlessingPartiChanceGeneInfos, 0); //TaskFinishNums
		Write32(pNewSpringBlessingPartiChanceGeneInfos, 0); //TaskNeedValue

		len = pNewSpringBlessingPartiChanceGeneInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //OpenTimeInfo
		BYTE* pOpenTimeInfo = p;
		Write16(pOpenTimeInfo, 0); //len

		Write32(pOpenTimeInfo, 0); //OpenDate
		Write32(pOpenTimeInfo, 0); //CloseDate
		Write32(pOpenTimeInfo, 0); //OpenTime
		Write32(pOpenTimeInfo, 0); //CloseTime

		len = pOpenTimeInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //CostItemID
	Write32(p, 0); //KoiItemID
	Write32(p, 0); //FuziItemID
	Write32(p, 0); //CurrentExtractLevel
	Write32(p, 0); //MaxExtractLevelPerRound
	Write16(p, 0); //ExtraAwardGeneInfoNums
	for (size_t i = 0; i < n; i++)
	{ //SpecialActExtraAwardItemGeneInfos
		BYTE* pSpecialActExtraAwardItemGeneInfos = p;
		Write16(pSpecialActExtraAwardItemGeneInfos, 0); //len

		Write32(pSpecialActExtraAwardItemGeneInfos, 0); //AwardMaxNums
		Write32(pSpecialActExtraAwardItemGeneInfos, 0); //AwardLowNums
		Write32(pSpecialActExtraAwardItemGeneInfos, 0); //ExtractLevel

		len = pSpecialActExtraAwardItemGeneInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //TodayNeedFinishTaskNums
	Write32(p, 0); //TotalAwardCostItemNumsDaily
	Write32(p, 0); //ExchangeRatio

	len = p - buf;
	SendToClient(Client, 28360, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestStartDoNewSpringBlessingExtract(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseDoNewSpringBlessingExtract(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //MoveSteps
	Write32(p, 0); //CurrentMapIndex
	Write8(p, 0); //InsideAward
	{ //ExtractAwardInfo
		BYTE* pExtractAwardInfo = p;
		Write16(pExtractAwardInfo, 0); //len

		Write8(pExtractAwardInfo, 0); //MapIndex
		Write16(pExtractAwardInfo, 0); //AwardType
		Write16(pExtractAwardInfo, 0); //AwardIndex
		Write16(pExtractAwardInfo, 0); //EventAwardID
		{ //AwardItemInfo
			BYTE* pAwardItemInfo = pExtractAwardInfo;
			Write16(pAwardItemInfo, 0); //len

			Write32(pAwardItemInfo, 0); //Exp
			Write32(pAwardItemInfo, 0); //Money
			Write32(pAwardItemInfo, 0); //SuperMoney
			Write16(pAwardItemInfo, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAwardItemInfo;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //Coupons
			Write32(pAwardItemInfo, 0); //GuildPoint
			Write32(pAwardItemInfo, 0); //LuckMoney
			Write8(pAwardItemInfo, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAwardItemInfo;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //SpeedCoin

			len = pAwardItemInfo - pExtractAwardInfo;
			Set16(pExtractAwardInfo, (WORD)len);
			pExtractAwardInfo += len;
		}
		Write32(pExtractAwardInfo, 0); //AwardRound
		Write32(pExtractAwardInfo, 0); //AwardMaxNums
		Write32(pExtractAwardInfo, 0); //AwardLowNums
		Write32(pExtractAwardInfo, 0); //CurrentProcessValue
		Write32(pExtractAwardInfo, 0); //AwardNeedProcessValue
		Write8(pExtractAwardInfo, 0); //GetAward
		Write8(pExtractAwardInfo, 0); //BestItemAward
		Write16(pExtractAwardInfo, 0); //AwardExtraType
		Write32(pExtractAwardInfo, 0); //ReceBeginDate
		Write32(pExtractAwardInfo, 0); //ReceEndDate
		Write16(pExtractAwardInfo, 0); //AwardPoolID
		Write8(pExtractAwardInfo, 0); //AwardStatus

		len = pExtractAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //NeedMoveInside
	Write32(p, 0); //CurretExtractLevel
	Write8(p, 0); //NeedRefreshAward
	Write16(p, 0); //RefreshAwardNums
	for (size_t i = 0; i < n; i++)
	{ //NewSpringBlessingAwardInfos
		BYTE* pNewSpringBlessingAwardInfos = p;
		Write16(pNewSpringBlessingAwardInfos, 0); //len

		Write8(pNewSpringBlessingAwardInfos, 0); //MapIndex
		Write16(pNewSpringBlessingAwardInfos, 0); //AwardType
		Write16(pNewSpringBlessingAwardInfos, 0); //AwardIndex
		Write16(pNewSpringBlessingAwardInfos, 0); //EventAwardID
		{ //AwardItemInfo
			BYTE* pAwardItemInfo = pNewSpringBlessingAwardInfos;
			Write16(pAwardItemInfo, 0); //len

			Write32(pAwardItemInfo, 0); //Exp
			Write32(pAwardItemInfo, 0); //Money
			Write32(pAwardItemInfo, 0); //SuperMoney
			Write16(pAwardItemInfo, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAwardItemInfo;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //Coupons
			Write32(pAwardItemInfo, 0); //GuildPoint
			Write32(pAwardItemInfo, 0); //LuckMoney
			Write8(pAwardItemInfo, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAwardItemInfo;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //SpeedCoin

			len = pAwardItemInfo - pNewSpringBlessingAwardInfos;
			Set16(pNewSpringBlessingAwardInfos, (WORD)len);
			pNewSpringBlessingAwardInfos += len;
		}
		Write32(pNewSpringBlessingAwardInfos, 0); //AwardRound
		Write32(pNewSpringBlessingAwardInfos, 0); //AwardMaxNums
		Write32(pNewSpringBlessingAwardInfos, 0); //AwardLowNums
		Write32(pNewSpringBlessingAwardInfos, 0); //CurrentProcessValue
		Write32(pNewSpringBlessingAwardInfos, 0); //AwardNeedProcessValue
		Write8(pNewSpringBlessingAwardInfos, 0); //GetAward
		Write8(pNewSpringBlessingAwardInfos, 0); //BestItemAward
		Write16(pNewSpringBlessingAwardInfos, 0); //AwardExtraType
		Write32(pNewSpringBlessingAwardInfos, 0); //ReceBeginDate
		Write32(pNewSpringBlessingAwardInfos, 0); //ReceEndDate
		Write16(pNewSpringBlessingAwardInfos, 0); //AwardPoolID
		Write8(pNewSpringBlessingAwardInfos, 0); //AwardStatus

		len = pNewSpringBlessingAwardInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HaveAwardFuzi
	{ //FuziAwardInfo
		BYTE* pFuziAwardInfo = p;
		Write16(pFuziAwardInfo, 0); //len

		Write32(pFuziAwardInfo, 0); //Exp
		Write32(pFuziAwardInfo, 0); //Money
		Write32(pFuziAwardInfo, 0); //SuperMoney
		Write16(pFuziAwardInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pFuziAwardInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pFuziAwardInfo;
			Set16(pFuziAwardInfo, (WORD)len);
			pFuziAwardInfo += len;
		}
		Write32(pFuziAwardInfo, 0); //Coupons
		Write32(pFuziAwardInfo, 0); //GuildPoint
		Write32(pFuziAwardInfo, 0); //LuckMoney
		Write8(pFuziAwardInfo, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pFuziAwardInfo;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pFuziAwardInfo;
			Set16(pFuziAwardInfo, (WORD)len);
			pFuziAwardInfo += len;
		}
		Write32(pFuziAwardInfo, 0); //SpeedCoin

		len = pFuziAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //NeedAwardLuckyBag
	{ //LuckyBagAwardInfo
		BYTE* pLuckyBagAwardInfo = p;
		Write16(pLuckyBagAwardInfo, 0); //len

		Write32(pLuckyBagAwardInfo, 0); //Exp
		Write32(pLuckyBagAwardInfo, 0); //Money
		Write32(pLuckyBagAwardInfo, 0); //SuperMoney
		Write16(pLuckyBagAwardInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pLuckyBagAwardInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pLuckyBagAwardInfo;
			Set16(pLuckyBagAwardInfo, (WORD)len);
			pLuckyBagAwardInfo += len;
		}
		Write32(pLuckyBagAwardInfo, 0); //Coupons
		Write32(pLuckyBagAwardInfo, 0); //GuildPoint
		Write32(pLuckyBagAwardInfo, 0); //LuckMoney
		Write8(pLuckyBagAwardInfo, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pLuckyBagAwardInfo;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pLuckyBagAwardInfo;
			Set16(pLuckyBagAwardInfo, (WORD)len);
			pLuckyBagAwardInfo += len;
		}
		Write32(pLuckyBagAwardInfo, 0); //SpeedCoin

		len = pLuckyBagAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 28361, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetSpringLuckyBagInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetSpringLuckyBagInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write8(p, 0); //HaveLuckyBagInfo
	{ //LuckyBagInfo
		BYTE* pLuckyBagInfo = p;
		Write16(pLuckyBagInfo, 0); //len

		Write32(pLuckyBagInfo, 0); //LuckyBagOpenDate
		Write32(pLuckyBagInfo, 0); //LuckyBagCloseDate
		Write8(pLuckyBagInfo, 0); //TipLuckyBagInfo
		Write16(pLuckyBagInfo, 0); //LuckyBagType
		Write8(pLuckyBagInfo, 0); //FinishedOrNot
		Write32(pLuckyBagInfo, 0); //NeedContinueLoginNums
		Write32(pLuckyBagInfo, 0); //NeedContinueExtactNums
		Write32(pLuckyBagInfo, 0); //CurrentLoginNums
		Write32(pLuckyBagInfo, 0); //CurrentExtractNums
		Write32(pLuckyBagInfo, 0); //ProbGetItemID
		Write32(pLuckyBagInfo, 0); //AwardFuziIteimNums
		Write32(pLuckyBagInfo, 0); //AwardSuperMoneyNums

		len = pLuckyBagInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //NeedAwardLuckyBag
	{ //LuckyBagAwardInfo
		BYTE* pLuckyBagAwardInfo = p;
		Write16(pLuckyBagAwardInfo, 0); //len

		Write32(pLuckyBagAwardInfo, 0); //Exp
		Write32(pLuckyBagAwardInfo, 0); //Money
		Write32(pLuckyBagAwardInfo, 0); //SuperMoney
		Write16(pLuckyBagAwardInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pLuckyBagAwardInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pLuckyBagAwardInfo;
			Set16(pLuckyBagAwardInfo, (WORD)len);
			pLuckyBagAwardInfo += len;
		}
		Write32(pLuckyBagAwardInfo, 0); //Coupons
		Write32(pLuckyBagAwardInfo, 0); //GuildPoint
		Write32(pLuckyBagAwardInfo, 0); //LuckMoney
		Write8(pLuckyBagAwardInfo, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pLuckyBagAwardInfo;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pLuckyBagAwardInfo;
			Set16(pLuckyBagAwardInfo, (WORD)len);
			pLuckyBagAwardInfo += len;
		}
		Write32(pLuckyBagAwardInfo, 0); //SpeedCoin

		len = pLuckyBagAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 28362, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestExchangeFuziItem(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT ExchangeNums = Read32(p);

}

void ResponseExchangeFuziItem(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	{ //ExchangedItemInfo
		BYTE* pExchangedItemInfo = p;
		Write16(pExchangedItemInfo, 0); //len

		Write32(pExchangedItemInfo, 0); //Exp
		Write32(pExchangedItemInfo, 0); //Money
		Write32(pExchangedItemInfo, 0); //SuperMoney
		Write16(pExchangedItemInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pExchangedItemInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pExchangedItemInfo;
			Set16(pExchangedItemInfo, (WORD)len);
			pExchangedItemInfo += len;
		}
		Write32(pExchangedItemInfo, 0); //Coupons
		Write32(pExchangedItemInfo, 0); //GuildPoint
		Write32(pExchangedItemInfo, 0); //LuckMoney
		Write8(pExchangedItemInfo, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pExchangedItemInfo;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pExchangedItemInfo;
			Set16(pExchangedItemInfo, (WORD)len);
			pExchangedItemInfo += len;
		}
		Write32(pExchangedItemInfo, 0); //SpeedCoin

		len = pExchangedItemInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 28363, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetGrowUpShowInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetGrowUpShowInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //AwardNums
	for (size_t i = 0; i < n; i++)
	{ //GrowUpAwardInfos
		BYTE* pGrowUpAwardInfos = p;
		Write16(pGrowUpAwardInfos, 0); //len

		Write8(pGrowUpAwardInfos, 0); //MapIndex
		Write16(pGrowUpAwardInfos, 0); //AwardType
		Write16(pGrowUpAwardInfos, 0); //AwardIndex
		Write16(pGrowUpAwardInfos, 0); //EventAwardID
		{ //AwardItemInfo
			BYTE* pAwardItemInfo = pGrowUpAwardInfos;
			Write16(pAwardItemInfo, 0); //len

			Write32(pAwardItemInfo, 0); //Exp
			Write32(pAwardItemInfo, 0); //Money
			Write32(pAwardItemInfo, 0); //SuperMoney
			Write16(pAwardItemInfo, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAwardItemInfo;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //Coupons
			Write32(pAwardItemInfo, 0); //GuildPoint
			Write32(pAwardItemInfo, 0); //LuckMoney
			Write8(pAwardItemInfo, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAwardItemInfo;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //SpeedCoin

			len = pAwardItemInfo - pGrowUpAwardInfos;
			Set16(pGrowUpAwardInfos, (WORD)len);
			pGrowUpAwardInfos += len;
		}
		Write32(pGrowUpAwardInfos, 0); //AwardRound
		Write32(pGrowUpAwardInfos, 0); //AwardMaxNums
		Write32(pGrowUpAwardInfos, 0); //AwardLowNums
		Write32(pGrowUpAwardInfos, 0); //CurrentProcessValue
		Write32(pGrowUpAwardInfos, 0); //AwardNeedProcessValue
		Write8(pGrowUpAwardInfos, 0); //GetAward
		Write8(pGrowUpAwardInfos, 0); //BestItemAward
		Write16(pGrowUpAwardInfos, 0); //AwardExtraType
		Write32(pGrowUpAwardInfos, 0); //ReceBeginDate
		Write32(pGrowUpAwardInfos, 0); //ReceEndDate
		Write16(pGrowUpAwardInfos, 0); //AwardPoolID
		Write8(pGrowUpAwardInfos, 0); //AwardStatus

		len = pGrowUpAwardInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //StageAwardNums
	for (size_t i = 0; i < n; i++)
	{ //StageAwardInfos
		BYTE* pStageAwardInfos = p;
		Write16(pStageAwardInfos, 0); //len

		Write8(pStageAwardInfos, 0); //MapIndex
		Write16(pStageAwardInfos, 0); //AwardType
		Write16(pStageAwardInfos, 0); //AwardIndex
		Write16(pStageAwardInfos, 0); //EventAwardID
		{ //AwardItemInfo
			BYTE* pAwardItemInfo = pStageAwardInfos;
			Write16(pAwardItemInfo, 0); //len

			Write32(pAwardItemInfo, 0); //Exp
			Write32(pAwardItemInfo, 0); //Money
			Write32(pAwardItemInfo, 0); //SuperMoney
			Write16(pAwardItemInfo, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAwardItemInfo;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //Coupons
			Write32(pAwardItemInfo, 0); //GuildPoint
			Write32(pAwardItemInfo, 0); //LuckMoney
			Write8(pAwardItemInfo, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAwardItemInfo;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //SpeedCoin

			len = pAwardItemInfo - pStageAwardInfos;
			Set16(pStageAwardInfos, (WORD)len);
			pStageAwardInfos += len;
		}
		Write32(pStageAwardInfos, 0); //AwardRound
		Write32(pStageAwardInfos, 0); //AwardMaxNums
		Write32(pStageAwardInfos, 0); //AwardLowNums
		Write32(pStageAwardInfos, 0); //CurrentProcessValue
		Write32(pStageAwardInfos, 0); //AwardNeedProcessValue
		Write8(pStageAwardInfos, 0); //GetAward
		Write8(pStageAwardInfos, 0); //BestItemAward
		Write16(pStageAwardInfos, 0); //AwardExtraType
		Write32(pStageAwardInfos, 0); //ReceBeginDate
		Write32(pStageAwardInfos, 0); //ReceEndDate
		Write16(pStageAwardInfos, 0); //AwardPoolID
		Write8(pStageAwardInfos, 0); //AwardStatus

		len = pStageAwardInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //ChanceGeneNums
	for (size_t i = 0; i < n; i++)
	{ //GrowUpPartiChanceGeneInfos
		BYTE* pGrowUpPartiChanceGeneInfos = p;
		Write16(pGrowUpPartiChanceGeneInfos, 0); //len

		Write8(pGrowUpPartiChanceGeneInfos, 0); //TaskID
		Write8(pGrowUpPartiChanceGeneInfos, 0); //TaskPeriod
		Write32(pGrowUpPartiChanceGeneInfos, 0); //AlreadyAwardNums
		Write32(pGrowUpPartiChanceGeneInfos, 0); //AwardMoveNums
		Write32(pGrowUpPartiChanceGeneInfos, 0); //TaskFinishNums
		Write32(pGrowUpPartiChanceGeneInfos, 0); //TaskNeedValue

		len = pGrowUpPartiChanceGeneInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //OpenTimeInfo
		BYTE* pOpenTimeInfo = p;
		Write16(pOpenTimeInfo, 0); //len

		Write32(pOpenTimeInfo, 0); //OpenDate
		Write32(pOpenTimeInfo, 0); //CloseDate
		Write32(pOpenTimeInfo, 0); //OpenTime
		Write32(pOpenTimeInfo, 0); //CloseTime

		len = pOpenTimeInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //CostItemID
	Write32(p, 0); //HongHuaItemID
	Write8(p, 0); //Stage
	Write8(p, 0); //StageDetail
	Write8(p, 0); //CurrentStageLevel
	Write8(p, 0); //MaxStageLevel
	Write8(p, 0); //LogNew

	len = p - buf;
	SendToClient(Client, 16078, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGrowUp(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR GrowUpType = Read8(p);

}

void ResponseGrowUp(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write8(p, 0); //GrowUpType
	Write8(p, 0); //Stage
	Write8(p, 0); //StageDetail
	Write8(p, 0); //CurrentStageLevel
	{ //AwardInfo
		BYTE* pAwardInfo = p;
		Write16(pAwardInfo, 0); //len

		Write32(pAwardInfo, 0); //Exp
		Write32(pAwardInfo, 0); //Money
		Write32(pAwardInfo, 0); //SuperMoney
		Write16(pAwardInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAwardInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAwardInfo;
			Set16(pAwardInfo, (WORD)len);
			pAwardInfo += len;
		}
		Write32(pAwardInfo, 0); //Coupons
		Write32(pAwardInfo, 0); //GuildPoint
		Write32(pAwardInfo, 0); //LuckMoney
		Write8(pAwardInfo, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAwardInfo;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAwardInfo;
			Set16(pAwardInfo, (WORD)len);
			pAwardInfo += len;
		}
		Write32(pAwardInfo, 0); //SpeedCoin

		len = pAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //GrowUpScore
	Write16(p, 0); //StageAwardNums
	for (size_t i = 0; i < n; i++)
	{ //StageAwardInfos
		BYTE* pStageAwardInfos = p;
		Write16(pStageAwardInfos, 0); //len

		Write8(pStageAwardInfos, 0); //MapIndex
		Write16(pStageAwardInfos, 0); //AwardType
		Write16(pStageAwardInfos, 0); //AwardIndex
		Write16(pStageAwardInfos, 0); //EventAwardID
		{ //AwardItemInfo
			BYTE* pAwardItemInfo = pStageAwardInfos;
			Write16(pAwardItemInfo, 0); //len

			Write32(pAwardItemInfo, 0); //Exp
			Write32(pAwardItemInfo, 0); //Money
			Write32(pAwardItemInfo, 0); //SuperMoney
			Write16(pAwardItemInfo, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAwardItemInfo;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //Coupons
			Write32(pAwardItemInfo, 0); //GuildPoint
			Write32(pAwardItemInfo, 0); //LuckMoney
			Write8(pAwardItemInfo, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAwardItemInfo;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //SpeedCoin

			len = pAwardItemInfo - pStageAwardInfos;
			Set16(pStageAwardInfos, (WORD)len);
			pStageAwardInfos += len;
		}
		Write32(pStageAwardInfos, 0); //AwardRound
		Write32(pStageAwardInfos, 0); //AwardMaxNums
		Write32(pStageAwardInfos, 0); //AwardLowNums
		Write32(pStageAwardInfos, 0); //CurrentProcessValue
		Write32(pStageAwardInfos, 0); //AwardNeedProcessValue
		Write8(pStageAwardInfos, 0); //GetAward
		Write8(pStageAwardInfos, 0); //BestItemAward
		Write16(pStageAwardInfos, 0); //AwardExtraType
		Write32(pStageAwardInfos, 0); //ReceBeginDate
		Write32(pStageAwardInfos, 0); //ReceEndDate
		Write16(pStageAwardInfos, 0); //AwardPoolID
		Write8(pStageAwardInfos, 0); //AwardStatus

		len = pStageAwardInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ContentIdx
	Write8(p, 0); //HasRandomAward
	for (size_t i = 0; i < n; i++)
	{ //RandomAwardInfo
		BYTE* pRandomAwardInfo = p;
		Write16(pRandomAwardInfo, 0); //len

		Write32(pRandomAwardInfo, 0); //Exp
		Write32(pRandomAwardInfo, 0); //Money
		Write32(pRandomAwardInfo, 0); //SuperMoney
		Write16(pRandomAwardInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pRandomAwardInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pRandomAwardInfo;
			Set16(pRandomAwardInfo, (WORD)len);
			pRandomAwardInfo += len;
		}
		Write32(pRandomAwardInfo, 0); //Coupons
		Write32(pRandomAwardInfo, 0); //GuildPoint
		Write32(pRandomAwardInfo, 0); //LuckMoney
		Write8(pRandomAwardInfo, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pRandomAwardInfo;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pRandomAwardInfo;
			Set16(pRandomAwardInfo, (WORD)len);
			pRandomAwardInfo += len;
		}
		Write32(pRandomAwardInfo, 0); //SpeedCoin

		len = pRandomAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //LogNew

	len = p - buf;
	SendToClient(Client, 16079, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetGrowUpLogInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetGrowUpLogInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //Nums
	for (size_t i = 0; i < n; i++)
	{ //GrowUpLogInfos
		BYTE* pGrowUpLogInfos = p;
		Write16(pGrowUpLogInfos, 0); //len

		Write32(pGrowUpLogInfos, 0); //Time
		Write8(pGrowUpLogInfos, 0); //GrowUpType
		Write8(pGrowUpLogInfos, 0); //Stage
		Write8(pGrowUpLogInfos, 0); //StageDetail
		Write8(pGrowUpLogInfos, 0); //GrowUpScore
		Write8(pGrowUpLogInfos, 0); //ContentIdx
		Write8(pGrowUpLogInfos, 0); //LogNew

		len = pGrowUpLogInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 16080, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyClientHopeAction(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	{ //HopeIns
		BYTE* pHopeIns = p;
		Write16(pHopeIns, 0); //len

		Write8(pHopeIns, 0); //InsID
		Write8(pHopeIns, 0); //TitleLen
		Write8(pHopeIns, 0); //MsgLen
		Write8(pHopeIns, 0); //URLLen
		Write8(pHopeIns, 0); //RuleNameLen
		Write8(pHopeIns, 0); //Modal
		Write16(pHopeIns, 0); //IncomePercent

		len = pHopeIns - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //RealNameCheckInterval

	len = p - buf;
	SendToClient(Client, 24099, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetSecretCompassInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetSecretCompassInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	{ //ActOpenDateAndTime
		BYTE* pActOpenDateAndTime = p;
		Write16(pActOpenDateAndTime, 0); //len

		Write32(pActOpenDateAndTime, 0); //OpenDate
		Write32(pActOpenDateAndTime, 0); //OpenTime
		Write32(pActOpenDateAndTime, 0); //CloseDate
		Write32(pActOpenDateAndTime, 0); //CloseTime
		Write32(pActOpenDateAndTime, 0); //Open
		Write32(pActOpenDateAndTime, 0); //Close

		len = pActOpenDateAndTime - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //CostItemID
	Write8(p, 0); //MagicPiecesNum
	for (size_t i = 0; i < n; i++)
	{ //MagicPieces
		BYTE* pMagicPieces = p;
		Write16(pMagicPieces, 0); //len

		Write8(pMagicPieces, 0); //PiecesIndexID
		Write8(pMagicPieces, 0); //MagicPiecesLevel
		Write16(pMagicPieces, 0); //MagicPiecesNum

		len = pMagicPieces - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //PlayerRemainMagicPieceNums
	Write8(p, 0); //IsDiscount
	{ //DiscountDateAndTime
		BYTE* pDiscountDateAndTime = p;
		Write16(pDiscountDateAndTime, 0); //len

		Write32(pDiscountDateAndTime, 0); //OpenDate
		Write32(pDiscountDateAndTime, 0); //OpenTime
		Write32(pDiscountDateAndTime, 0); //CloseDate
		Write32(pDiscountDateAndTime, 0); //CloseTime
		Write32(pDiscountDateAndTime, 0); //Open
		Write32(pDiscountDateAndTime, 0); //Close

		len = pDiscountDateAndTime - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //LastAwardIndexID
	Write32(p, 0); //RemainDiscountTime
	Write8(p, 0); //CostNumForOne
	Write8(p, 0); //CostNumForTen

	len = p - buf;
	SendToClient(Client, 28376, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestSecretCompassDrawLottery(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR DrawNums = Read8(p);

}

void ResponseSecretCompassDrawLottery(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write8(p, 0); //DrawNums
	Write16(p, 0); //ResultID
	Write32(p, 0); //CostItemID
	Write32(p, 0); //AwardMagicPiecesNums
	Write8(p, 0); //AwardNum
	for (size_t i = 0; i < n; i++)
	{ //AwardNumsArray
		BYTE* pAwardNumsArray = p;
		Write16(pAwardNumsArray, 0); //len

		Write8(pAwardNumsArray, 0); //PiecesIndexID
		Write8(pAwardNumsArray, 0); //MagicPiecesLevel
		Write16(pAwardNumsArray, 0); //MagicPiecesNum

		len = pAwardNumsArray - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //AwardNumsLeved
	Write8(p, 0); //MagicPiecesNum
	for (size_t i = 0; i < n; i++)
	{ //MagicPieces
		BYTE* pMagicPieces = p;
		Write16(pMagicPieces, 0); //len

		Write8(pMagicPieces, 0); //PiecesIndexID
		Write8(pMagicPieces, 0); //MagicPiecesLevel
		Write16(pMagicPieces, 0); //MagicPiecesNum

		len = pMagicPieces - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //PlayerRemainMagicPieceNums
	Write8(p, 0); //AwardIndexID
	Write8(p, 0); //IsDiscount
	{ //DiscountDateAndTime
		BYTE* pDiscountDateAndTime = p;
		Write16(pDiscountDateAndTime, 0); //len

		Write32(pDiscountDateAndTime, 0); //OpenDate
		Write32(pDiscountDateAndTime, 0); //OpenTime
		Write32(pDiscountDateAndTime, 0); //CloseDate
		Write32(pDiscountDateAndTime, 0); //CloseTime
		Write32(pDiscountDateAndTime, 0); //Open
		Write32(pDiscountDateAndTime, 0); //Close

		len = pDiscountDateAndTime - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //RemainDiscountTime
	Write8(p, 0); //CostNumForOne
	Write8(p, 0); //CostNumForTen

	len = p - buf;
	SendToClient(Client, 28377, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyClientCommonEvent(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //Event
	Write8(p, 0); //ParaNum
	Write32(p, 0); //Paras[]
	Write8(p, 0); //CfgNum
	for (size_t i = 0; i < n; i++)
	{ //Cfg
		BYTE* pCfg = p;
		Write16(pCfg, 0); //len

		Write32(pCfg, 0); //ActiveAccelSpeed
		Write32(pCfg, 0); //CoolDownAccelSpeed
		Write16(pCfg, 0); //DurationCfgNum
		for (size_t i = 0; i < n; i++)
		{ //ShortDistanceActiveDurationCfg
			BYTE* pShortDistanceActiveDurationCfg = pCfg;
			Write16(pShortDistanceActiveDurationCfg, 0); //len

			Write16(pShortDistanceActiveDurationCfg, 0); //Duration
			Write32(pShortDistanceActiveDurationCfg, 0); //GPItemId

			len = pShortDistanceActiveDurationCfg - pCfg;
			Set16(pCfg, (WORD)len);
			pCfg += len;
		}
		Write8(pCfg, 0); //Switch
		Write16(pCfg, 0); //CoreNo2CfgNum
		for (size_t i = 0; i < n; i++)
		{ //CoreNo2Cfg
			BYTE* pCoreNo2Cfg = pCfg;
			Write16(pCoreNo2Cfg, 0); //len

			Write32(pCoreNo2Cfg, 0); //ForceScale
			Write32(pCoreNo2Cfg, 0); //ForceLifeTime

			len = pCoreNo2Cfg - pCfg;
			Set16(pCfg, (WORD)len);
			pCfg += len;
		}

		len = pCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //CoreNo2CfgNum
	for (size_t i = 0; i < n; i++)
	{ //CoreNo2Cfg
		BYTE* pCoreNo2Cfg = p;
		Write16(pCoreNo2Cfg, 0); //len

		Write32(pCoreNo2Cfg, 0); //ForceScale
		Write32(pCoreNo2Cfg, 0); //ForceLifeTime

		len = pCoreNo2Cfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //AttachLen

	len = p - buf;
	SendToClient(Client, 28381, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestSpecialActSocialInvite(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT DstUin = Read32(p);
	bool Type = Read8(p);
	char[] DstNickName[] = ReadString(p);
	UCHAR InvitedPlayerType = Read8(p);

}

void ResponseSpecialActSocialInvite(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write32(p, 0); //DstUin
	Write8(p, 0); //ReasonLen
	Write8(p, 0); //Type

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifySpecialActSocialInvite(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //SrcUin
	WriteString(p, 0); //SrcNickName[]
	Write32(p, 0); //DstUin
	Write8(p, 0); //Type

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestDragonBoatRaceShowInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseDragonBoatRaceShowInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //AwardNums
	for (size_t i = 0; i < n; i++)
	{ //RaceAwardInfos
		BYTE* pRaceAwardInfos = p;
		Write16(pRaceAwardInfos, 0); //len

		Write8(pRaceAwardInfos, 0); //MapIndex
		Write16(pRaceAwardInfos, 0); //AwardType
		Write16(pRaceAwardInfos, 0); //AwardIndex
		Write16(pRaceAwardInfos, 0); //EventAwardID
		{ //AwardItemInfo
			BYTE* pAwardItemInfo = pRaceAwardInfos;
			Write16(pAwardItemInfo, 0); //len

			Write32(pAwardItemInfo, 0); //Exp
			Write32(pAwardItemInfo, 0); //Money
			Write32(pAwardItemInfo, 0); //SuperMoney
			Write16(pAwardItemInfo, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAwardItemInfo;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //Coupons
			Write32(pAwardItemInfo, 0); //GuildPoint
			Write32(pAwardItemInfo, 0); //LuckMoney
			Write8(pAwardItemInfo, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAwardItemInfo;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //SpeedCoin

			len = pAwardItemInfo - pRaceAwardInfos;
			Set16(pRaceAwardInfos, (WORD)len);
			pRaceAwardInfos += len;
		}
		Write32(pRaceAwardInfos, 0); //AwardRound
		Write32(pRaceAwardInfos, 0); //AwardMaxNums
		Write32(pRaceAwardInfos, 0); //AwardLowNums
		Write32(pRaceAwardInfos, 0); //CurrentProcessValue
		Write32(pRaceAwardInfos, 0); //AwardNeedProcessValue
		Write8(pRaceAwardInfos, 0); //GetAward
		Write8(pRaceAwardInfos, 0); //BestItemAward
		Write16(pRaceAwardInfos, 0); //AwardExtraType
		Write32(pRaceAwardInfos, 0); //ReceBeginDate
		Write32(pRaceAwardInfos, 0); //ReceEndDate
		Write16(pRaceAwardInfos, 0); //AwardPoolID
		Write8(pRaceAwardInfos, 0); //AwardStatus

		len = pRaceAwardInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //ChanceGeneNumsByDay
	for (size_t i = 0; i < n; i++)
	{ //PartiChanceGeneInfosByDay
		BYTE* pPartiChanceGeneInfosByDay = p;
		Write16(pPartiChanceGeneInfosByDay, 0); //len

		Write8(pPartiChanceGeneInfosByDay, 0); //TaskID
		Write8(pPartiChanceGeneInfosByDay, 0); //TaskPeriod
		Write32(pPartiChanceGeneInfosByDay, 0); //AlreadyAwardNums
		Write32(pPartiChanceGeneInfosByDay, 0); //AwardMoveNums
		Write32(pPartiChanceGeneInfosByDay, 0); //TaskFinishNums
		Write32(pPartiChanceGeneInfosByDay, 0); //TaskNeedValue

		len = pPartiChanceGeneInfosByDay - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //ChanceGeneNumsByWeek
	for (size_t i = 0; i < n; i++)
	{ //PartiChanceGeneInfosByWeek
		BYTE* pPartiChanceGeneInfosByWeek = p;
		Write16(pPartiChanceGeneInfosByWeek, 0); //len

		Write8(pPartiChanceGeneInfosByWeek, 0); //TaskID
		Write8(pPartiChanceGeneInfosByWeek, 0); //TaskPeriod
		Write32(pPartiChanceGeneInfosByWeek, 0); //AlreadyAwardNums
		Write32(pPartiChanceGeneInfosByWeek, 0); //AwardMoveNums
		Write32(pPartiChanceGeneInfosByWeek, 0); //TaskFinishNums
		Write32(pPartiChanceGeneInfosByWeek, 0); //TaskNeedValue

		len = pPartiChanceGeneInfosByWeek - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //OpenTimeInfo
		BYTE* pOpenTimeInfo = p;
		Write16(pOpenTimeInfo, 0); //len

		Write32(pOpenTimeInfo, 0); //OpenDate
		Write32(pOpenTimeInfo, 0); //CloseDate
		Write32(pOpenTimeInfo, 0); //OpenTime
		Write32(pOpenTimeInfo, 0); //CloseTime

		len = pOpenTimeInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //CostItemID
	Write32(p, 0); //CostNums
	Write32(p, 0); //CurrentFinishRaceNums
	Write8(p, 0); //SelectOptionalAwardOrNot
	Write16(p, 0); //OptionAwardLevelNums
	for (size_t i = 0; i < n; i++)
	{ //DragonBoatRaceOptionAwardInfos
		BYTE* pDragonBoatRaceOptionAwardInfos = p;
		Write16(pDragonBoatRaceOptionAwardInfos, 0); //len

		Write16(pDragonBoatRaceOptionAwardInfos, 0); //AwardType
		Write32(pDragonBoatRaceOptionAwardInfos, 0); //NeedFinishRaceNums
		Write8(pDragonBoatRaceOptionAwardInfos, 0); //ReceOrNot
		Write32(pDragonBoatRaceOptionAwardInfos, 0); //AwardNums
		for (size_t i = 0; i < n; i++)
		{ //SpecialActChooseAwardInfos
			BYTE* pSpecialActChooseAwardInfos = pDragonBoatRaceOptionAwardInfos;
			Write16(pSpecialActChooseAwardInfos, 0); //len

			Write32(pSpecialActChooseAwardInfos, 0); //ItemID[]
			Write32(pSpecialActChooseAwardInfos, 0); //ItemNum
			Write32(pSpecialActChooseAwardInfos, 0); //AvailPeriod
			Write16(pSpecialActChooseAwardInfos, 0); //ItemIndex
			Write32(pSpecialActChooseAwardInfos, 0); //CouponMoneyNums
			Write32(pSpecialActChooseAwardInfos, 0); //SuperMoneyNums

			len = pSpecialActChooseAwardInfos - pDragonBoatRaceOptionAwardInfos;
			Set16(pDragonBoatRaceOptionAwardInfos, (WORD)len);
			pDragonBoatRaceOptionAwardInfos += len;
		}

		len = pDragonBoatRaceOptionAwardInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //BufferForRaceMustAwardBest
	Write32(p, 0); //AwardBestItemNeedRaceNums
	Write32(p, 0); //DailyRaceNums
	Write16(p, 0); //SocialPlayerNums
	for (size_t i = 0; i < n; i++)
	{ //SpecialActSocialPlayerInfos
		BYTE* pSpecialActSocialPlayerInfos = p;
		Write16(pSpecialActSocialPlayerInfos, 0); //len

		Write32(pSpecialActSocialPlayerInfos, 0); //Uin
		Write8(pSpecialActSocialPlayerInfos, 0); //PlayerType
		WriteString(pSpecialActSocialPlayerInfos, 0); //NickName[]
		Write8(pSpecialActSocialPlayerInfos, 0); //HaveInteractivedOrNot
		Write8(pSpecialActSocialPlayerInfos, 0); //SocialTaskStat
		Write8(pSpecialActSocialPlayerInfos, 0); //HaveSocialAward
		{ //AwardInfo
			BYTE* pAwardInfo = pSpecialActSocialPlayerInfos;
			Write16(pAwardInfo, 0); //len

			Write32(pAwardInfo, 0); //Exp
			Write32(pAwardInfo, 0); //Money
			Write32(pAwardInfo, 0); //SuperMoney
			Write16(pAwardInfo, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAwardInfo;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAwardInfo;
				Set16(pAwardInfo, (WORD)len);
				pAwardInfo += len;
			}
			Write32(pAwardInfo, 0); //Coupons
			Write32(pAwardInfo, 0); //GuildPoint
			Write32(pAwardInfo, 0); //LuckMoney
			Write8(pAwardInfo, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAwardInfo;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAwardInfo;
				Set16(pAwardInfo, (WORD)len);
				pAwardInfo += len;
			}
			Write32(pAwardInfo, 0); //SpeedCoin

			len = pAwardInfo - pSpecialActSocialPlayerInfos;
			Set16(pSpecialActSocialPlayerInfos, (WORD)len);
			pSpecialActSocialPlayerInfos += len;
		}

		len = pSpecialActSocialPlayerInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //BeSocialedPlayerNums
	for (size_t i = 0; i < n; i++)
	{ //SpecialActBeSocialedPlayerInfos
		BYTE* pSpecialActBeSocialedPlayerInfos = p;
		Write16(pSpecialActBeSocialedPlayerInfos, 0); //len

		Write32(pSpecialActBeSocialedPlayerInfos, 0); //Uin
		Write8(pSpecialActBeSocialedPlayerInfos, 0); //PlayerType
		WriteString(pSpecialActBeSocialedPlayerInfos, 0); //NickName[]
		Write8(pSpecialActBeSocialedPlayerInfos, 0); //HaveInteractivedOrNot
		Write8(pSpecialActBeSocialedPlayerInfos, 0); //SocialTaskStat
		Write8(pSpecialActBeSocialedPlayerInfos, 0); //HaveSocialAward
		{ //AwardInfo
			BYTE* pAwardInfo = pSpecialActBeSocialedPlayerInfos;
			Write16(pAwardInfo, 0); //len

			Write32(pAwardInfo, 0); //Exp
			Write32(pAwardInfo, 0); //Money
			Write32(pAwardInfo, 0); //SuperMoney
			Write16(pAwardInfo, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAwardInfo;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAwardInfo;
				Set16(pAwardInfo, (WORD)len);
				pAwardInfo += len;
			}
			Write32(pAwardInfo, 0); //Coupons
			Write32(pAwardInfo, 0); //GuildPoint
			Write32(pAwardInfo, 0); //LuckMoney
			Write8(pAwardInfo, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAwardInfo;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAwardInfo;
				Set16(pAwardInfo, (WORD)len);
				pAwardInfo += len;
			}
			Write32(pAwardInfo, 0); //SpeedCoin

			len = pAwardInfo - pSpecialActBeSocialedPlayerInfos;
			Set16(pSpecialActBeSocialedPlayerInfos, (WORD)len);
			pSpecialActBeSocialedPlayerInfos += len;
		}

		len = pSpecialActBeSocialedPlayerInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //DragonBoatBufferType
	Write8(p, 0); //NeedAskForHelp
	Write32(p, 0); //TotalRaceNums
	Write32(p, 0); //RefershAwardStep
	Write16(p, 0); //ReceFinalAwardConditionNums
	Write32(p, 0); //ArrayRaceNumsCondition[]
	Write32(p, 0); //CurrentCanReceFinalAwardNums
	Write32(p, 0); //SuitItemMapInfoNums
	for (size_t i = 0; i < n; i++)
	{ //SpecialActSuitItemMapInfos
		BYTE* pSpecialActSuitItemMapInfos = p;
		Write16(pSpecialActSuitItemMapInfos, 0); //len

		Write32(pSpecialActSuitItemMapInfos, 0); //OriginItemID_0
		Write32(pSpecialActSuitItemMapInfos, 0); //OriginItemID_1
		Write32(pSpecialActSuitItemMapInfos, 0); //SuitItemID

		len = pSpecialActSuitItemMapInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestDragonBoatRaceSelectAward(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT SelectAwardType = Read32(p);
	UCHAR RandomOrNot = Read8(p);
	USHORT SelectAwardNums = Read16(p);
	for (size_t i = 0; i < n; i++)
	{ //DragonBoatRaceOptionalAwardSelectInfos
		BYTE* pDragonBoatRaceOptionalAwardSelectInfos = p;
		len = Read16(pDragonBoatRaceOptionalAwardSelectInfos);

		USHORT OptionalAwardType = Read16(pDragonBoatRaceOptionalAwardSelectInfos);
		UINT SelectIndex = Read32(pDragonBoatRaceOptionalAwardSelectInfos);

		p += len;
	}

}

void ResponseDragonBoatRaceSelectAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write32(p, 0); //SelectAwardType
	{ //AwardInfo
		BYTE* pAwardInfo = p;
		Write16(pAwardInfo, 0); //len

		Write32(pAwardInfo, 0); //Exp
		Write32(pAwardInfo, 0); //Money
		Write32(pAwardInfo, 0); //SuperMoney
		Write16(pAwardInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAwardInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAwardInfo;
			Set16(pAwardInfo, (WORD)len);
			pAwardInfo += len;
		}
		Write32(pAwardInfo, 0); //Coupons
		Write32(pAwardInfo, 0); //GuildPoint
		Write32(pAwardInfo, 0); //LuckMoney
		Write8(pAwardInfo, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAwardInfo;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAwardInfo;
			Set16(pAwardInfo, (WORD)len);
			pAwardInfo += len;
		}
		Write32(pAwardInfo, 0); //SpeedCoin

		len = pAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //TotalRaceNums

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestDragonBoatRaceStartRace(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseDragonBoatRaceStartRace(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	{ //RaceAwardInfo
		BYTE* pRaceAwardInfo = p;
		Write16(pRaceAwardInfo, 0); //len

		Write8(pRaceAwardInfo, 0); //MapIndex
		Write16(pRaceAwardInfo, 0); //AwardType
		Write16(pRaceAwardInfo, 0); //AwardIndex
		Write16(pRaceAwardInfo, 0); //EventAwardID
		{ //AwardItemInfo
			BYTE* pAwardItemInfo = pRaceAwardInfo;
			Write16(pAwardItemInfo, 0); //len

			Write32(pAwardItemInfo, 0); //Exp
			Write32(pAwardItemInfo, 0); //Money
			Write32(pAwardItemInfo, 0); //SuperMoney
			Write16(pAwardItemInfo, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAwardItemInfo;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //Coupons
			Write32(pAwardItemInfo, 0); //GuildPoint
			Write32(pAwardItemInfo, 0); //LuckMoney
			Write8(pAwardItemInfo, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAwardItemInfo;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //SpeedCoin

			len = pAwardItemInfo - pRaceAwardInfo;
			Set16(pRaceAwardInfo, (WORD)len);
			pRaceAwardInfo += len;
		}
		Write32(pRaceAwardInfo, 0); //AwardRound
		Write32(pRaceAwardInfo, 0); //AwardMaxNums
		Write32(pRaceAwardInfo, 0); //AwardLowNums
		Write32(pRaceAwardInfo, 0); //CurrentProcessValue
		Write32(pRaceAwardInfo, 0); //AwardNeedProcessValue
		Write8(pRaceAwardInfo, 0); //GetAward
		Write8(pRaceAwardInfo, 0); //BestItemAward
		Write16(pRaceAwardInfo, 0); //AwardExtraType
		Write32(pRaceAwardInfo, 0); //ReceBeginDate
		Write32(pRaceAwardInfo, 0); //ReceEndDate
		Write16(pRaceAwardInfo, 0); //AwardPoolID
		Write8(pRaceAwardInfo, 0); //AwardStatus

		len = pRaceAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HaveFinishRace
	Write8(p, 0); //NeedRefreshAward
	Write16(p, 0); //RefreshAwardNums
	for (size_t i = 0; i < n; i++)
	{ //RefreshAwardInfos
		BYTE* pRefreshAwardInfos = p;
		Write16(pRefreshAwardInfos, 0); //len

		Write8(pRefreshAwardInfos, 0); //MapIndex
		Write16(pRefreshAwardInfos, 0); //AwardType
		Write16(pRefreshAwardInfos, 0); //AwardIndex
		Write16(pRefreshAwardInfos, 0); //EventAwardID
		{ //AwardItemInfo
			BYTE* pAwardItemInfo = pRefreshAwardInfos;
			Write16(pAwardItemInfo, 0); //len

			Write32(pAwardItemInfo, 0); //Exp
			Write32(pAwardItemInfo, 0); //Money
			Write32(pAwardItemInfo, 0); //SuperMoney
			Write16(pAwardItemInfo, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAwardItemInfo;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //Coupons
			Write32(pAwardItemInfo, 0); //GuildPoint
			Write32(pAwardItemInfo, 0); //LuckMoney
			Write8(pAwardItemInfo, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAwardItemInfo;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAwardItemInfo;
				Set16(pAwardItemInfo, (WORD)len);
				pAwardItemInfo += len;
			}
			Write32(pAwardItemInfo, 0); //SpeedCoin

			len = pAwardItemInfo - pRefreshAwardInfos;
			Set16(pRefreshAwardInfos, (WORD)len);
			pRefreshAwardInfos += len;
		}
		Write32(pRefreshAwardInfos, 0); //AwardRound
		Write32(pRefreshAwardInfos, 0); //AwardMaxNums
		Write32(pRefreshAwardInfos, 0); //AwardLowNums
		Write32(pRefreshAwardInfos, 0); //CurrentProcessValue
		Write32(pRefreshAwardInfos, 0); //AwardNeedProcessValue
		Write8(pRefreshAwardInfos, 0); //GetAward
		Write8(pRefreshAwardInfos, 0); //BestItemAward
		Write16(pRefreshAwardInfos, 0); //AwardExtraType
		Write32(pRefreshAwardInfos, 0); //ReceBeginDate
		Write32(pRefreshAwardInfos, 0); //ReceEndDate
		Write16(pRefreshAwardInfos, 0); //AwardPoolID
		Write8(pRefreshAwardInfos, 0); //AwardStatus

		len = pRefreshAwardInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //CurrentFinishRaceNums
	Write8(p, 0); //TriggerOptionalAwardRece
	{ //OptionalAwardInfo
		BYTE* pOptionalAwardInfo = p;
		Write16(pOptionalAwardInfo, 0); //len

		Write32(pOptionalAwardInfo, 0); //Exp
		Write32(pOptionalAwardInfo, 0); //Money
		Write32(pOptionalAwardInfo, 0); //SuperMoney
		Write16(pOptionalAwardInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pOptionalAwardInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pOptionalAwardInfo;
			Set16(pOptionalAwardInfo, (WORD)len);
			pOptionalAwardInfo += len;
		}
		Write32(pOptionalAwardInfo, 0); //Coupons
		Write32(pOptionalAwardInfo, 0); //GuildPoint
		Write32(pOptionalAwardInfo, 0); //LuckMoney
		Write8(pOptionalAwardInfo, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pOptionalAwardInfo;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pOptionalAwardInfo;
			Set16(pOptionalAwardInfo, (WORD)len);
			pOptionalAwardInfo += len;
		}
		Write32(pOptionalAwardInfo, 0); //SpeedCoin

		len = pOptionalAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReceAllOptionalAward
	Write32(p, 0); //DailyRaceNums
	Write32(p, 0); //RaceStepNums
	Write8(p, 0); //NeedAskForHelp
	Write8(p, 0); //TriggerBuffer
	Write32(p, 0); //TotalRaceNums

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestDragonBoatRaceHelpPlayerInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseDragonBoatRaceHelpPlayerInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write32(p, 0); //PlayerNums
	for (size_t i = 0; i < n; i++)
	{ //SpecialActSocialPlayerInfos
		BYTE* pSpecialActSocialPlayerInfos = p;
		Write16(pSpecialActSocialPlayerInfos, 0); //len

		Write32(pSpecialActSocialPlayerInfos, 0); //Uin
		Write8(pSpecialActSocialPlayerInfos, 0); //PlayerType
		WriteString(pSpecialActSocialPlayerInfos, 0); //NickName[]
		Write8(pSpecialActSocialPlayerInfos, 0); //HaveInteractivedOrNot
		Write8(pSpecialActSocialPlayerInfos, 0); //SocialTaskStat
		Write8(pSpecialActSocialPlayerInfos, 0); //HaveSocialAward
		{ //AwardInfo
			BYTE* pAwardInfo = pSpecialActSocialPlayerInfos;
			Write16(pAwardInfo, 0); //len

			Write32(pAwardInfo, 0); //Exp
			Write32(pAwardInfo, 0); //Money
			Write32(pAwardInfo, 0); //SuperMoney
			Write16(pAwardInfo, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAwardInfo;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAwardInfo;
				Set16(pAwardInfo, (WORD)len);
				pAwardInfo += len;
			}
			Write32(pAwardInfo, 0); //Coupons
			Write32(pAwardInfo, 0); //GuildPoint
			Write32(pAwardInfo, 0); //LuckMoney
			Write8(pAwardInfo, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAwardInfo;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAwardInfo;
				Set16(pAwardInfo, (WORD)len);
				pAwardInfo += len;
			}
			Write32(pAwardInfo, 0); //SpeedCoin

			len = pAwardInfo - pSpecialActSocialPlayerInfos;
			Set16(pSpecialActSocialPlayerInfos, (WORD)len);
			pSpecialActSocialPlayerInfos += len;
		}

		len = pSpecialActSocialPlayerInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestKartRefitAttrTransfer(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int SrcKartID = Read32(p);
	int DstKartID = Read32(p);
	UCHAR ItemType = Read8(p);
	UCHAR Type = Read8(p);

}

void ResponseRefitKartAttrTransfer(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen
	Write32(p, 0); //SrcKartID
	Write32(p, 0); //DstKartID
	Write8(p, 0); //ItemType
	Write8(p, 0); //Type
	Write8(p, 0); //SrcBeforeValue
	Write8(p, 0); //SrcAfterValue
	Write32(p, 0); //SrcRefitCount
	Write32(p, 0); //DstRefitCount
	Write16(p, 0); //SrcMaxFlags
	Write16(p, 0); //DstMaxFlags
	Write8(p, 0); //DstBeforeValue
	Write8(p, 0); //DstAfterValue
	Write32(p, 0); //SrcBeforeRefitCount
	Write32(p, 0); //DstBeforeRefitCount

	len = p - buf;
	SendToClient(Client, 1208, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetKartRefitAttrTransferInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetRefitKartAttrTransferInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	{ //RefitTransferCfg
		BYTE* pRefitTransferCfg = p;
		Write16(pRefitTransferCfg, 0); //len

		Write8(pRefitTransferCfg, 0); //CardNum
		for (size_t i = 0; i < n; i++)
		{ //TransferCard
			BYTE* pTransferCard = pRefitTransferCfg;
			Write16(pTransferCard, 0); //len

			Write32(pTransferCard, 0); //ItemID
			Write32(pTransferCard, 0); //MinWeight

			len = pTransferCard - pRefitTransferCfg;
			Set16(pRefitTransferCfg, (WORD)len);
			pRefitTransferCfg += len;
		}
		Write8(pRefitTransferCfg, 0); //LevelNum
		for (size_t i = 0; i < n; i++)
		{ //TransferLevel
			BYTE* pTransferLevel = pRefitTransferCfg;
			Write16(pTransferLevel, 0); //len

			Write32(pTransferLevel, 0); //Level
			Write32(pTransferLevel, 0); //TheotyRefitCount
			Write32(pTransferLevel, 0); //TransferDecProp[]
			Write32(pTransferLevel, 0); //TransferCardNum

			len = pTransferLevel - pRefitTransferCfg;
			Set16(pRefitTransferCfg, (WORD)len);
			pRefitTransferCfg += len;
		}
		Write8(pRefitTransferCfg, 0); //CarListNum
		for (size_t i = 0; i < n; i++)
		{ //TransferCar
			BYTE* pTransferCar = pRefitTransferCfg;
			Write16(pTransferCar, 0); //len

			Write8(pTransferCar, 0); //CarTypeNum
			Write32(pTransferCar, 0); //KartType[]

			len = pTransferCar - pRefitTransferCfg;
			Set16(pRefitTransferCfg, (WORD)len);
			pRefitTransferCfg += len;
		}
		Write16(pRefitTransferCfg, 0); //DescLen

		len = pRefitTransferCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 1214, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestReportAntiCollisionDataBuff(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT BuffeLen = Read16(p);

}

void NotifyRedPointInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write8(p, 0); //RedPointNum
	for (size_t i = 0; i < n; i++)
	{ //RedPointInfo
		BYTE* pRedPointInfo = p;
		Write16(pRedPointInfo, 0); //len

		Write8(pRedPointInfo, 0); //Type
		Write8(pRedPointInfo, 0); //Status

		len = pRedPointInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //All
	Write8(p, 0); //IsNeedPlayVideoGuid

	len = p - buf;
	SendToClient(Client, 25114, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestBPGetCoreAward(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UCHAR EventType = Read8(p);

}

void ResponseBPGetCoreAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //EventType
	Write8(p, 0); //AwardNum
	for (size_t i = 0; i < n; i++)
	{ //AwardInfo
		BYTE* pAwardInfo = p;
		Write16(pAwardInfo, 0); //len

		{ //AwardToClient
			BYTE* pAwardToClient = pAwardInfo;
			Write16(pAwardToClient, 0); //len

			Write32(pAwardToClient, 0); //Exp
			Write32(pAwardToClient, 0); //Money
			Write32(pAwardToClient, 0); //SuperMoney
			Write16(pAwardToClient, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAwardToClient;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pAwardToClient;
				Set16(pAwardToClient, (WORD)len);
				pAwardToClient += len;
			}
			Write32(pAwardToClient, 0); //Coupons
			Write32(pAwardToClient, 0); //GuildPoint
			Write32(pAwardToClient, 0); //LuckMoney
			Write8(pAwardToClient, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pAwardToClient;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pAwardToClient;
				Set16(pAwardToClient, (WORD)len);
				pAwardToClient += len;
			}
			Write32(pAwardToClient, 0); //SpeedCoin

			len = pAwardToClient - pAwardInfo;
			Set16(pAwardInfo, (WORD)len);
			pAwardInfo += len;
		}
		Write16(pAwardInfo, 0); //AwardLevel

		len = pAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //UserLevel
	Write16(p, 0); //UserType

	len = p - buf;
	SendToClient(Client, 28382, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyGameBuffCfg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //FeatureCombineNum
	for (size_t i = 0; i < n; i++)
	{ //FeatureCombineCfg
		BYTE* pFeatureCombineCfg = p;
		Write16(pFeatureCombineCfg, 0); //len

		Write32(pFeatureCombineCfg, 0); //FeatureID
		Write32(pFeatureCombineCfg, 0); //AdaptGameType
		Write32(pFeatureCombineCfg, 0); //GameEffectTimesLimit
		Write32(pFeatureCombineCfg, 0); //InnerCDTime
		Write32(pFeatureCombineCfg, 0); //ShowCDTime
		Write32(pFeatureCombineCfg, 0); //StartCDTime
		{ //FeatureTriggerCfg
			BYTE* pFeatureTriggerCfg = pFeatureCombineCfg;
			Write16(pFeatureTriggerCfg, 0); //len

			Write32(pFeatureTriggerCfg, 0); //RepeatTriggerType
			Write32(pFeatureTriggerCfg, 0); //TriggerRelation
			Write32(pFeatureTriggerCfg, 0); //TriggerConditionNum
			for (size_t i = 0; i < n; i++)
			{ //TriggerData
				BYTE* pTriggerData = pFeatureTriggerCfg;
				Write16(pTriggerData, 0); //len

				Write32(pTriggerData, 0); //TriggerID
				Write32(pTriggerData, 0); //TriggerParaNum
				Write32(pTriggerData, 0); //TriggerPara[]

				len = pTriggerData - pFeatureTriggerCfg;
				Set16(pFeatureTriggerCfg, (WORD)len);
				pFeatureTriggerCfg += len;
			}

			len = pFeatureTriggerCfg - pFeatureCombineCfg;
			Set16(pFeatureCombineCfg, (WORD)len);
			pFeatureCombineCfg += len;
		}
		Write16(pFeatureCombineCfg, 0); //FeatureNum
		for (size_t i = 0; i < n; i++)
		{ //FeatureStatusInfo
			BYTE* pFeatureStatusInfo = pFeatureCombineCfg;
			Write16(pFeatureStatusInfo, 0); //len

			Write32(pFeatureStatusInfo, 0); //StatusGenType
			Write32(pFeatureStatusInfo, 0); //StatusGenTypeParaNum
			Write32(pFeatureStatusInfo, 0); //StatusGenTypePara[]
			Write32(pFeatureStatusInfo, 0); //StatusEndType
			Write32(pFeatureStatusInfo, 0); //StatusEndTypePara
			{ //StatusAtomEndTriggerData
				BYTE* pStatusAtomEndTriggerData = pFeatureStatusInfo;
				Write16(pStatusAtomEndTriggerData, 0); //len

				Write32(pStatusAtomEndTriggerData, 0); //TriggerID
				Write32(pStatusAtomEndTriggerData, 0); //TriggerParaNum
				Write32(pStatusAtomEndTriggerData, 0); //TriggerPara[]

				len = pStatusAtomEndTriggerData - pFeatureStatusInfo;
				Set16(pFeatureStatusInfo, (WORD)len);
				pFeatureStatusInfo += len;
			}
			Write32(pFeatureStatusInfo, 0); //StatusAtomID
			Write32(pFeatureStatusInfo, 0); //StatusAtomParaNum
			Write32(pFeatureStatusInfo, 0); //StatusAtomPara[]
			Write8(pFeatureStatusInfo, 0); //ForwardAccelNum
			for (size_t i = 0; i < n; i++)
			{ //ForwardAccel
				BYTE* pForwardAccel = pFeatureStatusInfo;
				Write16(pForwardAccel, 0); //len

				WriteUn(pForwardAccel, 0); //ForwardAccelLimitPara[]

				len = pForwardAccel - pFeatureStatusInfo;
				Set16(pFeatureStatusInfo, (WORD)len);
				pFeatureStatusInfo += len;
			}

			len = pFeatureStatusInfo - pFeatureCombineCfg;
			Set16(pFeatureCombineCfg, (WORD)len);
			pFeatureCombineCfg += len;
		}

		len = pFeatureCombineCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //FeatureTypeNum
	for (size_t i = 0; i < n; i++)
	{ //FeatureStatusLimitCfg
		BYTE* pFeatureStatusLimitCfg = p;
		Write16(pFeatureStatusLimitCfg, 0); //len

		Write32(pFeatureStatusLimitCfg, 0); //FeatureType
		Write32(pFeatureStatusLimitCfg, 0); //FeatureStatusLimitParaNum
		Write32(pFeatureStatusLimitCfg, 0); //FeatureStatusLimitPara[]
		Write8(pFeatureStatusLimitCfg, 0); //ForwardAccelLimitNum
		for (size_t i = 0; i < n; i++)
		{ //ForwardAccelLimitPara
			BYTE* pForwardAccelLimitPara = pFeatureStatusLimitCfg;
			Write16(pForwardAccelLimitPara, 0); //len

			WriteUn(pForwardAccelLimitPara, 0); //ForwardAccelLimitPara[]

			len = pForwardAccelLimitPara - pFeatureStatusLimitCfg;
			Set16(pFeatureStatusLimitCfg, (WORD)len);
			pFeatureStatusLimitCfg += len;
		}

		len = pFeatureStatusLimitCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 28404, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyQSLabTriggerAffect(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write8(p, 0); //AffectArrNum
	for (size_t i = 0; i < n; i++)
	{ //AffectList
		BYTE* pAffectList = p;
		Write16(pAffectList, 0); //len

		Write8(pAffectList, 0); //AffectNum
		for (size_t i = 0; i < n; i++)
		{ //AffectArray
			BYTE* pAffectArray = pAffectList;
			Write16(pAffectArray, 0); //len

			Write16(pAffectArray, 0); //AffectType
			Write8(pAffectArray, 0); //IntParaNum
			Write32(pAffectArray, 0); //Para[]
			Write8(pAffectArray, 0); //StringPrarLen1
			Write32(pAffectArray, 0); //TraggerAffectId

			len = pAffectArray - pAffectList;
			Set16(pAffectList, (WORD)len);
			pAffectList += len;
		}

		len = pAffectList - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //CheckBlockNum
	Write32(p, 0); //BlockID[]
	Write8(p, 0); //CheckAreaNum
	Write32(p, 0); //AreaID[]

	len = p - buf;
	SendToClient(Client, 28405, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestQsLabCheckTrigger(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT SeasonId = Read32(p);
	USHORT ConditionType = Read16(p);
	USHORT InteractionType = Read16(p);
	int ID = Read32(p);
	UCHAR TransterState = Read8(p);

}

void ResponseQsLabCheckTrigger(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 28406, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetQsLabReviewInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetQsLabReviewInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write8(p, 0); //PassedSeasonNum
	for (size_t i = 0; i < n; i++)
	{ //QsLabPassedSeasonMainBoardInfo
		BYTE* pQsLabPassedSeasonMainBoardInfo = p;
		Write16(pQsLabPassedSeasonMainBoardInfo, 0); //len

		{ //QsLabSeasonBriefInfo
			BYTE* pQsLabSeasonBriefInfo = pQsLabPassedSeasonMainBoardInfo;
			Write16(pQsLabSeasonBriefInfo, 0); //len

			Write32(pQsLabSeasonBriefInfo, 0); //SeasonID
			Write32(pQsLabSeasonBriefInfo, 0); //SeasonStartTime
			Write32(pQsLabSeasonBriefInfo, 0); //SeasonEndTime
			Write32(pQsLabSeasonBriefInfo, 0); //MapID
			Write8(pQsLabSeasonBriefInfo, 0); //GloryStarTotalNum
			Write8(pQsLabSeasonBriefInfo, 0); //AwardBoxTotalNum
			Write16(pQsLabSeasonBriefInfo, 0); //LadderID
			Write16(pQsLabSeasonBriefInfo, 0); //ChildRankLev
			Write16(pQsLabSeasonBriefInfo, 0); //PlayerLevel
			Write16(pQsLabSeasonBriefInfo, 0); //NpcID
			Write8(pQsLabSeasonBriefInfo, 0); //CanExchangeItemNum
			Write32(pQsLabSeasonBriefInfo, 0); //CanExchangeItemList[]

			len = pQsLabSeasonBriefInfo - pQsLabPassedSeasonMainBoardInfo;
			Set16(pQsLabPassedSeasonMainBoardInfo, (WORD)len);
			pQsLabPassedSeasonMainBoardInfo += len;
		}
		Write8(pQsLabPassedSeasonMainBoardInfo, 0); //AwardBoxNum
		for (size_t i = 0; i < n; i++)
		{ //QsLabBoxAwardToClient
			BYTE* pQsLabBoxAwardToClient = pQsLabPassedSeasonMainBoardInfo;
			Write16(pQsLabBoxAwardToClient, 0); //len

			Write8(pQsLabBoxAwardToClient, 0); //BoxID
			Write8(pQsLabBoxAwardToClient, 0); //BoxType
			Write8(pQsLabBoxAwardToClient, 0); //BelongsChapterID
			Write16(pQsLabBoxAwardToClient, 0); //NeedStarNum
			{ //QsLabAwardCfg
				BYTE* pQsLabAwardCfg = pQsLabBoxAwardToClient;
				Write16(pQsLabAwardCfg, 0); //len

				Write32(pQsLabAwardCfg, 0); //Exp
				Write32(pQsLabAwardCfg, 0); //Money
				Write32(pQsLabAwardCfg, 0); //SuperMoney
				Write16(pQsLabAwardCfg, 0); //ItemNum
				for (size_t i = 0; i < n; i++)
				{ //ItemInfo
					BYTE* pItemInfo = pQsLabAwardCfg;
					Write16(pItemInfo, 0); //len

					Write32(pItemInfo, 0); //ItemID
					Write32(pItemInfo, 0); //ItemNum
					Write32(pItemInfo, 0); //AvailPeriod
					Write8(pItemInfo, 0); //Status
					WriteUn(pItemInfo, 0); //ObtainTime
					Write32(pItemInfo, 0); //OtherAttribute
					Write16(pItemInfo, 0); //ItemType

					len = pItemInfo - pQsLabAwardCfg;
					Set16(pQsLabAwardCfg, (WORD)len);
					pQsLabAwardCfg += len;
				}
				Write32(pQsLabAwardCfg, 0); //Coupons
				Write32(pQsLabAwardCfg, 0); //GuildPoint
				Write32(pQsLabAwardCfg, 0); //LuckMoney
				Write8(pQsLabAwardCfg, 0); //ExtendInfoNum
				for (size_t i = 0; i < n; i++)
				{ //ExtendInfoAward
					BYTE* pExtendInfoAward = pQsLabAwardCfg;
					Write16(pExtendInfoAward, 0); //len

					Write16(pExtendInfoAward, 0); //Key
					Write32(pExtendInfoAward, 0); //AddValue
					Write32(pExtendInfoAward, 0); //TotalValue
					Write8(pExtendInfoAward, 0); //ShowPriority
					Write16(pExtendInfoAward, 0); //BuyNeedScore
					Write8(pExtendInfoAward, 0); //OneMatchMaxNum

					len = pExtendInfoAward - pQsLabAwardCfg;
					Set16(pQsLabAwardCfg, (WORD)len);
					pQsLabAwardCfg += len;
				}
				Write32(pQsLabAwardCfg, 0); //SpeedCoin

				len = pQsLabAwardCfg - pQsLabBoxAwardToClient;
				Set16(pQsLabBoxAwardToClient, (WORD)len);
				pQsLabBoxAwardToClient += len;
			}
			Write8(pQsLabBoxAwardToClient, 0); //IsSuperMoneyExpired
			Write8(pQsLabBoxAwardToClient, 0); //IsCouponsExpired

			len = pQsLabBoxAwardToClient - pQsLabPassedSeasonMainBoardInfo;
			Set16(pQsLabPassedSeasonMainBoardInfo, (WORD)len);
			pQsLabPassedSeasonMainBoardInfo += len;
		}
		Write8(pQsLabPassedSeasonMainBoardInfo, 0); //AwardBoxAlreadyGotNum
		Write16(pQsLabPassedSeasonMainBoardInfo, 0); //AwardBoxIDList[]
		Write8(pQsLabPassedSeasonMainBoardInfo, 0); //IsFirstTime

		len = pQsLabPassedSeasonMainBoardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 28411, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetQsLabCommonCfg(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT ClientParam = Read16(p);
	UCHAR EnterType = Read8(p);
	USHORT SeasonID = Read16(p);

}

void ResponseGetQsLabCommonCfg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	{ //QsLabSeasonBriefInfo
		BYTE* pQsLabSeasonBriefInfo = p;
		Write16(pQsLabSeasonBriefInfo, 0); //len

		Write32(pQsLabSeasonBriefInfo, 0); //SeasonID
		Write32(pQsLabSeasonBriefInfo, 0); //SeasonStartTime
		Write32(pQsLabSeasonBriefInfo, 0); //SeasonEndTime
		Write32(pQsLabSeasonBriefInfo, 0); //MapID
		Write8(pQsLabSeasonBriefInfo, 0); //GloryStarTotalNum
		Write8(pQsLabSeasonBriefInfo, 0); //AwardBoxTotalNum
		Write16(pQsLabSeasonBriefInfo, 0); //LadderID
		Write16(pQsLabSeasonBriefInfo, 0); //ChildRankLev
		Write16(pQsLabSeasonBriefInfo, 0); //PlayerLevel
		Write16(pQsLabSeasonBriefInfo, 0); //NpcID
		Write8(pQsLabSeasonBriefInfo, 0); //CanExchangeItemNum
		Write32(pQsLabSeasonBriefInfo, 0); //CanExchangeItemList[]

		len = pQsLabSeasonBriefInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //AwardBoxNum
	for (size_t i = 0; i < n; i++)
	{ //QsLabBoxAwardToClient
		BYTE* pQsLabBoxAwardToClient = p;
		Write16(pQsLabBoxAwardToClient, 0); //len

		Write8(pQsLabBoxAwardToClient, 0); //BoxID
		Write8(pQsLabBoxAwardToClient, 0); //BoxType
		Write8(pQsLabBoxAwardToClient, 0); //BelongsChapterID
		Write16(pQsLabBoxAwardToClient, 0); //NeedStarNum
		{ //QsLabAwardCfg
			BYTE* pQsLabAwardCfg = pQsLabBoxAwardToClient;
			Write16(pQsLabAwardCfg, 0); //len

			Write32(pQsLabAwardCfg, 0); //Exp
			Write32(pQsLabAwardCfg, 0); //Money
			Write32(pQsLabAwardCfg, 0); //SuperMoney
			Write16(pQsLabAwardCfg, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pQsLabAwardCfg;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pQsLabAwardCfg;
				Set16(pQsLabAwardCfg, (WORD)len);
				pQsLabAwardCfg += len;
			}
			Write32(pQsLabAwardCfg, 0); //Coupons
			Write32(pQsLabAwardCfg, 0); //GuildPoint
			Write32(pQsLabAwardCfg, 0); //LuckMoney
			Write8(pQsLabAwardCfg, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pQsLabAwardCfg;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pQsLabAwardCfg;
				Set16(pQsLabAwardCfg, (WORD)len);
				pQsLabAwardCfg += len;
			}
			Write32(pQsLabAwardCfg, 0); //SpeedCoin

			len = pQsLabAwardCfg - pQsLabBoxAwardToClient;
			Set16(pQsLabBoxAwardToClient, (WORD)len);
			pQsLabBoxAwardToClient += len;
		}
		Write8(pQsLabBoxAwardToClient, 0); //IsSuperMoneyExpired
		Write8(pQsLabBoxAwardToClient, 0); //IsCouponsExpired

		len = pQsLabBoxAwardToClient - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //AwardBoxAlreadyGotNum
	Write16(p, 0); //AwardBoxIDList[]
	Write8(p, 0); //ChapterNum
	for (size_t i = 0; i < n; i++)
	{ //GloryStarInfo
		BYTE* pGloryStarInfo = p;
		Write16(pGloryStarInfo, 0); //len

		Write16(pGloryStarInfo, 0); //AlreadyGloryStarNum
		Write16(pGloryStarInfo, 0); //TotalGloryStarNum

		len = pGloryStarInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //ClientParam
	Write8(p, 0); //IsFirstTime
	Write8(p, 0); //EnterType
	Write32(p, 0); //GloryCoinLimit
	Write32(p, 0); //QsChipLimit
	Write8(p, 0); //StartTimeTipsLen
	Write8(p, 0); //IsUnlockTask

	len = p - buf;
	SendToClient(Client, 28385, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetQsLabSeasonCfg(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT SeasonId = Read32(p);
	USHORT ClientParam = Read16(p);
	UCHAR EnterType = Read8(p);

}

void ResponseGetQsLabSeasonCfg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write32(p, 0); //StartGridID
	Write8(p, 0); //HasMoreInfo
	Write16(p, 0); //GridNum
	for (size_t i = 0; i < n; i++)
	{ //QsLabMapGridCfg
		BYTE* pQsLabMapGridCfg = p;
		Write16(pQsLabMapGridCfg, 0); //len

		Write16(pQsLabMapGridCfg, 0); //GridID
		Write32(pQsLabMapGridCfg, 0); //StateMask
		Write32(pQsLabMapGridCfg, 0); //InteractionID
		Write8(pQsLabMapGridCfg, 0); //BelongsChapterID
		Write32(pQsLabMapGridCfg, 0); //Neighbors[]
		Write32(pQsLabMapGridCfg, 0); //TerrianID
		Write16(pQsLabMapGridCfg, 0); //Pos[]
		Write16(pQsLabMapGridCfg, 0); //LandFormID
		Write8(pQsLabMapGridCfg, 0); //Level

		len = pQsLabMapGridCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //InteractiveGirdNum
	for (size_t i = 0; i < n; i++)
	{ //QSLabMapInteractiveGirdCfg
		BYTE* pQSLabMapInteractiveGirdCfg = p;
		Write16(pQSLabMapInteractiveGirdCfg, 0); //len

		Write16(pQSLabMapInteractiveGirdCfg, 0); //InteractiveID
		Write16(pQSLabMapInteractiveGirdCfg, 0); //ResourceID
		Write8(pQSLabMapInteractiveGirdCfg, 0); //Type
		Write8(pQSLabMapInteractiveGirdCfg, 0); //ID

		len = pQSLabMapInteractiveGirdCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //TowelNum
	for (size_t i = 0; i < n; i++)
	{ //QSLabTowelCfg
		BYTE* pQSLabTowelCfg = p;
		Write16(pQSLabTowelCfg, 0); //len

		Write8(pQSLabTowelCfg, 0); //TowelID
		Write16(pQSLabTowelCfg, 0); //UnlockNeedStarNum

		len = pQSLabTowelCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //LadderSwitchNum
	for (size_t i = 0; i < n; i++)
	{ //QSLabLadderSwitchCfg
		BYTE* pQSLabLadderSwitchCfg = p;
		Write16(pQSLabLadderSwitchCfg, 0); //len

		Write8(pQSLabLadderSwitchCfg, 0); //SwitchID
		Write8(pQSLabLadderSwitchCfg, 0); //StageGroupID
		Write8(pQSLabLadderSwitchCfg, 0); //DefaultStatus

		len = pQSLabLadderSwitchCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //LadderStageNum
	for (size_t i = 0; i < n; i++)
	{ //QSLabLadderStageCfg
		BYTE* pQSLabLadderStageCfg = p;
		Write16(pQSLabLadderStageCfg, 0); //len

		Write8(pQSLabLadderStageCfg, 0); //StageID
		Write8(pQSLabLadderStageCfg, 0); //StageGroupID
		Write8(pQSLabLadderStageCfg, 0); //DefaultStatus
		Write8(pQSLabLadderStageCfg, 0); //DefaultDirection
		Write16(pQSLabLadderStageCfg, 0); //InteractiveIDOnStage

		len = pQSLabLadderStageCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //LaserNum
	for (size_t i = 0; i < n; i++)
	{ //QSLabLaserCfg
		BYTE* pQSLabLaserCfg = p;
		Write16(pQSLabLaserCfg, 0); //len

		Write8(pQSLabLaserCfg, 0); //LaseID
		Write8(pQSLabLaserCfg, 0); //LaserDirection

		len = pQSLabLaserCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //FenceNum
	for (size_t i = 0; i < n; i++)
	{ //QSLabfenceCfg
		BYTE* pQSLabfenceCfg = p;
		Write16(pQSLabfenceCfg, 0); //len

		Write8(pQSLabfenceCfg, 0); //FenceID
		Write32(pQSLabfenceCfg, 0); //BossID

		len = pQSLabfenceCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //SprinklerNum
	for (size_t i = 0; i < n; i++)
	{ //QSLabSprinklerCfg
		BYTE* pQSLabSprinklerCfg = p;
		Write16(pQSLabSprinklerCfg, 0); //len

		Write8(pQSLabSprinklerCfg, 0); //SprinklerID
		Write16(pQSLabSprinklerCfg, 0); //BossNum
		Write32(pQSLabSprinklerCfg, 0); //BossID[]

		len = pQSLabSprinklerCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //AwardBoxNum
	for (size_t i = 0; i < n; i++)
	{ //QsLabBoxAwardToClient
		BYTE* pQsLabBoxAwardToClient = p;
		Write16(pQsLabBoxAwardToClient, 0); //len

		Write8(pQsLabBoxAwardToClient, 0); //BoxID
		Write8(pQsLabBoxAwardToClient, 0); //BoxType
		Write8(pQsLabBoxAwardToClient, 0); //BelongsChapterID
		Write16(pQsLabBoxAwardToClient, 0); //NeedStarNum
		{ //QsLabAwardCfg
			BYTE* pQsLabAwardCfg = pQsLabBoxAwardToClient;
			Write16(pQsLabAwardCfg, 0); //len

			Write32(pQsLabAwardCfg, 0); //Exp
			Write32(pQsLabAwardCfg, 0); //Money
			Write32(pQsLabAwardCfg, 0); //SuperMoney
			Write16(pQsLabAwardCfg, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pQsLabAwardCfg;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute
				Write16(pItemInfo, 0); //ItemType

				len = pItemInfo - pQsLabAwardCfg;
				Set16(pQsLabAwardCfg, (WORD)len);
				pQsLabAwardCfg += len;
			}
			Write32(pQsLabAwardCfg, 0); //Coupons
			Write32(pQsLabAwardCfg, 0); //GuildPoint
			Write32(pQsLabAwardCfg, 0); //LuckMoney
			Write8(pQsLabAwardCfg, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pQsLabAwardCfg;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pQsLabAwardCfg;
				Set16(pQsLabAwardCfg, (WORD)len);
				pQsLabAwardCfg += len;
			}
			Write32(pQsLabAwardCfg, 0); //SpeedCoin

			len = pQsLabAwardCfg - pQsLabBoxAwardToClient;
			Set16(pQsLabBoxAwardToClient, (WORD)len);
			pQsLabBoxAwardToClient += len;
		}
		Write8(pQsLabBoxAwardToClient, 0); //IsSuperMoneyExpired
		Write8(pQsLabBoxAwardToClient, 0); //IsCouponsExpired

		len = pQsLabBoxAwardToClient - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //BossNum
	for (size_t i = 0; i < n; i++)
	{ //QsLabBossCfg
		BYTE* pQsLabBossCfg = p;
		Write16(pQsLabBossCfg, 0); //len

		Write8(pQsLabBossCfg, 0); //BossID
		Write8(pQsLabBossCfg, 0); //BuffBoxID
		Write16(pQsLabBossCfg, 0); //NeeStarNum
		{ //NormalEpisodeCfg
			BYTE* pNormalEpisodeCfg = pQsLabBossCfg;
			Write16(pNormalEpisodeCfg, 0); //len

			Write32(pNormalEpisodeCfg, 0); //PointID
			Write32(pNormalEpisodeCfg, 0); //TargetVechileID
			Write32(pNormalEpisodeCfg, 0); //TargetVechileExtraStar
			Write32(pNormalEpisodeCfg, 0); //ForbidVechileID
			Write32(pNormalEpisodeCfg, 0); //GloryStarNum

			len = pNormalEpisodeCfg - pQsLabBossCfg;
			Set16(pQsLabBossCfg, (WORD)len);
			pQsLabBossCfg += len;
		}
		{ //EliteEpisodeCfg
			BYTE* pEliteEpisodeCfg = pQsLabBossCfg;
			Write16(pEliteEpisodeCfg, 0); //len

			Write32(pEliteEpisodeCfg, 0); //PointID
			Write32(pEliteEpisodeCfg, 0); //TargetVechileID
			Write32(pEliteEpisodeCfg, 0); //TargetVechileExtraStar
			Write32(pEliteEpisodeCfg, 0); //ForbidVechileID
			Write32(pEliteEpisodeCfg, 0); //GloryStarNum

			len = pEliteEpisodeCfg - pQsLabBossCfg;
			Set16(pQsLabBossCfg, (WORD)len);
			pQsLabBossCfg += len;
		}
		{ //HardEpisodeCfg
			BYTE* pHardEpisodeCfg = pQsLabBossCfg;
			Write16(pHardEpisodeCfg, 0); //len

			Write32(pHardEpisodeCfg, 0); //PointID
			Write32(pHardEpisodeCfg, 0); //TargetVechileID
			Write32(pHardEpisodeCfg, 0); //TargetVechileExtraStar
			Write32(pHardEpisodeCfg, 0); //ForbidVechileID
			Write32(pHardEpisodeCfg, 0); //GloryStarNum

			len = pHardEpisodeCfg - pQsLabBossCfg;
			Set16(pQsLabBossCfg, (WORD)len);
			pQsLabBossCfg += len;
		}
		Write8(pQsLabBossCfg, 0); //IsMuddy
		Write32(pQsLabBossCfg, 0); //TargetNPCID
		Write16(pQsLabBossCfg, 0); //EnterStoryId
		Write16(pQsLabBossCfg, 0); //GameOverStoryId
		Write16(pQsLabBossCfg, 0); //BossMode
		Write8(pQsLabBossCfg, 0); //BossNameLen

		len = pQsLabBossCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //InitCarNum
	for (size_t i = 0; i < n; i++)
	{ //CarExpNumCfg
		BYTE* pCarExpNumCfg = p;
		Write16(pCarExpNumCfg, 0); //len

		Write32(pCarExpNumCfg, 0); //CarId
		Write8(pCarExpNumCfg, 0); //ExpNum

		len = pCarExpNumCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //PersonalCarId
	Write16(p, 0); //ClientParam
	Write8(p, 0); //Radius
	Write8(p, 0); //QsLabPortalNum
	for (size_t i = 0; i < n; i++)
	{ //QsLabPortalCfg
		BYTE* pQsLabPortalCfg = p;
		Write16(pQsLabPortalCfg, 0); //len

		Write16(pQsLabPortalCfg, 0); //PortalID
		Write8(pQsLabPortalCfg, 0); //Direction
		Write16(pQsLabPortalCfg, 0); //OtherPortalID
		Write8(pQsLabPortalCfg, 0); //OutDirection

		len = pQsLabPortalCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //RailGroupNum
	for (size_t i = 0; i < n; i++)
	{ //QsLabRailGroupCfg
		BYTE* pQsLabRailGroupCfg = p;
		Write16(pQsLabRailGroupCfg, 0); //len

		Write16(pQsLabRailGroupCfg, 0); //RailGroupID
		Write16(pQsLabRailGroupCfg, 0); //StartRailID
		Write8(pQsLabRailGroupCfg, 0); //RailLength
		Write16(pQsLabRailGroupCfg, 0); //EndRailID
		Write8(pQsLabRailGroupCfg, 0); //Direction

		len = pQsLabRailGroupCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //RailNum
	for (size_t i = 0; i < n; i++)
	{ //QsLabRailCfg
		BYTE* pQsLabRailCfg = p;
		Write16(pQsLabRailCfg, 0); //len

		Write16(pQsLabRailCfg, 0); //RailID
		Write16(pQsLabRailCfg, 0); //BelongRailGroupNum
		Write16(pQsLabRailCfg, 0); //BelongRailGroupList[]

		len = pQsLabRailCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //InterTipsGroupNum
	for (size_t i = 0; i < n; i++)
	{ //QsLabChapterActTipsCfg
		BYTE* pQsLabChapterActTipsCfg = p;
		Write16(pQsLabChapterActTipsCfg, 0); //len

		Write8(pQsLabChapterActTipsCfg, 0); //GroupID
		Write16(pQsLabChapterActTipsCfg, 0); //Num
		Write16(pQsLabChapterActTipsCfg, 0); //InterIDList[]

		len = pQsLabChapterActTipsCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //PokeCardNum
	for (size_t i = 0; i < n; i++)
	{ //QsLabPokeCardCfg
		BYTE* pQsLabPokeCardCfg = p;
		Write16(pQsLabPokeCardCfg, 0); //len

		Write16(pQsLabPokeCardCfg, 0); //CardID
		Write8(pQsLabPokeCardCfg, 0); //CardType
		Write16(pQsLabPokeCardCfg, 0); //CardFaceValue

		len = pQsLabPokeCardCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //NpcPokeCardGridId

	len = p - buf;
	SendToClient(Client, 28386, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyQsLabSeasonMoreInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //GridNum
	for (size_t i = 0; i < n; i++)
	{ //QsLabMapGridCfg
		BYTE* pQsLabMapGridCfg = p;
		Write16(pQsLabMapGridCfg, 0); //len

		Write16(pQsLabMapGridCfg, 0); //GridID
		Write32(pQsLabMapGridCfg, 0); //StateMask
		Write32(pQsLabMapGridCfg, 0); //InteractionID
		Write8(pQsLabMapGridCfg, 0); //BelongsChapterID
		Write32(pQsLabMapGridCfg, 0); //Neighbors[]
		Write32(pQsLabMapGridCfg, 0); //TerrianID
		Write16(pQsLabMapGridCfg, 0); //Pos[]
		Write16(pQsLabMapGridCfg, 0); //LandFormID
		Write8(pQsLabMapGridCfg, 0); //Level

		len = pQsLabMapGridCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasNext

	len = p - buf;
	SendToClient(Client, 28387, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyQsLabSeasonInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //Position
	Write32(p, 0); //DriveCar
	Write8(p, 0); //LightTowelPerformaceBit
	Write8(p, 0); //NpcHasAbility
	Write8(p, 0); //StepGridArrayNum
	Write32(p, 0); //StepGridBitArray[]
	Write8(p, 0); //CarRentalNum
	for (size_t i = 0; i < n; i++)
	{ //CarRentalList
		BYTE* pCarRentalList = p;
		Write16(pCarRentalList, 0); //len

		Write8(pCarRentalList, 0); //ID
		Write8(pCarRentalList, 0); //Status
		Write8(pCarRentalList, 0); //CarNum
		Write32(pCarRentalList, 0); //CarIDList[]

		len = pCarRentalList - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //BuffBoxNum
	for (size_t i = 0; i < n; i++)
	{ //BuffBoxList
		BYTE* pBuffBoxList = p;
		Write16(pBuffBoxList, 0); //len

		Write8(pBuffBoxList, 0); //ID
		Write8(pBuffBoxList, 0); //Status
		Write8(pBuffBoxList, 0); //BuffNum
		Write16(pBuffBoxList, 0); //BuffIDList[]

		len = pBuffBoxList - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //TowelNum
	for (size_t i = 0; i < n; i++)
	{ //TowelList
		BYTE* pTowelList = p;
		Write16(pTowelList, 0); //len

		Write8(pTowelList, 0); //ID
		Write32(pTowelList, 0); //LightTime
		Write8(pTowelList, 0); //Position
		Write32(pTowelList, 0); //TimeLeft
		Write8(pTowelList, 0); //PetPosition

		len = pTowelList - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //BossNum
	for (size_t i = 0; i < n; i++)
	{ //BossList
		BYTE* pBossList = p;
		Write16(pBossList, 0); //len

		Write8(pBossList, 0); //ID
		Write8(pBossList, 0); //HasMuddy
		Write8(pBossList, 0); //GloryStarNum
		Write8(pBossList, 0); //ExtraGloryStarNum

		len = pBossList - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //OperatorData
		BYTE* pOperatorData = p;
		Write16(pOperatorData, 0); //len

		Write32(pOperatorData, 0); //LadderSwichBit
		Write8(pOperatorData, 0); //StageBitArrayNum
		Write32(pOperatorData, 0); //LadderStageBit[]
		Write8(pOperatorData, 0); //GenBlockNum
		for (size_t i = 0; i < n; i++)
		{ //GenBlockList
			BYTE* pGenBlockList = pOperatorData;
			Write16(pGenBlockList, 0); //len

			Write16(pGenBlockList, 0); //GridID
			Write8(pGenBlockList, 0); //Status

			len = pGenBlockList - pOperatorData;
			Set16(pOperatorData, (WORD)len);
			pOperatorData += len;
		}
		Write8(pOperatorData, 0); //SprinklerNum
		Write16(pOperatorData, 0); //LandFormNum
		for (size_t i = 0; i < n; i++)
		{ //LandFormList
			BYTE* pLandFormList = pOperatorData;
			Write16(pLandFormList, 0); //len

			Write16(pLandFormList, 0); //GridID
			Write32(pLandFormList, 0); //Status
			Write16(pLandFormList, 0); //LandformID
			Write16(pLandFormList, 0); //TerrianID

			len = pLandFormList - pOperatorData;
			Set16(pOperatorData, (WORD)len);
			pOperatorData += len;
		}
		Write16(pOperatorData, 0); //RailGroupNum
		for (size_t i = 0; i < n; i++)
		{ //RailGroupDataList
			BYTE* pRailGroupDataList = pOperatorData;
			Write16(pRailGroupDataList, 0); //len

			Write16(pRailGroupDataList, 0); //RailGroupID
			Write8(pRailGroupDataList, 0); //RailChangeNum
			for (size_t i = 0; i < n; i++)
			{ //QsLabStationRailChangeData
				BYTE* pQsLabStationRailChangeData = pRailGroupDataList;
				Write16(pQsLabStationRailChangeData, 0); //len

				Write16(pQsLabStationRailChangeData, 0); //GridID
				Write16(pQsLabStationRailChangeData, 0); //InteractiveID
				Write16(pQsLabStationRailChangeData, 0); //LandformID
				Write16(pQsLabStationRailChangeData, 0); //TerrianID
				Write32(pQsLabStationRailChangeData, 0); //StateMask
				{ //LevelData
					BYTE* pLevelData = pQsLabStationRailChangeData;
					Write16(pLevelData, 0); //len

					Write16(pLevelData, 0); //InteractiveID

					len = pLevelData - pQsLabStationRailChangeData;
					Set16(pQsLabStationRailChangeData, (WORD)len);
					pQsLabStationRailChangeData += len;
				}

				len = pQsLabStationRailChangeData - pRailGroupDataList;
				Set16(pRailGroupDataList, (WORD)len);
				pRailGroupDataList += len;
			}

			len = pRailGroupDataList - pOperatorData;
			Set16(pOperatorData, (WORD)len);
			pOperatorData += len;
		}
		Write8(pOperatorData, 0); //PokeCardNum
		for (size_t i = 0; i < n; i++)
		{ //QsLabStationPokeCardData
			BYTE* pQsLabStationPokeCardData = pOperatorData;
			Write16(pQsLabStationPokeCardData, 0); //len

			Write16(pQsLabStationPokeCardData, 0); //GridId
			Write8(pQsLabStationPokeCardData, 0); //Status
			Write16(pQsLabStationPokeCardData, 0); //PokeCardID
			Write8(pQsLabStationPokeCardData, 0); //ReflectDirection

			len = pQsLabStationPokeCardData - pOperatorData;
			Set16(pOperatorData, (WORD)len);
			pOperatorData += len;
		}
		Write16(pOperatorData, 0); //OwnPokeCard

		len = pOperatorData - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //CarBagNum
	Write32(p, 0); //CarIDList[]
	Write8(p, 0); //BuffBagNum
	for (size_t i = 0; i < n; i++)
	{ //BuffIDList
		BYTE* pBuffIDList = p;
		Write16(pBuffIDList, 0); //len

		Write8(pBuffIDList, 0); //ID
		Write8(pBuffIDList, 0); //Num

		len = pBuffIDList - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ClueNum
	for (size_t i = 0; i < n; i++)
	{ //ClueList
		BYTE* pClueList = p;
		Write16(pClueList, 0); //len

		Write16(pClueList, 0); //ClueID
		Write32(pClueList, 0); //TimeStamp
		Write8(pClueList, 0); //OpenStatus

		len = pClueList - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //TriggerNum
	Write32(p, 0); //TriggerBitList[]
	Write8(p, 0); //AwardBoxNum
	Write16(p, 0); //AwardBoxIDList[]
	Write8(p, 0); //BossSelectLev
	Write8(p, 0); //MouseSlideTime
	Write8(p, 0); //IsNpcTransformed
	Write8(p, 0); //IterTipsGroupNum
	for (size_t i = 0; i < n; i++)
	{ //InterTipsGroupInfo
		BYTE* pInterTipsGroupInfo = p;
		Write16(pInterTipsGroupInfo, 0); //len

		Write8(pInterTipsGroupInfo, 0); //GroupID
		Write32(pInterTipsGroupInfo, 0); //InterTipsID

		len = pInterTipsGroupInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //CurrentPerformTipsInfo
		BYTE* pCurrentPerformTipsInfo = p;
		Write16(pCurrentPerformTipsInfo, 0); //len

		Write8(pCurrentPerformTipsInfo, 0); //GroupID
		Write32(pCurrentPerformTipsInfo, 0); //InterTipsID

		len = pCurrentPerformTipsInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //CtrlNpcID
	Write16(p, 0); //PetPosition
	Write16(p, 0); //PetBornPosition
	Write8(p, 0); //IsBackTime
	Write8(p, 0); //ExpCarNum
	for (size_t i = 0; i < n; i++)
	{ //QsLabExpCarInfo
		BYTE* pQsLabExpCarInfo = p;
		Write16(pQsLabExpCarInfo, 0); //len

		Write32(pQsLabExpCarInfo, 0); //ExpCarId
		Write8(pQsLabExpCarInfo, 0); //ExpCarNum

		len = pQsLabExpCarInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 28388, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestQsLabStartMove(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT SeasonId = Read32(p);
	UCHAR StepNum = Read8(p);
	USHORT StepList[] = Read16(p);
	USHORT DstGridID = Read16(p);

}

void ResponseQsLabStartMove(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write8(p, 0); //StepNum
	Write16(p, 0); //StepList[]
	Write16(p, 0); //DstGridID

	len = p - buf;
	SendToClient(Client, 28389, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestQsLabUnlockMist(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UCHAR StepNum = Read8(p);
	USHORT StepList[] = Read16(p);
	UINT SeasonId = Read32(p);
	UCHAR UnLockType = Read8(p);
	UCHAR Para = Read8(p);
	UCHAR TraggerEffectID = Read8(p);

}

void ResponseQsLabUnlockMist(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write8(p, 0); //StepNum
	Write16(p, 0); //StepList[]
	Write32(p, 0); //SeasonId
	Write8(p, 0); //UnLockType
	Write8(p, 0); //Para

	len = p - buf;
	SendToClient(Client, 28407, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestQsLabUsePortal(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT SeasonId = Read32(p);
	USHORT GridID = Read16(p);

}

void ResponseQsLabUsePortal(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //GridID
	Write16(p, 0); //Position
	Write8(p, 0); //IsTransformed

	len = p - buf;
	SendToClient(Client, 28409, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestQsLabUseRail(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT SeasonId = Read32(p);
	USHORT GridID = Read16(p);

}

void ResponseQsLabUseRail(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //GridID
	Write8(p, 0); //RailGroupNum
	for (size_t i = 0; i < n; i++)
	{ //RailGroupDataList
		BYTE* pRailGroupDataList = p;
		Write16(pRailGroupDataList, 0); //len

		Write16(pRailGroupDataList, 0); //RailGroupID
		Write8(pRailGroupDataList, 0); //RailChangeNum
		for (size_t i = 0; i < n; i++)
		{ //QsLabStationRailChangeData
			BYTE* pQsLabStationRailChangeData = pRailGroupDataList;
			Write16(pQsLabStationRailChangeData, 0); //len

			Write16(pQsLabStationRailChangeData, 0); //GridID
			Write16(pQsLabStationRailChangeData, 0); //InteractiveID
			Write16(pQsLabStationRailChangeData, 0); //LandformID
			Write16(pQsLabStationRailChangeData, 0); //TerrianID
			Write32(pQsLabStationRailChangeData, 0); //StateMask
			{ //LevelData
				BYTE* pLevelData = pQsLabStationRailChangeData;
				Write16(pLevelData, 0); //len

				Write16(pLevelData, 0); //InteractiveID

				len = pLevelData - pQsLabStationRailChangeData;
				Set16(pQsLabStationRailChangeData, (WORD)len);
				pQsLabStationRailChangeData += len;
			}

			len = pQsLabStationRailChangeData - pRailGroupDataList;
			Set16(pRailGroupDataList, (WORD)len);
			pRailGroupDataList += len;
		}

		len = pRailGroupDataList - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //GenBlockNum
	for (size_t i = 0; i < n; i++)
	{ //GenBlockList
		BYTE* pGenBlockList = p;
		Write16(pGenBlockList, 0); //len

		Write16(pGenBlockList, 0); //GridID
		Write8(pGenBlockList, 0); //Status

		len = pGenBlockList - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //PokeCardNum
	Write16(p, 0); //GridId
	Write8(p, 0); //Status
	Write16(p, 0); //PokeCardID
	Write8(p, 0); //ReflectDirection

	len = p - buf;
	SendToClient(Client, 28410, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestQsLabStopMove(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT SeasonId = Read32(p);
	USHORT GridId = Read16(p);

}

void ResponseQsLabStopMove(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //GridId
	Write8(p, 0); //StepNum
	Write16(p, 0); //StepList[]

	len = p - buf;
	SendToClient(Client, 28390, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyQsLabMoveChange(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //Position
	Write8(p, 0); //StepGridArrayNum
	Write32(p, 0); //StepGridBitArray[]

	len = p - buf;
	SendToClient(Client, 28391, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestQsLabUseLadderSwitch(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT SeasonId = Read32(p);
	USHORT GridId = Read16(p);

}

void ResponseQsLabUseLadderSwitch(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //GridId
	Write32(p, 0); //LadderSwichBit
	Write8(p, 0); //StageBitArrayNum
	Write32(p, 0); //LadderStageBit[]

	len = p - buf;
	SendToClient(Client, 28392, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestQsLabLightTower(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT SeasonId = Read32(p);
	USHORT GridId = Read16(p);

}

void ResponseQsLabLightTower(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //GridId
	Write32(p, 0); //LightTimeStamp

	len = p - buf;
	SendToClient(Client, 28393, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestQsLabLightTowerPerformace(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT SeasonId = Read32(p);
	UCHAR TowerId = Read8(p);

}

void ResponseQsLabLightTowerPerformace(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write8(p, 0); //TowerId
	WriteUn(p, 0); //uhLightTowelPerformaceBit
	Write32(p, 0); //LightTowelLeftTime

	len = p - buf;
	SendToClient(Client, 28394, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestQsLabUseLaserCannon(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT SeasonId = Read32(p);
	USHORT GridId = Read16(p);
	UCHAR GenBlockNum = Read8(p);
	for (size_t i = 0; i < n; i++)
	{ //GenBlockList
		BYTE* pGenBlockList = p;
		len = Read16(pGenBlockList);

		USHORT GridID = Read16(pGenBlockList);
		UCHAR Status = Read8(pGenBlockList);

		p += len;
	}
	UCHAR PathNodeNum = Read8(p);
	for (size_t i = 0; i < n; i++)
	{ //LaserPath
		BYTE* pLaserPath = p;
		len = Read16(pLaserPath);

		UCHAR GridID = Read8(pLaserPath);
		UCHAR NodeType = Read8(pLaserPath);
		UCHAR IncidentDirection = Read8(pLaserPath);
		UCHAR ReflectDirection = Read8(pLaserPath);
		short Pos[] = Read16(pLaserPath);

		p += len;
	}

}

void ResponseQsLabUseLaserCannon(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //GridId
	Write8(p, 0); //AllGenBlockNum
	for (size_t i = 0; i < n; i++)
	{ //AllGenBlockList
		BYTE* pAllGenBlockList = p;
		Write16(pAllGenBlockList, 0); //len

		Write16(pAllGenBlockList, 0); //GridID
		Write8(pAllGenBlockList, 0); //Status

		len = pAllGenBlockList - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 28395, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestQsLabBoxAward(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT SeasonId = Read32(p);
	USHORT GridId = Read16(p);

}

void ResponseQsLabBoxAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //GridId
	{ //AwardToClient
		BYTE* pAwardToClient = p;
		Write16(pAwardToClient, 0); //len

		Write32(pAwardToClient, 0); //Exp
		Write32(pAwardToClient, 0); //Money
		Write32(pAwardToClient, 0); //SuperMoney
		Write16(pAwardToClient, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAwardToClient;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute
			Write16(pItemInfo, 0); //ItemType

			len = pItemInfo - pAwardToClient;
			Set16(pAwardToClient, (WORD)len);
			pAwardToClient += len;
		}
		Write32(pAwardToClient, 0); //Coupons
		Write32(pAwardToClient, 0); //GuildPoint
		Write32(pAwardToClient, 0); //LuckMoney
		Write8(pAwardToClient, 0); //ExtendInfoNum
		for (size_t i = 0; i < n; i++)
		{ //ExtendInfoAward
			BYTE* pExtendInfoAward = pAwardToClient;
			Write16(pExtendInfoAward, 0); //len

			Write16(pExtendInfoAward, 0); //Key
			Write32(pExtendInfoAward, 0); //AddValue
			Write32(pExtendInfoAward, 0); //TotalValue
			Write8(pExtendInfoAward, 0); //ShowPriority
			Write16(pExtendInfoAward, 0); //BuyNeedScore
			Write8(pExtendInfoAward, 0); //OneMatchMaxNum

			len = pExtendInfoAward - pAwardToClient;
			Set16(pAwardToClient, (WORD)len);
			pAwardToClient += len;
		}
		Write32(pAwardToClient, 0); //SpeedCoin

		len = pAwardToClient - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 28398, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestQsLabUseSprinkler(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT SeasonId = Read32(p);
	USHORT GridId = Read16(p);

}

void ResponseQsLabUseSprinkler(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //GridId
	Write8(p, 0); //ControlBossNum
	for (size_t i = 0; i < n; i++)
	{ //ControlBossList
		BYTE* pControlBossList = p;
		Write16(pControlBossList, 0); //len

		Write16(pControlBossList, 0); //BossID
		Write8(pControlBossList, 0); //BossMuddyStatus

		len = pControlBossList - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 28399, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestQsLabChangeCar(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT SeasonId = Read32(p);
	UINT CarId = Read32(p);

}

void ResponseQsLabChangeCar(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write32(p, 0); //CarId

	len = p - buf;
	SendToClient(Client, 28400, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestQsLabGetBuffBoxInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT SeasonId = Read32(p);
	USHORT GridId = Read16(p);

}

void ResponseQsLabGetBuffBoxInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //GridId
	Write8(p, 0); //Num
	Write16(p, 0); //BuffIDList[]

	len = p - buf;
	SendToClient(Client, 28401, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestQsLabChooseBuff(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT SeasonId = Read32(p);
	USHORT GridId = Read16(p);
	UCHAR BuffId = Read8(p);

}

void ResponseQsLabChooseBuff(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //GridId
	Write8(p, 0); //BuffId

	len = p - buf;
	SendToClient(Client, 28402, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestQsLabBackTime(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT SeasonId = Read32(p);

}

void ResponseQsLabBackTime(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 28403, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestQsLabUseDogHouse(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT SeasonId = Read32(p);
	UINT GridId = Read32(p);

}

void ResponseQsLabUseDogHouse(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write8(p, 0); //CurrCtrlNpcID
	Write32(p, 0); //CurrCtrlPosition
	Write8(p, 0); //IsTransformed
	Write8(p, 0); //DogHouseId

	len = p - buf;
	SendToClient(Client, 28418, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestQsLabCommonEvent(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT SeasonId = Read32(p);
	UCHAR Type = Read8(p);
	{ //InterTipsGroupInfo
		BYTE* pInterTipsGroupInfo = p;
		len = Read16(pInterTipsGroupInfo);

		UCHAR GroupID = Read8(pInterTipsGroupInfo);
		UINT InterTipsID = Read32(pInterTipsGroupInfo);

		p += len;
	}

}

void ResponseQsLabCommonEvent(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write32(p, 0); //SeasonId
	Write8(p, 0); //Type
	{ //InterTipsGroupInfo
		BYTE* pInterTipsGroupInfo = p;
		Write16(pInterTipsGroupInfo, 0); //len

		Write8(pInterTipsGroupInfo, 0); //GroupID
		Write32(pInterTipsGroupInfo, 0); //InterTipsID

		len = pInterTipsGroupInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 28408, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestQsLabCommittalTaskInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT SeasonId = Read32(p);
	UCHAR Type = Read8(p);

}

void ResponseQsLabCommittalTaskInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write8(p, 0); //TaskNum
	for (size_t i = 0; i < n; i++)
	{ //QsLabCommittalTaskInfo
		BYTE* pQsLabCommittalTaskInfo = p;
		Write16(pQsLabCommittalTaskInfo, 0); //len

		Write32(pQsLabCommittalTaskInfo, 0); //TaskID
		Write32(pQsLabCommittalTaskInfo, 0); //UnLockLeftTime
		Write8(pQsLabCommittalTaskInfo, 0); //Status

		len = pQsLabCommittalTaskInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //SeasonNum
	for (size_t i = 0; i < n; i++)
	{ //QsLabSeasonTaskCfg
		BYTE* pQsLabSeasonTaskCfg = p;
		Write16(pQsLabSeasonTaskCfg, 0); //len

		Write16(pQsLabSeasonTaskCfg, 0); //SeasonID
		Write8(pQsLabSeasonTaskCfg, 0); //TaskNum
		for (size_t i = 0; i < n; i++)
		{ //TaskAwardStatus
			BYTE* pTaskAwardStatus = pQsLabSeasonTaskCfg;
			Write16(pTaskAwardStatus, 0); //len

			Write32(pTaskAwardStatus, 0); //TaskId
			Write8(pTaskAwardStatus, 0); //ReceiveStatus
			Write8(pTaskAwardStatus, 0); //AwardStatus

			len = pTaskAwardStatus - pQsLabSeasonTaskCfg;
			Set16(pQsLabSeasonTaskCfg, (WORD)len);
			pQsLabSeasonTaskCfg += len;
		}

		len = pQsLabSeasonTaskCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //Type

	len = p - buf;
	SendToClient(Client, 28419, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestQslabChangePokeCard(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT SeasonId = Read32(p);
	USHORT GridId = Read16(p);
	UCHAR ChangePokeCardGroupNum = Read8(p);
	for (size_t i = 0; i < n; i++)
	{ //QsLabStationPokeCardGroupData
		BYTE* pQsLabStationPokeCardGroupData = p;
		len = Read16(pQsLabStationPokeCardGroupData);

		UCHAR ChangePokeCardNum = Read8(pQsLabStationPokeCardGroupData);
		for (size_t i = 0; i < n; i++)
		{ //QsLabStationPokeCardData
			BYTE* pQsLabStationPokeCardData = pQsLabStationPokeCardGroupData;
			len = Read16(pQsLabStationPokeCardData);

			USHORT GridId = Read16(pQsLabStationPokeCardData);
			UCHAR Status = Read8(pQsLabStationPokeCardData);
			USHORT PokeCardID = Read16(pQsLabStationPokeCardData);
			UCHAR ReflectDirection = Read8(pQsLabStationPokeCardData);

			pQsLabStationPokeCardGroupData += len;
		}

		p += len;
	}

}

void ResponseQslabChangePokeCard(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //GridId
	Write16(p, 0); //OwnPokeCard
	Write16(p, 0); //RailGroupNum
	for (size_t i = 0; i < n; i++)
	{ //RailGroupDataList
		BYTE* pRailGroupDataList = p;
		Write16(pRailGroupDataList, 0); //len

		Write16(pRailGroupDataList, 0); //RailGroupID
		Write8(pRailGroupDataList, 0); //RailChangeNum
		for (size_t i = 0; i < n; i++)
		{ //QsLabStationRailChangeData
			BYTE* pQsLabStationRailChangeData = pRailGroupDataList;
			Write16(pQsLabStationRailChangeData, 0); //len

			Write16(pQsLabStationRailChangeData, 0); //GridID
			Write16(pQsLabStationRailChangeData, 0); //InteractiveID
			Write16(pQsLabStationRailChangeData, 0); //LandformID
			Write16(pQsLabStationRailChangeData, 0); //TerrianID
			Write32(pQsLabStationRailChangeData, 0); //StateMask
			{ //LevelData
				BYTE* pLevelData = pQsLabStationRailChangeData;
				Write16(pLevelData, 0); //len

				Write16(pLevelData, 0); //InteractiveID

				len = pLevelData - pQsLabStationRailChangeData;
				Set16(pQsLabStationRailChangeData, (WORD)len);
				pQsLabStationRailChangeData += len;
			}

			len = pQsLabStationRailChangeData - pRailGroupDataList;
			Set16(pRailGroupDataList, (WORD)len);
			pRailGroupDataList += len;
		}

		len = pRailGroupDataList - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ChangePokeCardGroupNum
	for (size_t i = 0; i < n; i++)
	{ //QsLabStationPokeCardGroupData
		BYTE* pQsLabStationPokeCardGroupData = p;
		Write16(pQsLabStationPokeCardGroupData, 0); //len

		Write8(pQsLabStationPokeCardGroupData, 0); //ChangePokeCardNum
		for (size_t i = 0; i < n; i++)
		{ //QsLabStationPokeCardData
			BYTE* pQsLabStationPokeCardData = pQsLabStationPokeCardGroupData;
			Write16(pQsLabStationPokeCardData, 0); //len

			Write16(pQsLabStationPokeCardData, 0); //GridId
			Write8(pQsLabStationPokeCardData, 0); //Status
			Write16(pQsLabStationPokeCardData, 0); //PokeCardID
			Write8(pQsLabStationPokeCardData, 0); //ReflectDirection

			len = pQsLabStationPokeCardData - pQsLabStationPokeCardGroupData;
			Set16(pQsLabStationPokeCardGroupData, (WORD)len);
			pQsLabStationPokeCardGroupData += len;
		}

		len = pQsLabStationPokeCardGroupData - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 28426, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestQslabReportClue(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT SeasonId = Read32(p);
	UCHAR ClueId = Read8(p);

}

void ResponseQslabReportClue(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write8(p, 0); //ClueId
	Write8(p, 0); //ClueNum
	for (size_t i = 0; i < n; i++)
	{ //ClueList
		BYTE* pClueList = p;
		Write16(pClueList, 0); //len

		Write16(pClueList, 0); //ClueID
		Write32(pClueList, 0); //TimeStamp
		Write8(pClueList, 0); //OpenStatus

		len = pClueList - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 28427, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestQslabOpenClue(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT SeasonId = Read32(p);
	UCHAR ClueId = Read8(p);

}

void ResponseQslabOpenClue(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write8(p, 0); //ClueId
	Write8(p, 0); //ClueNum
	for (size_t i = 0; i < n; i++)
	{ //ClueList
		BYTE* pClueList = p;
		Write16(pClueList, 0); //len

		Write16(pClueList, 0); //ClueID
		Write32(pClueList, 0); //TimeStamp
		Write8(pClueList, 0); //OpenStatus

		len = pClueList - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 28428, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestLightPointCfg(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT PointID = Read16(p);
	USHORT GameType = Read16(p);

}

void ResponseLightPointCfg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	{ //LightPointCfg
		BYTE* pLightPointCfg = p;
		Write16(pLightPointCfg, 0); //len

		Write16(pLightPointCfg, 0); //PointID
		Write8(pLightPointCfg, 0); //PointType
		Write16(pLightPointCfg, 0); //GameType
		Write8(pLightPointCfg, 0); //FileMd5Len
		Write16(pLightPointCfg, 0); //Len
		Write8(pLightPointCfg, 0); //FinSpecType
		Write32(pLightPointCfg, 0); //TimeLimit
		Write8(pLightPointCfg, 0); //RankLimit
		Write32(pLightPointCfg, 0); //SkillLimit
		Write8(pLightPointCfg, 0); //BossNameLen
		Write16(pLightPointCfg, 0); //MapId
		Write8(pLightPointCfg, 0); //FinishLimitStrLen
		Write8(pLightPointCfg, 0); //ShadowRunDelay
		Write16(pLightPointCfg, 0); //BossId
		Write8(pLightPointCfg, 0); //SkillType
		Write16(pLightPointCfg, 0); //ForbiddenCarNum
		Write32(pLightPointCfg, 0); //ForbiddenCarIDList[]
		Write32(pLightPointCfg, 0); //CarID
		Write8(pLightPointCfg, 0); //OpDesLen
		Write8(pLightPointCfg, 0); //MapIndex
		Write8(pLightPointCfg, 0); //ShowBossLevel
		Write8(pLightPointCfg, 0); //FailedDesLen
		Write8(pLightPointCfg, 0); //HasNPCItem
		for (size_t i = 0; i < n; i++)
		{ //NPCItemInfo
			BYTE* pNPCItemInfo = pLightPointCfg;
			Write16(pNPCItemInfo, 0); //len

			Write32(pNPCItemInfo, 0); //RoleID
			Write32(pNPCItemInfo, 0); //HairID
			Write32(pNPCItemInfo, 0); //FaceID
			Write32(pNPCItemInfo, 0); //GlassID
			Write32(pNPCItemInfo, 0); //CoatID
			Write32(pNPCItemInfo, 0); //GloveID
			Write32(pNPCItemInfo, 0); //TrousersID
			Write32(pNPCItemInfo, 0); //PersonarID
			Write32(pNPCItemInfo, 0); //TattooID
			Write32(pNPCItemInfo, 0); //WingID
			Write32(pNPCItemInfo, 0); //DecoratorID
			Write32(pNPCItemInfo, 0); //KartID
			Write32(pNPCItemInfo, 0); //ColorID
			Write32(pNPCItemInfo, 0); //TrackID
			Write32(pNPCItemInfo, 0); //EffectID
			Write32(pNPCItemInfo, 0); //BrandID
			Write32(pNPCItemInfo, 0); //TailID

			len = pNPCItemInfo - pLightPointCfg;
			Set16(pLightPointCfg, (WORD)len);
			pLightPointCfg += len;
		}

		len = pLightPointCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 28396, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestStartLightPointChallenge(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT PointID = Read16(p);
	USHORT GameType = Read16(p);
	USHORT BossId = Read16(p);
	USHORT SkillType = Read16(p);
	USHORT GridId = Read16(p);

}

void ResponseStartLightPointChallenge(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //PointID
	Write16(p, 0); //GameType

	len = p - buf;
	SendToClient(Client, 28397, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetTaskAwardInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Type = Read32(p);
	UINT TaskNum = Read32(p);
	UINT TaskList[] = Read32(p);
	UCHAR TaskStrNum = Read8(p);

}

void ResponseGetTaskAwardInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write32(p, 0); //Type
	Write8(p, 0); //TaskStrNum
	Write32(p, 0); //TaskInfoNum
	for (size_t i = 0; i < n; i++)
	{ //TaskAwardInfo
		BYTE* pTaskAwardInfo = p;
		Write16(pTaskAwardInfo, 0); //len

		Write32(pTaskAwardInfo, 0); //TaskID
		Write32(pTaskAwardInfo, 0); //FirstAwardNum
		for (size_t i = 0; i < n; i++)
		{ //TaskFirstAward
			BYTE* pTaskFirstAward = pTaskAwardInfo;
			Write16(pTaskFirstAward, 0); //len

			Write32(pTaskFirstAward, 0); //AwardMoney
			Write32(pTaskFirstAward, 0); //TotalMoney
			Write32(pTaskFirstAward, 0); //AwardSuperMoney
			Write32(pTaskFirstAward, 0); //TotalSuperMoney
			Write32(pTaskFirstAward, 0); //AwardExp
			Write32(pTaskFirstAward, 0); //TotalExp
			Write32(pTaskFirstAward, 0); //AwardItemNum
			for (size_t i = 0; i < n; i++)
			{ //AwardItemInfo
				BYTE* pAwardItemInfo = pTaskFirstAward;
				Write16(pAwardItemInfo, 0); //len

				Write32(pAwardItemInfo, 0); //ItemID
				Write32(pAwardItemInfo, 0); //ItemNum
				Write32(pAwardItemInfo, 0); //AvailPeriod
				Write8(pAwardItemInfo, 0); //Status
				WriteUn(pAwardItemInfo, 0); //ObtainTime
				Write32(pAwardItemInfo, 0); //OtherAttribute
				Write16(pAwardItemInfo, 0); //ItemType

				len = pAwardItemInfo - pTaskFirstAward;
				Set16(pTaskFirstAward, (WORD)len);
				pTaskFirstAward += len;
			}
			Write32(pTaskFirstAward, 0); //AwardCoupons
			Write32(pTaskFirstAward, 0); //TotalCoupons
			Write32(pTaskFirstAward, 0); //AwardLuckMoney
			Write32(pTaskFirstAward, 0); //TotalLuckMoney
			Write32(pTaskFirstAward, 0); //AwardTeamWorkExp
			Write32(pTaskFirstAward, 0); //TotalTeamWorkExp
			Write32(pTaskFirstAward, 0); //AwardWlCash
			Write32(pTaskFirstAward, 0); //AwardWlCrystal
			Write32(pTaskFirstAward, 0); //AwardWlDegree
			Write32(pTaskFirstAward, 0); //ChumCircleActivity
			Write32(pTaskFirstAward, 0); //GuildScore
			Write16(pTaskFirstAward, 0); //AppellcationID
			Write16(pTaskFirstAward, 0); //ScoreJingJi
			Write8(pTaskFirstAward, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pTaskFirstAward;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pTaskFirstAward;
				Set16(pTaskFirstAward, (WORD)len);
				pTaskFirstAward += len;
			}
			Write32(pTaskFirstAward, 0); //LiveExp
			Write32(pTaskFirstAward, 0); //AwardSpeedCoin
			Write32(pTaskFirstAward, 0); //TotalSpeedCoin

			len = pTaskFirstAward - pTaskAwardInfo;
			Set16(pTaskAwardInfo, (WORD)len);
			pTaskAwardInfo += len;
		}
		Write32(pTaskAwardInfo, 0); //OtherAwardNum
		for (size_t i = 0; i < n; i++)
		{ //TaskOtherAward
			BYTE* pTaskOtherAward = pTaskAwardInfo;
			Write16(pTaskOtherAward, 0); //len

			Write32(pTaskOtherAward, 0); //AwardMoney
			Write32(pTaskOtherAward, 0); //TotalMoney
			Write32(pTaskOtherAward, 0); //AwardSuperMoney
			Write32(pTaskOtherAward, 0); //TotalSuperMoney
			Write32(pTaskOtherAward, 0); //AwardExp
			Write32(pTaskOtherAward, 0); //TotalExp
			Write32(pTaskOtherAward, 0); //AwardItemNum
			for (size_t i = 0; i < n; i++)
			{ //AwardItemInfo
				BYTE* pAwardItemInfo = pTaskOtherAward;
				Write16(pAwardItemInfo, 0); //len

				Write32(pAwardItemInfo, 0); //ItemID
				Write32(pAwardItemInfo, 0); //ItemNum
				Write32(pAwardItemInfo, 0); //AvailPeriod
				Write8(pAwardItemInfo, 0); //Status
				WriteUn(pAwardItemInfo, 0); //ObtainTime
				Write32(pAwardItemInfo, 0); //OtherAttribute
				Write16(pAwardItemInfo, 0); //ItemType

				len = pAwardItemInfo - pTaskOtherAward;
				Set16(pTaskOtherAward, (WORD)len);
				pTaskOtherAward += len;
			}
			Write32(pTaskOtherAward, 0); //AwardCoupons
			Write32(pTaskOtherAward, 0); //TotalCoupons
			Write32(pTaskOtherAward, 0); //AwardLuckMoney
			Write32(pTaskOtherAward, 0); //TotalLuckMoney
			Write32(pTaskOtherAward, 0); //AwardTeamWorkExp
			Write32(pTaskOtherAward, 0); //TotalTeamWorkExp
			Write32(pTaskOtherAward, 0); //AwardWlCash
			Write32(pTaskOtherAward, 0); //AwardWlCrystal
			Write32(pTaskOtherAward, 0); //AwardWlDegree
			Write32(pTaskOtherAward, 0); //ChumCircleActivity
			Write32(pTaskOtherAward, 0); //GuildScore
			Write16(pTaskOtherAward, 0); //AppellcationID
			Write16(pTaskOtherAward, 0); //ScoreJingJi
			Write8(pTaskOtherAward, 0); //ExtendInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ExtendInfoAward
				BYTE* pExtendInfoAward = pTaskOtherAward;
				Write16(pExtendInfoAward, 0); //len

				Write16(pExtendInfoAward, 0); //Key
				Write32(pExtendInfoAward, 0); //AddValue
				Write32(pExtendInfoAward, 0); //TotalValue
				Write8(pExtendInfoAward, 0); //ShowPriority
				Write16(pExtendInfoAward, 0); //BuyNeedScore
				Write8(pExtendInfoAward, 0); //OneMatchMaxNum

				len = pExtendInfoAward - pTaskOtherAward;
				Set16(pTaskOtherAward, (WORD)len);
				pTaskOtherAward += len;
			}
			Write32(pTaskOtherAward, 0); //LiveExp
			Write32(pTaskOtherAward, 0); //AwardSpeedCoin
			Write32(pTaskOtherAward, 0); //TotalSpeedCoin

			len = pTaskOtherAward - pTaskAwardInfo;
			Set16(pTaskAwardInfo, (WORD)len);
			pTaskAwardInfo += len;
		}
		Write32(pTaskAwardInfo, 0); //DBTaskInfoNum
		for (size_t i = 0; i < n; i++)
		{ //DBTaskInfo
			BYTE* pDBTaskInfo = pTaskAwardInfo;
			Write16(pDBTaskInfo, 0); //len

			Write32(pDBTaskInfo, 0); //TaskID
			Write16(pDBTaskInfo, 0); //OptionID
			Write8(pDBTaskInfo, 0); //Status
			Write8(pDBTaskInfo, 0); //PrevStatus
			Write32(pDBTaskInfo, 0); //ProgressRate
			Write32(pDBTaskInfo, 0); //Other
			Write32(pDBTaskInfo, 0); //TakeTime
			Write32(pDBTaskInfo, 0); //LastUpdateTime

			len = pDBTaskInfo - pTaskAwardInfo;
			Set16(pTaskAwardInfo, (WORD)len);
			pTaskAwardInfo += len;
		}
		Write16(pTaskAwardInfo, 0); //FinTaskNeedNum
		Write8(pTaskAwardInfo, 0); //TaskParaToClientNum
		Write32(pTaskAwardInfo, 0); //TaskParaToClient[]

		len = pTaskAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 28380, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetQuickRaceTimeRandMap(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);

}

void ResponseGetQuickRaceTimeRandMap(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //Uin
	WriteUn(p, 0); //Time
	Write8(p, 0); //QuickRaceRandMapNum
	Write32(p, 0); //QuickRaceRandMap[]
	Write8(p, 0); //QuickRaceRandMapRefreshTime
	Write16(p, 0); //SeasonMapNums
	for (size_t i = 0; i < n; i++)
	{ //MapInfos
		BYTE* pMapInfos = p;
		Write16(pMapInfos, 0); //len

		Write16(pMapInfos, 0); //GradeMapNums
		for (size_t i = 0; i < n; i++)
		{ //MapInfo
			BYTE* pMapInfo = pMapInfos;
			Write16(pMapInfo, 0); //len

			Write16(pMapInfo, 0); //GradeLevel
			Write16(pMapInfo, 0); //MapNums
			Write32(pMapInfo, 0); //MapArray[]
			Write16(pMapInfo, 0); //SuperRaceMapNums
			Write32(pMapInfo, 0); //SuperRaceMapArray[]
			Write16(pMapInfo, 0); //CarFactoryMapNums
			Write32(pMapInfo, 0); //CarFactoryMapArray[]
			Write16(pMapInfo, 0); //NewMapNums
			Write32(pMapInfo, 0); //NewMapArray[]

			len = pMapInfo - pMapInfos;
			Set16(pMapInfos, (WORD)len);
			pMapInfos += len;
		}

		len = pMapInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 28379, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestDoBagItemShowOperate(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT OptType = Read16(p);
	USHORT ShowType = Read16(p);
	USHORT TabType = Read16(p);
	int ItemID = Read32(p);
	int ItemNum = Read32(p);
	int[] ItemID[] = Read32(p);

}

void ResponseDoBagItemShowOperate(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write16(p, 0); //OptType
	Write16(p, 0); //ShowType
	Write16(p, 0); //TabType
	Write32(p, 0); //HasBagItemShowInfo
	for (size_t i = 0; i < n; i++)
	{ //BagItemShowInfo
		BYTE* pBagItemShowInfo = p;
		Write16(pBagItemShowInfo, 0); //len

		Write32(pBagItemShowInfo, 0); //TabNum
		for (size_t i = 0; i < n; i++)
		{ //BagTabItemTopInfo
			BYTE* pBagTabItemTopInfo = pBagItemShowInfo;
			Write16(pBagTabItemTopInfo, 0); //len

			Write32(pBagTabItemTopInfo, 0); //ItemNum
			Write32(pBagTabItemTopInfo, 0); //ItemID[]

			len = pBagTabItemTopInfo - pBagItemShowInfo;
			Set16(pBagItemShowInfo, (WORD)len);
			pBagItemShowInfo += len;
		}
		Write32(pBagItemShowInfo, 0); //StarItemNum 星标数量
		Write32(pBagItemShowInfo, 0); //StarItemID[]
		Write32(pBagItemShowInfo, 0); //TabTopItemNumMax
		Write32(pBagItemShowInfo, 0); //StarItemNumMax

		len = pBagItemShowInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //Para0
	Write32(p, 0); //ItemNum
	Write32(p, 0); //ItemID[]

	len = p - buf;
	SendToClient(Client, 28412, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyItemObtainedOrderInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write8(p, 0); //NotifyType
	Write16(p, 0); //ItemNum
	for (size_t i = 0; i < n; i++)
	{ //ItemOrder
		BYTE* pItemOrder = p;
		Write16(pItemOrder, 0); //len

		Write32(pItemOrder, 0); //KartID
		Write32(pItemOrder, 0); //Order
		Write32(pItemOrder, 0); //BackGroundID

		len = pItemOrder - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 1217, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestDressInfoOperate(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT OptType = Read16(p);
	USHORT SuitIdx = Read16(p);
	short NameLen = Read16(p);
	short ItemNum = Read16(p);
	int[] ItemID[] = Read32(p);
	UCHAR FileMd5Len = Read8(p);
	UINT FileSize = Read32(p);

}

void ResponseDressInfoOperate(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen
	Write16(p, 0); //OptType
	Write8(p, 0); //DressSuitNum
	for (size_t i = 0; i < n; i++)
	{ //DressSuitInfo
		BYTE* pDressSuitInfo = p;
		Write16(pDressSuitInfo, 0); //len

		Write16(pDressSuitInfo, 0); //SuitIdx
		Write16(pDressSuitInfo, 0); //ItemNum
		Write32(pDressSuitInfo, 0); //ItemID[]
		Write8(pDressSuitInfo, 0); //DressModel
		Write8(pDressSuitInfo, 0); //GenderType
		Write16(pDressSuitInfo, 0); //NameLen
		Write8(pDressSuitInfo, 0); //FileMd5Len
		Write16(pDressSuitInfo, 0); //UuidLen
		Write32(pDressSuitInfo, 0); //LastUpdateTime

		len = pDressSuitInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //InvalidNum
	Write32(p, 0); //InvalidItemID[]
	Write8(p, 0); //HasCfg
	for (size_t i = 0; i < n; i++)
	{ //Cfg
		BYTE* pCfg = p;
		Write16(pCfg, 0); //len

		Write32(pCfg, 0); //DressSuitNumMax
		Write32(pCfg, 0); //UploadSuitPicMaxSize

		len = pCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 28413, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyClientCosOpAuth(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write8(p, 0); //Cmd
	Write8(p, 0); //HostLen
	Write16(p, 0); //UuidLen
	Write16(p, 0); //AuthInfoLen
	WriteUn(p, 0); //u64SeqID

	len = p - buf;
	SendToClient(Client, 28414, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestReportCosOpResult(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT ResultID = Read16(p);
	UCHAR Cmd = Read8(p);
	USHORT UuidLen = Read16(p);
	USHORT AuthInfoLen = Read16(p);
	Un u64SeqID = ReadUn(p);

}

void RequestCommonReportToMatchRoom(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT ReportType = Read16(p);
	UCHAR ParaNum = Read8(p);
	UINT ParaList[] = Read32(p);

}

void NotifyGameLogicPoint(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //PointType
	Write32(p, 0); //PointNum
	for (size_t i = 0; i < n; i++)
	{ //Point
		BYTE* pPoint = p;
		Write16(pPoint, 0); //len

		Write16(pPoint, 0); //Idx
		Write32(pPoint, 0); //PointArray[]
		Write32(pPoint, 0); //Para0

		len = pPoint - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 28420, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestReplayOperate(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UCHAR Cmd = Read8(p);
	int Para0 = Read32(p);
	{ //ReqReplayInfo
		BYTE* pReqReplayInfo = p;
		len = Read16(pReqReplayInfo);

		USHORT UuidLen = Read16(pReqReplayInfo);
		USHORT GIdxLen = Read16(pReqReplayInfo);
		UCHAR FileMd5Len = Read8(pReqReplayInfo);
		char[] NickName[] = ReadString(pReqReplayInfo);
		int BaseMode = Read32(pReqReplayInfo);
		int SubMode = Read32(pReqReplayInfo);
		int Channel = Read32(pReqReplayInfo);
		int MapID = Read32(pReqReplayInfo);
		UINT FinTime = Read32(pReqReplayInfo);
		UINT CTime = Read32(pReqReplayInfo);
		UCHAR Other = Read8(pReqReplayInfo);
		UCHAR KeyBufferLen = Read8(pReqReplayInfo);
		UCHAR KeyHashLen = Read8(pReqReplayInfo);
		USHORT ReplayVersion = Read16(pReqReplayInfo);

		p += len;
	}
	int Para1 = Read32(p);

}

void ResponseReplayOperate(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write8(p, 0); //Cmd
	Write32(p, 0); //Para0
	Write32(p, 0); //ReplayNum
	for (size_t i = 0; i < n; i++)
	{ //ReplayInfo
		BYTE* pReplayInfo = p;
		Write16(pReplayInfo, 0); //len

		Write16(pReplayInfo, 0); //UuidLen
		Write16(pReplayInfo, 0); //GIdxLen
		Write8(pReplayInfo, 0); //FileMd5Len
		WriteString(pReplayInfo, 0); //NickName[]
		Write32(pReplayInfo, 0); //BaseMode
		Write32(pReplayInfo, 0); //SubMode
		Write32(pReplayInfo, 0); //Channel
		Write32(pReplayInfo, 0); //MapID
		Write32(pReplayInfo, 0); //FinTime
		Write32(pReplayInfo, 0); //CTime
		Write8(pReplayInfo, 0); //Other
		Write8(pReplayInfo, 0); //KeyBufferLen
		Write8(pReplayInfo, 0); //KeyHashLen
		Write16(pReplayInfo, 0); //ReplayVersion

		len = pReplayInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //UrlTmplLen

	len = p - buf;
	SendToClient(Client, 28421, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyAddPlayer(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Replaceuin
	{ //PlayerRoomVisibleInfo
		BYTE* pPlayerRoomVisibleInfo = p;
		Write16(pPlayerRoomVisibleInfo, 0); //len

		WriteUn(pPlayerRoomVisibleInfo, 0); //Uin
		WriteUn(pPlayerRoomVisibleInfo, 0); //Identity
		Write8(pPlayerRoomVisibleInfo, 0); //SeatID
		Write8(pPlayerRoomVisibleInfo, 0); //TeamID
		Write16(pPlayerRoomVisibleInfo, 0); //PlayerID
		Write8(pPlayerRoomVisibleInfo, 0); //Status
		{ //PlayerDBBaseInfo
			BYTE* pPlayerDBBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerDBBaseInfo, 0); //len

			WriteString(pPlayerDBBaseInfo, 0); //NickName[]
			Write8(pPlayerDBBaseInfo, 0); //Gender
			Write8(pPlayerDBBaseInfo, 0); //Country
			Write32(pPlayerDBBaseInfo, 0); //License
			WriteUn(pPlayerDBBaseInfo, 0); //Experience
			Write32(pPlayerDBBaseInfo, 0); //SuperMoney
			Write32(pPlayerDBBaseInfo, 0); //Money
			WriteUn(pPlayerDBBaseInfo, 0); //WinNum
			Write32(pPlayerDBBaseInfo, 0); //SecondNum
			Write32(pPlayerDBBaseInfo, 0); //ThirdNum
			WriteUn(pPlayerDBBaseInfo, 0); //TotalNum
			Write32(pPlayerDBBaseInfo, 0); //CurHonor
			Write32(pPlayerDBBaseInfo, 0); //TotalHonor
			Write32(pPlayerDBBaseInfo, 0); //TodayHonor
			Write32(pPlayerDBBaseInfo, 0); //RelaxTime
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationBefore
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationCur
			Write32(pPlayerDBBaseInfo, 0); //Charm
			Write32(pPlayerDBBaseInfo, 0); //DurationGame
			Write32(pPlayerDBBaseInfo, 0); //DanceExp
			Write32(pPlayerDBBaseInfo, 0); //Coupons
			Write32(pPlayerDBBaseInfo, 0); //Admiration
			Write32(pPlayerDBBaseInfo, 0); //LuckMoney
			Write32(pPlayerDBBaseInfo, 0); //TeamWorkExp
			Write32(pPlayerDBBaseInfo, 0); //AchievePoint
			Write32(pPlayerDBBaseInfo, 0); //RegTime
			WriteString(pPlayerDBBaseInfo, 0); //Signature[]
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchPoint
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchNum
			Write16(pPlayerDBBaseInfo, 0); //LuckyMatchFirstNum
			Write8(pPlayerDBBaseInfo, 0); //LuckyMatchBestRand
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchWinNum
			Write32(pPlayerDBBaseInfo, 0); //FizzPointTotal
			Write16(pPlayerDBBaseInfo, 0); //FizzPointDaily
			Write16(pPlayerDBBaseInfo, 0); //FizzPointWeekly
			Write16(pPlayerDBBaseInfo, 0); //FizzPointLastWeek
			Write8(pPlayerDBBaseInfo, 0); //FizzLotteryStatus
			Write32(pPlayerDBBaseInfo, 0); //FizzLastUpdateTime
			Write32(pPlayerDBBaseInfo, 0); //SNSLocaleCode
			Write32(pPlayerDBBaseInfo, 0); //AuctionRightUnlockTime
			Write8(pPlayerDBBaseInfo, 0); //ReserveFlag
			Write32(pPlayerDBBaseInfo, 0); //CurConsumeScore
			Write32(pPlayerDBBaseInfo, 0); //HistoryConsumeScore
			Write8(pPlayerDBBaseInfo, 0); //CrashModeSponsorID
			Write32(pPlayerDBBaseInfo, 0); //Popularity
			Write32(pPlayerDBBaseInfo, 0); //LadderMatchAchievePoint
			Write32(pPlayerDBBaseInfo, 0); //Cash
			Write32(pPlayerDBBaseInfo, 0); //PlayerGPMIdentity
			Write32(pPlayerDBBaseInfo, 0); //PointTotalScore
			WriteUn(pPlayerDBBaseInfo, 0); //totalMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //lastMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalSeasonId
			WriteUn(pPlayerDBBaseInfo, 0); //lastClearMapMedalTime
			WriteUn(pPlayerDBBaseInfo, 0); //max2048Score
			WriteUn(pPlayerDBBaseInfo, 0); //curPlay2048LeftNum
			Write32(pPlayerDBBaseInfo, 0); //CheerValue
			Write16(pPlayerDBBaseInfo, 0); //SeasonID
			Write32(pPlayerDBBaseInfo, 0); //LastCheerValue
			Write32(pPlayerDBBaseInfo, 0); //SpeedBean
			Write32(pPlayerDBBaseInfo, 0); //SpeedCoin

			len = pPlayerDBBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //PlayerGuildInfo
			BYTE* pPlayerGuildInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerGuildInfo, 0); //len

			WriteString(pPlayerGuildInfo, 0); //GuildName[]
			Write16(pPlayerGuildInfo, 0); //Duty
			Write32(pPlayerGuildInfo, 0); //GuildID
			Write32(pPlayerGuildInfo, 0); //Right
			Write32(pPlayerGuildInfo, 0); //Medal
			Write32(pPlayerGuildInfo, 0); //Contribute
			WriteString(pPlayerGuildInfo, 0); //DutyTitle[]

			len = pPlayerGuildInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write16(pPlayerRoomVisibleInfo, 0); //EquipedItemNum
		for (size_t i = 0; i < n; i++)
		{ //PlayerItemInfo
			BYTE* pPlayerItemInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerItemInfo, 0); //len

			Write32(pPlayerItemInfo, 0); //ItemID
			Write32(pPlayerItemInfo, 0); //ItemNum
			Write32(pPlayerItemInfo, 0); //AvailPeriod
			Write8(pPlayerItemInfo, 0); //Status
			WriteUn(pPlayerItemInfo, 0); //ObtainTime
			Write32(pPlayerItemInfo, 0); //OtherAttribute
			Write16(pPlayerItemInfo, 0); //ItemType

			len = pPlayerItemInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write16(pPlayerRoomVisibleInfo, 0); //PetNum
		for (size_t i = 0; i < n; i++)
		{ //PetInfo
			BYTE* pPetInfo = pPlayerRoomVisibleInfo;
			Write16(pPetInfo, 0); //len

			Write32(pPetInfo, 0); //Uin
			Write32(pPetInfo, 0); //PetId
			WriteString(pPetInfo, 0); //PetName[]
			Write8(pPetInfo, 0); //IsProper
			Write16(pPetInfo, 0); //Level
			Write8(pPetInfo, 0); //Status
			Write16(pPetInfo, 0); //PetSkillNum
			for (size_t i = 0; i < n; i++)
			{ //PetSkillList
				BYTE* pPetSkillList = pPetInfo;
				Write16(pPetSkillList, 0); //len

				Write16(pPetSkillList, 0); //SkillID
				Write8(pPetSkillList, 0); //Status
				Write8(pPetSkillList, 0); //Active
				Write32(pPetSkillList, 0); //Value

				len = pPetSkillList - pPetInfo;
				Set16(pPetInfo, (WORD)len);
				pPetInfo += len;
			}
			Write32(pPetInfo, 0); //StrengLevel
			Write8(pPetInfo, 0); //TopStatus
			{ //CommonInfo
				BYTE* pCommonInfo = pPetInfo;
				Write16(pCommonInfo, 0); //len

				Write32(pCommonInfo, 0); //HuanHuaLevel
				Write8(pCommonInfo, 0); //CanHuanHua

				len = pCommonInfo - pPetInfo;
				Set16(pPetInfo, (WORD)len);
				pPetInfo += len;
			}
			Write16(pPetInfo, 0); //PKStar
			Write32(pPetInfo, 0); //PetSkinID

			len = pPetInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //PlayerGuildMatchInfo
			BYTE* pPlayerGuildMatchInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerGuildMatchInfo, 0); //len

			Write32(pPlayerGuildMatchInfo, 0); //SelfPoint
			Write32(pPlayerGuildMatchInfo, 0); //WinNum
			Write32(pPlayerGuildMatchInfo, 0); //TotalNum

			len = pPlayerGuildMatchInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //IsInTopList
		Write8(pPlayerRoomVisibleInfo, 0); //LoverRaceOrPro
		Write8(pPlayerRoomVisibleInfo, 0); //TmpEffectNum
		Write32(pPlayerRoomVisibleInfo, 0); //TmpEffectItems[]
		Write8(pPlayerRoomVisibleInfo, 0); //OBState
		Write8(pPlayerRoomVisibleInfo, 0); //DebutOrX5
		Write8(pPlayerRoomVisibleInfo, 0); //RandKeyFlag
		WriteUn(pPlayerRoomVisibleInfo, 0); //VipFlag
		Write8(pPlayerRoomVisibleInfo, 0); //HaveAppellation
		for (size_t i = 0; i < n; i++)
		{ //CurAppellation
			BYTE* pCurAppellation = pPlayerRoomVisibleInfo;
			Write16(pCurAppellation, 0); //len

			Write8(pCurAppellation, 0); //Type
			Write8(pCurAppellation, 0); //Level
			Write8(pCurAppellation, 0); //Status
			Write8(pCurAppellation, 0); //Difficulty
			Write32(pCurAppellation, 0); //MapId
			Write32(pCurAppellation, 0); //Value

			len = pCurAppellation - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //NobleInfo
			BYTE* pNobleInfo = pPlayerRoomVisibleInfo;
			Write16(pNobleInfo, 0); //len

			Write32(pNobleInfo, 0); //NobleID
			Write8(pNobleInfo, 0); //NobleLevel
			Write32(pNobleInfo, 0); //NoblePoint
			Write32(pNobleInfo, 0); //NobleLeftDays

			len = pNobleInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasCarryWizard
		for (size_t i = 0; i < n; i++)
		{ //CarryWizardInfo
			BYTE* pCarryWizardInfo = pPlayerRoomVisibleInfo;
			Write16(pCarryWizardInfo, 0); //len

			Write16(pCarryWizardInfo, 0); //WizardID
			WriteString(pCarryWizardInfo, 0); //NickName[]
			Write16(pCarryWizardInfo, 0); //WizardType
			Write8(pCarryWizardInfo, 0); //Order
			Write8(pCarryWizardInfo, 0); //EvolutionBranch
			Write8(pCarryWizardInfo, 0); //IsHuanHua

			len = pCarryWizardInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //GuildVipBaseInfo
			BYTE* pGuildVipBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pGuildVipBaseInfo, 0); //len

			Write8(pGuildVipBaseInfo, 0); //GuildVipLevel
			Write32(pGuildVipBaseInfo, 0); //GuildVipPoint

			len = pGuildVipBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write32(pPlayerRoomVisibleInfo, 0); //ExFlag
		Write8(pPlayerRoomVisibleInfo, 0); //HaveLDMBaseInfo
		for (size_t i = 0; i < n; i++)
		{ //PlayerLDMBaseInfo
			BYTE* pPlayerLDMBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerLDMBaseInfo, 0); //len

			Write8(pPlayerLDMBaseInfo, 0); //Grade
			Write32(pPlayerLDMBaseInfo, 0); //Score
			Write32(pPlayerLDMBaseInfo, 0); //MaxScore
			Write32(pPlayerLDMBaseInfo, 0); //MaxGrade

			len = pPlayerLDMBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasWl
		for (size_t i = 0; i < n; i++)
		{ //PlayerWlVisibleInfo
			BYTE* pPlayerWlVisibleInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerWlVisibleInfo, 0); //len

			Write32(pPlayerWlVisibleInfo, 0); //WonderLandID
			WriteString(pPlayerWlVisibleInfo, 0); //WonderLandName[]
			Write16(pPlayerWlVisibleInfo, 0); //WonderLandDuty
			Write8(pPlayerWlVisibleInfo, 0); //SubType
			Write8(pPlayerWlVisibleInfo, 0); //GuildGrade

			len = pPlayerWlVisibleInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasLoverVip
		for (size_t i = 0; i < n; i++)
		{ //LoverVipInfo
			BYTE* pLoverVipInfo = pPlayerRoomVisibleInfo;
			Write16(pLoverVipInfo, 0); //len

			Write8(pLoverVipInfo, 0); //LoverVipLevel
			Write32(pLoverVipInfo, 0); //LoverVipPoint
			Write8(pLoverVipInfo, 0); //GrowRate

			len = pLoverVipInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasBattleModeSkillInfoList
		for (size_t i = 0; i < n; i++)
		{ //BattleModeSkillInfoList
			BYTE* pBattleModeSkillInfoList = pPlayerRoomVisibleInfo;
			Write16(pBattleModeSkillInfoList, 0); //len

			Write8(pBattleModeSkillInfoList, 0); //SkillNum
			for (size_t i = 0; i < n; i++)
			{ //SkillInfo
				BYTE* pSkillInfo = pBattleModeSkillInfoList;
				Write16(pSkillInfo, 0); //len

				Write16(pSkillInfo, 0); //SkillId
				Write8(pSkillInfo, 0); //SkillLevel

				len = pSkillInfo - pBattleModeSkillInfoList;
				Set16(pBattleModeSkillInfoList, (WORD)len);
				pBattleModeSkillInfoList += len;
			}

			len = pBattleModeSkillInfoList - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasGarden
		for (size_t i = 0; i < n; i++)
		{ //PersonalGardenBaseInfo
			BYTE* pPersonalGardenBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pPersonalGardenBaseInfo, 0); //len

			Write8(pPersonalGardenBaseInfo, 0); //GardenLevel
			Write32(pPersonalGardenBaseInfo, 0); //GardenPoint
			Write8(pPersonalGardenBaseInfo, 0); //GrowRate
			Write32(pPersonalGardenBaseInfo, 0); //GardenExpireTime
			{ //SimpleInfo
				BYTE* pSimpleInfo = pPersonalGardenBaseInfo;
				Write16(pSimpleInfo, 0); //len

				Write32(pSimpleInfo, 0); //WeekPopularity
				Write32(pSimpleInfo, 0); //TotalPopularity
				Write32(pSimpleInfo, 0); //LastUpdatePopularityTime
				Write8(pSimpleInfo, 0); //PrivateType

				len = pSimpleInfo - pPersonalGardenBaseInfo;
				Set16(pPersonalGardenBaseInfo, (WORD)len);
				pPersonalGardenBaseInfo += len;
			}

			len = pPersonalGardenBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //ConsumeVipInfo
			BYTE* pConsumeVipInfo = pPlayerRoomVisibleInfo;
			Write16(pConsumeVipInfo, 0); //len

			WriteUn(pConsumeVipInfo, 0); //VipLevel
			WriteUn(pConsumeVipInfo, 0); //CharmValueOfMonth
			WriteUn(pConsumeVipInfo, 0); //SearchTreasureNums
			WriteUn(pConsumeVipInfo, 0); //GetTreasureNums

			len = pConsumeVipInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HaveBaby
		{ //LoverBabyInfo
			BYTE* pLoverBabyInfo = pPlayerRoomVisibleInfo;
			Write16(pLoverBabyInfo, 0); //len

			Write32(pLoverBabyInfo, 0); //LoverBabyID
			Write32(pLoverBabyInfo, 0); //ItemID
			Write32(pLoverBabyInfo, 0); //GrowValue
			Write32(pLoverBabyInfo, 0); //MentalValue
			Write32(pLoverBabyInfo, 0); //BabyProfileLevel
			Write32(pLoverBabyInfo, 0); //StrengthLevel
			Write32(pLoverBabyInfo, 0); //GrowLevel
			WriteString(pLoverBabyInfo, 0); //LoveBabyNickName[]
			Write16(pLoverBabyInfo, 0); //LoverBabyStat
			Write16(pLoverBabyInfo, 0); //LoverBabyEquipStat
			Write16(pLoverBabyInfo, 0); //LoverBabyTransferdStatus

			len = pLoverBabyInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //EmperorInfo
			BYTE* pEmperorInfo = pPlayerRoomVisibleInfo;
			Write16(pEmperorInfo, 0); //len

			Write8(pEmperorInfo, 0); //EmperorLevel
			Write32(pEmperorInfo, 0); //EmperorPoint
			Write32(pEmperorInfo, 0); //EmperorLeftDays
			Write8(pEmperorInfo, 0); //EmperorGrowRate

			len = pEmperorInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write16(pPlayerRoomVisibleInfo, 0); //RaceCardNums
		for (size_t i = 0; i < n; i++)
		{ //RaceCardAddValueInfo
			BYTE* pRaceCardAddValueInfo = pPlayerRoomVisibleInfo;
			Write16(pRaceCardAddValueInfo, 0); //len

			Write32(pRaceCardAddValueInfo, 0); //RaceCardID
			Write32(pRaceCardAddValueInfo, 0); //AddValue

			len = pRaceCardAddValueInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //GansterScoreInfo
			BYTE* pGansterScoreInfo = pPlayerRoomVisibleInfo;
			Write16(pGansterScoreInfo, 0); //len

			Write32(pGansterScoreInfo, 0); //GansterSeasonID
			Write32(pGansterScoreInfo, 0); //GansterScore
			Write32(pGansterScoreInfo, 0); //PoliceScore
			Write32(pGansterScoreInfo, 0); //TotalGansterScore

			len = pGansterScoreInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write32(pPlayerRoomVisibleInfo, 0); //OlympicId
		Write32(pPlayerRoomVisibleInfo, 0); //NPCEliminateWinTimes
		Write8(pPlayerRoomVisibleInfo, 0); //OriginTeamID
		Write8(pPlayerRoomVisibleInfo, 0); //NxNpc
		Write16(pPlayerRoomVisibleInfo, 0); //NxNpcAILevel
		{ //EquippedActiveKartInfo
			BYTE* pEquippedActiveKartInfo = pPlayerRoomVisibleInfo;
			Write16(pEquippedActiveKartInfo, 0); //len

			Write8(pEquippedActiveKartInfo, 0); //HaveActiveInfo
			Write32(pEquippedActiveKartInfo, 0); //KartID
			Write32(pEquippedActiveKartInfo, 0); //ActiveLevel

			len = pEquippedActiveKartInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //SpecialActivityStatus
		Write8(pPlayerRoomVisibleInfo, 0); //AreaID
		Write8(pPlayerRoomVisibleInfo, 0); //HaveRaiseSecondBaby
		{ //SecondLoverBabyInfo
			BYTE* pSecondLoverBabyInfo = pPlayerRoomVisibleInfo;
			Write16(pSecondLoverBabyInfo, 0); //len

			Write32(pSecondLoverBabyInfo, 0); //LoverBabyID
			Write32(pSecondLoverBabyInfo, 0); //ItemID
			Write32(pSecondLoverBabyInfo, 0); //GrowValue
			Write32(pSecondLoverBabyInfo, 0); //MentalValue
			Write32(pSecondLoverBabyInfo, 0); //BabyProfileLevel
			Write32(pSecondLoverBabyInfo, 0); //StrengthLevel
			Write32(pSecondLoverBabyInfo, 0); //GrowLevel
			WriteString(pSecondLoverBabyInfo, 0); //LoveBabyNickName[]
			Write16(pSecondLoverBabyInfo, 0); //LoverBabyStat
			Write16(pSecondLoverBabyInfo, 0); //LoverBabyEquipStat
			Write16(pSecondLoverBabyInfo, 0); //LoverBabyTransferdStatus

			len = pSecondLoverBabyInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasRankedMatchInfo
		for (size_t i = 0; i < n; i++)
		{ //RankedMatchGradeInfo
			BYTE* pRankedMatchGradeInfo = pPlayerRoomVisibleInfo;
			Write16(pRankedMatchGradeInfo, 0); //len

			Write32(pRankedMatchGradeInfo, 0); //GradeLevel
			Write32(pRankedMatchGradeInfo, 0); //ChildLevel
			Write32(pRankedMatchGradeInfo, 0); //GradeScore
			Write32(pRankedMatchGradeInfo, 0); //MaxGradeScore
			Write32(pRankedMatchGradeInfo, 0); //TotalScore

			len = pRankedMatchGradeInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasHuanLingChangeInfo
		for (size_t i = 0; i < n; i++)
		{ //HuanLingSuitInfo
			BYTE* pHuanLingSuitInfo = pPlayerRoomVisibleInfo;
			Write16(pHuanLingSuitInfo, 0); //len

			Write32(pHuanLingSuitInfo, 0); //SuitID
			Write8(pHuanLingSuitInfo, 0); //ChangeLevel

			len = pHuanLingSuitInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //EquipSealType
		Write16(pPlayerRoomVisibleInfo, 0); //Role
		Write8(pPlayerRoomVisibleInfo, 0); //SpecialActivityIDNum
		Write8(pPlayerRoomVisibleInfo, 0); //CrewID
		Write8(pPlayerRoomVisibleInfo, 0); //SpecialActivityInfoNum
		for (size_t i = 0; i < n; i++)
		{ //SpecialActivityInfo
			BYTE* pSpecialActivityInfo = pPlayerRoomVisibleInfo;
			Write16(pSpecialActivityInfo, 0); //len

			Write8(pSpecialActivityInfo, 0); //ProfessionLicenseInfoNum
			for (size_t i = 0; i < n; i++)
			{ //ProfessionLicenseInfo
				BYTE* pProfessionLicenseInfo = pSpecialActivityInfo;
				Write16(pProfessionLicenseInfo, 0); //len

				Write8(pProfessionLicenseInfo, 0); //BigLevel
				Write8(pProfessionLicenseInfo, 0); //SmallLevel

				len = pProfessionLicenseInfo - pSpecialActivityInfo;
				Set16(pSpecialActivityInfo, (WORD)len);
				pSpecialActivityInfo += len;
			}

			len = pSpecialActivityInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //ParaNum
		Write32(pPlayerRoomVisibleInfo, 0); //ParaList[]
		Write8(pPlayerRoomVisibleInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemOrder
			BYTE* pItemOrder = pPlayerRoomVisibleInfo;
			Write16(pItemOrder, 0); //len

			Write32(pItemOrder, 0); //KartID
			Write32(pItemOrder, 0); //Order
			Write32(pItemOrder, 0); //BackGroundID

			len = pItemOrder - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //TDCExcluItemNum
		Write32(pPlayerRoomVisibleInfo, 0); //TDCExclusiveItemID[]
		Write8(pPlayerRoomVisibleInfo, 0); //EquipNiChangItemNum
		for (size_t i = 0; i < n; i++)
		{ //NiChangPavilionEquipItemInfo
			BYTE* pNiChangPavilionEquipItemInfo = pPlayerRoomVisibleInfo;
			Write16(pNiChangPavilionEquipItemInfo, 0); //len

			Write32(pNiChangPavilionEquipItemInfo, 0); //ItemId
			Write16(pNiChangPavilionEquipItemInfo, 0); //CurrentEquipColorationPlanId

			len = pNiChangPavilionEquipItemInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //TestKartGameType
		Write32(pPlayerRoomVisibleInfo, 0); //GameTestKartID
		Write8(pPlayerRoomVisibleInfo, 0); //HasStarsFightingInfo
		for (size_t i = 0; i < n; i++)
		{ //StarsFightingInfo
			BYTE* pStarsFightingInfo = pPlayerRoomVisibleInfo;
			Write16(pStarsFightingInfo, 0); //len

			Write32(pStarsFightingInfo, 0); //Star
			Write32(pStarsFightingInfo, 0); //StarVal
			Write32(pStarsFightingInfo, 0); //StarsFightingStarLevel

			len = pStarsFightingInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //RoomBGSetting

		len = pPlayerRoomVisibleInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //KartRefitInfo
		BYTE* pKartRefitInfo = p;
		Write16(pKartRefitInfo, 0); //len

		Write32(pKartRefitInfo, 0); //Uin
		Write32(pKartRefitInfo, 0); //KartId
		Write32(pKartRefitInfo, 0); //RefitCout
		Write16(pKartRefitInfo, 0); //MaxFlags
		Write16(pKartRefitInfo, 0); //WWeight
		Write16(pKartRefitInfo, 0); //SpeedWeight
		Write16(pKartRefitInfo, 0); //JetWeight
		Write16(pKartRefitInfo, 0); //SJetWeight
		Write16(pKartRefitInfo, 0); //AccuWeight
		Write32(pKartRefitInfo, 0); //ShapeRefitCount
		Write32(pKartRefitInfo, 0); //KartHeadRefitItemID
		Write32(pKartRefitInfo, 0); //KartTailRefitItemID
		Write32(pKartRefitInfo, 0); //KartFlankRefitItemID
		Write32(pKartRefitInfo, 0); //KartTireRefitItemID
		Write32(pKartRefitInfo, 0); //SecondRefitCount
		Write16(pKartRefitInfo, 0); //Speed2Weight
		Write16(pKartRefitInfo, 0); //DriftVecWeight
		Write16(pKartRefitInfo, 0); //AdditionalZSpeedWeight
		Write16(pKartRefitInfo, 0); //AntiCollisionWeight
		Write16(pKartRefitInfo, 0); //LuckyValue
		Write16(pKartRefitInfo, 0); //RefitLuckyValueMaxWeight
		Write32(pKartRefitInfo, 0); //ShapeSuitID
		Write8(pKartRefitInfo, 0); //LegendSuitLevel
		Write32(pKartRefitInfo, 0); //LegendSuitLevelChoice
		Write32(pKartRefitInfo, 0); //ShapeLegendSuitID

		len = pKartRefitInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //KartPhysParamInfo
		BYTE* pKartPhysParamInfo = p;
		Write16(pKartPhysParamInfo, 0); //len

		Write32(pKartPhysParamInfo, 0); //KartID
		Write8(pKartPhysParamInfo, 0); //PhysInfoCount
		for (size_t i = 0; i < n; i++)
		{ //PhysInfo
			BYTE* pPhysInfo = pKartPhysParamInfo;
			Write16(pPhysInfo, 0); //len

			Write32(pPhysInfo, 0); //PID
			Write32(pPhysInfo, 0); //AffectID
			Write32(pPhysInfo, 0); //Param
			Write32(pPhysInfo, 0); //LifeTime

			len = pPhysInfo - pKartPhysParamInfo;
			Set16(pKartPhysParamInfo, (WORD)len);
			pKartPhysParamInfo += len;
		}
		Write8(pKartPhysParamInfo, 0); //CompensateParamCount
		for (size_t i = 0; i < n; i++)
		{ //CompensateParam
			BYTE* pCompensateParam = pKartPhysParamInfo;
			Write16(pCompensateParam, 0); //len

			Write32(pCompensateParam, 0); //Percent
			Write32(pCompensateParam, 0); //Value

			len = pCompensateParam - pKartPhysParamInfo;
			Set16(pKartPhysParamInfo, (WORD)len);
			pKartPhysParamInfo += len;
		}
		{ //CollisionBoxParam
			BYTE* pCollisionBoxParam = pKartPhysParamInfo;
			Write16(pCollisionBoxParam, 0); //len

			Write32(pCollisionBoxParam, 0); //BoxLength
			Write32(pCollisionBoxParam, 0); //BoxWidth
			Write32(pCollisionBoxParam, 0); //BoxHeight
			Write32(pCollisionBoxParam, 0); //AdjustOffset
			Write32(pCollisionBoxParam, 0); //AdjustPickGap
			Write32(pCollisionBoxParam, 0); //AdjustRemoteOffset
			Write32(pCollisionBoxParam, 0); //AdjustBevelOffset
			Write32(pCollisionBoxParam, 0); //ControllerOffset

			len = pCollisionBoxParam - pKartPhysParamInfo;
			Set16(pKartPhysParamInfo, (WORD)len);
			pKartPhysParamInfo += len;
		}
		{ //CarToCarCollisionParam
			BYTE* pCarToCarCollisionParam = pKartPhysParamInfo;
			Write16(pCarToCarCollisionParam, 0); //len

			Write32(pCarToCarCollisionParam, 0); //CollisionRadius
			Write32(pCarToCarCollisionParam, 0); //CollisionLength
			Write32(pCarToCarCollisionParam, 0); //CollisionWidth
			Write32(pCarToCarCollisionParam, 0); //CollisionHeight
			Write32(pCarToCarCollisionParam, 0); //CollisionLostCtrlTime

			len = pCarToCarCollisionParam - pKartPhysParamInfo;
			Set16(pKartPhysParamInfo, (WORD)len);
			pKartPhysParamInfo += len;
		}
		Write32(pKartPhysParamInfo, 0); //BaseTurnRate
		Write32(pKartPhysParamInfo, 0); //VolatileTurnRate
		Write32(pKartPhysParamInfo, 0); //MaxTurnSpeed
		Write32(pKartPhysParamInfo, 0); //MinTurnSpeed
		Write32(pKartPhysParamInfo, 0); //MaxAccuTime
		Write32(pKartPhysParamInfo, 0); //BaseAccuRate
		Write32(pKartPhysParamInfo, 0); //MaxAffectSpeed
		Write32(pKartPhysParamInfo, 0); //Gravity
		Write32(pKartPhysParamInfo, 0); //AdditionalLocalZSpeed
		Write32(pKartPhysParamInfo, 0); //StartVec
		Write32(pKartPhysParamInfo, 0); //EndVecFist
		Write32(pKartPhysParamInfo, 0); //EndVecSecon
		Write32(pKartPhysParamInfo, 0); //DirKeyForce
		Write32(pKartPhysParamInfo, 0); //DirKeyTwist
		Write32(pKartPhysParamInfo, 0); //BannerTwist
		Write32(pKartPhysParamInfo, 0); //BannerKeyTwist
		Write32(pKartPhysParamInfo, 0); //BannerVecForce
		Write32(pKartPhysParamInfo, 0); //BannerHeadForce
		Write32(pKartPhysParamInfo, 0); //SlidFricForce
		Write32(pKartPhysParamInfo, 0); //RollFricForce
		Write32(pKartPhysParamInfo, 0); //StartWec
		Write32(pKartPhysParamInfo, 0); //MaxWec
		Write32(pKartPhysParamInfo, 0); //SuaiJianTwist
		Write32(pKartPhysParamInfo, 0); //DirUpKeyForce
		Write8(pKartPhysParamInfo, 0); //AccelStatusCount
		Write32(pKartPhysParamInfo, 0); //AccelStatus[]
		Write8(pKartPhysParamInfo, 0); //ForwardAccelNum
		for (size_t i = 0; i < n; i++)
		{ //ForwardAccel
			BYTE* pForwardAccel = pKartPhysParamInfo;
			Write16(pForwardAccel, 0); //len

			Write32(pForwardAccel, 0); //Key
			Write32(pForwardAccel, 0); //Value

			len = pForwardAccel - pKartPhysParamInfo;
			Set16(pKartPhysParamInfo, (WORD)len);
			pKartPhysParamInfo += len;
		}
		Write8(pKartPhysParamInfo, 0); //ForwardDecelNum
		for (size_t i = 0; i < n; i++)
		{ //ForwardDecel
			BYTE* pForwardDecel = pKartPhysParamInfo;
			Write16(pForwardDecel, 0); //len

			Write32(pForwardDecel, 0); //Key
			Write32(pForwardDecel, 0); //Value

			len = pForwardDecel - pKartPhysParamInfo;
			Set16(pKartPhysParamInfo, (WORD)len);
			pKartPhysParamInfo += len;
		}
		Write8(pKartPhysParamInfo, 0); //BackwardAccelNum
		for (size_t i = 0; i < n; i++)
		{ //BackwardAccel
			BYTE* pBackwardAccel = pKartPhysParamInfo;
			Write16(pBackwardAccel, 0); //len

			Write32(pBackwardAccel, 0); //Key
			Write32(pBackwardAccel, 0); //Value

			len = pBackwardAccel - pKartPhysParamInfo;
			Set16(pKartPhysParamInfo, (WORD)len);
			pKartPhysParamInfo += len;
		}
		Write8(pKartPhysParamInfo, 0); //BackwardDecelNum
		for (size_t i = 0; i < n; i++)
		{ //BackwardDecel
			BYTE* pBackwardDecel = pKartPhysParamInfo;
			Write16(pBackwardDecel, 0); //len

			Write32(pBackwardDecel, 0); //Key
			Write32(pBackwardDecel, 0); //Value

			len = pBackwardDecel - pKartPhysParamInfo;
			Set16(pKartPhysParamInfo, (WORD)len);
			pKartPhysParamInfo += len;
		}
		Write32(pKartPhysParamInfo, 0); //CrashCompensatePower
		Write32(pKartPhysParamInfo, 0); //DefenseRate
		Write32(pKartPhysParamInfo, 0); //Uin
		Write32(pKartPhysParamInfo, 0); //SpeedupCardGenRate
		Write32(pKartPhysParamInfo, 0); //ExtraFuncFlag
		Write8(pKartPhysParamInfo, 0); //SkatePara
		for (size_t i = 0; i < n; i++)
		{ //hasSkatePara
			BYTE* phasSkatePara = pKartPhysParamInfo;
			Write16(phasSkatePara, 0); //len

			Write32(phasSkatePara, 0); //TrackSpeed
			Write32(phasSkatePara, 0); //SkateSpeedCoef_AirBigJet
			Write32(phasSkatePara, 0); //SkateSpeedCoef_Jump
			Write32(phasSkatePara, 0); //SkateSpeedCoef_AirJetPoint
			Write32(phasSkatePara, 0); //SkateSpeedCoef_MaxForce
			Write32(phasSkatePara, 0); //OntrackAccRef
			Write32(phasSkatePara, 0); //TrackAccRef
			Write32(phasSkatePara, 0); //DashSkill

			len = phasSkatePara - pKartPhysParamInfo;
			Set16(pKartPhysParamInfo, (WORD)len);
			pKartPhysParamInfo += len;
		}
		Write8(pKartPhysParamInfo, 0); //HasBattleModeSkillInfoList
		for (size_t i = 0; i < n; i++)
		{ //BattleModeSkillInfoList
			BYTE* pBattleModeSkillInfoList = pKartPhysParamInfo;
			Write16(pBattleModeSkillInfoList, 0); //len

			Write8(pBattleModeSkillInfoList, 0); //SkillNum
			for (size_t i = 0; i < n; i++)
			{ //SkillInfo
				BYTE* pSkillInfo = pBattleModeSkillInfoList;
				Write16(pSkillInfo, 0); //len

				Write16(pSkillInfo, 0); //SkillId
				Write8(pSkillInfo, 0); //SkillLevel

				len = pSkillInfo - pBattleModeSkillInfoList;
				Set16(pBattleModeSkillInfoList, (WORD)len);
				pBattleModeSkillInfoList += len;
			}

			len = pBattleModeSkillInfoList - pKartPhysParamInfo;
			Set16(pKartPhysParamInfo, (WORD)len);
			pKartPhysParamInfo += len;
		}
		Write32(pKartPhysParamInfo, 0); //EnergyConvert
		Write16(pKartPhysParamInfo, 0); //SuperN2ORate
		Write16(pKartPhysParamInfo, 0); //CollisionLoseRate
		Write8(pKartPhysParamInfo, 0); //NotInterruptDrift
		Write8(pKartPhysParamInfo, 0); //AddWeightNum
		Write8(pKartPhysParamInfo, 0); //WeightNum
		Write8(pKartPhysParamInfo, 0); //HasAntiCollisionCfg
		for (size_t i = 0; i < n; i++)
		{ //AntiCollistionCfg
			BYTE* pAntiCollistionCfg = pKartPhysParamInfo;
			Write16(pAntiCollistionCfg, 0); //len

			Write8(pAntiCollistionCfg, 0); //Num
			Write32(pAntiCollistionCfg, 0); //Position[]

			len = pAntiCollistionCfg - pKartPhysParamInfo;
			Set16(pKartPhysParamInfo, (WORD)len);
			pKartPhysParamInfo += len;
		}
		Write8(pKartPhysParamInfo, 0); //HasBoatParam
		for (size_t i = 0; i < n; i++)
		{ //BoatParam
			BYTE* pBoatParam = pKartPhysParamInfo;
			Write16(pBoatParam, 0); //len

			Write32(pBoatParam, 0); //DirKeyForceParamC
			Write32(pBoatParam, 0); //DirKeyForceParamD
			Write32(pBoatParam, 0); //DTFLimitAngle
			Write32(pBoatParam, 0); //DTFRatio
			Write32(pBoatParam, 0); //UpKeyVecForce
			Write32(pBoatParam, 0); //UpKeyVecForceParamA
			Write32(pBoatParam, 0); //UpKeyVecForceParamB
			Write32(pBoatParam, 0); //LRKeyVecForce
			Write32(pBoatParam, 0); //LRKeyVecForceParamA
			Write32(pBoatParam, 0); //LRKeyVecForceParamB
			Write32(pBoatParam, 0); //VecForce
			Write32(pBoatParam, 0); //VecForceParamA
			Write32(pBoatParam, 0); //VecForceParamB
			Write32(pBoatParam, 0); //BoatShape[]
			Write32(pBoatParam, 0); //WecEffect
			Write32(pBoatParam, 0); //BannerKeyTwist
			Write32(pBoatParam, 0); //BannerKeyTwistParamA
			Write32(pBoatParam, 0); //BannerKeyTwistParamB
			Write32(pBoatParam, 0); //SuaiJianTwist
			Write32(pBoatParam, 0); //BoatHeighRatio
			Write32(pBoatParam, 0); //BannerTwist
			Write32(pBoatParam, 0); //BannerTwistParamA
			Write32(pBoatParam, 0); //DirUpKeyForce
			Write32(pBoatParam, 0); //DirUpKeyForceParamA
			Write32(pBoatParam, 0); //DirUpKeyForceParamB
			Write32(pBoatParam, 0); //DirKeyForce
			Write32(pBoatParam, 0); //DirKeyForceParamA
			Write32(pBoatParam, 0); //DirKeyForceParamB
			Write32(pBoatParam, 0); //AddNO2PerSec
			Write32(pBoatParam, 0); //BoatAirValue
			WriteUn(pBoatParam, 0); //ifSlidFricForce

			len = pBoatParam - pKartPhysParamInfo;
			Set16(pKartPhysParamInfo, (WORD)len);
			pKartPhysParamInfo += len;
		}
		Write8(pKartPhysParamInfo, 0); //BoatForwardAccelNum
		for (size_t i = 0; i < n; i++)
		{ //BoatForwardAccel
			BYTE* pBoatForwardAccel = pKartPhysParamInfo;
			Write16(pBoatForwardAccel, 0); //len

			Write32(pBoatForwardAccel, 0); //Key
			Write32(pBoatForwardAccel, 0); //Value

			len = pBoatForwardAccel - pKartPhysParamInfo;
			Set16(pKartPhysParamInfo, (WORD)len);
			pKartPhysParamInfo += len;
		}
		Write32(pKartPhysParamInfo, 0); //DirUpKeyForceParamA
		Write32(pKartPhysParamInfo, 0); //DirUpKeyForceParamB

		len = pKartPhysParamInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 712, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestTimerChallenge3Operate(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UCHAR Cmd = Read8(p);
	UINT BuffId = Read32(p);
	UCHAR Position = Read8(p);
	UCHAR Status = Read8(p);

}

void ResponseTimerChallenge3Operate(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write8(p, 0); //Cmd
	Write32(p, 0); //ReturActiveValue
	{ //TimerChallengeOneBuffInfo
		BYTE* pTimerChallengeOneBuffInfo = p;
		Write16(pTimerChallengeOneBuffInfo, 0); //len

		Write32(pTimerChallengeOneBuffInfo, 0); //BuffId
		Write32(pTimerChallengeOneBuffInfo, 0); //Prob
		Write8(pTimerChallengeOneBuffInfo, 0); //BuffType
		Write8(pTimerChallengeOneBuffInfo, 0); //BuffLev
		Write8(pTimerChallengeOneBuffInfo, 0); //ReduceDiscount
		Write32(pTimerChallengeOneBuffInfo, 0); //KartId
		Write8(pTimerChallengeOneBuffInfo, 0); //DailyExpKartTimeLimit
		Write16(pTimerChallengeOneBuffInfo, 0); //BuffNameLen
		Write16(pTimerChallengeOneBuffInfo, 0); //BuffDesLen
		Write8(pTimerChallengeOneBuffInfo, 0); //Icon
		Write8(pTimerChallengeOneBuffInfo, 0); //BuffShape
		Write8(pTimerChallengeOneBuffInfo, 0); //IsCanLevUp

		len = pTimerChallengeOneBuffInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //Position
	Write8(p, 0); //Status

	len = p - buf;
	SendToClient(Client, 28425, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyAbnormalCurrentInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //Time
	Write8(p, 0); //MsgSequence
	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen
	Write8(p, 0); //PassedCheckPointNum
	Write16(p, 0); //PassedCheckPointIDs[]
	Write8(p, 0); //SvrRound
	Write8(p, 0); //SvrIncRound
	Write8(p, 0); //ClntRound
	Write8(p, 0); //ClntIncRound
	Write32(p, 0); //CurrMapID
	Write32(p, 0); //NpcUin
	Write16(p, 0); //LatestCheckPointID

	len = p - buf;
	SendToClient(Client, 28429, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

