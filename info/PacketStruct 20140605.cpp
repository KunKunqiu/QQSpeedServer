void RequestGetPurchaseBroadcast(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetPurchaseBroadcast(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //BroadcastNum
	for (size_t i = 0; i < n; i++)
	{ //Broadcast
		BYTE* pBroadcast = p;
		Write16(pBroadcast, 0); //len

		WriteString(pBroadcast, 0); //Name[]
		WriteUn(pBroadcast, 0); //tTime
		Write8(pBroadcast, 0); //Discount
		Write32(pBroadcast, 0); //CommodityID
		Write32(pBroadcast, 0); //SavedMoney

		len = pBroadcast - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 20007, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestCheckCommodityOnSale(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	bool CheckOccasion = Read8(p);
	int CommodityID = Read32(p);

}

void ResponseCheckCommodityOnSale(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //CheckOccasion
	Write32(p, 0); //CommodityID
	Write16(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 20006, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestBuyCommodity(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	char[] NickName[] = ReadString(p);
	int ReqBuySeq = Read32(p);
	UINT DstUin = Read32(p);
	UINT PlayerExp = Read32(p);
	USHORT CommodityType = Read16(p);
	int PayType = Read32(p);
	int BuyCount = Read32(p);
	for (size_t i = 0; i < n; i++)
	{ //ShoppingCar
		BYTE* pShoppingCar = p;
		len = Read16(pShoppingCar);

		int CommodityID = Read32(pShoppingCar);
		int PriceIdx = Read32(pShoppingCar);
		int DiscountCardID = Read32(pShoppingCar);

		p += len;
	}
	short AttachInfoLen = Read16(p);
	UINT OtherInfo = Read32(p);
	Un FirstLoginTime = ReadUn(p);
	UINT BuyNum = Read32(p);
	UINT GuildID = Read32(p);
	int ReduceCouponsID = Read32(p);

}

void ResponseBuyCommodity(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write32(p, 0); //Time
	WriteString(p, 0); //NickName[]
	Write32(p, 0); //ReqBuySeq
	Write32(p, 0); //DstUin
	Write32(p, 0); //PlayerExp
	Write16(p, 0); //CommodityType
	Write32(p, 0); //PayType
	Write32(p, 0); //BuyCount
	for (size_t i = 0; i < n; i++)
	{ //ShoppingCar
		BYTE* pShoppingCar = p;
		Write16(pShoppingCar, 0); //len

		Write32(pShoppingCar, 0); //CommodityID
		Write32(pShoppingCar, 0); //PriceIdx
		Write32(pShoppingCar, 0); //DiscountCardID

		len = pShoppingCar - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //AttachInfoLen
	Write32(p, 0); //OtherInfo
	WriteUn(p, 0); //FirstLoginTime
	Write16(p, 0); //ReasonLen
	Write16(p, 0); //QuerySigLen
	Write8(p, 0); //CommMbItem
	Write8(p, 0); //MbItemNum
	for (size_t i = 0; i < n; i++)
	{ //Item
		BYTE* pItem = p;
		Write16(pItem, 0); //len

		Write8(pItem, 0); //MbItemId
		Write8(pItem, 0); //Use
		Write16(pItem, 0); //ContentLen

		len = pItem - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //ReduceCouponsID
	{ //payMoneyInfo
		BYTE* ppayMoneyInfo = p;
		Write16(ppayMoneyInfo, 0); //len

		WriteUn(ppayMoneyInfo, 0); //money
		WriteUn(ppayMoneyInfo, 0); //superMoney
		WriteUn(ppayMoneyInfo, 0); //coupons
		WriteUn(ppayMoneyInfo, 0); //luckMoney
		WriteUn(ppayMoneyInfo, 0); //qbqd

		len = ppayMoneyInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 20000, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestBuyCommodityEx(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	char[] NickName[] = ReadString(p);
	int ReqBuySeq = Read32(p);
	UINT DstUin = Read32(p);
	UINT PlayerExp = Read32(p);
	USHORT CommodityType = Read16(p);
	int PayType = Read32(p);
	int BuyCount = Read32(p);
	for (size_t i = 0; i < n; i++)
	{ //ShoppingCar
		BYTE* pShoppingCar = p;
		len = Read16(pShoppingCar);

		int CommodityID = Read32(pShoppingCar);
		int PriceIdx = Read32(pShoppingCar);
		int DiscountCardID = Read32(pShoppingCar);

		p += len;
	}
	short AttachInfoLen = Read16(p);
	UINT OtherInfo = Read32(p);
	Un FirstLoginTime = ReadUn(p);
	WORD QuerySigLen = Read16(p);
	bool MbItemNum = Read8(p);
	for (size_t i = 0; i < n; i++)
	{ //itemAns
		BYTE* pitemAns = p;
		len = Read16(pitemAns);

		char MbItemId = Read8(pitemAns);
		WORD VerifyContentLen = Read16(pitemAns);

		p += len;
	}
	UINT BuyNum = Read32(p);
	UINT GuildID = Read32(p);
	int ReduceCouponsID = Read32(p);

}

void ResponseBuyCommodityEx(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write32(p, 0); //ReqBuySeq
	Write32(p, 0); //DstUin
	Write16(p, 0); //CommodityType
	Write32(p, 0); //PayType
	Write32(p, 0); //BuyCount
	for (size_t i = 0; i < n; i++)
	{ //ShoppingCar
		BYTE* pShoppingCar = p;
		Write16(pShoppingCar, 0); //len

		Write32(pShoppingCar, 0); //CommodityID
		Write32(pShoppingCar, 0); //PriceIdx
		Write32(pShoppingCar, 0); //DiscountCardID

		len = pShoppingCar - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //ReasonLen
	Write32(p, 0); //ReduceCouponsID
	{ //payMoneyInfo
		BYTE* ppayMoneyInfo = p;
		Write16(ppayMoneyInfo, 0); //len

		WriteUn(ppayMoneyInfo, 0); //money
		WriteUn(ppayMoneyInfo, 0); //superMoney
		WriteUn(ppayMoneyInfo, 0); //coupons
		WriteUn(ppayMoneyInfo, 0); //luckMoney
		WriteUn(ppayMoneyInfo, 0); //qbqd

		len = ppayMoneyInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 20005, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetCommodityList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetCommodityList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //EndFlag
	Write16(p, 0); //CommodityNum
	for (size_t i = 0; i < n; i++)
	{ //Commodity
		BYTE* pCommodity = p;
		Write16(pCommodity, 0); //len

		Write32(pCommodity, 0); //ID
		WriteString(pCommodity, 0); //Name[]
		{ //Type
			BYTE* pType = pCommodity;
			Write16(pType, 0); //len

			Write16(pType, 0); //Base
			Write16(pType, 0); //Sub

			len = pType - pCommodity;
			Set16(pCommodity, (WORD)len);
			pCommodity += len;
		}
		{ //Description
			BYTE* pDescription = pCommodity;
			Write16(pDescription, 0); //len

			Write16(pDescription, 0); //GDescLen
			Write16(pDescription, 0); //ADescLen

			len = pDescription - pCommodity;
			Set16(pCommodity, (WORD)len);
			pCommodity += len;
		}
		{ //Rebate
			BYTE* pRebate = pCommodity;
			Write16(pRebate, 0); //len

			Write16(pRebate, 0); //Memeber
			Write16(pRebate, 0); //Common
			Write16(pRebate, 0); //Lucky
			Write16(pRebate, 0); //TimeLimitMember
			Write16(pRebate, 0); //TimeLimitCommon
			Write16(pRebate, 0); //MemberInUsing
			Write16(pRebate, 0); //CommonInUsing

			len = pRebate - pCommodity;
			Set16(pCommodity, (WORD)len);
			pCommodity += len;
		}
		{ //Limit
			BYTE* pLimit = pCommodity;
			Write16(pLimit, 0); //len

			Write32(pLimit, 0); //LevelLimit
			Write32(pLimit, 0); //HonorLimit
			Write32(pLimit, 0); //OtherLimit

			len = pLimit - pCommodity;
			Set16(pCommodity, (WORD)len);
			pCommodity += len;
		}
		Write32(pCommodity, 0); //PriceNum
		for (size_t i = 0; i < n; i++)
		{ //Price
			BYTE* pPrice = pCommodity;
			Write16(pPrice, 0); //len

			Write32(pPrice, 0); //QBPrice
			Write32(pPrice, 0); //QPPrice
			Write32(pPrice, 0); //MoneyPrice
			Write32(pPrice, 0); //SuperMoneyPrice
			Write32(pPrice, 0); //LuckyCoin
			Write32(pPrice, 0); //FishMoneyPrice
			Write16(pPrice, 0); //MixRate

			len = pPrice - pCommodity;
			Set16(pCommodity, (WORD)len);
			pCommodity += len;
		}
		Write32(pCommodity, 0); //DateSaleLimit
		Write32(pCommodity, 0); //DateSold
		Write32(pCommodity, 0); //TimeSaleBegin
		Write32(pCommodity, 0); //TimeSaleEnd
		Write32(pCommodity, 0); //Priority
		Write32(pCommodity, 0); //SaleTag
		WriteUn(pCommodity, 0); //VipFlag
		Write16(pCommodity, 0); //ItemCount
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pCommodity;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write16(pItemInfo, 0); //AvailPeriodCount
			Write32(pItemInfo, 0); //AvailPeriods[]
			Write16(pItemInfo, 0); //ItemNumCount
			Write32(pItemInfo, 0); //ItemNums[]
			Write16(pItemInfo, 0); //Probability

			len = pItemInfo - pCommodity;
			Set16(pCommodity, (WORD)len);
			pCommodity += len;
		}
		Write16(pCommodity, 0); //MoneyCount
		for (size_t i = 0; i < n; i++)
		{ //MoneyInfo
			BYTE* pMoneyInfo = pCommodity;
			Write16(pMoneyInfo, 0); //len

			Write16(pMoneyInfo, 0); //SuperMoneyAmtCount
			Write32(pMoneyInfo, 0); //SuperMoneyAmout[]
			Write16(pMoneyInfo, 0); //SuperMoneyPresentCount
			Write32(pMoneyInfo, 0); //SuperMoneyPresent[]
			Write16(pMoneyInfo, 0); //SuperMoneyMemPresentCount
			Write32(pMoneyInfo, 0); //SuperMoneyMemeberPresent[]
			Write16(pMoneyInfo, 0); //Probability

			len = pMoneyInfo - pCommodity;
			Set16(pCommodity, (WORD)len);
			pCommodity += len;
		}
		Write32(pCommodity, 0); //FirstOnSaleTime
		Write16(pCommodity, 0); //SubsitituteComIDNum
		Write32(pCommodity, 0); //SubstituteCommodityID[]
		Write32(pCommodity, 0); //PresentNum
		for (size_t i = 0; i < n; i++)
		{ //PresentInfo
			BYTE* pPresentInfo = pCommodity;
			Write16(pPresentInfo, 0); //len

			Write32(pPresentInfo, 0); //ExpInc
			Write32(pPresentInfo, 0); //MoneyInc
			Write32(pPresentInfo, 0); //SuperMnyInc
			Write16(pPresentInfo, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pPresentInfo;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //ItemPeriod

				len = pItemInfo - pPresentInfo;
				Set16(pPresentInfo, (WORD)len);
				pPresentInfo += len;
			}
			Write32(pPresentInfo, 0); //CouponsInc
			Write32(pPresentInfo, 0); //LuckMoneyInc

			len = pPresentInfo - pCommodity;
			Set16(pCommodity, (WORD)len);
			pCommodity += len;
		}
		Write32(pCommodity, 0); //ExchangeID
		Write32(pCommodity, 0); //ReturnSuperMoneyRatio
		Write32(pCommodity, 0); //ReturnCouponsRatio
		Write32(pCommodity, 0); //QuickEquip
		Write32(pCommodity, 0); //AllowanceNum
		for (size_t i = 0; i < n; i++)
		{ //Allowance
			BYTE* pAllowance = pCommodity;
			Write16(pAllowance, 0); //len

			Write32(pAllowance, 0); //Coupons
			Write32(pAllowance, 0); //SupperMoney
			Write32(pAllowance, 0); //Probability

			len = pAllowance - pCommodity;
			Set16(pCommodity, (WORD)len);
			pCommodity += len;
		}
		Write32(pCommodity, 0); //ReturnLuckMoneyRatio
		{ //ReturnRatio
			BYTE* pReturnRatio = pCommodity;
			Write16(pReturnRatio, 0); //len

			Write32(pReturnRatio, 0); //ReturnSuperMoneyRatio
			Write32(pReturnRatio, 0); //ReturnLuckMoneyRatio
			Write32(pReturnRatio, 0); //ReturnCouponsRatio
			Write32(pReturnRatio, 0); //TimeLimitReturnSuperMoneyRatio
			Write32(pReturnRatio, 0); //TimeLimitReturnLuckMoneyRatio
			Write32(pReturnRatio, 0); //TimeLimitReturnCouponsRatio
			Write32(pReturnRatio, 0); //ReturnSuperMoneyRatioInUsing
			Write32(pReturnRatio, 0); //ReturnLuckMoneyRatioInUsing
			Write32(pReturnRatio, 0); //ReturnCouponsRatioInUsing

			len = pReturnRatio - pCommodity;
			Set16(pCommodity, (WORD)len);
			pCommodity += len;
		}
		Write16(pCommodity, 0); //LimitMemeberRebate
		Write16(pCommodity, 0); //LimitCommonRebate
		Write32(pCommodity, 0); //TimeLimitReturnSuperMoneyRatio
		Write32(pCommodity, 0); //TimeLimitReturnCouponsRatio
		Write32(pCommodity, 0); //TimeLimitReturnLuckMoneyRatio
		WriteString(pCommodity, 0); //IntroduceURL[]
		Write16(pCommodity, 0); //ItemZizuanFlag
		Write16(pCommodity, 0); //AwardNum
		Write32(pCommodity, 0); //SpecialAward[]
		Write32(pCommodity, 0); //TimeLimit
		Write16(pCommodity, 0); //ShowPicNum
		Write32(pCommodity, 0); //BaseTypeEx

		len = pCommodity - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestShopCommonBroadcast(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	short ShopBroadcastType = Read16(p);

}

void ResponseShopCommonBroadcast(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //BroadcastNum
	for (size_t i = 0; i < n; i++)
	{ //BroadcastInfo
		BYTE* pBroadcastInfo = p;
		Write16(pBroadcastInfo, 0); //len

		Write16(pBroadcastInfo, 0); //ShopBroadcastType
		Write8(pBroadcastInfo, 0); //DescLen

		len = pBroadcastInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 20078, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestSeekFortune(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int PayType = Read32(p);
	int Type = Read32(p);
	int PlayerExp = Read32(p);
	char[] NickName[] = ReadString(p);

}

void ResponseSeekFortune(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //AttachLen
	Write32(p, 0); //PayType
	Write32(p, 0); //Type

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetCfgFile(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	{ //CfgFileInfos
		BYTE* pCfgFileInfos = p;
		len = Read16(pCfgFileInfos);

		int FileID = Read32(pCfgFileInfos);
		int FileVersion = Read32(pCfgFileInfos);
		int CRC = Read32(pCfgFileInfos);

		p += len;
	}

}

void ResponseGetCfgFile(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //Time
	Write16(p, 0); //ResultID
	{ //CfgFileInfos
		BYTE* pCfgFileInfos = p;
		Write16(pCfgFileInfos, 0); //len

		Write32(pCfgFileInfos, 0); //FileID
		Write32(pCfgFileInfos, 0); //FileVersion
		Write32(pCfgFileInfos, 0); //CRC
		Write32(pCfgFileInfos, 0); //FileLen
		Write32(pCfgFileInfos, 0); //FileZipLen
		Write32(pCfgFileInfos, 0); //CurFileZipLen

		len = pCfgFileInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //CommDirectionLen
	Write32(p, 0); //DiscountCardVersion
	Write32(p, 0); //ReduceCouponsVersion

	len = p - buf;
	SendToClient(Client, 20002, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetDiscountCardInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT CurVersion = Read32(p);

}

void ResponseGetDiscountCardInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Version
	Write8(p, 0); //DiscountCardNum
	for (size_t i = 0; i < n; i++)
	{ //DiscountCardInfo
		BYTE* pDiscountCardInfo = p;
		Write16(pDiscountCardInfo, 0); //len

		Write32(pDiscountCardInfo, 0); //ItemID
		Write8(pDiscountCardInfo, 0); //Discount
		Write8(pDiscountCardInfo, 0); //ValidCommodityNum
		Write32(pDiscountCardInfo, 0); //ValidCommodityID[]
		Write32(pDiscountCardInfo, 0); //PayTypeFlag
		Write8(pDiscountCardInfo, 0); //LimitTypeNum
		Write32(pDiscountCardInfo, 0); //LimitTypeList[]
		WriteU(pDiscountCardInfo, 0); //OverdueTime

		len = pDiscountCardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 20008, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestPayRebateCfg(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT Version = Read32(p);

}

void ResponsePayRebateCfg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write32(p, 0); //Version
	Write8(p, 0); //PayRebate
	Write16(p, 0); //RebateNum
	for (size_t i = 0; i < n; i++)
	{ //RebateAmountInfo
		BYTE* pRebateAmountInfo = p;
		Write16(pRebateAmountInfo, 0); //len

		Write32(pRebateAmountInfo, 0); //PayLow
		Write32(pRebateAmountInfo, 0); //RebateLow
		Write32(pRebateAmountInfo, 0); //RebateHigh

		len = pRebateAmountInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //DescLen

	len = p - buf;
	SendToClient(Client, 20077, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestReduceCouponseInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT CurVersion = Read32(p);

}

void ResponseReduceCouponseInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //NeedUpdate
	Write32(p, 0); //CurVersion
	Write16(p, 0); //Num
	for (size_t i = 0; i < n; i++)
	{ //Info
		BYTE* pInfo = p;
		Write16(pInfo, 0); //len

		Write32(pInfo, 0); //ItemID
		Write32(pInfo, 0); //PayLimit
		Write32(pInfo, 0); //ReducePay
		Write16(pInfo, 0); //ConsumeLimit
		WriteU(pInfo, 0); //OverdueTime

		len = pInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 20051, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetWorldInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT ClientVersion = Read32(p);
	UINT MasterVersion = Read32(p);
	UINT SlaveVersion = Read32(p);
	BYTE WorldID = Read8(p);
	char[] FileHash[] = ReadString(p);
	BYTE ClientCnt = Read8(p);
	UCHAR IsSimplifyVersion = Read8(p);

}

void ResponseGetWorldInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //LastClientVersion
	Write32(p, 0); //LastMasterVersion
	Write32(p, 0); //LastSlaveVersion
	Write8(p, 0); //OldDownloadServerNum
	Write8(p, 0); //RootDirectionLen
	Write32(p, 0); //MasterFullVersion
	Write32(p, 0); //SlaveFullVersion
	Write16(p, 0); //P2POption
	Write8(p, 0); //WorldCount
	for (size_t i = 0; i < n; i++)
	{ //WorldBaseInfo
		BYTE* pWorldBaseInfo = p;
		Write16(pWorldBaseInfo, 0); //len

		Write8(pWorldBaseInfo, 0); //WorldID
		Write8(pWorldBaseInfo, 0); //NameLen
		Write8(pWorldBaseInfo, 0); //DirNum
		for (size_t i = 0; i < n; i++)
		{ //DirServerInfo
			BYTE* pDirServerInfo = pWorldBaseInfo;
			Write16(pDirServerInfo, 0); //len

			Write32(pDirServerInfo, 0); //ServerID
			Write16(pDirServerInfo, 0); //LocationID
			Write32(pDirServerInfo, 0); //ServerIP
			Write16(pDirServerInfo, 0); //ServerPort[]

			len = pDirServerInfo - pWorldBaseInfo;
			Set16(pWorldBaseInfo, (WORD)len);
			pWorldBaseInfo += len;
		}

		len = pWorldBaseInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //CountryCount
	for (size_t i = 0; i < n; i++)
	{ //CountryInfo
		BYTE* pCountryInfo = p;
		Write16(pCountryInfo, 0); //len

		Write8(pCountryInfo, 0); //CountryID
		Write8(pCountryInfo, 0); //ChannelNum
		for (size_t i = 0; i < n; i++)
		{ //ChannelInfo
			BYTE* pChannelInfo = pCountryInfo;
			Write16(pChannelInfo, 0); //len

			Write8(pChannelInfo, 0); //ChannelID
			Write8(pChannelInfo, 0); //IDCNum
			for (size_t i = 0; i < n; i++)
			{ //IDCServerInfo
				BYTE* pIDCServerInfo = pChannelInfo;
				Write16(pIDCServerInfo, 0); //len

				Write16(pIDCServerInfo, 0); //LocationID
				Write8(pIDCServerInfo, 0); //GameServerNum
				for (size_t i = 0; i < n; i++)
				{ //GameServerInfo
					BYTE* pGameServerInfo = pIDCServerInfo;
					Write16(pGameServerInfo, 0); //len

					Write32(pGameServerInfo, 0); //ServerID
					Write32(pGameServerInfo, 0); //ServerIP
					Write16(pGameServerInfo, 0); //TcpPort
					Write16(pGameServerInfo, 0); //UdpPort
					Write16(pGameServerInfo, 0); //MaxPlayerNum
					Write16(pGameServerInfo, 0); //CurrentPlayerNum
					Write32(pGameServerInfo, 0); //RandomKey

					len = pGameServerInfo - pIDCServerInfo;
					Set16(pIDCServerInfo, (WORD)len);
					pIDCServerInfo += len;
				}

				len = pIDCServerInfo - pChannelInfo;
				Set16(pChannelInfo, (WORD)len);
				pChannelInfo += len;
			}

			len = pChannelInfo - pCountryInfo;
			Set16(pCountryInfo, (WORD)len);
			pCountryInfo += len;
		}

		len = pCountryInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ShopServerCount
	for (size_t i = 0; i < n; i++)
	{ //ShopServerInfo
		BYTE* pShopServerInfo = p;
		Write16(pShopServerInfo, 0); //len

		Write32(pShopServerInfo, 0); //ServerID
		Write16(pShopServerInfo, 0); //LocationID
		Write32(pShopServerInfo, 0); //ServerIP
		Write16(pShopServerInfo, 0); //ServerPort

		len = pShopServerInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //BorderServerCount
	for (size_t i = 0; i < n; i++)
	{ //BorderServerInfo
		BYTE* pBorderServerInfo = p;
		Write16(pBorderServerInfo, 0); //len

		{ //ServerInfo
			BYTE* pServerInfo = pBorderServerInfo;
			Write16(pServerInfo, 0); //len

			Write32(pServerInfo, 0); //ServerID
			Write32(pServerInfo, 0); //ServerIP
			Write16(pServerInfo, 0); //TcpPort
			Write16(pServerInfo, 0); //UdpPort
			Write16(pServerInfo, 0); //MaxPlayerNum
			Write16(pServerInfo, 0); //CurrentPlayerNum
			Write32(pServerInfo, 0); //RandomKey

			len = pServerInfo - pBorderServerInfo;
			Set16(pBorderServerInfo, (WORD)len);
			pBorderServerInfo += len;
		}
		Write16(pBorderServerInfo, 0); //LocationID

		len = pBorderServerInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //MatchServerCount
	for (size_t i = 0; i < n; i++)
	{ //MatchServerInfo
		BYTE* pMatchServerInfo = p;
		Write16(pMatchServerInfo, 0); //len

		{ //ServerInfo
			BYTE* pServerInfo = pMatchServerInfo;
			Write16(pServerInfo, 0); //len

			Write32(pServerInfo, 0); //ServerID
			Write32(pServerInfo, 0); //ServerIP
			Write16(pServerInfo, 0); //TcpPort
			Write16(pServerInfo, 0); //UdpPort
			Write16(pServerInfo, 0); //MaxPlayerNum
			Write16(pServerInfo, 0); //CurrentPlayerNum
			Write32(pServerInfo, 0); //RandomKey

			len = pServerInfo - pMatchServerInfo;
			Set16(pMatchServerInfo, (WORD)len);
			pMatchServerInfo += len;
		}
		Write16(pMatchServerInfo, 0); //LocationID

		len = pMatchServerInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //RelaxServerCount
	for (size_t i = 0; i < n; i++)
	{ //RelaxServerInfo
		BYTE* pRelaxServerInfo = p;
		Write16(pRelaxServerInfo, 0); //len

		{ //ServerInfo
			BYTE* pServerInfo = pRelaxServerInfo;
			Write16(pServerInfo, 0); //len

			Write32(pServerInfo, 0); //ServerID
			Write32(pServerInfo, 0); //ServerIP
			Write16(pServerInfo, 0); //TcpPort
			Write16(pServerInfo, 0); //UdpPort
			Write16(pServerInfo, 0); //MaxPlayerNum
			Write16(pServerInfo, 0); //CurrentPlayerNum
			Write32(pServerInfo, 0); //RandomKey

			len = pServerInfo - pRelaxServerInfo;
			Set16(pRelaxServerInfo, (WORD)len);
			pRelaxServerInfo += len;
		}
		Write16(pRelaxServerInfo, 0); //LocationID

		len = pRelaxServerInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //NetAdminServerCount
	for (size_t i = 0; i < n; i++)
	{ //NetAdminServerInfo
		BYTE* pNetAdminServerInfo = p;
		Write16(pNetAdminServerInfo, 0); //len

		Write32(pNetAdminServerInfo, 0); //ServerID
		Write16(pNetAdminServerInfo, 0); //LocationID
		Write32(pNetAdminServerInfo, 0); //ServerIP
		Write16(pNetAdminServerInfo, 0); //ServerPort

		len = pNetAdminServerInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //ReasonLen
	Write8(p, 0); //DownloadServerNum
	for (size_t i = 0; i < n; i++)
	{ //DownloadServerInfo
		BYTE* pDownloadServerInfo = p;
		Write16(pDownloadServerInfo, 0); //len

		Write16(pDownloadServerInfo, 0); //IPOrCDNLen
		Write16(pDownloadServerInfo, 0); //Port
		Write16(pDownloadServerInfo, 0); //LocationID

		len = pDownloadServerInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //TeamServerCount
	for (size_t i = 0; i < n; i++)
	{ //TeamServerInfo
		BYTE* pTeamServerInfo = p;
		Write16(pTeamServerInfo, 0); //len

		{ //ServerInfo
			BYTE* pServerInfo = pTeamServerInfo;
			Write16(pServerInfo, 0); //len

			Write32(pServerInfo, 0); //ServerID
			Write32(pServerInfo, 0); //ServerIP
			Write16(pServerInfo, 0); //TcpPort
			Write16(pServerInfo, 0); //UdpPort
			Write16(pServerInfo, 0); //MaxPlayerNum
			Write16(pServerInfo, 0); //CurrentPlayerNum
			Write32(pServerInfo, 0); //RandomKey

			len = pServerInfo - pTeamServerInfo;
			Set16(pTeamServerInfo, (WORD)len);
			pTeamServerInfo += len;
		}
		Write16(pTeamServerInfo, 0); //LocationID

		len = pTeamServerInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //DanceServerCount
	for (size_t i = 0; i < n; i++)
	{ //DanceServerInfo
		BYTE* pDanceServerInfo = p;
		Write16(pDanceServerInfo, 0); //len

		{ //ServerInfo
			BYTE* pServerInfo = pDanceServerInfo;
			Write16(pServerInfo, 0); //len

			Write32(pServerInfo, 0); //ServerID
			Write32(pServerInfo, 0); //ServerIP
			Write16(pServerInfo, 0); //TcpPort
			Write16(pServerInfo, 0); //UdpPort
			Write16(pServerInfo, 0); //MaxPlayerNum
			Write16(pServerInfo, 0); //CurrentPlayerNum
			Write32(pServerInfo, 0); //RandomKey

			len = pServerInfo - pDanceServerInfo;
			Set16(pDanceServerInfo, (WORD)len);
			pDanceServerInfo += len;
		}
		Write16(pDanceServerInfo, 0); //LocationID

		len = pDanceServerInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //SlideServerCount
	for (size_t i = 0; i < n; i++)
	{ //SlideServerInfo
		BYTE* pSlideServerInfo = p;
		Write16(pSlideServerInfo, 0); //len

		{ //ServerInfo
			BYTE* pServerInfo = pSlideServerInfo;
			Write16(pServerInfo, 0); //len

			Write32(pServerInfo, 0); //ServerID
			Write32(pServerInfo, 0); //ServerIP
			Write16(pServerInfo, 0); //TcpPort
			Write16(pServerInfo, 0); //UdpPort
			Write16(pServerInfo, 0); //MaxPlayerNum
			Write16(pServerInfo, 0); //CurrentPlayerNum
			Write32(pServerInfo, 0); //RandomKey

			len = pServerInfo - pSlideServerInfo;
			Set16(pSlideServerInfo, (WORD)len);
			pSlideServerInfo += len;
		}
		Write16(pSlideServerInfo, 0); //LocationID

		len = pSlideServerInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //UpdateType
	Write8(p, 0); //OpenOtherIDCFlag
	Write16(p, 0); //OtherIDCID
	Write8(p, 0); //BugReportServerCount
	for (size_t i = 0; i < n; i++)
	{ //BugReportServerInfo
		BYTE* pBugReportServerInfo = p;
		Write16(pBugReportServerInfo, 0); //len

		Write32(pBugReportServerInfo, 0); //ServerID
		Write16(pBugReportServerInfo, 0); //LocationID
		Write32(pBugReportServerInfo, 0); //ServerIP
		Write16(pBugReportServerInfo, 0); //ServerPort

		len = pBugReportServerInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //IsDynamicDownloadPermitted
	Write8(p, 0); //DynamicDownloadResourceIdNum
	Write32(p, 0); //DynamicDownloadResourceIds[]
	Write8(p, 0); //EnableRandMapMusicPreKnown
	Write16(p, 0); //MinPlayerNumForRand
	Write16(p, 0); //PlayerNumDeltaForRand
	Write8(p, 0); //FBServerCount
	for (size_t i = 0; i < n; i++)
	{ //FBServerInfo
		BYTE* pFBServerInfo = p;
		Write16(pFBServerInfo, 0); //len

		{ //ServerInfo
			BYTE* pServerInfo = pFBServerInfo;
			Write16(pServerInfo, 0); //len

			Write32(pServerInfo, 0); //ServerID
			Write32(pServerInfo, 0); //ServerIP
			Write16(pServerInfo, 0); //TcpPort
			Write16(pServerInfo, 0); //UdpPort
			Write16(pServerInfo, 0); //MaxPlayerNum
			Write16(pServerInfo, 0); //CurrentPlayerNum
			Write32(pServerInfo, 0); //RandomKey

			len = pServerInfo - pFBServerInfo;
			Set16(pFBServerInfo, (WORD)len);
			pFBServerInfo += len;
		}
		Write16(pFBServerInfo, 0); //LocationID

		len = pFBServerInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //WebCGIDomainLen
	Write16(p, 0); //WebCGIServerPort
	Write8(p, 0); //WlMatchSvrCount
	for (size_t i = 0; i < n; i++)
	{ //WlMatchSvrInfo
		BYTE* pWlMatchSvrInfo = p;
		Write16(pWlMatchSvrInfo, 0); //len

		{ //ServerInfo
			BYTE* pServerInfo = pWlMatchSvrInfo;
			Write16(pServerInfo, 0); //len

			Write32(pServerInfo, 0); //ServerID
			Write32(pServerInfo, 0); //ServerIP
			Write16(pServerInfo, 0); //TcpPort
			Write16(pServerInfo, 0); //UdpPort
			Write16(pServerInfo, 0); //MaxPlayerNum
			Write16(pServerInfo, 0); //CurrentPlayerNum
			Write32(pServerInfo, 0); //RandomKey

			len = pServerInfo - pWlMatchSvrInfo;
			Set16(pWlMatchSvrInfo, (WORD)len);
			pWlMatchSvrInfo += len;
		}
		Write16(pWlMatchSvrInfo, 0); //LocationID

		len = pWlMatchSvrInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //SkateServerCount
	for (size_t i = 0; i < n; i++)
	{ //SkateServerInfo
		BYTE* pSkateServerInfo = p;
		Write16(pSkateServerInfo, 0); //len

		{ //CommServerInfo
			BYTE* pCommServerInfo = pSkateServerInfo;
			Write16(pCommServerInfo, 0); //len

			{ //ServerInfo
				BYTE* pServerInfo = pCommServerInfo;
				Write16(pServerInfo, 0); //len

				Write32(pServerInfo, 0); //ServerID
				Write32(pServerInfo, 0); //ServerIP
				Write16(pServerInfo, 0); //TcpPort
				Write16(pServerInfo, 0); //UdpPort
				Write16(pServerInfo, 0); //MaxPlayerNum
				Write16(pServerInfo, 0); //CurrentPlayerNum
				Write32(pServerInfo, 0); //RandomKey

				len = pServerInfo - pCommServerInfo;
				Set16(pCommServerInfo, (WORD)len);
				pCommServerInfo += len;
			}
			Write16(pCommServerInfo, 0); //LocationID

			len = pCommServerInfo - pSkateServerInfo;
			Set16(pSkateServerInfo, (WORD)len);
			pSkateServerInfo += len;
		}
		Write32(pSkateServerInfo, 0); //ChannelId

		len = pSkateServerInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 90, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetChatRoomList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	short StartRoomIdx = Read16(p);
	short GetRoomNum = Read16(p);
	short GetRoomType = Read16(p);

}

void ResponseGetChatRoomList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen
	Write16(p, 0); //CurTotalRoomNum
	Write16(p, 0); //StartRoomIdx
	Write16(p, 0); //ChatRoomNum
	for (size_t i = 0; i < n; i++)
	{ //ChatRoomInfo
		BYTE* pChatRoomInfo = p;
		Write16(pChatRoomInfo, 0); //len

		Write32(pChatRoomInfo, 0); //ServerID
		Write32(pChatRoomInfo, 0); //ChatRoomID
		Write8(pChatRoomInfo, 0); //RoomNameLen
		Write16(pChatRoomInfo, 0); //CurrPlayerNum
		Write16(pChatRoomInfo, 0); //MaxPlayerNum
		Write32(pChatRoomInfo, 0); //RoomType
		Write16(pChatRoomInfo, 0); //SceneID
		Write16(pChatRoomInfo, 0); //CurrMaleNum

		len = pChatRoomInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //GetRoomType

	len = p - buf;
	SendToClient(Client, 91, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2FUpLoad(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	U Time = ReadU(p);
	UCHAR Cmd = Read8(p);
	USHORT UuidLen = Read16(p);
	USHORT AuthInfoLen = Read16(p);
	UINT TotalLen = Read32(p);
	UINT CurOffSet = Read32(p);
	USHORT DataLen = Read16(p);
	char[] FileMd5[] = Read8(p);

}

void ResponseC2FUpLoad(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //Cmd
	Write32(p, 0); //AckLen
	Write32(p, 0); //TotalLen

	len = p - buf;
	SendToClient(Client, 11200, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void ResponseEnterRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //RoomID
	Write16(p, 0); //BaseGameMode
	Write16(p, 0); //SubGameMode
	WriteString(p, 0); //RoomName[]
	Write8(p, 0); //SeatNum
	Write8(p, 0); //Flag
	Write8(p, 0); //SeatID
	Write8(p, 0); //TeamID
	Write32(p, 0); //MapID
	Write16(p, 0); //RoomOwnerID
	Write8(p, 0); //SeatStatus[]
	Write8(p, 0); //PlayerCount
	for (size_t i = 0; i < n; i++)
	{ //PlayerRoomVisibleInfo
		BYTE* pPlayerRoomVisibleInfo = p;
		Write16(pPlayerRoomVisibleInfo, 0); //len

		WriteUn(pPlayerRoomVisibleInfo, 0); //Uin
		WriteUn(pPlayerRoomVisibleInfo, 0); //Identity
		Write8(pPlayerRoomVisibleInfo, 0); //SeatID
		Write8(pPlayerRoomVisibleInfo, 0); //TeamID
		Write16(pPlayerRoomVisibleInfo, 0); //PlayerID
		Write8(pPlayerRoomVisibleInfo, 0); //Status
		{ //PlayerDBBaseInfo
			BYTE* pPlayerDBBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerDBBaseInfo, 0); //len

			WriteString(pPlayerDBBaseInfo, 0); //Nickname[]
			Write8(pPlayerDBBaseInfo, 0); //Gender
			Write8(pPlayerDBBaseInfo, 0); //Country
			Write32(pPlayerDBBaseInfo, 0); //License
			WriteUn(pPlayerDBBaseInfo, 0); //Experience
			Write32(pPlayerDBBaseInfo, 0); //SuperMoney
			Write32(pPlayerDBBaseInfo, 0); //Money
			WriteUn(pPlayerDBBaseInfo, 0); //WinNum
			Write32(pPlayerDBBaseInfo, 0); //SecondNum
			Write32(pPlayerDBBaseInfo, 0); //ThirdNum
			WriteUn(pPlayerDBBaseInfo, 0); //TotalNum
			Write32(pPlayerDBBaseInfo, 0); //CurHonor
			Write32(pPlayerDBBaseInfo, 0); //TotalHonor
			Write32(pPlayerDBBaseInfo, 0); //TodayHonor
			Write32(pPlayerDBBaseInfo, 0); //RelaxTime
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationBefore
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationCur
			Write32(pPlayerDBBaseInfo, 0); //Charm
			Write32(pPlayerDBBaseInfo, 0); //DurationGame
			Write32(pPlayerDBBaseInfo, 0); //DanceExp
			Write32(pPlayerDBBaseInfo, 0); //Coupons
			Write32(pPlayerDBBaseInfo, 0); //Admiration
			Write32(pPlayerDBBaseInfo, 0); //LuckMoney
			Write32(pPlayerDBBaseInfo, 0); //TeamWorkExp
			Write32(pPlayerDBBaseInfo, 0); //AchievePoint
			Write32(pPlayerDBBaseInfo, 0); //RegTime
			WriteString(pPlayerDBBaseInfo, 0); //Signature[]
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchPoint
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchNum
			Write16(pPlayerDBBaseInfo, 0); //LuckyMatchFirstNum
			Write8(pPlayerDBBaseInfo, 0); //LuckyMatchBestRand
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchWinNum
			Write32(pPlayerDBBaseInfo, 0); //FizzPointTotal
			Write16(pPlayerDBBaseInfo, 0); //FizzPointDaily
			Write16(pPlayerDBBaseInfo, 0); //FizzPointWeekly
			Write16(pPlayerDBBaseInfo, 0); //FizzPointLastWeek
			Write8(pPlayerDBBaseInfo, 0); //FizzLotteryStatus
			Write32(pPlayerDBBaseInfo, 0); //FizzLastUpdateTime
			Write32(pPlayerDBBaseInfo, 0); //SNSLocaleCode
			Write32(pPlayerDBBaseInfo, 0); //AuctionRightUnlockTime
			Write8(pPlayerDBBaseInfo, 0); //ReserveFlag
			Write32(pPlayerDBBaseInfo, 0); //CurConsumeScore
			Write32(pPlayerDBBaseInfo, 0); //HistoryConsumeScore
			Write8(pPlayerDBBaseInfo, 0); //CrashModeSponsorID
			Write32(pPlayerDBBaseInfo, 0); //Popularity
			Write32(pPlayerDBBaseInfo, 0); //LadderMatchAchievePoint
			Write32(pPlayerDBBaseInfo, 0); //Cash
			Write32(pPlayerDBBaseInfo, 0); //PlayerGPMIdentity
			Write32(pPlayerDBBaseInfo, 0); //PointTotalScore
			WriteUn(pPlayerDBBaseInfo, 0); //totalMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //lastMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalSeasonId
			WriteUn(pPlayerDBBaseInfo, 0); //lastClearMapMedalTime

			len = pPlayerDBBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //PlayerGuildInfo
			BYTE* pPlayerGuildInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerGuildInfo, 0); //len

			WriteString(pPlayerGuildInfo, 0); //GuildName[]
			Write16(pPlayerGuildInfo, 0); //Duty
			Write32(pPlayerGuildInfo, 0); //GuildID
			Write32(pPlayerGuildInfo, 0); //Right
			Write32(pPlayerGuildInfo, 0); //Medal
			Write32(pPlayerGuildInfo, 0); //Contribute
			WriteString(pPlayerGuildInfo, 0); //DutyTitle[]

			len = pPlayerGuildInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write16(pPlayerRoomVisibleInfo, 0); //EquipedItemNum
		for (size_t i = 0; i < n; i++)
		{ //PlayerItemInfo
			BYTE* pPlayerItemInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerItemInfo, 0); //len

			Write32(pPlayerItemInfo, 0); //ItemID
			Write32(pPlayerItemInfo, 0); //ItemNum
			Write32(pPlayerItemInfo, 0); //AvailPeriod
			Write8(pPlayerItemInfo, 0); //Status
			WriteUn(pPlayerItemInfo, 0); //ObtainTime
			Write32(pPlayerItemInfo, 0); //OtherAttribute

			len = pPlayerItemInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write16(pPlayerRoomVisibleInfo, 0); //PetNum
		for (size_t i = 0; i < n; i++)
		{ //PetInfo
			BYTE* pPetInfo = pPlayerRoomVisibleInfo;
			Write16(pPetInfo, 0); //len

			Write32(pPetInfo, 0); //Uin
			Write32(pPetInfo, 0); //PetId
			WriteString(pPetInfo, 0); //PetName[]
			Write8(pPetInfo, 0); //IsProper
			Write16(pPetInfo, 0); //Level
			Write8(pPetInfo, 0); //Status
			Write16(pPetInfo, 0); //PetSkillNum
			for (size_t i = 0; i < n; i++)
			{ //PetSkillList
				BYTE* pPetSkillList = pPetInfo;
				Write16(pPetSkillList, 0); //len

				Write16(pPetSkillList, 0); //SkillID
				Write8(pPetSkillList, 0); //Status
				Write8(pPetSkillList, 0); //Active
				Write32(pPetSkillList, 0); //Value

				len = pPetSkillList - pPetInfo;
				Set16(pPetInfo, (WORD)len);
				pPetInfo += len;
			}
			Write32(pPetInfo, 0); //StrengLevel

			len = pPetInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //PlayerGuildMatchInfo
			BYTE* pPlayerGuildMatchInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerGuildMatchInfo, 0); //len

			Write32(pPlayerGuildMatchInfo, 0); //SelfPoint
			Write32(pPlayerGuildMatchInfo, 0); //WinNum
			Write32(pPlayerGuildMatchInfo, 0); //TotalNum

			len = pPlayerGuildMatchInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //IsInTopList
		Write8(pPlayerRoomVisibleInfo, 0); //LoverRaceOrPro
		Write8(pPlayerRoomVisibleInfo, 0); //TmpEffectNum
		Write32(pPlayerRoomVisibleInfo, 0); //TmpEffectItems[]
		Write8(pPlayerRoomVisibleInfo, 0); //OBState
		Write8(pPlayerRoomVisibleInfo, 0); //DebutOrX5
		Write8(pPlayerRoomVisibleInfo, 0); //RandKeyFlag
		WriteUn(pPlayerRoomVisibleInfo, 0); //VipFlag
		Write8(pPlayerRoomVisibleInfo, 0); //HaveAppellation
		for (size_t i = 0; i < n; i++)
		{ //CurAppellation
			BYTE* pCurAppellation = pPlayerRoomVisibleInfo;
			Write16(pCurAppellation, 0); //len

			Write8(pCurAppellation, 0); //Type
			Write8(pCurAppellation, 0); //Level
			Write8(pCurAppellation, 0); //Status
			Write8(pCurAppellation, 0); //Difficulty
			Write32(pCurAppellation, 0); //MapId
			Write32(pCurAppellation, 0); //Value

			len = pCurAppellation - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //NobleInfo
			BYTE* pNobleInfo = pPlayerRoomVisibleInfo;
			Write16(pNobleInfo, 0); //len

			Write32(pNobleInfo, 0); //NobleID
			Write8(pNobleInfo, 0); //NobleLevel
			Write32(pNobleInfo, 0); //NoblePoint
			Write32(pNobleInfo, 0); //NobleLeftDays

			len = pNobleInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasCarryWizard
		for (size_t i = 0; i < n; i++)
		{ //CarryWizardInfo
			BYTE* pCarryWizardInfo = pPlayerRoomVisibleInfo;
			Write16(pCarryWizardInfo, 0); //len

			Write16(pCarryWizardInfo, 0); //WizardID
			WriteString(pCarryWizardInfo, 0); //Nickname[]
			Write16(pCarryWizardInfo, 0); //WizardType
			Write8(pCarryWizardInfo, 0); //Order
			Write8(pCarryWizardInfo, 0); //EvolutionBranch
			Write8(pCarryWizardInfo, 0); //IsHuanHua

			len = pCarryWizardInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //GuildVipBaseInfo
			BYTE* pGuildVipBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pGuildVipBaseInfo, 0); //len

			Write8(pGuildVipBaseInfo, 0); //GuildVipLevel
			Write32(pGuildVipBaseInfo, 0); //GuildVipPoint

			len = pGuildVipBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write32(pPlayerRoomVisibleInfo, 0); //ExFlag
		Write8(pPlayerRoomVisibleInfo, 0); //HaveLDMBaseInfo
		for (size_t i = 0; i < n; i++)
		{ //PlayerLDMBaseInfo
			BYTE* pPlayerLDMBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerLDMBaseInfo, 0); //len

			Write8(pPlayerLDMBaseInfo, 0); //Grade
			Write32(pPlayerLDMBaseInfo, 0); //Score
			Write32(pPlayerLDMBaseInfo, 0); //MaxScore
			Write32(pPlayerLDMBaseInfo, 0); //MaxGrade

			len = pPlayerLDMBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasWl
		for (size_t i = 0; i < n; i++)
		{ //PlayerWlVisibleInfo
			BYTE* pPlayerWlVisibleInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerWlVisibleInfo, 0); //len

			Write32(pPlayerWlVisibleInfo, 0); //WonderLandID
			WriteString(pPlayerWlVisibleInfo, 0); //WonderLandName[]
			Write16(pPlayerWlVisibleInfo, 0); //WonderLandDuty
			Write8(pPlayerWlVisibleInfo, 0); //SubType
			Write8(pPlayerWlVisibleInfo, 0); //GuildGrade

			len = pPlayerWlVisibleInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasLoverVip
		for (size_t i = 0; i < n; i++)
		{ //LoverVipInfo
			BYTE* pLoverVipInfo = pPlayerRoomVisibleInfo;
			Write16(pLoverVipInfo, 0); //len

			Write8(pLoverVipInfo, 0); //LoverVipLevel
			Write32(pLoverVipInfo, 0); //LoverVipPoint
			Write8(pLoverVipInfo, 0); //GrowRate

			len = pLoverVipInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasBattleModeSkillInfoList
		for (size_t i = 0; i < n; i++)
		{ //BattleModeSkillInfoList
			BYTE* pBattleModeSkillInfoList = pPlayerRoomVisibleInfo;
			Write16(pBattleModeSkillInfoList, 0); //len

			Write8(pBattleModeSkillInfoList, 0); //SkillNum
			for (size_t i = 0; i < n; i++)
			{ //SkillInfo
				BYTE* pSkillInfo = pBattleModeSkillInfoList;
				Write16(pSkillInfo, 0); //len

				Write16(pSkillInfo, 0); //SkillId
				Write8(pSkillInfo, 0); //SkillLevel

				len = pSkillInfo - pBattleModeSkillInfoList;
				Set16(pBattleModeSkillInfoList, (WORD)len);
				pBattleModeSkillInfoList += len;
			}

			len = pBattleModeSkillInfoList - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}

		len = pPlayerRoomVisibleInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen
	Write8(p, 0); //PlayerCount2
	for (size_t i = 0; i < n; i++)
	{ //PlayerRelationInfo
		BYTE* pPlayerRelationInfo = p;
		Write16(pPlayerRelationInfo, 0); //len

		Write32(pPlayerRelationInfo, 0); //SrcUin
		Write32(pPlayerRelationInfo, 0); //RelationFlag
		Write32(pPlayerRelationInfo, 0); //RelationUin
		WriteString(pPlayerRelationInfo, 0); //RelationNickname[]
		Write32(pPlayerRelationInfo, 0); //EngageTime
		Write32(pPlayerRelationInfo, 0); //NextCanBookingTimeLimit
		Write32(pPlayerRelationInfo, 0); //BeginHoneyMoonTime
		Write32(pPlayerRelationInfo, 0); //EndHoneyMoonTime
		Write8(pPlayerRelationInfo, 0); //EngageFlag

		len = pPlayerRelationInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //KartNum
	for (size_t i = 0; i < n; i++)
	{ //KartRefitInfo
		BYTE* pKartRefitInfo = p;
		Write16(pKartRefitInfo, 0); //len

		Write32(pKartRefitInfo, 0); //Uin
		Write32(pKartRefitInfo, 0); //KartId
		Write32(pKartRefitInfo, 0); //RefitCout
		Write16(pKartRefitInfo, 0); //MaxFlags
		Write16(pKartRefitInfo, 0); //WWeight
		Write16(pKartRefitInfo, 0); //SpeedWeight
		Write16(pKartRefitInfo, 0); //JetWeight
		Write16(pKartRefitInfo, 0); //SJetWeight
		Write16(pKartRefitInfo, 0); //AccuWeight
		Write32(pKartRefitInfo, 0); //ShapeRefitCount
		Write32(pKartRefitInfo, 0); //KartHeadRefitItemID
		Write32(pKartRefitInfo, 0); //KartTailRefitItemID
		Write32(pKartRefitInfo, 0); //KartFlankRefitItemID
		Write32(pKartRefitInfo, 0); //KartTireRefitItemID

		len = pKartRefitInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //LoverRaceOrPro
	{ //STDynamicInfo
		BYTE* pSTDynamicInfo = p;
		Write16(pSTDynamicInfo, 0); //len

		Write8(pSTDynamicInfo, 0); //Season
		Write8(pSTDynamicInfo, 0); //Timeslot
		Write8(pSTDynamicInfo, 0); //Weather

		len = pSTDynamicInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //PreKnowMapID
	Write8(p, 0); //HasMoreInfo
	Write32(p, 0); //MapSubID
	Write8(p, 0); //HasFBInfo
	for (size_t i = 0; i < n; i++)
	{ //FBInfo
		BYTE* pFBInfo = p;
		Write16(pFBInfo, 0); //len

		Write8(pFBInfo, 0); //AvailableLev
		Write8(pFBInfo, 0); //Lev
		Write8(pFBInfo, 0); //SubLev
		Write32(pFBInfo, 0); //BossID
		Write8(pFBInfo, 0); //FBSeason

		len = pFBInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //GuildScoreInNextGame
	Write16(p, 0); //GuildScoreAlreadyAward
	Write16(p, 0); //GuildScoreTotalAward

	len = p - buf;
	SendToClient(Client, 104, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestUseBattleCard(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR CardType = Read8(p);

}

void ResponseUseBattleCard(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //CardType
	Write8(p, 0); //NPCCardType
	Write8(p, 0); //BattleResult
	Write8(p, 0); //PreLvl
	Write8(p, 0); //CurLvl
	Write8(p, 0); //HasAward
	for (size_t i = 0; i < n; i++)
	{ //Award
		BYTE* pAward = p;
		Write16(pAward, 0); //len

		Write32(pAward, 0); //Exp
		Write32(pAward, 0); //Money
		Write32(pAward, 0); //SuperMoney
		Write16(pAward, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAward;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute

			len = pItemInfo - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write32(pAward, 0); //Coupons
		Write32(pAward, 0); //GuildPoint
		Write32(pAward, 0); //LuckMoney

		len = pAward - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetBattleCardLevel(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetBattleCardLevel(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //BattleCardItemID[]
	Write8(p, 0); //BossCardFlag[]
	for (size_t i = 0; i < n; i++)
	{ //AwardInfo
		BYTE* pAwardInfo = p;
		Write16(pAwardInfo, 0); //len

		Write8(pAwardInfo, 0); //Len
		Write8(pAwardInfo, 0); //ItemNum
		Write32(pAwardInfo, 0); //ItemID[]

		len = pAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //CurLvl

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetLottoryCommodityInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetLottoryCommodityInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	{ //Info
		BYTE* pInfo = p;
		Write16(pInfo, 0); //len

		Write8(pInfo, 0); //Type
		{ //Award
			BYTE* pAward = pInfo;
			Write16(pAward, 0); //len

			Write32(pAward, 0); //Exp
			Write32(pAward, 0); //Money
			Write32(pAward, 0); //SuperMoney
			Write16(pAward, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAward;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute

				len = pItemInfo - pAward;
				Set16(pAward, (WORD)len);
				pAward += len;
			}
			Write32(pAward, 0); //Coupons
			Write32(pAward, 0); //GuildPoint
			Write32(pAward, 0); //LuckMoney

			len = pAward - pInfo;
			Set16(pInfo, (WORD)len);
			pInfo += len;
		}
		Write16(pInfo, 0); //RemainTime

		len = pInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //BCNum
	for (size_t i = 0; i < n; i++)
	{ //BC
		BYTE* pBC = p;
		Write16(pBC, 0); //len

		Write16(pBC, 0); //ContentLen

		len = pBC - p;
		Set16(p, (WORD)len);
		p += len;
	}
	for (size_t i = 0; i < n; i++)
	{ //AwardInfo
		BYTE* pAwardInfo = p;
		Write16(pAwardInfo, 0); //len

		Write32(pAwardInfo, 0); //Exp
		Write32(pAwardInfo, 0); //Money
		Write32(pAwardInfo, 0); //SuperMoney
		Write16(pAwardInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAwardInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute

			len = pItemInfo - pAwardInfo;
			Set16(pAwardInfo, (WORD)len);
			pAwardInfo += len;
		}
		Write32(pAwardInfo, 0); //Coupons
		Write32(pAwardInfo, 0); //GuildPoint
		Write32(pAwardInfo, 0); //LuckMoney

		len = pAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestRandLottoryCommodity(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR Type = Read8(p);

}

void ResponseRandLottoryCommodity(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	{ //Info
		BYTE* pInfo = p;
		Write16(pInfo, 0); //len

		Write8(pInfo, 0); //Type
		{ //Award
			BYTE* pAward = pInfo;
			Write16(pAward, 0); //len

			Write32(pAward, 0); //Exp
			Write32(pAward, 0); //Money
			Write32(pAward, 0); //SuperMoney
			Write16(pAward, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAward;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute

				len = pItemInfo - pAward;
				Set16(pAward, (WORD)len);
				pAward += len;
			}
			Write32(pAward, 0); //Coupons
			Write32(pAward, 0); //GuildPoint
			Write32(pAward, 0); //LuckMoney

			len = pAward - pInfo;
			Set16(pInfo, (WORD)len);
			pInfo += len;
		}
		Write16(pInfo, 0); //RemainTime

		len = pInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestBuyLottoryCommodity(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseBuyLottoryCommodity(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //HasAward
	for (size_t i = 0; i < n; i++)
	{ //AwardInfo
		BYTE* pAwardInfo = p;
		Write16(pAwardInfo, 0); //len

		Write32(pAwardInfo, 0); //Exp
		Write32(pAwardInfo, 0); //Money
		Write32(pAwardInfo, 0); //SuperMoney
		Write16(pAwardInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAwardInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute

			len = pItemInfo - pAwardInfo;
			Set16(pAwardInfo, (WORD)len);
			pAwardInfo += len;
		}
		Write32(pAwardInfo, 0); //Coupons
		Write32(pAwardInfo, 0); //GuildPoint
		Write32(pAwardInfo, 0); //LuckMoney

		len = pAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //Type

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyCrashModeBeginRoll(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //EggNum
	Write8(p, 0); //OpenFlag
	for (size_t i = 0; i < n; i++)
	{ //AwardInfo
		BYTE* pAwardInfo = p;
		Write16(pAwardInfo, 0); //len

		Write32(pAwardInfo, 0); //Exp
		Write32(pAwardInfo, 0); //Money
		Write32(pAwardInfo, 0); //SuperMoney
		Write16(pAwardInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAwardInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute

			len = pItemInfo - pAwardInfo;
			Set16(pAwardInfo, (WORD)len);
			pAwardInfo += len;
		}
		Write32(pAwardInfo, 0); //Coupons
		Write32(pAwardInfo, 0); //GuildPoint
		Write32(pAwardInfo, 0); //LuckMoney

		len = pAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyCrashModeEndRoll(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	for (size_t i = 0; i < n; i++)
	{ //DisplayAward
		BYTE* pDisplayAward = p;
		Write16(pDisplayAward, 0); //len

		for (size_t i = 0; i < n; i++)
		{ //AwardItem
			BYTE* pAwardItem = pDisplayAward;
			Write16(pAwardItem, 0); //len

			Write32(pAwardItem, 0); //Exp
			Write32(pAwardItem, 0); //Money
			Write32(pAwardItem, 0); //SuperMoney
			Write16(pAwardItem, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAwardItem;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute

				len = pItemInfo - pAwardItem;
				Set16(pAwardItem, (WORD)len);
				pAwardItem += len;
			}
			Write32(pAwardItem, 0); //Coupons
			Write32(pAwardItem, 0); //GuildPoint
			Write32(pAwardItem, 0); //LuckMoney

			len = pAwardItem - pDisplayAward;
			Set16(pDisplayAward, (WORD)len);
			pDisplayAward += len;
		}

		len = pDisplayAward - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestCrashModeRollAward(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR RollType = Read8(p);
	UCHAR RollPos = Read8(p);

}

void ResponseCrashModeRollAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //RollType
	Write8(p, 0); //RollPos
	Write8(p, 0); //HasAward
	for (size_t i = 0; i < n; i++)
	{ //Award
		BYTE* pAward = p;
		Write16(pAward, 0); //len

		Write32(pAward, 0); //Exp
		Write32(pAward, 0); //Money
		Write32(pAward, 0); //SuperMoney
		Write16(pAward, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAward;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute

			len = pItemInfo - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write32(pAward, 0); //Coupons
		Write32(pAward, 0); //GuildPoint
		Write32(pAward, 0); //LuckMoney

		len = pAward - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GGetPlayerLoverMatchInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseC2GGetPlayerLoverMatchInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //LeftLotteryCount
	Write16(p, 0); //Score

	len = p - buf;
	SendToClient(Client, 11310, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GInviteTeamMate(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT DstUin = Read32(p);
	bool InviteType = Read8(p);

}

void ResponseC2GInviteTeamMate(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //DstUin
	Write8(p, 0); //ReasonLen
	Write8(p, 0); //InviteType

	len = p - buf;
	SendToClient(Client, 11312, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyG2CInviteTeamMateResult(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen
	Write8(p, 0); //InviteType

	len = p - buf;
	SendToClient(Client, 11313, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyG2CBeInviteTeamMate(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //SrcUin
	WriteString(p, 0); //SrcNickName[]
	Write8(p, 0); //InviteType

	len = p - buf;
	SendToClient(Client, 11314, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void AckG2CBeInviteTeamMate(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	short ResultID = Read16(p);
	UINT SrcUin = Read32(p);
	UINT DstUin = Read32(p);
	bool InviteType = Read8(p);

}

void NotifyG2CTimeOutAckBeInviteTeamMate(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //InviteType

	len = p - buf;
	SendToClient(Client, 11315, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyG2CAllocLoveMatchServer(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //TeamMateUin
	Write8(p, 0); //HasLMServer
	for (size_t i = 0; i < n; i++)
	{ //LMServer
		BYTE* pLMServer = p;
		Write16(pLMServer, 0); //len

		Write16(pLMServer, 0); //SvrID
		WriteU(pLMServer, 0); //ExtenalIP
		Write8(pLMServer, 0); //ExtTcpPortNum
		Write16(pLMServer, 0); //ExternalTcpPort[]
		Write8(pLMServer, 0); //ExtUdpPortNum
		Write16(pLMServer, 0); //ExternalUdpPort[]

		len = pLMServer - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11319, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestC2GMatchTeamMate(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT DressPoint = Read16(p);

}

void ResponseC2GMatchTeamMate(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //ExpectedTime[]

	len = p - buf;
	SendToClient(Client, 11316, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyG2CMatchTeamMateResult(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 11317, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestC2GCancelMatchTeamMate(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void RequestGetLoverMatchInviteList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	bool DestGender = Read8(p);

}

void ResponseGetLoverMatchInviteList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //PlayerNum
	for (size_t i = 0; i < n; i++)
	{ //InvitePlayerBaseInfo
		BYTE* pInvitePlayerBaseInfo = p;
		Write16(pInvitePlayerBaseInfo, 0); //len

		WriteUn(pInvitePlayerBaseInfo, 0); //Uin
		WriteString(pInvitePlayerBaseInfo, 0); //Nickname[]
		Write8(pInvitePlayerBaseInfo, 0); //Gender
		WriteUn(pInvitePlayerBaseInfo, 0); //Identity
		WriteUn(pInvitePlayerBaseInfo, 0); //Experience
		Write32(pInvitePlayerBaseInfo, 0); //License
		Write32(pInvitePlayerBaseInfo, 0); //TotalHonor
		Write32(pInvitePlayerBaseInfo, 0); //Charm
		Write32(pInvitePlayerBaseInfo, 0); //DanceExp
		Write32(pInvitePlayerBaseInfo, 0); //Admiration
		Write32(pInvitePlayerBaseInfo, 0); //TeamWorkExp

		len = pInvitePlayerBaseInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 11320, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2LMEnterLoveMatchServer(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT TeamMateUin = Read32(p);
	UCHAR TeamMateType = Read8(p);

}

void ResponseC2LMEnterLoveMatchServer(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //TeamMateType

	len = p - buf;
	SendToClient(Client, 11326, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2LMMatchRival(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseC2LMMatchRival(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //ExpectedTime

	len = p - buf;
	SendToClient(Client, 11327, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyLM2CMatchRival(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //ExpectedTime

	len = p - buf;
	SendToClient(Client, 11328, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestC2LMCancelMatchRival(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseC2LMCancelMatchRival(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 11329, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyLM2CCancelMatchRival(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 11330, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyLM2CMatchRivalResult(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 11331, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyLM2CLoveMatchPlayerInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //PlayerCount
	for (size_t i = 0; i < n; i++)
	{ //PlayerRoomVisibleInfo
		BYTE* pPlayerRoomVisibleInfo = p;
		Write16(pPlayerRoomVisibleInfo, 0); //len

		WriteUn(pPlayerRoomVisibleInfo, 0); //Uin
		WriteUn(pPlayerRoomVisibleInfo, 0); //Identity
		Write8(pPlayerRoomVisibleInfo, 0); //SeatID
		Write8(pPlayerRoomVisibleInfo, 0); //TeamID
		Write16(pPlayerRoomVisibleInfo, 0); //PlayerID
		Write8(pPlayerRoomVisibleInfo, 0); //Status
		{ //PlayerDBBaseInfo
			BYTE* pPlayerDBBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerDBBaseInfo, 0); //len

			WriteString(pPlayerDBBaseInfo, 0); //Nickname[]
			Write8(pPlayerDBBaseInfo, 0); //Gender
			Write8(pPlayerDBBaseInfo, 0); //Country
			Write32(pPlayerDBBaseInfo, 0); //License
			WriteUn(pPlayerDBBaseInfo, 0); //Experience
			Write32(pPlayerDBBaseInfo, 0); //SuperMoney
			Write32(pPlayerDBBaseInfo, 0); //Money
			WriteUn(pPlayerDBBaseInfo, 0); //WinNum
			Write32(pPlayerDBBaseInfo, 0); //SecondNum
			Write32(pPlayerDBBaseInfo, 0); //ThirdNum
			WriteUn(pPlayerDBBaseInfo, 0); //TotalNum
			Write32(pPlayerDBBaseInfo, 0); //CurHonor
			Write32(pPlayerDBBaseInfo, 0); //TotalHonor
			Write32(pPlayerDBBaseInfo, 0); //TodayHonor
			Write32(pPlayerDBBaseInfo, 0); //RelaxTime
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationBefore
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationCur
			Write32(pPlayerDBBaseInfo, 0); //Charm
			Write32(pPlayerDBBaseInfo, 0); //DurationGame
			Write32(pPlayerDBBaseInfo, 0); //DanceExp
			Write32(pPlayerDBBaseInfo, 0); //Coupons
			Write32(pPlayerDBBaseInfo, 0); //Admiration
			Write32(pPlayerDBBaseInfo, 0); //LuckMoney
			Write32(pPlayerDBBaseInfo, 0); //TeamWorkExp
			Write32(pPlayerDBBaseInfo, 0); //AchievePoint
			Write32(pPlayerDBBaseInfo, 0); //RegTime
			WriteString(pPlayerDBBaseInfo, 0); //Signature[]
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchPoint
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchNum
			Write16(pPlayerDBBaseInfo, 0); //LuckyMatchFirstNum
			Write8(pPlayerDBBaseInfo, 0); //LuckyMatchBestRand
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchWinNum
			Write32(pPlayerDBBaseInfo, 0); //FizzPointTotal
			Write16(pPlayerDBBaseInfo, 0); //FizzPointDaily
			Write16(pPlayerDBBaseInfo, 0); //FizzPointWeekly
			Write16(pPlayerDBBaseInfo, 0); //FizzPointLastWeek
			Write8(pPlayerDBBaseInfo, 0); //FizzLotteryStatus
			Write32(pPlayerDBBaseInfo, 0); //FizzLastUpdateTime
			Write32(pPlayerDBBaseInfo, 0); //SNSLocaleCode
			Write32(pPlayerDBBaseInfo, 0); //AuctionRightUnlockTime
			Write8(pPlayerDBBaseInfo, 0); //ReserveFlag
			Write32(pPlayerDBBaseInfo, 0); //CurConsumeScore
			Write32(pPlayerDBBaseInfo, 0); //HistoryConsumeScore
			Write8(pPlayerDBBaseInfo, 0); //CrashModeSponsorID
			Write32(pPlayerDBBaseInfo, 0); //Popularity
			Write32(pPlayerDBBaseInfo, 0); //LadderMatchAchievePoint
			Write32(pPlayerDBBaseInfo, 0); //Cash
			Write32(pPlayerDBBaseInfo, 0); //PlayerGPMIdentity
			Write32(pPlayerDBBaseInfo, 0); //PointTotalScore
			WriteUn(pPlayerDBBaseInfo, 0); //totalMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //lastMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalSeasonId
			WriteUn(pPlayerDBBaseInfo, 0); //lastClearMapMedalTime

			len = pPlayerDBBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //PlayerGuildInfo
			BYTE* pPlayerGuildInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerGuildInfo, 0); //len

			WriteString(pPlayerGuildInfo, 0); //GuildName[]
			Write16(pPlayerGuildInfo, 0); //Duty
			Write32(pPlayerGuildInfo, 0); //GuildID
			Write32(pPlayerGuildInfo, 0); //Right
			Write32(pPlayerGuildInfo, 0); //Medal
			Write32(pPlayerGuildInfo, 0); //Contribute
			WriteString(pPlayerGuildInfo, 0); //DutyTitle[]

			len = pPlayerGuildInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write16(pPlayerRoomVisibleInfo, 0); //EquipedItemNum
		for (size_t i = 0; i < n; i++)
		{ //PlayerItemInfo
			BYTE* pPlayerItemInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerItemInfo, 0); //len

			Write32(pPlayerItemInfo, 0); //ItemID
			Write32(pPlayerItemInfo, 0); //ItemNum
			Write32(pPlayerItemInfo, 0); //AvailPeriod
			Write8(pPlayerItemInfo, 0); //Status
			WriteUn(pPlayerItemInfo, 0); //ObtainTime
			Write32(pPlayerItemInfo, 0); //OtherAttribute

			len = pPlayerItemInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write16(pPlayerRoomVisibleInfo, 0); //PetNum
		for (size_t i = 0; i < n; i++)
		{ //PetInfo
			BYTE* pPetInfo = pPlayerRoomVisibleInfo;
			Write16(pPetInfo, 0); //len

			Write32(pPetInfo, 0); //Uin
			Write32(pPetInfo, 0); //PetId
			WriteString(pPetInfo, 0); //PetName[]
			Write8(pPetInfo, 0); //IsProper
			Write16(pPetInfo, 0); //Level
			Write8(pPetInfo, 0); //Status
			Write16(pPetInfo, 0); //PetSkillNum
			for (size_t i = 0; i < n; i++)
			{ //PetSkillList
				BYTE* pPetSkillList = pPetInfo;
				Write16(pPetSkillList, 0); //len

				Write16(pPetSkillList, 0); //SkillID
				Write8(pPetSkillList, 0); //Status
				Write8(pPetSkillList, 0); //Active
				Write32(pPetSkillList, 0); //Value

				len = pPetSkillList - pPetInfo;
				Set16(pPetInfo, (WORD)len);
				pPetInfo += len;
			}
			Write32(pPetInfo, 0); //StrengLevel

			len = pPetInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //PlayerGuildMatchInfo
			BYTE* pPlayerGuildMatchInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerGuildMatchInfo, 0); //len

			Write32(pPlayerGuildMatchInfo, 0); //SelfPoint
			Write32(pPlayerGuildMatchInfo, 0); //WinNum
			Write32(pPlayerGuildMatchInfo, 0); //TotalNum

			len = pPlayerGuildMatchInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //IsInTopList
		Write8(pPlayerRoomVisibleInfo, 0); //LoverRaceOrPro
		Write8(pPlayerRoomVisibleInfo, 0); //TmpEffectNum
		Write32(pPlayerRoomVisibleInfo, 0); //TmpEffectItems[]
		Write8(pPlayerRoomVisibleInfo, 0); //OBState
		Write8(pPlayerRoomVisibleInfo, 0); //DebutOrX5
		Write8(pPlayerRoomVisibleInfo, 0); //RandKeyFlag
		WriteUn(pPlayerRoomVisibleInfo, 0); //VipFlag
		Write8(pPlayerRoomVisibleInfo, 0); //HaveAppellation
		for (size_t i = 0; i < n; i++)
		{ //CurAppellation
			BYTE* pCurAppellation = pPlayerRoomVisibleInfo;
			Write16(pCurAppellation, 0); //len

			Write8(pCurAppellation, 0); //Type
			Write8(pCurAppellation, 0); //Level
			Write8(pCurAppellation, 0); //Status
			Write8(pCurAppellation, 0); //Difficulty
			Write32(pCurAppellation, 0); //MapId
			Write32(pCurAppellation, 0); //Value

			len = pCurAppellation - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //NobleInfo
			BYTE* pNobleInfo = pPlayerRoomVisibleInfo;
			Write16(pNobleInfo, 0); //len

			Write32(pNobleInfo, 0); //NobleID
			Write8(pNobleInfo, 0); //NobleLevel
			Write32(pNobleInfo, 0); //NoblePoint
			Write32(pNobleInfo, 0); //NobleLeftDays

			len = pNobleInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasCarryWizard
		for (size_t i = 0; i < n; i++)
		{ //CarryWizardInfo
			BYTE* pCarryWizardInfo = pPlayerRoomVisibleInfo;
			Write16(pCarryWizardInfo, 0); //len

			Write16(pCarryWizardInfo, 0); //WizardID
			WriteString(pCarryWizardInfo, 0); //Nickname[]
			Write16(pCarryWizardInfo, 0); //WizardType
			Write8(pCarryWizardInfo, 0); //Order
			Write8(pCarryWizardInfo, 0); //EvolutionBranch
			Write8(pCarryWizardInfo, 0); //IsHuanHua

			len = pCarryWizardInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //GuildVipBaseInfo
			BYTE* pGuildVipBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pGuildVipBaseInfo, 0); //len

			Write8(pGuildVipBaseInfo, 0); //GuildVipLevel
			Write32(pGuildVipBaseInfo, 0); //GuildVipPoint

			len = pGuildVipBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write32(pPlayerRoomVisibleInfo, 0); //ExFlag
		Write8(pPlayerRoomVisibleInfo, 0); //HaveLDMBaseInfo
		for (size_t i = 0; i < n; i++)
		{ //PlayerLDMBaseInfo
			BYTE* pPlayerLDMBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerLDMBaseInfo, 0); //len

			Write8(pPlayerLDMBaseInfo, 0); //Grade
			Write32(pPlayerLDMBaseInfo, 0); //Score
			Write32(pPlayerLDMBaseInfo, 0); //MaxScore
			Write32(pPlayerLDMBaseInfo, 0); //MaxGrade

			len = pPlayerLDMBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasWl
		for (size_t i = 0; i < n; i++)
		{ //PlayerWlVisibleInfo
			BYTE* pPlayerWlVisibleInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerWlVisibleInfo, 0); //len

			Write32(pPlayerWlVisibleInfo, 0); //WonderLandID
			WriteString(pPlayerWlVisibleInfo, 0); //WonderLandName[]
			Write16(pPlayerWlVisibleInfo, 0); //WonderLandDuty
			Write8(pPlayerWlVisibleInfo, 0); //SubType
			Write8(pPlayerWlVisibleInfo, 0); //GuildGrade

			len = pPlayerWlVisibleInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasLoverVip
		for (size_t i = 0; i < n; i++)
		{ //LoverVipInfo
			BYTE* pLoverVipInfo = pPlayerRoomVisibleInfo;
			Write16(pLoverVipInfo, 0); //len

			Write8(pLoverVipInfo, 0); //LoverVipLevel
			Write32(pLoverVipInfo, 0); //LoverVipPoint
			Write8(pLoverVipInfo, 0); //GrowRate

			len = pLoverVipInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasBattleModeSkillInfoList
		for (size_t i = 0; i < n; i++)
		{ //BattleModeSkillInfoList
			BYTE* pBattleModeSkillInfoList = pPlayerRoomVisibleInfo;
			Write16(pBattleModeSkillInfoList, 0); //len

			Write8(pBattleModeSkillInfoList, 0); //SkillNum
			for (size_t i = 0; i < n; i++)
			{ //SkillInfo
				BYTE* pSkillInfo = pBattleModeSkillInfoList;
				Write16(pSkillInfo, 0); //len

				Write16(pSkillInfo, 0); //SkillId
				Write8(pSkillInfo, 0); //SkillLevel

				len = pSkillInfo - pBattleModeSkillInfoList;
				Set16(pBattleModeSkillInfoList, (WORD)len);
				pBattleModeSkillInfoList += len;
			}

			len = pBattleModeSkillInfoList - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}

		len = pPlayerRoomVisibleInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //KartNum
	for (size_t i = 0; i < n; i++)
	{ //KartRefitInfo
		BYTE* pKartRefitInfo = p;
		Write16(pKartRefitInfo, 0); //len

		Write32(pKartRefitInfo, 0); //Uin
		Write32(pKartRefitInfo, 0); //KartId
		Write32(pKartRefitInfo, 0); //RefitCout
		Write16(pKartRefitInfo, 0); //MaxFlags
		Write16(pKartRefitInfo, 0); //WWeight
		Write16(pKartRefitInfo, 0); //SpeedWeight
		Write16(pKartRefitInfo, 0); //JetWeight
		Write16(pKartRefitInfo, 0); //SJetWeight
		Write16(pKartRefitInfo, 0); //AccuWeight
		Write32(pKartRefitInfo, 0); //ShapeRefitCount
		Write32(pKartRefitInfo, 0); //KartHeadRefitItemID
		Write32(pKartRefitInfo, 0); //KartTailRefitItemID
		Write32(pKartRefitInfo, 0); //KartFlankRefitItemID
		Write32(pKartRefitInfo, 0); //KartTireRefitItemID

		len = pKartRefitInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //NoCooperDistance

	len = p - buf;
	SendToClient(Client, 11332, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyLM2CCooperInc(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //Reason
	Write16(p, 0); //CooperInc
	Write16(p, 0); //CurAccuCooper
	Write32(p, 0); //TotalCooper
	Write8(p, 0); //BeTriggerSuperJet
	Write8(p, 0); //SuperJetTime
	Write8(p, 0); //TriggerLoveTimeLimit
	Write32(p, 0); //NoCooperDistance

	len = p - buf;
	SendToClient(Client, 11338, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestC2LMTriggerSuperJet(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseC2LMTriggerSuperJet(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 11339, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyLM2CSuperJet(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //SuperJetTeamMateUin

	len = p - buf;
	SendToClient(Client, 11340, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyLM2CLoveTime(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Time

	len = p - buf;
	SendToClient(Client, 11341, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestC2LMOverSuperJet(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void NotifyLM2CLoveMatchRaceOver(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //CurrentPlayerNum
	for (size_t i = 0; i < n; i++)
	{ //RaceScore
		BYTE* pRaceScore = p;
		Write16(pRaceScore, 0); //len

		WriteUn(pRaceScore, 0); //Uin
		WriteUn(pRaceScore, 0); //FinTime
		Write32(pRaceScore, 0); //TP
		Write32(pRaceScore, 0); //MoneyInc
		Write32(pRaceScore, 0); //TotalMoney
		Write32(pRaceScore, 0); //ExpInc
		Write32(pRaceScore, 0); //TotalExp
		Write8(pRaceScore, 0); //AwardNum
		Write32(pRaceScore, 0); //SpecialAward[]
		Write32(pRaceScore, 0); //LotteryScoreInc
		Write32(pRaceScore, 0); //TotalLotteryScore
		Write32(pRaceScore, 0); //TotalCooper
		Write8(pRaceScore, 0); //EvaluteNum
		for (size_t i = 0; i < n; i++)
		{ //Evalute
			BYTE* pEvalute = pRaceScore;
			Write16(pEvalute, 0); //len

			Write8(pEvalute, 0); //Evaluate
			Write8(pEvalute, 0); //Cnt

			len = pEvalute - pRaceScore;
			Set16(pRaceScore, (WORD)len);
			pRaceScore += len;
		}

		len = pRaceScore - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //WinTeamID
	WriteUn(p, 0); //AwardTime
	{ //TeamResult
		BYTE* pTeamResult = p;
		Write16(pTeamResult, 0); //len

		Write32(pTeamResult, 0); //Accelerate
		Write32(pTeamResult, 0); //SucUseAngle
		Write32(pTeamResult, 0); //SucUseBlueSpeedUp
		Write32(pTeamResult, 0); //SucCooperMissile
		Write32(pTeamResult, 0); //PropPoint
		Write32(pTeamResult, 0); //ContinuousRace

		len = pTeamResult - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11333, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestC2LMReturnLoveMatchRoom(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseC2LMReturnLoveMatchRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 11334, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyLM2CReturnLoveMatchRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //TeamMatchUin
	Write32(p, 0); //RetTimer

	len = p - buf;
	SendToClient(Client, 11335, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestC2LMQuitLoveMatch(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseC2LMQuitLoveMatch(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 11336, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GLoveMatchLottery(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseC2GLoveMatchLottery(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //HasAward
	for (size_t i = 0; i < n; i++)
	{ //Award
		BYTE* pAward = p;
		Write16(pAward, 0); //len

		Write32(pAward, 0); //Exp
		Write32(pAward, 0); //Money
		Write32(pAward, 0); //SuperMoney
		Write16(pAward, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAward;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute

			len = pItemInfo - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write32(pAward, 0); //Coupons
		Write32(pAward, 0); //GuildPoint
		Write32(pAward, 0); //LuckMoney

		len = pAward - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11337, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GGetLoveMatchLotteryBroad(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	U Time = ReadU(p);

}

void ResponseC2GGetLoveMatchLotteryBroad(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //MsgNum
	for (size_t i = 0; i < n; i++)
	{ //Msg
		BYTE* pMsg = p;
		Write16(pMsg, 0); //len

		WriteString(pMsg, 0); //NickName[]
		Write32(pMsg, 0); //ItemID

		len = pMsg - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11343, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GGetLoverMatchCfg(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseC2GGetLoverMatchCfg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //LotteryTimesLimit
	Write16(p, 0); //AwardNum
	Write(p, 0); //AwardId[]
	Write16(p, 0); //StarScore

	len = p - buf;
	SendToClient(Client, 11311, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestQueryIsInLoverMatchTime(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseQueryIsInLoverMatchTime(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 11321, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetAuctionCfg(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT ClientAuctionCfgVersion = Read32(p);
	UINT ClientBulletinVersion = Read32(p);
	UINT ClientAuctionId = Read32(p);

}

void ResponseGetAuctionCfg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //Result
	Write8(p, 0); //HasAuctionCfg
	for (size_t i = 0; i < n; i++)
	{ //AuctionCfg
		BYTE* pAuctionCfg = p;
		Write16(pAuctionCfg, 0); //len

		Write32(pAuctionCfg, 0); //Version
		Write32(pAuctionCfg, 0); //AuctionId
		Write32(pAuctionCfg, 0); //BeginTime
		Write32(pAuctionCfg, 0); //CalcTime
		Write32(pAuctionCfg, 0); //EndTime
		Write8(pAuctionCfg, 0); //CommodityNumber
		for (size_t i = 0; i < n; i++)
		{ //CommodityCfg
			BYTE* pCommodityCfg = pAuctionCfg;
			Write16(pCommodityCfg, 0); //len

			Write32(pCommodityCfg, 0); //ItemId
			Write32(pCommodityCfg, 0); //ItemAvailPeriod
			Write32(pCommodityCfg, 0); //ItemNumber
			Write32(pCommodityCfg, 0); //StartingPrice
			Write32(pCommodityCfg, 0); //IncreasePrice
			Write8(pCommodityCfg, 0); //CommodityId
			Write8(pCommodityCfg, 0); //DescLen

			len = pCommodityCfg - pAuctionCfg;
			Set16(pAuctionCfg, (WORD)len);
			pAuctionCfg += len;
		}
		Write32(pAuctionCfg, 0); //PreviewTime

		len = pAuctionCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasBulletin
	for (size_t i = 0; i < n; i++)
	{ //Bulletin
		BYTE* pBulletin = p;
		Write16(pBulletin, 0); //len

		Write32(pBulletin, 0); //Version
		Write8(pBulletin, 0); //ContentLen

		len = pBulletin - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //LeftTime
	WriteUn(p, 0); //hasBegan

	len = p - buf;
	SendToClient(Client, 11411, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetCurAuctionInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetCurAuctionInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //Result
	Write32(p, 0); //AuctionId
	Write8(p, 0); //AuctionNumber
	for (size_t i = 0; i < n; i++)
	{ //CurAuctionInfo
		BYTE* pCurAuctionInfo = p;
		Write16(pCurAuctionInfo, 0); //len

		Write32(pCurAuctionInfo, 0); //BidUin
		Write32(pCurAuctionInfo, 0); //BidPrice
		Write32(pCurAuctionInfo, 0); //BidNumber
		Write8(pCurAuctionInfo, 0); //CommodityId
		Write8(pCurAuctionInfo, 0); //NameLength

		len = pCurAuctionInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11413, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetParticipateAuction(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetParticipateAuction(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //Result
	Write8(p, 0); //UnPayNumber
	for (size_t i = 0; i < n; i++)
	{ //UnPayCommodity
		BYTE* pUnPayCommodity = p;
		Write16(pUnPayCommodity, 0); //len

		Write32(pUnPayCommodity, 0); //AuctionId
		Write8(pUnPayCommodity, 0); //CommodityId
		Write32(pUnPayCommodity, 0); //BidPrice
		Write32(pUnPayCommodity, 0); //BidTime
		Write32(pUnPayCommodity, 0); //ItemId
		Write32(pUnPayCommodity, 0); //ItemAvailPeriod
		Write32(pUnPayCommodity, 0); //ItemNumber

		len = pUnPayCommodity - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //CurParticipateNumber
	for (size_t i = 0; i < n; i++)
	{ //CurParticipate
		BYTE* pCurParticipate = p;
		Write16(pCurParticipate, 0); //len

		Write32(pCurParticipate, 0); //AuctionId
		Write8(pCurParticipate, 0); //CommodityId

		len = pCurParticipate - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11412, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetAuctionList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT StartSeqId = Read32(p);

}

void ResponseGetAuctionList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //Result
	Write32(p, 0); //AuctionId
	Write16(p, 0); //ListSize
	for (size_t i = 0; i < n; i++)
	{ //HistoryList
		BYTE* pHistoryList = p;
		Write16(pHistoryList, 0); //len

		Write32(pHistoryList, 0); //BidUin
		Write32(pHistoryList, 0); //BidPrice
		Write8(pHistoryList, 0); //CommodityId
		Write8(pHistoryList, 0); //NameLength
		Write32(pHistoryList, 0); //SeqId

		len = pHistoryList - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11414, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestBidAuctionCommodity(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT AuctionId = Read32(p);
	UCHAR CommodityId = Read8(p);
	UINT BidPrice = Read32(p);

}

void ResponseBidAuctionCommodity(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //Result
	Write32(p, 0); //AuctionId
	{ //CurAunctionInfo
		BYTE* pCurAunctionInfo = p;
		Write16(pCurAunctionInfo, 0); //len

		Write32(pCurAunctionInfo, 0); //BidUin
		Write32(pCurAunctionInfo, 0); //BidPrice
		Write32(pCurAunctionInfo, 0); //BidNumber
		Write8(pCurAunctionInfo, 0); //CommodityId
		Write8(pCurAunctionInfo, 0); //NameLength

		len = pCurAunctionInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11415, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyClientBidExceedByOther(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //AuctionId
	{ //AuctionInfo
		BYTE* pAuctionInfo = p;
		Write16(pAuctionInfo, 0); //len

		Write32(pAuctionInfo, 0); //BidUin
		Write32(pAuctionInfo, 0); //BidPrice
		Write32(pAuctionInfo, 0); //BidNumber
		Write8(pAuctionInfo, 0); //CommodityId
		Write8(pAuctionInfo, 0); //NameLength

		len = pAuctionInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11416, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyClientSucessAuction(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	{ //UnpayCommodity
		BYTE* pUnpayCommodity = p;
		Write16(pUnpayCommodity, 0); //len

		Write32(pUnpayCommodity, 0); //AuctionId
		Write8(pUnpayCommodity, 0); //CommodityId
		Write32(pUnpayCommodity, 0); //BidPrice
		Write32(pUnpayCommodity, 0); //BidTime
		Write32(pUnpayCommodity, 0); //ItemId
		Write32(pUnpayCommodity, 0); //ItemAvailPeriod
		Write32(pUnpayCommodity, 0); //ItemNumber

		len = pUnpayCommodity - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11417, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestPayAuctionCommodity(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT AuctionId = Read32(p);
	UCHAR CommodityId = Read8(p);

}

void ResponsePayAuctionCommodity(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //Result
	Write32(p, 0); //AuctionId
	Write8(p, 0); //CommodityId

	len = p - buf;
	SendToClient(Client, 11418, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetSingleAuctionInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT AuctionId = Read32(p);
	UCHAR CommodityId = Read8(p);

}

void ResponseGetSingleAuctionInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //Result
	Write32(p, 0); //AuctionId
	Write8(p, 0); //HasAuctionInfo
	for (size_t i = 0; i < n; i++)
	{ //CurAuctionInfo
		BYTE* pCurAuctionInfo = p;
		Write16(pCurAuctionInfo, 0); //len

		Write32(pCurAuctionInfo, 0); //BidUin
		Write32(pCurAuctionInfo, 0); //BidPrice
		Write32(pCurAuctionInfo, 0); //BidNumber
		Write8(pCurAuctionInfo, 0); //CommodityId
		Write8(pCurAuctionInfo, 0); //NameLength

		len = pCurAuctionInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11419, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyLockedAuctionMoney(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //LockedAuctionMoney

	len = p - buf;
	SendToClient(Client, 11420, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyAuctionEnd(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //AuctionId
	Write8(p, 0); //AuctionNumber
	for (size_t i = 0; i < n; i++)
	{ //CurAuctionInfo
		BYTE* pCurAuctionInfo = p;
		Write16(pCurAuctionInfo, 0); //len

		Write32(pCurAuctionInfo, 0); //BidUin
		Write32(pCurAuctionInfo, 0); //BidPrice
		Write8(pCurAuctionInfo, 0); //CommodityId
		Write32(pCurAuctionInfo, 0); //ItemId
		Write32(pCurAuctionInfo, 0); //ItemAvailPeriod
		Write32(pCurAuctionInfo, 0); //ItemNumber
		Write8(pCurAuctionInfo, 0); //NameLength

		len = pCurAuctionInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasParticipate

	len = p - buf;
	SendToClient(Client, 11446, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestFBChangeLev(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	bool NewLev = Read8(p);

}

void ResponseFBChangeLev(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	{ //FBInfo
		BYTE* pFBInfo = p;
		Write16(pFBInfo, 0); //len

		Write8(pFBInfo, 0); //AvailableLev
		Write8(pFBInfo, 0); //Lev
		Write8(pFBInfo, 0); //SubLev
		Write32(pFBInfo, 0); //BossID
		Write8(pFBInfo, 0); //FBSeason

		len = pFBInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11360, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyFBChangeLev(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	{ //FBInfo
		BYTE* pFBInfo = p;
		Write16(pFBInfo, 0); //len

		Write8(pFBInfo, 0); //AvailableLev
		Write8(pFBInfo, 0); //Lev
		Write8(pFBInfo, 0); //SubLev
		Write32(pFBInfo, 0); //BossID
		Write8(pFBInfo, 0); //FBSeason

		len = pFBInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11361, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyBroadcast(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	{ //BroadcastInfo
		BYTE* pBroadcastInfo = p;
		Write16(pBroadcastInfo, 0); //len

		Write8(pBroadcastInfo, 0); //BCFlag
		Write16(pBroadcastInfo, 0); //ConTime
		Write16(pBroadcastInfo, 0); //ContentLen
		Write32(pBroadcastInfo, 0); //BroadcastType
		Write8(pBroadcastInfo, 0); //DisplayFlag

		len = pBroadcastInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 541, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestOpenBox(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	int TreasureBoxID = Read32(p);
	{ //Key
		BYTE* pKey = p;
		len = Read16(pKey);

		int KeyType = Read32(pKey);
		for (size_t i = 0; i < n; i++)
		{ //KeyEntry
			BYTE* pKeyEntry = pKey;
			len = Read16(pKeyEntry);

			int KeyID = Read32(pKeyEntry);
			int Num = Read32(pKeyEntry);

			pKey += len;
		}
		bool IsNotConsume = Read8(pKey);

		p += len;
	}
	bool SpecialIdx = Read8(p);
	USHORT MutiOpenNum = Read16(p);

}

void RequestSelOptBoxAward(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	int BoxID = Read32(p);
	int SelIdx = Read32(p);

}

void ResponseSelOptBoxAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 616, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifySelOptBoxAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //BoxID
	{ //DBItemInfo
		BYTE* pDBItemInfo = p;
		Write16(pDBItemInfo, 0); //len

		Write32(pDBItemInfo, 0); //ItemID
		Write32(pDBItemInfo, 0); //ItemNum
		Write32(pDBItemInfo, 0); //AvailPeriod
		Write8(pDBItemInfo, 0); //Status
		WriteUn(pDBItemInfo, 0); //ObtainTime
		Write32(pDBItemInfo, 0); //OtherAttribute

		len = pDBItemInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //TimeOutSel

	len = p - buf;
	SendToClient(Client, 617, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetShortCutSet(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetShortCutSet(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ShortCutSet
	Write16(p, 0); //ShortCut[]
	Write8(p, 0); //SuitToServer
	Write8(p, 0); //FixedShortCutNum
	Write16(p, 0); //FixShortCut[]

	len = p - buf;
	SendToClient(Client, 11356, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestSetShortCutSet(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT[] ShortCut[] = Read16(p);

}

void ResponseSetShortCutSet(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 11357, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetConsumeScoreConfUrl(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	int Time = Read32(p);
	UCHAR Md5StrLen = Read8(p);

}

void ResponseGetConsumeScoreConfUrl(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //Md5StrLen
	Write16(p, 0); //BroadcastLen
	Write16(p, 0); //ExchangeNumber
	for (size_t i = 0; i < n; i++)
	{ //Exchange
		BYTE* pExchange = p;
		Write16(pExchange, 0); //len

		Write32(pExchange, 0); //PackId
		Write32(pExchange, 0); //ItemId
		Write32(pExchange, 0); //ItemAvailPeriod
		Write32(pExchange, 0); //ItemNumber
		Write32(pExchange, 0); //Score
		Write8(pExchange, 0); //HasTimeLimit
		for (size_t i = 0; i < n; i++)
		{ //TimeLimit
			BYTE* pTimeLimit = pExchange;
			Write16(pTimeLimit, 0); //len

			Write32(pTimeLimit, 0); //StartTime
			Write32(pTimeLimit, 0); //EndTime

			len = pTimeLimit - pExchange;
			Set16(pExchange, (WORD)len);
			pExchange += len;
		}
		Write8(pExchange, 0); //HasDiscount
		for (size_t i = 0; i < n; i++)
		{ //Discount
			BYTE* pDiscount = pExchange;
			Write16(pDiscount, 0); //len

			Write32(pDiscount, 0); //OrigScore
			Write32(pDiscount, 0); //DiscountValue

			len = pDiscount - pExchange;
			Set16(pExchange, (WORD)len);
			pExchange += len;
		}

		len = pExchange - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11471, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestConsumeScoreExchange(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	int Time = Read32(p);
	UINT PackId = Read32(p);

}

void ResponseConsumeScoreExchange(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultId
	Write32(p, 0); //PackId

	len = p - buf;
	SendToClient(Client, 11472, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyG2CWizardSimpleInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //HasCarryWizard
	for (size_t i = 0; i < n; i++)
	{ //CarryWizardInfo
		BYTE* pCarryWizardInfo = p;
		Write16(pCarryWizardInfo, 0); //len

		Write16(pCarryWizardInfo, 0); //WizardID
		WriteString(pCarryWizardInfo, 0); //Nickname[]
		Write16(pCarryWizardInfo, 0); //WizardType
		Write8(pCarryWizardInfo, 0); //Order
		Write8(pCarryWizardInfo, 0); //EvolutionBranch
		Write8(pCarryWizardInfo, 0); //IsHuanHua

		len = pCarryWizardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //SimpleBaseInfo
		BYTE* pSimpleBaseInfo = p;
		Write16(pSimpleBaseInfo, 0); //len

		Write32(pSimpleBaseInfo, 0); //LastAdventureEndTime
		Write32(pSimpleBaseInfo, 0); //LastJobEndTime
		Write32(pSimpleBaseInfo, 0); //LastFarmUpgradeEndTime
		Write32(pSimpleBaseInfo, 0); //LastCollegeUpgradeEndTime
		Write32(pSimpleBaseInfo, 0); //LastWorkShopUpgradeEndTime
		Write32(pSimpleBaseInfo, 0); //LastLoginOutTime
		Write8(pSimpleBaseInfo, 0); //WizardNum

		len = pSimpleBaseInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11473, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetWizardHomeBaseInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetWizardHomeBaseInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	{ //PlayerDBWizardHomeInfo
		BYTE* pPlayerDBWizardHomeInfo = p;
		Write16(pPlayerDBWizardHomeInfo, 0); //len

		{ //WizardHomeInfo
			BYTE* pWizardHomeInfo = pPlayerDBWizardHomeInfo;
			Write16(pWizardHomeInfo, 0); //len

			Write32(pWizardHomeInfo, 0); //ProsperityDegree
			Write8(pWizardHomeInfo, 0); //FarmLevel
			Write8(pWizardHomeInfo, 0); //CollegeLevel
			Write8(pWizardHomeInfo, 0); //WorkShopLevel
			Write32(pWizardHomeInfo, 0); //PrayerTreeExp
			Write8(pWizardHomeInfo, 0); //PrayerTreeLevel

			len = pWizardHomeInfo - pPlayerDBWizardHomeInfo;
			Set16(pPlayerDBWizardHomeInfo, (WORD)len);
			pPlayerDBWizardHomeInfo += len;
		}
		{ //FriendWateringInfoList
			BYTE* pFriendWateringInfoList = pPlayerDBWizardHomeInfo;
			Write16(pFriendWateringInfoList, 0); //len

			Write8(pFriendWateringInfoList, 0); //FriendNum
			for (size_t i = 0; i < n; i++)
			{ //FriendWateringInfo
				BYTE* pFriendWateringInfo = pFriendWateringInfoList;
				Write16(pFriendWateringInfo, 0); //len

				Write32(pFriendWateringInfo, 0); //Uin
				Write32(pFriendWateringInfo, 0); //LastFriendWateringTime
				Write8(pFriendWateringInfo, 0); //FriendWateringCountOneDay

				len = pFriendWateringInfo - pFriendWateringInfoList;
				Set16(pFriendWateringInfoList, (WORD)len);
				pFriendWateringInfoList += len;
			}

			len = pFriendWateringInfoList - pPlayerDBWizardHomeInfo;
			Set16(pPlayerDBWizardHomeInfo, (WORD)len);
			pPlayerDBWizardHomeInfo += len;
		}
		Write8(pPlayerDBWizardHomeInfo, 0); //JobCount
		Write32(pPlayerDBWizardHomeInfo, 0); //LastJobTime
		Write16(pPlayerDBWizardHomeInfo, 0); //PrayerTreeWateringCount
		Write32(pPlayerDBWizardHomeInfo, 0); //LastPrayerTreeWateringTime
		Write8(pPlayerDBWizardHomeInfo, 0); //PrayerTreeFriendWateringCount
		Write32(pPlayerDBWizardHomeInfo, 0); //LastPrayerTreeFriendWateringTime
		Write16(pPlayerDBWizardHomeInfo, 0); //CliffordCount
		Write32(pPlayerDBWizardHomeInfo, 0); //LastCliffordTime
		Write16(pPlayerDBWizardHomeInfo, 0); //FeedCount
		Write32(pPlayerDBWizardHomeInfo, 0); //LastFeedTime
		Write16(pPlayerDBWizardHomeInfo, 0); //AdventureCount
		Write32(pPlayerDBWizardHomeInfo, 0); //LastAdventureTime
		Write16(pPlayerDBWizardHomeInfo, 0); //ChallengeCount
		Write32(pPlayerDBWizardHomeInfo, 0); //LastChallengeTime
		Write8(pPlayerDBWizardHomeInfo, 0); //FarmStatus
		Write32(pPlayerDBWizardHomeInfo, 0); //FarmUpgradeEndTime
		Write8(pPlayerDBWizardHomeInfo, 0); //CollegeStatus
		Write32(pPlayerDBWizardHomeInfo, 0); //CollegeUpgradeEndTime
		Write8(pPlayerDBWizardHomeInfo, 0); //WorkShopStatus
		Write32(pPlayerDBWizardHomeInfo, 0); //WorkShopUpgradeEndTime
		Write16(pPlayerDBWizardHomeInfo, 0); //PrayerTreeBeWateredByFriendCount
		Write32(pPlayerDBWizardHomeInfo, 0); //LastPrayerTreeBeWateredByFriendTime
		Write8(pPlayerDBWizardHomeInfo, 0); //LuckyFruitLevel
		Write32(pPlayerDBWizardHomeInfo, 0); //JobProsperityScore
		{ //DressInfo
			BYTE* pDressInfo = pPlayerDBWizardHomeInfo;
			Write16(pDressInfo, 0); //len

			Write8(pDressInfo, 0); //ColorSetLen
			Write8(pDressInfo, 0); //DoorPlateLen

			len = pDressInfo - pPlayerDBWizardHomeInfo;
			Set16(pPlayerDBWizardHomeInfo, (WORD)len);
			pPlayerDBWizardHomeInfo += len;
		}

		len = pPlayerDBWizardHomeInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //WizardNum
	for (size_t i = 0; i < n; i++)
	{ //PlayerDBWizardBaseInfo
		BYTE* pPlayerDBWizardBaseInfo = p;
		Write16(pPlayerDBWizardBaseInfo, 0); //len

		{ //WizardBaseInfo
			BYTE* pWizardBaseInfo = pPlayerDBWizardBaseInfo;
			Write16(pWizardBaseInfo, 0); //len

			Write16(pWizardBaseInfo, 0); //WizardID
			Write16(pWizardBaseInfo, 0); //WizardType
			WriteString(pWizardBaseInfo, 0); //Nickname[]
			Write32(pWizardBaseInfo, 0); //Experience
			Write8(pWizardBaseInfo, 0); //Level
			Write8(pWizardBaseInfo, 0); //Order
			Write32(pWizardBaseInfo, 0); //Health
			Write8(pWizardBaseInfo, 0); //IsRare
			Write8(pWizardBaseInfo, 0); //Intimacy
			Write8(pWizardBaseInfo, 0); //IsHuanHua
			Write8(pWizardBaseInfo, 0); //IsShow
			Write8(pWizardBaseInfo, 0); //IsCarry
			Write8(pWizardBaseInfo, 0); //MaxSkillNum
			{ //WizardSkillInfoList
				BYTE* pWizardSkillInfoList = pWizardBaseInfo;
				Write16(pWizardSkillInfoList, 0); //len

				Write8(pWizardSkillInfoList, 0); //SkillNum
				for (size_t i = 0; i < n; i++)
				{ //SkillInfo
					BYTE* pSkillInfo = pWizardSkillInfoList;
					Write16(pSkillInfo, 0); //len

					Write8(pSkillInfo, 0); //SkillId
					Write8(pSkillInfo, 0); //SkillLevel

					len = pSkillInfo - pWizardSkillInfoList;
					Set16(pWizardSkillInfoList, (WORD)len);
					pWizardSkillInfoList += len;
				}

				len = pWizardSkillInfoList - pWizardBaseInfo;
				Set16(pWizardBaseInfo, (WORD)len);
				pWizardBaseInfo += len;
			}
			Write8(pWizardBaseInfo, 0); //Status
			Write32(pWizardBaseInfo, 0); //EndTime
			Write32(pWizardBaseInfo, 0); //LeftTime
			Write8(pWizardBaseInfo, 0); //EvolutionBranch
			Write16(pWizardBaseInfo, 0); //CurAdventureMapID
			Write8(pWizardBaseInfo, 0); //LastunLockMapWizardLev
			Write16(pWizardBaseInfo, 0); //Flag
			Write8(pWizardBaseInfo, 0); //JobType

			len = pWizardBaseInfo - pPlayerDBWizardBaseInfo;
			Set16(pPlayerDBWizardBaseInfo, (WORD)len);
			pPlayerDBWizardBaseInfo += len;
		}
		Write32(pPlayerDBWizardBaseInfo, 0); //LastActionTime
		Write32(pPlayerDBWizardBaseInfo, 0); //LastCareTime
		Write16(pPlayerDBWizardBaseInfo, 0); //CareCount
		Write32(pPlayerDBWizardBaseInfo, 0); //LastFeedTime
		Write8(pPlayerDBWizardBaseInfo, 0); //FeedCount
		Write32(pPlayerDBWizardBaseInfo, 0); //LastFeedFruitTime
		Write16(pPlayerDBWizardBaseInfo, 0); //FeedFruitCount
		Write8(pPlayerDBWizardBaseInfo, 0); //ComputeType

		len = pPlayerDBWizardBaseInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //FarmStatus
	Write32(p, 0); //FarmUpgradeLeftTime
	Write8(p, 0); //CollegeStatus
	Write32(p, 0); //CollegeUpgradeLeftTime
	Write8(p, 0); //WorkShopStatus
	Write32(p, 0); //WorkShopUpgradeLeftTime
	Write8(p, 0); //HasLuckyFruitToReceive
	Write32(p, 0); //CurServerTime

	len = p - buf;
	SendToClient(Client, 11474, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestLogoutWizardHome(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseLogoutWizardHome(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 11519, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestCollegeUpgradeWizard(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseCollegeUpgradeWizard(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 11476, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyCollegeUpgradeResultWizard(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //CollegeLevel
	Write32(p, 0); //ProsperityDegree

	len = p - buf;
	SendToClient(Client, 11515, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestSkillStrengthenWizard(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	USHORT WizardID = Read16(p);
	bool SkillId = Read8(p);
	UINT Time = Read32(p);

}

void ResponseSkillStrengthenWizard(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //WizardID
	{ //SkillInfo
		BYTE* pSkillInfo = p;
		Write16(pSkillInfo, 0); //len

		Write8(pSkillInfo, 0); //SkillId
		Write8(pSkillInfo, 0); //SkillLevel

		len = pSkillInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11477, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestSkillStudyWizard(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	USHORT WizardID = Read16(p);
	bool SkillId = Read8(p);
	UINT Time = Read32(p);

}

void ResponseSkillStudyWizard(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //WizardID
	{ //SkillInfo
		BYTE* pSkillInfo = p;
		Write16(pSkillInfo, 0); //len

		Write8(pSkillInfo, 0); //SkillId
		Write8(pSkillInfo, 0); //SkillLevel

		len = pSkillInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11478, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestSkillForgetWizard(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	USHORT WizardID = Read16(p);
	bool SkillId = Read8(p);
	UINT Time = Read32(p);

}

void ResponseSkillForgetWizard(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //WizardID
	Write8(p, 0); //SkillId

	len = p - buf;
	SendToClient(Client, 11479, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestCollegeUpgradeImmediatelyWizard(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseCollegeUpgradeImmediatelyWizard(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 11481, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestWorkShopUpgradeWizard(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseWorkShopUpgradeWizard(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 11484, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyWorkShopUpgradeResultWizard(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //WorkShopLevel
	Write32(p, 0); //ProsperityDegree

	len = p - buf;
	SendToClient(Client, 11516, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestWorkShopUpgradeImmediatelyWizard(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseWorkShopUpgradeImmediatelyWizard(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 11485, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestJobWizard(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT WizardID = Read16(p);
	bool JobType = Read8(p);

}

void ResponseJobWizard(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //WizardID
	Write8(p, 0); //JobType

	len = p - buf;
	SendToClient(Client, 11486, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyJobResult(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //WizardID
	Write8(p, 0); //JobType

	len = p - buf;
	SendToClient(Client, 11517, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestCancelJobWizard(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT WizardID = Read16(p);

}

void ResponseCancelJobWizard(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //WizardID

	len = p - buf;
	SendToClient(Client, 11487, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestJobImmediatelyWizard(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT WizardID = Read16(p);
	bool JobType = Read8(p);

}

void ResponseJobImmediatelyWizard(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //WizardID
	Write8(p, 0); //JobType

	len = p - buf;
	SendToClient(Client, 11488, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestReceiveJobAwardWizard(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT WizardID = Read16(p);

}

void ResponseReceiveJobAwardWizard(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //WizardID
	Write8(p, 0); //JobType
	Write8(p, 0); //HasWizardAward
	for (size_t i = 0; i < n; i++)
	{ //WizardAward
		BYTE* pWizardAward = p;
		Write16(pWizardAward, 0); //len

		Write32(pWizardAward, 0); //AwardSuperMoney
		Write32(pWizardAward, 0); //TotalSuperMoney
		Write32(pWizardAward, 0); //AwardCoupons
		Write32(pWizardAward, 0); //TotalCoupons
		Write32(pWizardAward, 0); //AwardWizardExp
		Write32(pWizardAward, 0); //TotalWizardExp
		Write32(pWizardAward, 0); //AwardHealth
		Write32(pWizardAward, 0); //TotalHealth
		Write32(pWizardAward, 0); //AwardItemNum
		for (size_t i = 0; i < n; i++)
		{ //AwardItemInfo
			BYTE* pAwardItemInfo = pWizardAward;
			Write16(pAwardItemInfo, 0); //len

			Write32(pAwardItemInfo, 0); //ItemID
			Write32(pAwardItemInfo, 0); //ItemNum
			Write32(pAwardItemInfo, 0); //AvailPeriod
			Write8(pAwardItemInfo, 0); //Status
			WriteUn(pAwardItemInfo, 0); //ObtainTime
			Write32(pAwardItemInfo, 0); //OtherAttribute

			len = pAwardItemInfo - pWizardAward;
			Set16(pWizardAward, (WORD)len);
			pWizardAward += len;
		}

		len = pWizardAward - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //WizardLevel
	Write32(p, 0); //ProsperityDegree

	len = p - buf;
	SendToClient(Client, 11489, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestAdventureWizard(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT WizardID = Read16(p);
	USHORT MapID = Read16(p);
	bool Assist = Read8(p);

}

void ResponseAdventureWizard(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //WizardID
	Write16(p, 0); //MapID

	len = p - buf;
	SendToClient(Client, 11491, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestCancelAdventureWizard(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT WizardID = Read16(p);

}

void ResponseCancelAdventureWizard(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //WizardID

	len = p - buf;
	SendToClient(Client, 11492, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestAdventureImmediatelyWizard(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT WizardID = Read16(p);

}

void ResponseAdventureImmediatelyWizard(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //WizardID
	Write16(p, 0); //MapID

	len = p - buf;
	SendToClient(Client, 11493, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestReceiveAdventureAwardWizard(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT WizardID = Read16(p);

}

void ResponseReceiveAdventureAwardWizard(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //WizardID
	Write16(p, 0); //RandEventID
	Write8(p, 0); //HasWizardAward
	for (size_t i = 0; i < n; i++)
	{ //WizardAward
		BYTE* pWizardAward = p;
		Write16(pWizardAward, 0); //len

		Write32(pWizardAward, 0); //AwardSuperMoney
		Write32(pWizardAward, 0); //TotalSuperMoney
		Write32(pWizardAward, 0); //AwardCoupons
		Write32(pWizardAward, 0); //TotalCoupons
		Write32(pWizardAward, 0); //AwardWizardExp
		Write32(pWizardAward, 0); //TotalWizardExp
		Write32(pWizardAward, 0); //AwardHealth
		Write32(pWizardAward, 0); //TotalHealth
		Write32(pWizardAward, 0); //AwardItemNum
		for (size_t i = 0; i < n; i++)
		{ //AwardItemInfo
			BYTE* pAwardItemInfo = pWizardAward;
			Write16(pAwardItemInfo, 0); //len

			Write32(pAwardItemInfo, 0); //ItemID
			Write32(pAwardItemInfo, 0); //ItemNum
			Write32(pAwardItemInfo, 0); //AvailPeriod
			Write8(pAwardItemInfo, 0); //Status
			WriteUn(pAwardItemInfo, 0); //ObtainTime
			Write32(pAwardItemInfo, 0); //OtherAttribute

			len = pAwardItemInfo - pWizardAward;
			Set16(pWizardAward, (WORD)len);
			pWizardAward += len;
		}

		len = pWizardAward - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //MapID
	Write8(p, 0); //AssistAward
	for (size_t i = 0; i < n; i++)
	{ //Award
		BYTE* pAward = p;
		Write16(pAward, 0); //len

		Write32(pAward, 0); //Exp
		Write32(pAward, 0); //Money
		Write32(pAward, 0); //SuperMoney
		Write16(pAward, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAward;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute

			len = pItemInfo - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write32(pAward, 0); //Coupons
		Write32(pAward, 0); //GuildPoint
		Write32(pAward, 0); //LuckMoney

		len = pAward - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //WizardLevel
	Write32(p, 0); //ProsperityDegree

	len = p - buf;
	SendToClient(Client, 11510, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyAdventureResult(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //WizardID
	Write16(p, 0); //MapID

	len = p - buf;
	SendToClient(Client, 11518, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetWizardFriendList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetWizardFriendList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //WizardFriendNum
	for (size_t i = 0; i < n; i++)
	{ //WizardFriendBaseInfo
		BYTE* pWizardFriendBaseInfo = p;
		Write16(pWizardFriendBaseInfo, 0); //len

		Write32(pWizardFriendBaseInfo, 0); //Uin
		{ //WizardBaseInfo
			BYTE* pWizardBaseInfo = pWizardFriendBaseInfo;
			Write16(pWizardBaseInfo, 0); //len

			Write16(pWizardBaseInfo, 0); //WizardID
			Write16(pWizardBaseInfo, 0); //WizardType
			WriteString(pWizardBaseInfo, 0); //Nickname[]
			Write32(pWizardBaseInfo, 0); //Experience
			Write8(pWizardBaseInfo, 0); //Level
			Write8(pWizardBaseInfo, 0); //Order
			Write32(pWizardBaseInfo, 0); //Health
			Write8(pWizardBaseInfo, 0); //IsRare
			Write8(pWizardBaseInfo, 0); //Intimacy
			Write8(pWizardBaseInfo, 0); //IsHuanHua
			Write8(pWizardBaseInfo, 0); //IsShow
			Write8(pWizardBaseInfo, 0); //IsCarry
			Write8(pWizardBaseInfo, 0); //MaxSkillNum
			{ //WizardSkillInfoList
				BYTE* pWizardSkillInfoList = pWizardBaseInfo;
				Write16(pWizardSkillInfoList, 0); //len

				Write8(pWizardSkillInfoList, 0); //SkillNum
				for (size_t i = 0; i < n; i++)
				{ //SkillInfo
					BYTE* pSkillInfo = pWizardSkillInfoList;
					Write16(pSkillInfo, 0); //len

					Write8(pSkillInfo, 0); //SkillId
					Write8(pSkillInfo, 0); //SkillLevel

					len = pSkillInfo - pWizardSkillInfoList;
					Set16(pWizardSkillInfoList, (WORD)len);
					pWizardSkillInfoList += len;
				}

				len = pWizardSkillInfoList - pWizardBaseInfo;
				Set16(pWizardBaseInfo, (WORD)len);
				pWizardBaseInfo += len;
			}
			Write8(pWizardBaseInfo, 0); //Status
			Write32(pWizardBaseInfo, 0); //EndTime
			Write32(pWizardBaseInfo, 0); //LeftTime
			Write8(pWizardBaseInfo, 0); //EvolutionBranch
			Write16(pWizardBaseInfo, 0); //CurAdventureMapID
			Write8(pWizardBaseInfo, 0); //LastunLockMapWizardLev
			Write16(pWizardBaseInfo, 0); //Flag
			Write8(pWizardBaseInfo, 0); //JobType

			len = pWizardBaseInfo - pWizardFriendBaseInfo;
			Set16(pWizardFriendBaseInfo, (WORD)len);
			pWizardFriendBaseInfo += len;
		}

		len = pWizardFriendBaseInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11494, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestChallengeWizard(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	USHORT WizardID = Read16(p);
	UINT RivalUin = Read32(p);
	USHORT RivalWizardID = Read16(p);
	UINT Time = Read32(p);

}

void ResponseChallengeWizard(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //MatchResultID
	Write8(p, 0); //IsRandomHit[]
	Write32(p, 0); //Uin
	Write16(p, 0); //WizardID
	Write32(p, 0); //RivalUin
	Write16(p, 0); //RivalWizardID
	Write32(p, 0); //WizardExperience

	len = p - buf;
	SendToClient(Client, 11495, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestFarmUpgradeWizard(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseFarmUpgradeWizard(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 11496, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestFarmUpgradeImmediatelyWizard(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseFarmUpgradeImmediatelyWizard(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 11497, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyFarmUpgradeResultWizard(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //FarmLevel
	Write16(p, 0); //MaxWizardShowNum
	Write32(p, 0); //ProsperityDegree

	len = p - buf;
	SendToClient(Client, 11524, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestWakeWizard(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT WizardID = Read16(p);

}

void ResponseWakeWizard(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Time
	Write16(p, 0); //WizardID
	Write8(p, 0); //NewIntimacy

	len = p - buf;
	SendToClient(Client, 11502, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestCareWizard(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT WizardID = Read16(p);

}

void ResponseCareWizard(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //WizardID
	Write8(p, 0); //OutputLevel
	{ //CareOutput
		BYTE* pCareOutput = p;
		Write16(pCareOutput, 0); //len

		Write32(pCareOutput, 0); //WizardExperience
		Write32(pCareOutput, 0); //TotalWizardExperience
		Write32(pCareOutput, 0); //WizardIntimacy
		Write32(pCareOutput, 0); //TotalWizardIntimacy

		len = pCareOutput - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11499, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestFeedWizard(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT WizardID = Read16(p);
	UINT FoodItemID = Read32(p);

}

void ResponseFeedWizard(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //WizardID
	Write8(p, 0); //OutputLevel
	{ //FeedOutput
		BYTE* pFeedOutput = p;
		Write16(pFeedOutput, 0); //len

		Write32(pFeedOutput, 0); //WizardExperience
		Write32(pFeedOutput, 0); //TotalWizardExperience
		Write32(pFeedOutput, 0); //WizardIntimacy
		Write32(pFeedOutput, 0); //TotalWizardIntimacy

		len = pFeedOutput - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //WizardLevel
	Write32(p, 0); //ProsperityDegree

	len = p - buf;
	SendToClient(Client, 11500, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetFriendWizardBaseInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT DstUin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetFriendWizardBaseInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	{ //WizardFriendBaseInfo
		BYTE* pWizardFriendBaseInfo = p;
		Write16(pWizardFriendBaseInfo, 0); //len

		Write32(pWizardFriendBaseInfo, 0); //Uin
		{ //WizardBaseInfo
			BYTE* pWizardBaseInfo = pWizardFriendBaseInfo;
			Write16(pWizardBaseInfo, 0); //len

			Write16(pWizardBaseInfo, 0); //WizardID
			Write16(pWizardBaseInfo, 0); //WizardType
			WriteString(pWizardBaseInfo, 0); //Nickname[]
			Write32(pWizardBaseInfo, 0); //Experience
			Write8(pWizardBaseInfo, 0); //Level
			Write8(pWizardBaseInfo, 0); //Order
			Write32(pWizardBaseInfo, 0); //Health
			Write8(pWizardBaseInfo, 0); //IsRare
			Write8(pWizardBaseInfo, 0); //Intimacy
			Write8(pWizardBaseInfo, 0); //IsHuanHua
			Write8(pWizardBaseInfo, 0); //IsShow
			Write8(pWizardBaseInfo, 0); //IsCarry
			Write8(pWizardBaseInfo, 0); //MaxSkillNum
			{ //WizardSkillInfoList
				BYTE* pWizardSkillInfoList = pWizardBaseInfo;
				Write16(pWizardSkillInfoList, 0); //len

				Write8(pWizardSkillInfoList, 0); //SkillNum
				for (size_t i = 0; i < n; i++)
				{ //SkillInfo
					BYTE* pSkillInfo = pWizardSkillInfoList;
					Write16(pSkillInfo, 0); //len

					Write8(pSkillInfo, 0); //SkillId
					Write8(pSkillInfo, 0); //SkillLevel

					len = pSkillInfo - pWizardSkillInfoList;
					Set16(pWizardSkillInfoList, (WORD)len);
					pWizardSkillInfoList += len;
				}

				len = pWizardSkillInfoList - pWizardBaseInfo;
				Set16(pWizardBaseInfo, (WORD)len);
				pWizardBaseInfo += len;
			}
			Write8(pWizardBaseInfo, 0); //Status
			Write32(pWizardBaseInfo, 0); //EndTime
			Write32(pWizardBaseInfo, 0); //LeftTime
			Write8(pWizardBaseInfo, 0); //EvolutionBranch
			Write16(pWizardBaseInfo, 0); //CurAdventureMapID
			Write8(pWizardBaseInfo, 0); //LastunLockMapWizardLev
			Write16(pWizardBaseInfo, 0); //Flag
			Write8(pWizardBaseInfo, 0); //JobType

			len = pWizardBaseInfo - pWizardFriendBaseInfo;
			Set16(pWizardFriendBaseInfo, (WORD)len);
			pWizardFriendBaseInfo += len;
		}

		len = pWizardFriendBaseInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11501, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestReleaseWizard(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	USHORT WizardID = Read16(p);
	UINT Time = Read32(p);

}

void ResponseReleaseWizard(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //WizardID

	len = p - buf;
	SendToClient(Client, 11503, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestSetWizardVisible(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT WizardID = Read16(p);
	bool VisibleFlag = Read8(p);

}

void ResponseSetWizardVisible(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //WizardID
	Write8(p, 0); //VisibleFlag

	len = p - buf;
	SendToClient(Client, 11504, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestEvoluteWizard(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT WizardID = Read16(p);
	bool DstEvolutionBranch = Read8(p);

}

void ResponseEvoluteWizard(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //WizardID
	Write8(p, 0); //Order
	Write8(p, 0); //DstEvolutionBranch
	Write8(p, 0); //IsRare

	len = p - buf;
	SendToClient(Client, 11505, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestCliffordWizard(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseCliffordWizard(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //LeftTimes
	Write8(p, 0); //HasWizardAward
	for (size_t i = 0; i < n; i++)
	{ //WizardAward
		BYTE* pWizardAward = p;
		Write16(pWizardAward, 0); //len

		Write32(pWizardAward, 0); //AwardSuperMoney
		Write32(pWizardAward, 0); //TotalSuperMoney
		Write32(pWizardAward, 0); //AwardCoupons
		Write32(pWizardAward, 0); //TotalCoupons
		Write32(pWizardAward, 0); //AwardWizardExp
		Write32(pWizardAward, 0); //TotalWizardExp
		Write32(pWizardAward, 0); //AwardHealth
		Write32(pWizardAward, 0); //TotalHealth
		Write32(pWizardAward, 0); //AwardItemNum
		for (size_t i = 0; i < n; i++)
		{ //AwardItemInfo
			BYTE* pAwardItemInfo = pWizardAward;
			Write16(pAwardItemInfo, 0); //len

			Write32(pAwardItemInfo, 0); //ItemID
			Write32(pAwardItemInfo, 0); //ItemNum
			Write32(pAwardItemInfo, 0); //AvailPeriod
			Write8(pAwardItemInfo, 0); //Status
			WriteUn(pAwardItemInfo, 0); //ObtainTime
			Write32(pAwardItemInfo, 0); //OtherAttribute

			len = pAwardItemInfo - pWizardAward;
			Set16(pWizardAward, (WORD)len);
			pWizardAward += len;
		}

		len = pWizardAward - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //LeftTime

	len = p - buf;
	SendToClient(Client, 11511, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestWateringOneselfWizard(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseWateringOneselfWizard(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //PrayerTreeLevel
	Write32(p, 0); //LeftTimes
	Write32(p, 0); //ProsperityDegree
	Write32(p, 0); //LeftTime
	Write32(p, 0); //PrayerTreeExp

	len = p - buf;
	SendToClient(Client, 11512, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestWateringFriendWizard(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT SrcUin = Read32(p);
	UINT DstUin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseWateringFriendWizard(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //DstUin
	Write8(p, 0); //HasWizardAward
	for (size_t i = 0; i < n; i++)
	{ //WizardAward
		BYTE* pWizardAward = p;
		Write16(pWizardAward, 0); //len

		Write32(pWizardAward, 0); //AwardSuperMoney
		Write32(pWizardAward, 0); //TotalSuperMoney
		Write32(pWizardAward, 0); //AwardCoupons
		Write32(pWizardAward, 0); //TotalCoupons
		Write32(pWizardAward, 0); //AwardWizardExp
		Write32(pWizardAward, 0); //TotalWizardExp
		Write32(pWizardAward, 0); //AwardHealth
		Write32(pWizardAward, 0); //TotalHealth
		Write32(pWizardAward, 0); //AwardItemNum
		for (size_t i = 0; i < n; i++)
		{ //AwardItemInfo
			BYTE* pAwardItemInfo = pWizardAward;
			Write16(pAwardItemInfo, 0); //len

			Write32(pAwardItemInfo, 0); //ItemID
			Write32(pAwardItemInfo, 0); //ItemNum
			Write32(pAwardItemInfo, 0); //AvailPeriod
			Write8(pAwardItemInfo, 0); //Status
			WriteUn(pAwardItemInfo, 0); //ObtainTime
			Write32(pAwardItemInfo, 0); //OtherAttribute

			len = pAwardItemInfo - pWizardAward;
			Set16(pWizardAward, (WORD)len);
			pWizardAward += len;
		}

		len = pWizardAward - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //PrayerTreeLevel
	Write32(p, 0); //LeftTimes

	len = p - buf;
	SendToClient(Client, 11513, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestReceiveLuckyFruitAwardWizard(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseReceiveLuckyFruitAwardWizard(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //HasWizardAward
	for (size_t i = 0; i < n; i++)
	{ //WizardAward
		BYTE* pWizardAward = p;
		Write16(pWizardAward, 0); //len

		Write32(pWizardAward, 0); //AwardSuperMoney
		Write32(pWizardAward, 0); //TotalSuperMoney
		Write32(pWizardAward, 0); //AwardCoupons
		Write32(pWizardAward, 0); //TotalCoupons
		Write32(pWizardAward, 0); //AwardWizardExp
		Write32(pWizardAward, 0); //TotalWizardExp
		Write32(pWizardAward, 0); //AwardHealth
		Write32(pWizardAward, 0); //TotalHealth
		Write32(pWizardAward, 0); //AwardItemNum
		for (size_t i = 0; i < n; i++)
		{ //AwardItemInfo
			BYTE* pAwardItemInfo = pWizardAward;
			Write16(pAwardItemInfo, 0); //len

			Write32(pAwardItemInfo, 0); //ItemID
			Write32(pAwardItemInfo, 0); //ItemNum
			Write32(pAwardItemInfo, 0); //AvailPeriod
			Write8(pAwardItemInfo, 0); //Status
			WriteUn(pAwardItemInfo, 0); //ObtainTime
			Write32(pAwardItemInfo, 0); //OtherAttribute

			len = pAwardItemInfo - pWizardAward;
			Set16(pWizardAward, (WORD)len);
			pWizardAward += len;
		}

		len = pWizardAward - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11514, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestModifyWizardNickname(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	USHORT WizardID = Read16(p);
	char[] NewNickname[] = ReadString(p);
	UINT Time = Read32(p);

}

void ResponseModifyWizardNickname(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //WizardID
	WriteString(p, 0); //NewNickname[]
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 11498, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyG2CBeWateredWizard(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //SrcUin
	Write8(p, 0); //PrayerTreeLevel
	Write32(p, 0); //LeftTimes
	Write32(p, 0); //ProsperityDegree
	Write32(p, 0); //PrayerTreeExp

	len = p - buf;
	SendToClient(Client, 11521, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetOtherWizardHomeBaseInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT DstUin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetOtherWizardHomeBaseInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //DstUin
	{ //WizardHomeInfo
		BYTE* pWizardHomeInfo = p;
		Write16(pWizardHomeInfo, 0); //len

		Write32(pWizardHomeInfo, 0); //ProsperityDegree
		Write8(pWizardHomeInfo, 0); //FarmLevel
		Write8(pWizardHomeInfo, 0); //CollegeLevel
		Write8(pWizardHomeInfo, 0); //WorkShopLevel
		Write32(pWizardHomeInfo, 0); //PrayerTreeExp
		Write8(pWizardHomeInfo, 0); //PrayerTreeLevel

		len = pWizardHomeInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //WizardNum
	for (size_t i = 0; i < n; i++)
	{ //WizardBaseInfo
		BYTE* pWizardBaseInfo = p;
		Write16(pWizardBaseInfo, 0); //len

		Write16(pWizardBaseInfo, 0); //WizardID
		Write16(pWizardBaseInfo, 0); //WizardType
		WriteString(pWizardBaseInfo, 0); //Nickname[]
		Write32(pWizardBaseInfo, 0); //Experience
		Write8(pWizardBaseInfo, 0); //Level
		Write8(pWizardBaseInfo, 0); //Order
		Write32(pWizardBaseInfo, 0); //Health
		Write8(pWizardBaseInfo, 0); //IsRare
		Write8(pWizardBaseInfo, 0); //Intimacy
		Write8(pWizardBaseInfo, 0); //IsHuanHua
		Write8(pWizardBaseInfo, 0); //IsShow
		Write8(pWizardBaseInfo, 0); //IsCarry
		Write8(pWizardBaseInfo, 0); //MaxSkillNum
		{ //WizardSkillInfoList
			BYTE* pWizardSkillInfoList = pWizardBaseInfo;
			Write16(pWizardSkillInfoList, 0); //len

			Write8(pWizardSkillInfoList, 0); //SkillNum
			for (size_t i = 0; i < n; i++)
			{ //SkillInfo
				BYTE* pSkillInfo = pWizardSkillInfoList;
				Write16(pSkillInfo, 0); //len

				Write8(pSkillInfo, 0); //SkillId
				Write8(pSkillInfo, 0); //SkillLevel

				len = pSkillInfo - pWizardSkillInfoList;
				Set16(pWizardSkillInfoList, (WORD)len);
				pWizardSkillInfoList += len;
			}

			len = pWizardSkillInfoList - pWizardBaseInfo;
			Set16(pWizardBaseInfo, (WORD)len);
			pWizardBaseInfo += len;
		}
		Write8(pWizardBaseInfo, 0); //Status
		Write32(pWizardBaseInfo, 0); //EndTime
		Write32(pWizardBaseInfo, 0); //LeftTime
		Write8(pWizardBaseInfo, 0); //EvolutionBranch
		Write16(pWizardBaseInfo, 0); //CurAdventureMapID
		Write8(pWizardBaseInfo, 0); //LastunLockMapWizardLev
		Write16(pWizardBaseInfo, 0); //Flag
		Write8(pWizardBaseInfo, 0); //JobType

		len = pWizardBaseInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //DressInfo
		BYTE* pDressInfo = p;
		Write16(pDressInfo, 0); //len

		Write8(pDressInfo, 0); //ColorSetLen
		Write8(pDressInfo, 0); //DoorPlateLen

		len = pDressInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11522, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetWizardRecommendList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR Type = Read8(p);

}

void ResponseGetWizardRecommendList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //Type
	Write16(p, 0); //WizardNum
	for (size_t i = 0; i < n; i++)
	{ //WizardRecommendInfo
		BYTE* pWizardRecommendInfo = p;
		Write16(pWizardRecommendInfo, 0); //len

		Write32(pWizardRecommendInfo, 0); //Uin
		WriteString(pWizardRecommendInfo, 0); //Nickname[]
		Write16(pWizardRecommendInfo, 0); //WizardID
		WriteString(pWizardRecommendInfo, 0); //WizardNickname[]
		Write16(pWizardRecommendInfo, 0); //WizardType
		Write8(pWizardRecommendInfo, 0); //Order
		Write8(pWizardRecommendInfo, 0); //EvolutionBranch
		Write8(pWizardRecommendInfo, 0); //Level
		Write32(pWizardRecommendInfo, 0); //Health
		Write8(pWizardRecommendInfo, 0); //Flag

		len = pWizardRecommendInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //PlayerNum
	for (size_t i = 0; i < n; i++)
	{ //PlayerRecommendInfo
		BYTE* pPlayerRecommendInfo = p;
		Write16(pPlayerRecommendInfo, 0); //len

		Write32(pPlayerRecommendInfo, 0); //Uin
		WriteString(pPlayerRecommendInfo, 0); //Nickname[]
		Write8(pPlayerRecommendInfo, 0); //Gender

		len = pPlayerRecommendInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11523, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetWizardEvolutionHistoryInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT DstUin = Read32(p);

}

void ResponseGetWizardEvolutionHistoryInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //DstUin
	Write16(p, 0); //WizardEvolutionHistoryInfoNum
	for (size_t i = 0; i < n; i++)
	{ //WizardEvolutionHistoryInfo
		BYTE* pWizardEvolutionHistoryInfo = p;
		Write16(pWizardEvolutionHistoryInfo, 0); //len

		Write16(pWizardEvolutionHistoryInfo, 0); //WizardType
		Write8(pWizardEvolutionHistoryInfo, 0); //Order
		Write8(pWizardEvolutionHistoryInfo, 0); //EvolutionBranch

		len = pWizardEvolutionHistoryInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11525, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestChangeCarryWizard(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT Num = Read16(p);
	for (size_t i = 0; i < n; i++)
	{ //WizardCarry
		BYTE* pWizardCarry = p;
		len = Read16(pWizardCarry);

		USHORT WizardID = Read16(pWizardCarry);
		bool Carry = Read8(pWizardCarry);

		p += len;
	}

}

void ResponseChangeCarryWizard(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //Num
	for (size_t i = 0; i < n; i++)
	{ //WizardCarry
		BYTE* pWizardCarry = p;
		Write16(pWizardCarry, 0); //len

		Write16(pWizardCarry, 0); //WizardID
		Write8(pWizardCarry, 0); //Carry

		len = pWizardCarry - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11506, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestHuanHuaWizard(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT WizardID = Read16(p);

}

void ResponseHuanHuaWizard(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //WizardID

	len = p - buf;
	SendToClient(Client, 11507, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestCancelHuanHuaWizard(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT WizardID = Read16(p);

}

void ResponseCancelHuanHuaWizard(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //WizardID

	len = p - buf;
	SendToClient(Client, 11508, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyG2CChangeHuanHuaWizard(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //DstUin
	Write16(p, 0); //WizardID
	Write8(p, 0); //HuanHua

	len = p - buf;
	SendToClient(Client, 11509, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyG2CChangeCarryWizard(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //DstUin
	Write8(p, 0); //Carry
	{ //CarryWizardInfo
		BYTE* pCarryWizardInfo = p;
		Write16(pCarryWizardInfo, 0); //len

		Write16(pCarryWizardInfo, 0); //WizardID
		WriteString(pCarryWizardInfo, 0); //Nickname[]
		Write16(pCarryWizardInfo, 0); //WizardType
		Write8(pCarryWizardInfo, 0); //Order
		Write8(pCarryWizardInfo, 0); //EvolutionBranch
		Write8(pCarryWizardInfo, 0); //IsHuanHua

		len = pCarryWizardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11490, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestC2GGetWizardBaseInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT DstUin = Read32(p);
	USHORT DstWizardID = Read16(p);
	bool Reason = Read8(p);

}

void ResponseC2GGetWizardBaseInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write32(p, 0); //DstUin
	Write16(p, 0); //DstWizardID
	Write16(p, 0); //Num
	for (size_t i = 0; i < n; i++)
	{ //PlayerDBWizardBaseInfo
		BYTE* pPlayerDBWizardBaseInfo = p;
		Write16(pPlayerDBWizardBaseInfo, 0); //len

		{ //WizardBaseInfo
			BYTE* pWizardBaseInfo = pPlayerDBWizardBaseInfo;
			Write16(pWizardBaseInfo, 0); //len

			Write16(pWizardBaseInfo, 0); //WizardID
			Write16(pWizardBaseInfo, 0); //WizardType
			WriteString(pWizardBaseInfo, 0); //Nickname[]
			Write32(pWizardBaseInfo, 0); //Experience
			Write8(pWizardBaseInfo, 0); //Level
			Write8(pWizardBaseInfo, 0); //Order
			Write32(pWizardBaseInfo, 0); //Health
			Write8(pWizardBaseInfo, 0); //IsRare
			Write8(pWizardBaseInfo, 0); //Intimacy
			Write8(pWizardBaseInfo, 0); //IsHuanHua
			Write8(pWizardBaseInfo, 0); //IsShow
			Write8(pWizardBaseInfo, 0); //IsCarry
			Write8(pWizardBaseInfo, 0); //MaxSkillNum
			{ //WizardSkillInfoList
				BYTE* pWizardSkillInfoList = pWizardBaseInfo;
				Write16(pWizardSkillInfoList, 0); //len

				Write8(pWizardSkillInfoList, 0); //SkillNum
				for (size_t i = 0; i < n; i++)
				{ //SkillInfo
					BYTE* pSkillInfo = pWizardSkillInfoList;
					Write16(pSkillInfo, 0); //len

					Write8(pSkillInfo, 0); //SkillId
					Write8(pSkillInfo, 0); //SkillLevel

					len = pSkillInfo - pWizardSkillInfoList;
					Set16(pWizardSkillInfoList, (WORD)len);
					pWizardSkillInfoList += len;
				}

				len = pWizardSkillInfoList - pWizardBaseInfo;
				Set16(pWizardBaseInfo, (WORD)len);
				pWizardBaseInfo += len;
			}
			Write8(pWizardBaseInfo, 0); //Status
			Write32(pWizardBaseInfo, 0); //EndTime
			Write32(pWizardBaseInfo, 0); //LeftTime
			Write8(pWizardBaseInfo, 0); //EvolutionBranch
			Write16(pWizardBaseInfo, 0); //CurAdventureMapID
			Write8(pWizardBaseInfo, 0); //LastunLockMapWizardLev
			Write16(pWizardBaseInfo, 0); //Flag
			Write8(pWizardBaseInfo, 0); //JobType

			len = pWizardBaseInfo - pPlayerDBWizardBaseInfo;
			Set16(pPlayerDBWizardBaseInfo, (WORD)len);
			pPlayerDBWizardBaseInfo += len;
		}
		Write32(pPlayerDBWizardBaseInfo, 0); //LastActionTime
		Write32(pPlayerDBWizardBaseInfo, 0); //LastCareTime
		Write16(pPlayerDBWizardBaseInfo, 0); //CareCount
		Write32(pPlayerDBWizardBaseInfo, 0); //LastFeedTime
		Write8(pPlayerDBWizardBaseInfo, 0); //FeedCount
		Write32(pPlayerDBWizardBaseInfo, 0); //LastFeedFruitTime
		Write16(pPlayerDBWizardBaseInfo, 0); //FeedFruitCount
		Write8(pPlayerDBWizardBaseInfo, 0); //ComputeType

		len = pPlayerDBWizardBaseInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //Reason

	len = p - buf;
	SendToClient(Client, 11526, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetWizardHomeCommodityInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetWizardHomeCommodityInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	{ //Info
		BYTE* pInfo = p;
		Write16(pInfo, 0); //len

		Write8(pInfo, 0); //Type
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute

			len = pItemInfo - pInfo;
			Set16(pInfo, (WORD)len);
			pInfo += len;
		}
		for (size_t i = 0; i < n; i++)
		{ //ItemCost
			BYTE* pItemCost = pInfo;
			Write16(pItemCost, 0); //len

			Write16(pItemCost, 0); //MoonStone
			Write16(pItemCost, 0); //WizardMoney

			len = pItemCost - pInfo;
			Set16(pInfo, (WORD)len);
			pInfo += len;
		}
		Write32(pInfo, 0); //RemainTime

		len = pInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //BCNum
	for (size_t i = 0; i < n; i++)
	{ //BC
		BYTE* pBC = p;
		Write16(pBC, 0); //len

		Write16(pBC, 0); //ContentLen

		len = pBC - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //ItemNum
	for (size_t i = 0; i < n; i++)
	{ //ItemInfo
		BYTE* pItemInfo = p;
		Write16(pItemInfo, 0); //len

		Write32(pItemInfo, 0); //ItemID
		Write32(pItemInfo, 0); //ItemNum
		Write32(pItemInfo, 0); //AvailPeriod
		Write8(pItemInfo, 0); //Status
		WriteUn(pItemInfo, 0); //ObtainTime
		Write32(pItemInfo, 0); //OtherAttribute

		len = pItemInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //RandCost
		BYTE* pRandCost = p;
		Write16(pRandCost, 0); //len

		Write16(pRandCost, 0); //MoonStone
		Write16(pRandCost, 0); //WizardMoney

		len = pRandCost - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11527, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestRandWizardHomeCommodity(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR Type = Read8(p);

}

void ResponseRandWizardHomeCommodity(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	{ //Info
		BYTE* pInfo = p;
		Write16(pInfo, 0); //len

		Write8(pInfo, 0); //Type
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute

			len = pItemInfo - pInfo;
			Set16(pInfo, (WORD)len);
			pInfo += len;
		}
		for (size_t i = 0; i < n; i++)
		{ //ItemCost
			BYTE* pItemCost = pInfo;
			Write16(pItemCost, 0); //len

			Write16(pItemCost, 0); //MoonStone
			Write16(pItemCost, 0); //WizardMoney

			len = pItemCost - pInfo;
			Set16(pInfo, (WORD)len);
			pInfo += len;
		}
		Write32(pInfo, 0); //RemainTime

		len = pInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11528, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestBuyWizardHomeCommodity(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR Type = Read8(p);
	UCHAR BuyIdx = Read8(p);

}

void ResponsetBuyWizardHomeCommodity(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //HasItem
	for (size_t i = 0; i < n; i++)
	{ //ItemInfo
		BYTE* pItemInfo = p;
		Write16(pItemInfo, 0); //len

		Write32(pItemInfo, 0); //ItemID
		Write32(pItemInfo, 0); //ItemNum
		Write32(pItemInfo, 0); //AvailPeriod
		Write8(pItemInfo, 0); //Status
		WriteUn(pItemInfo, 0); //ObtainTime
		Write32(pItemInfo, 0); //OtherAttribute

		len = pItemInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasCost
	for (size_t i = 0; i < n; i++)
	{ //RandCost
		BYTE* pRandCost = p;
		Write16(pRandCost, 0); //len

		Write16(pRandCost, 0); //MoonStone
		Write16(pRandCost, 0); //WizardMoney

		len = pRandCost - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11529, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GGetWizardActivityInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT DstUin = Read32(p);
	bool GetWizardActivityType = Read8(p);

}

void ResponseC2GGetWizardActivityInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //DstUin
	Write8(p, 0); //GetWizardActivityType
	Write16(p, 0); //Num
	for (size_t i = 0; i < n; i++)
	{ //WizardActivityInfo
		BYTE* pWizardActivityInfo = p;
		Write16(pWizardActivityInfo, 0); //len

		Write32(pWizardActivityInfo, 0); //BillID
		Write32(pWizardActivityInfo, 0); //Uin
		Write16(pWizardActivityInfo, 0); //WizardID
		Write16(pWizardActivityInfo, 0); //WizardType
		WriteString(pWizardActivityInfo, 0); //WizardName[]
		WriteString(pWizardActivityInfo, 0); //PlayerName[]
		Write16(pWizardActivityInfo, 0); //ActivityType
		Write32(pWizardActivityInfo, 0); //ActivityTime
		Write32(pWizardActivityInfo, 0); //ActivityResult
		Write32(pWizardActivityInfo, 0); //OtherUin
		Write16(pWizardActivityInfo, 0); //OtherWizardID
		Write16(pWizardActivityInfo, 0); //OtherWizardType
		WriteString(pWizardActivityInfo, 0); //OtherWizardName[]
		WriteString(pWizardActivityInfo, 0); //OtherPlayerName[]

		len = pWizardActivityInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11482, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestSetWizardHomeDressInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	{ //DressInfo
		BYTE* pDressInfo = p;
		len = Read16(pDressInfo);

		bool ColorSetLen = Read8(pDressInfo);
		bool DoorPlateLen = Read8(pDressInfo);

		p += len;
	}

}

void ResponseSetWizardHomeDressInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	{ //DressInfo
		BYTE* pDressInfo = p;
		Write16(pDressInfo, 0); //len

		Write8(pDressInfo, 0); //ColorSetLen
		Write8(pDressInfo, 0); //DoorPlateLen

		len = pDressInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11530, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyG2CCreateNewWizard(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	{ //WizardBaseInfo
		BYTE* pWizardBaseInfo = p;
		Write16(pWizardBaseInfo, 0); //len

		Write16(pWizardBaseInfo, 0); //WizardID
		Write16(pWizardBaseInfo, 0); //WizardType
		WriteString(pWizardBaseInfo, 0); //Nickname[]
		Write32(pWizardBaseInfo, 0); //Experience
		Write8(pWizardBaseInfo, 0); //Level
		Write8(pWizardBaseInfo, 0); //Order
		Write32(pWizardBaseInfo, 0); //Health
		Write8(pWizardBaseInfo, 0); //IsRare
		Write8(pWizardBaseInfo, 0); //Intimacy
		Write8(pWizardBaseInfo, 0); //IsHuanHua
		Write8(pWizardBaseInfo, 0); //IsShow
		Write8(pWizardBaseInfo, 0); //IsCarry
		Write8(pWizardBaseInfo, 0); //MaxSkillNum
		{ //WizardSkillInfoList
			BYTE* pWizardSkillInfoList = pWizardBaseInfo;
			Write16(pWizardSkillInfoList, 0); //len

			Write8(pWizardSkillInfoList, 0); //SkillNum
			for (size_t i = 0; i < n; i++)
			{ //SkillInfo
				BYTE* pSkillInfo = pWizardSkillInfoList;
				Write16(pSkillInfo, 0); //len

				Write8(pSkillInfo, 0); //SkillId
				Write8(pSkillInfo, 0); //SkillLevel

				len = pSkillInfo - pWizardSkillInfoList;
				Set16(pWizardSkillInfoList, (WORD)len);
				pWizardSkillInfoList += len;
			}

			len = pWizardSkillInfoList - pWizardBaseInfo;
			Set16(pWizardBaseInfo, (WORD)len);
			pWizardBaseInfo += len;
		}
		Write8(pWizardBaseInfo, 0); //Status
		Write32(pWizardBaseInfo, 0); //EndTime
		Write32(pWizardBaseInfo, 0); //LeftTime
		Write8(pWizardBaseInfo, 0); //EvolutionBranch
		Write16(pWizardBaseInfo, 0); //CurAdventureMapID
		Write8(pWizardBaseInfo, 0); //LastunLockMapWizardLev
		Write16(pWizardBaseInfo, 0); //Flag
		Write8(pWizardBaseInfo, 0); //JobType

		len = pWizardBaseInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11520, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetAdventureDisplayInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetAdventureDisplayInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //BCNum
	for (size_t i = 0; i < n; i++)
	{ //BC
		BYTE* pBC = p;
		Write16(pBC, 0); //len

		Write16(pBC, 0); //ContentLen

		len = pBC - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //MapNum
	for (size_t i = 0; i < n; i++)
	{ //AdventureShowItem
		BYTE* pAdventureShowItem = p;
		Write16(pAdventureShowItem, 0); //len

		Write16(pAdventureShowItem, 0); //MapID
		Write8(pAdventureShowItem, 0); //ItemNum
		Write(pAdventureShowItem, 0); //ItemID[]

		len = pAdventureShowItem - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11531, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestNewGetFriendList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);

}

void ResponseNewGetFriendList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	WriteUn(p, 0); //Uin
	Write16(p, 0); //MaxFriendNum
	Write16(p, 0); //TotalFriendNum
	Write16(p, 0); //FriendGroupNum
	for (size_t i = 0; i < n; i++)
	{ //FriendGroupInfo
		BYTE* pFriendGroupInfo = p;
		Write16(pFriendGroupInfo, 0); //len

		Write16(pFriendGroupInfo, 0); //GroupID
		WriteString(pFriendGroupInfo, 0); //GroupName[]
		Write16(pFriendGroupInfo, 0); //FriendNum
		for (size_t i = 0; i < n; i++)
		{ //Friend
			BYTE* pFriend = pFriendGroupInfo;
			Write16(pFriend, 0); //len

			Write32(pFriend, 0); //FriendUin
			Write32(pFriend, 0); //RelationFlag
			Write32(pFriend, 0); //Degree
			Write8(pFriend, 0); //Flag
			Write32(pFriend, 0); //ReadedEventID

			len = pFriend - pFriendGroupInfo;
			Set16(pFriendGroupInfo, (WORD)len);
			pFriendGroupInfo += len;
		}

		len = pFriendGroupInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 163, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GGetSignInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseC2GGetSignInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	{ //BaseInfo
		BYTE* pBaseInfo = p;
		Write16(pBaseInfo, 0); //len

		Write8(pBaseInfo, 0); //CurrentWeekSeq
		Write8(pBaseInfo, 0); //CurrentWeekDaySeq
		Write32(pBaseInfo, 0); //LeftTime
		Write8(pBaseInfo, 0); //CurrentSignNum
		Write8(pBaseInfo, 0); //CurrentMatchNum
		Write8(pBaseInfo, 0); //TotalMatchNum

		len = pBaseInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //TipsInfo
		BYTE* pTipsInfo = p;
		Write16(pTipsInfo, 0); //len

		Write16(pTipsInfo, 0); //TipsLen

		len = pTipsInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //StatusEntityNum
	for (size_t i = 0; i < n; i++)
	{ //StatusEntities
		BYTE* pStatusEntities = p;
		Write16(pStatusEntities, 0); //len

		Write8(pStatusEntities, 0); //WeekDaySeq
		Write8(pStatusEntities, 0); //SignStatus

		len = pStatusEntities - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //AwardEntityNum
	for (size_t i = 0; i < n; i++)
	{ //AwardEntities
		BYTE* pAwardEntities = p;
		Write16(pAwardEntities, 0); //len

		Write8(pAwardEntities, 0); //AwardSeq
		Write8(pAwardEntities, 0); //AwardStatus
		Write8(pAwardEntities, 0); //TotalNum
		{ //Award
			BYTE* pAward = pAwardEntities;
			Write16(pAward, 0); //len

			Write32(pAward, 0); //Exp
			Write32(pAward, 0); //Money
			Write32(pAward, 0); //SuperMoney
			Write16(pAward, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAward;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute

				len = pItemInfo - pAward;
				Set16(pAward, (WORD)len);
				pAward += len;
			}
			Write32(pAward, 0); //Coupons
			Write32(pAward, 0); //GuildPoint
			Write32(pAward, 0); //LuckMoney

			len = pAward - pAwardEntities;
			Set16(pAwardEntities, (WORD)len);
			pAwardEntities += len;
		}

		len = pAwardEntities - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ControlAwardNum
	for (size_t i = 0; i < n; i++)
	{ //ControlAwardEntities
		BYTE* pControlAwardEntities = p;
		Write16(pControlAwardEntities, 0); //len

		Write8(pControlAwardEntities, 0); //WeekSeq
		Write32(pControlAwardEntities, 0); //ItemID

		len = pControlAwardEntities - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 233, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GSign(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR WeekDaySeq = Read8(p);
	UCHAR Type = Read8(p);

}

void ResponseC2GSign(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //Result
	Write8(p, 0); //WeekDaySeq
	Write8(p, 0); //Type
	{ //BaseInfo
		BYTE* pBaseInfo = p;
		Write16(pBaseInfo, 0); //len

		Write8(pBaseInfo, 0); //CurrentWeekSeq
		Write8(pBaseInfo, 0); //CurrentWeekDaySeq
		Write32(pBaseInfo, 0); //LeftTime
		Write8(pBaseInfo, 0); //CurrentSignNum
		Write8(pBaseInfo, 0); //CurrentMatchNum
		Write8(pBaseInfo, 0); //TotalMatchNum

		len = pBaseInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasStatusEntity
	for (size_t i = 0; i < n; i++)
	{ //StatusEntity
		BYTE* pStatusEntity = p;
		Write16(pStatusEntity, 0); //len

		Write8(pStatusEntity, 0); //WeekDaySeq
		Write8(pStatusEntity, 0); //SignStatus

		len = pStatusEntity - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 234, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GGetSignAward(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR AwardSeq = Read8(p);

}

void ResponseC2GGetSignAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //Result
	Write8(p, 0); //AwardSeq
	Write8(p, 0); //HasAward
	for (size_t i = 0; i < n; i++)
	{ //Award
		BYTE* pAward = p;
		Write16(pAward, 0); //len

		Write32(pAward, 0); //Exp
		Write32(pAward, 0); //Money
		Write32(pAward, 0); //SuperMoney
		Write16(pAward, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAward;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute

			len = pItemInfo - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write32(pAward, 0); //Coupons
		Write32(pAward, 0); //GuildPoint
		Write32(pAward, 0); //LuckMoney

		len = pAward - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //NewAwardStatus

	len = p - buf;
	SendToClient(Client, 235, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyG2CUpdateSignInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //HasBaseInfo
	for (size_t i = 0; i < n; i++)
	{ //BaseInfo
		BYTE* pBaseInfo = p;
		Write16(pBaseInfo, 0); //len

		Write8(pBaseInfo, 0); //CurrentWeekSeq
		Write8(pBaseInfo, 0); //CurrentWeekDaySeq
		Write32(pBaseInfo, 0); //LeftTime
		Write8(pBaseInfo, 0); //CurrentSignNum
		Write8(pBaseInfo, 0); //CurrentMatchNum
		Write8(pBaseInfo, 0); //TotalMatchNum

		len = pBaseInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasTipsInfo
	for (size_t i = 0; i < n; i++)
	{ //TipsInfo
		BYTE* pTipsInfo = p;
		Write16(pTipsInfo, 0); //len

		Write16(pTipsInfo, 0); //TipsLen

		len = pTipsInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //StatusEntityNum
	for (size_t i = 0; i < n; i++)
	{ //StatusEntities
		BYTE* pStatusEntities = p;
		Write16(pStatusEntities, 0); //len

		Write8(pStatusEntities, 0); //WeekDaySeq
		Write8(pStatusEntities, 0); //SignStatus

		len = pStatusEntities - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //AwardEntityNum
	for (size_t i = 0; i < n; i++)
	{ //AwardEntities
		BYTE* pAwardEntities = p;
		Write16(pAwardEntities, 0); //len

		Write8(pAwardEntities, 0); //AwardSeq
		Write8(pAwardEntities, 0); //AwardStatus
		Write8(pAwardEntities, 0); //TotalNum
		{ //Award
			BYTE* pAward = pAwardEntities;
			Write16(pAward, 0); //len

			Write32(pAward, 0); //Exp
			Write32(pAward, 0); //Money
			Write32(pAward, 0); //SuperMoney
			Write16(pAward, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAward;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute

				len = pItemInfo - pAward;
				Set16(pAward, (WORD)len);
				pAward += len;
			}
			Write32(pAward, 0); //Coupons
			Write32(pAward, 0); //GuildPoint
			Write32(pAward, 0); //LuckMoney

			len = pAward - pAwardEntities;
			Set16(pAwardEntities, (WORD)len);
			pAwardEntities += len;
		}

		len = pAwardEntities - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ControlAwardNum
	for (size_t i = 0; i < n; i++)
	{ //ControlAwardEntities
		BYTE* pControlAwardEntities = p;
		Write16(pControlAwardEntities, 0); //len

		Write8(pControlAwardEntities, 0); //WeekSeq
		Write32(pControlAwardEntities, 0); //ItemID

		len = pControlAwardEntities - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 236, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestC2GMagicCardGetNews(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int Ver = Read32(p);

}

void ResponseC2GMagicCardGetNews(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	{ //MagicCardNews
		BYTE* pMagicCardNews = p;
		Write16(pMagicCardNews, 0); //len

		Write32(pMagicCardNews, 0); //Ver
		Write16(pMagicCardNews, 0); //CardNum
		Write32(pMagicCardNews, 0); //CardList[]
		Write16(pMagicCardNews, 0); //TimeDescLen
		Write16(pMagicCardNews, 0); //MapNum
		Write32(pMagicCardNews, 0); //MapList[]
		Write16(pMagicCardNews, 0); //OtherDescLen

		len = pMagicCardNews - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 12000, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyC2GMagicCardNotifyCardsEverHad(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //CardNum
	for (size_t i = 0; i < n; i++)
	{ //CardInfo
		BYTE* pCardInfo = p;
		Write16(pCardInfo, 0); //len

		Write32(pCardInfo, 0); //CardID
		Write32(pCardInfo, 0); //LastGetTime

		len = pCardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //LeftFreeRandTransformNum

	len = p - buf;
	SendToClient(Client, 12001, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestC2GMagicCardGetExchangeInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT Version = Read16(p);

}

void ResponseC2GMagicCardGetExchangeInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //Version
	Write16(p, 0); //ExchangeNum
	for (size_t i = 0; i < n; i++)
	{ //ExchangeList
		BYTE* pExchangeList = p;
		Write16(pExchangeList, 0); //len

		Write32(pExchangeList, 0); //ConsumeCardID
		Write32(pExchangeList, 0); //ProduceCarID
		Write32(pExchangeList, 0); //ExchangeCardID
		Write8(pExchangeList, 0); //RuleNum
		for (size_t i = 0; i < n; i++)
		{ //Rules
			BYTE* pRules = pExchangeList;
			Write16(pRules, 0); //len

			Write32(pRules, 0); //AvailPeriod
			Write16(pRules, 0); //NeedCardNum
			Write16(pRules, 0); //NeedExchangeCardNum

			len = pRules - pExchangeList;
			Set16(pExchangeList, (WORD)len);
			pExchangeList += len;
		}
		Write32(pExchangeList, 0); //StartTime
		Write32(pExchangeList, 0); //EndTime

		len = pExchangeList - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 12002, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GMagicCardCompound(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR ElementNum = Read8(p);
	for (size_t i = 0; i < n; i++)
	{ //Element
		BYTE* pElement = p;
		len = Read16(pElement);

		int CardID = Read32(pElement);
		UCHAR CardNum = Read8(pElement);

		p += len;
	}

}

void ResponseC2GMagicCardCompound(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //ProduceCardID
	Write32(p, 0); //ExpInc
	Write8(p, 0); //ElementNum
	for (size_t i = 0; i < n; i++)
	{ //Element
		BYTE* pElement = p;
		Write16(pElement, 0); //len

		Write32(pElement, 0); //CardID
		Write8(pElement, 0); //CardNum

		len = pElement - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 12003, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GMagicCardExchange(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT Version = Read16(p);
	int CardID = Read32(p);
	int AvailPeriod = Read32(p);

}

void ResponseC2GMagicCardExchange(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //ProduceCarID
	Write32(p, 0); //AvailPeriod
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 12004, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GMagicCardTransform(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR TransType = Read8(p);
	int CardID = Read32(p);
	int AppointCardID = Read32(p);

}

void ResponseC2GMagicCardTransform(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //ProduceCardID
	Write32(p, 0); //ExpInc
	Write32(p, 0); //LeftFreeRandTransformNum
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 12005, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyC2GMagicCardNotifyGenCardAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //CardID
	Write32(p, 0); //OtherCards[]

	len = p - buf;
	SendToClient(Client, 12006, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestG2DMagicCardGetCardAward(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int CardID = Read32(p);

}

void ResponseG2DMagicCardGetCardAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //CardID

	len = p - buf;
	SendToClient(Client, 12007, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GSandglassInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseC2GSandglassInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //CurAccumulateTime
	{ //NotifyInfo
		BYTE* pNotifyInfo = p;
		Write16(pNotifyInfo, 0); //len

		Write8(pNotifyInfo, 0); //NotifyInGame
		Write32(pNotifyInfo, 0); //NotifyInGameTime
		Write8(pNotifyInfo, 0); //NotifyInQQ
		Write32(pNotifyInfo, 0); //NotifyInQQTime

		len = pNotifyInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //SandglassNum
	for (size_t i = 0; i < n; i++)
	{ //SandglassCfgList
		BYTE* pSandglassCfgList = p;
		Write16(pSandglassCfgList, 0); //len

		Write32(pSandglassCfgList, 0); //Time
		Write32(pSandglassCfgList, 0); //AwardExp

		len = pSandglassCfgList - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 237, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GStartSandglass(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	bool ChangeNotify = Read8(p);
	for (size_t i = 0; i < n; i++)
	{ //NotifyInfo
		BYTE* pNotifyInfo = p;
		len = Read16(pNotifyInfo);

		bool NotifyInGame = Read8(pNotifyInfo);
		UINT NotifyInGameTime = Read32(pNotifyInfo);
		bool NotifyInQQ = Read8(pNotifyInfo);
		UINT NotifyInQQTime = Read32(pNotifyInfo);

		p += len;
	}

}

void ResponseC2GStartSandglass(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 238, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GGetSandglassExp(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR GetType = Read8(p);

}

void ResponseC2GGetSandglassExp(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //GetType
	Write32(p, 0); //AwardExp

	len = p - buf;
	SendToClient(Client, 239, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyG2CSandglassExpReady(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //Time

	len = p - buf;
	SendToClient(Client, 240, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestC2GGetPlayerFizzStarBaseInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseC2GGetPlayerFizzStarBaseInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //FizzStarTaskID
	Write16(p, 0); //OneSelfFizzStarTaskAward
	Write16(p, 0); //FriendFizzStarTaskAward
	Write8(p, 0); //IsCompleted
	Write8(p, 0); //AwardDttitionMultiple
	Write16(p, 0); //FizzSource
	Write16(p, 0); //FizzStarDaily
	Write16(p, 0); //FizzStarPeriod
	Write8(p, 0); //FizzStarLotteryStatusDaily
	Write32(p, 0); //FizzSourceRecoverLeftTime
	Write8(p, 0); //IsFizzSourceFull
	Write32(p, 0); //PeriodLeftTime
	Write16(p, 0); //FizzStarRank
	Write16(p, 0); //FizzStarDecalrationFriendCount
	Write8(p, 0); //ExpectLotteryType
	Write8(p, 0); //PastLotteryType
	Write8(p, 0); //PastStatus
	Write32(p, 0); //LeftTaskAwardMultipleCount
	Write32(p, 0); //FizzStarUpdateTime

	len = p - buf;
	SendToClient(Client, 11591, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyG2CFizzStarCfg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //MaxFizzSourceTotalCount
	Write16(p, 0); //MaxFizzSourceByTimeOneDay
	Write16(p, 0); //MaxFizzSourceByRequestandBeDonatedOneDay
	Write16(p, 0); //MaxDonateFizzSourceCountOneDay
	Write32(p, 0); //FizzSourceeDonatedCoolTimeGap
	Write32(p, 0); //FizzSourceadditionTimeGap
	Write32(p, 0); //FizzStarNumUpRank
	Write8(p, 0); //DailyFizzLotteryNum
	for (size_t i = 0; i < n; i++)
	{ //DailyFizzLotteryInfo
		BYTE* pDailyFizzLotteryInfo = p;
		Write16(pDailyFizzLotteryInfo, 0); //len

		Write8(pDailyFizzLotteryInfo, 0); //LotteryType
		Write16(pDailyFizzLotteryInfo, 0); //FizzStarNum
		Write8(pDailyFizzLotteryInfo, 0); //ControlledItemNum
		Write32(pDailyFizzLotteryInfo, 0); //ControlledItem[]

		len = pDailyFizzLotteryInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //PeriodFizzLotteryNum
	for (size_t i = 0; i < n; i++)
	{ //PeriodFizzLotteryInfo
		BYTE* pPeriodFizzLotteryInfo = p;
		Write16(pPeriodFizzLotteryInfo, 0); //len

		Write8(pPeriodFizzLotteryInfo, 0); //LotteryType
		Write16(pPeriodFizzLotteryInfo, 0); //FizzStarNum
		Write16(pPeriodFizzLotteryInfo, 0); //FizzStarRank
		Write8(pPeriodFizzLotteryInfo, 0); //ControlledItemNum
		Write32(pPeriodFizzLotteryInfo, 0); //ControlledItem[]
		Write32(pPeriodFizzLotteryInfo, 0); //ExpIncRate

		len = pPeriodFizzLotteryInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11595, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestC2GGetFizzStarActivityInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseC2GFizzStarActivityInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //Num
	for (size_t i = 0; i < n; i++)
	{ //FizzStarActivityInfo
		BYTE* pFizzStarActivityInfo = p;
		Write16(pFizzStarActivityInfo, 0); //len

		Write32(pFizzStarActivityInfo, 0); //BillID
		Write32(pFizzStarActivityInfo, 0); //Uin
		WriteString(pFizzStarActivityInfo, 0); //PlayerName[]
		Write16(pFizzStarActivityInfo, 0); //ActivityType
		Write32(pFizzStarActivityInfo, 0); //ActivityTime
		Write32(pFizzStarActivityInfo, 0); //ActivityValue1
		Write32(pFizzStarActivityInfo, 0); //ActivityValue2
		Write32(pFizzStarActivityInfo, 0); //ActivityValue3
		Write32(pFizzStarActivityInfo, 0); //OtherUin
		WriteString(pFizzStarActivityInfo, 0); //OtherPlayerName[]

		len = pFizzStarActivityInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11596, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyG2CAddFizzStarActivityInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	{ //FizzStarActivityInfo
		BYTE* pFizzStarActivityInfo = p;
		Write16(pFizzStarActivityInfo, 0); //len

		Write32(pFizzStarActivityInfo, 0); //BillID
		Write32(pFizzStarActivityInfo, 0); //Uin
		WriteString(pFizzStarActivityInfo, 0); //PlayerName[]
		Write16(pFizzStarActivityInfo, 0); //ActivityType
		Write32(pFizzStarActivityInfo, 0); //ActivityTime
		Write32(pFizzStarActivityInfo, 0); //ActivityValue1
		Write32(pFizzStarActivityInfo, 0); //ActivityValue2
		Write32(pFizzStarActivityInfo, 0); //ActivityValue3
		Write32(pFizzStarActivityInfo, 0); //OtherUin
		WriteString(pFizzStarActivityInfo, 0); //OtherPlayerName[]

		len = pFizzStarActivityInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11600, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestC2GGetFizzStarFriendInfoList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	Un Time = ReadUn(p);

}

void ResponseC2GGetFizzStarFriendInfoList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //FriendNum
	for (size_t i = 0; i < n; i++)
	{ //FriendFizzStarInfo
		BYTE* pFriendFizzStarInfo = p;
		Write16(pFriendFizzStarInfo, 0); //len

		WriteUn(pFriendFizzStarInfo, 0); //Uin
		Write16(pFriendFizzStarInfo, 0); //FizzStarPeriod
		Write32(pFriendFizzStarInfo, 0); //FizzStarUpdateTime

		len = pFriendFizzStarInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11597, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GGetFizzStarTask(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseC2GGetFizzStarTask(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //TaskID
	Write16(p, 0); //OneSelfFizzStarTaskAward
	Write16(p, 0); //FriendFizzStarTaskAward
	Write8(p, 0); //AwardAdditionMultiple
	Write16(p, 0); //DstFizzSourceDec
	Write16(p, 0); //FizzSource
	Write32(p, 0); //FizzSourceRecoverLeftTime
	Write8(p, 0); //TaskType

	len = p - buf;
	SendToClient(Client, 11592, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GDonateFriendFizzSource(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT DstUin = Read32(p);

}

void ResponseC2GDonateFriendFizzSource(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 11593, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyG2CFizzSourceAddition(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	WriteString(p, 0); //SrcNickName[]
	Write16(p, 0); //FizzSourceInc
	Write16(p, 0); //FizzSourceTotal
	Write8(p, 0); //FizzSourceAdditionType

	len = p - buf;
	SendToClient(Client, 11594, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyG2CUpdateSkateTaskLevel(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //SkateTaskLevel

	len = p - buf;
	SendToClient(Client, 778, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestSkateSkillUpgrade(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	bool SkillId = Read8(p);

}

void ResponseSkateSkillUpgrade(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //SkillId
	Write8(p, 0); //SkillLevel
	Write32(p, 0); //SkateCoin

	len = p - buf;
	SendToClient(Client, 10927, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyG2CSkateCfg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //SkateSkillCfgNum
	for (size_t i = 0; i < n; i++)
	{ //SkateSkillCfg
		BYTE* pSkateSkillCfg = p;
		Write16(pSkateSkillCfg, 0); //len

		Write32(pSkateSkillCfg, 0); //SkilllLevel
		Write32(pSkateSkillCfg, 0); //UpgradeCostCoin
		Write32(pSkateSkillCfg, 0); //ExpAward

		len = pSkateSkillCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //ComboAwardCoinCfg[]
	Write32(p, 0); //SkateChannelCoinThreshold
	Write8(p, 0); //SkateChannelNum
	for (size_t i = 0; i < n; i++)
	{ //SkateChannelInfo
		BYTE* pSkateChannelInfo = p;
		Write16(pSkateChannelInfo, 0); //len

		Write32(pSkateChannelInfo, 0); //ChannelId
		Write32(pSkateChannelInfo, 0); //LowerLevel
		Write32(pSkateChannelInfo, 0); //HigerLevel
		Write32(pSkateChannelInfo, 0); //LowerCoin
		Write32(pSkateChannelInfo, 0); //HigerCoin

		len = pSkateChannelInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //MaxSkateCoinCountDaily

	len = p - buf;
	SendToClient(Client, 10928, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestC2GFizzStarLottery(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	bool LotteryFlag = Read8(p);
	bool LotteryType = Read8(p);

}

void ResponseC2GFizzStarLottery(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //LotteryFlag
	Write8(p, 0); //LotteryType
	{ //AwardMoneyExp
		BYTE* pAwardMoneyExp = p;
		Write16(pAwardMoneyExp, 0); //len

		Write32(pAwardMoneyExp, 0); //Money
		Write32(pAwardMoneyExp, 0); //SuperMoney
		Write32(pAwardMoneyExp, 0); //Exp
		Write32(pAwardMoneyExp, 0); //Charm
		Write32(pAwardMoneyExp, 0); //DanceExp
		Write32(pAwardMoneyExp, 0); //Coupons
		Write32(pAwardMoneyExp, 0); //Admiration
		Write32(pAwardMoneyExp, 0); //LuckMoney
		Write32(pAwardMoneyExp, 0); //TeamWorkExp
		Write32(pAwardMoneyExp, 0); //AchievePoint
		Write32(pAwardMoneyExp, 0); //ConsumeScore
		Write32(pAwardMoneyExp, 0); //HistoryConsumeScore
		Write32(pAwardMoneyExp, 0); //LadderMatchAchievePoint

		len = pAwardMoneyExp - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //AwardItemNum
	for (size_t i = 0; i < n; i++)
	{ //AwardItemInfo
		BYTE* pAwardItemInfo = p;
		Write16(pAwardItemInfo, 0); //len

		Write32(pAwardItemInfo, 0); //ItemID
		Write32(pAwardItemInfo, 0); //ItemNum
		Write32(pAwardItemInfo, 0); //AvailPeriod
		Write8(pAwardItemInfo, 0); //Status
		WriteUn(pAwardItemInfo, 0); //ObtainTime
		Write32(pAwardItemInfo, 0); //OtherAttribute

		len = pAwardItemInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11599, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GGetFizzStarRecommendList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseC2GGetFizzStarRecommendList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //PlayerNum
	for (size_t i = 0; i < n; i++)
	{ //PlayerFizzStarRecommendInfo
		BYTE* pPlayerFizzStarRecommendInfo = p;
		Write16(pPlayerFizzStarRecommendInfo, 0); //len

		Write32(pPlayerFizzStarRecommendInfo, 0); //Uin
		WriteString(pPlayerFizzStarRecommendInfo, 0); //Nickname[]
		Write32(pPlayerFizzStarRecommendInfo, 0); //Experience

		len = pPlayerFizzStarRecommendInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11601, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyG2CFizzStarSpecialTaskAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //FizzStarTaskAward
	Write8(p, 0); //HasAward
	for (size_t i = 0; i < n; i++)
	{ //AwardMoneyExp
		BYTE* pAwardMoneyExp = p;
		Write16(pAwardMoneyExp, 0); //len

		Write32(pAwardMoneyExp, 0); //Money
		Write32(pAwardMoneyExp, 0); //SuperMoney
		Write32(pAwardMoneyExp, 0); //Exp
		Write32(pAwardMoneyExp, 0); //Charm
		Write32(pAwardMoneyExp, 0); //DanceExp
		Write32(pAwardMoneyExp, 0); //Coupons
		Write32(pAwardMoneyExp, 0); //Admiration
		Write32(pAwardMoneyExp, 0); //LuckMoney
		Write32(pAwardMoneyExp, 0); //TeamWorkExp
		Write32(pAwardMoneyExp, 0); //AchievePoint
		Write32(pAwardMoneyExp, 0); //ConsumeScore
		Write32(pAwardMoneyExp, 0); //HistoryConsumeScore
		Write32(pAwardMoneyExp, 0); //LadderMatchAchievePoint

		len = pAwardMoneyExp - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11602, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestReceiveGuildVipGift(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseReceiveGuildVipGift(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //GiftID

	len = p - buf;
	SendToClient(Client, 12032, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetGVLottoryCommodityInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetGVLottoryCommodityInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	{ //Info
		BYTE* pInfo = p;
		Write16(pInfo, 0); //len

		Write8(pInfo, 0); //Type
		{ //Award
			BYTE* pAward = pInfo;
			Write16(pAward, 0); //len

			Write32(pAward, 0); //Exp
			Write32(pAward, 0); //Money
			Write32(pAward, 0); //SuperMoney
			Write16(pAward, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAward;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute

				len = pItemInfo - pAward;
				Set16(pAward, (WORD)len);
				pAward += len;
			}
			Write32(pAward, 0); //Coupons
			Write32(pAward, 0); //GuildPoint
			Write32(pAward, 0); //LuckMoney

			len = pAward - pInfo;
			Set16(pInfo, (WORD)len);
			pInfo += len;
		}
		Write16(pInfo, 0); //RemainTime

		len = pInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //BCNum
	for (size_t i = 0; i < n; i++)
	{ //BC
		BYTE* pBC = p;
		Write16(pBC, 0); //len

		Write16(pBC, 0); //ContentLen

		len = pBC - p;
		Set16(p, (WORD)len);
		p += len;
	}
	for (size_t i = 0; i < n; i++)
	{ //AwardInfo
		BYTE* pAwardInfo = p;
		Write16(pAwardInfo, 0); //len

		Write32(pAwardInfo, 0); //Exp
		Write32(pAwardInfo, 0); //Money
		Write32(pAwardInfo, 0); //SuperMoney
		Write16(pAwardInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAwardInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute

			len = pItemInfo - pAwardInfo;
			Set16(pAwardInfo, (WORD)len);
			pAwardInfo += len;
		}
		Write32(pAwardInfo, 0); //Coupons
		Write32(pAwardInfo, 0); //GuildPoint
		Write32(pAwardInfo, 0); //LuckMoney

		len = pAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 12037, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestRandGVLottoryCommodity(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR Type = Read8(p);

}

void ResponseRandGVLottoryCommodity(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	{ //Info
		BYTE* pInfo = p;
		Write16(pInfo, 0); //len

		Write8(pInfo, 0); //Type
		{ //Award
			BYTE* pAward = pInfo;
			Write16(pAward, 0); //len

			Write32(pAward, 0); //Exp
			Write32(pAward, 0); //Money
			Write32(pAward, 0); //SuperMoney
			Write16(pAward, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAward;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute

				len = pItemInfo - pAward;
				Set16(pAward, (WORD)len);
				pAward += len;
			}
			Write32(pAward, 0); //Coupons
			Write32(pAward, 0); //GuildPoint
			Write32(pAward, 0); //LuckMoney

			len = pAward - pInfo;
			Set16(pInfo, (WORD)len);
			pInfo += len;
		}
		Write16(pInfo, 0); //RemainTime

		len = pInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 12038, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestBuyGVLottoryCommodity(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseBuyGVLottoryCommodity(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //HasAward
	for (size_t i = 0; i < n; i++)
	{ //AwardInfo
		BYTE* pAwardInfo = p;
		Write16(pAwardInfo, 0); //len

		Write32(pAwardInfo, 0); //Exp
		Write32(pAwardInfo, 0); //Money
		Write32(pAwardInfo, 0); //SuperMoney
		Write16(pAwardInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAwardInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute

			len = pItemInfo - pAwardInfo;
			Set16(pAwardInfo, (WORD)len);
			pAwardInfo += len;
		}
		Write32(pAwardInfo, 0); //Coupons
		Write32(pAwardInfo, 0); //GuildPoint
		Write32(pAwardInfo, 0); //LuckMoney

		len = pAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //Type

	len = p - buf;
	SendToClient(Client, 12039, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestPopularity(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT SrcUin = Read32(p);
	UINT DstUin = Read32(p);
	UINT Time = Read32(p);
	short WordLength = Read16(p);
	short RoseNum = Read16(p);

}

void ResponsePopularity(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //SrcUin
	Write32(p, 0); //DstUin
	Write16(p, 0); //ResultID
	Write16(p, 0); //RoseNum

	len = p - buf;
	SendToClient(Client, 1700, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetLadderMatchInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetLadderMatchInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	{ //PlayerLDMDetailInfo
		BYTE* pPlayerLDMDetailInfo = p;
		Write16(pPlayerLDMDetailInfo, 0); //len

		Write8(pPlayerLDMDetailInfo, 0); //NextGrade
		Write32(pPlayerLDMDetailInfo, 0); //NextGradeLeftScore
		{ //RankInfo
			BYTE* pRankInfo = pPlayerLDMDetailInfo;
			Write16(pRankInfo, 0); //len

			Write8(pRankInfo, 0); //RankType
			Write8(pRankInfo, 0); //RankValue

			len = pRankInfo - pPlayerLDMDetailInfo;
			Set16(pPlayerLDMDetailInfo, (WORD)len);
			pPlayerLDMDetailInfo += len;
		}
		Write8(pPlayerLDMDetailInfo, 0); //BadgeType
		Write32(pPlayerLDMDetailInfo, 0); //MatchCount
		Write32(pPlayerLDMDetailInfo, 0); //WinCount
		Write32(pPlayerLDMDetailInfo, 0); //WinStreakCount
		Write32(pPlayerLDMDetailInfo, 0); //MaxWinStreakCount
		Write32(pPlayerLDMDetailInfo, 0); //CollisionCount
		Write32(pPlayerLDMDetailInfo, 0); //BeatCount

		len = pPlayerLDMDetailInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen
	Write16(p, 0); //LeftDayCurSeason

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetLadderMatchRecord(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetLadderMatchRecord(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	{ //Record
		BYTE* pRecord = p;
		Write16(pRecord, 0); //len

		Write16(pRecord, 0); //RecordNum
		for (size_t i = 0; i < n; i++)
		{ //Record
			BYTE* pRecord = pRecord;
			Write16(pRecord, 0); //len

			Write32(pRecord, 0); //GameTime
			Write32(pRecord, 0); //FinTime
			Write32(pRecord, 0); //Rank
			Write32(pRecord, 0); //MapID
			Write32(pRecord, 0); //RecordID
			Write8(pRecord, 0); //MatchFlag
			Write32(pRecord, 0); //ScoreInc

			len = pRecord - pRecord;
			Set16(pRecord, (WORD)len);
			pRecord += len;
		}

		len = pRecord - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestParticipateLadderMatch(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseParticipateLadderMatch(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen
	Write16(p, 0); //TimeoutSec

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestCancelParticipateLadderMatch(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseCancelParticipateLadderMatch(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyPlayerParticipateLadderMatchReady(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ServerID
	WriteU(p, 0); //ExtenalIP
	Write8(p, 0); //ExtTcpPortNum
	Write16(p, 0); //ExternalTcpPort[]
	Write8(p, 0); //ExtUdpPortNum
	Write16(p, 0); //ExternalUdpPort[]
	Write32(p, 0); //RoomID
	Write32(p, 0); //WaitGameBeginTime

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyPlayerParticipateLadderMatchTimeout(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyPlayerLadderMatchBeginCountDown(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //CountDownTime

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetLadderMatchPlayerToplist(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetLadderMatchPlayerToplist(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	{ //ToplistInfo
		BYTE* pToplistInfo = p;
		Write16(pToplistInfo, 0); //len

		Write32(pToplistInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //Item
			BYTE* pItem = pToplistInfo;
			Write16(pItem, 0); //len

			Write32(pItem, 0); //Uin
			WriteString(pItem, 0); //Nickname[]
			Write32(pItem, 0); //Score
			Write8(pItem, 0); //Grade

			len = pItem - pToplistInfo;
			Set16(pToplistInfo, (WORD)len);
			pToplistInfo += len;
		}

		len = pToplistInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetLadderMatchGuildToplist(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetLadderMatchGuildToplist(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	{ //ToplistInfo
		BYTE* pToplistInfo = p;
		Write16(pToplistInfo, 0); //len

		Write32(pToplistInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //Item
			BYTE* pItem = pToplistInfo;
			Write16(pItem, 0); //len

			Write32(pItem, 0); //GuildID
			Write32(pItem, 0); //GuildScore
			WriteString(pItem, 0); //Name[]
			Write16(pItem, 0); //Attribute

			len = pItem - pToplistInfo;
			Set16(pToplistInfo, (WORD)len);
			pToplistInfo += len;
		}

		len = pToplistInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestReceiveLadderMatchAward(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseReceiveLadderMatchAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //Grade
	{ //Award
		BYTE* pAward = p;
		Write16(pAward, 0); //len

		Write32(pAward, 0); //Exp
		Write32(pAward, 0); //Money
		Write32(pAward, 0); //SuperMoney
		Write16(pAward, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAward;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute

			len = pItemInfo - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write32(pAward, 0); //Coupons
		Write32(pAward, 0); //GuildPoint
		Write32(pAward, 0); //LuckMoney

		len = pAward - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyPlayerLadderMatchAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //SeasonID
	Write8(p, 0); //Grade
	{ //Award
		BYTE* pAward = p;
		Write16(pAward, 0); //len

		Write32(pAward, 0); //Exp
		Write32(pAward, 0); //Money
		Write32(pAward, 0); //SuperMoney
		Write16(pAward, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAward;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute

			len = pItemInfo - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write32(pAward, 0); //Coupons
		Write32(pAward, 0); //GuildPoint
		Write32(pAward, 0); //LuckMoney

		len = pAward - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetLadderMatchAwardCfg(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetLadderMatchAwardCfg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	for (size_t i = 0; i < n; i++)
	{ //GradeAward
		BYTE* pGradeAward = p;
		Write16(pGradeAward, 0); //len

		Write32(pGradeAward, 0); //Exp
		Write32(pGradeAward, 0); //Money
		Write32(pGradeAward, 0); //SuperMoney
		Write16(pGradeAward, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pGradeAward;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute

			len = pItemInfo - pGradeAward;
			Set16(pGradeAward, (WORD)len);
			pGradeAward += len;
		}
		Write32(pGradeAward, 0); //Coupons
		Write32(pGradeAward, 0); //GuildPoint
		Write32(pGradeAward, 0); //LuckMoney

		len = pGradeAward - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetLadderMatchAchieveList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetLadderMatchAchieveList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //Result
	Write16(p, 0); //AchieveNum
	for (size_t i = 0; i < n; i++)
	{ //Achieves
		BYTE* pAchieves = p;
		Write16(pAchieves, 0); //len

		Write16(pAchieves, 0); //ID
		Write8(pAchieves, 0); //ShowType
		Write8(pAchieves, 0); //LogicType
		Write8(pAchieves, 0); //Status
		Write16(pAchieves, 0); //Progress
		Write16(pAchieves, 0); //TotalProgress
		Write32(pAchieves, 0); //FinTime
		Write16(pAchieves, 0); //AchieveValue
		Write32(pAchieves, 0); //AchieveFlagType

		len = pAchieves - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //UnLockLadderMatchLogicType

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestQueryLadderMatchAchieveAwardCfg(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseQueryLadderMatchAchieveAwardCfg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //Result
	Write16(p, 0); //AchieveNum
	for (size_t i = 0; i < n; i++)
	{ //AchieveAwardCfg
		BYTE* pAchieveAwardCfg = p;
		Write16(pAchieveAwardCfg, 0); //len

		Write16(pAchieveAwardCfg, 0); //AchieveID
		{ //AwardMoneyExp
			BYTE* pAwardMoneyExp = pAchieveAwardCfg;
			Write16(pAwardMoneyExp, 0); //len

			Write32(pAwardMoneyExp, 0); //Money
			Write32(pAwardMoneyExp, 0); //SuperMoney
			Write32(pAwardMoneyExp, 0); //Exp
			Write32(pAwardMoneyExp, 0); //Charm
			Write32(pAwardMoneyExp, 0); //DanceExp
			Write32(pAwardMoneyExp, 0); //Coupons
			Write32(pAwardMoneyExp, 0); //Admiration
			Write32(pAwardMoneyExp, 0); //LuckMoney
			Write32(pAwardMoneyExp, 0); //TeamWorkExp
			Write32(pAwardMoneyExp, 0); //AchievePoint
			Write32(pAwardMoneyExp, 0); //ConsumeScore
			Write32(pAwardMoneyExp, 0); //HistoryConsumeScore
			Write32(pAwardMoneyExp, 0); //LadderMatchAchievePoint

			len = pAwardMoneyExp - pAchieveAwardCfg;
			Set16(pAchieveAwardCfg, (WORD)len);
			pAchieveAwardCfg += len;
		}
		Write16(pAchieveAwardCfg, 0); //AwardItemNum
		for (size_t i = 0; i < n; i++)
		{ //AwardItem
			BYTE* pAwardItem = pAchieveAwardCfg;
			Write16(pAwardItem, 0); //len

			Write32(pAwardItem, 0); //ItemID
			Write32(pAwardItem, 0); //ItemNum
			Write32(pAwardItem, 0); //AvailPeriod
			Write8(pAwardItem, 0); //Status
			WriteUn(pAwardItem, 0); //ObtainTime
			Write32(pAwardItem, 0); //OtherAttribute

			len = pAwardItem - pAchieveAwardCfg;
			Set16(pAchieveAwardCfg, (WORD)len);
			pAchieveAwardCfg += len;
		}

		len = pAchieveAwardCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyDeductLadderMatchScore(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //AttachInfoLen

	len = p - buf;
	SendToClient(Client, 13059, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyForbiddenMode(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //LeftTime
	Write16(p, 0); //AttachInfoLen

	len = p - buf;
	SendToClient(Client, 13063, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyMatchLiveInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	{ //Info
		BYTE* pInfo = p;
		Write16(pInfo, 0); //len

		Write8(pInfo, 0); //Status
		Write16(pInfo, 0); //TipsLen
		Write16(pInfo, 0); //URLLen

		len = pInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 242, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestWishTreeInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void RequestWishTreeWater(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void RequestWishTreeBuyCommodity(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR BuyIdx = Read8(p);
	UCHAR BuyType = Read8(p);
	UINT ItemID = Read32(p);

}

void NotifySGS2CWlActivityStatus(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //TimeNow
	Write32(p, 0); //ActivityID
	Write32(p, 0); //WlActivityType
	Write32(p, 0); //WlActivityStatus

	len = p - buf;
	SendToClient(Client, 13101, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestC2GActivityDetailInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT ClientActivityCfgVersion = Read32(p);

}

void NotifySGS2CWlActivityInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //TimeNow
	Write32(p, 0); //ActivityNum
	for (size_t i = 0; i < n; i++)
	{ //ActivityInfo
		BYTE* pActivityInfo = p;
		Write16(pActivityInfo, 0); //len

		Write32(pActivityInfo, 0); //ActivityID
		Write32(pActivityInfo, 0); //WlactivityType
		Write32(pActivityInfo, 0); //WlActivityStatus
		Write32(pActivityInfo, 0); //WlActivityiTime
		Write32(pActivityInfo, 0); //WlactivityPeriod

		len = pActivityInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //TimeTableWebCfg
		BYTE* pTimeTableWebCfg = p;
		Write16(pTimeTableWebCfg, 0); //len

		Write8(pTimeTableWebCfg, 0); //IsHasWeb
		WriteString(pTimeTableWebCfg, 0); //WebSiteContent[]

		len = pTimeTableWebCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 13102, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void ResponseC2GActivityDetailInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //Result
	Write32(p, 0); //ClientActivityCfgVersion
	Write8(p, 0); //ActivityNum
	for (size_t i = 0; i < n; i++)
	{ //ActivityCfg
		BYTE* pActivityCfg = p;
		Write16(pActivityCfg, 0); //len

		Write32(pActivityCfg, 0); //WlactivityType
		WriteU(pActivityCfg, 0); //WlActNameLen
		WriteU(pActivityCfg, 0); //WlActDescLen
		WriteU(pActivityCfg, 0); //WlActAwardLen
		WriteUn(pActivityCfg, 0); //WlActLabel
		WriteUn(pActivityCfg, 0); //WlActTab
		Write32(pActivityCfg, 0); //WlActivityNpcId

		len = pActivityCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 13103, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyPlayerInActivity(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //ActivityID
	Write32(p, 0); //WlActivityType
	Write32(p, 0); //WlPlayerActStatus

	len = p - buf;
	SendToClient(Client, 13104, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyWL2CHorseLight(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //HorseLightType
	Write32(p, 0); //HorseLightPri
	Write16(p, 0); //ContentLen

	len = p - buf;
	SendToClient(Client, 13105, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyWlLoginTips(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //TipsNum
	for (size_t i = 0; i < n; i++)
	{ //LoginTipsList
		BYTE* pLoginTipsList = p;
		Write16(pLoginTipsList, 0); //len

		Write8(pLoginTipsList, 0); //TipsType
		Write16(pLoginTipsList, 0); //UrlLen
		Write16(pLoginTipsList, 0); //MsgLen

		len = pLoginTipsList - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 995, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestBroadCastWlQTRoom(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseBroadCastWlQTRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteU(p, 0); //ResultID
	Write16(p, 0); //ReasonLen
	Write16(p, 0); //Msg

	len = p - buf;
	SendToClient(Client, 996, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestMatchingGame(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT BaseID = Read16(p);
	USHORT SubID = Read16(p);
	UCHAR MatchingType = Read8(p);

}

void ResponseMatchingGame(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen
	Write16(p, 0); //TimeoutSec
	Write8(p, 0); //MatchingType

	len = p - buf;
	SendToClient(Client, 13110, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestCancelMatchingGame(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseCancelMatchingGame(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 13111, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyPlayerMatchingGameResult(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //RoomID
	Write8(p, 0); //MatchingType

	len = p - buf;
	SendToClient(Client, 13112, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyClientUpdateGuildVipInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	{ //BaseInfo
		BYTE* pBaseInfo = p;
		Write16(pBaseInfo, 0); //len

		Write8(pBaseInfo, 0); //GuildVipLevel
		Write32(pBaseInfo, 0); //GuildVipPoint

		len = pBaseInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //OtherInfo
		BYTE* pOtherInfo = p;
		Write16(pOtherInfo, 0); //len

		Write32(pOtherInfo, 0); //GuildVipLeftDays
		Write8(pOtherInfo, 0); //CanReceiveGift

		len = pOtherInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 12031, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestRandomOneNobleID(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR RandType = Read8(p);

}

void ResponseRandomOneNobleID(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //RandType
	Write32(p, 0); //NobleID
	Write8(p, 0); //CanBroadcast

	len = p - buf;
	SendToClient(Client, 1652, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestDropRandomNobleID(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT NobleID = Read32(p);

}

void RequestReplaceNobleID(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT NobleID = Read32(p);
	UCHAR NeedBroadcast = Read8(p);

}

void ResponseReplaceNobleID(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //NobleID

	len = p - buf;
	SendToClient(Client, 1654, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestRegister(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	char[] Nickname[] = ReadString(p);
	bool Gender = Read8(p);
	bool Country = Read8(p);
	int RoleID = Read32(p);
	int HairID = Read32(p);
	int FaceID = Read32(p);
	int CoatID = Read32(p);
	int GloveID = Read32(p);
	int TrousersID = Read32(p);
	int KartID = Read32(p);
	int ColorID = Read32(p);

}

void RequestRegister2(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	char[] Nickname[] = ReadString(p);
	bool Gender = Read8(p);
	bool Country = Read8(p);
	int RoleID = Read32(p);
	int HairID = Read32(p);
	int FaceID = Read32(p);
	int CoatID = Read32(p);
	int GloveID = Read32(p);
	int TrousersID = Read32(p);
	int KartID = Read32(p);
	int ColorID = Read32(p);
	bool WriteQQzoneLog = Read8(p);
	int Dummy = Read32(p);

}

void ResponseRegister(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	WriteUn(p, 0); //Uin
	WriteString(p, 0); //Nickname[]
	Write8(p, 0); //Gender
	Write8(p, 0); //Country
	Write16(p, 0); //AddItemNum
	for (size_t i = 0; i < n; i++)
	{ //AddItemInfo
		BYTE* pAddItemInfo = p;
		Write16(pAddItemInfo, 0); //len

		Write32(pAddItemInfo, 0); //ItemID
		Write32(pAddItemInfo, 0); //ItemNum
		Write32(pAddItemInfo, 0); //AvailPeriod
		Write8(pAddItemInfo, 0); //Status
		WriteUn(pAddItemInfo, 0); //ObtainTime
		Write32(pAddItemInfo, 0); //OtherAttribute

		len = pAddItemInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //AddTaskNum
	for (size_t i = 0; i < n; i++)
	{ //AddTaskInfo
		BYTE* pAddTaskInfo = p;
		Write16(pAddTaskInfo, 0); //len

		Write32(pAddTaskInfo, 0); //TaskID
		Write16(pAddTaskInfo, 0); //OptionID
		Write8(pAddTaskInfo, 0); //Status
		Write8(pAddTaskInfo, 0); //PrevStatus
		Write32(pAddTaskInfo, 0); //ProgressRate
		Write32(pAddTaskInfo, 0); //Other
		Write32(pAddTaskInfo, 0); //TakeTime
		Write32(pAddTaskInfo, 0); //LastUpdateTime

		len = pAddTaskInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 129, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestLogin(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	Un ClientVersion = ReadUn(p);
	char[] QQNickname[] = ReadString(p);
	bool Gender = Read8(p);
	bool IconID = Read8(p);
	Un AttachIdentify = ReadUn(p);
	UINT LoginType = Read32(p);
	UINT LoaderTipVersion = Read32(p);
	UINT ClientStatusContex = Read32(p);
	UCHAR IsSimplifyVersion = Read8(p);
	UINT CurTopMapRecordVersion = Read32(p);
	UINT CurKartRoomPushInfoVersion = Read32(p);
	short PreSvrID = Read16(p);
	UCHAR TGPSignatureLen = Read8(p);
	UINT RandomKey = Read32(p);

}

void ResponseLogin(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //KeyGameDataLength
	WriteUn(p, 0); //Uin
	WriteUn(p, 0); //Identity
	Write16(p, 0); //PlayerID
	Write32(p, 0); //LoginType
	WriteUn(p, 0); //GameSvrdIdentity
	{ //PlayerDBBaseInfo
		BYTE* pPlayerDBBaseInfo = p;
		Write16(pPlayerDBBaseInfo, 0); //len

		WriteString(pPlayerDBBaseInfo, 0); //Nickname[]
		Write8(pPlayerDBBaseInfo, 0); //Gender
		Write8(pPlayerDBBaseInfo, 0); //Country
		Write32(pPlayerDBBaseInfo, 0); //License
		WriteUn(pPlayerDBBaseInfo, 0); //Experience
		Write32(pPlayerDBBaseInfo, 0); //SuperMoney
		Write32(pPlayerDBBaseInfo, 0); //Money
		WriteUn(pPlayerDBBaseInfo, 0); //WinNum
		Write32(pPlayerDBBaseInfo, 0); //SecondNum
		Write32(pPlayerDBBaseInfo, 0); //ThirdNum
		WriteUn(pPlayerDBBaseInfo, 0); //TotalNum
		Write32(pPlayerDBBaseInfo, 0); //CurHonor
		Write32(pPlayerDBBaseInfo, 0); //TotalHonor
		Write32(pPlayerDBBaseInfo, 0); //TodayHonor
		Write32(pPlayerDBBaseInfo, 0); //RelaxTime
		Write32(pPlayerDBBaseInfo, 0); //MonthDurationBefore
		Write32(pPlayerDBBaseInfo, 0); //MonthDurationCur
		Write32(pPlayerDBBaseInfo, 0); //Charm
		Write32(pPlayerDBBaseInfo, 0); //DurationGame
		Write32(pPlayerDBBaseInfo, 0); //DanceExp
		Write32(pPlayerDBBaseInfo, 0); //Coupons
		Write32(pPlayerDBBaseInfo, 0); //Admiration
		Write32(pPlayerDBBaseInfo, 0); //LuckMoney
		Write32(pPlayerDBBaseInfo, 0); //TeamWorkExp
		Write32(pPlayerDBBaseInfo, 0); //AchievePoint
		Write32(pPlayerDBBaseInfo, 0); //RegTime
		WriteString(pPlayerDBBaseInfo, 0); //Signature[]
		Write32(pPlayerDBBaseInfo, 0); //LuckyMatchPoint
		Write32(pPlayerDBBaseInfo, 0); //LuckyMatchNum
		Write16(pPlayerDBBaseInfo, 0); //LuckyMatchFirstNum
		Write8(pPlayerDBBaseInfo, 0); //LuckyMatchBestRand
		Write32(pPlayerDBBaseInfo, 0); //LuckyMatchWinNum
		Write32(pPlayerDBBaseInfo, 0); //FizzPointTotal
		Write16(pPlayerDBBaseInfo, 0); //FizzPointDaily
		Write16(pPlayerDBBaseInfo, 0); //FizzPointWeekly
		Write16(pPlayerDBBaseInfo, 0); //FizzPointLastWeek
		Write8(pPlayerDBBaseInfo, 0); //FizzLotteryStatus
		Write32(pPlayerDBBaseInfo, 0); //FizzLastUpdateTime
		Write32(pPlayerDBBaseInfo, 0); //SNSLocaleCode
		Write32(pPlayerDBBaseInfo, 0); //AuctionRightUnlockTime
		Write8(pPlayerDBBaseInfo, 0); //ReserveFlag
		Write32(pPlayerDBBaseInfo, 0); //CurConsumeScore
		Write32(pPlayerDBBaseInfo, 0); //HistoryConsumeScore
		Write8(pPlayerDBBaseInfo, 0); //CrashModeSponsorID
		Write32(pPlayerDBBaseInfo, 0); //Popularity
		Write32(pPlayerDBBaseInfo, 0); //LadderMatchAchievePoint
		Write32(pPlayerDBBaseInfo, 0); //Cash
		Write32(pPlayerDBBaseInfo, 0); //PlayerGPMIdentity
		Write32(pPlayerDBBaseInfo, 0); //PointTotalScore
		WriteUn(pPlayerDBBaseInfo, 0); //totalMapMedalNum
		WriteUn(pPlayerDBBaseInfo, 0); //lastMapMedalNum
		WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalNum
		WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalSeasonId
		WriteUn(pPlayerDBBaseInfo, 0); //lastClearMapMedalTime

		len = pPlayerDBBaseInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //ItemNum
	for (size_t i = 0; i < n; i++)
	{ //PlayerDBItemInfo
		BYTE* pPlayerDBItemInfo = p;
		Write16(pPlayerDBItemInfo, 0); //len

		Write32(pPlayerDBItemInfo, 0); //ItemID
		Write32(pPlayerDBItemInfo, 0); //ItemNum
		Write32(pPlayerDBItemInfo, 0); //AvailPeriod
		Write8(pPlayerDBItemInfo, 0); //Status
		WriteUn(pPlayerDBItemInfo, 0); //ObtainTime
		Write32(pPlayerDBItemInfo, 0); //OtherAttribute

		len = pPlayerDBItemInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //TaskNum
	for (size_t i = 0; i < n; i++)
	{ //PlayerDBTaskInfo
		BYTE* pPlayerDBTaskInfo = p;
		Write16(pPlayerDBTaskInfo, 0); //len

		Write32(pPlayerDBTaskInfo, 0); //TaskID
		Write16(pPlayerDBTaskInfo, 0); //OptionID
		Write8(pPlayerDBTaskInfo, 0); //Status
		Write8(pPlayerDBTaskInfo, 0); //PrevStatus
		Write32(pPlayerDBTaskInfo, 0); //ProgressRate
		Write32(pPlayerDBTaskInfo, 0); //Other
		Write32(pPlayerDBTaskInfo, 0); //TakeTime
		Write32(pPlayerDBTaskInfo, 0); //LastUpdateTime

		len = pPlayerDBTaskInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //RecomCountry
	WriteUn(p, 0); //ServerTime
	Write8(p, 0); //ReasonLen
	{ //PlayerRelationInfo
		BYTE* pPlayerRelationInfo = p;
		Write16(pPlayerRelationInfo, 0); //len

		Write32(pPlayerRelationInfo, 0); //SrcUin
		Write32(pPlayerRelationInfo, 0); //RelationFlag
		Write32(pPlayerRelationInfo, 0); //RelationUin
		WriteString(pPlayerRelationInfo, 0); //RelationNickname[]
		Write32(pPlayerRelationInfo, 0); //EngageTime
		Write32(pPlayerRelationInfo, 0); //NextCanBookingTimeLimit
		Write32(pPlayerRelationInfo, 0); //BeginHoneyMoonTime
		Write32(pPlayerRelationInfo, 0); //EndHoneyMoonTime
		Write8(pPlayerRelationInfo, 0); //EngageFlag

		len = pPlayerRelationInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //KartNum
	for (size_t i = 0; i < n; i++)
	{ //KartRefitInfo
		BYTE* pKartRefitInfo = p;
		Write16(pKartRefitInfo, 0); //len

		Write32(pKartRefitInfo, 0); //Uin
		Write32(pKartRefitInfo, 0); //KartId
		Write32(pKartRefitInfo, 0); //RefitCout
		Write16(pKartRefitInfo, 0); //MaxFlags
		Write16(pKartRefitInfo, 0); //WWeight
		Write16(pKartRefitInfo, 0); //SpeedWeight
		Write16(pKartRefitInfo, 0); //JetWeight
		Write16(pKartRefitInfo, 0); //SJetWeight
		Write16(pKartRefitInfo, 0); //AccuWeight
		Write32(pKartRefitInfo, 0); //ShapeRefitCount
		Write32(pKartRefitInfo, 0); //KartHeadRefitItemID
		Write32(pKartRefitInfo, 0); //KartTailRefitItemID
		Write32(pKartRefitInfo, 0); //KartFlankRefitItemID
		Write32(pKartRefitInfo, 0); //KartTireRefitItemID

		len = pKartRefitInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //MapNum
	for (size_t i = 0; i < n; i++)
	{ //Record
		BYTE* pRecord = p;
		Write16(pRecord, 0); //len

		Write32(pRecord, 0); //MapID
		Write32(pRecord, 0); //Record

		len = pRecord - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //PetNum
	for (size_t i = 0; i < n; i++)
	{ //PetInfo
		BYTE* pPetInfo = p;
		Write16(pPetInfo, 0); //len

		Write32(pPetInfo, 0); //Uin
		Write32(pPetInfo, 0); //PetId
		WriteString(pPetInfo, 0); //PetName[]
		Write8(pPetInfo, 0); //IsProper
		Write16(pPetInfo, 0); //LevelLimit
		Write16(pPetInfo, 0); //Level
		Write32(pPetInfo, 0); //CurLevelExp
		Write32(pPetInfo, 0); //CurLevelMaxExp
		Write8(pPetInfo, 0); //Status
		Write16(pPetInfo, 0); //PL
		Write16(pPetInfo, 0); //TotalPL
		Write16(pPetInfo, 0); //PetSkillNum
		for (size_t i = 0; i < n; i++)
		{ //PetSkillList
			BYTE* pPetSkillList = pPetInfo;
			Write16(pPetSkillList, 0); //len

			Write16(pPetSkillList, 0); //SkillID
			Write8(pPetSkillList, 0); //Status
			Write8(pPetSkillList, 0); //Active
			Write32(pPetSkillList, 0); //Value

			len = pPetSkillList - pPetInfo;
			Set16(pPetInfo, (WORD)len);
			pPetInfo += len;
		}
		Write32(pPetInfo, 0); //StrengLevel

		len = pPetInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //IsInTopList
	Write32(p, 0); //LastLoginTime
	Write32(p, 0); //MasterPoint
	Write8(p, 0); //LoginRealNameFlag
	Write8(p, 0); //ExRightFlag[]
	Write8(p, 0); //OverdueItemNum
	for (size_t i = 0; i < n; i++)
	{ //OverdueItem
		BYTE* pOverdueItem = p;
		Write16(pOverdueItem, 0); //len

		Write32(pOverdueItem, 0); //ItemID
		Write32(pOverdueItem, 0); //OverdueTime
		Write32(pOverdueItem, 0); //OtherAttr

		len = pOverdueItem - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //StoneKartNum
	for (size_t i = 0; i < n; i++)
	{ //KartStoneGrooveInfo
		BYTE* pKartStoneGrooveInfo = p;
		Write16(pKartStoneGrooveInfo, 0); //len

		Write32(pKartStoneGrooveInfo, 0); //KartID
		Write32(pKartStoneGrooveInfo, 0); //StoneGrooveNum
		for (size_t i = 0; i < n; i++)
		{ //StoneGrooveInfo
			BYTE* pStoneGrooveInfo = pKartStoneGrooveInfo;
			Write16(pStoneGrooveInfo, 0); //len

			Write32(pStoneGrooveInfo, 0); //StoneUseOccaType
			Write32(pStoneGrooveInfo, 0); //SkillStoneID

			len = pStoneGrooveInfo - pKartStoneGrooveInfo;
			Set16(pKartStoneGrooveInfo, (WORD)len);
			pKartStoneGrooveInfo += len;
		}

		len = pKartStoneGrooveInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //LockedMapID
	Write32(p, 0); //TotalGuildProsperity
	Write32(p, 0); //ClientStatusContex
	Write8(p, 0); //IsHoneyMoon
	Write8(p, 0); //HasMoreInfo
	Write16(p, 0); //CurSvrID
	{ //NobleInfo
		BYTE* pNobleInfo = p;
		Write16(pNobleInfo, 0); //len

		Write32(pNobleInfo, 0); //NobleID
		Write8(pNobleInfo, 0); //NobleLevel
		Write32(pNobleInfo, 0); //NoblePoint
		Write32(pNobleInfo, 0); //NobleLeftDays

		len = pNobleInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //ExtendItemNum
	Write8(p, 0); //UpdateOnlineInfoInterval
	{ //GuildVipBaseInfo
		BYTE* pGuildVipBaseInfo = p;
		Write16(pGuildVipBaseInfo, 0); //len

		Write8(pGuildVipBaseInfo, 0); //GuildVipLevel
		Write32(pGuildVipBaseInfo, 0); //GuildVipPoint

		len = pGuildVipBaseInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //GuildVipOtherInfo
		BYTE* pGuildVipOtherInfo = p;
		Write16(pGuildVipOtherInfo, 0); //len

		Write32(pGuildVipOtherInfo, 0); //GuildVipLeftDays
		Write8(pGuildVipOtherInfo, 0); //CanReceiveGift

		len = pGuildVipOtherInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasLDMInfo
	for (size_t i = 0; i < n; i++)
	{ //PlayerLDMBaseInfo
		BYTE* pPlayerLDMBaseInfo = p;
		Write16(pPlayerLDMBaseInfo, 0); //len

		Write8(pPlayerLDMBaseInfo, 0); //Grade
		Write32(pPlayerLDMBaseInfo, 0); //Score
		Write32(pPlayerLDMBaseInfo, 0); //MaxScore
		Write32(pPlayerLDMBaseInfo, 0); //MaxGrade

		len = pPlayerLDMBaseInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //ForbiddenModeFreeTime
	Write32(p, 0); //ForbiddenModeBitSet
	{ //LoverVipBaseInfo
		BYTE* pLoverVipBaseInfo = p;
		Write16(pLoverVipBaseInfo, 0); //len

		Write8(pLoverVipBaseInfo, 0); //LoverVipLevel
		Write32(pLoverVipBaseInfo, 0); //LoverVipPoint
		Write8(pLoverVipBaseInfo, 0); //GrowRate

		len = pLoverVipBaseInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //LoverVipOtherInfo
		BYTE* pLoverVipOtherInfo = p;
		Write16(pLoverVipOtherInfo, 0); //len

		Write32(pLoverVipOtherInfo, 0); //LoverVipLeftDays
		Write8(pLoverVipOtherInfo, 0); //CanReceiveGift
		Write8(pLoverVipOtherInfo, 0); //ShowExpireTips

		len = pLoverVipOtherInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //SkateTaskLevel
	Write32(p, 0); //SkateCoin
	Write8(p, 0); //SkateExpSkillLevel
	Write16(p, 0); //SkateCoinCountDaily
	Write32(p, 0); //SkateCoinHistoryTotal
	Write32(p, 0); //MaxDayPveScore
	Write32(p, 0); //MaxHistoryPveScore

	len = p - buf;
	SendToClient(Client, 82, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyMaxItemNumExtended(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ExtendItemNum

	len = p - buf;
	SendToClient(Client, 11475, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyLoginMoreInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ItemNum
	for (size_t i = 0; i < n; i++)
	{ //PlayerDBItemInfo
		BYTE* pPlayerDBItemInfo = p;
		Write16(pPlayerDBItemInfo, 0); //len

		Write32(pPlayerDBItemInfo, 0); //ItemID
		Write32(pPlayerDBItemInfo, 0); //ItemNum
		Write32(pPlayerDBItemInfo, 0); //AvailPeriod
		Write8(pPlayerDBItemInfo, 0); //Status
		WriteUn(pPlayerDBItemInfo, 0); //ObtainTime
		Write32(pPlayerDBItemInfo, 0); //OtherAttribute

		len = pPlayerDBItemInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //TaskNum
	for (size_t i = 0; i < n; i++)
	{ //PlayerDBTaskInfo
		BYTE* pPlayerDBTaskInfo = p;
		Write16(pPlayerDBTaskInfo, 0); //len

		Write32(pPlayerDBTaskInfo, 0); //TaskID
		Write16(pPlayerDBTaskInfo, 0); //OptionID
		Write8(pPlayerDBTaskInfo, 0); //Status
		Write8(pPlayerDBTaskInfo, 0); //PrevStatus
		Write32(pPlayerDBTaskInfo, 0); //ProgressRate
		Write32(pPlayerDBTaskInfo, 0); //Other
		Write32(pPlayerDBTaskInfo, 0); //TakeTime
		Write32(pPlayerDBTaskInfo, 0); //LastUpdateTime

		len = pPlayerDBTaskInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //PetNum
	for (size_t i = 0; i < n; i++)
	{ //PetInfo
		BYTE* pPetInfo = p;
		Write16(pPetInfo, 0); //len

		Write32(pPetInfo, 0); //Uin
		Write32(pPetInfo, 0); //PetId
		WriteString(pPetInfo, 0); //PetName[]
		Write8(pPetInfo, 0); //IsProper
		Write16(pPetInfo, 0); //LevelLimit
		Write16(pPetInfo, 0); //Level
		Write32(pPetInfo, 0); //CurLevelExp
		Write32(pPetInfo, 0); //CurLevelMaxExp
		Write8(pPetInfo, 0); //Status
		Write16(pPetInfo, 0); //PL
		Write16(pPetInfo, 0); //TotalPL
		Write16(pPetInfo, 0); //PetSkillNum
		for (size_t i = 0; i < n; i++)
		{ //PetSkillList
			BYTE* pPetSkillList = pPetInfo;
			Write16(pPetSkillList, 0); //len

			Write16(pPetSkillList, 0); //SkillID
			Write8(pPetSkillList, 0); //Status
			Write8(pPetSkillList, 0); //Active
			Write32(pPetSkillList, 0); //Value

			len = pPetSkillList - pPetInfo;
			Set16(pPetInfo, (WORD)len);
			pPetInfo += len;
		}
		Write32(pPetInfo, 0); //StrengLevel

		len = pPetInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //MapNum
	for (size_t i = 0; i < n; i++)
	{ //Record
		BYTE* pRecord = p;
		Write16(pRecord, 0); //len

		Write32(pRecord, 0); //MapID
		Write32(pRecord, 0); //Record

		len = pRecord - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //OverdueItemNum
	for (size_t i = 0; i < n; i++)
	{ //OverdueItem
		BYTE* pOverdueItem = p;
		Write16(pOverdueItem, 0); //len

		Write32(pOverdueItem, 0); //ItemID
		Write32(pOverdueItem, 0); //OverdueTime
		Write32(pOverdueItem, 0); //OtherAttr

		len = pOverdueItem - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //StoneKartNum
	for (size_t i = 0; i < n; i++)
	{ //KartStoneGrooveInfo
		BYTE* pKartStoneGrooveInfo = p;
		Write16(pKartStoneGrooveInfo, 0); //len

		Write32(pKartStoneGrooveInfo, 0); //KartID
		Write32(pKartStoneGrooveInfo, 0); //StoneGrooveNum
		for (size_t i = 0; i < n; i++)
		{ //StoneGrooveInfo
			BYTE* pStoneGrooveInfo = pKartStoneGrooveInfo;
			Write16(pStoneGrooveInfo, 0); //len

			Write32(pStoneGrooveInfo, 0); //StoneUseOccaType
			Write32(pStoneGrooveInfo, 0); //SkillStoneID

			len = pStoneGrooveInfo - pKartStoneGrooveInfo;
			Set16(pKartStoneGrooveInfo, (WORD)len);
			pKartStoneGrooveInfo += len;
		}

		len = pKartStoneGrooveInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasNext

	len = p - buf;
	SendToClient(Client, 223, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestLogout(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	UINT LogOutFlag = Read32(p);

}

void ResponseLogout(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 101, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetRoomList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	short StartRoomIdx = Read16(p);
	short GetRoomNum = Read16(p);
	short BaseGameMode = Read16(p);
	short SubGameMode = Read16(p);
	bool FBLev = Read8(p);
	bool FBSeason = Read8(p);

}

void NotifyClientUpdateGuildScoreInRoomInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //GuildScoreInNextGame
	Write16(p, 0); //GuildScoreAlreadyAward
	Write16(p, 0); //GuildScoreTotalAward

	len = p - buf;
	SendToClient(Client, 12033, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void ResponseGetRoomList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //CurTotalRoomNum
	Write16(p, 0); //StartIdx
	Write16(p, 0); //RoomNum
	for (size_t i = 0; i < n; i++)
	{ //Rooms
		BYTE* pRooms = p;
		Write16(pRooms, 0); //len

		Write16(pRooms, 0); //RoomID
		Write16(pRooms, 0); //BaseGameMode
		Write16(pRooms, 0); //SubGameMode
		Write8(pRooms, 0); //CurrentPlayerNum
		Write8(pRooms, 0); //TotalSeatNum
		Write8(pRooms, 0); //Status
		Write32(pRooms, 0); //MapID
		Write8(pRooms, 0); //Flag
		WriteString(pRooms, 0); //RoomName[]
		Write8(pRooms, 0); //HasFBInfo
		for (size_t i = 0; i < n; i++)
		{ //FBInfo
			BYTE* pFBInfo = pRooms;
			Write16(pFBInfo, 0); //len

			Write8(pFBInfo, 0); //AvailableLev
			Write8(pFBInfo, 0); //Lev
			Write8(pFBInfo, 0); //SubLev
			Write32(pFBInfo, 0); //BossID
			Write8(pFBInfo, 0); //FBSeason

			len = pFBInfo - pRooms;
			Set16(pRooms, (WORD)len);
			pRooms += len;
		}

		len = pRooms - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen
	Write16(p, 0); //BaseGameMode
	Write16(p, 0); //SubGameMode
	Write8(p, 0); //FBAvailableLev
	Write8(p, 0); //FBLev
	Write8(p, 0); //FBSeason

	len = p - buf;
	SendToClient(Client, 102, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestCreateRoom(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	short BaseGameMode = Read16(p);
	short SubGameMode = Read16(p);
	char[] RoomName[] = ReadString(p);
	bool SeatNum = Read8(p);
	bool Flag = Read8(p);
	char[] Password[] = ReadString(p);
	bool IsNewerOpen = Read8(p);
	bool FBSeason = Read8(p);
	UCHAR Contex = Read8(p);
	bool FBLev = Read8(p);

}

void ResponseCreateRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //RoomID
	Write16(p, 0); //BaseGameMode
	Write16(p, 0); //SubGameMode
	WriteString(p, 0); //RoomName[]
	Write8(p, 0); //SeatNum
	Write8(p, 0); //Flag
	Write8(p, 0); //SeatID
	Write8(p, 0); //TeamID
	Write8(p, 0); //ReasonLen
	Write8(p, 0); //LoverRaceOrPro
	Write32(p, 0); //MapID
	Write8(p, 0); //DebutOrX5
	WriteUn(p, 0); //ServerTime
	Write32(p, 0); //PreKnowMapID
	Write32(p, 0); //PreKnownMusicID
	Write8(p, 0); //HasFBInfo
	for (size_t i = 0; i < n; i++)
	{ //FBInfo
		BYTE* pFBInfo = p;
		Write16(pFBInfo, 0); //len

		Write8(pFBInfo, 0); //AvailableLev
		Write8(pFBInfo, 0); //Lev
		Write8(pFBInfo, 0); //SubLev
		Write32(pFBInfo, 0); //BossID
		Write8(pFBInfo, 0); //FBSeason

		len = pFBInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //GuildScoreInNextGame
	Write8(p, 0); //Contex
	Write16(p, 0); //GuildScoreAlreadyAward
	Write16(p, 0); //GuildScoreTotalAward

	len = p - buf;
	SendToClient(Client, 103, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestEnterRoom(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	short RoomID = Read16(p);
	char[] Password[] = ReadString(p);
	BYTE InviteType = Read8(p);
	Un InviterUin = ReadUn(p);

}

void NotifyEnterRoomMoreInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //PlayerCount
	for (size_t i = 0; i < n; i++)
	{ //PlayerRoomVisibleInfo
		BYTE* pPlayerRoomVisibleInfo = p;
		Write16(pPlayerRoomVisibleInfo, 0); //len

		WriteUn(pPlayerRoomVisibleInfo, 0); //Uin
		WriteUn(pPlayerRoomVisibleInfo, 0); //Identity
		Write8(pPlayerRoomVisibleInfo, 0); //SeatID
		Write8(pPlayerRoomVisibleInfo, 0); //TeamID
		Write16(pPlayerRoomVisibleInfo, 0); //PlayerID
		Write8(pPlayerRoomVisibleInfo, 0); //Status
		{ //PlayerDBBaseInfo
			BYTE* pPlayerDBBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerDBBaseInfo, 0); //len

			WriteString(pPlayerDBBaseInfo, 0); //Nickname[]
			Write8(pPlayerDBBaseInfo, 0); //Gender
			Write8(pPlayerDBBaseInfo, 0); //Country
			Write32(pPlayerDBBaseInfo, 0); //License
			WriteUn(pPlayerDBBaseInfo, 0); //Experience
			Write32(pPlayerDBBaseInfo, 0); //SuperMoney
			Write32(pPlayerDBBaseInfo, 0); //Money
			WriteUn(pPlayerDBBaseInfo, 0); //WinNum
			Write32(pPlayerDBBaseInfo, 0); //SecondNum
			Write32(pPlayerDBBaseInfo, 0); //ThirdNum
			WriteUn(pPlayerDBBaseInfo, 0); //TotalNum
			Write32(pPlayerDBBaseInfo, 0); //CurHonor
			Write32(pPlayerDBBaseInfo, 0); //TotalHonor
			Write32(pPlayerDBBaseInfo, 0); //TodayHonor
			Write32(pPlayerDBBaseInfo, 0); //RelaxTime
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationBefore
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationCur
			Write32(pPlayerDBBaseInfo, 0); //Charm
			Write32(pPlayerDBBaseInfo, 0); //DurationGame
			Write32(pPlayerDBBaseInfo, 0); //DanceExp
			Write32(pPlayerDBBaseInfo, 0); //Coupons
			Write32(pPlayerDBBaseInfo, 0); //Admiration
			Write32(pPlayerDBBaseInfo, 0); //LuckMoney
			Write32(pPlayerDBBaseInfo, 0); //TeamWorkExp
			Write32(pPlayerDBBaseInfo, 0); //AchievePoint
			Write32(pPlayerDBBaseInfo, 0); //RegTime
			WriteString(pPlayerDBBaseInfo, 0); //Signature[]
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchPoint
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchNum
			Write16(pPlayerDBBaseInfo, 0); //LuckyMatchFirstNum
			Write8(pPlayerDBBaseInfo, 0); //LuckyMatchBestRand
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchWinNum
			Write32(pPlayerDBBaseInfo, 0); //FizzPointTotal
			Write16(pPlayerDBBaseInfo, 0); //FizzPointDaily
			Write16(pPlayerDBBaseInfo, 0); //FizzPointWeekly
			Write16(pPlayerDBBaseInfo, 0); //FizzPointLastWeek
			Write8(pPlayerDBBaseInfo, 0); //FizzLotteryStatus
			Write32(pPlayerDBBaseInfo, 0); //FizzLastUpdateTime
			Write32(pPlayerDBBaseInfo, 0); //SNSLocaleCode
			Write32(pPlayerDBBaseInfo, 0); //AuctionRightUnlockTime
			Write8(pPlayerDBBaseInfo, 0); //ReserveFlag
			Write32(pPlayerDBBaseInfo, 0); //CurConsumeScore
			Write32(pPlayerDBBaseInfo, 0); //HistoryConsumeScore
			Write8(pPlayerDBBaseInfo, 0); //CrashModeSponsorID
			Write32(pPlayerDBBaseInfo, 0); //Popularity
			Write32(pPlayerDBBaseInfo, 0); //LadderMatchAchievePoint
			Write32(pPlayerDBBaseInfo, 0); //Cash
			Write32(pPlayerDBBaseInfo, 0); //PlayerGPMIdentity
			Write32(pPlayerDBBaseInfo, 0); //PointTotalScore
			WriteUn(pPlayerDBBaseInfo, 0); //totalMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //lastMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalSeasonId
			WriteUn(pPlayerDBBaseInfo, 0); //lastClearMapMedalTime

			len = pPlayerDBBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //PlayerGuildInfo
			BYTE* pPlayerGuildInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerGuildInfo, 0); //len

			WriteString(pPlayerGuildInfo, 0); //GuildName[]
			Write16(pPlayerGuildInfo, 0); //Duty
			Write32(pPlayerGuildInfo, 0); //GuildID
			Write32(pPlayerGuildInfo, 0); //Right
			Write32(pPlayerGuildInfo, 0); //Medal
			Write32(pPlayerGuildInfo, 0); //Contribute
			WriteString(pPlayerGuildInfo, 0); //DutyTitle[]

			len = pPlayerGuildInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write16(pPlayerRoomVisibleInfo, 0); //EquipedItemNum
		for (size_t i = 0; i < n; i++)
		{ //PlayerItemInfo
			BYTE* pPlayerItemInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerItemInfo, 0); //len

			Write32(pPlayerItemInfo, 0); //ItemID
			Write32(pPlayerItemInfo, 0); //ItemNum
			Write32(pPlayerItemInfo, 0); //AvailPeriod
			Write8(pPlayerItemInfo, 0); //Status
			WriteUn(pPlayerItemInfo, 0); //ObtainTime
			Write32(pPlayerItemInfo, 0); //OtherAttribute

			len = pPlayerItemInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write16(pPlayerRoomVisibleInfo, 0); //PetNum
		for (size_t i = 0; i < n; i++)
		{ //PetInfo
			BYTE* pPetInfo = pPlayerRoomVisibleInfo;
			Write16(pPetInfo, 0); //len

			Write32(pPetInfo, 0); //Uin
			Write32(pPetInfo, 0); //PetId
			WriteString(pPetInfo, 0); //PetName[]
			Write8(pPetInfo, 0); //IsProper
			Write16(pPetInfo, 0); //Level
			Write8(pPetInfo, 0); //Status
			Write16(pPetInfo, 0); //PetSkillNum
			for (size_t i = 0; i < n; i++)
			{ //PetSkillList
				BYTE* pPetSkillList = pPetInfo;
				Write16(pPetSkillList, 0); //len

				Write16(pPetSkillList, 0); //SkillID
				Write8(pPetSkillList, 0); //Status
				Write8(pPetSkillList, 0); //Active
				Write32(pPetSkillList, 0); //Value

				len = pPetSkillList - pPetInfo;
				Set16(pPetInfo, (WORD)len);
				pPetInfo += len;
			}
			Write32(pPetInfo, 0); //StrengLevel

			len = pPetInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //PlayerGuildMatchInfo
			BYTE* pPlayerGuildMatchInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerGuildMatchInfo, 0); //len

			Write32(pPlayerGuildMatchInfo, 0); //SelfPoint
			Write32(pPlayerGuildMatchInfo, 0); //WinNum
			Write32(pPlayerGuildMatchInfo, 0); //TotalNum

			len = pPlayerGuildMatchInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //IsInTopList
		Write8(pPlayerRoomVisibleInfo, 0); //LoverRaceOrPro
		Write8(pPlayerRoomVisibleInfo, 0); //TmpEffectNum
		Write32(pPlayerRoomVisibleInfo, 0); //TmpEffectItems[]
		Write8(pPlayerRoomVisibleInfo, 0); //OBState
		Write8(pPlayerRoomVisibleInfo, 0); //DebutOrX5
		Write8(pPlayerRoomVisibleInfo, 0); //RandKeyFlag
		WriteUn(pPlayerRoomVisibleInfo, 0); //VipFlag
		Write8(pPlayerRoomVisibleInfo, 0); //HaveAppellation
		for (size_t i = 0; i < n; i++)
		{ //CurAppellation
			BYTE* pCurAppellation = pPlayerRoomVisibleInfo;
			Write16(pCurAppellation, 0); //len

			Write8(pCurAppellation, 0); //Type
			Write8(pCurAppellation, 0); //Level
			Write8(pCurAppellation, 0); //Status
			Write8(pCurAppellation, 0); //Difficulty
			Write32(pCurAppellation, 0); //MapId
			Write32(pCurAppellation, 0); //Value

			len = pCurAppellation - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //NobleInfo
			BYTE* pNobleInfo = pPlayerRoomVisibleInfo;
			Write16(pNobleInfo, 0); //len

			Write32(pNobleInfo, 0); //NobleID
			Write8(pNobleInfo, 0); //NobleLevel
			Write32(pNobleInfo, 0); //NoblePoint
			Write32(pNobleInfo, 0); //NobleLeftDays

			len = pNobleInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasCarryWizard
		for (size_t i = 0; i < n; i++)
		{ //CarryWizardInfo
			BYTE* pCarryWizardInfo = pPlayerRoomVisibleInfo;
			Write16(pCarryWizardInfo, 0); //len

			Write16(pCarryWizardInfo, 0); //WizardID
			WriteString(pCarryWizardInfo, 0); //Nickname[]
			Write16(pCarryWizardInfo, 0); //WizardType
			Write8(pCarryWizardInfo, 0); //Order
			Write8(pCarryWizardInfo, 0); //EvolutionBranch
			Write8(pCarryWizardInfo, 0); //IsHuanHua

			len = pCarryWizardInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //GuildVipBaseInfo
			BYTE* pGuildVipBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pGuildVipBaseInfo, 0); //len

			Write8(pGuildVipBaseInfo, 0); //GuildVipLevel
			Write32(pGuildVipBaseInfo, 0); //GuildVipPoint

			len = pGuildVipBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write32(pPlayerRoomVisibleInfo, 0); //ExFlag
		Write8(pPlayerRoomVisibleInfo, 0); //HaveLDMBaseInfo
		for (size_t i = 0; i < n; i++)
		{ //PlayerLDMBaseInfo
			BYTE* pPlayerLDMBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerLDMBaseInfo, 0); //len

			Write8(pPlayerLDMBaseInfo, 0); //Grade
			Write32(pPlayerLDMBaseInfo, 0); //Score
			Write32(pPlayerLDMBaseInfo, 0); //MaxScore
			Write32(pPlayerLDMBaseInfo, 0); //MaxGrade

			len = pPlayerLDMBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasWl
		for (size_t i = 0; i < n; i++)
		{ //PlayerWlVisibleInfo
			BYTE* pPlayerWlVisibleInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerWlVisibleInfo, 0); //len

			Write32(pPlayerWlVisibleInfo, 0); //WonderLandID
			WriteString(pPlayerWlVisibleInfo, 0); //WonderLandName[]
			Write16(pPlayerWlVisibleInfo, 0); //WonderLandDuty
			Write8(pPlayerWlVisibleInfo, 0); //SubType
			Write8(pPlayerWlVisibleInfo, 0); //GuildGrade

			len = pPlayerWlVisibleInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasLoverVip
		for (size_t i = 0; i < n; i++)
		{ //LoverVipInfo
			BYTE* pLoverVipInfo = pPlayerRoomVisibleInfo;
			Write16(pLoverVipInfo, 0); //len

			Write8(pLoverVipInfo, 0); //LoverVipLevel
			Write32(pLoverVipInfo, 0); //LoverVipPoint
			Write8(pLoverVipInfo, 0); //GrowRate

			len = pLoverVipInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasBattleModeSkillInfoList
		for (size_t i = 0; i < n; i++)
		{ //BattleModeSkillInfoList
			BYTE* pBattleModeSkillInfoList = pPlayerRoomVisibleInfo;
			Write16(pBattleModeSkillInfoList, 0); //len

			Write8(pBattleModeSkillInfoList, 0); //SkillNum
			for (size_t i = 0; i < n; i++)
			{ //SkillInfo
				BYTE* pSkillInfo = pBattleModeSkillInfoList;
				Write16(pSkillInfo, 0); //len

				Write16(pSkillInfo, 0); //SkillId
				Write8(pSkillInfo, 0); //SkillLevel

				len = pSkillInfo - pBattleModeSkillInfoList;
				Set16(pBattleModeSkillInfoList, (WORD)len);
				pBattleModeSkillInfoList += len;
			}

			len = pBattleModeSkillInfoList - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}

		len = pPlayerRoomVisibleInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //PlayerCount2
	for (size_t i = 0; i < n; i++)
	{ //PlayerRelationInfo
		BYTE* pPlayerRelationInfo = p;
		Write16(pPlayerRelationInfo, 0); //len

		Write32(pPlayerRelationInfo, 0); //SrcUin
		Write32(pPlayerRelationInfo, 0); //RelationFlag
		Write32(pPlayerRelationInfo, 0); //RelationUin
		WriteString(pPlayerRelationInfo, 0); //RelationNickname[]
		Write32(pPlayerRelationInfo, 0); //EngageTime
		Write32(pPlayerRelationInfo, 0); //NextCanBookingTimeLimit
		Write32(pPlayerRelationInfo, 0); //BeginHoneyMoonTime
		Write32(pPlayerRelationInfo, 0); //EndHoneyMoonTime
		Write8(pPlayerRelationInfo, 0); //EngageFlag

		len = pPlayerRelationInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //KartNum
	for (size_t i = 0; i < n; i++)
	{ //KartRefitInfo
		BYTE* pKartRefitInfo = p;
		Write16(pKartRefitInfo, 0); //len

		Write32(pKartRefitInfo, 0); //Uin
		Write32(pKartRefitInfo, 0); //KartId
		Write32(pKartRefitInfo, 0); //RefitCout
		Write16(pKartRefitInfo, 0); //MaxFlags
		Write16(pKartRefitInfo, 0); //WWeight
		Write16(pKartRefitInfo, 0); //SpeedWeight
		Write16(pKartRefitInfo, 0); //JetWeight
		Write16(pKartRefitInfo, 0); //SJetWeight
		Write16(pKartRefitInfo, 0); //AccuWeight
		Write32(pKartRefitInfo, 0); //ShapeRefitCount
		Write32(pKartRefitInfo, 0); //KartHeadRefitItemID
		Write32(pKartRefitInfo, 0); //KartTailRefitItemID
		Write32(pKartRefitInfo, 0); //KartFlankRefitItemID
		Write32(pKartRefitInfo, 0); //KartTireRefitItemID

		len = pKartRefitInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasNext

	len = p - buf;
	SendToClient(Client, 224, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyEnterRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //RoomID
	{ //NewPlayerInfo
		BYTE* pNewPlayerInfo = p;
		Write16(pNewPlayerInfo, 0); //len

		WriteUn(pNewPlayerInfo, 0); //Uin
		WriteUn(pNewPlayerInfo, 0); //Identity
		Write8(pNewPlayerInfo, 0); //SeatID
		Write8(pNewPlayerInfo, 0); //TeamID
		Write16(pNewPlayerInfo, 0); //PlayerID
		Write8(pNewPlayerInfo, 0); //Status
		{ //PlayerDBBaseInfo
			BYTE* pPlayerDBBaseInfo = pNewPlayerInfo;
			Write16(pPlayerDBBaseInfo, 0); //len

			WriteString(pPlayerDBBaseInfo, 0); //Nickname[]
			Write8(pPlayerDBBaseInfo, 0); //Gender
			Write8(pPlayerDBBaseInfo, 0); //Country
			Write32(pPlayerDBBaseInfo, 0); //License
			WriteUn(pPlayerDBBaseInfo, 0); //Experience
			Write32(pPlayerDBBaseInfo, 0); //SuperMoney
			Write32(pPlayerDBBaseInfo, 0); //Money
			WriteUn(pPlayerDBBaseInfo, 0); //WinNum
			Write32(pPlayerDBBaseInfo, 0); //SecondNum
			Write32(pPlayerDBBaseInfo, 0); //ThirdNum
			WriteUn(pPlayerDBBaseInfo, 0); //TotalNum
			Write32(pPlayerDBBaseInfo, 0); //CurHonor
			Write32(pPlayerDBBaseInfo, 0); //TotalHonor
			Write32(pPlayerDBBaseInfo, 0); //TodayHonor
			Write32(pPlayerDBBaseInfo, 0); //RelaxTime
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationBefore
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationCur
			Write32(pPlayerDBBaseInfo, 0); //Charm
			Write32(pPlayerDBBaseInfo, 0); //DurationGame
			Write32(pPlayerDBBaseInfo, 0); //DanceExp
			Write32(pPlayerDBBaseInfo, 0); //Coupons
			Write32(pPlayerDBBaseInfo, 0); //Admiration
			Write32(pPlayerDBBaseInfo, 0); //LuckMoney
			Write32(pPlayerDBBaseInfo, 0); //TeamWorkExp
			Write32(pPlayerDBBaseInfo, 0); //AchievePoint
			Write32(pPlayerDBBaseInfo, 0); //RegTime
			WriteString(pPlayerDBBaseInfo, 0); //Signature[]
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchPoint
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchNum
			Write16(pPlayerDBBaseInfo, 0); //LuckyMatchFirstNum
			Write8(pPlayerDBBaseInfo, 0); //LuckyMatchBestRand
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchWinNum
			Write32(pPlayerDBBaseInfo, 0); //FizzPointTotal
			Write16(pPlayerDBBaseInfo, 0); //FizzPointDaily
			Write16(pPlayerDBBaseInfo, 0); //FizzPointWeekly
			Write16(pPlayerDBBaseInfo, 0); //FizzPointLastWeek
			Write8(pPlayerDBBaseInfo, 0); //FizzLotteryStatus
			Write32(pPlayerDBBaseInfo, 0); //FizzLastUpdateTime
			Write32(pPlayerDBBaseInfo, 0); //SNSLocaleCode
			Write32(pPlayerDBBaseInfo, 0); //AuctionRightUnlockTime
			Write8(pPlayerDBBaseInfo, 0); //ReserveFlag
			Write32(pPlayerDBBaseInfo, 0); //CurConsumeScore
			Write32(pPlayerDBBaseInfo, 0); //HistoryConsumeScore
			Write8(pPlayerDBBaseInfo, 0); //CrashModeSponsorID
			Write32(pPlayerDBBaseInfo, 0); //Popularity
			Write32(pPlayerDBBaseInfo, 0); //LadderMatchAchievePoint
			Write32(pPlayerDBBaseInfo, 0); //Cash
			Write32(pPlayerDBBaseInfo, 0); //PlayerGPMIdentity
			Write32(pPlayerDBBaseInfo, 0); //PointTotalScore
			WriteUn(pPlayerDBBaseInfo, 0); //totalMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //lastMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalSeasonId
			WriteUn(pPlayerDBBaseInfo, 0); //lastClearMapMedalTime

			len = pPlayerDBBaseInfo - pNewPlayerInfo;
			Set16(pNewPlayerInfo, (WORD)len);
			pNewPlayerInfo += len;
		}
		{ //PlayerGuildInfo
			BYTE* pPlayerGuildInfo = pNewPlayerInfo;
			Write16(pPlayerGuildInfo, 0); //len

			WriteString(pPlayerGuildInfo, 0); //GuildName[]
			Write16(pPlayerGuildInfo, 0); //Duty
			Write32(pPlayerGuildInfo, 0); //GuildID
			Write32(pPlayerGuildInfo, 0); //Right
			Write32(pPlayerGuildInfo, 0); //Medal
			Write32(pPlayerGuildInfo, 0); //Contribute
			WriteString(pPlayerGuildInfo, 0); //DutyTitle[]

			len = pPlayerGuildInfo - pNewPlayerInfo;
			Set16(pNewPlayerInfo, (WORD)len);
			pNewPlayerInfo += len;
		}
		Write16(pNewPlayerInfo, 0); //EquipedItemNum
		for (size_t i = 0; i < n; i++)
		{ //PlayerItemInfo
			BYTE* pPlayerItemInfo = pNewPlayerInfo;
			Write16(pPlayerItemInfo, 0); //len

			Write32(pPlayerItemInfo, 0); //ItemID
			Write32(pPlayerItemInfo, 0); //ItemNum
			Write32(pPlayerItemInfo, 0); //AvailPeriod
			Write8(pPlayerItemInfo, 0); //Status
			WriteUn(pPlayerItemInfo, 0); //ObtainTime
			Write32(pPlayerItemInfo, 0); //OtherAttribute

			len = pPlayerItemInfo - pNewPlayerInfo;
			Set16(pNewPlayerInfo, (WORD)len);
			pNewPlayerInfo += len;
		}
		Write16(pNewPlayerInfo, 0); //PetNum
		for (size_t i = 0; i < n; i++)
		{ //PetInfo
			BYTE* pPetInfo = pNewPlayerInfo;
			Write16(pPetInfo, 0); //len

			Write32(pPetInfo, 0); //Uin
			Write32(pPetInfo, 0); //PetId
			WriteString(pPetInfo, 0); //PetName[]
			Write8(pPetInfo, 0); //IsProper
			Write16(pPetInfo, 0); //Level
			Write8(pPetInfo, 0); //Status
			Write16(pPetInfo, 0); //PetSkillNum
			for (size_t i = 0; i < n; i++)
			{ //PetSkillList
				BYTE* pPetSkillList = pPetInfo;
				Write16(pPetSkillList, 0); //len

				Write16(pPetSkillList, 0); //SkillID
				Write8(pPetSkillList, 0); //Status
				Write8(pPetSkillList, 0); //Active
				Write32(pPetSkillList, 0); //Value

				len = pPetSkillList - pPetInfo;
				Set16(pPetInfo, (WORD)len);
				pPetInfo += len;
			}
			Write32(pPetInfo, 0); //StrengLevel

			len = pPetInfo - pNewPlayerInfo;
			Set16(pNewPlayerInfo, (WORD)len);
			pNewPlayerInfo += len;
		}
		{ //PlayerGuildMatchInfo
			BYTE* pPlayerGuildMatchInfo = pNewPlayerInfo;
			Write16(pPlayerGuildMatchInfo, 0); //len

			Write32(pPlayerGuildMatchInfo, 0); //SelfPoint
			Write32(pPlayerGuildMatchInfo, 0); //WinNum
			Write32(pPlayerGuildMatchInfo, 0); //TotalNum

			len = pPlayerGuildMatchInfo - pNewPlayerInfo;
			Set16(pNewPlayerInfo, (WORD)len);
			pNewPlayerInfo += len;
		}
		Write8(pNewPlayerInfo, 0); //IsInTopList
		Write8(pNewPlayerInfo, 0); //LoverRaceOrPro
		Write8(pNewPlayerInfo, 0); //TmpEffectNum
		Write32(pNewPlayerInfo, 0); //TmpEffectItems[]
		Write8(pNewPlayerInfo, 0); //OBState
		Write8(pNewPlayerInfo, 0); //DebutOrX5
		Write8(pNewPlayerInfo, 0); //RandKeyFlag
		WriteUn(pNewPlayerInfo, 0); //VipFlag
		Write8(pNewPlayerInfo, 0); //HaveAppellation
		for (size_t i = 0; i < n; i++)
		{ //CurAppellation
			BYTE* pCurAppellation = pNewPlayerInfo;
			Write16(pCurAppellation, 0); //len

			Write8(pCurAppellation, 0); //Type
			Write8(pCurAppellation, 0); //Level
			Write8(pCurAppellation, 0); //Status
			Write8(pCurAppellation, 0); //Difficulty
			Write32(pCurAppellation, 0); //MapId
			Write32(pCurAppellation, 0); //Value

			len = pCurAppellation - pNewPlayerInfo;
			Set16(pNewPlayerInfo, (WORD)len);
			pNewPlayerInfo += len;
		}
		{ //NobleInfo
			BYTE* pNobleInfo = pNewPlayerInfo;
			Write16(pNobleInfo, 0); //len

			Write32(pNobleInfo, 0); //NobleID
			Write8(pNobleInfo, 0); //NobleLevel
			Write32(pNobleInfo, 0); //NoblePoint
			Write32(pNobleInfo, 0); //NobleLeftDays

			len = pNobleInfo - pNewPlayerInfo;
			Set16(pNewPlayerInfo, (WORD)len);
			pNewPlayerInfo += len;
		}
		Write8(pNewPlayerInfo, 0); //HasCarryWizard
		for (size_t i = 0; i < n; i++)
		{ //CarryWizardInfo
			BYTE* pCarryWizardInfo = pNewPlayerInfo;
			Write16(pCarryWizardInfo, 0); //len

			Write16(pCarryWizardInfo, 0); //WizardID
			WriteString(pCarryWizardInfo, 0); //Nickname[]
			Write16(pCarryWizardInfo, 0); //WizardType
			Write8(pCarryWizardInfo, 0); //Order
			Write8(pCarryWizardInfo, 0); //EvolutionBranch
			Write8(pCarryWizardInfo, 0); //IsHuanHua

			len = pCarryWizardInfo - pNewPlayerInfo;
			Set16(pNewPlayerInfo, (WORD)len);
			pNewPlayerInfo += len;
		}
		{ //GuildVipBaseInfo
			BYTE* pGuildVipBaseInfo = pNewPlayerInfo;
			Write16(pGuildVipBaseInfo, 0); //len

			Write8(pGuildVipBaseInfo, 0); //GuildVipLevel
			Write32(pGuildVipBaseInfo, 0); //GuildVipPoint

			len = pGuildVipBaseInfo - pNewPlayerInfo;
			Set16(pNewPlayerInfo, (WORD)len);
			pNewPlayerInfo += len;
		}
		Write32(pNewPlayerInfo, 0); //ExFlag
		Write8(pNewPlayerInfo, 0); //HaveLDMBaseInfo
		for (size_t i = 0; i < n; i++)
		{ //PlayerLDMBaseInfo
			BYTE* pPlayerLDMBaseInfo = pNewPlayerInfo;
			Write16(pPlayerLDMBaseInfo, 0); //len

			Write8(pPlayerLDMBaseInfo, 0); //Grade
			Write32(pPlayerLDMBaseInfo, 0); //Score
			Write32(pPlayerLDMBaseInfo, 0); //MaxScore
			Write32(pPlayerLDMBaseInfo, 0); //MaxGrade

			len = pPlayerLDMBaseInfo - pNewPlayerInfo;
			Set16(pNewPlayerInfo, (WORD)len);
			pNewPlayerInfo += len;
		}
		Write8(pNewPlayerInfo, 0); //HasWl
		for (size_t i = 0; i < n; i++)
		{ //PlayerWlVisibleInfo
			BYTE* pPlayerWlVisibleInfo = pNewPlayerInfo;
			Write16(pPlayerWlVisibleInfo, 0); //len

			Write32(pPlayerWlVisibleInfo, 0); //WonderLandID
			WriteString(pPlayerWlVisibleInfo, 0); //WonderLandName[]
			Write16(pPlayerWlVisibleInfo, 0); //WonderLandDuty
			Write8(pPlayerWlVisibleInfo, 0); //SubType
			Write8(pPlayerWlVisibleInfo, 0); //GuildGrade

			len = pPlayerWlVisibleInfo - pNewPlayerInfo;
			Set16(pNewPlayerInfo, (WORD)len);
			pNewPlayerInfo += len;
		}
		Write8(pNewPlayerInfo, 0); //HasLoverVip
		for (size_t i = 0; i < n; i++)
		{ //LoverVipInfo
			BYTE* pLoverVipInfo = pNewPlayerInfo;
			Write16(pLoverVipInfo, 0); //len

			Write8(pLoverVipInfo, 0); //LoverVipLevel
			Write32(pLoverVipInfo, 0); //LoverVipPoint
			Write8(pLoverVipInfo, 0); //GrowRate

			len = pLoverVipInfo - pNewPlayerInfo;
			Set16(pNewPlayerInfo, (WORD)len);
			pNewPlayerInfo += len;
		}
		Write8(pNewPlayerInfo, 0); //HasBattleModeSkillInfoList
		for (size_t i = 0; i < n; i++)
		{ //BattleModeSkillInfoList
			BYTE* pBattleModeSkillInfoList = pNewPlayerInfo;
			Write16(pBattleModeSkillInfoList, 0); //len

			Write8(pBattleModeSkillInfoList, 0); //SkillNum
			for (size_t i = 0; i < n; i++)
			{ //SkillInfo
				BYTE* pSkillInfo = pBattleModeSkillInfoList;
				Write16(pSkillInfo, 0); //len

				Write16(pSkillInfo, 0); //SkillId
				Write8(pSkillInfo, 0); //SkillLevel

				len = pSkillInfo - pBattleModeSkillInfoList;
				Set16(pBattleModeSkillInfoList, (WORD)len);
				pBattleModeSkillInfoList += len;
			}

			len = pBattleModeSkillInfoList - pNewPlayerInfo;
			Set16(pNewPlayerInfo, (WORD)len);
			pNewPlayerInfo += len;
		}

		len = pNewPlayerInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //PlayerRelationInfo
		BYTE* pPlayerRelationInfo = p;
		Write16(pPlayerRelationInfo, 0); //len

		Write32(pPlayerRelationInfo, 0); //SrcUin
		Write32(pPlayerRelationInfo, 0); //RelationFlag
		Write32(pPlayerRelationInfo, 0); //RelationUin
		WriteString(pPlayerRelationInfo, 0); //RelationNickname[]
		Write32(pPlayerRelationInfo, 0); //EngageTime
		Write32(pPlayerRelationInfo, 0); //NextCanBookingTimeLimit
		Write32(pPlayerRelationInfo, 0); //BeginHoneyMoonTime
		Write32(pPlayerRelationInfo, 0); //EndHoneyMoonTime
		Write8(pPlayerRelationInfo, 0); //EngageFlag

		len = pPlayerRelationInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //KartNum
	for (size_t i = 0; i < n; i++)
	{ //KartRefitInfo
		BYTE* pKartRefitInfo = p;
		Write16(pKartRefitInfo, 0); //len

		Write32(pKartRefitInfo, 0); //Uin
		Write32(pKartRefitInfo, 0); //KartId
		Write32(pKartRefitInfo, 0); //RefitCout
		Write16(pKartRefitInfo, 0); //MaxFlags
		Write16(pKartRefitInfo, 0); //WWeight
		Write16(pKartRefitInfo, 0); //SpeedWeight
		Write16(pKartRefitInfo, 0); //JetWeight
		Write16(pKartRefitInfo, 0); //SJetWeight
		Write16(pKartRefitInfo, 0); //AccuWeight
		Write32(pKartRefitInfo, 0); //ShapeRefitCount
		Write32(pKartRefitInfo, 0); //KartHeadRefitItemID
		Write32(pKartRefitInfo, 0); //KartTailRefitItemID
		Write32(pKartRefitInfo, 0); //KartFlankRefitItemID
		Write32(pKartRefitInfo, 0); //KartTireRefitItemID

		len = pKartRefitInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 500, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestLeaveRoom(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);

}

void ResponseLeaveRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 105, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyLeaveRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //RoomID
	WriteUn(p, 0); //Uin
	Write8(p, 0); //SeatID
	Write8(p, 0); //IsChangeRoomOwner
	Write16(p, 0); //NewRoomOwnerID
	Write8(p, 0); //Flag
	Write8(p, 0); //HasFBInfo
	for (size_t i = 0; i < n; i++)
	{ //FBInfo
		BYTE* pFBInfo = p;
		Write16(pFBInfo, 0); //len

		Write8(pFBInfo, 0); //AvailableLev
		Write8(pFBInfo, 0); //Lev
		Write8(pFBInfo, 0); //SubLev
		Write32(pFBInfo, 0); //BossID
		Write8(pFBInfo, 0); //FBSeason

		len = pFBInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 501, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyChangeRoomOwner(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //RoomID
	Write16(p, 0); //NewRoomOwnerID
	Write8(p, 0); //HasFBInfo
	for (size_t i = 0; i < n; i++)
	{ //FBInfo
		BYTE* pFBInfo = p;
		Write16(pFBInfo, 0); //len

		Write8(pFBInfo, 0); //AvailableLev
		Write8(pFBInfo, 0); //Lev
		Write8(pFBInfo, 0); //SubLev
		Write32(pFBInfo, 0); //BossID
		Write8(pFBInfo, 0); //FBSeason

		len = pFBInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 524, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestChangeTeam(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	bool NewTeamID = Read8(p);

}

void ResponseChangeTeam(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //NewTeamID
	Write8(p, 0); //ReasonLen
	Write8(p, 0); //LoverRaceOrPro

	len = p - buf;
	SendToClient(Client, 128, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyPlayerChangeTeam(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //Uin
	Write8(p, 0); //NewTeamID
	Write8(p, 0); //LoverRaceOrPro

	len = p - buf;
	SendToClient(Client, 523, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestTransferUDPOK(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	short DstDlg = Read16(p);
	Un DstUin = ReadUn(p);
	short InfoLength = Read16(p);

}

void ResponseTransferUDPOK(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 499, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyUDPOK(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //Uin
	WriteUn(p, 0); //Time
	Write16(p, 0); //SrcDlg
	WriteUn(p, 0); //SrcUin
	Write16(p, 0); //InfoLength

	len = p - buf;
	SendToClient(Client, 999, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestQuickEnterRoom(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	short BaseGameMode = Read16(p);
	short SubGameMode = Read16(p);
	bool IsNewerOpen = Read8(p);
	bool FBSeason = Read8(p);
	bool FBLev = Read8(p);

}

void ResponseQuickEnterRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //RoomID
	Write16(p, 0); //BaseGameMode
	Write16(p, 0); //SubGameMode
	WriteString(p, 0); //RoomName[]
	Write8(p, 0); //SeatNum
	Write8(p, 0); //Flag
	Write8(p, 0); //SeatID
	Write8(p, 0); //TeamID
	Write32(p, 0); //MapID
	Write16(p, 0); //RoomOwnerID
	Write8(p, 0); //SeatStatus[]
	Write8(p, 0); //PlayerCount
	for (size_t i = 0; i < n; i++)
	{ //PlayerRoomVisibleInfo
		BYTE* pPlayerRoomVisibleInfo = p;
		Write16(pPlayerRoomVisibleInfo, 0); //len

		WriteUn(pPlayerRoomVisibleInfo, 0); //Uin
		WriteUn(pPlayerRoomVisibleInfo, 0); //Identity
		Write8(pPlayerRoomVisibleInfo, 0); //SeatID
		Write8(pPlayerRoomVisibleInfo, 0); //TeamID
		Write16(pPlayerRoomVisibleInfo, 0); //PlayerID
		Write8(pPlayerRoomVisibleInfo, 0); //Status
		{ //PlayerDBBaseInfo
			BYTE* pPlayerDBBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerDBBaseInfo, 0); //len

			WriteString(pPlayerDBBaseInfo, 0); //Nickname[]
			Write8(pPlayerDBBaseInfo, 0); //Gender
			Write8(pPlayerDBBaseInfo, 0); //Country
			Write32(pPlayerDBBaseInfo, 0); //License
			WriteUn(pPlayerDBBaseInfo, 0); //Experience
			Write32(pPlayerDBBaseInfo, 0); //SuperMoney
			Write32(pPlayerDBBaseInfo, 0); //Money
			WriteUn(pPlayerDBBaseInfo, 0); //WinNum
			Write32(pPlayerDBBaseInfo, 0); //SecondNum
			Write32(pPlayerDBBaseInfo, 0); //ThirdNum
			WriteUn(pPlayerDBBaseInfo, 0); //TotalNum
			Write32(pPlayerDBBaseInfo, 0); //CurHonor
			Write32(pPlayerDBBaseInfo, 0); //TotalHonor
			Write32(pPlayerDBBaseInfo, 0); //TodayHonor
			Write32(pPlayerDBBaseInfo, 0); //RelaxTime
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationBefore
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationCur
			Write32(pPlayerDBBaseInfo, 0); //Charm
			Write32(pPlayerDBBaseInfo, 0); //DurationGame
			Write32(pPlayerDBBaseInfo, 0); //DanceExp
			Write32(pPlayerDBBaseInfo, 0); //Coupons
			Write32(pPlayerDBBaseInfo, 0); //Admiration
			Write32(pPlayerDBBaseInfo, 0); //LuckMoney
			Write32(pPlayerDBBaseInfo, 0); //TeamWorkExp
			Write32(pPlayerDBBaseInfo, 0); //AchievePoint
			Write32(pPlayerDBBaseInfo, 0); //RegTime
			WriteString(pPlayerDBBaseInfo, 0); //Signature[]
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchPoint
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchNum
			Write16(pPlayerDBBaseInfo, 0); //LuckyMatchFirstNum
			Write8(pPlayerDBBaseInfo, 0); //LuckyMatchBestRand
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchWinNum
			Write32(pPlayerDBBaseInfo, 0); //FizzPointTotal
			Write16(pPlayerDBBaseInfo, 0); //FizzPointDaily
			Write16(pPlayerDBBaseInfo, 0); //FizzPointWeekly
			Write16(pPlayerDBBaseInfo, 0); //FizzPointLastWeek
			Write8(pPlayerDBBaseInfo, 0); //FizzLotteryStatus
			Write32(pPlayerDBBaseInfo, 0); //FizzLastUpdateTime
			Write32(pPlayerDBBaseInfo, 0); //SNSLocaleCode
			Write32(pPlayerDBBaseInfo, 0); //AuctionRightUnlockTime
			Write8(pPlayerDBBaseInfo, 0); //ReserveFlag
			Write32(pPlayerDBBaseInfo, 0); //CurConsumeScore
			Write32(pPlayerDBBaseInfo, 0); //HistoryConsumeScore
			Write8(pPlayerDBBaseInfo, 0); //CrashModeSponsorID
			Write32(pPlayerDBBaseInfo, 0); //Popularity
			Write32(pPlayerDBBaseInfo, 0); //LadderMatchAchievePoint
			Write32(pPlayerDBBaseInfo, 0); //Cash
			Write32(pPlayerDBBaseInfo, 0); //PlayerGPMIdentity
			Write32(pPlayerDBBaseInfo, 0); //PointTotalScore
			WriteUn(pPlayerDBBaseInfo, 0); //totalMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //lastMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalSeasonId
			WriteUn(pPlayerDBBaseInfo, 0); //lastClearMapMedalTime

			len = pPlayerDBBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //PlayerGuildInfo
			BYTE* pPlayerGuildInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerGuildInfo, 0); //len

			WriteString(pPlayerGuildInfo, 0); //GuildName[]
			Write16(pPlayerGuildInfo, 0); //Duty
			Write32(pPlayerGuildInfo, 0); //GuildID
			Write32(pPlayerGuildInfo, 0); //Right
			Write32(pPlayerGuildInfo, 0); //Medal
			Write32(pPlayerGuildInfo, 0); //Contribute
			WriteString(pPlayerGuildInfo, 0); //DutyTitle[]

			len = pPlayerGuildInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write16(pPlayerRoomVisibleInfo, 0); //EquipedItemNum
		for (size_t i = 0; i < n; i++)
		{ //PlayerItemInfo
			BYTE* pPlayerItemInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerItemInfo, 0); //len

			Write32(pPlayerItemInfo, 0); //ItemID
			Write32(pPlayerItemInfo, 0); //ItemNum
			Write32(pPlayerItemInfo, 0); //AvailPeriod
			Write8(pPlayerItemInfo, 0); //Status
			WriteUn(pPlayerItemInfo, 0); //ObtainTime
			Write32(pPlayerItemInfo, 0); //OtherAttribute

			len = pPlayerItemInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write16(pPlayerRoomVisibleInfo, 0); //PetNum
		for (size_t i = 0; i < n; i++)
		{ //PetInfo
			BYTE* pPetInfo = pPlayerRoomVisibleInfo;
			Write16(pPetInfo, 0); //len

			Write32(pPetInfo, 0); //Uin
			Write32(pPetInfo, 0); //PetId
			WriteString(pPetInfo, 0); //PetName[]
			Write8(pPetInfo, 0); //IsProper
			Write16(pPetInfo, 0); //Level
			Write8(pPetInfo, 0); //Status
			Write16(pPetInfo, 0); //PetSkillNum
			for (size_t i = 0; i < n; i++)
			{ //PetSkillList
				BYTE* pPetSkillList = pPetInfo;
				Write16(pPetSkillList, 0); //len

				Write16(pPetSkillList, 0); //SkillID
				Write8(pPetSkillList, 0); //Status
				Write8(pPetSkillList, 0); //Active
				Write32(pPetSkillList, 0); //Value

				len = pPetSkillList - pPetInfo;
				Set16(pPetInfo, (WORD)len);
				pPetInfo += len;
			}
			Write32(pPetInfo, 0); //StrengLevel

			len = pPetInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //PlayerGuildMatchInfo
			BYTE* pPlayerGuildMatchInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerGuildMatchInfo, 0); //len

			Write32(pPlayerGuildMatchInfo, 0); //SelfPoint
			Write32(pPlayerGuildMatchInfo, 0); //WinNum
			Write32(pPlayerGuildMatchInfo, 0); //TotalNum

			len = pPlayerGuildMatchInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //IsInTopList
		Write8(pPlayerRoomVisibleInfo, 0); //LoverRaceOrPro
		Write8(pPlayerRoomVisibleInfo, 0); //TmpEffectNum
		Write32(pPlayerRoomVisibleInfo, 0); //TmpEffectItems[]
		Write8(pPlayerRoomVisibleInfo, 0); //OBState
		Write8(pPlayerRoomVisibleInfo, 0); //DebutOrX5
		Write8(pPlayerRoomVisibleInfo, 0); //RandKeyFlag
		WriteUn(pPlayerRoomVisibleInfo, 0); //VipFlag
		Write8(pPlayerRoomVisibleInfo, 0); //HaveAppellation
		for (size_t i = 0; i < n; i++)
		{ //CurAppellation
			BYTE* pCurAppellation = pPlayerRoomVisibleInfo;
			Write16(pCurAppellation, 0); //len

			Write8(pCurAppellation, 0); //Type
			Write8(pCurAppellation, 0); //Level
			Write8(pCurAppellation, 0); //Status
			Write8(pCurAppellation, 0); //Difficulty
			Write32(pCurAppellation, 0); //MapId
			Write32(pCurAppellation, 0); //Value

			len = pCurAppellation - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //NobleInfo
			BYTE* pNobleInfo = pPlayerRoomVisibleInfo;
			Write16(pNobleInfo, 0); //len

			Write32(pNobleInfo, 0); //NobleID
			Write8(pNobleInfo, 0); //NobleLevel
			Write32(pNobleInfo, 0); //NoblePoint
			Write32(pNobleInfo, 0); //NobleLeftDays

			len = pNobleInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasCarryWizard
		for (size_t i = 0; i < n; i++)
		{ //CarryWizardInfo
			BYTE* pCarryWizardInfo = pPlayerRoomVisibleInfo;
			Write16(pCarryWizardInfo, 0); //len

			Write16(pCarryWizardInfo, 0); //WizardID
			WriteString(pCarryWizardInfo, 0); //Nickname[]
			Write16(pCarryWizardInfo, 0); //WizardType
			Write8(pCarryWizardInfo, 0); //Order
			Write8(pCarryWizardInfo, 0); //EvolutionBranch
			Write8(pCarryWizardInfo, 0); //IsHuanHua

			len = pCarryWizardInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //GuildVipBaseInfo
			BYTE* pGuildVipBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pGuildVipBaseInfo, 0); //len

			Write8(pGuildVipBaseInfo, 0); //GuildVipLevel
			Write32(pGuildVipBaseInfo, 0); //GuildVipPoint

			len = pGuildVipBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write32(pPlayerRoomVisibleInfo, 0); //ExFlag
		Write8(pPlayerRoomVisibleInfo, 0); //HaveLDMBaseInfo
		for (size_t i = 0; i < n; i++)
		{ //PlayerLDMBaseInfo
			BYTE* pPlayerLDMBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerLDMBaseInfo, 0); //len

			Write8(pPlayerLDMBaseInfo, 0); //Grade
			Write32(pPlayerLDMBaseInfo, 0); //Score
			Write32(pPlayerLDMBaseInfo, 0); //MaxScore
			Write32(pPlayerLDMBaseInfo, 0); //MaxGrade

			len = pPlayerLDMBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasWl
		for (size_t i = 0; i < n; i++)
		{ //PlayerWlVisibleInfo
			BYTE* pPlayerWlVisibleInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerWlVisibleInfo, 0); //len

			Write32(pPlayerWlVisibleInfo, 0); //WonderLandID
			WriteString(pPlayerWlVisibleInfo, 0); //WonderLandName[]
			Write16(pPlayerWlVisibleInfo, 0); //WonderLandDuty
			Write8(pPlayerWlVisibleInfo, 0); //SubType
			Write8(pPlayerWlVisibleInfo, 0); //GuildGrade

			len = pPlayerWlVisibleInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasLoverVip
		for (size_t i = 0; i < n; i++)
		{ //LoverVipInfo
			BYTE* pLoverVipInfo = pPlayerRoomVisibleInfo;
			Write16(pLoverVipInfo, 0); //len

			Write8(pLoverVipInfo, 0); //LoverVipLevel
			Write32(pLoverVipInfo, 0); //LoverVipPoint
			Write8(pLoverVipInfo, 0); //GrowRate

			len = pLoverVipInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasBattleModeSkillInfoList
		for (size_t i = 0; i < n; i++)
		{ //BattleModeSkillInfoList
			BYTE* pBattleModeSkillInfoList = pPlayerRoomVisibleInfo;
			Write16(pBattleModeSkillInfoList, 0); //len

			Write8(pBattleModeSkillInfoList, 0); //SkillNum
			for (size_t i = 0; i < n; i++)
			{ //SkillInfo
				BYTE* pSkillInfo = pBattleModeSkillInfoList;
				Write16(pSkillInfo, 0); //len

				Write16(pSkillInfo, 0); //SkillId
				Write8(pSkillInfo, 0); //SkillLevel

				len = pSkillInfo - pBattleModeSkillInfoList;
				Set16(pBattleModeSkillInfoList, (WORD)len);
				pBattleModeSkillInfoList += len;
			}

			len = pBattleModeSkillInfoList - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}

		len = pPlayerRoomVisibleInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen
	Write8(p, 0); //PlayerCount2
	for (size_t i = 0; i < n; i++)
	{ //PlayerRelationInfo
		BYTE* pPlayerRelationInfo = p;
		Write16(pPlayerRelationInfo, 0); //len

		Write32(pPlayerRelationInfo, 0); //SrcUin
		Write32(pPlayerRelationInfo, 0); //RelationFlag
		Write32(pPlayerRelationInfo, 0); //RelationUin
		WriteString(pPlayerRelationInfo, 0); //RelationNickname[]
		Write32(pPlayerRelationInfo, 0); //EngageTime
		Write32(pPlayerRelationInfo, 0); //NextCanBookingTimeLimit
		Write32(pPlayerRelationInfo, 0); //BeginHoneyMoonTime
		Write32(pPlayerRelationInfo, 0); //EndHoneyMoonTime
		Write8(pPlayerRelationInfo, 0); //EngageFlag

		len = pPlayerRelationInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //KartNum
	for (size_t i = 0; i < n; i++)
	{ //KartRefitInfo
		BYTE* pKartRefitInfo = p;
		Write16(pKartRefitInfo, 0); //len

		Write32(pKartRefitInfo, 0); //Uin
		Write32(pKartRefitInfo, 0); //KartId
		Write32(pKartRefitInfo, 0); //RefitCout
		Write16(pKartRefitInfo, 0); //MaxFlags
		Write16(pKartRefitInfo, 0); //WWeight
		Write16(pKartRefitInfo, 0); //SpeedWeight
		Write16(pKartRefitInfo, 0); //JetWeight
		Write16(pKartRefitInfo, 0); //SJetWeight
		Write16(pKartRefitInfo, 0); //AccuWeight
		Write32(pKartRefitInfo, 0); //ShapeRefitCount
		Write32(pKartRefitInfo, 0); //KartHeadRefitItemID
		Write32(pKartRefitInfo, 0); //KartTailRefitItemID
		Write32(pKartRefitInfo, 0); //KartFlankRefitItemID
		Write32(pKartRefitInfo, 0); //KartTireRefitItemID

		len = pKartRefitInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //LoverRaceOrPro
	{ //STDynamicInfo
		BYTE* pSTDynamicInfo = p;
		Write16(pSTDynamicInfo, 0); //len

		Write8(pSTDynamicInfo, 0); //Season
		Write8(pSTDynamicInfo, 0); //Timeslot
		Write8(pSTDynamicInfo, 0); //Weather

		len = pSTDynamicInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //PreKnowMapID
	Write8(p, 0); //HasMoreInfo
	Write32(p, 0); //MapSubID
	Write8(p, 0); //HasFBInfo
	for (size_t i = 0; i < n; i++)
	{ //FBInfo
		BYTE* pFBInfo = p;
		Write16(pFBInfo, 0); //len

		Write8(pFBInfo, 0); //AvailableLev
		Write8(pFBInfo, 0); //Lev
		Write8(pFBInfo, 0); //SubLev
		Write32(pFBInfo, 0); //BossID
		Write8(pFBInfo, 0); //FBSeason

		len = pFBInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //GuildScoreInNextGame
	Write16(p, 0); //GuildScoreAlreadyAward
	Write16(p, 0); //GuildScoreTotalAward

	len = p - buf;
	SendToClient(Client, 106, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyQuickEnterRoomMoreInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //PlayerCount
	for (size_t i = 0; i < n; i++)
	{ //PlayerRoomVisibleInfo
		BYTE* pPlayerRoomVisibleInfo = p;
		Write16(pPlayerRoomVisibleInfo, 0); //len

		WriteUn(pPlayerRoomVisibleInfo, 0); //Uin
		WriteUn(pPlayerRoomVisibleInfo, 0); //Identity
		Write8(pPlayerRoomVisibleInfo, 0); //SeatID
		Write8(pPlayerRoomVisibleInfo, 0); //TeamID
		Write16(pPlayerRoomVisibleInfo, 0); //PlayerID
		Write8(pPlayerRoomVisibleInfo, 0); //Status
		{ //PlayerDBBaseInfo
			BYTE* pPlayerDBBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerDBBaseInfo, 0); //len

			WriteString(pPlayerDBBaseInfo, 0); //Nickname[]
			Write8(pPlayerDBBaseInfo, 0); //Gender
			Write8(pPlayerDBBaseInfo, 0); //Country
			Write32(pPlayerDBBaseInfo, 0); //License
			WriteUn(pPlayerDBBaseInfo, 0); //Experience
			Write32(pPlayerDBBaseInfo, 0); //SuperMoney
			Write32(pPlayerDBBaseInfo, 0); //Money
			WriteUn(pPlayerDBBaseInfo, 0); //WinNum
			Write32(pPlayerDBBaseInfo, 0); //SecondNum
			Write32(pPlayerDBBaseInfo, 0); //ThirdNum
			WriteUn(pPlayerDBBaseInfo, 0); //TotalNum
			Write32(pPlayerDBBaseInfo, 0); //CurHonor
			Write32(pPlayerDBBaseInfo, 0); //TotalHonor
			Write32(pPlayerDBBaseInfo, 0); //TodayHonor
			Write32(pPlayerDBBaseInfo, 0); //RelaxTime
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationBefore
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationCur
			Write32(pPlayerDBBaseInfo, 0); //Charm
			Write32(pPlayerDBBaseInfo, 0); //DurationGame
			Write32(pPlayerDBBaseInfo, 0); //DanceExp
			Write32(pPlayerDBBaseInfo, 0); //Coupons
			Write32(pPlayerDBBaseInfo, 0); //Admiration
			Write32(pPlayerDBBaseInfo, 0); //LuckMoney
			Write32(pPlayerDBBaseInfo, 0); //TeamWorkExp
			Write32(pPlayerDBBaseInfo, 0); //AchievePoint
			Write32(pPlayerDBBaseInfo, 0); //RegTime
			WriteString(pPlayerDBBaseInfo, 0); //Signature[]
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchPoint
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchNum
			Write16(pPlayerDBBaseInfo, 0); //LuckyMatchFirstNum
			Write8(pPlayerDBBaseInfo, 0); //LuckyMatchBestRand
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchWinNum
			Write32(pPlayerDBBaseInfo, 0); //FizzPointTotal
			Write16(pPlayerDBBaseInfo, 0); //FizzPointDaily
			Write16(pPlayerDBBaseInfo, 0); //FizzPointWeekly
			Write16(pPlayerDBBaseInfo, 0); //FizzPointLastWeek
			Write8(pPlayerDBBaseInfo, 0); //FizzLotteryStatus
			Write32(pPlayerDBBaseInfo, 0); //FizzLastUpdateTime
			Write32(pPlayerDBBaseInfo, 0); //SNSLocaleCode
			Write32(pPlayerDBBaseInfo, 0); //AuctionRightUnlockTime
			Write8(pPlayerDBBaseInfo, 0); //ReserveFlag
			Write32(pPlayerDBBaseInfo, 0); //CurConsumeScore
			Write32(pPlayerDBBaseInfo, 0); //HistoryConsumeScore
			Write8(pPlayerDBBaseInfo, 0); //CrashModeSponsorID
			Write32(pPlayerDBBaseInfo, 0); //Popularity
			Write32(pPlayerDBBaseInfo, 0); //LadderMatchAchievePoint
			Write32(pPlayerDBBaseInfo, 0); //Cash
			Write32(pPlayerDBBaseInfo, 0); //PlayerGPMIdentity
			Write32(pPlayerDBBaseInfo, 0); //PointTotalScore
			WriteUn(pPlayerDBBaseInfo, 0); //totalMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //lastMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalSeasonId
			WriteUn(pPlayerDBBaseInfo, 0); //lastClearMapMedalTime

			len = pPlayerDBBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //PlayerGuildInfo
			BYTE* pPlayerGuildInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerGuildInfo, 0); //len

			WriteString(pPlayerGuildInfo, 0); //GuildName[]
			Write16(pPlayerGuildInfo, 0); //Duty
			Write32(pPlayerGuildInfo, 0); //GuildID
			Write32(pPlayerGuildInfo, 0); //Right
			Write32(pPlayerGuildInfo, 0); //Medal
			Write32(pPlayerGuildInfo, 0); //Contribute
			WriteString(pPlayerGuildInfo, 0); //DutyTitle[]

			len = pPlayerGuildInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write16(pPlayerRoomVisibleInfo, 0); //EquipedItemNum
		for (size_t i = 0; i < n; i++)
		{ //PlayerItemInfo
			BYTE* pPlayerItemInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerItemInfo, 0); //len

			Write32(pPlayerItemInfo, 0); //ItemID
			Write32(pPlayerItemInfo, 0); //ItemNum
			Write32(pPlayerItemInfo, 0); //AvailPeriod
			Write8(pPlayerItemInfo, 0); //Status
			WriteUn(pPlayerItemInfo, 0); //ObtainTime
			Write32(pPlayerItemInfo, 0); //OtherAttribute

			len = pPlayerItemInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write16(pPlayerRoomVisibleInfo, 0); //PetNum
		for (size_t i = 0; i < n; i++)
		{ //PetInfo
			BYTE* pPetInfo = pPlayerRoomVisibleInfo;
			Write16(pPetInfo, 0); //len

			Write32(pPetInfo, 0); //Uin
			Write32(pPetInfo, 0); //PetId
			WriteString(pPetInfo, 0); //PetName[]
			Write8(pPetInfo, 0); //IsProper
			Write16(pPetInfo, 0); //Level
			Write8(pPetInfo, 0); //Status
			Write16(pPetInfo, 0); //PetSkillNum
			for (size_t i = 0; i < n; i++)
			{ //PetSkillList
				BYTE* pPetSkillList = pPetInfo;
				Write16(pPetSkillList, 0); //len

				Write16(pPetSkillList, 0); //SkillID
				Write8(pPetSkillList, 0); //Status
				Write8(pPetSkillList, 0); //Active
				Write32(pPetSkillList, 0); //Value

				len = pPetSkillList - pPetInfo;
				Set16(pPetInfo, (WORD)len);
				pPetInfo += len;
			}
			Write32(pPetInfo, 0); //StrengLevel

			len = pPetInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //PlayerGuildMatchInfo
			BYTE* pPlayerGuildMatchInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerGuildMatchInfo, 0); //len

			Write32(pPlayerGuildMatchInfo, 0); //SelfPoint
			Write32(pPlayerGuildMatchInfo, 0); //WinNum
			Write32(pPlayerGuildMatchInfo, 0); //TotalNum

			len = pPlayerGuildMatchInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //IsInTopList
		Write8(pPlayerRoomVisibleInfo, 0); //LoverRaceOrPro
		Write8(pPlayerRoomVisibleInfo, 0); //TmpEffectNum
		Write32(pPlayerRoomVisibleInfo, 0); //TmpEffectItems[]
		Write8(pPlayerRoomVisibleInfo, 0); //OBState
		Write8(pPlayerRoomVisibleInfo, 0); //DebutOrX5
		Write8(pPlayerRoomVisibleInfo, 0); //RandKeyFlag
		WriteUn(pPlayerRoomVisibleInfo, 0); //VipFlag
		Write8(pPlayerRoomVisibleInfo, 0); //HaveAppellation
		for (size_t i = 0; i < n; i++)
		{ //CurAppellation
			BYTE* pCurAppellation = pPlayerRoomVisibleInfo;
			Write16(pCurAppellation, 0); //len

			Write8(pCurAppellation, 0); //Type
			Write8(pCurAppellation, 0); //Level
			Write8(pCurAppellation, 0); //Status
			Write8(pCurAppellation, 0); //Difficulty
			Write32(pCurAppellation, 0); //MapId
			Write32(pCurAppellation, 0); //Value

			len = pCurAppellation - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //NobleInfo
			BYTE* pNobleInfo = pPlayerRoomVisibleInfo;
			Write16(pNobleInfo, 0); //len

			Write32(pNobleInfo, 0); //NobleID
			Write8(pNobleInfo, 0); //NobleLevel
			Write32(pNobleInfo, 0); //NoblePoint
			Write32(pNobleInfo, 0); //NobleLeftDays

			len = pNobleInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasCarryWizard
		for (size_t i = 0; i < n; i++)
		{ //CarryWizardInfo
			BYTE* pCarryWizardInfo = pPlayerRoomVisibleInfo;
			Write16(pCarryWizardInfo, 0); //len

			Write16(pCarryWizardInfo, 0); //WizardID
			WriteString(pCarryWizardInfo, 0); //Nickname[]
			Write16(pCarryWizardInfo, 0); //WizardType
			Write8(pCarryWizardInfo, 0); //Order
			Write8(pCarryWizardInfo, 0); //EvolutionBranch
			Write8(pCarryWizardInfo, 0); //IsHuanHua

			len = pCarryWizardInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //GuildVipBaseInfo
			BYTE* pGuildVipBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pGuildVipBaseInfo, 0); //len

			Write8(pGuildVipBaseInfo, 0); //GuildVipLevel
			Write32(pGuildVipBaseInfo, 0); //GuildVipPoint

			len = pGuildVipBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write32(pPlayerRoomVisibleInfo, 0); //ExFlag
		Write8(pPlayerRoomVisibleInfo, 0); //HaveLDMBaseInfo
		for (size_t i = 0; i < n; i++)
		{ //PlayerLDMBaseInfo
			BYTE* pPlayerLDMBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerLDMBaseInfo, 0); //len

			Write8(pPlayerLDMBaseInfo, 0); //Grade
			Write32(pPlayerLDMBaseInfo, 0); //Score
			Write32(pPlayerLDMBaseInfo, 0); //MaxScore
			Write32(pPlayerLDMBaseInfo, 0); //MaxGrade

			len = pPlayerLDMBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasWl
		for (size_t i = 0; i < n; i++)
		{ //PlayerWlVisibleInfo
			BYTE* pPlayerWlVisibleInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerWlVisibleInfo, 0); //len

			Write32(pPlayerWlVisibleInfo, 0); //WonderLandID
			WriteString(pPlayerWlVisibleInfo, 0); //WonderLandName[]
			Write16(pPlayerWlVisibleInfo, 0); //WonderLandDuty
			Write8(pPlayerWlVisibleInfo, 0); //SubType
			Write8(pPlayerWlVisibleInfo, 0); //GuildGrade

			len = pPlayerWlVisibleInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasLoverVip
		for (size_t i = 0; i < n; i++)
		{ //LoverVipInfo
			BYTE* pLoverVipInfo = pPlayerRoomVisibleInfo;
			Write16(pLoverVipInfo, 0); //len

			Write8(pLoverVipInfo, 0); //LoverVipLevel
			Write32(pLoverVipInfo, 0); //LoverVipPoint
			Write8(pLoverVipInfo, 0); //GrowRate

			len = pLoverVipInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasBattleModeSkillInfoList
		for (size_t i = 0; i < n; i++)
		{ //BattleModeSkillInfoList
			BYTE* pBattleModeSkillInfoList = pPlayerRoomVisibleInfo;
			Write16(pBattleModeSkillInfoList, 0); //len

			Write8(pBattleModeSkillInfoList, 0); //SkillNum
			for (size_t i = 0; i < n; i++)
			{ //SkillInfo
				BYTE* pSkillInfo = pBattleModeSkillInfoList;
				Write16(pSkillInfo, 0); //len

				Write16(pSkillInfo, 0); //SkillId
				Write8(pSkillInfo, 0); //SkillLevel

				len = pSkillInfo - pBattleModeSkillInfoList;
				Set16(pBattleModeSkillInfoList, (WORD)len);
				pBattleModeSkillInfoList += len;
			}

			len = pBattleModeSkillInfoList - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}

		len = pPlayerRoomVisibleInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //PlayerCount2
	for (size_t i = 0; i < n; i++)
	{ //PlayerRelationInfo
		BYTE* pPlayerRelationInfo = p;
		Write16(pPlayerRelationInfo, 0); //len

		Write32(pPlayerRelationInfo, 0); //SrcUin
		Write32(pPlayerRelationInfo, 0); //RelationFlag
		Write32(pPlayerRelationInfo, 0); //RelationUin
		WriteString(pPlayerRelationInfo, 0); //RelationNickname[]
		Write32(pPlayerRelationInfo, 0); //EngageTime
		Write32(pPlayerRelationInfo, 0); //NextCanBookingTimeLimit
		Write32(pPlayerRelationInfo, 0); //BeginHoneyMoonTime
		Write32(pPlayerRelationInfo, 0); //EndHoneyMoonTime
		Write8(pPlayerRelationInfo, 0); //EngageFlag

		len = pPlayerRelationInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //KartNum
	for (size_t i = 0; i < n; i++)
	{ //KartRefitInfo
		BYTE* pKartRefitInfo = p;
		Write16(pKartRefitInfo, 0); //len

		Write32(pKartRefitInfo, 0); //Uin
		Write32(pKartRefitInfo, 0); //KartId
		Write32(pKartRefitInfo, 0); //RefitCout
		Write16(pKartRefitInfo, 0); //MaxFlags
		Write16(pKartRefitInfo, 0); //WWeight
		Write16(pKartRefitInfo, 0); //SpeedWeight
		Write16(pKartRefitInfo, 0); //JetWeight
		Write16(pKartRefitInfo, 0); //SJetWeight
		Write16(pKartRefitInfo, 0); //AccuWeight
		Write32(pKartRefitInfo, 0); //ShapeRefitCount
		Write32(pKartRefitInfo, 0); //KartHeadRefitItemID
		Write32(pKartRefitInfo, 0); //KartTailRefitItemID
		Write32(pKartRefitInfo, 0); //KartFlankRefitItemID
		Write32(pKartRefitInfo, 0); //KartTireRefitItemID

		len = pKartRefitInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasNext

	len = p - buf;
	SendToClient(Client, 225, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestChangeSeatState(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	short RoomID = Read16(p);
	bool SeatID = Read8(p);
	bool SeatState = Read8(p);

}

void ResponseChangeSeatState(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //SeatID
	Write8(p, 0); //SeatState
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 107, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyChangeSeatState(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //SeatID
	Write8(p, 0); //SeatState

	len = p - buf;
	SendToClient(Client, 502, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestKickFromRoom(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	Un DstUin = ReadUn(p);
	bool KickReason = Read8(p);

}

void ResponseKickFromRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	WriteUn(p, 0); //DstUin
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 108, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyKickFromRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //RoomID
	WriteUn(p, 0); //DstUin
	Write16(p, 0); //ReasonID
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 503, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyUnLockMap(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //MapID
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 821, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestChangeReadyState(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	bool ReadyState = Read8(p);

}

void ResponseChangeReadyState(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReadyState
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 109, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyChangeReadyState(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //Uin
	Write8(p, 0); //ReadyState

	len = p - buf;
	SendToClient(Client, 504, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestStartGame(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);

}

void ResponseStartGame(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 110, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestTalk(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	bool Type = Read8(p);
	bool ClientUseFlag = Read8(p);
	Un DestPlayerUin = ReadUn(p);
	short ContentLength = Read16(p);
	bool BugletType = Read8(p);
	bool ReserveFlag = Read8(p);

}

void ResponseTalk(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //Type
	Write8(p, 0); //ClientUseFlag
	WriteUn(p, 0); //DestPlayerUin
	Write8(p, 0); //ReasonLen
	Write8(p, 0); //BugletType
	Write8(p, 0); //ReserveFlag
	Write8(p, 0); //ReserveData

	len = p - buf;
	SendToClient(Client, 111, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyTalk(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //SrcUin
	WriteString(p, 0); //SrcNickName[]
	Write8(p, 0); //Gender
	Write8(p, 0); //Type
	Write8(p, 0); //ClientUseFlag
	WriteUn(p, 0); //DestPlayerUin
	Write16(p, 0); //ContentLength
	Write8(p, 0); //BugletType
	Write32(p, 0); //Identify
	WriteUn(p, 0); //VipFlag
	Write8(p, 0); //CanReport
	{ //TalkerInfo
		BYTE* pTalkerInfo = p;
		Write16(pTalkerInfo, 0); //len

		Write32(pTalkerInfo, 0); //Exp
		{ //NobleInfo
			BYTE* pNobleInfo = pTalkerInfo;
			Write16(pNobleInfo, 0); //len

			Write32(pNobleInfo, 0); //NobleID
			Write8(pNobleInfo, 0); //NobleLevel
			Write32(pNobleInfo, 0); //NoblePoint
			Write32(pNobleInfo, 0); //NobleLeftDays

			len = pNobleInfo - pTalkerInfo;
			Set16(pTalkerInfo, (WORD)len);
			pTalkerInfo += len;
		}
		{ //GuildVipBaseInfo
			BYTE* pGuildVipBaseInfo = pTalkerInfo;
			Write16(pGuildVipBaseInfo, 0); //len

			Write8(pGuildVipBaseInfo, 0); //GuildVipLevel
			Write32(pGuildVipBaseInfo, 0); //GuildVipPoint

			len = pGuildVipBaseInfo - pTalkerInfo;
			Set16(pTalkerInfo, (WORD)len);
			pTalkerInfo += len;
		}
		WriteU(pTalkerInfo, 0); //GuildId
		Write8(pTalkerInfo, 0); //HasLoverVip
		for (size_t i = 0; i < n; i++)
		{ //LoverVipInfo
			BYTE* pLoverVipInfo = pTalkerInfo;
			Write16(pLoverVipInfo, 0); //len

			Write8(pLoverVipInfo, 0); //LoverVipLevel
			Write32(pLoverVipInfo, 0); //LoverVipPoint
			Write8(pLoverVipInfo, 0); //GrowRate

			len = pLoverVipInfo - pTalkerInfo;
			Set16(pTalkerInfo, (WORD)len);
			pTalkerInfo += len;
		}

		len = pTalkerInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReserveFlag
	Write32(p, 0); //ReserveData
	WriteUn(p, 0); //transBufType
	WriteUn(p, 0); //transBufLen

	len = p - buf;
	SendToClient(Client, 505, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestHello(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	bool InfoLength = Read8(p);
	int LastHelloRoundtripTime = Read32(p);

}

void ResponseHello(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen
	WriteUn(p, 0); //Time
	WriteUn(p, 0); //Uin
	Write32(p, 0); //ServerTime

	len = p - buf;
	SendToClient(Client, 112, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyTestNetSpeed(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //StartSec
	WriteUn(p, 0); //USec

	len = p - buf;
	SendToClient(Client, 506, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void AckTestNetSpeed(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un StartSec = ReadUn(p);
	Un USec = ReadUn(p);

}

void NotifyKickFromServer(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ReasonID
	WriteUn(p, 0); //SrcUin
	Write8(p, 0); //ReasonLen
	Write8(p, 0); //AntiCheatMode
	Write8(p, 0); //KickType

	len = p - buf;
	SendToClient(Client, 900, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetFriendList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);

}

void ResponseGetFriendList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	WriteUn(p, 0); //Uin
	Write16(p, 0); //MaxFriendNum
	Write16(p, 0); //TotalFriendNum
	Write16(p, 0); //FriendGroupNum
	for (size_t i = 0; i < n; i++)
	{ //FriendGroupInfo
		BYTE* pFriendGroupInfo = p;
		Write16(pFriendGroupInfo, 0); //len

		Write16(pFriendGroupInfo, 0); //FriendGroupID
		WriteString(pFriendGroupInfo, 0); //FriendGroupName[]
		Write16(pFriendGroupInfo, 0); //CurrentFriendNum
		Write16(pFriendGroupInfo, 0); //FriendUin[]

		len = pFriendGroupInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetGroupFriendBaseInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	short GroupID = Read16(p);

}

void ResponseGetGroupFriendBaseInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //GroupID
	{ //GroupFriendBaseInfo
		BYTE* pGroupFriendBaseInfo = p;
		Write16(pGroupFriendBaseInfo, 0); //len

		WriteUn(pGroupFriendBaseInfo, 0); //Uin
		WriteString(pGroupFriendBaseInfo, 0); //Nickname[]
		Write8(pGroupFriendBaseInfo, 0); //Gender
		WriteUn(pGroupFriendBaseInfo, 0); //Identity
		Write8(pGroupFriendBaseInfo, 0); //IsOnLine
		WriteUn(pGroupFriendBaseInfo, 0); //Experience
		Write32(pGroupFriendBaseInfo, 0); //License
		Write32(pGroupFriendBaseInfo, 0); //TotalHonor
		Write32(pGroupFriendBaseInfo, 0); //Charm
		Write32(pGroupFriendBaseInfo, 0); //DanceExp
		Write32(pGroupFriendBaseInfo, 0); //Admiration
		Write32(pGroupFriendBaseInfo, 0); //TeamWorkExp
		WriteString(pGroupFriendBaseInfo, 0); //Signature[]
		WriteUn(pGroupFriendBaseInfo, 0); //VipFlag
		Write32(pGroupFriendBaseInfo, 0); //LocaleCode
		Write8(pGroupFriendBaseInfo, 0); //HaveAppellation
		for (size_t i = 0; i < n; i++)
		{ //CurAppellation
			BYTE* pCurAppellation = pGroupFriendBaseInfo;
			Write16(pCurAppellation, 0); //len

			Write8(pCurAppellation, 0); //Type
			Write8(pCurAppellation, 0); //Level
			Write8(pCurAppellation, 0); //Status
			Write8(pCurAppellation, 0); //Difficulty
			Write32(pCurAppellation, 0); //MapId
			Write32(pCurAppellation, 0); //Value

			len = pCurAppellation - pGroupFriendBaseInfo;
			Set16(pGroupFriendBaseInfo, (WORD)len);
			pGroupFriendBaseInfo += len;
		}
		{ //NobleInfo
			BYTE* pNobleInfo = pGroupFriendBaseInfo;
			Write16(pNobleInfo, 0); //len

			Write32(pNobleInfo, 0); //NobleID
			Write8(pNobleInfo, 0); //NobleLevel
			Write32(pNobleInfo, 0); //NoblePoint
			Write32(pNobleInfo, 0); //NobleLeftDays

			len = pNobleInfo - pGroupFriendBaseInfo;
			Set16(pGroupFriendBaseInfo, (WORD)len);
			pGroupFriendBaseInfo += len;
		}
		Write8(pGroupFriendBaseInfo, 0); //HasWizard
		{ //GuildVipBaseInfo
			BYTE* pGuildVipBaseInfo = pGroupFriendBaseInfo;
			Write16(pGuildVipBaseInfo, 0); //len

			Write8(pGuildVipBaseInfo, 0); //GuildVipLevel
			Write32(pGuildVipBaseInfo, 0); //GuildVipPoint

			len = pGuildVipBaseInfo - pGroupFriendBaseInfo;
			Set16(pGroupFriendBaseInfo, (WORD)len);
			pGroupFriendBaseInfo += len;
		}
		Write8(pGroupFriendBaseInfo, 0); //HasLDMInfo
		for (size_t i = 0; i < n; i++)
		{ //LDMInfo
			BYTE* pLDMInfo = pGroupFriendBaseInfo;
			Write16(pLDMInfo, 0); //len

			Write8(pLDMInfo, 0); //Grade
			Write32(pLDMInfo, 0); //Score
			Write32(pLDMInfo, 0); //MaxScore
			Write32(pLDMInfo, 0); //MaxGrade

			len = pLDMInfo - pGroupFriendBaseInfo;
			Set16(pGroupFriendBaseInfo, (WORD)len);
			pGroupFriendBaseInfo += len;
		}
		Write8(pGroupFriendBaseInfo, 0); //HasLoverVip
		for (size_t i = 0; i < n; i++)
		{ //LoverVipInfo
			BYTE* pLoverVipInfo = pGroupFriendBaseInfo;
			Write16(pLoverVipInfo, 0); //len

			Write8(pLoverVipInfo, 0); //LoverVipLevel
			Write32(pLoverVipInfo, 0); //LoverVipPoint
			Write8(pLoverVipInfo, 0); //GrowRate

			len = pLoverVipInfo - pGroupFriendBaseInfo;
			Set16(pGroupFriendBaseInfo, (WORD)len);
			pGroupFriendBaseInfo += len;
		}
		Write32(pGroupFriendBaseInfo, 0); //MaxDayPveScore
		Write32(pGroupFriendBaseInfo, 0); //MaxHistoryPveScore
		WriteUn(pGroupFriendBaseInfo, 0); //totalMapMedalNum

		len = pGroupFriendBaseInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 148, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestModifyPlayerSignature(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	char[] Signature[] = ReadString(p);

}

void ResponseModifyPlayerSignature(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen
	WriteString(p, 0); //Signature[]

	len = p - buf;
	SendToClient(Client, 376, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestAddFriend(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	Un DstUin = ReadUn(p);
	Un WordLength = ReadUn(p);
	UCHAR Type = Read8(p);

}

void ResponseAddFriend(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	WriteUn(p, 0); //Uin
	WriteUn(p, 0); //DstUin
	Write8(p, 0); //ReasonLen
	Write8(p, 0); //Type

	len = p - buf;
	SendToClient(Client, 114, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestDeleteFriend(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	Un FriendUin = ReadUn(p);
	short FriendGroupID = Read16(p);

}

void ResponseDeleteFriend(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	WriteUn(p, 0); //Uin
	WriteUn(p, 0); //FriendUin
	Write16(p, 0); //FriendGroupID
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 115, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestAddFriendGroup(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	bool GroupNameLen = Read8(p);

}

void ResponseAddFriendGroup(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	WriteUn(p, 0); //Uin
	Write8(p, 0); //GroupNameLen
	Write16(p, 0); //FriendGroupID
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 116, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestDeleteFriendGroup(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	short FriendGroupID = Read16(p);

}

void ResponseDeleteFriendGroup(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	WriteUn(p, 0); //Uin
	Write16(p, 0); //FriendGroupID
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 117, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestChangeFriendGroupName(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	short FriendGroupID = Read16(p);
	bool GroupNewNameLen = Read8(p);

}

void ResponseChangeFriendGroupName(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	WriteUn(p, 0); //Uin
	Write16(p, 0); //FriendGroupID
	Write8(p, 0); //GroupNewNameLen
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 149, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestMoveFriendToSomeGroup(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	Un FriendUin = ReadUn(p);
	short SrcGroupID = Read16(p);
	short DstGroupID = Read16(p);

}

void ResponseMoveFriendToSomeGroup(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	WriteUn(p, 0); //Uin
	WriteUn(p, 0); //FriendUin
	Write16(p, 0); //SrcGroupID
	Write16(p, 0); //DstGroupID
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 118, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyBeAddedAsFriend(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //SrcUin
	WriteUn(p, 0); //DstUin
	{ //SrcPlayerInfo
		BYTE* pSrcPlayerInfo = p;
		Write16(pSrcPlayerInfo, 0); //len

		Write8(pSrcPlayerInfo, 0); //Gender
		Write8(pSrcPlayerInfo, 0); //Country
		WriteString(pSrcPlayerInfo, 0); //NickName[]

		len = pSrcPlayerInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //WordLength
	Write8(p, 0); //Type

	len = p - buf;
	SendToClient(Client, 507, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void AckBeAddedAsFriend(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	short ResultID = Read16(p);
	Un SrcUin = ReadUn(p);
	Un DstUin = ReadUn(p);
	short WordLength = Read16(p);
	UCHAR Type = Read8(p);

}

void NotifyAddFriendResult(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	WriteUn(p, 0); //SrcUin
	WriteUn(p, 0); //DstUin
	Write16(p, 0); //WordLength
	Write8(p, 0); //ReasonLen
	Write8(p, 0); //Type

	len = p - buf;
	SendToClient(Client, 508, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyBeDeletedByFriend(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //GroupID
	WriteUn(p, 0); //FriendUin
	{ //FriendPlayerInfo
		BYTE* pFriendPlayerInfo = p;
		Write16(pFriendPlayerInfo, 0); //len

		Write8(pFriendPlayerInfo, 0); //Gender
		Write8(pFriendPlayerInfo, 0); //Country
		WriteString(pFriendPlayerInfo, 0); //NickName[]

		len = pFriendPlayerInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 553, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyGameBegin(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //NormalLoadTime
	Write32(p, 0); //MapID
	WriteString(p, 0); //MapHash[]
	WriteUn(p, 0); //GameID
	WriteUn(p, 0); //Seed
	Write8(p, 0); //CurrentPlayers
	Write16(p, 0); //RaceTrackOrders[]
	Write16(p, 0); //TotalMapRound
	WriteUn(p, 0); //PropUpdateInterval
	Write32(p, 0); //Record
	Write8(p, 0); //NianShouTypeNum
	for (size_t i = 0; i < n; i++)
	{ //NianShouAwardInfo
		BYTE* pNianShouAwardInfo = p;
		Write16(pNianShouAwardInfo, 0); //len

		Write8(pNianShouAwardInfo, 0); //AwardInGameType
		Write32(pNianShouAwardInfo, 0); //ActIDForClient
		Write8(pNianShouAwardInfo, 0); //PointArrayIdx
		Write8(pNianShouAwardInfo, 0); //CurrAwardNum
		Write8(pNianShouAwardInfo, 0); //AwardPos[]

		len = pNianShouAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //SyncCarNum
	for (size_t i = 0; i < n; i++)
	{ //SyncCar
		BYTE* pSyncCar = p;
		Write16(pSyncCar, 0); //len

		WriteUn(pSyncCar, 0); //PlayerUin
		Write16(pSyncCar, 0); //CurCarID

		len = pSyncCar - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReportDataFlag
	Write8(p, 0); //CheckDataNum
	for (size_t i = 0; i < n; i++)
	{ //MapCheckDiv
		BYTE* pMapCheckDiv = p;
		Write16(pMapCheckDiv, 0); //len

		Write16(pMapCheckDiv, 0); //BeginIdx
		Write16(pMapCheckDiv, 0); //EndIdx

		len = pMapCheckDiv - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //P2PMode
	Write8(p, 0); //TcpFrequence
	Write8(p, 0); //MultiInfoLen
	Write8(p, 0); //FeedBackEnabled
	Write8(p, 0); //SpeedSectionNum
	Write16(p, 0); //SpeedSectionLowerBound[]
	Write8(p, 0); //NormalSpeedSectionNum
	Write16(p, 0); //NormalSpeedSectionLowerBound[]
	Write8(p, 0); //MemCheckInfoNum
	for (size_t i = 0; i < n; i++)
	{ //MemCheckInfo
		BYTE* pMemCheckInfo = p;
		Write16(pMemCheckInfo, 0); //len

		Write8(pMemCheckInfo, 0); //MemIdxNum
		Write32(pMemCheckInfo, 0); //MemOffset[]
		Write8(pMemCheckInfo, 0); //DataType
		WriteU(pMemCheckInfo, 0); //Para

		len = pMemCheckInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ExtraInfoInterval
	Write16(p, 0); //OffsetThreshold
	Write32(p, 0); //SpeedRatioThreshold1
	Write32(p, 0); //SpeedRatioThreshold2
	Write32(p, 0); //HideTaskId
	Write8(p, 0); //HideTaskType
	Write32(p, 0); //HideTaskParam1
	Write8(p, 0); //ForceReportCPNum
	Write16(p, 0); //ForceReportCP[]
	Write8(p, 0); //CliReserveFlag
	Write8(p, 0); //EnableAntiDriftCheat
	for (size_t i = 0; i < n; i++)
	{ //AntiDriftCheatPara
		BYTE* pAntiDriftCheatPara = p;
		Write16(pAntiDriftCheatPara, 0); //len

		WriteU(pAntiDriftCheatPara, 0); //MaxDriftHistoryTime
		WriteU(pAntiDriftCheatPara, 0); //MinTimeInterval
		WriteU(pAntiDriftCheatPara, 0); //MaxTimeInterval
		Write32(pAntiDriftCheatPara, 0); //NormalThreshold
		Write32(pAntiDriftCheatPara, 0); //JetThreshold
		WriteU(pAntiDriftCheatPara, 0); //JetInterval
		WriteU(pAntiDriftCheatPara, 0); //OneSideSlidingInterval

		len = pAntiDriftCheatPara - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasCrashModePara
	for (size_t i = 0; i < n; i++)
	{ //CrashModePara
		BYTE* pCrashModePara = p;
		Write16(pCrashModePara, 0); //len

		Write8(pCrashModePara, 0); //SponsorSkillNum
		for (size_t i = 0; i < n; i++)
		{ //SponsorSkill
			BYTE* pSponsorSkill = pCrashModePara;
			Write16(pSponsorSkill, 0); //len

			Write8(pSponsorSkill, 0); //SkillID
			Write32(pSponsorSkill, 0); //Para1

			len = pSponsorSkill - pCrashModePara;
			Set16(pCrashModePara, (WORD)len);
			pCrashModePara += len;
		}
		Write8(pCrashModePara, 0); //InitEggNum
		Write8(pCrashModePara, 0); //EggRefreshInterval
		Write8(pCrashModePara, 0); //EggRefreshNum
		Write8(pCrashModePara, 0); //InitN2ONum
		Write8(pCrashModePara, 0); //EggSourceIncNum
		Write32(pCrashModePara, 0); //RandSeed
		Write8(pCrashModePara, 0); //PropPointRatio
		Write8(pCrashModePara, 0); //EggPropRatio
		Write8(pCrashModePara, 0); //AddN2ONumOnEggLost

		len = pCrashModePara - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //FizzStarTaskId
	Write8(p, 0); //FizzStarTaskType
	Write32(p, 0); //FizzStarTaskParam1
	Write32(p, 0); //LDMRecordID
	Write32(p, 0); //GameSeq

	len = p - buf;
	SendToClient(Client, 509, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyCheckPointTimeDiff(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //Leading
	Write32(p, 0); //TgtUin
	Write32(p, 0); //TimeDiff

	len = p - buf;
	SendToClient(Client, 274, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestPrepareReady(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	int MapID = Read32(p);
	char[] MapHash[] = ReadString(p);

}

void NotifyWaitUnReadyPlayers(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //WaitLoadTime

	len = p - buf;
	SendToClient(Client, 510, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyRaceBegin(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //CountDownTime
	Write16(p, 0); //DelayTime

	len = p - buf;
	SendToClient(Client, 511, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyCountDown(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //CountDownTime
	WriteUn(p, 0); //WinnerUin
	Write8(p, 0); //WinnerNewRecord
	WriteUn(p, 0); //FinTime

	len = p - buf;
	SendToClient(Client, 512, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyRaceOver(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //CurrentPlayerNum
	for (size_t i = 0; i < n; i++)
	{ //RaceScore
		BYTE* pRaceScore = p;
		Write16(pRaceScore, 0); //len

		WriteUn(pRaceScore, 0); //Uin
		WriteUn(pRaceScore, 0); //FinTime
		Write32(pRaceScore, 0); //TP
		Write32(pRaceScore, 0); //MoneyInc
		Write32(pRaceScore, 0); //TotalMoney
		Write32(pRaceScore, 0); //ExpInc
		Write32(pRaceScore, 0); //TotalExp
		Write8(pRaceScore, 0); //AwardNum
		Write32(pRaceScore, 0); //SpecialAward[]
		Write32(pRaceScore, 0); //TeamWorkExpInc
		Write32(pRaceScore, 0); //PropPoint
		Write32(pRaceScore, 0); //PropPointAddExp
		Write32(pRaceScore, 0); //LuckyMatchPointInc
		Write32(pRaceScore, 0); //LuckyMatchPointTotal
		Write32(pRaceScore, 0); //LuckyMatchScoreInc
		Write32(pRaceScore, 0); //LuckyMatchScoreTotal
		Write32(pRaceScore, 0); //LuckMoneyInc
		Write32(pRaceScore, 0); //LuckMoneyTotal
		Write32(pRaceScore, 0); //GuildScoreInc
		Write8(pRaceScore, 0); //CrazyPropAchieveNum
		Write32(pRaceScore, 0); //CrazyPropAchieve[]
		WriteU(pRaceScore, 0); //IncWlMatchScore
		WriteU(pRaceScore, 0); //IncWlDegree
		WriteU(pRaceScore, 0); //IncItemNumByWl
		for (size_t i = 0; i < n; i++)
		{ //IncItemInfoByWl
			BYTE* pIncItemInfoByWl = pRaceScore;
			Write16(pIncItemInfoByWl, 0); //len

			Write16(pIncItemInfoByWl, 0); //GenderItemNum
			Write32(pIncItemInfoByWl, 0); //ItemID[]
			Write16(pIncItemInfoByWl, 0); //ItemNum
			Write32(pIncItemInfoByWl, 0); //AvailPeriod

			len = pIncItemInfoByWl - pRaceScore;
			Set16(pRaceScore, (WORD)len);
			pRaceScore += len;
		}
		Write32(pRaceScore, 0); //WlMutiplyCard
		Write32(pRaceScore, 0); //SkateCoinInc
		Write32(pRaceScore, 0); //SkateCoinTotal
		Write32(pRaceScore, 0); //SkateCoinHistoryTotal

		len = pRaceScore - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //WinTeamID
	Write32(p, 0); //WinType
	WriteUn(p, 0); //AwardTime
	Write8(p, 0); //LuckyMatchResult
	Write8(p, 0); //LuckyMatchType
	Write8(p, 0); //PlayerNumber
	for (size_t i = 0; i < n; i++)
	{ //HideTaskResult
		BYTE* pHideTaskResult = p;
		Write16(pHideTaskResult, 0); //len

		Write32(pHideTaskResult, 0); //Uin
		Write32(pHideTaskResult, 0); //TaskId
		Write8(pHideTaskResult, 0); //HideTaskFinishResult

		len = pHideTaskResult - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasLadderMatchResult
	for (size_t i = 0; i < n; i++)
	{ //LDMRaceResult
		BYTE* pLDMRaceResult = p;
		Write16(pLDMRaceResult, 0); //len

		Write8(pLDMRaceResult, 0); //PlayerNum
		for (size_t i = 0; i < n; i++)
		{ //Result
			BYTE* pResult = pLDMRaceResult;
			Write16(pResult, 0); //len

			Write32(pResult, 0); //Uin
			Write32(pResult, 0); //Score
			Write32(pResult, 0); //ScoreInc
			Write32(pResult, 0); //NextGradeScore
			Write8(pResult, 0); //Grade
			Write8(pResult, 0); //BeforeGrade
			{ //Rank
				BYTE* pRank = pResult;
				Write16(pRank, 0); //len

				Write8(pRank, 0); //RankType
				Write8(pRank, 0); //RankValue

				len = pRank - pResult;
				Set16(pResult, (WORD)len);
				pResult += len;
			}
			{ //EstimateRank
				BYTE* pEstimateRank = pResult;
				Write16(pEstimateRank, 0); //len

				Write8(pEstimateRank, 0); //RankType
				Write8(pEstimateRank, 0); //RankValue

				len = pEstimateRank - pResult;
				Set16(pResult, (WORD)len);
				pResult += len;
			}

			len = pResult - pLDMRaceResult;
			Set16(pLDMRaceResult, (WORD)len);
			pLDMRaceResult += len;
		}

		len = pLDMRaceResult - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //NeedFreshTutor
	WriteUn(p, 0); //hasMedalGameInfo
	for (size_t i = 0; i < n; i++)
	{ //medalGameInfo
		BYTE* pmedalGameInfo = p;
		Write16(pmedalGameInfo, 0); //len

		WriteUn(pmedalGameInfo, 0); //curMedal

		len = pmedalGameInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 513, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyRaceShow(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //RaceShowTime
	Write8(p, 0); //HasFBInfo
	for (size_t i = 0; i < n; i++)
	{ //FBInfo
		BYTE* pFBInfo = p;
		Write16(pFBInfo, 0); //len

		Write8(pFBInfo, 0); //FBResult
		Write32(pFBInfo, 0); //Killer

		len = pFBInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 515, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyGameOver(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 514, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestReportCurrentInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	int CurrentState = Read32(p);
	int[] CurrentPosition[] = Read32(p);
	bool PassedCheckPointNum = Read8(p);
	short[] PassedCheckPointIDs[] = Read16(p);
	Un LapTime = ReadUn(p);
	UCHAR AccVerifyDataNum = Read8(p);
	for (size_t i = 0; i < n; i++)
	{ //AccelVerifyData
		BYTE* pAccelVerifyData = p;
		len = Read16(pAccelVerifyData);

		Un Type = ReadUn(pAccelVerifyData);
		USHORT TotalCount = Read16(pAccelVerifyData);
		Un MaxDurTime = ReadUn(pAccelVerifyData);
		USHORT OverlayCount = Read16(pAccelVerifyData);

		p += len;
	}
	UCHAR MsgSequence = Read8(p);
	UCHAR ExtraDataNum = Read8(p);
	for (size_t i = 0; i < n; i++)
	{ //ExtraData
		BYTE* pExtraData = p;
		len = Read16(pExtraData);

		{ //SkillStoneTriggerData
			BYTE* pSkillStoneTriggerData = pExtraData;
			len = Read16(pSkillStoneTriggerData);

			U TriggerTotalCount = ReadU(pSkillStoneTriggerData);
			U CheckData1 = ReadU(pSkillStoneTriggerData);
			U CheckData2 = ReadU(pSkillStoneTriggerData);

			pExtraData += len;
		}
		{ //ClientReportSelfErr
			BYTE* pClientReportSelfErr = pExtraData;
			len = Read16(pClientReportSelfErr);

			int RemoveFailedCount = Read32(pClientReportSelfErr);
			int No2CheckErrCount = Read32(pClientReportSelfErr);
			int FrictionCheckErrCount = Read32(pClientReportSelfErr);
			int GPTargetCheckErrCount = Read32(pClientReportSelfErr);
			int PowerCheckErrCount = Read32(pClientReportSelfErr);
			int StoneCheckErrCount = Read32(pClientReportSelfErr);
			int HashCheckErrCount = Read32(pClientReportSelfErr);
			int TencentCarCheckErrCount = Read32(pClientReportSelfErr);
			int UseIlleagleNo2Count = Read32(pClientReportSelfErr);
			int ListAffectGPsCheckErrCount = Read32(pClientReportSelfErr);
			int GPTargetInvalidErrCount = Read32(pClientReportSelfErr);

			pExtraData += len;
		}
		{ //ClientReportSeflTag
			BYTE* pClientReportSeflTag = pExtraData;
			len = Read16(pClientReportSeflTag);

			int PowerCheckTag = Read32(pClientReportSeflTag);
			int No2CheckTag = Read32(pClientReportSeflTag);
			int TencentCarCheckTag = Read32(pClientReportSeflTag);
			int GPTargetInvalidCheckTag = Read32(pClientReportSeflTag);

			pExtraData += len;
		}
		UINT JetCombinationFlag = Read32(pExtraData);
		Un MaxSpeed = ReadUn(pExtraData);
		UINT CollisionNumOnLastCheckPoint = Read32(pExtraData);
		UINT TotalDrift = Read32(pExtraData);
		BYTE SpeedSectionNum = Read8(pExtraData);
		USHORT[] SpeedSectionAccTime[] = Read16(pExtraData);
		BYTE NormalSpeedSectionNum = Read8(pExtraData);
		USHORT[] NormalSpeedSectionAccTime[] = Read16(pExtraData);
		UCHAR MemCheckResultNum = Read8(pExtraData);
		UINT[] MemData[] = Read32(pExtraData);
		USHORT[] ClientCheckErr[] = Read16(pExtraData);
		USHORT[] ClientCheckErrTag[] = Read16(pExtraData);
		UCHAR UpdateCount = Read8(pExtraData);
		UCHAR OffsetOverThresholdCount = Read8(pExtraData);
		UINT OffsetOverThresholdSum = Read32(pExtraData);
		USHORT MaxOffsetSpeed = Read16(pExtraData);
		USHORT AvgOffsetSpeed = Read16(pExtraData);
		USHORT MaxRealSpeed = Read16(pExtraData);
		USHORT AvgRealSpeed = Read16(pExtraData);
		UINT MaxSpeedRatio = Read32(pExtraData);
		USHORT SpeedRatioOverThresholdCount = Read16(pExtraData);
		UINT MaxSpeedRatio2 = Read32(pExtraData);
		USHORT SpeedRatioOverThresholdCount2 = Read16(pExtraData);
		UINT FBSkillRebornTime = Read32(pExtraData);
		UINT FBSkillChargeTime = Read32(pExtraData);
		UINT TotalPerpetualNight = Read32(pExtraData);
		int RPCSFlag = Read32(pExtraData);
		UINT CollisionPlayerNum = Read32(pExtraData);
		UINT CollisionNumOnPlayer = Read32(pExtraData);
		int CodeItegrity = Read32(pExtraData);
		int SendLaPkg = Read32(pExtraData);
		int SendDataToSvr = Read32(pExtraData);
		int[] AbnormalData[] = Read32(pExtraData);

		p += len;
	}
	UCHAR N2OChangeEventNum = Read8(p);
	for (size_t i = 0; i < n; i++)
	{ //N2OChangeEvent
		BYTE* pN2OChangeEvent = p;
		len = Read16(pN2OChangeEvent);

		USHORT EventID = Read16(pN2OChangeEvent);
		UINT BeginLapTime = Read32(pN2OChangeEvent);
		USHORT LastingTime = Read16(pN2OChangeEvent);
		UCHAR EventType = Read8(pN2OChangeEvent);
		short N2OChange = Read16(pN2OChangeEvent);

		p += len;
	}
	UINT Flag = Read32(p);
	UCHAR HasCrashModeData = Read8(p);
	for (size_t i = 0; i < n; i++)
	{ //CrashModeData
		BYTE* pCrashModeData = p;
		len = Read16(pCrashModeData);

		UCHAR CurEggNum = Read8(pCrashModeData);

		p += len;
	}
	UCHAR HasPointChallengeData = Read8(p);
	for (size_t i = 0; i < n; i++)
	{ //PointChallengeData
		BYTE* pPointChallengeData = p;
		len = Read16(pPointChallengeData);

		UINT EatCoin = Read32(pPointChallengeData);
		UINT BeforeTime = Read32(pPointChallengeData);
		UINT BeforeLong = Read32(pPointChallengeData);
		UINT CollectN2 = Read32(pPointChallengeData);
		UINT Shuangpen = Read32(pPointChallengeData);
		UINT Kongpen = Read32(pPointChallengeData);
		UINT Luodipen = Read32(pPointChallengeData);

		p += len;
	}
	UINT SkateCoinNum = Read32(p);
	for (size_t i = 0; i < n; i++)
	{ //SkateCoinData
		BYTE* pSkateCoinData = p;
		len = Read16(pSkateCoinData);

		UINT CoinID = Read32(pSkateCoinData);
		UINT PlayerPosX = Read32(pSkateCoinData);
		UINT PlayerPosY = Read32(pSkateCoinData);
		UINT PlayerPosZ = Read32(pSkateCoinData);

		p += len;
	}
	UINT SkateComboAwardCoinNum = Read32(p);
	for (size_t i = 0; i < n; i++)
	{ //SkateComboAwardCoinData
		BYTE* pSkateComboAwardCoinData = p;
		len = Read16(pSkateComboAwardCoinData);

		USHORT ComboNum = Read16(pSkateComboAwardCoinData);
		USHORT CoinNum = Read16(pSkateComboAwardCoinData);

		p += len;
	}
	UINT SkateDoubleJumpCount = Read32(p);

}

void RequestFindPlayerByQQ(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	char[] Nickname[] = ReadString(p);
	Un DstUin = ReadUn(p);
	Un DstNobleID = ReadUn(p);
	UCHAR Contex = Read8(p);

}

void ResponseFindPlayerByQQ(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	{ //PlayerInfo
		BYTE* pPlayerInfo = p;
		Write16(pPlayerInfo, 0); //len

		WriteUn(pPlayerInfo, 0); //Uin
		WriteUn(pPlayerInfo, 0); //Identity
		Write16(pPlayerInfo, 0); //PlayerID
		{ //PlayerDBBaseInfo
			BYTE* pPlayerDBBaseInfo = pPlayerInfo;
			Write16(pPlayerDBBaseInfo, 0); //len

			WriteString(pPlayerDBBaseInfo, 0); //Nickname[]
			Write8(pPlayerDBBaseInfo, 0); //Gender
			Write8(pPlayerDBBaseInfo, 0); //Country
			Write32(pPlayerDBBaseInfo, 0); //License
			WriteUn(pPlayerDBBaseInfo, 0); //Experience
			Write32(pPlayerDBBaseInfo, 0); //SuperMoney
			Write32(pPlayerDBBaseInfo, 0); //Money
			WriteUn(pPlayerDBBaseInfo, 0); //WinNum
			Write32(pPlayerDBBaseInfo, 0); //SecondNum
			Write32(pPlayerDBBaseInfo, 0); //ThirdNum
			WriteUn(pPlayerDBBaseInfo, 0); //TotalNum
			Write32(pPlayerDBBaseInfo, 0); //CurHonor
			Write32(pPlayerDBBaseInfo, 0); //TotalHonor
			Write32(pPlayerDBBaseInfo, 0); //TodayHonor
			Write32(pPlayerDBBaseInfo, 0); //RelaxTime
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationBefore
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationCur
			Write32(pPlayerDBBaseInfo, 0); //Charm
			Write32(pPlayerDBBaseInfo, 0); //DurationGame
			Write32(pPlayerDBBaseInfo, 0); //DanceExp
			Write32(pPlayerDBBaseInfo, 0); //Coupons
			Write32(pPlayerDBBaseInfo, 0); //Admiration
			Write32(pPlayerDBBaseInfo, 0); //LuckMoney
			Write32(pPlayerDBBaseInfo, 0); //TeamWorkExp
			Write32(pPlayerDBBaseInfo, 0); //AchievePoint
			Write32(pPlayerDBBaseInfo, 0); //RegTime
			WriteString(pPlayerDBBaseInfo, 0); //Signature[]
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchPoint
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchNum
			Write16(pPlayerDBBaseInfo, 0); //LuckyMatchFirstNum
			Write8(pPlayerDBBaseInfo, 0); //LuckyMatchBestRand
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchWinNum
			Write32(pPlayerDBBaseInfo, 0); //FizzPointTotal
			Write16(pPlayerDBBaseInfo, 0); //FizzPointDaily
			Write16(pPlayerDBBaseInfo, 0); //FizzPointWeekly
			Write16(pPlayerDBBaseInfo, 0); //FizzPointLastWeek
			Write8(pPlayerDBBaseInfo, 0); //FizzLotteryStatus
			Write32(pPlayerDBBaseInfo, 0); //FizzLastUpdateTime
			Write32(pPlayerDBBaseInfo, 0); //SNSLocaleCode
			Write32(pPlayerDBBaseInfo, 0); //AuctionRightUnlockTime
			Write8(pPlayerDBBaseInfo, 0); //ReserveFlag
			Write32(pPlayerDBBaseInfo, 0); //CurConsumeScore
			Write32(pPlayerDBBaseInfo, 0); //HistoryConsumeScore
			Write8(pPlayerDBBaseInfo, 0); //CrashModeSponsorID
			Write32(pPlayerDBBaseInfo, 0); //Popularity
			Write32(pPlayerDBBaseInfo, 0); //LadderMatchAchievePoint
			Write32(pPlayerDBBaseInfo, 0); //Cash
			Write32(pPlayerDBBaseInfo, 0); //PlayerGPMIdentity
			Write32(pPlayerDBBaseInfo, 0); //PointTotalScore
			WriteUn(pPlayerDBBaseInfo, 0); //totalMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //lastMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalSeasonId
			WriteUn(pPlayerDBBaseInfo, 0); //lastClearMapMedalTime

			len = pPlayerDBBaseInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		{ //PlayerGuildInfo
			BYTE* pPlayerGuildInfo = pPlayerInfo;
			Write16(pPlayerGuildInfo, 0); //len

			WriteString(pPlayerGuildInfo, 0); //GuildName[]
			Write16(pPlayerGuildInfo, 0); //Duty
			Write32(pPlayerGuildInfo, 0); //GuildID
			Write32(pPlayerGuildInfo, 0); //Right
			Write32(pPlayerGuildInfo, 0); //Medal
			Write32(pPlayerGuildInfo, 0); //Contribute
			WriteString(pPlayerGuildInfo, 0); //DutyTitle[]

			len = pPlayerGuildInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		Write16(pPlayerInfo, 0); //EquipedItemNum
		for (size_t i = 0; i < n; i++)
		{ //PlayerItemInfo
			BYTE* pPlayerItemInfo = pPlayerInfo;
			Write16(pPlayerItemInfo, 0); //len

			Write32(pPlayerItemInfo, 0); //ItemID
			Write32(pPlayerItemInfo, 0); //ItemNum
			Write32(pPlayerItemInfo, 0); //AvailPeriod
			Write8(pPlayerItemInfo, 0); //Status
			WriteUn(pPlayerItemInfo, 0); //ObtainTime
			Write32(pPlayerItemInfo, 0); //OtherAttribute

			len = pPlayerItemInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		Write32(pPlayerInfo, 0); //MasterPoint
		Write32(pPlayerInfo, 0); //TotalGuildProsperity
		WriteUn(pPlayerInfo, 0); //VipFlag
		WriteUn(pPlayerInfo, 0); //VipGrowRate
		Write8(pPlayerInfo, 0); //AppellationNum
		for (size_t i = 0; i < n; i++)
		{ //Record
			BYTE* pRecord = pPlayerInfo;
			Write16(pRecord, 0); //len

			Write8(pRecord, 0); //Type
			Write8(pRecord, 0); //Level
			Write8(pRecord, 0); //Status
			Write8(pRecord, 0); //Difficulty
			Write32(pRecord, 0); //MapId
			Write32(pRecord, 0); //Value

			len = pRecord - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		{ //NobleInfo
			BYTE* pNobleInfo = pPlayerInfo;
			Write16(pNobleInfo, 0); //len

			Write32(pNobleInfo, 0); //NobleID
			Write8(pNobleInfo, 0); //NobleLevel
			Write32(pNobleInfo, 0); //NoblePoint
			Write32(pNobleInfo, 0); //NobleLeftDays

			len = pNobleInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		Write8(pPlayerInfo, 0); //HasCarryWizard
		for (size_t i = 0; i < n; i++)
		{ //CarryWizardInfo
			BYTE* pCarryWizardInfo = pPlayerInfo;
			Write16(pCarryWizardInfo, 0); //len

			Write16(pCarryWizardInfo, 0); //WizardID
			WriteString(pCarryWizardInfo, 0); //Nickname[]
			Write16(pCarryWizardInfo, 0); //WizardType
			Write8(pCarryWizardInfo, 0); //Order
			Write8(pCarryWizardInfo, 0); //EvolutionBranch
			Write8(pCarryWizardInfo, 0); //IsHuanHua

			len = pCarryWizardInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		{ //GuildVipBaseInfo
			BYTE* pGuildVipBaseInfo = pPlayerInfo;
			Write16(pGuildVipBaseInfo, 0); //len

			Write8(pGuildVipBaseInfo, 0); //GuildVipLevel
			Write32(pGuildVipBaseInfo, 0); //GuildVipPoint

			len = pGuildVipBaseInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		Write8(pPlayerInfo, 0); //HasLDMInfo
		for (size_t i = 0; i < n; i++)
		{ //LDMInfo
			BYTE* pLDMInfo = pPlayerInfo;
			Write16(pLDMInfo, 0); //len

			Write8(pLDMInfo, 0); //IsInCurSeason
			Write32(pLDMInfo, 0); //Score
			Write32(pLDMInfo, 0); //MaxScore
			Write8(pLDMInfo, 0); //Grade
			Write8(pLDMInfo, 0); //MaxGrade
			Write32(pLDMInfo, 0); //WinStreakCount
			Write32(pLDMInfo, 0); //MatchCount
			Write32(pLDMInfo, 0); //CollisionCount
			Write32(pLDMInfo, 0); //BeatCount

			len = pLDMInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		Write8(pPlayerInfo, 0); //HasLoverVip
		for (size_t i = 0; i < n; i++)
		{ //LoverVipInfo
			BYTE* pLoverVipInfo = pPlayerInfo;
			Write16(pLoverVipInfo, 0); //len

			Write8(pLoverVipInfo, 0); //LoverVipLevel
			Write32(pLoverVipInfo, 0); //LoverVipPoint
			Write8(pLoverVipInfo, 0); //GrowRate

			len = pLoverVipInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		Write8(pPlayerInfo, 0); //IsShowMounts

		len = pPlayerInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //IsOnLine
	{ //PositionInfo
		BYTE* pPositionInfo = p;
		Write16(pPositionInfo, 0); //len

		Write8(pPositionInfo, 0); //ServerType
		Write16(pPositionInfo, 0); //Status
		Write32(pPositionInfo, 0); //ServerID
		{ //RoomInfo
			BYTE* pRoomInfo = pPositionInfo;
			Write16(pRoomInfo, 0); //len

			Write16(pRoomInfo, 0); //RoomID
			Write16(pRoomInfo, 0); //BaseGameMode
			Write16(pRoomInfo, 0); //SubGameMode
			Write8(pRoomInfo, 0); //CurrentPlayerNum
			Write8(pRoomInfo, 0); //TotalSeatNum
			Write8(pRoomInfo, 0); //Status
			Write32(pRoomInfo, 0); //MapID
			Write8(pRoomInfo, 0); //Flag
			WriteString(pRoomInfo, 0); //RoomName[]
			Write8(pRoomInfo, 0); //HasFBInfo
			for (size_t i = 0; i < n; i++)
			{ //FBInfo
				BYTE* pFBInfo = pRoomInfo;
				Write16(pFBInfo, 0); //len

				Write8(pFBInfo, 0); //AvailableLev
				Write8(pFBInfo, 0); //Lev
				Write8(pFBInfo, 0); //SubLev
				Write32(pFBInfo, 0); //BossID
				Write8(pFBInfo, 0); //FBSeason

				len = pFBInfo - pRoomInfo;
				Set16(pRoomInfo, (WORD)len);
				pRoomInfo += len;
			}

			len = pRoomInfo - pPositionInfo;
			Set16(pPositionInfo, (WORD)len);
			pPositionInfo += len;
		}

		len = pPositionInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen
	{ //PlayerRelationInfo
		BYTE* pPlayerRelationInfo = p;
		Write16(pPlayerRelationInfo, 0); //len

		Write32(pPlayerRelationInfo, 0); //SrcUin
		Write32(pPlayerRelationInfo, 0); //RelationFlag
		Write32(pPlayerRelationInfo, 0); //RelationUin
		WriteString(pPlayerRelationInfo, 0); //RelationNickname[]
		Write32(pPlayerRelationInfo, 0); //EngageTime
		Write32(pPlayerRelationInfo, 0); //NextCanBookingTimeLimit
		Write32(pPlayerRelationInfo, 0); //BeginHoneyMoonTime
		Write32(pPlayerRelationInfo, 0); //EndHoneyMoonTime
		Write8(pPlayerRelationInfo, 0); //EngageFlag

		len = pPlayerRelationInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //CurKartAttr
		BYTE* pCurKartAttr = p;
		Write16(pCurKartAttr, 0); //len

		Write32(pCurKartAttr, 0); //Uin
		Write32(pCurKartAttr, 0); //KartId
		Write32(pCurKartAttr, 0); //RefitCout
		Write16(pCurKartAttr, 0); //MaxFlags
		Write16(pCurKartAttr, 0); //WWeight
		Write16(pCurKartAttr, 0); //SpeedWeight
		Write16(pCurKartAttr, 0); //JetWeight
		Write16(pCurKartAttr, 0); //SJetWeight
		Write16(pCurKartAttr, 0); //AccuWeight
		Write32(pCurKartAttr, 0); //ShapeRefitCount
		Write32(pCurKartAttr, 0); //KartHeadRefitItemID
		Write32(pCurKartAttr, 0); //KartTailRefitItemID
		Write32(pCurKartAttr, 0); //KartFlankRefitItemID
		Write32(pCurKartAttr, 0); //KartTireRefitItemID
		{ //KartRefitExInfo
			BYTE* pKartRefitExInfo = pCurKartAttr;
			Write16(pKartRefitExInfo, 0); //len

			Write8(pKartRefitExInfo, 0); //SpeedRefitStar
			Write8(pKartRefitExInfo, 0); //JetRefitStar
			Write8(pKartRefitExInfo, 0); //SJetRefitStar
			Write8(pKartRefitExInfo, 0); //AccuRefitStar
			Write8(pKartRefitExInfo, 0); //SpeedAddRatio
			Write8(pKartRefitExInfo, 0); //JetAddRatio
			Write8(pKartRefitExInfo, 0); //SJetAddRatio
			Write8(pKartRefitExInfo, 0); //AccuAddRatio

			len = pKartRefitExInfo - pCurKartAttr;
			Set16(pCurKartAttr, (WORD)len);
			pCurKartAttr += len;
		}

		len = pCurKartAttr - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //PetNum
	for (size_t i = 0; i < n; i++)
	{ //PetInfo
		BYTE* pPetInfo = p;
		Write16(pPetInfo, 0); //len

		Write32(pPetInfo, 0); //Uin
		Write32(pPetInfo, 0); //PetId
		WriteString(pPetInfo, 0); //PetName[]
		Write8(pPetInfo, 0); //IsProper
		Write16(pPetInfo, 0); //Level
		Write8(pPetInfo, 0); //Status
		Write16(pPetInfo, 0); //PetSkillNum
		for (size_t i = 0; i < n; i++)
		{ //PetSkillList
			BYTE* pPetSkillList = pPetInfo;
			Write16(pPetSkillList, 0); //len

			Write16(pPetSkillList, 0); //SkillID
			Write8(pPetSkillList, 0); //Status
			Write8(pPetSkillList, 0); //Active
			Write32(pPetSkillList, 0); //Value

			len = pPetSkillList - pPetInfo;
			Set16(pPetInfo, (WORD)len);
			pPetInfo += len;
		}
		Write32(pPetInfo, 0); //StrengLevel

		len = pPetInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //IsInTopList
	{ //KartStoneGrooveInfo
		BYTE* pKartStoneGrooveInfo = p;
		Write16(pKartStoneGrooveInfo, 0); //len

		Write32(pKartStoneGrooveInfo, 0); //KartID
		Write32(pKartStoneGrooveInfo, 0); //StoneGrooveNum
		for (size_t i = 0; i < n; i++)
		{ //StoneGrooveInfo
			BYTE* pStoneGrooveInfo = pKartStoneGrooveInfo;
			Write16(pStoneGrooveInfo, 0); //len

			Write32(pStoneGrooveInfo, 0); //StoneUseOccaType
			Write32(pStoneGrooveInfo, 0); //SkillStoneID

			len = pStoneGrooveInfo - pKartStoneGrooveInfo;
			Set16(pKartStoneGrooveInfo, (WORD)len);
			pKartStoneGrooveInfo += len;
		}

		len = pKartStoneGrooveInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //Contex
	{ //PlayerWlVisibleInfo
		BYTE* pPlayerWlVisibleInfo = p;
		Write16(pPlayerWlVisibleInfo, 0); //len

		Write32(pPlayerWlVisibleInfo, 0); //WonderLandID
		WriteString(pPlayerWlVisibleInfo, 0); //WonderLandName[]
		Write16(pPlayerWlVisibleInfo, 0); //WonderLandDuty
		Write8(pPlayerWlVisibleInfo, 0); //SubType
		Write8(pPlayerWlVisibleInfo, 0); //GuildGrade

		len = pPlayerWlVisibleInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //SkateCoin
	Write32(p, 0); //MaxDayPveScore
	Write32(p, 0); //MaxHistoryPveScore
	{ //EquipedCarBattleModeSkillInfoList
		BYTE* pEquipedCarBattleModeSkillInfoList = p;
		Write16(pEquipedCarBattleModeSkillInfoList, 0); //len

		Write8(pEquipedCarBattleModeSkillInfoList, 0); //SkillNum
		for (size_t i = 0; i < n; i++)
		{ //SkillInfo
			BYTE* pSkillInfo = pEquipedCarBattleModeSkillInfoList;
			Write16(pSkillInfo, 0); //len

			Write16(pSkillInfo, 0); //SkillId
			Write8(pSkillInfo, 0); //SkillLevel

			len = pSkillInfo - pEquipedCarBattleModeSkillInfoList;
			Set16(pEquipedCarBattleModeSkillInfoList, (WORD)len);
			pEquipedCarBattleModeSkillInfoList += len;
		}

		len = pEquipedCarBattleModeSkillInfoList - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 122, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetProp(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	short PropPositionNO = Read16(p);
	bool CurrentRank = Read8(p);
	int[] CurrentPosition[] = Read32(p);
	int PreviousInterval = Read32(p);
	char GetPropType = Read8(p);
	bool TeammateRank = Read8(p);
	char PointArrayIdx = Read8(p);
	UINT LapTime = Read32(p);

}

void ResponseGetProp(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	WriteUn(p, 0); //Uin
	Write16(p, 0); //PropID
	Write32(p, 0); //PropIndex
	Write8(p, 0); //GetPropType
	Write32(p, 0); //AwardItemID
	Write8(p, 0); //ReasonLen
	Write16(p, 0); //PropPositionNO
	Write32(p, 0); //ActIDForClient

	len = p - buf;
	SendToClient(Client, 124, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyDraftAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //AwardID

	len = p - buf;
	SendToClient(Client, 582, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyGetProp(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //Uin
	Write16(p, 0); //PropID
	Write32(p, 0); //PropIndex
	Write16(p, 0); //PropPositionNO
	Write8(p, 0); //GetPropType
	Write8(p, 0); //PointArrayIdx
	Write32(p, 0); //LapTime

	len = p - buf;
	SendToClient(Client, 516, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestUseProp(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	short PropID = Read16(p);
	Un DstUin = ReadUn(p);
	int[] CurrentPosition[] = Read32(p);
	int PropIndex = Read32(p);
	short NewID = Read16(p);
	char IsClearProp = Read8(p);
	bool DstType = Read8(p);

}

void ResponseUseProp(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	WriteUn(p, 0); //Uin
	Write16(p, 0); //PropID
	WriteUn(p, 0); //DstUin
	Write32(p, 0); //PropPosition[]
	Write32(p, 0); //PropIndex
	Write8(p, 0); //DstType

	len = p - buf;
	SendToClient(Client, 125, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyUseProp(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //Uin
	Write16(p, 0); //PropID
	WriteUn(p, 0); //DstUin
	Write32(p, 0); //PropPosition[]
	Write32(p, 0); //PropIndex
	Write16(p, 0); //NewID
	Write32(p, 0); //ItemID
	Write32(p, 0); //StoneSkillType
	Write32(p, 0); //LapTime
	Write8(p, 0); //DstUinNum
	Write32(p, 0); //DstUin[]
	Write8(p, 0); //PropUseMode
	Write8(p, 0); //QueryUinNum
	Write32(p, 0); //QueryUin[]
	Write8(p, 0); //DstType

	len = p - buf;
	SendToClient(Client, 517, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestPropEffectResult(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	short PropID = Read16(p);
	int PropIndex = Read32(p);
	short EffectResult = Read16(p);
	int ItemID = Read32(p);
	Un SrcUin = ReadUn(p);
	int StoneSkillType = Read32(p);
	UINT LapTime = Read32(p);
	UCHAR RemoveOwnPropNum = Read8(p);
	int[] RemoveOwnPropIdx[] = Read32(p);
	bool DstType = Read8(p);

}

void NotifyPropEffectResult(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //Uin
	Write16(p, 0); //PropID
	Write32(p, 0); //PropIndex
	Write32(p, 0); //StoneSkillType
	Write32(p, 0); //LapTime
	Write8(p, 0); //RemoveOwnPropNum
	Write32(p, 0); //RemoveOwnPropIdx[]

	len = p - buf;
	SendToClient(Client, 518, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestChangeAimState(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	Un DstUin = ReadUn(p);
	bool AimState = Read8(p);
	bool DstType = Read8(p);

}

void NotifyChangeAimState(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //Uin
	WriteUn(p, 0); //DstUin
	Write8(p, 0); //AimState
	Write8(p, 0); //DstType

	len = p - buf;
	SendToClient(Client, 519, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestReportDrift(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	int DriftFlag = Read32(p);
	int AccelerateFuelInc = Read32(p);
	bool OnlyAccelSelfFue = Read8(p);
	UINT StartLapTime = Read32(p);
	UINT CurLapTime = Read32(p);

}

void ResponseReportDrift(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //PropID
	Write32(p, 0); //PropIndex
	Write32(p, 0); //CurrentAccelerateFuel
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 119, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyReportDrift(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //TeamAccelerateFule
	Write32(p, 0); //DriftPlayerUin
	Write16(p, 0); //PropID
	Write32(p, 0); //PropIndex

	len = p - buf;
	SendToClient(Client, 521, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestChangeMap(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	int NewMapID = Read32(p);
	{ //STDynamicInfo
		BYTE* pSTDynamicInfo = p;
		len = Read16(pSTDynamicInfo);

		char Season = Read8(pSTDynamicInfo);
		char Timeslot = Read8(pSTDynamicInfo);
		char Weather = Read8(pSTDynamicInfo);

		p += len;
	}
	int MapSubID = Read32(p);

}

void ResponseChangeMap(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //NewMapID
	Write8(p, 0); //ReasonLen
	Write8(p, 0); //UnLockMapCondDescNum
	for (size_t i = 0; i < n; i++)
	{ //UnLockMapCondDesc
		BYTE* pUnLockMapCondDesc = p;
		Write16(pUnLockMapCondDesc, 0); //len

		Write8(pUnLockMapCondDesc, 0); //DescLen

		len = pUnLockMapCondDesc - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //STDynamicInfo
		BYTE* pSTDynamicInfo = p;
		Write16(pSTDynamicInfo, 0); //len

		Write8(pSTDynamicInfo, 0); //Season
		Write8(pSTDynamicInfo, 0); //Timeslot
		Write8(pSTDynamicInfo, 0); //Weather

		len = pSTDynamicInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //PreKnowMapID
	Write32(p, 0); //MapSubID

	len = p - buf;
	SendToClient(Client, 121, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyChangeMap(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //Uin
	Write32(p, 0); //NewMapID
	{ //STDynamicInfo
		BYTE* pSTDynamicInfo = p;
		Write16(pSTDynamicInfo, 0); //len

		Write8(pSTDynamicInfo, 0); //Season
		Write8(pSTDynamicInfo, 0); //Timeslot
		Write8(pSTDynamicInfo, 0); //Weather

		len = pSTDynamicInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //PreKnowMapID
	Write32(p, 0); //MapSubID

	len = p - buf;
	SendToClient(Client, 520, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyPlayerFinishRace(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //Uin
	Write8(p, 0); //NewRecord
	WriteUn(p, 0); //FinTime

	len = p - buf;
	SendToClient(Client, 522, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyReplaceProp(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //PlayerNum
	for (size_t i = 0; i < n; i++)
	{ //RacerReplacePropInfo
		BYTE* pRacerReplacePropInfo = p;
		Write16(pRacerReplacePropInfo, 0); //len

		WriteUn(pRacerReplacePropInfo, 0); //Uin
		for (size_t i = 0; i < n; i++)
		{ //ReplaceProp
			BYTE* pReplaceProp = pRacerReplacePropInfo;
			Write16(pReplaceProp, 0); //len

			Write32(pReplaceProp, 0); //ReplaceFlag
			Write32(pReplaceProp, 0); //PropIndex
			Write16(pReplaceProp, 0); //PropID

			len = pReplaceProp - pRacerReplacePropInfo;
			Set16(pRacerReplacePropInfo, (WORD)len);
			pRacerReplacePropInfo += len;
		}

		len = pRacerReplacePropInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //ItemID

	len = p - buf;
	SendToClient(Client, 525, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyAddProp(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //Uin
	Write16(p, 0); //PropID
	Write32(p, 0); //PropIdx
	Write32(p, 0); //ItemID
	Write32(p, 0); //StoneSkillType

	len = p - buf;
	SendToClient(Client, 526, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyClientUpdateMoney(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	{ //CurrentMoney
		BYTE* pCurrentMoney = p;
		Write16(pCurrentMoney, 0); //len

		Write32(pCurrentMoney, 0); //Money
		Write32(pCurrentMoney, 0); //SuperMoney
		Write32(pCurrentMoney, 0); //Coupons
		Write32(pCurrentMoney, 0); //LuckMoney
		Write32(pCurrentMoney, 0); //ConsumeScore
		Write32(pCurrentMoney, 0); //HistoryConsumeScore

		len = pCurrentMoney - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //IncMoney
		BYTE* pIncMoney = p;
		Write16(pIncMoney, 0); //len

		Write32(pIncMoney, 0); //Money
		Write32(pIncMoney, 0); //SuperMoney
		Write32(pIncMoney, 0); //Coupons
		Write32(pIncMoney, 0); //LuckMoney
		Write32(pIncMoney, 0); //ConsumeScore
		Write32(pIncMoney, 0); //HistoryConsumeScore

		len = pIncMoney - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //Flag

	len = p - buf;
	SendToClient(Client, 528, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyClientAddItem(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //Uin
	WriteUn(p, 0); //SrcUin
	Write16(p, 0); //ItemNum
	for (size_t i = 0; i < n; i++)
	{ //ItemInfo
		BYTE* pItemInfo = p;
		Write16(pItemInfo, 0); //len

		Write32(pItemInfo, 0); //ItemID
		Write32(pItemInfo, 0); //ItemNum
		Write32(pItemInfo, 0); //AvailPeriod
		Write8(pItemInfo, 0); //Status
		WriteUn(pItemInfo, 0); //ObtainTime
		Write32(pItemInfo, 0); //OtherAttribute

		len = pItemInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //AttachLen
	Write16(p, 0); //AddKartNum
	for (size_t i = 0; i < n; i++)
	{ //AddKartRefitInfo
		BYTE* pAddKartRefitInfo = p;
		Write16(pAddKartRefitInfo, 0); //len

		Write32(pAddKartRefitInfo, 0); //Uin
		Write32(pAddKartRefitInfo, 0); //KartId
		Write32(pAddKartRefitInfo, 0); //RefitCout
		Write16(pAddKartRefitInfo, 0); //MaxFlags
		Write16(pAddKartRefitInfo, 0); //WWeight
		Write16(pAddKartRefitInfo, 0); //SpeedWeight
		Write16(pAddKartRefitInfo, 0); //JetWeight
		Write16(pAddKartRefitInfo, 0); //SJetWeight
		Write16(pAddKartRefitInfo, 0); //AccuWeight
		Write32(pAddKartRefitInfo, 0); //ShapeRefitCount
		Write32(pAddKartRefitInfo, 0); //KartHeadRefitItemID
		Write32(pAddKartRefitInfo, 0); //KartTailRefitItemID
		Write32(pAddKartRefitInfo, 0); //KartFlankRefitItemID
		Write32(pAddKartRefitInfo, 0); //KartTireRefitItemID

		len = pAddKartRefitInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //IncRedPacketNum

	len = p - buf;
	SendToClient(Client, 529, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyClientUpdateMoneyExp(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	{ //CurMoneyExp
		BYTE* pCurMoneyExp = p;
		Write16(pCurMoneyExp, 0); //len

		Write32(pCurMoneyExp, 0); //Money
		Write32(pCurMoneyExp, 0); //SuperMoney
		Write32(pCurMoneyExp, 0); //Exp
		Write32(pCurMoneyExp, 0); //Charm
		Write32(pCurMoneyExp, 0); //DanceExp
		Write32(pCurMoneyExp, 0); //Coupons
		Write32(pCurMoneyExp, 0); //Admiration
		Write32(pCurMoneyExp, 0); //LuckMoney
		Write32(pCurMoneyExp, 0); //TeamWorkExp
		Write32(pCurMoneyExp, 0); //AchievePoint
		Write32(pCurMoneyExp, 0); //ConsumeScore
		Write32(pCurMoneyExp, 0); //HistoryConsumeScore
		Write32(pCurMoneyExp, 0); //LadderMatchAchievePoint

		len = pCurMoneyExp - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //Reason

	len = p - buf;
	SendToClient(Client, 559, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestChangeItemStatus(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	short ItemNum = Read16(p);
	for (size_t i = 0; i < n; i++)
	{ //ItemStatus
		BYTE* pItemStatus = p;
		len = Read16(pItemStatus);

		int ItemID = Read32(pItemStatus);
		bool NewStatus = Read8(pItemStatus);

		p += len;
	}
	UCHAR SpecFlag = Read8(p);

}

void ResponseChangeItemStatus(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //ItemNum
	for (size_t i = 0; i < n; i++)
	{ //ItemStatus
		BYTE* pItemStatus = p;
		Write16(pItemStatus, 0); //len

		Write32(pItemStatus, 0); //ItemID
		Write8(pItemStatus, 0); //NewStatus

		len = pItemStatus - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen
	Write8(p, 0); //SpecFlag

	len = p - buf;
	SendToClient(Client, 130, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyChangeItemStatus(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //Uin
	Write16(p, 0); //ItemNum
	for (size_t i = 0; i < n; i++)
	{ //ItemStatus
		BYTE* pItemStatus = p;
		Write16(pItemStatus, 0); //len

		Write32(pItemStatus, 0); //ItemID
		Write32(pItemStatus, 0); //ItemNum
		Write32(pItemStatus, 0); //AvailPeriod
		Write8(pItemStatus, 0); //Status
		WriteUn(pItemStatus, 0); //ObtainTime
		Write32(pItemStatus, 0); //OtherAttribute

		len = pItemStatus - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //SpecFlag

	len = p - buf;
	SendToClient(Client, 527, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyChangeCarBattleModeSkillInfoList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //CarID
	{ //BattleModeSkillInfoList
		BYTE* pBattleModeSkillInfoList = p;
		Write16(pBattleModeSkillInfoList, 0); //len

		Write8(pBattleModeSkillInfoList, 0); //SkillNum
		for (size_t i = 0; i < n; i++)
		{ //SkillInfo
			BYTE* pSkillInfo = pBattleModeSkillInfoList;
			Write16(pSkillInfo, 0); //len

			Write16(pSkillInfo, 0); //SkillId
			Write8(pSkillInfo, 0); //SkillLevel

			len = pSkillInfo - pBattleModeSkillInfoList;
			Set16(pBattleModeSkillInfoList, (WORD)len);
			pBattleModeSkillInfoList += len;
		}

		len = pBattleModeSkillInfoList - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11675, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestCheckName(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	char[] Nickname[] = ReadString(p);

}

void ResponseCheckName(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	WriteString(p, 0); //Nickname[]
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 133, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifySingleGameBegin(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //NormalLoadTime
	Write32(p, 0); //TaskID
	Write32(p, 0); //MapID
	WriteString(p, 0); //MapHash[]
	Write32(p, 0); //GameID
	Write32(p, 0); //Seed
	Write16(p, 0); //TotalMapRound
	Write32(p, 0); //TimeLimit
	Write32(p, 0); //MaxNPCDistance
	Write16(p, 0); //InitPropNum
	for (size_t i = 0; i < n; i++)
	{ //PropInfo
		BYTE* pPropInfo = p;
		Write16(pPropInfo, 0); //len

		Write32(pPropInfo, 0); //PropIndex
		Write16(pPropInfo, 0); //PropID

		len = pPropInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //NpcNum
	for (size_t i = 0; i < n; i++)
	{ //NpcInfo
		BYTE* pNpcInfo = p;
		Write16(pNpcInfo, 0); //len

		Write32(pNpcInfo, 0); //NpcID
		WriteString(pNpcInfo, 0); //NPCName[]
		WriteString(pNpcInfo, 0); //GuildName[]
		{ //NpcItemInfo
			BYTE* pNpcItemInfo = pNpcInfo;
			Write16(pNpcItemInfo, 0); //len

			Write32(pNpcItemInfo, 0); //RoleID
			Write32(pNpcItemInfo, 0); //HairID
			Write32(pNpcItemInfo, 0); //FaceID
			Write32(pNpcItemInfo, 0); //GlassID
			Write32(pNpcItemInfo, 0); //CoatID
			Write32(pNpcItemInfo, 0); //GloveID
			Write32(pNpcItemInfo, 0); //TrousersID
			Write32(pNpcItemInfo, 0); //PersonarID
			Write32(pNpcItemInfo, 0); //TattooID
			Write32(pNpcItemInfo, 0); //WingID
			Write32(pNpcItemInfo, 0); //DecoratorID
			Write32(pNpcItemInfo, 0); //KartID
			Write32(pNpcItemInfo, 0); //ColorID
			Write32(pNpcItemInfo, 0); //TrackID
			Write32(pNpcItemInfo, 0); //EffectID
			Write32(pNpcItemInfo, 0); //BrandID
			Write32(pNpcItemInfo, 0); //TailID

			len = pNpcItemInfo - pNpcInfo;
			Set16(pNpcInfo, (WORD)len);
			pNpcInfo += len;
		}
		Write32(pNpcInfo, 0); //GpSkillPeriod
		Write32(pNpcInfo, 0); //BaseValue
		{ //DefaultSpeedPara
			BYTE* pDefaultSpeedPara = pNpcInfo;
			Write16(pDefaultSpeedPara, 0); //len

			Write32(pDefaultSpeedPara, 0); //MaxSpeed
			Write32(pDefaultSpeedPara, 0); //MinSpeed
			Write32(pDefaultSpeedPara, 0); //MaxPlusForce
			Write32(pDefaultSpeedPara, 0); //MinPlusForce
			Write32(pDefaultSpeedPara, 0); //MaxTurnSpeed
			Write32(pDefaultSpeedPara, 0); //MinTurnSpeed
			Write32(pDefaultSpeedPara, 0); //MaxDist
			Write32(pDefaultSpeedPara, 0); //MinDist

			len = pDefaultSpeedPara - pNpcInfo;
			Set16(pNpcInfo, (WORD)len);
			pNpcInfo += len;
		}
		Write8(pNpcInfo, 0); //NormalSpeedNum
		for (size_t i = 0; i < n; i++)
		{ //NormalSpeedPara
			BYTE* pNormalSpeedPara = pNpcInfo;
			Write16(pNormalSpeedPara, 0); //len

			Write32(pNormalSpeedPara, 0); //MaxSpeed
			Write32(pNormalSpeedPara, 0); //MinSpeed
			Write32(pNormalSpeedPara, 0); //MaxPlusForce
			Write32(pNormalSpeedPara, 0); //MinPlusForce
			Write32(pNormalSpeedPara, 0); //MaxTurnSpeed
			Write32(pNormalSpeedPara, 0); //MinTurnSpeed
			Write32(pNormalSpeedPara, 0); //MaxDist
			Write32(pNormalSpeedPara, 0); //MinDist

			len = pNormalSpeedPara - pNpcInfo;
			Set16(pNpcInfo, (WORD)len);
			pNpcInfo += len;
		}
		Write8(pNpcInfo, 0); //GpNum
		for (size_t i = 0; i < n; i++)
		{ //GpPara
			BYTE* pGpPara = pNpcInfo;
			Write16(pGpPara, 0); //len

			Write32(pGpPara, 0); //GpID
			Write32(pGpPara, 0); //Probability
			Write32(pGpPara, 0); //MaxDist
			Write32(pGpPara, 0); //MinDist

			len = pGpPara - pNpcInfo;
			Set16(pNpcInfo, (WORD)len);
			pNpcInfo += len;
		}

		len = pNpcInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //PlayerItemNum
	for (size_t i = 0; i < n; i++)
	{ //PlayerInfo
		BYTE* pPlayerInfo = p;
		Write16(pPlayerInfo, 0); //len

		Write32(pPlayerInfo, 0); //NpcID
		WriteString(pPlayerInfo, 0); //NPCName[]
		WriteString(pPlayerInfo, 0); //GuildName[]
		{ //NpcItemInfo
			BYTE* pNpcItemInfo = pPlayerInfo;
			Write16(pNpcItemInfo, 0); //len

			Write32(pNpcItemInfo, 0); //RoleID
			Write32(pNpcItemInfo, 0); //HairID
			Write32(pNpcItemInfo, 0); //FaceID
			Write32(pNpcItemInfo, 0); //GlassID
			Write32(pNpcItemInfo, 0); //CoatID
			Write32(pNpcItemInfo, 0); //GloveID
			Write32(pNpcItemInfo, 0); //TrousersID
			Write32(pNpcItemInfo, 0); //PersonarID
			Write32(pNpcItemInfo, 0); //TattooID
			Write32(pNpcItemInfo, 0); //WingID
			Write32(pNpcItemInfo, 0); //DecoratorID
			Write32(pNpcItemInfo, 0); //KartID
			Write32(pNpcItemInfo, 0); //ColorID
			Write32(pNpcItemInfo, 0); //TrackID
			Write32(pNpcItemInfo, 0); //EffectID
			Write32(pNpcItemInfo, 0); //BrandID
			Write32(pNpcItemInfo, 0); //TailID

			len = pNpcItemInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		Write32(pPlayerInfo, 0); //GpSkillPeriod
		Write32(pPlayerInfo, 0); //BaseValue
		{ //DefaultSpeedPara
			BYTE* pDefaultSpeedPara = pPlayerInfo;
			Write16(pDefaultSpeedPara, 0); //len

			Write32(pDefaultSpeedPara, 0); //MaxSpeed
			Write32(pDefaultSpeedPara, 0); //MinSpeed
			Write32(pDefaultSpeedPara, 0); //MaxPlusForce
			Write32(pDefaultSpeedPara, 0); //MinPlusForce
			Write32(pDefaultSpeedPara, 0); //MaxTurnSpeed
			Write32(pDefaultSpeedPara, 0); //MinTurnSpeed
			Write32(pDefaultSpeedPara, 0); //MaxDist
			Write32(pDefaultSpeedPara, 0); //MinDist

			len = pDefaultSpeedPara - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		Write8(pPlayerInfo, 0); //NormalSpeedNum
		for (size_t i = 0; i < n; i++)
		{ //NormalSpeedPara
			BYTE* pNormalSpeedPara = pPlayerInfo;
			Write16(pNormalSpeedPara, 0); //len

			Write32(pNormalSpeedPara, 0); //MaxSpeed
			Write32(pNormalSpeedPara, 0); //MinSpeed
			Write32(pNormalSpeedPara, 0); //MaxPlusForce
			Write32(pNormalSpeedPara, 0); //MinPlusForce
			Write32(pNormalSpeedPara, 0); //MaxTurnSpeed
			Write32(pNormalSpeedPara, 0); //MinTurnSpeed
			Write32(pNormalSpeedPara, 0); //MaxDist
			Write32(pNormalSpeedPara, 0); //MinDist

			len = pNormalSpeedPara - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		Write8(pPlayerInfo, 0); //GpNum
		for (size_t i = 0; i < n; i++)
		{ //GpPara
			BYTE* pGpPara = pPlayerInfo;
			Write16(pGpPara, 0); //len

			Write32(pGpPara, 0); //GpID
			Write32(pGpPara, 0); //Probability
			Write32(pGpPara, 0); //MaxDist
			Write32(pGpPara, 0); //MinDist

			len = pGpPara - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}

		len = pPlayerInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 530, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifySingleRaceBegin(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //CountDownTime

	len = p - buf;
	SendToClient(Client, 531, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifySingleRaceFinish(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 532, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifySingleRaceOver(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	{ //TaskStatusInfo
		BYTE* pTaskStatusInfo = p;
		Write16(pTaskStatusInfo, 0); //len

		Write32(pTaskStatusInfo, 0); //TaskID
		Write8(pTaskStatusInfo, 0); //Status
		Write32(pTaskStatusInfo, 0); //ProgressRate
		Write32(pTaskStatusInfo, 0); //Other
		Write32(pTaskStatusInfo, 0); //LastUpdateTime

		len = pTaskStatusInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //FinTime
	{ //TaskAward
		BYTE* pTaskAward = p;
		Write16(pTaskAward, 0); //len

		Write32(pTaskAward, 0); //AwardMoney
		Write32(pTaskAward, 0); //TotalMoney
		Write32(pTaskAward, 0); //AwardSuperMoney
		Write32(pTaskAward, 0); //TotalSuperMoney
		Write32(pTaskAward, 0); //AwardExp
		Write32(pTaskAward, 0); //TotalExp
		Write32(pTaskAward, 0); //AwardItemNum
		for (size_t i = 0; i < n; i++)
		{ //AwardItemInfo
			BYTE* pAwardItemInfo = pTaskAward;
			Write16(pAwardItemInfo, 0); //len

			Write32(pAwardItemInfo, 0); //ItemID
			Write32(pAwardItemInfo, 0); //ItemNum
			Write32(pAwardItemInfo, 0); //AvailPeriod
			Write8(pAwardItemInfo, 0); //Status
			WriteUn(pAwardItemInfo, 0); //ObtainTime
			Write32(pAwardItemInfo, 0); //OtherAttribute

			len = pAwardItemInfo - pTaskAward;
			Set16(pTaskAward, (WORD)len);
			pTaskAward += len;
		}
		Write32(pTaskAward, 0); //AwardCoupons
		Write32(pTaskAward, 0); //TotalCoupons
		Write32(pTaskAward, 0); //AwardLuckMoney
		Write32(pTaskAward, 0); //TotalLuckMoney
		Write32(pTaskAward, 0); //AwardTeamWorkExp
		Write32(pTaskAward, 0); //TotalTeamWorkExp
		Write32(pTaskAward, 0); //AwardWlCash
		Write32(pTaskAward, 0); //AwardWlCrystal
		Write32(pTaskAward, 0); //AwardWlDegree

		len = pTaskAward - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 533, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifySingleGameOver(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 534, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyTaskProgressRate(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	{ //TaskStatusInfo
		BYTE* pTaskStatusInfo = p;
		Write16(pTaskStatusInfo, 0); //len

		Write32(pTaskStatusInfo, 0); //TaskID
		Write8(pTaskStatusInfo, 0); //Status
		Write32(pTaskStatusInfo, 0); //ProgressRate
		Write32(pTaskStatusInfo, 0); //Other
		Write32(pTaskStatusInfo, 0); //LastUpdateTime

		len = pTaskStatusInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //RandTaskUpdateFlag

	len = p - buf;
	SendToClient(Client, 536, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyTaskAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //TaskID
	{ //TaskAward
		BYTE* pTaskAward = p;
		Write16(pTaskAward, 0); //len

		Write32(pTaskAward, 0); //AwardMoney
		Write32(pTaskAward, 0); //TotalMoney
		Write32(pTaskAward, 0); //AwardSuperMoney
		Write32(pTaskAward, 0); //TotalSuperMoney
		Write32(pTaskAward, 0); //AwardExp
		Write32(pTaskAward, 0); //TotalExp
		Write32(pTaskAward, 0); //AwardItemNum
		for (size_t i = 0; i < n; i++)
		{ //AwardItemInfo
			BYTE* pAwardItemInfo = pTaskAward;
			Write16(pAwardItemInfo, 0); //len

			Write32(pAwardItemInfo, 0); //ItemID
			Write32(pAwardItemInfo, 0); //ItemNum
			Write32(pAwardItemInfo, 0); //AvailPeriod
			Write8(pAwardItemInfo, 0); //Status
			WriteUn(pAwardItemInfo, 0); //ObtainTime
			Write32(pAwardItemInfo, 0); //OtherAttribute

			len = pAwardItemInfo - pTaskAward;
			Set16(pTaskAward, (WORD)len);
			pTaskAward += len;
		}
		Write32(pTaskAward, 0); //AwardCoupons
		Write32(pTaskAward, 0); //TotalCoupons
		Write32(pTaskAward, 0); //AwardLuckMoney
		Write32(pTaskAward, 0); //TotalLuckMoney
		Write32(pTaskAward, 0); //AwardTeamWorkExp
		Write32(pTaskAward, 0); //TotalTeamWorkExp
		Write32(pTaskAward, 0); //AwardWlCash
		Write32(pTaskAward, 0); //AwardWlCrystal
		Write32(pTaskAward, 0); //AwardWlDegree

		len = pTaskAward - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //NextTaskID

	len = p - buf;
	SendToClient(Client, 537, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestStartSingleTask(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int TaskID = Read32(p);
	int MapID = Read32(p);
	U Level = ReadU(p);

}

void ResponseStartSingleTask(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write32(p, 0); //TaskID
	Write32(p, 0); //MapID
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 138, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestReportCurrentOpt(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	short OptType = Read16(p);
	int OptID = Read32(p);
	int SpecialValue = Read32(p);

}

void ResponseReportCurrentOpt(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write16(p, 0); //OptType
	Write32(p, 0); //OptNum

	len = p - buf;
	SendToClient(Client, 139, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetTaskList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetTaskList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write16(p, 0); //TaskNum
	for (size_t i = 0; i < n; i++)
	{ //PlayerTaskInfo
		BYTE* pPlayerTaskInfo = p;
		Write16(pPlayerTaskInfo, 0); //len

		{ //PlayerDBTaskInfo
			BYTE* pPlayerDBTaskInfo = pPlayerTaskInfo;
			Write16(pPlayerDBTaskInfo, 0); //len

			Write32(pPlayerDBTaskInfo, 0); //TaskID
			Write16(pPlayerDBTaskInfo, 0); //OptionID
			Write8(pPlayerDBTaskInfo, 0); //Status
			Write8(pPlayerDBTaskInfo, 0); //PrevStatus
			Write32(pPlayerDBTaskInfo, 0); //ProgressRate
			Write32(pPlayerDBTaskInfo, 0); //Other
			Write32(pPlayerDBTaskInfo, 0); //TakeTime
			Write32(pPlayerDBTaskInfo, 0); //LastUpdateTime

			len = pPlayerDBTaskInfo - pPlayerTaskInfo;
			Set16(pPlayerTaskInfo, (WORD)len);
			pPlayerTaskInfo += len;
		}
		Write16(pPlayerTaskInfo, 0); //MapID

		len = pPlayerTaskInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen
	Write16(p, 0); //RecommendLen
	Write32(p, 0); //SpecialTaskID
	Write8(p, 0); //RecomTaskPackNum
	for (size_t i = 0; i < n; i++)
	{ //RecomTaskPack
		BYTE* pRecomTaskPack = p;
		Write16(pRecomTaskPack, 0); //len

		Write32(pRecomTaskPack, 0); //TaskPackID
		Write32(pRecomTaskPack, 0); //SpecialFlag

		len = pRecomTaskPack - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //BlackListNum
	for (size_t i = 0; i < n; i++)
	{ //TaskBlackList
		BYTE* pTaskBlackList = p;
		Write16(pTaskBlackList, 0); //len

		Write8(pTaskBlackList, 0); //EntityType
		Write32(pTaskBlackList, 0); //EntityID

		len = pTaskBlackList - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 135, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestTakeTask(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int TaskID = Read32(p);
	short TakeOptionID = Read16(p);

}

void ResponseTakeTask(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	{ //PlayerDBTaskInfo
		BYTE* pPlayerDBTaskInfo = p;
		Write16(pPlayerDBTaskInfo, 0); //len

		Write32(pPlayerDBTaskInfo, 0); //TaskID
		Write16(pPlayerDBTaskInfo, 0); //OptionID
		Write8(pPlayerDBTaskInfo, 0); //Status
		Write8(pPlayerDBTaskInfo, 0); //PrevStatus
		Write32(pPlayerDBTaskInfo, 0); //ProgressRate
		Write32(pPlayerDBTaskInfo, 0); //Other
		Write32(pPlayerDBTaskInfo, 0); //TakeTime
		Write32(pPlayerDBTaskInfo, 0); //LastUpdateTime

		len = pPlayerDBTaskInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 136, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestDeleteTask(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int TaskID = Read32(p);

}

void ResponseDeleteTask(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write32(p, 0); //TaskID
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 137, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestSkipTask(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int TaskID = Read32(p);

}

void ResponseSkipTask(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write32(p, 0); //TaskID
	{ //TaskAward
		BYTE* pTaskAward = p;
		Write16(pTaskAward, 0); //len

		Write32(pTaskAward, 0); //AwardMoney
		Write32(pTaskAward, 0); //TotalMoney
		Write32(pTaskAward, 0); //AwardSuperMoney
		Write32(pTaskAward, 0); //TotalSuperMoney
		Write32(pTaskAward, 0); //AwardExp
		Write32(pTaskAward, 0); //TotalExp
		Write32(pTaskAward, 0); //AwardItemNum
		for (size_t i = 0; i < n; i++)
		{ //AwardItemInfo
			BYTE* pAwardItemInfo = pTaskAward;
			Write16(pAwardItemInfo, 0); //len

			Write32(pAwardItemInfo, 0); //ItemID
			Write32(pAwardItemInfo, 0); //ItemNum
			Write32(pAwardItemInfo, 0); //AvailPeriod
			Write8(pAwardItemInfo, 0); //Status
			WriteUn(pAwardItemInfo, 0); //ObtainTime
			Write32(pAwardItemInfo, 0); //OtherAttribute

			len = pAwardItemInfo - pTaskAward;
			Set16(pTaskAward, (WORD)len);
			pTaskAward += len;
		}
		Write32(pTaskAward, 0); //AwardCoupons
		Write32(pTaskAward, 0); //TotalCoupons
		Write32(pTaskAward, 0); //AwardLuckMoney
		Write32(pTaskAward, 0); //TotalLuckMoney
		Write32(pTaskAward, 0); //AwardTeamWorkExp
		Write32(pTaskAward, 0); //TotalTeamWorkExp
		Write32(pTaskAward, 0); //AwardWlCash
		Write32(pTaskAward, 0); //AwardWlCrystal
		Write32(pTaskAward, 0); //AwardWlDegree

		len = pTaskAward - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 140, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestSkipFreshTask(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseSkipFreshTask(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin

	len = p - buf;
	SendToClient(Client, 183, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyAntiBot(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //Type
	Write16(p, 0); //BuffLen

	len = p - buf;
	SendToClient(Client, 538, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void AckAntiBot(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	short BuffLen = Read16(p);

}

void AckDpData(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	short BuffLen = Read16(p);

}

void RequestGMKickOff(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int KickKind = Read32(p);
	UINT DstUin = Read32(p);
	short AttachInfoLen = Read16(p);

}

void ResponseGMKickOff(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //AttachInfoLen

	len = p - buf;
	SendToClient(Client, 141, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyGMKickOff(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //GMUin
	Write32(p, 0); //KickKind
	Write16(p, 0); //AttachInfoLen

	len = p - buf;
	SendToClient(Client, 539, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGMForbidden(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int ForbiddenKind = Read32(p);
	int ForbiddenPeriod = Read32(p);
	UINT DstUin = Read32(p);
	short AttachInfoLen = Read16(p);

}

void ResponseGMForbidden(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //AttachInfoLen

	len = p - buf;
	SendToClient(Client, 142, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyGMForbidden(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //GMUin
	Write32(p, 0); //ForbiddenKind
	Write32(p, 0); //ForbiddenPeriod
	Write16(p, 0); //AttachInfoLen

	len = p - buf;
	SendToClient(Client, 540, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyAcquaintanceLogin(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	{ //Data
		BYTE* pData = p;
		Write16(pData, 0); //len

		WriteUn(pData, 0); //AcquatntanceUin
		WriteString(pData, 0); //AcquatntanceName[]
		Write8(pData, 0); //RelationType
		WriteUn(pData, 0); //DstUin

		len = pData - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 599, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyAdvertisement(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //ADFlag
	Write32(p, 0); //ContinuanceTime
	Write16(p, 0); //ContentLen

	len = p - buf;
	SendToClient(Client, 549, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyUpdateExperience(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //ExpInc
	Write32(p, 0); //ExpTotal
	Write16(p, 0); //PrefixStringLen

	len = p - buf;
	SendToClient(Client, 546, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetLicenseInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetLicenseInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write16(p, 0); //LicenseNum
	for (size_t i = 0; i < n; i++)
	{ //PlayerDBLicenseInfo
		BYTE* pPlayerDBLicenseInfo = p;
		Write16(pPlayerDBLicenseInfo, 0); //len

		Write16(pPlayerDBLicenseInfo, 0); //TaskNum
		for (size_t i = 0; i < n; i++)
		{ //LicenseTaskInfo
			BYTE* pLicenseTaskInfo = pPlayerDBLicenseInfo;
			Write16(pLicenseTaskInfo, 0); //len

			Write32(pLicenseTaskInfo, 0); //TaskID
			Write8(pLicenseTaskInfo, 0); //Status
			Write8(pLicenseTaskInfo, 0); //PrevStatus

			len = pLicenseTaskInfo - pPlayerDBLicenseInfo;
			Set16(pPlayerDBLicenseInfo, (WORD)len);
			pPlayerDBLicenseInfo += len;
		}
		Write32(pPlayerDBLicenseInfo, 0); //TakeTime

		len = pPlayerDBLicenseInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 145, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyUpdateLicense(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //NewLicense
	{ //LicenseAward
		BYTE* pLicenseAward = p;
		Write16(pLicenseAward, 0); //len

		Write32(pLicenseAward, 0); //AwardMoney
		Write32(pLicenseAward, 0); //TotalMoney
		Write32(pLicenseAward, 0); //AwardSuperMoney
		Write32(pLicenseAward, 0); //TotalSuperMoney
		Write32(pLicenseAward, 0); //AwardExp
		Write32(pLicenseAward, 0); //TotalExp
		Write32(pLicenseAward, 0); //AwardItemNum
		for (size_t i = 0; i < n; i++)
		{ //AwardItemInfo
			BYTE* pAwardItemInfo = pLicenseAward;
			Write16(pAwardItemInfo, 0); //len

			Write32(pAwardItemInfo, 0); //ItemID
			Write32(pAwardItemInfo, 0); //ItemNum
			Write32(pAwardItemInfo, 0); //AvailPeriod
			Write8(pAwardItemInfo, 0); //Status
			WriteUn(pAwardItemInfo, 0); //ObtainTime
			Write32(pAwardItemInfo, 0); //OtherAttribute

			len = pAwardItemInfo - pLicenseAward;
			Set16(pLicenseAward, (WORD)len);
			pLicenseAward += len;
		}
		Write32(pLicenseAward, 0); //AwardCoupons
		Write32(pLicenseAward, 0); //TotalCoupons
		Write32(pLicenseAward, 0); //AwardLuckMoney
		Write32(pLicenseAward, 0); //TotalLuckMoney
		Write32(pLicenseAward, 0); //AwardTeamWorkExp
		Write32(pLicenseAward, 0); //TotalTeamWorkExp
		Write32(pLicenseAward, 0); //AwardWlCash
		Write32(pLicenseAward, 0); //AwardWlCrystal
		Write32(pLicenseAward, 0); //AwardWlDegree

		len = pLicenseAward - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 547, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyAddLicenseInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //License
	{ //PlayerDBLicenseInfo
		BYTE* pPlayerDBLicenseInfo = p;
		Write16(pPlayerDBLicenseInfo, 0); //len

		Write16(pPlayerDBLicenseInfo, 0); //TaskNum
		for (size_t i = 0; i < n; i++)
		{ //LicenseTaskInfo
			BYTE* pLicenseTaskInfo = pPlayerDBLicenseInfo;
			Write16(pLicenseTaskInfo, 0); //len

			Write32(pLicenseTaskInfo, 0); //TaskID
			Write8(pLicenseTaskInfo, 0); //Status
			Write8(pLicenseTaskInfo, 0); //PrevStatus

			len = pLicenseTaskInfo - pPlayerDBLicenseInfo;
			Set16(pPlayerDBLicenseInfo, (WORD)len);
			pPlayerDBLicenseInfo += len;
		}
		Write32(pPlayerDBLicenseInfo, 0); //TakeTime

		len = pPlayerDBLicenseInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 552, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyWordList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write8(p, 0); //LeaveWordNum
	for (size_t i = 0; i < n; i++)
	{ //WordList
		BYTE* pWordList = p;
		Write16(pWordList, 0); //len

		Write16(pWordList, 0); //WordID
		Write8(pWordList, 0); //WordType
		Write32(pWordList, 0); //WordTime
		Write32(pWordList, 0); //SrcUin
		Write8(pWordList, 0); //WordLen

		len = pWordList - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 554, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestDeleteWord(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	bool DeleteWordNum = Read8(p);
	short[] WordID[] = Read16(p);

}

void ResponseDeleteWord(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin

	len = p - buf;
	SendToClient(Client, 150, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestSwitchInterface(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	bool InterfaceType = Read8(p);

}

void ResponseSwitchInterface(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetSystemTaskList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int TaskVersion = Read32(p);

}

void ResponseGetSystemTaskList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write32(p, 0); //LatestTaskVersion
	Write32(p, 0); //TaskNum
	for (size_t i = 0; i < n; i++)
	{ //SystemTaskInfo
		BYTE* pSystemTaskInfo = p;
		Write16(pSystemTaskInfo, 0); //len

		Write32(pSystemTaskInfo, 0); //TaskID
		Write32(pSystemTaskInfo, 0); //PackID
		WriteString(pSystemTaskInfo, 0); //TaskName[]
		Write16(pSystemTaskInfo, 0); //TaskIntroLen
		Write8(pSystemTaskInfo, 0); //SuccDialogLen
		Write8(pSystemTaskInfo, 0); //FailDialogLen
		Write8(pSystemTaskInfo, 0); //AwardInfoLen
		Write8(pSystemTaskInfo, 0); //AwardOtherInfoLen
		Write8(pSystemTaskInfo, 0); //ProgressLen
		Write16(pSystemTaskInfo, 0); //ExecuteNum
		Write8(pSystemTaskInfo, 0); //PrevTaskNum
		Write32(pSystemTaskInfo, 0); //PrevTaskID[]
		Write16(pSystemTaskInfo, 0); //LogicType
		Write16(pSystemTaskInfo, 0); //TaskType
		Write8(pSystemTaskInfo, 0); //OperatorType
		Write32(pSystemTaskInfo, 0); //OperatorParam
		Write32(pSystemTaskInfo, 0); //Option
		Write32(pSystemTaskInfo, 0); //Identity
		Write32(pSystemTaskInfo, 0); //NeedNum
		Write16(pSystemTaskInfo, 0); //ShowType
		Write32(pSystemTaskInfo, 0); //TotalTime
		Write8(pSystemTaskInfo, 0); //DiffInfoLen

		len = pSystemTaskInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //TaskPackNum
	for (size_t i = 0; i < n; i++)
	{ //SystemTaskPackInfo
		BYTE* pSystemTaskPackInfo = p;
		Write16(pSystemTaskPackInfo, 0); //len

		Write32(pSystemTaskPackInfo, 0); //PackID
		WriteString(pSystemTaskPackInfo, 0); //PackName[]
		Write16(pSystemTaskPackInfo, 0); //PackType
		Write16(pSystemTaskPackInfo, 0); //TaskNum
		Write32(pSystemTaskPackInfo, 0); //TaskID[]
		Write16(pSystemTaskPackInfo, 0); //Priority
		Write16(pSystemTaskPackInfo, 0); //PackMode

		len = pSystemTaskPackInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 152, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyAddTaskInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //TaskNum
	for (size_t i = 0; i < n; i++)
	{ //PlayerDBTaskInfo
		BYTE* pPlayerDBTaskInfo = p;
		Write16(pPlayerDBTaskInfo, 0); //len

		Write32(pPlayerDBTaskInfo, 0); //TaskID
		Write16(pPlayerDBTaskInfo, 0); //OptionID
		Write8(pPlayerDBTaskInfo, 0); //Status
		Write8(pPlayerDBTaskInfo, 0); //PrevStatus
		Write32(pPlayerDBTaskInfo, 0); //ProgressRate
		Write32(pPlayerDBTaskInfo, 0); //Other
		Write32(pPlayerDBTaskInfo, 0); //TakeTime
		Write32(pPlayerDBTaskInfo, 0); //LastUpdateTime

		len = pPlayerDBTaskInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 557, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyActivityAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write8(p, 0); //ActivityAwardLen
	Write32(p, 0); //ActiveID

	len = p - buf;
	SendToClient(Client, 558, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyKartPhysParam(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //KartNum
	for (size_t i = 0; i < n; i++)
	{ //KartPhysParam
		BYTE* pKartPhysParam = p;
		Write16(pKartPhysParam, 0); //len

		Write32(pKartPhysParam, 0); //KartID
		Write8(pKartPhysParam, 0); //PhysInfoCount
		for (size_t i = 0; i < n; i++)
		{ //PhysInfo
			BYTE* pPhysInfo = pKartPhysParam;
			Write16(pPhysInfo, 0); //len

			Write32(pPhysInfo, 0); //PID
			Write32(pPhysInfo, 0); //AffectID
			Write32(pPhysInfo, 0); //Param
			Write32(pPhysInfo, 0); //LifeTime

			len = pPhysInfo - pKartPhysParam;
			Set16(pKartPhysParam, (WORD)len);
			pKartPhysParam += len;
		}
		Write8(pKartPhysParam, 0); //CompensateParamCount
		for (size_t i = 0; i < n; i++)
		{ //CompensateParam
			BYTE* pCompensateParam = pKartPhysParam;
			Write16(pCompensateParam, 0); //len

			Write32(pCompensateParam, 0); //Percent
			Write32(pCompensateParam, 0); //Value

			len = pCompensateParam - pKartPhysParam;
			Set16(pKartPhysParam, (WORD)len);
			pKartPhysParam += len;
		}
		{ //CollisionBoxParam
			BYTE* pCollisionBoxParam = pKartPhysParam;
			Write16(pCollisionBoxParam, 0); //len

			Write32(pCollisionBoxParam, 0); //BoxLength
			Write32(pCollisionBoxParam, 0); //BoxWidth
			Write32(pCollisionBoxParam, 0); //BoxHeight
			Write32(pCollisionBoxParam, 0); //AdjustOffset
			Write32(pCollisionBoxParam, 0); //AdjustPickGap
			Write32(pCollisionBoxParam, 0); //AdjustRemoteOffset
			Write32(pCollisionBoxParam, 0); //AdjustBevelOffset
			Write32(pCollisionBoxParam, 0); //ControllerOffset

			len = pCollisionBoxParam - pKartPhysParam;
			Set16(pKartPhysParam, (WORD)len);
			pKartPhysParam += len;
		}
		{ //CarToCarCollisionParam
			BYTE* pCarToCarCollisionParam = pKartPhysParam;
			Write16(pCarToCarCollisionParam, 0); //len

			Write32(pCarToCarCollisionParam, 0); //CollisionRadius
			Write32(pCarToCarCollisionParam, 0); //CollisionLength
			Write32(pCarToCarCollisionParam, 0); //CollisionWidth
			Write32(pCarToCarCollisionParam, 0); //CollisionHeight
			Write32(pCarToCarCollisionParam, 0); //CollisionLostCtrlTime

			len = pCarToCarCollisionParam - pKartPhysParam;
			Set16(pKartPhysParam, (WORD)len);
			pKartPhysParam += len;
		}
		Write32(pKartPhysParam, 0); //BaseTurnRate
		Write32(pKartPhysParam, 0); //VolatileTurnRate
		Write32(pKartPhysParam, 0); //MaxTurnSpeed
		Write32(pKartPhysParam, 0); //MinTurnSpeed
		Write32(pKartPhysParam, 0); //MaxAccuTime
		Write32(pKartPhysParam, 0); //BaseAccuRate
		Write32(pKartPhysParam, 0); //MaxAffectSpeed
		Write32(pKartPhysParam, 0); //Gravity
		Write32(pKartPhysParam, 0); //AdditionalLocalZSpeed
		Write32(pKartPhysParam, 0); //StartVec
		Write32(pKartPhysParam, 0); //EndVecFist
		Write32(pKartPhysParam, 0); //EndVecSecon
		Write32(pKartPhysParam, 0); //DirKeyForce
		Write32(pKartPhysParam, 0); //DirKeyTwist
		Write32(pKartPhysParam, 0); //BannerTwist
		Write32(pKartPhysParam, 0); //BannerKeyTwist
		Write32(pKartPhysParam, 0); //BannerVecForce
		Write32(pKartPhysParam, 0); //BannerHeadForce
		Write32(pKartPhysParam, 0); //SlidFricForce
		Write32(pKartPhysParam, 0); //RollFricForce
		Write32(pKartPhysParam, 0); //StartWec
		Write32(pKartPhysParam, 0); //MaxWec
		Write32(pKartPhysParam, 0); //SuaiJianTwist
		Write32(pKartPhysParam, 0); //DirUpKeyForce
		Write8(pKartPhysParam, 0); //AccelStatusCount
		Write32(pKartPhysParam, 0); //AccelStatus[]
		Write8(pKartPhysParam, 0); //ForwardAccelNum
		for (size_t i = 0; i < n; i++)
		{ //ForwardAccel
			BYTE* pForwardAccel = pKartPhysParam;
			Write16(pForwardAccel, 0); //len

			Write32(pForwardAccel, 0); //Key
			Write32(pForwardAccel, 0); //Value

			len = pForwardAccel - pKartPhysParam;
			Set16(pKartPhysParam, (WORD)len);
			pKartPhysParam += len;
		}
		Write8(pKartPhysParam, 0); //ForwardDecelNum
		for (size_t i = 0; i < n; i++)
		{ //ForwardDecel
			BYTE* pForwardDecel = pKartPhysParam;
			Write16(pForwardDecel, 0); //len

			Write32(pForwardDecel, 0); //Key
			Write32(pForwardDecel, 0); //Value

			len = pForwardDecel - pKartPhysParam;
			Set16(pKartPhysParam, (WORD)len);
			pKartPhysParam += len;
		}
		Write8(pKartPhysParam, 0); //BackwardAccelNum
		for (size_t i = 0; i < n; i++)
		{ //BackwardAccel
			BYTE* pBackwardAccel = pKartPhysParam;
			Write16(pBackwardAccel, 0); //len

			Write32(pBackwardAccel, 0); //Key
			Write32(pBackwardAccel, 0); //Value

			len = pBackwardAccel - pKartPhysParam;
			Set16(pKartPhysParam, (WORD)len);
			pKartPhysParam += len;
		}
		Write8(pKartPhysParam, 0); //BackwardDecelNum
		for (size_t i = 0; i < n; i++)
		{ //BackwardDecel
			BYTE* pBackwardDecel = pKartPhysParam;
			Write16(pBackwardDecel, 0); //len

			Write32(pBackwardDecel, 0); //Key
			Write32(pBackwardDecel, 0); //Value

			len = pBackwardDecel - pKartPhysParam;
			Set16(pKartPhysParam, (WORD)len);
			pKartPhysParam += len;
		}
		Write32(pKartPhysParam, 0); //CrashCompensatePower
		Write32(pKartPhysParam, 0); //DefenseRate
		Write32(pKartPhysParam, 0); //Uin
		Write32(pKartPhysParam, 0); //SpeedupCardGenRate
		Write32(pKartPhysParam, 0); //ExtraFuncFlag
		Write8(pKartPhysParam, 0); //SkatePara
		for (size_t i = 0; i < n; i++)
		{ //hasSkatePara
			BYTE* phasSkatePara = pKartPhysParam;
			Write16(phasSkatePara, 0); //len

			Write32(phasSkatePara, 0); //TrackSpeed
			Write32(phasSkatePara, 0); //SkateSpeedCoef_AirBigJet
			Write32(phasSkatePara, 0); //SkateSpeedCoef_Jump
			Write32(phasSkatePara, 0); //SkateSpeedCoef_AirJetPoint
			Write32(phasSkatePara, 0); //SkateSpeedCoef_MaxForce
			Write32(phasSkatePara, 0); //OntrackAccRef
			Write32(phasSkatePara, 0); //TrackAccRef
			Write32(phasSkatePara, 0); //DashSkill

			len = phasSkatePara - pKartPhysParam;
			Set16(pKartPhysParam, (WORD)len);
			pKartPhysParam += len;
		}
		Write8(pKartPhysParam, 0); //HasBattleModeSkillInfoList
		for (size_t i = 0; i < n; i++)
		{ //BattleModeSkillInfoList
			BYTE* pBattleModeSkillInfoList = pKartPhysParam;
			Write16(pBattleModeSkillInfoList, 0); //len

			Write8(pBattleModeSkillInfoList, 0); //SkillNum
			for (size_t i = 0; i < n; i++)
			{ //SkillInfo
				BYTE* pSkillInfo = pBattleModeSkillInfoList;
				Write16(pSkillInfo, 0); //len

				Write16(pSkillInfo, 0); //SkillId
				Write8(pSkillInfo, 0); //SkillLevel

				len = pSkillInfo - pBattleModeSkillInfoList;
				Set16(pBattleModeSkillInfoList, (WORD)len);
				pBattleModeSkillInfoList += len;
			}

			len = pBattleModeSkillInfoList - pKartPhysParam;
			Set16(pKartPhysParam, (WORD)len);
			pKartPhysParam += len;
		}

		len = pKartPhysParam - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //SuperN2ORate

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyBugletTalk(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //BugletNum
	for (size_t i = 0; i < n; i++)
	{ //BugletInfo
		BYTE* pBugletInfo = p;
		Write16(pBugletInfo, 0); //len

		WriteUn(pBugletInfo, 0); //SrcUin
		WriteString(pBugletInfo, 0); //SrcNickName[]
		WriteString(pBugletInfo, 0); //SrcGuildName[]
		Write8(pBugletInfo, 0); //Gender
		Write16(pBugletInfo, 0); //ContentLength
		Write8(pBugletInfo, 0); //BugletType
		Write32(pBugletInfo, 0); //Identify
		WriteUn(pBugletInfo, 0); //VipFlag
		{ //NobleInfo
			BYTE* pNobleInfo = pBugletInfo;
			Write16(pNobleInfo, 0); //len

			Write32(pNobleInfo, 0); //NobleID
			Write8(pNobleInfo, 0); //NobleLevel
			Write32(pNobleInfo, 0); //NoblePoint
			Write32(pNobleInfo, 0); //NobleLeftDays

			len = pNobleInfo - pBugletInfo;
			Set16(pBugletInfo, (WORD)len);
			pBugletInfo += len;
		}
		{ //GuildVipBaseInfo
			BYTE* pGuildVipBaseInfo = pBugletInfo;
			Write16(pGuildVipBaseInfo, 0); //len

			Write8(pGuildVipBaseInfo, 0); //GuildVipLevel
			Write32(pGuildVipBaseInfo, 0); //GuildVipPoint

			len = pGuildVipBaseInfo - pBugletInfo;
			Set16(pBugletInfo, (WORD)len);
			pBugletInfo += len;
		}
		Write8(pBugletInfo, 0); //HasLoverVip
		for (size_t i = 0; i < n; i++)
		{ //LoverVipInfo
			BYTE* pLoverVipInfo = pBugletInfo;
			Write16(pLoverVipInfo, 0); //len

			Write8(pLoverVipInfo, 0); //LoverVipLevel
			Write32(pLoverVipInfo, 0); //LoverVipPoint
			Write8(pLoverVipInfo, 0); //GrowRate

			len = pLoverVipInfo - pBugletInfo;
			Set16(pBugletInfo, (WORD)len);
			pBugletInfo += len;
		}

		len = pBugletInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 555, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyUseItemResult(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //ItemID
	Write32(p, 0); //UseItemNum
	Write32(p, 0); //CurrentItemNum

	len = p - buf;
	SendToClient(Client, 556, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestUseItem(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int ItemID = Read32(p);
	UINT DstUin = Read32(p);
	bool AttachDataLen = Read8(p);
	UCHAR OpType = Read8(p);

}

void ResponseUseItem(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //ItemID
	Write32(p, 0); //DstUin
	Write8(p, 0); //AttachDataLen
	Write8(p, 0); //ReasonLen
	Write8(p, 0); //OpType

	len = p - buf;
	SendToClient(Client, 158, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyUseItem(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //SrcUin
	Write32(p, 0); //DstUin
	Write32(p, 0); //ItemID
	Write8(p, 0); //AttachDataLen
	Write8(p, 0); //DstType
	Write8(p, 0); //HasPKAbilityInfo
	for (size_t i = 0; i < n; i++)
	{ //PKAbilityInfo
		BYTE* pPKAbilityInfo = p;
		Write16(pPKAbilityInfo, 0); //len

		Write16(pPKAbilityInfo, 0); //SrcPKAbility
		Write8(pPKAbilityInfo, 0); //IsSrcPKStrong
		Write16(pPKAbilityInfo, 0); //DstPKAbility
		Write8(pPKAbilityInfo, 0); //IsDstPKStrong

		len = pPKAbilityInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 567, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestInvitePlayer(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT DstUin = Read32(p);
	bool Type = Read8(p);

}

void ResponseInvitePlayer(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //DstUin
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 159, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyInviteResult(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //DstUin
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 568, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyBeInvited(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //SrcUin
	WriteString(p, 0); //SrcNickName[]
	Write32(p, 0); //DstUin
	{ //PositionInfo
		BYTE* pPositionInfo = p;
		Write16(pPositionInfo, 0); //len

		Write8(pPositionInfo, 0); //ServerType
		Write16(pPositionInfo, 0); //Status
		Write32(pPositionInfo, 0); //ServerID
		{ //RoomInfo
			BYTE* pRoomInfo = pPositionInfo;
			Write16(pRoomInfo, 0); //len

			Write16(pRoomInfo, 0); //RoomID
			Write16(pRoomInfo, 0); //BaseGameMode
			Write16(pRoomInfo, 0); //SubGameMode
			Write8(pRoomInfo, 0); //CurrentPlayerNum
			Write8(pRoomInfo, 0); //TotalSeatNum
			Write8(pRoomInfo, 0); //Status
			Write32(pRoomInfo, 0); //MapID
			Write8(pRoomInfo, 0); //Flag
			WriteString(pRoomInfo, 0); //RoomName[]
			Write8(pRoomInfo, 0); //HasFBInfo
			for (size_t i = 0; i < n; i++)
			{ //FBInfo
				BYTE* pFBInfo = pRoomInfo;
				Write16(pFBInfo, 0); //len

				Write8(pFBInfo, 0); //AvailableLev
				Write8(pFBInfo, 0); //Lev
				Write8(pFBInfo, 0); //SubLev
				Write32(pFBInfo, 0); //BossID
				Write8(pFBInfo, 0); //FBSeason

				len = pFBInfo - pRoomInfo;
				Set16(pRoomInfo, (WORD)len);
				pRoomInfo += len;
			}

			len = pRoomInfo - pPositionInfo;
			Set16(pPositionInfo, (WORD)len);
			pPositionInfo += len;
		}

		len = pPositionInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //Type

	len = p - buf;
	SendToClient(Client, 569, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void AckBeInvited(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	short ResultID = Read16(p);
	UINT SrcUin = Read32(p);
	UINT DstUin = Read32(p);

}

void RequestExchange(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int ExchangeID = Read32(p);

}

void ResponseExchange(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen
	Write8(p, 0); //LuckAwardNum
	for (size_t i = 0; i < n; i++)
	{ //LuckAwardList
		BYTE* pLuckAwardList = p;
		Write16(pLuckAwardList, 0); //len

		Write8(pLuckAwardList, 0); //AwardType
		Write32(pLuckAwardList, 0); //AwardPara
		Write8(pLuckAwardList, 0); //AwardPostion
		Write8(pLuckAwardList, 0); //AwardDesLen
		Write32(pLuckAwardList, 0); //ItemNum
		Write32(pLuckAwardList, 0); //AvailPeriod

		len = pLuckAwardList - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 160, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestNPCComplete(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int NPCID = Read32(p);
	int CompleteTime = Read32(p);

}

void RequestChangeGender(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	BYTE NewGender = Read8(p);

}

void ResponseChangeGender(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //Gender
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 162, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyItemInvalid(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //InvalidNum
	Write32(p, 0); //InvalidItemID[]

	len = p - buf;
	SendToClient(Client, 570, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyFriendDegree(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //Friend
	Write32(p, 0); //Degree

	len = p - buf;
	SendToClient(Client, 571, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestStartTask(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int TaskID = Read32(p);

}

void ResponseStartTask(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write32(p, 0); //TaskID
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 164, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestUseProp2(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	short PropID = Read16(p);
	Un DstUin = ReadUn(p);
	int[] CurrentPosition[] = Read32(p);
	int PropIndex = Read32(p);
	short NewID = Read16(p);
	char IsClearProp = Read8(p);
	bool DstType = Read8(p);
	int MyUseItemID = Read32(p);
	int DstUseItemID = Read32(p);
	bool IsConvertMode = Read8(p);
	int StoneSkillType = Read32(p);
	UINT LapTime = Read32(p);
	UCHAR DstUinNum = Read8(p);
	UINT[] DstUin[] = Read32(p);
	UCHAR PropUseMode = Read8(p);
	UCHAR QueryUinNum = Read8(p);
	UINT[] QueryUin[] = Read32(p);

}

void RequestEngage(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT SrcUin = Read32(p);
	UINT Time = Read32(p);
	int EngageType = Read32(p);
	int RingID = Read32(p);
	UINT DstUin = Read32(p);
	char[] Nickname[] = ReadString(p);
	short WordLength = Read16(p);

}

void ResponseEngage(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write32(p, 0); //EngageType
	Write32(p, 0); //DstUin
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 166, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyBeEngaged(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //SrcUin
	Write32(p, 0); //DstUin
	Write32(p, 0); //EngageType
	{ //SrcPlayerInfo
		BYTE* pSrcPlayerInfo = p;
		Write16(pSrcPlayerInfo, 0); //len

		Write8(pSrcPlayerInfo, 0); //Gender
		Write8(pSrcPlayerInfo, 0); //Country
		WriteString(pSrcPlayerInfo, 0); //NickName[]

		len = pSrcPlayerInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //WordLength
	Write32(p, 0); //RingId

	len = p - buf;
	SendToClient(Client, 572, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void AckBeEngaged(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	short ResultID = Read16(p);
	UINT SrcUin = Read32(p);
	UINT DstUin = Read32(p);
	int EngageType = Read32(p);
	short WordLength = Read16(p);

}

void NotifyEngageResult(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write32(p, 0); //DstUin
	WriteString(p, 0); //RelNickname[]
	Write32(p, 0); //EngageType
	Write16(p, 0); //WordLength
	Write8(p, 0); //ReasonLen
	Write32(p, 0); //RingId
	Write32(p, 0); //EngageTime
	Write8(p, 0); //EngageFlag

	len = p - buf;
	SendToClient(Client, 573, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestCancelEngage(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT DstUin = Read32(p);
	int EngageType = Read32(p);
	short WordLength = Read16(p);
	int UseItemId = Read32(p);

}

void ResponseCancelEngage(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write32(p, 0); //DstUin
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 167, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyCancelEngage(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //SrcUin
	WriteString(p, 0); //Nickname[]
	Write32(p, 0); //DstUin
	Write32(p, 0); //EngageType
	Write16(p, 0); //WordLength

	len = p - buf;
	SendToClient(Client, 574, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyModifyHoneyNickName(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //RelUin
	WriteString(p, 0); //NewNickName[]

	len = p - buf;
	SendToClient(Client, 576, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyDeleteItem(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //Flag
	Write32(p, 0); //DelNum
	Write32(p, 0); //DelItemID[]
	Write16(p, 0); //ItemNum
	for (size_t i = 0; i < n; i++)
	{ //ItemStatus
		BYTE* pItemStatus = p;
		Write16(pItemStatus, 0); //len

		Write32(pItemStatus, 0); //ItemID
		Write8(pItemStatus, 0); //NewStatus

		len = pItemStatus - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 577, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyGetLottery(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //Uin
	Write32(p, 0); //TypeID
	Write16(p, 0); //ItemNum
	for (size_t i = 0; i < n; i++)
	{ //ItemInfo
		BYTE* pItemInfo = p;
		Write16(pItemInfo, 0); //len

		Write32(pItemInfo, 0); //ItemID
		Write32(pItemInfo, 0); //ItemNum
		Write32(pItemInfo, 0); //AvailPeriod
		Write8(pItemInfo, 0); //Status
		WriteUn(pItemInfo, 0); //ObtainTime
		Write32(pItemInfo, 0); //OtherAttribute

		len = pItemInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //ItemNum2
	for (size_t i = 0; i < n; i++)
	{ //ItemContrledInfo
		BYTE* pItemContrledInfo = p;
		Write16(pItemContrledInfo, 0); //len

		Write16(pItemContrledInfo, 0); //ContrledNum
		Write32(pItemContrledInfo, 0); //ContrledItemID[]

		len = pItemContrledInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 578, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetKeyOfBox(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	char Type = Read8(p);
	int ID = Read32(p);

}

void ResponseGetKeyOfBox(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	WriteUn(p, 0); //Uin
	Write8(p, 0); //Type
	Write32(p, 0); //ID
	Write8(p, 0); //OpenNum
	for (size_t i = 0; i < n; i++)
	{ //OpenEntry
		BYTE* pOpenEntry = p;
		Write16(pOpenEntry, 0); //len

		Write32(pOpenEntry, 0); //Num
		for (size_t i = 0; i < n; i++)
		{ //IDNum
			BYTE* pIDNum = pOpenEntry;
			Write16(pIDNum, 0); //len

			Write32(pIDNum, 0); //ID
			Write32(pIDNum, 0); //Num

			len = pIDNum - pOpenEntry;
			Set16(pOpenEntry, (WORD)len);
			pOpenEntry += len;
		}

		len = pOpenEntry - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 189, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetBoxItems(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	int TreasureBoxID = Read32(p);
	UCHAR Contex = Read8(p);

}

void ResponseGetBoxItems(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	WriteUn(p, 0); //Uin
	{ //TreasureBoxToClient
		BYTE* pTreasureBoxToClient = p;
		Write16(pTreasureBoxToClient, 0); //len

		Write32(pTreasureBoxToClient, 0); //BoxID
		Write32(pTreasureBoxToClient, 0); //BoxType
		{ //Key
			BYTE* pKey = pTreasureBoxToClient;
			Write16(pKey, 0); //len

			Write32(pKey, 0); //KeyType
			for (size_t i = 0; i < n; i++)
			{ //KeyEntry
				BYTE* pKeyEntry = pKey;
				Write16(pKeyEntry, 0); //len

				Write32(pKeyEntry, 0); //KeyID
				Write32(pKeyEntry, 0); //Num

				len = pKeyEntry - pKey;
				Set16(pKey, (WORD)len);
				pKey += len;
			}
			Write8(pKey, 0); //IsNotConsume

			len = pKey - pTreasureBoxToClient;
			Set16(pTreasureBoxToClient, (WORD)len);
			pTreasureBoxToClient += len;
		}
		{ //AwardEntry
			BYTE* pAwardEntry = pTreasureBoxToClient;
			Write16(pAwardEntry, 0); //len

			Write32(pAwardEntry, 0); //Exp
			Write32(pAwardEntry, 0); //Money
			Write32(pAwardEntry, 0); //SuperMoney
			Write16(pAwardEntry, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAwardEntry;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute

				len = pItemInfo - pAwardEntry;
				Set16(pAwardEntry, (WORD)len);
				pAwardEntry += len;
			}
			Write32(pAwardEntry, 0); //Coupons
			Write32(pAwardEntry, 0); //GuildPoint
			Write32(pAwardEntry, 0); //LuckMoney

			len = pAwardEntry - pTreasureBoxToClient;
			Set16(pTreasureBoxToClient, (WORD)len);
			pTreasureBoxToClient += len;
		}

		len = pTreasureBoxToClient - p;
		Set16(p, (WORD)len);
		p += len;
	}
	WriteUn(p, 0); //maxSelectNum
	Write8(p, 0); //Contex

	len = p - buf;
	SendToClient(Client, 190, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void ResponseOpenBox(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	WriteUn(p, 0); //Uin
	{ //TreasureBoxToClient
		BYTE* pTreasureBoxToClient = p;
		Write16(pTreasureBoxToClient, 0); //len

		Write32(pTreasureBoxToClient, 0); //BoxID
		Write32(pTreasureBoxToClient, 0); //BoxType
		{ //Key
			BYTE* pKey = pTreasureBoxToClient;
			Write16(pKey, 0); //len

			Write32(pKey, 0); //KeyType
			for (size_t i = 0; i < n; i++)
			{ //KeyEntry
				BYTE* pKeyEntry = pKey;
				Write16(pKeyEntry, 0); //len

				Write32(pKeyEntry, 0); //KeyID
				Write32(pKeyEntry, 0); //Num

				len = pKeyEntry - pKey;
				Set16(pKey, (WORD)len);
				pKey += len;
			}
			Write8(pKey, 0); //IsNotConsume

			len = pKey - pTreasureBoxToClient;
			Set16(pTreasureBoxToClient, (WORD)len);
			pTreasureBoxToClient += len;
		}
		{ //AwardEntry
			BYTE* pAwardEntry = pTreasureBoxToClient;
			Write16(pAwardEntry, 0); //len

			Write32(pAwardEntry, 0); //Exp
			Write32(pAwardEntry, 0); //Money
			Write32(pAwardEntry, 0); //SuperMoney
			Write16(pAwardEntry, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAwardEntry;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute

				len = pItemInfo - pAwardEntry;
				Set16(pAwardEntry, (WORD)len);
				pAwardEntry += len;
			}
			Write32(pAwardEntry, 0); //Coupons
			Write32(pAwardEntry, 0); //GuildPoint
			Write32(pAwardEntry, 0); //LuckMoney

			len = pAwardEntry - pTreasureBoxToClient;
			Set16(pTreasureBoxToClient, (WORD)len);
			pTreasureBoxToClient += len;
		}

		len = pTreasureBoxToClient - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen
	Write32(p, 0); //Reserve

	len = p - buf;
	SendToClient(Client, 168, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestOutDoorEggInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);

}

void ResponseOutDoorEggInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	WriteUn(p, 0); //Uin
	Write8(p, 0); //ReasonLen
	WriteUn(p, 0); //EggNumber
	for (size_t i = 0; i < n; i++)
	{ //EggInfo
		BYTE* pEggInfo = p;
		Write16(pEggInfo, 0); //len

		WriteUn(pEggInfo, 0); //EggPosition
		Write32(pEggInfo, 0); //EggTypeID

		len = pEggInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 169, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestOutDoorSmashEgg(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	{ //EggInfo
		BYTE* pEggInfo = p;
		len = Read16(pEggInfo);

		Un EggPosition = ReadUn(pEggInfo);
		int EggTypeID = Read32(pEggInfo);

		p += len;
	}

}

void ResponseOutDoorSmashEgg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	WriteUn(p, 0); //Uin
	{ //EggInfo
		BYTE* pEggInfo = p;
		Write16(pEggInfo, 0); //len

		WriteUn(pEggInfo, 0); //EggPosition
		Write32(pEggInfo, 0); //EggTypeID

		len = pEggInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //UseItemID
	Write32(p, 0); //UseItemNum
	Write32(p, 0); //AddExperience
	Write32(p, 0); //AddMoney
	Write32(p, 0); //AddSuperMoney
	Write16(p, 0); //ItemNum
	for (size_t i = 0; i < n; i++)
	{ //AddItemInfo
		BYTE* pAddItemInfo = p;
		Write16(pAddItemInfo, 0); //len

		Write32(pAddItemInfo, 0); //ItemID
		Write32(pAddItemInfo, 0); //ItemNum
		Write32(pAddItemInfo, 0); //AvailPeriod
		Write8(pAddItemInfo, 0); //Status
		WriteUn(pAddItemInfo, 0); //ObtainTime
		Write32(pAddItemInfo, 0); //OtherAttribute

		len = pAddItemInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen
	Write32(p, 0); //AddCoupons

	len = p - buf;
	SendToClient(Client, 170, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyOutDoorSmashEgg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //Uin
	{ //EggInfo
		BYTE* pEggInfo = p;
		Write16(pEggInfo, 0); //len

		WriteUn(pEggInfo, 0); //EggPosition
		Write32(pEggInfo, 0); //EggTypeID

		len = pEggInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 579, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyOutDoorEggInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //EggNumber
	for (size_t i = 0; i < n; i++)
	{ //EggInfo
		BYTE* pEggInfo = p;
		Write16(pEggInfo, 0); //len

		WriteUn(pEggInfo, 0); //EggPosition
		Write32(pEggInfo, 0); //EggTypeID

		len = pEggInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //Type

	len = p - buf;
	SendToClient(Client, 580, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyBorderGameCondition(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	for (size_t i = 0; i < n; i++)
	{ //Condition
		BYTE* pCondition = p;
		Write16(pCondition, 0); //len

		Write32(pCondition, 0); //BorderGameType
		Write16(pCondition, 0); //NeededMoney
		Write16(pCondition, 0); //NeededLevel
		{ //TimeLimit
			BYTE* pTimeLimit = pCondition;
			Write16(pTimeLimit, 0); //len

			Write32(pTimeLimit, 0); //OpenTime
			Write32(pTimeLimit, 0); //CloseTime

			len = pTimeLimit - pCondition;
			Set16(pCondition, (WORD)len);
			pCondition += len;
		}
		Write32(pCondition, 0); //NeedHonor

		len = pCondition - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //NeedMapNum
	Write32(p, 0); //MapID[]

	len = p - buf;
	SendToClient(Client, 544, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestEnterBorderGame(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int BorderGameType = Read32(p);

}

void ResponseEnterBorderGame(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 143, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyMatchFailed(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 545, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestCancelBorderMatch(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseCancelborderMatch(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 147, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyPlayerLeaveBorderGame(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write8(p, 0); //GameType

	len = p - buf;
	SendToClient(Client, 550, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyBorderRaceOver(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	for (size_t i = 0; i < n; i++)
	{ //RaceScore
		BYTE* pRaceScore = p;
		Write16(pRaceScore, 0); //len

		WriteUn(pRaceScore, 0); //Uin
		WriteUn(pRaceScore, 0); //FinTime
		Write32(pRaceScore, 0); //BorderGameType
		Write32(pRaceScore, 0); //ExpInc
		Write32(pRaceScore, 0); //TotalExp
		Write32(pRaceScore, 0); //SuperMoneyInc
		Write32(pRaceScore, 0); //TotalSuperMoney
		Write32(pRaceScore, 0); //PersonalHonor
		Write32(pRaceScore, 0); //TotalPersonalHonor
		Write32(pRaceScore, 0); //NationalHonor
		Write32(pRaceScore, 0); //TotalNationalHonor
		Write32(pRaceScore, 0); //GuildPointInc
		Write32(pRaceScore, 0); //GuildPointSpecialInc
		Write8(pRaceScore, 0); //AwardNum
		Write32(pRaceScore, 0); //SpecialAward[]
		Write8(pRaceScore, 0); //VipMemberFreeFlag

		len = pRaceScore - p;
		Set16(p, (WORD)len);
		p += len;
	}
	WriteUn(p, 0); //AwardTime

	len = p - buf;
	SendToClient(Client, 542, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyHero(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //CountryID
	WriteString(p, 0); //Nickname[]
	Write32(p, 0); //SuperMoney

	len = p - buf;
	SendToClient(Client, 543, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestCheatingReport(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT DstUin = Read32(p);

}

void RequestGetNationHonorList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	BYTE CountryID = Read8(p);

}

void ResponseGetNationHonorList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	{ //NationHonorList
		BYTE* pNationHonorList = p;
		Write16(pNationHonorList, 0); //len

		Write16(pNationHonorList, 0); //YesterdayNum
		for (size_t i = 0; i < n; i++)
		{ //YesterdayNationHonor
			BYTE* pYesterdayNationHonor = pNationHonorList;
			Write16(pYesterdayNationHonor, 0); //len

			Write32(pYesterdayNationHonor, 0); //Uin
			WriteString(pYesterdayNationHonor, 0); //Nickname[]
			Write32(pYesterdayNationHonor, 0); //PersonalHonor
			WriteUn(pYesterdayNationHonor, 0); //Identity

			len = pYesterdayNationHonor - pNationHonorList;
			Set16(pNationHonorList, (WORD)len);
			pNationHonorList += len;
		}
		Write16(pNationHonorList, 0); //TodayNum
		for (size_t i = 0; i < n; i++)
		{ //TodayNationHonor
			BYTE* pTodayNationHonor = pNationHonorList;
			Write16(pTodayNationHonor, 0); //len

			Write32(pTodayNationHonor, 0); //Uin
			WriteString(pTodayNationHonor, 0); //Nickname[]
			Write32(pTodayNationHonor, 0); //PersonalHonor
			WriteUn(pTodayNationHonor, 0); //Identity

			len = pTodayNationHonor - pNationHonorList;
			Set16(pNationHonorList, (WORD)len);
			pNationHonorList += len;
		}
		Write16(pNationHonorList, 0); //TotalNum
		for (size_t i = 0; i < n; i++)
		{ //TotalNationHonor
			BYTE* pTotalNationHonor = pNationHonorList;
			Write16(pTotalNationHonor, 0); //len

			Write32(pTotalNationHonor, 0); //Uin
			WriteString(pTotalNationHonor, 0); //Nickname[]
			Write32(pTotalNationHonor, 0); //PersonalHonor
			WriteUn(pTotalNationHonor, 0); //Identity

			len = pTotalNationHonor - pNationHonorList;
			Set16(pNationHonorList, (WORD)len);
			pNationHonorList += len;
		}

		len = pNationHonorList - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 144, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyBorderPlayerInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //BaseMode
	Write32(p, 0); //SubMode
	Write8(p, 0); //PlayerCount
	for (size_t i = 0; i < n; i++)
	{ //PlayerRoomVisibleInfo
		BYTE* pPlayerRoomVisibleInfo = p;
		Write16(pPlayerRoomVisibleInfo, 0); //len

		WriteUn(pPlayerRoomVisibleInfo, 0); //Uin
		WriteUn(pPlayerRoomVisibleInfo, 0); //Identity
		Write8(pPlayerRoomVisibleInfo, 0); //SeatID
		Write8(pPlayerRoomVisibleInfo, 0); //TeamID
		Write16(pPlayerRoomVisibleInfo, 0); //PlayerID
		Write8(pPlayerRoomVisibleInfo, 0); //Status
		{ //PlayerDBBaseInfo
			BYTE* pPlayerDBBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerDBBaseInfo, 0); //len

			WriteString(pPlayerDBBaseInfo, 0); //Nickname[]
			Write8(pPlayerDBBaseInfo, 0); //Gender
			Write8(pPlayerDBBaseInfo, 0); //Country
			Write32(pPlayerDBBaseInfo, 0); //License
			WriteUn(pPlayerDBBaseInfo, 0); //Experience
			Write32(pPlayerDBBaseInfo, 0); //SuperMoney
			Write32(pPlayerDBBaseInfo, 0); //Money
			WriteUn(pPlayerDBBaseInfo, 0); //WinNum
			Write32(pPlayerDBBaseInfo, 0); //SecondNum
			Write32(pPlayerDBBaseInfo, 0); //ThirdNum
			WriteUn(pPlayerDBBaseInfo, 0); //TotalNum
			Write32(pPlayerDBBaseInfo, 0); //CurHonor
			Write32(pPlayerDBBaseInfo, 0); //TotalHonor
			Write32(pPlayerDBBaseInfo, 0); //TodayHonor
			Write32(pPlayerDBBaseInfo, 0); //RelaxTime
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationBefore
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationCur
			Write32(pPlayerDBBaseInfo, 0); //Charm
			Write32(pPlayerDBBaseInfo, 0); //DurationGame
			Write32(pPlayerDBBaseInfo, 0); //DanceExp
			Write32(pPlayerDBBaseInfo, 0); //Coupons
			Write32(pPlayerDBBaseInfo, 0); //Admiration
			Write32(pPlayerDBBaseInfo, 0); //LuckMoney
			Write32(pPlayerDBBaseInfo, 0); //TeamWorkExp
			Write32(pPlayerDBBaseInfo, 0); //AchievePoint
			Write32(pPlayerDBBaseInfo, 0); //RegTime
			WriteString(pPlayerDBBaseInfo, 0); //Signature[]
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchPoint
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchNum
			Write16(pPlayerDBBaseInfo, 0); //LuckyMatchFirstNum
			Write8(pPlayerDBBaseInfo, 0); //LuckyMatchBestRand
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchWinNum
			Write32(pPlayerDBBaseInfo, 0); //FizzPointTotal
			Write16(pPlayerDBBaseInfo, 0); //FizzPointDaily
			Write16(pPlayerDBBaseInfo, 0); //FizzPointWeekly
			Write16(pPlayerDBBaseInfo, 0); //FizzPointLastWeek
			Write8(pPlayerDBBaseInfo, 0); //FizzLotteryStatus
			Write32(pPlayerDBBaseInfo, 0); //FizzLastUpdateTime
			Write32(pPlayerDBBaseInfo, 0); //SNSLocaleCode
			Write32(pPlayerDBBaseInfo, 0); //AuctionRightUnlockTime
			Write8(pPlayerDBBaseInfo, 0); //ReserveFlag
			Write32(pPlayerDBBaseInfo, 0); //CurConsumeScore
			Write32(pPlayerDBBaseInfo, 0); //HistoryConsumeScore
			Write8(pPlayerDBBaseInfo, 0); //CrashModeSponsorID
			Write32(pPlayerDBBaseInfo, 0); //Popularity
			Write32(pPlayerDBBaseInfo, 0); //LadderMatchAchievePoint
			Write32(pPlayerDBBaseInfo, 0); //Cash
			Write32(pPlayerDBBaseInfo, 0); //PlayerGPMIdentity
			Write32(pPlayerDBBaseInfo, 0); //PointTotalScore
			WriteUn(pPlayerDBBaseInfo, 0); //totalMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //lastMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalSeasonId
			WriteUn(pPlayerDBBaseInfo, 0); //lastClearMapMedalTime

			len = pPlayerDBBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //PlayerGuildInfo
			BYTE* pPlayerGuildInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerGuildInfo, 0); //len

			WriteString(pPlayerGuildInfo, 0); //GuildName[]
			Write16(pPlayerGuildInfo, 0); //Duty
			Write32(pPlayerGuildInfo, 0); //GuildID
			Write32(pPlayerGuildInfo, 0); //Right
			Write32(pPlayerGuildInfo, 0); //Medal
			Write32(pPlayerGuildInfo, 0); //Contribute
			WriteString(pPlayerGuildInfo, 0); //DutyTitle[]

			len = pPlayerGuildInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write16(pPlayerRoomVisibleInfo, 0); //EquipedItemNum
		for (size_t i = 0; i < n; i++)
		{ //PlayerItemInfo
			BYTE* pPlayerItemInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerItemInfo, 0); //len

			Write32(pPlayerItemInfo, 0); //ItemID
			Write32(pPlayerItemInfo, 0); //ItemNum
			Write32(pPlayerItemInfo, 0); //AvailPeriod
			Write8(pPlayerItemInfo, 0); //Status
			WriteUn(pPlayerItemInfo, 0); //ObtainTime
			Write32(pPlayerItemInfo, 0); //OtherAttribute

			len = pPlayerItemInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write16(pPlayerRoomVisibleInfo, 0); //PetNum
		for (size_t i = 0; i < n; i++)
		{ //PetInfo
			BYTE* pPetInfo = pPlayerRoomVisibleInfo;
			Write16(pPetInfo, 0); //len

			Write32(pPetInfo, 0); //Uin
			Write32(pPetInfo, 0); //PetId
			WriteString(pPetInfo, 0); //PetName[]
			Write8(pPetInfo, 0); //IsProper
			Write16(pPetInfo, 0); //Level
			Write8(pPetInfo, 0); //Status
			Write16(pPetInfo, 0); //PetSkillNum
			for (size_t i = 0; i < n; i++)
			{ //PetSkillList
				BYTE* pPetSkillList = pPetInfo;
				Write16(pPetSkillList, 0); //len

				Write16(pPetSkillList, 0); //SkillID
				Write8(pPetSkillList, 0); //Status
				Write8(pPetSkillList, 0); //Active
				Write32(pPetSkillList, 0); //Value

				len = pPetSkillList - pPetInfo;
				Set16(pPetInfo, (WORD)len);
				pPetInfo += len;
			}
			Write32(pPetInfo, 0); //StrengLevel

			len = pPetInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //PlayerGuildMatchInfo
			BYTE* pPlayerGuildMatchInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerGuildMatchInfo, 0); //len

			Write32(pPlayerGuildMatchInfo, 0); //SelfPoint
			Write32(pPlayerGuildMatchInfo, 0); //WinNum
			Write32(pPlayerGuildMatchInfo, 0); //TotalNum

			len = pPlayerGuildMatchInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //IsInTopList
		Write8(pPlayerRoomVisibleInfo, 0); //LoverRaceOrPro
		Write8(pPlayerRoomVisibleInfo, 0); //TmpEffectNum
		Write32(pPlayerRoomVisibleInfo, 0); //TmpEffectItems[]
		Write8(pPlayerRoomVisibleInfo, 0); //OBState
		Write8(pPlayerRoomVisibleInfo, 0); //DebutOrX5
		Write8(pPlayerRoomVisibleInfo, 0); //RandKeyFlag
		WriteUn(pPlayerRoomVisibleInfo, 0); //VipFlag
		Write8(pPlayerRoomVisibleInfo, 0); //HaveAppellation
		for (size_t i = 0; i < n; i++)
		{ //CurAppellation
			BYTE* pCurAppellation = pPlayerRoomVisibleInfo;
			Write16(pCurAppellation, 0); //len

			Write8(pCurAppellation, 0); //Type
			Write8(pCurAppellation, 0); //Level
			Write8(pCurAppellation, 0); //Status
			Write8(pCurAppellation, 0); //Difficulty
			Write32(pCurAppellation, 0); //MapId
			Write32(pCurAppellation, 0); //Value

			len = pCurAppellation - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //NobleInfo
			BYTE* pNobleInfo = pPlayerRoomVisibleInfo;
			Write16(pNobleInfo, 0); //len

			Write32(pNobleInfo, 0); //NobleID
			Write8(pNobleInfo, 0); //NobleLevel
			Write32(pNobleInfo, 0); //NoblePoint
			Write32(pNobleInfo, 0); //NobleLeftDays

			len = pNobleInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasCarryWizard
		for (size_t i = 0; i < n; i++)
		{ //CarryWizardInfo
			BYTE* pCarryWizardInfo = pPlayerRoomVisibleInfo;
			Write16(pCarryWizardInfo, 0); //len

			Write16(pCarryWizardInfo, 0); //WizardID
			WriteString(pCarryWizardInfo, 0); //Nickname[]
			Write16(pCarryWizardInfo, 0); //WizardType
			Write8(pCarryWizardInfo, 0); //Order
			Write8(pCarryWizardInfo, 0); //EvolutionBranch
			Write8(pCarryWizardInfo, 0); //IsHuanHua

			len = pCarryWizardInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //GuildVipBaseInfo
			BYTE* pGuildVipBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pGuildVipBaseInfo, 0); //len

			Write8(pGuildVipBaseInfo, 0); //GuildVipLevel
			Write32(pGuildVipBaseInfo, 0); //GuildVipPoint

			len = pGuildVipBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write32(pPlayerRoomVisibleInfo, 0); //ExFlag
		Write8(pPlayerRoomVisibleInfo, 0); //HaveLDMBaseInfo
		for (size_t i = 0; i < n; i++)
		{ //PlayerLDMBaseInfo
			BYTE* pPlayerLDMBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerLDMBaseInfo, 0); //len

			Write8(pPlayerLDMBaseInfo, 0); //Grade
			Write32(pPlayerLDMBaseInfo, 0); //Score
			Write32(pPlayerLDMBaseInfo, 0); //MaxScore
			Write32(pPlayerLDMBaseInfo, 0); //MaxGrade

			len = pPlayerLDMBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasWl
		for (size_t i = 0; i < n; i++)
		{ //PlayerWlVisibleInfo
			BYTE* pPlayerWlVisibleInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerWlVisibleInfo, 0); //len

			Write32(pPlayerWlVisibleInfo, 0); //WonderLandID
			WriteString(pPlayerWlVisibleInfo, 0); //WonderLandName[]
			Write16(pPlayerWlVisibleInfo, 0); //WonderLandDuty
			Write8(pPlayerWlVisibleInfo, 0); //SubType
			Write8(pPlayerWlVisibleInfo, 0); //GuildGrade

			len = pPlayerWlVisibleInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasLoverVip
		for (size_t i = 0; i < n; i++)
		{ //LoverVipInfo
			BYTE* pLoverVipInfo = pPlayerRoomVisibleInfo;
			Write16(pLoverVipInfo, 0); //len

			Write8(pLoverVipInfo, 0); //LoverVipLevel
			Write32(pLoverVipInfo, 0); //LoverVipPoint
			Write8(pLoverVipInfo, 0); //GrowRate

			len = pLoverVipInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasBattleModeSkillInfoList
		for (size_t i = 0; i < n; i++)
		{ //BattleModeSkillInfoList
			BYTE* pBattleModeSkillInfoList = pPlayerRoomVisibleInfo;
			Write16(pBattleModeSkillInfoList, 0); //len

			Write8(pBattleModeSkillInfoList, 0); //SkillNum
			for (size_t i = 0; i < n; i++)
			{ //SkillInfo
				BYTE* pSkillInfo = pBattleModeSkillInfoList;
				Write16(pSkillInfo, 0); //len

				Write16(pSkillInfo, 0); //SkillId
				Write8(pSkillInfo, 0); //SkillLevel

				len = pSkillInfo - pBattleModeSkillInfoList;
				Set16(pBattleModeSkillInfoList, (WORD)len);
				pBattleModeSkillInfoList += len;
			}

			len = pBattleModeSkillInfoList - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}

		len = pPlayerRoomVisibleInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //KartNum
	for (size_t i = 0; i < n; i++)
	{ //KartRefitInfo
		BYTE* pKartRefitInfo = p;
		Write16(pKartRefitInfo, 0); //len

		Write32(pKartRefitInfo, 0); //Uin
		Write32(pKartRefitInfo, 0); //KartId
		Write32(pKartRefitInfo, 0); //RefitCout
		Write16(pKartRefitInfo, 0); //MaxFlags
		Write16(pKartRefitInfo, 0); //WWeight
		Write16(pKartRefitInfo, 0); //SpeedWeight
		Write16(pKartRefitInfo, 0); //JetWeight
		Write16(pKartRefitInfo, 0); //SJetWeight
		Write16(pKartRefitInfo, 0); //AccuWeight
		Write32(pKartRefitInfo, 0); //ShapeRefitCount
		Write32(pKartRefitInfo, 0); //KartHeadRefitItemID
		Write32(pKartRefitInfo, 0); //KartTailRefitItemID
		Write32(pKartRefitInfo, 0); //KartFlankRefitItemID
		Write32(pKartRefitInfo, 0); //KartTireRefitItemID

		len = pKartRefitInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 548, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestCountryHonor(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseCountryHonor(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //LastWeekWinCountryID
	Write8(p, 0); //LastWeekLossCountryID
	Write8(p, 0); //CurrCountryNum
	for (size_t i = 0; i < n; i++)
	{ //CurrWeekHonors
		BYTE* pCurrWeekHonors = p;
		Write16(pCurrWeekHonors, 0); //len

		Write8(pCurrWeekHonors, 0); //CountryID
		Write32(pCurrWeekHonors, 0); //CountryHonor

		len = pCurrWeekHonors - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 146, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestEnterOutdoor(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	short SceneID = Read16(p);
	short ChatRoomID = Read16(p);
	short NPCCfgVer = Read16(p);

}

void ResponseEnterOutdoor(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ChatRoomID
	Write16(p, 0); //SceneID
	{ //HeroMoveInfo
		BYTE* pHeroMoveInfo = p;
		Write16(pHeroMoveInfo, 0); //len

		Write32(pHeroMoveInfo, 0); //Uin
		Write8(pHeroMoveInfo, 0); //WalkStatue
		Write32(pHeroMoveInfo, 0); //Posion[]
		Write32(pHeroMoveInfo, 0); //Ori[]
		Write32(pHeroMoveInfo, 0); //AttachUin
		Write32(pHeroMoveInfo, 0); //WalkExtState

		len = pHeroMoveInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen
	Write16(p, 0); //HeroCount
	for (size_t i = 0; i < n; i++)
	{ //HeroInfo
		BYTE* pHeroInfo = p;
		Write16(pHeroInfo, 0); //len

		{ //HeroMoveInfo
			BYTE* pHeroMoveInfo = pHeroInfo;
			Write16(pHeroMoveInfo, 0); //len

			Write32(pHeroMoveInfo, 0); //Uin
			Write8(pHeroMoveInfo, 0); //WalkStatue
			Write32(pHeroMoveInfo, 0); //Posion[]
			Write32(pHeroMoveInfo, 0); //Ori[]
			Write32(pHeroMoveInfo, 0); //AttachUin
			Write32(pHeroMoveInfo, 0); //WalkExtState

			len = pHeroMoveInfo - pHeroInfo;
			Set16(pHeroInfo, (WORD)len);
			pHeroInfo += len;
		}
		Write32(pHeroInfo, 0); //NextPoint
		Write16(pHeroInfo, 0); //PathLen
		Write32(pHeroInfo, 0); //Path[]
		{ //HeroVisbleInfo
			BYTE* pHeroVisbleInfo = pHeroInfo;
			Write16(pHeroVisbleInfo, 0); //len

			WriteUn(pHeroVisbleInfo, 0); //Uin
			WriteUn(pHeroVisbleInfo, 0); //Identity
			Write8(pHeroVisbleInfo, 0); //SeatID
			Write8(pHeroVisbleInfo, 0); //TeamID
			Write16(pHeroVisbleInfo, 0); //PlayerID
			Write8(pHeroVisbleInfo, 0); //Status
			{ //PlayerDBBaseInfo
				BYTE* pPlayerDBBaseInfo = pHeroVisbleInfo;
				Write16(pPlayerDBBaseInfo, 0); //len

				WriteString(pPlayerDBBaseInfo, 0); //Nickname[]
				Write8(pPlayerDBBaseInfo, 0); //Gender
				Write8(pPlayerDBBaseInfo, 0); //Country
				Write32(pPlayerDBBaseInfo, 0); //License
				WriteUn(pPlayerDBBaseInfo, 0); //Experience
				Write32(pPlayerDBBaseInfo, 0); //SuperMoney
				Write32(pPlayerDBBaseInfo, 0); //Money
				WriteUn(pPlayerDBBaseInfo, 0); //WinNum
				Write32(pPlayerDBBaseInfo, 0); //SecondNum
				Write32(pPlayerDBBaseInfo, 0); //ThirdNum
				WriteUn(pPlayerDBBaseInfo, 0); //TotalNum
				Write32(pPlayerDBBaseInfo, 0); //CurHonor
				Write32(pPlayerDBBaseInfo, 0); //TotalHonor
				Write32(pPlayerDBBaseInfo, 0); //TodayHonor
				Write32(pPlayerDBBaseInfo, 0); //RelaxTime
				Write32(pPlayerDBBaseInfo, 0); //MonthDurationBefore
				Write32(pPlayerDBBaseInfo, 0); //MonthDurationCur
				Write32(pPlayerDBBaseInfo, 0); //Charm
				Write32(pPlayerDBBaseInfo, 0); //DurationGame
				Write32(pPlayerDBBaseInfo, 0); //DanceExp
				Write32(pPlayerDBBaseInfo, 0); //Coupons
				Write32(pPlayerDBBaseInfo, 0); //Admiration
				Write32(pPlayerDBBaseInfo, 0); //LuckMoney
				Write32(pPlayerDBBaseInfo, 0); //TeamWorkExp
				Write32(pPlayerDBBaseInfo, 0); //AchievePoint
				Write32(pPlayerDBBaseInfo, 0); //RegTime
				WriteString(pPlayerDBBaseInfo, 0); //Signature[]
				Write32(pPlayerDBBaseInfo, 0); //LuckyMatchPoint
				Write32(pPlayerDBBaseInfo, 0); //LuckyMatchNum
				Write16(pPlayerDBBaseInfo, 0); //LuckyMatchFirstNum
				Write8(pPlayerDBBaseInfo, 0); //LuckyMatchBestRand
				Write32(pPlayerDBBaseInfo, 0); //LuckyMatchWinNum
				Write32(pPlayerDBBaseInfo, 0); //FizzPointTotal
				Write16(pPlayerDBBaseInfo, 0); //FizzPointDaily
				Write16(pPlayerDBBaseInfo, 0); //FizzPointWeekly
				Write16(pPlayerDBBaseInfo, 0); //FizzPointLastWeek
				Write8(pPlayerDBBaseInfo, 0); //FizzLotteryStatus
				Write32(pPlayerDBBaseInfo, 0); //FizzLastUpdateTime
				Write32(pPlayerDBBaseInfo, 0); //SNSLocaleCode
				Write32(pPlayerDBBaseInfo, 0); //AuctionRightUnlockTime
				Write8(pPlayerDBBaseInfo, 0); //ReserveFlag
				Write32(pPlayerDBBaseInfo, 0); //CurConsumeScore
				Write32(pPlayerDBBaseInfo, 0); //HistoryConsumeScore
				Write8(pPlayerDBBaseInfo, 0); //CrashModeSponsorID
				Write32(pPlayerDBBaseInfo, 0); //Popularity
				Write32(pPlayerDBBaseInfo, 0); //LadderMatchAchievePoint
				Write32(pPlayerDBBaseInfo, 0); //Cash
				Write32(pPlayerDBBaseInfo, 0); //PlayerGPMIdentity
				Write32(pPlayerDBBaseInfo, 0); //PointTotalScore
				WriteUn(pPlayerDBBaseInfo, 0); //totalMapMedalNum
				WriteUn(pPlayerDBBaseInfo, 0); //lastMapMedalNum
				WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalNum
				WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalSeasonId
				WriteUn(pPlayerDBBaseInfo, 0); //lastClearMapMedalTime

				len = pPlayerDBBaseInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			{ //PlayerGuildInfo
				BYTE* pPlayerGuildInfo = pHeroVisbleInfo;
				Write16(pPlayerGuildInfo, 0); //len

				WriteString(pPlayerGuildInfo, 0); //GuildName[]
				Write16(pPlayerGuildInfo, 0); //Duty
				Write32(pPlayerGuildInfo, 0); //GuildID
				Write32(pPlayerGuildInfo, 0); //Right
				Write32(pPlayerGuildInfo, 0); //Medal
				Write32(pPlayerGuildInfo, 0); //Contribute
				WriteString(pPlayerGuildInfo, 0); //DutyTitle[]

				len = pPlayerGuildInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write16(pHeroVisbleInfo, 0); //EquipedItemNum
			for (size_t i = 0; i < n; i++)
			{ //PlayerItemInfo
				BYTE* pPlayerItemInfo = pHeroVisbleInfo;
				Write16(pPlayerItemInfo, 0); //len

				Write32(pPlayerItemInfo, 0); //ItemID
				Write32(pPlayerItemInfo, 0); //ItemNum
				Write32(pPlayerItemInfo, 0); //AvailPeriod
				Write8(pPlayerItemInfo, 0); //Status
				WriteUn(pPlayerItemInfo, 0); //ObtainTime
				Write32(pPlayerItemInfo, 0); //OtherAttribute

				len = pPlayerItemInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write16(pHeroVisbleInfo, 0); //PetNum
			for (size_t i = 0; i < n; i++)
			{ //PetInfo
				BYTE* pPetInfo = pHeroVisbleInfo;
				Write16(pPetInfo, 0); //len

				Write32(pPetInfo, 0); //Uin
				Write32(pPetInfo, 0); //PetId
				WriteString(pPetInfo, 0); //PetName[]
				Write8(pPetInfo, 0); //IsProper
				Write16(pPetInfo, 0); //Level
				Write8(pPetInfo, 0); //Status
				Write16(pPetInfo, 0); //PetSkillNum
				for (size_t i = 0; i < n; i++)
				{ //PetSkillList
					BYTE* pPetSkillList = pPetInfo;
					Write16(pPetSkillList, 0); //len

					Write16(pPetSkillList, 0); //SkillID
					Write8(pPetSkillList, 0); //Status
					Write8(pPetSkillList, 0); //Active
					Write32(pPetSkillList, 0); //Value

					len = pPetSkillList - pPetInfo;
					Set16(pPetInfo, (WORD)len);
					pPetInfo += len;
				}
				Write32(pPetInfo, 0); //StrengLevel

				len = pPetInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			{ //PlayerGuildMatchInfo
				BYTE* pPlayerGuildMatchInfo = pHeroVisbleInfo;
				Write16(pPlayerGuildMatchInfo, 0); //len

				Write32(pPlayerGuildMatchInfo, 0); //SelfPoint
				Write32(pPlayerGuildMatchInfo, 0); //WinNum
				Write32(pPlayerGuildMatchInfo, 0); //TotalNum

				len = pPlayerGuildMatchInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //IsInTopList
			Write8(pHeroVisbleInfo, 0); //LoverRaceOrPro
			Write8(pHeroVisbleInfo, 0); //TmpEffectNum
			Write32(pHeroVisbleInfo, 0); //TmpEffectItems[]
			Write8(pHeroVisbleInfo, 0); //OBState
			Write8(pHeroVisbleInfo, 0); //DebutOrX5
			Write8(pHeroVisbleInfo, 0); //RandKeyFlag
			WriteUn(pHeroVisbleInfo, 0); //VipFlag
			Write8(pHeroVisbleInfo, 0); //HaveAppellation
			for (size_t i = 0; i < n; i++)
			{ //CurAppellation
				BYTE* pCurAppellation = pHeroVisbleInfo;
				Write16(pCurAppellation, 0); //len

				Write8(pCurAppellation, 0); //Type
				Write8(pCurAppellation, 0); //Level
				Write8(pCurAppellation, 0); //Status
				Write8(pCurAppellation, 0); //Difficulty
				Write32(pCurAppellation, 0); //MapId
				Write32(pCurAppellation, 0); //Value

				len = pCurAppellation - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			{ //NobleInfo
				BYTE* pNobleInfo = pHeroVisbleInfo;
				Write16(pNobleInfo, 0); //len

				Write32(pNobleInfo, 0); //NobleID
				Write8(pNobleInfo, 0); //NobleLevel
				Write32(pNobleInfo, 0); //NoblePoint
				Write32(pNobleInfo, 0); //NobleLeftDays

				len = pNobleInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //HasCarryWizard
			for (size_t i = 0; i < n; i++)
			{ //CarryWizardInfo
				BYTE* pCarryWizardInfo = pHeroVisbleInfo;
				Write16(pCarryWizardInfo, 0); //len

				Write16(pCarryWizardInfo, 0); //WizardID
				WriteString(pCarryWizardInfo, 0); //Nickname[]
				Write16(pCarryWizardInfo, 0); //WizardType
				Write8(pCarryWizardInfo, 0); //Order
				Write8(pCarryWizardInfo, 0); //EvolutionBranch
				Write8(pCarryWizardInfo, 0); //IsHuanHua

				len = pCarryWizardInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			{ //GuildVipBaseInfo
				BYTE* pGuildVipBaseInfo = pHeroVisbleInfo;
				Write16(pGuildVipBaseInfo, 0); //len

				Write8(pGuildVipBaseInfo, 0); //GuildVipLevel
				Write32(pGuildVipBaseInfo, 0); //GuildVipPoint

				len = pGuildVipBaseInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write32(pHeroVisbleInfo, 0); //ExFlag
			Write8(pHeroVisbleInfo, 0); //HaveLDMBaseInfo
			for (size_t i = 0; i < n; i++)
			{ //PlayerLDMBaseInfo
				BYTE* pPlayerLDMBaseInfo = pHeroVisbleInfo;
				Write16(pPlayerLDMBaseInfo, 0); //len

				Write8(pPlayerLDMBaseInfo, 0); //Grade
				Write32(pPlayerLDMBaseInfo, 0); //Score
				Write32(pPlayerLDMBaseInfo, 0); //MaxScore
				Write32(pPlayerLDMBaseInfo, 0); //MaxGrade

				len = pPlayerLDMBaseInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //HasWl
			for (size_t i = 0; i < n; i++)
			{ //PlayerWlVisibleInfo
				BYTE* pPlayerWlVisibleInfo = pHeroVisbleInfo;
				Write16(pPlayerWlVisibleInfo, 0); //len

				Write32(pPlayerWlVisibleInfo, 0); //WonderLandID
				WriteString(pPlayerWlVisibleInfo, 0); //WonderLandName[]
				Write16(pPlayerWlVisibleInfo, 0); //WonderLandDuty
				Write8(pPlayerWlVisibleInfo, 0); //SubType
				Write8(pPlayerWlVisibleInfo, 0); //GuildGrade

				len = pPlayerWlVisibleInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //HasLoverVip
			for (size_t i = 0; i < n; i++)
			{ //LoverVipInfo
				BYTE* pLoverVipInfo = pHeroVisbleInfo;
				Write16(pLoverVipInfo, 0); //len

				Write8(pLoverVipInfo, 0); //LoverVipLevel
				Write32(pLoverVipInfo, 0); //LoverVipPoint
				Write8(pLoverVipInfo, 0); //GrowRate

				len = pLoverVipInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //HasBattleModeSkillInfoList
			for (size_t i = 0; i < n; i++)
			{ //BattleModeSkillInfoList
				BYTE* pBattleModeSkillInfoList = pHeroVisbleInfo;
				Write16(pBattleModeSkillInfoList, 0); //len

				Write8(pBattleModeSkillInfoList, 0); //SkillNum
				for (size_t i = 0; i < n; i++)
				{ //SkillInfo
					BYTE* pSkillInfo = pBattleModeSkillInfoList;
					Write16(pSkillInfo, 0); //len

					Write16(pSkillInfo, 0); //SkillId
					Write8(pSkillInfo, 0); //SkillLevel

					len = pSkillInfo - pBattleModeSkillInfoList;
					Set16(pBattleModeSkillInfoList, (WORD)len);
					pBattleModeSkillInfoList += len;
				}

				len = pBattleModeSkillInfoList - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}

			len = pHeroVisbleInfo - pHeroInfo;
			Set16(pHeroInfo, (WORD)len);
			pHeroInfo += len;
		}
		Write16(pHeroInfo, 0); //HeroEnterDelayTime

		len = pHeroInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //RelationHeroCount
	for (size_t i = 0; i < n; i++)
	{ //PlayerRelationInfo
		BYTE* pPlayerRelationInfo = p;
		Write16(pPlayerRelationInfo, 0); //len

		Write32(pPlayerRelationInfo, 0); //SrcUin
		Write32(pPlayerRelationInfo, 0); //RelationFlag
		Write32(pPlayerRelationInfo, 0); //RelationUin
		WriteString(pPlayerRelationInfo, 0); //RelationNickname[]
		Write32(pPlayerRelationInfo, 0); //EngageTime
		Write32(pPlayerRelationInfo, 0); //NextCanBookingTimeLimit
		Write32(pPlayerRelationInfo, 0); //BeginHoneyMoonTime
		Write32(pPlayerRelationInfo, 0); //EndHoneyMoonTime
		Write8(pPlayerRelationInfo, 0); //EngageFlag

		len = pPlayerRelationInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //KartNum
	for (size_t i = 0; i < n; i++)
	{ //KartRefitInfo
		BYTE* pKartRefitInfo = p;
		Write16(pKartRefitInfo, 0); //len

		Write32(pKartRefitInfo, 0); //Uin
		Write32(pKartRefitInfo, 0); //KartId
		Write32(pKartRefitInfo, 0); //RefitCout
		Write16(pKartRefitInfo, 0); //MaxFlags
		Write16(pKartRefitInfo, 0); //WWeight
		Write16(pKartRefitInfo, 0); //SpeedWeight
		Write16(pKartRefitInfo, 0); //JetWeight
		Write16(pKartRefitInfo, 0); //SJetWeight
		Write16(pKartRefitInfo, 0); //AccuWeight
		Write32(pKartRefitInfo, 0); //ShapeRefitCount
		Write32(pKartRefitInfo, 0); //KartHeadRefitItemID
		Write32(pKartRefitInfo, 0); //KartTailRefitItemID
		Write32(pKartRefitInfo, 0); //KartFlankRefitItemID
		Write32(pKartRefitInfo, 0); //KartTireRefitItemID

		len = pKartRefitInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //HammerCount
	for (size_t i = 0; i < n; i++)
	{ //EquipedHammer
		BYTE* pEquipedHammer = p;
		Write16(pEquipedHammer, 0); //len

		Write32(pEquipedHammer, 0); //EquipedHammerID

		len = pEquipedHammer - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //StealPigCount
	for (size_t i = 0; i < n; i++)
	{ //StealPig
		BYTE* pStealPig = p;
		Write16(pStealPig, 0); //len

		Write8(pStealPig, 0); //Status
		Write8(pStealPig, 0); //PigPos
		Write32(pStealPig, 0); //ItemID

		len = pStealPig - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //MaxHeroNumInRoom

	len = p - buf;
	SendToClient(Client, 352, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyEnterOutdoor(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ChatRoomID
	Write16(p, 0); //SceneID
	Write32(p, 0); //Time
	{ //HeroInfo
		BYTE* pHeroInfo = p;
		Write16(pHeroInfo, 0); //len

		{ //HeroMoveInfo
			BYTE* pHeroMoveInfo = pHeroInfo;
			Write16(pHeroMoveInfo, 0); //len

			Write32(pHeroMoveInfo, 0); //Uin
			Write8(pHeroMoveInfo, 0); //WalkStatue
			Write32(pHeroMoveInfo, 0); //Posion[]
			Write32(pHeroMoveInfo, 0); //Ori[]
			Write32(pHeroMoveInfo, 0); //AttachUin
			Write32(pHeroMoveInfo, 0); //WalkExtState

			len = pHeroMoveInfo - pHeroInfo;
			Set16(pHeroInfo, (WORD)len);
			pHeroInfo += len;
		}
		Write32(pHeroInfo, 0); //NextPoint
		Write16(pHeroInfo, 0); //PathLen
		Write32(pHeroInfo, 0); //Path[]
		{ //HeroVisbleInfo
			BYTE* pHeroVisbleInfo = pHeroInfo;
			Write16(pHeroVisbleInfo, 0); //len

			WriteUn(pHeroVisbleInfo, 0); //Uin
			WriteUn(pHeroVisbleInfo, 0); //Identity
			Write8(pHeroVisbleInfo, 0); //SeatID
			Write8(pHeroVisbleInfo, 0); //TeamID
			Write16(pHeroVisbleInfo, 0); //PlayerID
			Write8(pHeroVisbleInfo, 0); //Status
			{ //PlayerDBBaseInfo
				BYTE* pPlayerDBBaseInfo = pHeroVisbleInfo;
				Write16(pPlayerDBBaseInfo, 0); //len

				WriteString(pPlayerDBBaseInfo, 0); //Nickname[]
				Write8(pPlayerDBBaseInfo, 0); //Gender
				Write8(pPlayerDBBaseInfo, 0); //Country
				Write32(pPlayerDBBaseInfo, 0); //License
				WriteUn(pPlayerDBBaseInfo, 0); //Experience
				Write32(pPlayerDBBaseInfo, 0); //SuperMoney
				Write32(pPlayerDBBaseInfo, 0); //Money
				WriteUn(pPlayerDBBaseInfo, 0); //WinNum
				Write32(pPlayerDBBaseInfo, 0); //SecondNum
				Write32(pPlayerDBBaseInfo, 0); //ThirdNum
				WriteUn(pPlayerDBBaseInfo, 0); //TotalNum
				Write32(pPlayerDBBaseInfo, 0); //CurHonor
				Write32(pPlayerDBBaseInfo, 0); //TotalHonor
				Write32(pPlayerDBBaseInfo, 0); //TodayHonor
				Write32(pPlayerDBBaseInfo, 0); //RelaxTime
				Write32(pPlayerDBBaseInfo, 0); //MonthDurationBefore
				Write32(pPlayerDBBaseInfo, 0); //MonthDurationCur
				Write32(pPlayerDBBaseInfo, 0); //Charm
				Write32(pPlayerDBBaseInfo, 0); //DurationGame
				Write32(pPlayerDBBaseInfo, 0); //DanceExp
				Write32(pPlayerDBBaseInfo, 0); //Coupons
				Write32(pPlayerDBBaseInfo, 0); //Admiration
				Write32(pPlayerDBBaseInfo, 0); //LuckMoney
				Write32(pPlayerDBBaseInfo, 0); //TeamWorkExp
				Write32(pPlayerDBBaseInfo, 0); //AchievePoint
				Write32(pPlayerDBBaseInfo, 0); //RegTime
				WriteString(pPlayerDBBaseInfo, 0); //Signature[]
				Write32(pPlayerDBBaseInfo, 0); //LuckyMatchPoint
				Write32(pPlayerDBBaseInfo, 0); //LuckyMatchNum
				Write16(pPlayerDBBaseInfo, 0); //LuckyMatchFirstNum
				Write8(pPlayerDBBaseInfo, 0); //LuckyMatchBestRand
				Write32(pPlayerDBBaseInfo, 0); //LuckyMatchWinNum
				Write32(pPlayerDBBaseInfo, 0); //FizzPointTotal
				Write16(pPlayerDBBaseInfo, 0); //FizzPointDaily
				Write16(pPlayerDBBaseInfo, 0); //FizzPointWeekly
				Write16(pPlayerDBBaseInfo, 0); //FizzPointLastWeek
				Write8(pPlayerDBBaseInfo, 0); //FizzLotteryStatus
				Write32(pPlayerDBBaseInfo, 0); //FizzLastUpdateTime
				Write32(pPlayerDBBaseInfo, 0); //SNSLocaleCode
				Write32(pPlayerDBBaseInfo, 0); //AuctionRightUnlockTime
				Write8(pPlayerDBBaseInfo, 0); //ReserveFlag
				Write32(pPlayerDBBaseInfo, 0); //CurConsumeScore
				Write32(pPlayerDBBaseInfo, 0); //HistoryConsumeScore
				Write8(pPlayerDBBaseInfo, 0); //CrashModeSponsorID
				Write32(pPlayerDBBaseInfo, 0); //Popularity
				Write32(pPlayerDBBaseInfo, 0); //LadderMatchAchievePoint
				Write32(pPlayerDBBaseInfo, 0); //Cash
				Write32(pPlayerDBBaseInfo, 0); //PlayerGPMIdentity
				Write32(pPlayerDBBaseInfo, 0); //PointTotalScore
				WriteUn(pPlayerDBBaseInfo, 0); //totalMapMedalNum
				WriteUn(pPlayerDBBaseInfo, 0); //lastMapMedalNum
				WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalNum
				WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalSeasonId
				WriteUn(pPlayerDBBaseInfo, 0); //lastClearMapMedalTime

				len = pPlayerDBBaseInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			{ //PlayerGuildInfo
				BYTE* pPlayerGuildInfo = pHeroVisbleInfo;
				Write16(pPlayerGuildInfo, 0); //len

				WriteString(pPlayerGuildInfo, 0); //GuildName[]
				Write16(pPlayerGuildInfo, 0); //Duty
				Write32(pPlayerGuildInfo, 0); //GuildID
				Write32(pPlayerGuildInfo, 0); //Right
				Write32(pPlayerGuildInfo, 0); //Medal
				Write32(pPlayerGuildInfo, 0); //Contribute
				WriteString(pPlayerGuildInfo, 0); //DutyTitle[]

				len = pPlayerGuildInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write16(pHeroVisbleInfo, 0); //EquipedItemNum
			for (size_t i = 0; i < n; i++)
			{ //PlayerItemInfo
				BYTE* pPlayerItemInfo = pHeroVisbleInfo;
				Write16(pPlayerItemInfo, 0); //len

				Write32(pPlayerItemInfo, 0); //ItemID
				Write32(pPlayerItemInfo, 0); //ItemNum
				Write32(pPlayerItemInfo, 0); //AvailPeriod
				Write8(pPlayerItemInfo, 0); //Status
				WriteUn(pPlayerItemInfo, 0); //ObtainTime
				Write32(pPlayerItemInfo, 0); //OtherAttribute

				len = pPlayerItemInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write16(pHeroVisbleInfo, 0); //PetNum
			for (size_t i = 0; i < n; i++)
			{ //PetInfo
				BYTE* pPetInfo = pHeroVisbleInfo;
				Write16(pPetInfo, 0); //len

				Write32(pPetInfo, 0); //Uin
				Write32(pPetInfo, 0); //PetId
				WriteString(pPetInfo, 0); //PetName[]
				Write8(pPetInfo, 0); //IsProper
				Write16(pPetInfo, 0); //Level
				Write8(pPetInfo, 0); //Status
				Write16(pPetInfo, 0); //PetSkillNum
				for (size_t i = 0; i < n; i++)
				{ //PetSkillList
					BYTE* pPetSkillList = pPetInfo;
					Write16(pPetSkillList, 0); //len

					Write16(pPetSkillList, 0); //SkillID
					Write8(pPetSkillList, 0); //Status
					Write8(pPetSkillList, 0); //Active
					Write32(pPetSkillList, 0); //Value

					len = pPetSkillList - pPetInfo;
					Set16(pPetInfo, (WORD)len);
					pPetInfo += len;
				}
				Write32(pPetInfo, 0); //StrengLevel

				len = pPetInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			{ //PlayerGuildMatchInfo
				BYTE* pPlayerGuildMatchInfo = pHeroVisbleInfo;
				Write16(pPlayerGuildMatchInfo, 0); //len

				Write32(pPlayerGuildMatchInfo, 0); //SelfPoint
				Write32(pPlayerGuildMatchInfo, 0); //WinNum
				Write32(pPlayerGuildMatchInfo, 0); //TotalNum

				len = pPlayerGuildMatchInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //IsInTopList
			Write8(pHeroVisbleInfo, 0); //LoverRaceOrPro
			Write8(pHeroVisbleInfo, 0); //TmpEffectNum
			Write32(pHeroVisbleInfo, 0); //TmpEffectItems[]
			Write8(pHeroVisbleInfo, 0); //OBState
			Write8(pHeroVisbleInfo, 0); //DebutOrX5
			Write8(pHeroVisbleInfo, 0); //RandKeyFlag
			WriteUn(pHeroVisbleInfo, 0); //VipFlag
			Write8(pHeroVisbleInfo, 0); //HaveAppellation
			for (size_t i = 0; i < n; i++)
			{ //CurAppellation
				BYTE* pCurAppellation = pHeroVisbleInfo;
				Write16(pCurAppellation, 0); //len

				Write8(pCurAppellation, 0); //Type
				Write8(pCurAppellation, 0); //Level
				Write8(pCurAppellation, 0); //Status
				Write8(pCurAppellation, 0); //Difficulty
				Write32(pCurAppellation, 0); //MapId
				Write32(pCurAppellation, 0); //Value

				len = pCurAppellation - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			{ //NobleInfo
				BYTE* pNobleInfo = pHeroVisbleInfo;
				Write16(pNobleInfo, 0); //len

				Write32(pNobleInfo, 0); //NobleID
				Write8(pNobleInfo, 0); //NobleLevel
				Write32(pNobleInfo, 0); //NoblePoint
				Write32(pNobleInfo, 0); //NobleLeftDays

				len = pNobleInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //HasCarryWizard
			for (size_t i = 0; i < n; i++)
			{ //CarryWizardInfo
				BYTE* pCarryWizardInfo = pHeroVisbleInfo;
				Write16(pCarryWizardInfo, 0); //len

				Write16(pCarryWizardInfo, 0); //WizardID
				WriteString(pCarryWizardInfo, 0); //Nickname[]
				Write16(pCarryWizardInfo, 0); //WizardType
				Write8(pCarryWizardInfo, 0); //Order
				Write8(pCarryWizardInfo, 0); //EvolutionBranch
				Write8(pCarryWizardInfo, 0); //IsHuanHua

				len = pCarryWizardInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			{ //GuildVipBaseInfo
				BYTE* pGuildVipBaseInfo = pHeroVisbleInfo;
				Write16(pGuildVipBaseInfo, 0); //len

				Write8(pGuildVipBaseInfo, 0); //GuildVipLevel
				Write32(pGuildVipBaseInfo, 0); //GuildVipPoint

				len = pGuildVipBaseInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write32(pHeroVisbleInfo, 0); //ExFlag
			Write8(pHeroVisbleInfo, 0); //HaveLDMBaseInfo
			for (size_t i = 0; i < n; i++)
			{ //PlayerLDMBaseInfo
				BYTE* pPlayerLDMBaseInfo = pHeroVisbleInfo;
				Write16(pPlayerLDMBaseInfo, 0); //len

				Write8(pPlayerLDMBaseInfo, 0); //Grade
				Write32(pPlayerLDMBaseInfo, 0); //Score
				Write32(pPlayerLDMBaseInfo, 0); //MaxScore
				Write32(pPlayerLDMBaseInfo, 0); //MaxGrade

				len = pPlayerLDMBaseInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //HasWl
			for (size_t i = 0; i < n; i++)
			{ //PlayerWlVisibleInfo
				BYTE* pPlayerWlVisibleInfo = pHeroVisbleInfo;
				Write16(pPlayerWlVisibleInfo, 0); //len

				Write32(pPlayerWlVisibleInfo, 0); //WonderLandID
				WriteString(pPlayerWlVisibleInfo, 0); //WonderLandName[]
				Write16(pPlayerWlVisibleInfo, 0); //WonderLandDuty
				Write8(pPlayerWlVisibleInfo, 0); //SubType
				Write8(pPlayerWlVisibleInfo, 0); //GuildGrade

				len = pPlayerWlVisibleInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //HasLoverVip
			for (size_t i = 0; i < n; i++)
			{ //LoverVipInfo
				BYTE* pLoverVipInfo = pHeroVisbleInfo;
				Write16(pLoverVipInfo, 0); //len

				Write8(pLoverVipInfo, 0); //LoverVipLevel
				Write32(pLoverVipInfo, 0); //LoverVipPoint
				Write8(pLoverVipInfo, 0); //GrowRate

				len = pLoverVipInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //HasBattleModeSkillInfoList
			for (size_t i = 0; i < n; i++)
			{ //BattleModeSkillInfoList
				BYTE* pBattleModeSkillInfoList = pHeroVisbleInfo;
				Write16(pBattleModeSkillInfoList, 0); //len

				Write8(pBattleModeSkillInfoList, 0); //SkillNum
				for (size_t i = 0; i < n; i++)
				{ //SkillInfo
					BYTE* pSkillInfo = pBattleModeSkillInfoList;
					Write16(pSkillInfo, 0); //len

					Write16(pSkillInfo, 0); //SkillId
					Write8(pSkillInfo, 0); //SkillLevel

					len = pSkillInfo - pBattleModeSkillInfoList;
					Set16(pBattleModeSkillInfoList, (WORD)len);
					pBattleModeSkillInfoList += len;
				}

				len = pBattleModeSkillInfoList - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}

			len = pHeroVisbleInfo - pHeroInfo;
			Set16(pHeroInfo, (WORD)len);
			pHeroInfo += len;
		}
		Write16(pHeroInfo, 0); //HeroEnterDelayTime

		len = pHeroInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //PlayerRelationInfo
		BYTE* pPlayerRelationInfo = p;
		Write16(pPlayerRelationInfo, 0); //len

		Write32(pPlayerRelationInfo, 0); //SrcUin
		Write32(pPlayerRelationInfo, 0); //RelationFlag
		Write32(pPlayerRelationInfo, 0); //RelationUin
		WriteString(pPlayerRelationInfo, 0); //RelationNickname[]
		Write32(pPlayerRelationInfo, 0); //EngageTime
		Write32(pPlayerRelationInfo, 0); //NextCanBookingTimeLimit
		Write32(pPlayerRelationInfo, 0); //BeginHoneyMoonTime
		Write32(pPlayerRelationInfo, 0); //EndHoneyMoonTime
		Write8(pPlayerRelationInfo, 0); //EngageFlag

		len = pPlayerRelationInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //KartNum
	for (size_t i = 0; i < n; i++)
	{ //KartRefitInfo
		BYTE* pKartRefitInfo = p;
		Write16(pKartRefitInfo, 0); //len

		Write32(pKartRefitInfo, 0); //Uin
		Write32(pKartRefitInfo, 0); //KartId
		Write32(pKartRefitInfo, 0); //RefitCout
		Write16(pKartRefitInfo, 0); //MaxFlags
		Write16(pKartRefitInfo, 0); //WWeight
		Write16(pKartRefitInfo, 0); //SpeedWeight
		Write16(pKartRefitInfo, 0); //JetWeight
		Write16(pKartRefitInfo, 0); //SJetWeight
		Write16(pKartRefitInfo, 0); //AccuWeight
		Write32(pKartRefitInfo, 0); //ShapeRefitCount
		Write32(pKartRefitInfo, 0); //KartHeadRefitItemID
		Write32(pKartRefitInfo, 0); //KartTailRefitItemID
		Write32(pKartRefitInfo, 0); //KartFlankRefitItemID
		Write32(pKartRefitInfo, 0); //KartTireRefitItemID

		len = pKartRefitInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //StealPig
		BYTE* pStealPig = p;
		Write16(pStealPig, 0); //len

		Write8(pStealPig, 0); //Status
		Write8(pStealPig, 0); //PigPos
		Write32(pStealPig, 0); //ItemID

		len = pStealPig - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 852, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestChangeHammerStatus(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	{ //EquipedHammer
		BYTE* pEquipedHammer = p;
		len = Read16(pEquipedHammer);

		int EquipedHammerID = Read32(pEquipedHammer);

		p += len;
	}

}

void ResponseChangeHammerStatus(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	{ //EquipedHammer
		BYTE* pEquipedHammer = p;
		Write16(pEquipedHammer, 0); //len

		Write32(pEquipedHammer, 0); //EquipedHammerID

		len = pEquipedHammer - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 359, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyChangeHammerStatus(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //SrcUin
	Write32(p, 0); //Time
	{ //EquipedHammer
		BYTE* pEquipedHammer = p;
		Write16(pEquipedHammer, 0); //len

		Write32(pEquipedHammer, 0); //EquipedHammerID

		len = pEquipedHammer - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 861, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestLeaveOutdoor(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseLeaveOutdoor(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 353, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyLeaveOutdoor(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //Time

	len = p - buf;
	SendToClient(Client, 853, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestExchangeLoverMode(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	UCHAR SrcTeam = Read8(p);
	UCHAR SrcMode = Read8(p);
	Un DstUin = ReadUn(p);

}

void NotifyRequestExchangeLoverMode(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //Uin
	WriteUn(p, 0); //SrcUin
	Write8(p, 0); //SrcTeam
	Write8(p, 0); //SrcMode

	len = p - buf;
	SendToClient(Client, 302, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void ResponseExchangeLoverMode(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	WriteUn(p, 0); //SrcUin
	Write8(p, 0); //SrcTeam
	Write8(p, 0); //SrcMode

	len = p - buf;
	SendToClient(Client, 303, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyExchangeLoverMode(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //Team
	WriteUn(p, 0); //SrcUin
	Write8(p, 0); //SrcMode
	WriteUn(p, 0); //DstUin
	Write8(p, 0); //DstMode

	len = p - buf;
	SendToClient(Client, 304, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestHeroPos(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	{ //HeroMoveInfo
		BYTE* pHeroMoveInfo = p;
		len = Read16(pHeroMoveInfo);

		UINT Uin = Read32(pHeroMoveInfo);
		char WalkStatue = Read8(pHeroMoveInfo);
		int[] Posion[] = Read32(pHeroMoveInfo);
		int[] Ori[] = Read32(pHeroMoveInfo);
		UINT AttachUin = Read32(pHeroMoveInfo);
		int WalkExtState = Read32(pHeroMoveInfo);

		p += len;
	}
	int CellID = Read32(p);

}

void NotifySynAllHeroPos(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //HeroCount
	for (size_t i = 0; i < n; i++)
	{ //HeroMoveInfo
		BYTE* pHeroMoveInfo = p;
		Write16(pHeroMoveInfo, 0); //len

		Write32(pHeroMoveInfo, 0); //Uin
		Write8(pHeroMoveInfo, 0); //WalkStatue
		Write32(pHeroMoveInfo, 0); //Posion[]
		Write32(pHeroMoveInfo, 0); //Ori[]
		Write32(pHeroMoveInfo, 0); //AttachUin
		Write32(pHeroMoveInfo, 0); //WalkExtState

		len = pHeroMoveInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //Time

	len = p - buf;
	SendToClient(Client, 850, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestHeroMove(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	{ //HeroMoveInfo
		BYTE* pHeroMoveInfo = p;
		len = Read16(pHeroMoveInfo);

		UINT Uin = Read32(pHeroMoveInfo);
		char WalkStatue = Read8(pHeroMoveInfo);
		int[] Posion[] = Read32(pHeroMoveInfo);
		int[] Ori[] = Read32(pHeroMoveInfo);
		UINT AttachUin = Read32(pHeroMoveInfo);
		int WalkExtState = Read32(pHeroMoveInfo);

		p += len;
	}
	int NextPoint = Read32(p);
	short PathLen = Read16(p);
	int[] Path[] = Read32(p);
	int CurCellID = Read32(p);

}

void NotifyHeroMove(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	{ //HeroMoveInfo
		BYTE* pHeroMoveInfo = p;
		Write16(pHeroMoveInfo, 0); //len

		Write32(pHeroMoveInfo, 0); //Uin
		Write8(pHeroMoveInfo, 0); //WalkStatue
		Write32(pHeroMoveInfo, 0); //Posion[]
		Write32(pHeroMoveInfo, 0); //Ori[]
		Write32(pHeroMoveInfo, 0); //AttachUin
		Write32(pHeroMoveInfo, 0); //WalkExtState

		len = pHeroMoveInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //NextPoint
	Write16(p, 0); //PathLen
	Write32(p, 0); //Path[]
	Write32(p, 0); //Time

	len = p - buf;
	SendToClient(Client, 851, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyHeroLevelup(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //Time
	Write16(p, 0); //Level
	Write32(p, 0); //NextLevelExperence

	len = p - buf;
	SendToClient(Client, 854, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyRelaxSystemMsg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //MsgType
	Write16(p, 0); //AttachLen
	Write32(p, 0); //ContinuanceTime
	Write32(p, 0); //Flag

	len = p - buf;
	SendToClient(Client, 860, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestHeroDoAction(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	short ActionID = Read16(p);

}

void ResponseHeroDoAction(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 355, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyHeroDoAction(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //Time
	Write16(p, 0); //ActionID

	len = p - buf;
	SendToClient(Client, 855, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestKartPetDoAction(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	short ActionID = Read16(p);

}

void NotifyKartPetDoAction(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //Time
	Write16(p, 0); //ActionID

	len = p - buf;
	SendToClient(Client, 349, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyPlayerDoAction(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //Time
	Write16(p, 0); //ActionID

	len = p - buf;
	SendToClient(Client, 856, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestChangeIdentity(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	char SetOrUnset = Read8(p);
	char IsExRightFlag = Read8(p);
	UINT IdentityFlag = Read32(p);
	UINT BeginBit = Read32(p);
	UINT EndBit = Read32(p);
	UCHAR ExRightFlag[] = Read8(p);

}

void ResponseChangeIdentity(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //SetOrUnset
	Write8(p, 0); //IsExRightFlag
	Write32(p, 0); //IdentityFlag
	WriteUn(p, 0); //Identity
	Write8(p, 0); //ExRightFlag[]

	len = p - buf;
	SendToClient(Client, 131, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestTransferByTCP(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	char Ver = Read8(p);
	int Seq = Read32(p);
	char DstNum = Read8(p);
	for (size_t i = 0; i < n; i++)
	{ //DstInfo
		BYTE* pDstInfo = p;
		len = Read16(pDstInfo);

		short PlayerID = Read16(pDstInfo);
		UINT Uin = Read32(pDstInfo);

		p += len;
	}
	short BuffLen = Read16(p);

}

void NotifyTranferByTCP(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //SrcUin
	Write16(p, 0); //SrcPlayerID
	Write8(p, 0); //Ver
	Write32(p, 0); //Seq
	Write16(p, 0); //Bufflen

	len = p - buf;
	SendToClient(Client, 560, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestModifyNickname(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	char[] NewNickname[] = ReadString(p);

}

void ResponseModifyNickname(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	WriteString(p, 0); //NewNickname[]
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 154, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyBeginModifyNickname(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //ItemID

	len = p - buf;
	SendToClient(Client, 561, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestUseHammer(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int ItemID = Read32(p);
	UINT DstUin = Read32(p);
	int SrcWeight = Read32(p);
	int DstWeight = Read32(p);
	bool DstType = Read8(p);
	UINT DistToTgt = Read32(p);
	UCHAR MsgSeq = Read8(p);
	int[] Position[] = Read32(p);
	int CellID = Read32(p);

}

void ResponseUseHammer(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //ItemID
	Write32(p, 0); //DstUin
	Write8(p, 0); //ReasonLen
	Write8(p, 0); //DstType
	Write8(p, 0); //HasPKAbilityInfo
	for (size_t i = 0; i < n; i++)
	{ //PKAbilityInfo
		BYTE* pPKAbilityInfo = p;
		Write16(pPKAbilityInfo, 0); //len

		Write16(pPKAbilityInfo, 0); //SrcPKAbility
		Write8(pPKAbilityInfo, 0); //IsSrcPKStrong
		Write16(pPKAbilityInfo, 0); //DstPKAbility
		Write8(pPKAbilityInfo, 0); //IsDstPKStrong

		len = pPKAbilityInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 358, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyMatchInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //IsMatchOpen
	Write32(p, 0); //MaxMatchNum
	Write8(p, 0); //InfoLen
	{ //MatchRule
		BYTE* pMatchRule = p;
		Write16(pMatchRule, 0); //len

		Write8(pMatchRule, 0); //SpeedMode
		Write8(pMatchRule, 0); //PropMode
		Write32(pMatchRule, 0); //SpeedTickedID
		Write32(pMatchRule, 0); //PropTickedID
		Write32(pMatchRule, 0); //ReclearItem
		WriteString(pMatchRule, 0); //IntroAddress[]
		WriteString(pMatchRule, 0); //QueryAddress[]
		Write8(pMatchRule, 0); //EquitNum
		for (size_t i = 0; i < n; i++)
		{ //EquipInfo
			BYTE* pEquipInfo = pMatchRule;
			Write16(pEquipInfo, 0); //len

			Write32(pEquipInfo, 0); //ItemID

			len = pEquipInfo - pMatchRule;
			Set16(pMatchRule, (WORD)len);
			pMatchRule += len;
		}
		Write8(pMatchRule, 0); //PRMode
		Write32(pMatchRule, 0); //PRTicketID

		len = pMatchRule - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //CtrlType
	Write8(p, 0); //NeedMapNum
	Write32(p, 0); //MapID[]

	len = p - buf;
	SendToClient(Client, 563, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestEnterMatchGame(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int GameType = Read32(p);
	int CtrlType = Read32(p);

}

void ResponseEnterMatchGame(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 155, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyMatchRaceOver(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //AwardTime
	for (size_t i = 0; i < n; i++)
	{ //RaceScore
		BYTE* pRaceScore = p;
		Write16(pRaceScore, 0); //len

		WriteUn(pRaceScore, 0); //Uin
		WriteUn(pRaceScore, 0); //FinTime
		Write32(pRaceScore, 0); //GameType
		Write32(pRaceScore, 0); //PointInc
		Write32(pRaceScore, 0); //TotalPoint
		Write32(pRaceScore, 0); //ExpInc
		Write32(pRaceScore, 0); //TotalExp
		Write32(pRaceScore, 0); //SuperMoneyInc
		Write32(pRaceScore, 0); //TotalSuperMoney
		Write32(pRaceScore, 0); //CoolMoneyInc
		Write32(pRaceScore, 0); //TotalCoolMoney
		Write32(pRaceScore, 0); //PropPoint
		Write32(pRaceScore, 0); //RacePoint
		Write32(pRaceScore, 0); //PRPoint

		len = pRaceScore - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //InfoLen

	len = p - buf;
	SendToClient(Client, 564, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyMatchPlayerInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //BaseMode
	Write32(p, 0); //SubMode
	Write8(p, 0); //PlayerCount
	for (size_t i = 0; i < n; i++)
	{ //PlayerRoomVisibleInfo
		BYTE* pPlayerRoomVisibleInfo = p;
		Write16(pPlayerRoomVisibleInfo, 0); //len

		WriteUn(pPlayerRoomVisibleInfo, 0); //Uin
		WriteUn(pPlayerRoomVisibleInfo, 0); //Identity
		Write8(pPlayerRoomVisibleInfo, 0); //SeatID
		Write8(pPlayerRoomVisibleInfo, 0); //TeamID
		Write16(pPlayerRoomVisibleInfo, 0); //PlayerID
		Write8(pPlayerRoomVisibleInfo, 0); //Status
		{ //PlayerDBBaseInfo
			BYTE* pPlayerDBBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerDBBaseInfo, 0); //len

			WriteString(pPlayerDBBaseInfo, 0); //Nickname[]
			Write8(pPlayerDBBaseInfo, 0); //Gender
			Write8(pPlayerDBBaseInfo, 0); //Country
			Write32(pPlayerDBBaseInfo, 0); //License
			WriteUn(pPlayerDBBaseInfo, 0); //Experience
			Write32(pPlayerDBBaseInfo, 0); //SuperMoney
			Write32(pPlayerDBBaseInfo, 0); //Money
			WriteUn(pPlayerDBBaseInfo, 0); //WinNum
			Write32(pPlayerDBBaseInfo, 0); //SecondNum
			Write32(pPlayerDBBaseInfo, 0); //ThirdNum
			WriteUn(pPlayerDBBaseInfo, 0); //TotalNum
			Write32(pPlayerDBBaseInfo, 0); //CurHonor
			Write32(pPlayerDBBaseInfo, 0); //TotalHonor
			Write32(pPlayerDBBaseInfo, 0); //TodayHonor
			Write32(pPlayerDBBaseInfo, 0); //RelaxTime
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationBefore
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationCur
			Write32(pPlayerDBBaseInfo, 0); //Charm
			Write32(pPlayerDBBaseInfo, 0); //DurationGame
			Write32(pPlayerDBBaseInfo, 0); //DanceExp
			Write32(pPlayerDBBaseInfo, 0); //Coupons
			Write32(pPlayerDBBaseInfo, 0); //Admiration
			Write32(pPlayerDBBaseInfo, 0); //LuckMoney
			Write32(pPlayerDBBaseInfo, 0); //TeamWorkExp
			Write32(pPlayerDBBaseInfo, 0); //AchievePoint
			Write32(pPlayerDBBaseInfo, 0); //RegTime
			WriteString(pPlayerDBBaseInfo, 0); //Signature[]
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchPoint
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchNum
			Write16(pPlayerDBBaseInfo, 0); //LuckyMatchFirstNum
			Write8(pPlayerDBBaseInfo, 0); //LuckyMatchBestRand
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchWinNum
			Write32(pPlayerDBBaseInfo, 0); //FizzPointTotal
			Write16(pPlayerDBBaseInfo, 0); //FizzPointDaily
			Write16(pPlayerDBBaseInfo, 0); //FizzPointWeekly
			Write16(pPlayerDBBaseInfo, 0); //FizzPointLastWeek
			Write8(pPlayerDBBaseInfo, 0); //FizzLotteryStatus
			Write32(pPlayerDBBaseInfo, 0); //FizzLastUpdateTime
			Write32(pPlayerDBBaseInfo, 0); //SNSLocaleCode
			Write32(pPlayerDBBaseInfo, 0); //AuctionRightUnlockTime
			Write8(pPlayerDBBaseInfo, 0); //ReserveFlag
			Write32(pPlayerDBBaseInfo, 0); //CurConsumeScore
			Write32(pPlayerDBBaseInfo, 0); //HistoryConsumeScore
			Write8(pPlayerDBBaseInfo, 0); //CrashModeSponsorID
			Write32(pPlayerDBBaseInfo, 0); //Popularity
			Write32(pPlayerDBBaseInfo, 0); //LadderMatchAchievePoint
			Write32(pPlayerDBBaseInfo, 0); //Cash
			Write32(pPlayerDBBaseInfo, 0); //PlayerGPMIdentity
			Write32(pPlayerDBBaseInfo, 0); //PointTotalScore
			WriteUn(pPlayerDBBaseInfo, 0); //totalMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //lastMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalSeasonId
			WriteUn(pPlayerDBBaseInfo, 0); //lastClearMapMedalTime

			len = pPlayerDBBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //PlayerGuildInfo
			BYTE* pPlayerGuildInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerGuildInfo, 0); //len

			WriteString(pPlayerGuildInfo, 0); //GuildName[]
			Write16(pPlayerGuildInfo, 0); //Duty
			Write32(pPlayerGuildInfo, 0); //GuildID
			Write32(pPlayerGuildInfo, 0); //Right
			Write32(pPlayerGuildInfo, 0); //Medal
			Write32(pPlayerGuildInfo, 0); //Contribute
			WriteString(pPlayerGuildInfo, 0); //DutyTitle[]

			len = pPlayerGuildInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write16(pPlayerRoomVisibleInfo, 0); //EquipedItemNum
		for (size_t i = 0; i < n; i++)
		{ //PlayerItemInfo
			BYTE* pPlayerItemInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerItemInfo, 0); //len

			Write32(pPlayerItemInfo, 0); //ItemID
			Write32(pPlayerItemInfo, 0); //ItemNum
			Write32(pPlayerItemInfo, 0); //AvailPeriod
			Write8(pPlayerItemInfo, 0); //Status
			WriteUn(pPlayerItemInfo, 0); //ObtainTime
			Write32(pPlayerItemInfo, 0); //OtherAttribute

			len = pPlayerItemInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write16(pPlayerRoomVisibleInfo, 0); //PetNum
		for (size_t i = 0; i < n; i++)
		{ //PetInfo
			BYTE* pPetInfo = pPlayerRoomVisibleInfo;
			Write16(pPetInfo, 0); //len

			Write32(pPetInfo, 0); //Uin
			Write32(pPetInfo, 0); //PetId
			WriteString(pPetInfo, 0); //PetName[]
			Write8(pPetInfo, 0); //IsProper
			Write16(pPetInfo, 0); //Level
			Write8(pPetInfo, 0); //Status
			Write16(pPetInfo, 0); //PetSkillNum
			for (size_t i = 0; i < n; i++)
			{ //PetSkillList
				BYTE* pPetSkillList = pPetInfo;
				Write16(pPetSkillList, 0); //len

				Write16(pPetSkillList, 0); //SkillID
				Write8(pPetSkillList, 0); //Status
				Write8(pPetSkillList, 0); //Active
				Write32(pPetSkillList, 0); //Value

				len = pPetSkillList - pPetInfo;
				Set16(pPetInfo, (WORD)len);
				pPetInfo += len;
			}
			Write32(pPetInfo, 0); //StrengLevel

			len = pPetInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //PlayerGuildMatchInfo
			BYTE* pPlayerGuildMatchInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerGuildMatchInfo, 0); //len

			Write32(pPlayerGuildMatchInfo, 0); //SelfPoint
			Write32(pPlayerGuildMatchInfo, 0); //WinNum
			Write32(pPlayerGuildMatchInfo, 0); //TotalNum

			len = pPlayerGuildMatchInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //IsInTopList
		Write8(pPlayerRoomVisibleInfo, 0); //LoverRaceOrPro
		Write8(pPlayerRoomVisibleInfo, 0); //TmpEffectNum
		Write32(pPlayerRoomVisibleInfo, 0); //TmpEffectItems[]
		Write8(pPlayerRoomVisibleInfo, 0); //OBState
		Write8(pPlayerRoomVisibleInfo, 0); //DebutOrX5
		Write8(pPlayerRoomVisibleInfo, 0); //RandKeyFlag
		WriteUn(pPlayerRoomVisibleInfo, 0); //VipFlag
		Write8(pPlayerRoomVisibleInfo, 0); //HaveAppellation
		for (size_t i = 0; i < n; i++)
		{ //CurAppellation
			BYTE* pCurAppellation = pPlayerRoomVisibleInfo;
			Write16(pCurAppellation, 0); //len

			Write8(pCurAppellation, 0); //Type
			Write8(pCurAppellation, 0); //Level
			Write8(pCurAppellation, 0); //Status
			Write8(pCurAppellation, 0); //Difficulty
			Write32(pCurAppellation, 0); //MapId
			Write32(pCurAppellation, 0); //Value

			len = pCurAppellation - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //NobleInfo
			BYTE* pNobleInfo = pPlayerRoomVisibleInfo;
			Write16(pNobleInfo, 0); //len

			Write32(pNobleInfo, 0); //NobleID
			Write8(pNobleInfo, 0); //NobleLevel
			Write32(pNobleInfo, 0); //NoblePoint
			Write32(pNobleInfo, 0); //NobleLeftDays

			len = pNobleInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasCarryWizard
		for (size_t i = 0; i < n; i++)
		{ //CarryWizardInfo
			BYTE* pCarryWizardInfo = pPlayerRoomVisibleInfo;
			Write16(pCarryWizardInfo, 0); //len

			Write16(pCarryWizardInfo, 0); //WizardID
			WriteString(pCarryWizardInfo, 0); //Nickname[]
			Write16(pCarryWizardInfo, 0); //WizardType
			Write8(pCarryWizardInfo, 0); //Order
			Write8(pCarryWizardInfo, 0); //EvolutionBranch
			Write8(pCarryWizardInfo, 0); //IsHuanHua

			len = pCarryWizardInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //GuildVipBaseInfo
			BYTE* pGuildVipBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pGuildVipBaseInfo, 0); //len

			Write8(pGuildVipBaseInfo, 0); //GuildVipLevel
			Write32(pGuildVipBaseInfo, 0); //GuildVipPoint

			len = pGuildVipBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write32(pPlayerRoomVisibleInfo, 0); //ExFlag
		Write8(pPlayerRoomVisibleInfo, 0); //HaveLDMBaseInfo
		for (size_t i = 0; i < n; i++)
		{ //PlayerLDMBaseInfo
			BYTE* pPlayerLDMBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerLDMBaseInfo, 0); //len

			Write8(pPlayerLDMBaseInfo, 0); //Grade
			Write32(pPlayerLDMBaseInfo, 0); //Score
			Write32(pPlayerLDMBaseInfo, 0); //MaxScore
			Write32(pPlayerLDMBaseInfo, 0); //MaxGrade

			len = pPlayerLDMBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasWl
		for (size_t i = 0; i < n; i++)
		{ //PlayerWlVisibleInfo
			BYTE* pPlayerWlVisibleInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerWlVisibleInfo, 0); //len

			Write32(pPlayerWlVisibleInfo, 0); //WonderLandID
			WriteString(pPlayerWlVisibleInfo, 0); //WonderLandName[]
			Write16(pPlayerWlVisibleInfo, 0); //WonderLandDuty
			Write8(pPlayerWlVisibleInfo, 0); //SubType
			Write8(pPlayerWlVisibleInfo, 0); //GuildGrade

			len = pPlayerWlVisibleInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasLoverVip
		for (size_t i = 0; i < n; i++)
		{ //LoverVipInfo
			BYTE* pLoverVipInfo = pPlayerRoomVisibleInfo;
			Write16(pLoverVipInfo, 0); //len

			Write8(pLoverVipInfo, 0); //LoverVipLevel
			Write32(pLoverVipInfo, 0); //LoverVipPoint
			Write8(pLoverVipInfo, 0); //GrowRate

			len = pLoverVipInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasBattleModeSkillInfoList
		for (size_t i = 0; i < n; i++)
		{ //BattleModeSkillInfoList
			BYTE* pBattleModeSkillInfoList = pPlayerRoomVisibleInfo;
			Write16(pBattleModeSkillInfoList, 0); //len

			Write8(pBattleModeSkillInfoList, 0); //SkillNum
			for (size_t i = 0; i < n; i++)
			{ //SkillInfo
				BYTE* pSkillInfo = pBattleModeSkillInfoList;
				Write16(pSkillInfo, 0); //len

				Write16(pSkillInfo, 0); //SkillId
				Write8(pSkillInfo, 0); //SkillLevel

				len = pSkillInfo - pBattleModeSkillInfoList;
				Set16(pBattleModeSkillInfoList, (WORD)len);
				pBattleModeSkillInfoList += len;
			}

			len = pBattleModeSkillInfoList - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}

		len = pPlayerRoomVisibleInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //KartNum
	for (size_t i = 0; i < n; i++)
	{ //KartRefitInfo
		BYTE* pKartRefitInfo = p;
		Write16(pKartRefitInfo, 0); //len

		Write32(pKartRefitInfo, 0); //Uin
		Write32(pKartRefitInfo, 0); //KartId
		Write32(pKartRefitInfo, 0); //RefitCout
		Write16(pKartRefitInfo, 0); //MaxFlags
		Write16(pKartRefitInfo, 0); //WWeight
		Write16(pKartRefitInfo, 0); //SpeedWeight
		Write16(pKartRefitInfo, 0); //JetWeight
		Write16(pKartRefitInfo, 0); //SJetWeight
		Write16(pKartRefitInfo, 0); //AccuWeight
		Write32(pKartRefitInfo, 0); //ShapeRefitCount
		Write32(pKartRefitInfo, 0); //KartHeadRefitItemID
		Write32(pKartRefitInfo, 0); //KartTailRefitItemID
		Write32(pKartRefitInfo, 0); //KartFlankRefitItemID
		Write32(pKartRefitInfo, 0); //KartTireRefitItemID

		len = pKartRefitInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 565, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestCancelMatch(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseCancelMatch(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 156, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyPlayerLeaveMatchGame(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //GameType

	len = p - buf;
	SendToClient(Client, 566, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestClearPoint(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseClearPoint(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen
	Write8(p, 0); //InfoLen

	len = p - buf;
	SendToClient(Client, 157, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetNumericalValue(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	int Time = Read32(p);
	UCHAR ValueTypeIdNum = Read8(p);
	[] ValueTypeIds[] = Read(p);

}

void NotifyNumericalValue(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //ValueTypeIdNum
	for (size_t i = 0; i < n; i++)
	{ //ValueData
		BYTE* pValueData = p;
		Write16(pValueData, 0); //len

		Write16(pValueData, 0); //ValueTypeId
		Write32(pValueData, 0); //Value

		len = pValueData - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 921, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetWlMatchAwardCfg(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	U Uin = ReadU(p);
	int Time = Read32(p);
	U CurVer = ReadU(p);

}

void ResponseGetWlMatchAwardCfg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteU(p, 0); //ResultId
	WriteU(p, 0); //CurVer
	WriteU(p, 0); //CostMatchScore
	WriteU(p, 0); //AwardNum
	for (size_t i = 0; i < n; i++)
	{ //AwardInfo
		BYTE* pAwardInfo = p;
		Write16(pAwardInfo, 0); //len

		WriteU(pAwardInfo, 0); //AwardId
		WriteU(pAwardInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAwardInfo;
			Write16(pItemInfo, 0); //len

			Write16(pItemInfo, 0); //GenderItemNum
			Write32(pItemInfo, 0); //ItemID[]
			Write16(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod

			len = pItemInfo - pAwardInfo;
			Set16(pAwardInfo, (WORD)len);
			pAwardInfo += len;
		}

		len = pAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 962, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetWlMatchAward(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	U Uin = ReadU(p);
	int Time = Read32(p);

}

void ResponseGetWlMatchAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteU(p, 0); //ResultId
	Write32(p, 0); //CostMatchScore
	WriteU(p, 0); //HasAward
	for (size_t i = 0; i < n; i++)
	{ //Award
		BYTE* pAward = p;
		Write16(pAward, 0); //len

		Write32(pAward, 0); //Exp
		Write32(pAward, 0); //Money
		Write32(pAward, 0); //SuperMoney
		Write16(pAward, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAward;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute

			len = pItemInfo - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write32(pAward, 0); //Coupons
		Write32(pAward, 0); //GuildPoint
		Write32(pAward, 0); //LuckMoney

		len = pAward - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 963, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestEnterWlMatchGame(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	U Uin = ReadU(p);
	int Time = Read32(p);
	U GameMode = ReadU(p);

}

void ResponseEnterWlMatchGame(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteU(p, 0); //ResultId
	WriteU(p, 0); //ReasonLen
	WriteU(p, 0); //GameMode

	len = p - buf;
	SendToClient(Client, 964, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyEnterWlMatchGameFailed(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteU(p, 0); //ResultId
	WriteU(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 965, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestCancelWlMatch(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	U Uin = ReadU(p);
	int Time = Read32(p);

}

void ResponseCancelWlMatch(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteU(p, 0); //ResultId
	WriteU(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 970, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyWlMatchPlayerInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //BaseMode
	Write32(p, 0); //SubMode
	WriteU(p, 0); //PlayerCount
	for (size_t i = 0; i < n; i++)
	{ //PlayerRoomVisibleInfo
		BYTE* pPlayerRoomVisibleInfo = p;
		Write16(pPlayerRoomVisibleInfo, 0); //len

		WriteUn(pPlayerRoomVisibleInfo, 0); //Uin
		WriteUn(pPlayerRoomVisibleInfo, 0); //Identity
		Write8(pPlayerRoomVisibleInfo, 0); //SeatID
		Write8(pPlayerRoomVisibleInfo, 0); //TeamID
		Write16(pPlayerRoomVisibleInfo, 0); //PlayerID
		Write8(pPlayerRoomVisibleInfo, 0); //Status
		{ //PlayerDBBaseInfo
			BYTE* pPlayerDBBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerDBBaseInfo, 0); //len

			WriteString(pPlayerDBBaseInfo, 0); //Nickname[]
			Write8(pPlayerDBBaseInfo, 0); //Gender
			Write8(pPlayerDBBaseInfo, 0); //Country
			Write32(pPlayerDBBaseInfo, 0); //License
			WriteUn(pPlayerDBBaseInfo, 0); //Experience
			Write32(pPlayerDBBaseInfo, 0); //SuperMoney
			Write32(pPlayerDBBaseInfo, 0); //Money
			WriteUn(pPlayerDBBaseInfo, 0); //WinNum
			Write32(pPlayerDBBaseInfo, 0); //SecondNum
			Write32(pPlayerDBBaseInfo, 0); //ThirdNum
			WriteUn(pPlayerDBBaseInfo, 0); //TotalNum
			Write32(pPlayerDBBaseInfo, 0); //CurHonor
			Write32(pPlayerDBBaseInfo, 0); //TotalHonor
			Write32(pPlayerDBBaseInfo, 0); //TodayHonor
			Write32(pPlayerDBBaseInfo, 0); //RelaxTime
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationBefore
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationCur
			Write32(pPlayerDBBaseInfo, 0); //Charm
			Write32(pPlayerDBBaseInfo, 0); //DurationGame
			Write32(pPlayerDBBaseInfo, 0); //DanceExp
			Write32(pPlayerDBBaseInfo, 0); //Coupons
			Write32(pPlayerDBBaseInfo, 0); //Admiration
			Write32(pPlayerDBBaseInfo, 0); //LuckMoney
			Write32(pPlayerDBBaseInfo, 0); //TeamWorkExp
			Write32(pPlayerDBBaseInfo, 0); //AchievePoint
			Write32(pPlayerDBBaseInfo, 0); //RegTime
			WriteString(pPlayerDBBaseInfo, 0); //Signature[]
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchPoint
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchNum
			Write16(pPlayerDBBaseInfo, 0); //LuckyMatchFirstNum
			Write8(pPlayerDBBaseInfo, 0); //LuckyMatchBestRand
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchWinNum
			Write32(pPlayerDBBaseInfo, 0); //FizzPointTotal
			Write16(pPlayerDBBaseInfo, 0); //FizzPointDaily
			Write16(pPlayerDBBaseInfo, 0); //FizzPointWeekly
			Write16(pPlayerDBBaseInfo, 0); //FizzPointLastWeek
			Write8(pPlayerDBBaseInfo, 0); //FizzLotteryStatus
			Write32(pPlayerDBBaseInfo, 0); //FizzLastUpdateTime
			Write32(pPlayerDBBaseInfo, 0); //SNSLocaleCode
			Write32(pPlayerDBBaseInfo, 0); //AuctionRightUnlockTime
			Write8(pPlayerDBBaseInfo, 0); //ReserveFlag
			Write32(pPlayerDBBaseInfo, 0); //CurConsumeScore
			Write32(pPlayerDBBaseInfo, 0); //HistoryConsumeScore
			Write8(pPlayerDBBaseInfo, 0); //CrashModeSponsorID
			Write32(pPlayerDBBaseInfo, 0); //Popularity
			Write32(pPlayerDBBaseInfo, 0); //LadderMatchAchievePoint
			Write32(pPlayerDBBaseInfo, 0); //Cash
			Write32(pPlayerDBBaseInfo, 0); //PlayerGPMIdentity
			Write32(pPlayerDBBaseInfo, 0); //PointTotalScore
			WriteUn(pPlayerDBBaseInfo, 0); //totalMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //lastMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalSeasonId
			WriteUn(pPlayerDBBaseInfo, 0); //lastClearMapMedalTime

			len = pPlayerDBBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //PlayerGuildInfo
			BYTE* pPlayerGuildInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerGuildInfo, 0); //len

			WriteString(pPlayerGuildInfo, 0); //GuildName[]
			Write16(pPlayerGuildInfo, 0); //Duty
			Write32(pPlayerGuildInfo, 0); //GuildID
			Write32(pPlayerGuildInfo, 0); //Right
			Write32(pPlayerGuildInfo, 0); //Medal
			Write32(pPlayerGuildInfo, 0); //Contribute
			WriteString(pPlayerGuildInfo, 0); //DutyTitle[]

			len = pPlayerGuildInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write16(pPlayerRoomVisibleInfo, 0); //EquipedItemNum
		for (size_t i = 0; i < n; i++)
		{ //PlayerItemInfo
			BYTE* pPlayerItemInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerItemInfo, 0); //len

			Write32(pPlayerItemInfo, 0); //ItemID
			Write32(pPlayerItemInfo, 0); //ItemNum
			Write32(pPlayerItemInfo, 0); //AvailPeriod
			Write8(pPlayerItemInfo, 0); //Status
			WriteUn(pPlayerItemInfo, 0); //ObtainTime
			Write32(pPlayerItemInfo, 0); //OtherAttribute

			len = pPlayerItemInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write16(pPlayerRoomVisibleInfo, 0); //PetNum
		for (size_t i = 0; i < n; i++)
		{ //PetInfo
			BYTE* pPetInfo = pPlayerRoomVisibleInfo;
			Write16(pPetInfo, 0); //len

			Write32(pPetInfo, 0); //Uin
			Write32(pPetInfo, 0); //PetId
			WriteString(pPetInfo, 0); //PetName[]
			Write8(pPetInfo, 0); //IsProper
			Write16(pPetInfo, 0); //Level
			Write8(pPetInfo, 0); //Status
			Write16(pPetInfo, 0); //PetSkillNum
			for (size_t i = 0; i < n; i++)
			{ //PetSkillList
				BYTE* pPetSkillList = pPetInfo;
				Write16(pPetSkillList, 0); //len

				Write16(pPetSkillList, 0); //SkillID
				Write8(pPetSkillList, 0); //Status
				Write8(pPetSkillList, 0); //Active
				Write32(pPetSkillList, 0); //Value

				len = pPetSkillList - pPetInfo;
				Set16(pPetInfo, (WORD)len);
				pPetInfo += len;
			}
			Write32(pPetInfo, 0); //StrengLevel

			len = pPetInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //PlayerGuildMatchInfo
			BYTE* pPlayerGuildMatchInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerGuildMatchInfo, 0); //len

			Write32(pPlayerGuildMatchInfo, 0); //SelfPoint
			Write32(pPlayerGuildMatchInfo, 0); //WinNum
			Write32(pPlayerGuildMatchInfo, 0); //TotalNum

			len = pPlayerGuildMatchInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //IsInTopList
		Write8(pPlayerRoomVisibleInfo, 0); //LoverRaceOrPro
		Write8(pPlayerRoomVisibleInfo, 0); //TmpEffectNum
		Write32(pPlayerRoomVisibleInfo, 0); //TmpEffectItems[]
		Write8(pPlayerRoomVisibleInfo, 0); //OBState
		Write8(pPlayerRoomVisibleInfo, 0); //DebutOrX5
		Write8(pPlayerRoomVisibleInfo, 0); //RandKeyFlag
		WriteUn(pPlayerRoomVisibleInfo, 0); //VipFlag
		Write8(pPlayerRoomVisibleInfo, 0); //HaveAppellation
		for (size_t i = 0; i < n; i++)
		{ //CurAppellation
			BYTE* pCurAppellation = pPlayerRoomVisibleInfo;
			Write16(pCurAppellation, 0); //len

			Write8(pCurAppellation, 0); //Type
			Write8(pCurAppellation, 0); //Level
			Write8(pCurAppellation, 0); //Status
			Write8(pCurAppellation, 0); //Difficulty
			Write32(pCurAppellation, 0); //MapId
			Write32(pCurAppellation, 0); //Value

			len = pCurAppellation - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //NobleInfo
			BYTE* pNobleInfo = pPlayerRoomVisibleInfo;
			Write16(pNobleInfo, 0); //len

			Write32(pNobleInfo, 0); //NobleID
			Write8(pNobleInfo, 0); //NobleLevel
			Write32(pNobleInfo, 0); //NoblePoint
			Write32(pNobleInfo, 0); //NobleLeftDays

			len = pNobleInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasCarryWizard
		for (size_t i = 0; i < n; i++)
		{ //CarryWizardInfo
			BYTE* pCarryWizardInfo = pPlayerRoomVisibleInfo;
			Write16(pCarryWizardInfo, 0); //len

			Write16(pCarryWizardInfo, 0); //WizardID
			WriteString(pCarryWizardInfo, 0); //Nickname[]
			Write16(pCarryWizardInfo, 0); //WizardType
			Write8(pCarryWizardInfo, 0); //Order
			Write8(pCarryWizardInfo, 0); //EvolutionBranch
			Write8(pCarryWizardInfo, 0); //IsHuanHua

			len = pCarryWizardInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //GuildVipBaseInfo
			BYTE* pGuildVipBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pGuildVipBaseInfo, 0); //len

			Write8(pGuildVipBaseInfo, 0); //GuildVipLevel
			Write32(pGuildVipBaseInfo, 0); //GuildVipPoint

			len = pGuildVipBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write32(pPlayerRoomVisibleInfo, 0); //ExFlag
		Write8(pPlayerRoomVisibleInfo, 0); //HaveLDMBaseInfo
		for (size_t i = 0; i < n; i++)
		{ //PlayerLDMBaseInfo
			BYTE* pPlayerLDMBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerLDMBaseInfo, 0); //len

			Write8(pPlayerLDMBaseInfo, 0); //Grade
			Write32(pPlayerLDMBaseInfo, 0); //Score
			Write32(pPlayerLDMBaseInfo, 0); //MaxScore
			Write32(pPlayerLDMBaseInfo, 0); //MaxGrade

			len = pPlayerLDMBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasWl
		for (size_t i = 0; i < n; i++)
		{ //PlayerWlVisibleInfo
			BYTE* pPlayerWlVisibleInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerWlVisibleInfo, 0); //len

			Write32(pPlayerWlVisibleInfo, 0); //WonderLandID
			WriteString(pPlayerWlVisibleInfo, 0); //WonderLandName[]
			Write16(pPlayerWlVisibleInfo, 0); //WonderLandDuty
			Write8(pPlayerWlVisibleInfo, 0); //SubType
			Write8(pPlayerWlVisibleInfo, 0); //GuildGrade

			len = pPlayerWlVisibleInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasLoverVip
		for (size_t i = 0; i < n; i++)
		{ //LoverVipInfo
			BYTE* pLoverVipInfo = pPlayerRoomVisibleInfo;
			Write16(pLoverVipInfo, 0); //len

			Write8(pLoverVipInfo, 0); //LoverVipLevel
			Write32(pLoverVipInfo, 0); //LoverVipPoint
			Write8(pLoverVipInfo, 0); //GrowRate

			len = pLoverVipInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasBattleModeSkillInfoList
		for (size_t i = 0; i < n; i++)
		{ //BattleModeSkillInfoList
			BYTE* pBattleModeSkillInfoList = pPlayerRoomVisibleInfo;
			Write16(pBattleModeSkillInfoList, 0); //len

			Write8(pBattleModeSkillInfoList, 0); //SkillNum
			for (size_t i = 0; i < n; i++)
			{ //SkillInfo
				BYTE* pSkillInfo = pBattleModeSkillInfoList;
				Write16(pSkillInfo, 0); //len

				Write16(pSkillInfo, 0); //SkillId
				Write8(pSkillInfo, 0); //SkillLevel

				len = pSkillInfo - pBattleModeSkillInfoList;
				Set16(pBattleModeSkillInfoList, (WORD)len);
				pBattleModeSkillInfoList += len;
			}

			len = pBattleModeSkillInfoList - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}

		len = pPlayerRoomVisibleInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	WriteU(p, 0); //KartNum
	for (size_t i = 0; i < n; i++)
	{ //KartRefitInfo
		BYTE* pKartRefitInfo = p;
		Write16(pKartRefitInfo, 0); //len

		Write32(pKartRefitInfo, 0); //Uin
		Write32(pKartRefitInfo, 0); //KartId
		Write32(pKartRefitInfo, 0); //RefitCout
		Write16(pKartRefitInfo, 0); //MaxFlags
		Write16(pKartRefitInfo, 0); //WWeight
		Write16(pKartRefitInfo, 0); //SpeedWeight
		Write16(pKartRefitInfo, 0); //JetWeight
		Write16(pKartRefitInfo, 0); //SJetWeight
		Write16(pKartRefitInfo, 0); //AccuWeight
		Write32(pKartRefitInfo, 0); //ShapeRefitCount
		Write32(pKartRefitInfo, 0); //KartHeadRefitItemID
		Write32(pKartRefitInfo, 0); //KartTailRefitItemID
		Write32(pKartRefitInfo, 0); //KartFlankRefitItemID
		Write32(pKartRefitInfo, 0); //KartTireRefitItemID

		len = pKartRefitInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 971, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyPlayerLeaveWlMatchGame(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteU(p, 0); //Uin

	len = p - buf;
	SendToClient(Client, 973, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestQueryWlMatchStatus(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	U Uin = ReadU(p);
	int Time = Read32(p);

}

void ResponseQueryWlMatchStatus(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteU(p, 0); //IsOpen

	len = p - buf;
	SendToClient(Client, 976, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyBriefGuildInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	WriteString(p, 0); //GuildName[]
	Write32(p, 0); //GuildID
	Write16(p, 0); //Duty
	Write32(p, 0); //Right
	Write32(p, 0); //Medal
	Write32(p, 0); //Contribute
	Write16(p, 0); //TeamAddition
	Write32(p, 0); //GuildScore
	Write32(p, 0); //LeaderUin
	Write16(p, 0); //YesterdayMaxOnline
	Write32(p, 0); //LastSingleLoginTime
	Write16(p, 0); //GuildLevel
	Write8(p, 0); //TitleLen
	Write32(p, 0); //DayChallenge
	Write32(p, 0); //CurSeasonId
	Write16(p, 0); //LastSeasonMapID
	Write16(p, 0); //LastSeasonRank
	Write32(p, 0); //LastHero
	Write32(p, 0); //CurHero
	Write32(p, 0); //LastEnlistedTime
	Write32(p, 0); //LastModGuildNameTime
	Write32(p, 0); //GuildCreateTime
	Write32(p, 0); //JoinGuildTime
	Write32(p, 0); //ScoreRank
	Write32(p, 0); //WonderLandID
	Write16(p, 0); //MemberNum
	Write32(p, 0); //Prosperity
	Write16(p, 0); //WonderLandDuty
	Write32(p, 0); //TotalWlDegree
	Write32(p, 0); //WeeklyWlDegree
	Write32(p, 0); //LastCheckWlDegreeTime
	Write32(p, 0); //WeeklyWlDegreeForMatch
	Write32(p, 0); //WeeklyMatchScore
	Write32(p, 0); //WeeklyUsedMatchScore
	Write32(p, 0); //TotalMatchScore
	WriteU(p, 0); //WeeklyGettedWlWelfareIdBitSet
	Write32(p, 0); //LastGetWlBonusTime
	Write32(p, 0); //BanWlTalkEndTime
	Write32(p, 0); //GetWlBonusEndTime

	len = p - buf;
	SendToClient(Client, 15205, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestCreateGuild(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	char[] NickName[] = ReadString(p);
	char[] GuildName[] = ReadString(p);
	UINT Guid = Read32(p);

}

void ResponseCreateGuild(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	WriteString(p, 0); //GuildName[]
	Write32(p, 0); //GuildID
	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 15000, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestAddMember(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT DstUin = Read32(p);
	char[] DstNickName[] = ReadString(p);

}

void ResponseAddMember(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //DstUin
	WriteString(p, 0); //DstNickName[]
	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 15001, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyBeAddedToGuild(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //SrcUin
	WriteString(p, 0); //SrcNickName[]
	WriteString(p, 0); //GuildName[]

	len = p - buf;
	SendToClient(Client, 15206, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestReplyBeAddedToGuild(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT SrcUin = Read32(p);
	UINT ReplyUin = Read32(p);
	char[] ReplyNickName[] = ReadString(p);
	char[] GuildName[] = ReadString(p);
	short ResultID = Read16(p);
	USHORT ReasonLen = Read16(p);

}

void NotifyAddToGuildResult(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //ApplyUin
	WriteString(p, 0); //ApplyNickName[]
	WriteString(p, 0); //GuildName[]
	Write32(p, 0); //GuildID
	Write16(p, 0); //Duty
	Write32(p, 0); //Right
	Write32(p, 0); //Medal
	Write32(p, 0); //LeaderUin
	Write16(p, 0); //YesterdayMaxOnline
	Write32(p, 0); //LastSingleLoginTime
	Write16(p, 0); //GuildLevel
	Write32(p, 0); //WonderLandID
	Write16(p, 0); //WonderLandDuty

	len = p - buf;
	SendToClient(Client, 15210, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestApplyJoinGuild(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	char[] GuildName[] = ReadString(p);
	char[] ApplyNickName[] = ReadString(p);
	U Guid = ReadU(p);
	{ //SelfCond
		BYTE* pSelfCond = p;
		len = Read16(pSelfCond);

		UINT ProsperityCondition = Read32(pSelfCond);
		UINT JoinTotalCondition = Read32(pSelfCond);
		UINT HonorCondition = Read32(pSelfCond);
		UINT CharmCondition = Read32(pSelfCond);
		UINT DanceExpCondition = Read32(pSelfCond);
		UINT SkillPointCondition = Read32(pSelfCond);
		UINT ExpLevelCondition = Read32(pSelfCond);

		p += len;
	}

}

void ResponseApplyJoinGuild(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	WriteString(p, 0); //GuildName[]
	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 15010, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyApplyJoinGuild(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //ApplyUin
	WriteString(p, 0); //ApplyNickName[]

	len = p - buf;
	SendToClient(Client, 15208, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestReplyJoinGuild(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT ApplyUin = Read32(p);
	char[] ApplyNickName[] = ReadString(p);
	UINT ReplyUin = Read32(p);
	short ResultID = Read16(p);
	USHORT ReasonLen = Read16(p);

}

void RequestRemoveMember(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT DstUin = Read32(p);

}

void ResponseRemoveMember(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //DstUin
	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 15002, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyRemoveMember(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //DstUin
	WriteString(p, 0); //GuildName[]
	WriteString(p, 0); //DstNickName[]
	Write32(p, 0); //Guid
	WriteU(p, 0); //AddCash

	len = p - buf;
	SendToClient(Client, 15202, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetGuildList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT StartIdx = Read32(p);
	UINT GuildCount = Read32(p);

}

void ResponseGetGuildList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //StartIdx
	Write32(p, 0); //TotalCount
	Write32(p, 0); //GuildCount
	for (size_t i = 0; i < n; i++)
	{ //GuildDescInfo
		BYTE* pGuildDescInfo = p;
		Write16(pGuildDescInfo, 0); //len

		Write32(pGuildDescInfo, 0); //GuildID
		WriteString(pGuildDescInfo, 0); //Name[]
		Write32(pGuildDescInfo, 0); //Level
		Write32(pGuildDescInfo, 0); //Score
		Write32(pGuildDescInfo, 0); //CreateTime
		Write16(pGuildDescInfo, 0); //Attribute
		Write16(pGuildDescInfo, 0); //MaxMember
		Write16(pGuildDescInfo, 0); //CurrentMember
		Write32(pGuildDescInfo, 0); //Prosperity
		Write16(pGuildDescInfo, 0); //Level
		{ //GuildEnlistCond
			BYTE* pGuildEnlistCond = pGuildDescInfo;
			Write16(pGuildEnlistCond, 0); //len

			Write32(pGuildEnlistCond, 0); //ProsperityCondition
			Write32(pGuildEnlistCond, 0); //JoinTotalCondition
			Write32(pGuildEnlistCond, 0); //HonorCondition
			Write32(pGuildEnlistCond, 0); //CharmCondition
			Write32(pGuildEnlistCond, 0); //DanceExpCondition
			Write32(pGuildEnlistCond, 0); //SkillPointCondition
			Write32(pGuildEnlistCond, 0); //ExpLevelCondition

			len = pGuildEnlistCond - pGuildDescInfo;
			Set16(pGuildDescInfo, (WORD)len);
			pGuildDescInfo += len;
		}
		Write8(pGuildDescInfo, 0); //SubType

		len = pGuildDescInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen
	WriteU(p, 0); //NextQueryNum
	Write(p, 0); //NextQueryKey[]

	len = p - buf;
	SendToClient(Client, 15004, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestFindGuild(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	char[] GuildName[] = ReadString(p);
	UINT Guid = Read32(p);
	UINT Sort = Read32(p);

}

void ResponseFindGuild(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	{ //GuildDescInfo
		BYTE* pGuildDescInfo = p;
		Write16(pGuildDescInfo, 0); //len

		Write32(pGuildDescInfo, 0); //GuildID
		WriteString(pGuildDescInfo, 0); //Name[]
		{ //LeaderInfo
			BYTE* pLeaderInfo = pGuildDescInfo;
			Write16(pLeaderInfo, 0); //len

			Write32(pLeaderInfo, 0); //Uin
			WriteString(pLeaderInfo, 0); //NickName[]
			Write16(pLeaderInfo, 0); //Duty
			Write8(pLeaderInfo, 0); //OnlineFlag
			WriteUn(pLeaderInfo, 0); //LastLogin
			Write32(pLeaderInfo, 0); //MemProsperity
			Write32(pLeaderInfo, 0); //LastEnlistedTime
			Write8(pLeaderInfo, 0); //EnlistFlag
			Write16(pLeaderInfo, 0); //WonderLandDuty
			Write32(pLeaderInfo, 0); //TotalWlDegree
			Write32(pLeaderInfo, 0); //WeeklyWlDegree
			Write32(pLeaderInfo, 0); //Donate

			len = pLeaderInfo - pGuildDescInfo;
			Set16(pGuildDescInfo, (WORD)len);
			pGuildDescInfo += len;
		}
		Write16(pGuildDescInfo, 0); //NotesLen
		Write16(pGuildDescInfo, 0); //DescLen
		Write32(pGuildDescInfo, 0); //Level
		Write32(pGuildDescInfo, 0); //Score
		Write32(pGuildDescInfo, 0); //CreateTime
		Write16(pGuildDescInfo, 0); //Attribute
		Write16(pGuildDescInfo, 0); //MaxMember
		Write16(pGuildDescInfo, 0); //CurrentMember
		Write16(pGuildDescInfo, 0); //TeamAddition
		Write16(pGuildDescInfo, 0); //YesterdayMaxOnline
		Write16(pGuildDescInfo, 0); //HistoryMaxOnline
		Write32(pGuildDescInfo, 0); //HistoryMaxOnlineTime
		Write32(pGuildDescInfo, 0); //Prosperity
		Write16(pGuildDescInfo, 0); //Level
		{ //GuildEnlistCond
			BYTE* pGuildEnlistCond = pGuildDescInfo;
			Write16(pGuildEnlistCond, 0); //len

			Write32(pGuildEnlistCond, 0); //ProsperityCondition
			Write32(pGuildEnlistCond, 0); //JoinTotalCondition
			Write32(pGuildEnlistCond, 0); //HonorCondition
			Write32(pGuildEnlistCond, 0); //CharmCondition
			Write32(pGuildEnlistCond, 0); //DanceExpCondition
			Write32(pGuildEnlistCond, 0); //SkillPointCondition
			Write32(pGuildEnlistCond, 0); //ExpLevelCondition

			len = pGuildEnlistCond - pGuildDescInfo;
			Set16(pGuildDescInfo, (WORD)len);
			pGuildDescInfo += len;
		}
		Write8(pGuildDescInfo, 0); //NewGuildType
		Write32(pGuildDescInfo, 0); //GuildQQGroup
		{ //WorkDayActiveTimeSeg
			BYTE* pWorkDayActiveTimeSeg = pGuildDescInfo;
			Write16(pWorkDayActiveTimeSeg, 0); //len

			Write16(pWorkDayActiveTimeSeg, 0); //BeginTimeInt
			Write16(pWorkDayActiveTimeSeg, 0); //EndTimeInt

			len = pWorkDayActiveTimeSeg - pGuildDescInfo;
			Set16(pGuildDescInfo, (WORD)len);
			pGuildDescInfo += len;
		}
		{ //WeekendActiveTimeSeg
			BYTE* pWeekendActiveTimeSeg = pGuildDescInfo;
			Write16(pWeekendActiveTimeSeg, 0); //len

			Write16(pWeekendActiveTimeSeg, 0); //BeginTimeInt
			Write16(pWeekendActiveTimeSeg, 0); //EndTimeInt

			len = pWeekendActiveTimeSeg - pGuildDescInfo;
			Set16(pGuildDescInfo, (WORD)len);
			pGuildDescInfo += len;
		}
		Write32(pGuildDescInfo, 0); //LastEnlistTime
		Write8(pGuildDescInfo, 0); //EnlistNum
		Write32(pGuildDescInfo, 0); //LastModGuildNameTime
		Write32(pGuildDescInfo, 0); //WonderLandID
		WriteUn(pGuildDescInfo, 0); //UiCurDonate

		len = pGuildDescInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 15009, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGuildDetail(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT Sort = Read32(p);

}

void ResponseGuildDetail(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	{ //GuildDescInfo
		BYTE* pGuildDescInfo = p;
		Write16(pGuildDescInfo, 0); //len

		Write32(pGuildDescInfo, 0); //GuildID
		WriteString(pGuildDescInfo, 0); //Name[]
		{ //LeaderInfo
			BYTE* pLeaderInfo = pGuildDescInfo;
			Write16(pLeaderInfo, 0); //len

			Write32(pLeaderInfo, 0); //Uin
			WriteString(pLeaderInfo, 0); //NickName[]
			Write16(pLeaderInfo, 0); //Duty
			Write8(pLeaderInfo, 0); //OnlineFlag
			WriteUn(pLeaderInfo, 0); //LastLogin
			Write32(pLeaderInfo, 0); //MemProsperity
			Write32(pLeaderInfo, 0); //LastEnlistedTime
			Write8(pLeaderInfo, 0); //EnlistFlag
			Write16(pLeaderInfo, 0); //WonderLandDuty
			Write32(pLeaderInfo, 0); //TotalWlDegree
			Write32(pLeaderInfo, 0); //WeeklyWlDegree
			Write32(pLeaderInfo, 0); //Donate

			len = pLeaderInfo - pGuildDescInfo;
			Set16(pGuildDescInfo, (WORD)len);
			pGuildDescInfo += len;
		}
		Write16(pGuildDescInfo, 0); //NotesLen
		Write16(pGuildDescInfo, 0); //DescLen
		Write32(pGuildDescInfo, 0); //Level
		Write32(pGuildDescInfo, 0); //Score
		Write32(pGuildDescInfo, 0); //CreateTime
		Write16(pGuildDescInfo, 0); //Attribute
		Write16(pGuildDescInfo, 0); //MaxMember
		Write16(pGuildDescInfo, 0); //CurrentMember
		Write16(pGuildDescInfo, 0); //TeamAddition
		Write16(pGuildDescInfo, 0); //YesterdayMaxOnline
		Write16(pGuildDescInfo, 0); //HistoryMaxOnline
		Write32(pGuildDescInfo, 0); //HistoryMaxOnlineTime
		Write32(pGuildDescInfo, 0); //Prosperity
		Write16(pGuildDescInfo, 0); //Level
		{ //GuildEnlistCond
			BYTE* pGuildEnlistCond = pGuildDescInfo;
			Write16(pGuildEnlistCond, 0); //len

			Write32(pGuildEnlistCond, 0); //ProsperityCondition
			Write32(pGuildEnlistCond, 0); //JoinTotalCondition
			Write32(pGuildEnlistCond, 0); //HonorCondition
			Write32(pGuildEnlistCond, 0); //CharmCondition
			Write32(pGuildEnlistCond, 0); //DanceExpCondition
			Write32(pGuildEnlistCond, 0); //SkillPointCondition
			Write32(pGuildEnlistCond, 0); //ExpLevelCondition

			len = pGuildEnlistCond - pGuildDescInfo;
			Set16(pGuildDescInfo, (WORD)len);
			pGuildDescInfo += len;
		}
		Write8(pGuildDescInfo, 0); //NewGuildType
		Write32(pGuildDescInfo, 0); //GuildQQGroup
		{ //WorkDayActiveTimeSeg
			BYTE* pWorkDayActiveTimeSeg = pGuildDescInfo;
			Write16(pWorkDayActiveTimeSeg, 0); //len

			Write16(pWorkDayActiveTimeSeg, 0); //BeginTimeInt
			Write16(pWorkDayActiveTimeSeg, 0); //EndTimeInt

			len = pWorkDayActiveTimeSeg - pGuildDescInfo;
			Set16(pGuildDescInfo, (WORD)len);
			pGuildDescInfo += len;
		}
		{ //WeekendActiveTimeSeg
			BYTE* pWeekendActiveTimeSeg = pGuildDescInfo;
			Write16(pWeekendActiveTimeSeg, 0); //len

			Write16(pWeekendActiveTimeSeg, 0); //BeginTimeInt
			Write16(pWeekendActiveTimeSeg, 0); //EndTimeInt

			len = pWeekendActiveTimeSeg - pGuildDescInfo;
			Set16(pGuildDescInfo, (WORD)len);
			pGuildDescInfo += len;
		}
		Write32(pGuildDescInfo, 0); //LastEnlistTime
		Write8(pGuildDescInfo, 0); //EnlistNum
		Write32(pGuildDescInfo, 0); //LastModGuildNameTime
		Write32(pGuildDescInfo, 0); //WonderLandID
		WriteUn(pGuildDescInfo, 0); //UiCurDonate

		len = pGuildDescInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //MemberNum
	for (size_t i = 0; i < n; i++)
	{ //Member
		BYTE* pMember = p;
		Write16(pMember, 0); //len

		Write32(pMember, 0); //Uin
		WriteString(pMember, 0); //NickName[]
		Write16(pMember, 0); //Duty
		Write8(pMember, 0); //OnlineFlag
		WriteUn(pMember, 0); //LastLogin
		Write32(pMember, 0); //MemProsperity
		Write32(pMember, 0); //LastEnlistedTime
		Write8(pMember, 0); //EnlistFlag
		Write16(pMember, 0); //WonderLandDuty
		Write32(pMember, 0); //TotalWlDegree
		Write32(pMember, 0); //WeeklyWlDegree
		Write32(pMember, 0); //Donate

		len = pMember - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //LogNum
	for (size_t i = 0; i < n; i++)
	{ //Log
		BYTE* pLog = p;
		Write16(pLog, 0); //len

		Write32(pLog, 0); //Time
		Write8(pLog, 0); //LogLen

		len = pLog - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //Duty
		BYTE* pDuty = p;
		Write16(pDuty, 0); //len

		Write16(pDuty, 0); //Dutys[]
		for (size_t i = 0; i < n; i++)
		{ //AutoPromLimit
			BYTE* pAutoPromLimit = pDuty;
			Write16(pAutoPromLimit, 0); //len

			Write32(pAutoPromLimit, 0); //ScoreLimit
			Write32(pAutoPromLimit, 0); //ProsperityLimit

			len = pAutoPromLimit - pDuty;
			Set16(pDuty, (WORD)len);
			pDuty += len;
		}
		for (size_t i = 0; i < n; i++)
		{ //ApplyPromLimit
			BYTE* pApplyPromLimit = pDuty;
			Write16(pApplyPromLimit, 0); //len

			Write32(pApplyPromLimit, 0); //ScoreLimit
			Write32(pApplyPromLimit, 0); //ProsperityLimit

			len = pApplyPromLimit - pDuty;
			Set16(pDuty, (WORD)len);
			pDuty += len;
		}
		Write(pDuty, 0); //DutyTitle[]

		len = pDuty - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen
	Write32(p, 0); //Contribute[]
	Write32(p, 0); //SelfJoinGuildTime
	Write16(p, 0); //SelfApplyDuty

	len = p - buf;
	SendToClient(Client, 15003, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestChangeMemberDuty(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT DstUin = Read32(p);
	USHORT NewDuty = Read16(p);

}

void ResponseChangeMemberDuty(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //DstUin
	Write16(p, 0); //NewDuty
	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen
	Write16(p, 0); //Right

	len = p - buf;
	SendToClient(Client, 15006, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyChangeMemberDutyResult(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	WriteString(p, 0); //SrcNickName[]
	Write32(p, 0); //DstUin
	WriteString(p, 0); //DstNickName[]
	Write16(p, 0); //NewDuty
	Write16(p, 0); //Right

	len = p - buf;
	SendToClient(Client, 15204, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestModifyDutyRight(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT Duty = Read16(p);
	USHORT Right = Read16(p);

}

void ResponseModifyDutyRight(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //Time
	Write16(p, 0); //Duty
	Write16(p, 0); //Right
	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 15007, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestModifyGuildAttriute(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT NewAttr = Read16(p);
	char NewGuildType = Read8(p);
	UINT GuildQQGroup = Read32(p);
	{ //WorkDayActiveTimeSeg
		BYTE* pWorkDayActiveTimeSeg = p;
		len = Read16(pWorkDayActiveTimeSeg);

		USHORT BeginTimeInt = Read16(pWorkDayActiveTimeSeg);
		USHORT EndTimeInt = Read16(pWorkDayActiveTimeSeg);

		p += len;
	}
	{ //WeekendActiveTimeSeg
		BYTE* pWeekendActiveTimeSeg = p;
		len = Read16(pWeekendActiveTimeSeg);

		USHORT BeginTimeInt = Read16(pWeekendActiveTimeSeg);
		USHORT EndTimeInt = Read16(pWeekendActiveTimeSeg);

		p += len;
	}

}

void ResponseModifyGuildAttriute(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //NewAttr
	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen
	Write8(p, 0); //NewGuildType
	Write32(p, 0); //GuildQQGroup
	{ //WorkDayActiveTimeSeg
		BYTE* pWorkDayActiveTimeSeg = p;
		Write16(pWorkDayActiveTimeSeg, 0); //len

		Write16(pWorkDayActiveTimeSeg, 0); //BeginTimeInt
		Write16(pWorkDayActiveTimeSeg, 0); //EndTimeInt

		len = pWorkDayActiveTimeSeg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //WeekendActiveTimeSeg
		BYTE* pWeekendActiveTimeSeg = p;
		Write16(pWeekendActiveTimeSeg, 0); //len

		Write16(pWeekendActiveTimeSeg, 0); //BeginTimeInt
		Write16(pWeekendActiveTimeSeg, 0); //EndTimeInt

		len = pWeekendActiveTimeSeg - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 15008, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestModifyGuildNotes(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT NotesLen = Read16(p);

}

void ResponseModifyGuildNotes(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //NotesLen
	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 15011, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestModifyGuildDesc(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT DescLen = Read16(p);

}

void ResponseModifyGuildDesc(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //DescLen
	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 15012, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestPlayerGuildInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT DstUin = Read32(p);
	bool Flag = Read8(p);

}

void ResponsePlayerGuildInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //DstUin
	WriteString(p, 0); //Name[]
	Write16(p, 0); //Duty
	Write32(p, 0); //GuildID
	Write32(p, 0); //Medal
	WriteString(p, 0); //DutyTitle[]
	Write8(p, 0); //Flag
	Write32(p, 0); //WonderLandID

	len = p - buf;
	SendToClient(Client, 15015, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGuildLogInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGuildLogInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //LogNum
	for (size_t i = 0; i < n; i++)
	{ //Log
		BYTE* pLog = p;
		Write16(pLog, 0); //len

		Write32(pLog, 0); //Time
		Write8(pLog, 0); //LogLen

		len = pLog - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 15016, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestCheckGuildName(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	char[] GuildName[] = ReadString(p);
	UINT SlefGuildID = Read32(p);

}

void ResponseCheckGuildName(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	WriteString(p, 0); //GuildName[]
	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 15017, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyDismissGuildResult(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteString(p, 0); //GuildName[]
	Write16(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 15217, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestSavingQQshow(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	char[] QQshowName[] = ReadString(p);
	short PropID = Read16(p);
	short Seq = Read16(p);
	UCHAR Finished = Read8(p);
	UINT QQshowBufferSize = Read32(p);

}

void ResponseSavingQQshow(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	WriteString(p, 0); //QQshowName[]
	Write16(p, 0); //PropID
	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 356, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyLoginMsg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //MsgNum
	for (size_t i = 0; i < n; i++)
	{ //LoginMsgList
		BYTE* pLoginMsgList = p;
		Write16(pLoginMsgList, 0); //len

		Write8(pLoginMsgList, 0); //MsgType
		Write16(pLoginMsgList, 0); //UrlLen
		Write16(pLoginMsgList, 0); //MsgLen

		len = pLoginMsgList - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 575, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestRefitKart(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int KartItemId = Read32(p);
	UCHAR KartNameLen = Read8(p);
	int RefitItemId = Read32(p);
	int Reserved = Read32(p);

}

void ResponseRefitKart(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Result
	Write32(p, 0); //Uin
	Write32(p, 0); //KartItemId
	{ //Increasement
		BYTE* pIncreasement = p;
		Write16(pIncreasement, 0); //len

		Write32(pIncreasement, 0); //Uin
		Write32(pIncreasement, 0); //KartId
		Write32(pIncreasement, 0); //RefitCout
		Write16(pIncreasement, 0); //MaxFlags
		Write16(pIncreasement, 0); //WWeight
		Write16(pIncreasement, 0); //SpeedWeight
		Write16(pIncreasement, 0); //JetWeight
		Write16(pIncreasement, 0); //SJetWeight
		Write16(pIncreasement, 0); //AccuWeight
		Write32(pIncreasement, 0); //ShapeRefitCount
		Write32(pIncreasement, 0); //KartHeadRefitItemID
		Write32(pIncreasement, 0); //KartTailRefitItemID
		Write32(pIncreasement, 0); //KartFlankRefitItemID
		Write32(pIncreasement, 0); //KartTireRefitItemID

		len = pIncreasement - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //CurAttr
		BYTE* pCurAttr = p;
		Write16(pCurAttr, 0); //len

		Write32(pCurAttr, 0); //Uin
		Write32(pCurAttr, 0); //KartId
		Write32(pCurAttr, 0); //RefitCout
		Write16(pCurAttr, 0); //MaxFlags
		Write16(pCurAttr, 0); //WWeight
		Write16(pCurAttr, 0); //SpeedWeight
		Write16(pCurAttr, 0); //JetWeight
		Write16(pCurAttr, 0); //SJetWeight
		Write16(pCurAttr, 0); //AccuWeight
		Write32(pCurAttr, 0); //ShapeRefitCount
		Write32(pCurAttr, 0); //KartHeadRefitItemID
		Write32(pCurAttr, 0); //KartTailRefitItemID
		Write32(pCurAttr, 0); //KartFlankRefitItemID
		Write32(pCurAttr, 0); //KartTireRefitItemID

		len = pCurAttr - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //ExpAward
	Write32(p, 0); //MoneyAward
	Write16(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 174, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetForbidRefitKartList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetForbidRefitKartList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write16(p, 0); //ForbidListNum
	Write32(p, 0); //ForbidRefitKartID[]

	len = p - buf;
	SendToClient(Client, 175, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyUpdatePetExp(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //PetID
	Write32(p, 0); //ExpInc
	Write16(p, 0); //PreLevel
	Write16(p, 0); //CurLevel
	Write32(p, 0); //CurLevelExp
	Write32(p, 0); //CurLevelMaxExp
	Write16(p, 0); //MsgLen
	Write16(p, 0); //Reason

	len = p - buf;
	SendToClient(Client, 583, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyPetEvolution(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Result
	Write16(p, 0); //PreStatus
	{ //PetInfo
		BYTE* pPetInfo = p;
		Write16(pPetInfo, 0); //len

		Write32(pPetInfo, 0); //Uin
		Write32(pPetInfo, 0); //PetId
		WriteString(pPetInfo, 0); //PetName[]
		Write8(pPetInfo, 0); //IsProper
		Write16(pPetInfo, 0); //LevelLimit
		Write16(pPetInfo, 0); //Level
		Write32(pPetInfo, 0); //CurLevelExp
		Write32(pPetInfo, 0); //CurLevelMaxExp
		Write8(pPetInfo, 0); //Status
		Write16(pPetInfo, 0); //PL
		Write16(pPetInfo, 0); //TotalPL
		Write16(pPetInfo, 0); //PetSkillNum
		for (size_t i = 0; i < n; i++)
		{ //PetSkillList
			BYTE* pPetSkillList = pPetInfo;
			Write16(pPetSkillList, 0); //len

			Write16(pPetSkillList, 0); //SkillID
			Write8(pPetSkillList, 0); //Status
			Write8(pPetSkillList, 0); //Active
			Write32(pPetSkillList, 0); //Value

			len = pPetSkillList - pPetInfo;
			Set16(pPetInfo, (WORD)len);
			pPetInfo += len;
		}
		Write32(pPetInfo, 0); //StrengLevel

		len = pPetInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //MsgLen

	len = p - buf;
	SendToClient(Client, 584, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyUpdatePetPL(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //PetID
	Write32(p, 0); //PLInc
	Write32(p, 0); //CurPL
	Write16(p, 0); //Reason

	len = p - buf;
	SendToClient(Client, 585, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyAddPet(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	{ //PetInfo
		BYTE* pPetInfo = p;
		Write16(pPetInfo, 0); //len

		Write32(pPetInfo, 0); //Uin
		Write32(pPetInfo, 0); //PetId
		WriteString(pPetInfo, 0); //PetName[]
		Write8(pPetInfo, 0); //IsProper
		Write16(pPetInfo, 0); //LevelLimit
		Write16(pPetInfo, 0); //Level
		Write32(pPetInfo, 0); //CurLevelExp
		Write32(pPetInfo, 0); //CurLevelMaxExp
		Write8(pPetInfo, 0); //Status
		Write16(pPetInfo, 0); //PL
		Write16(pPetInfo, 0); //TotalPL
		Write16(pPetInfo, 0); //PetSkillNum
		for (size_t i = 0; i < n; i++)
		{ //PetSkillList
			BYTE* pPetSkillList = pPetInfo;
			Write16(pPetSkillList, 0); //len

			Write16(pPetSkillList, 0); //SkillID
			Write8(pPetSkillList, 0); //Status
			Write8(pPetSkillList, 0); //Active
			Write32(pPetSkillList, 0); //Value

			len = pPetSkillList - pPetInfo;
			Set16(pPetInfo, (WORD)len);
			pPetInfo += len;
		}
		Write32(pPetInfo, 0); //StrengLevel

		len = pPetInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 586, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestResetPL(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	Un Time = ReadUn(p);

}

void NotifyBroadcastPetEvolution(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	{ //PetInfo
		BYTE* pPetInfo = p;
		Write16(pPetInfo, 0); //len

		Write32(pPetInfo, 0); //Uin
		Write32(pPetInfo, 0); //PetId
		WriteString(pPetInfo, 0); //PetName[]
		Write8(pPetInfo, 0); //IsProper
		Write16(pPetInfo, 0); //Level
		Write8(pPetInfo, 0); //Status
		Write16(pPetInfo, 0); //PetSkillNum
		for (size_t i = 0; i < n; i++)
		{ //PetSkillList
			BYTE* pPetSkillList = pPetInfo;
			Write16(pPetSkillList, 0); //len

			Write16(pPetSkillList, 0); //SkillID
			Write8(pPetSkillList, 0); //Status
			Write8(pPetSkillList, 0); //Active
			Write32(pPetSkillList, 0); //Value

			len = pPetSkillList - pPetInfo;
			Set16(pPetInfo, (WORD)len);
			pPetInfo += len;
		}
		Write32(pPetInfo, 0); //StrengLevel

		len = pPetInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 587, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyBroadcastPetLevelUp(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	{ //PetLevelUpInfo
		BYTE* pPetLevelUpInfo = p;
		Write16(pPetLevelUpInfo, 0); //len

		Write32(pPetLevelUpInfo, 0); //Uin
		Write32(pPetLevelUpInfo, 0); //PetId
		Write16(pPetLevelUpInfo, 0); //NewLevel

		len = pPetLevelUpInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 589, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyPetLevelUp(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	{ //PetLevelUpInfo
		BYTE* pPetLevelUpInfo = p;
		Write16(pPetLevelUpInfo, 0); //len

		Write32(pPetLevelUpInfo, 0); //Uin
		Write32(pPetLevelUpInfo, 0); //PetId
		Write16(pPetLevelUpInfo, 0); //PetSkillNum
		for (size_t i = 0; i < n; i++)
		{ //PetSkillList
			BYTE* pPetSkillList = pPetLevelUpInfo;
			Write16(pPetSkillList, 0); //len

			Write16(pPetSkillList, 0); //SkillID
			Write8(pPetSkillList, 0); //Status
			Write8(pPetSkillList, 0); //Active
			Write32(pPetSkillList, 0); //Value

			len = pPetSkillList - pPetLevelUpInfo;
			Set16(pPetLevelUpInfo, (WORD)len);
			pPetLevelUpInfo += len;
		}

		len = pPetLevelUpInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 588, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestUpdatePetName(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	Un Time = ReadUn(p);
	char[] PetName[] = ReadString(p);

}

void ResponseUpdatePetName(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Result

	len = p - buf;
	SendToClient(Client, 178, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyPetUpdateName(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //PetID
	WriteString(p, 0); //PetName[]

	len = p - buf;
	SendToClient(Client, 590, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetCommodityExchangeItems(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int ExchangeID = Read32(p);

}

void ResponseGetCommodityExchangeItems(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write32(p, 0); //ExchangeID
	Write16(p, 0); //ItemNum
	for (size_t i = 0; i < n; i++)
	{ //ItemInfo
		BYTE* pItemInfo = p;
		Write16(pItemInfo, 0); //len

		Write32(pItemInfo, 0); //ItemID
		Write8(pItemInfo, 0); //ItemType
		Write32(pItemInfo, 0); //NeedQuantity
		Write32(pItemInfo, 0); //Quantity

		len = pItemInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen
	Write32(p, 0); //ConsumeFlag
	Write8(p, 0); //ProduceItemNum
	for (size_t i = 0; i < n; i++)
	{ //ProduceItemInfo
		BYTE* pProduceItemInfo = p;
		Write16(pProduceItemInfo, 0); //len

		Write32(pProduceItemInfo, 0); //ItemID
		Write32(pProduceItemInfo, 0); //ItemNum
		Write32(pProduceItemInfo, 0); //AvailPeriod
		Write8(pProduceItemInfo, 0); //Status
		WriteUn(pProduceItemInfo, 0); //ObtainTime
		Write32(pProduceItemInfo, 0); //OtherAttribute

		len = pProduceItemInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 171, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyFileCheckList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //FileNum
	for (size_t i = 0; i < n; i++)
	{ //FileList
		BYTE* pFileList = p;
		Write16(pFileList, 0); //len

		Write8(pFileList, 0); //FileNameLen

		len = pFileList - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 862, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestFileCheck(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	Un Time = ReadUn(p);
	{ //FileHash
		BYTE* pFileHash = p;
		len = Read16(pFileHash);

		UCHAR HashLen = Read8(pFileHash);

		p += len;
	}

}

void NotifyKubiGameInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //KubiNum
	for (size_t i = 0; i < n; i++)
	{ //Kubi
		BYTE* pKubi = p;
		Write16(pKubi, 0); //len

		Write32(pKubi, 0); //Key
		Write32(pKubi, 0); //Flags
		Write32(pKubi, 0); //PosIndex

		len = pKubi - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //PlayerNum
	for (size_t i = 0; i < n; i++)
	{ //KubiPlayer
		BYTE* pKubiPlayer = p;
		Write16(pKubiPlayer, 0); //len

		Write32(pKubiPlayer, 0); //Uin
		Write32(pKubiPlayer, 0); //State
		Write32(pKubiPlayer, 0); //KubiNum
		Write32(pKubiPlayer, 0); //KubiKeyArray[]
		Write32(pKubiPlayer, 0); //PickKubiHistory
		Write32(pKubiPlayer, 0); //TeamID
		Write32(pKubiPlayer, 0); //FinTime

		len = pKubiPlayer - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //QuarterTime

	len = p - buf;
	SendToClient(Client, 600, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGainKubi(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	{ //Kubi
		BYTE* pKubi = p;
		len = Read16(pKubi);

		int Key = Read32(pKubi);
		UINT Flags = Read32(pKubi);
		int PosIndex = Read32(pKubi);

		p += len;
	}
	int[] CurrentPosition[] = Read32(p);

}

void ResponseGainKubi(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	WriteUn(p, 0); //Uin
	{ //Kubi
		BYTE* pKubi = p;
		Write16(pKubi, 0); //len

		Write32(pKubi, 0); //Key
		Write32(pKubi, 0); //Flags
		Write32(pKubi, 0); //PosIndex

		len = pKubi - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //KubiPlayer
		BYTE* pKubiPlayer = p;
		Write16(pKubiPlayer, 0); //len

		Write32(pKubiPlayer, 0); //Uin
		Write32(pKubiPlayer, 0); //State
		Write32(pKubiPlayer, 0); //KubiNum
		Write32(pKubiPlayer, 0); //KubiKeyArray[]
		Write32(pKubiPlayer, 0); //PickKubiHistory
		Write32(pKubiPlayer, 0); //TeamID
		Write32(pKubiPlayer, 0); //FinTime

		len = pKubiPlayer - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen
	WriteString(p, 0); //Reason[]

	len = p - buf;
	SendToClient(Client, 180, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyGainKubi(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //Uin
	{ //Kubi
		BYTE* pKubi = p;
		Write16(pKubi, 0); //len

		Write32(pKubi, 0); //Key
		Write32(pKubi, 0); //Flags
		Write32(pKubi, 0); //PosIndex

		len = pKubi - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //KubiPlayer
		BYTE* pKubiPlayer = p;
		Write16(pKubiPlayer, 0); //len

		Write32(pKubiPlayer, 0); //Uin
		Write32(pKubiPlayer, 0); //State
		Write32(pKubiPlayer, 0); //KubiNum
		Write32(pKubiPlayer, 0); //KubiKeyArray[]
		Write32(pKubiPlayer, 0); //PickKubiHistory
		Write32(pKubiPlayer, 0); //TeamID
		Write32(pKubiPlayer, 0); //FinTime

		len = pKubiPlayer - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 601, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestDropKubi(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	int Reason = Read32(p);
	int[] CurrentPosition[] = Read32(p);

}

void ResponseDropKubi(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	WriteUn(p, 0); //Uin
	Write32(p, 0); //KubiNum
	for (size_t i = 0; i < n; i++)
	{ //Kubi
		BYTE* pKubi = p;
		Write16(pKubi, 0); //len

		Write32(pKubi, 0); //Key
		Write32(pKubi, 0); //Flags
		Write32(pKubi, 0); //PosIndex

		len = pKubi - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //KubiPlayer
		BYTE* pKubiPlayer = p;
		Write16(pKubiPlayer, 0); //len

		Write32(pKubiPlayer, 0); //Uin
		Write32(pKubiPlayer, 0); //State
		Write32(pKubiPlayer, 0); //KubiNum
		Write32(pKubiPlayer, 0); //KubiKeyArray[]
		Write32(pKubiPlayer, 0); //PickKubiHistory
		Write32(pKubiPlayer, 0); //TeamID
		Write32(pKubiPlayer, 0); //FinTime

		len = pKubiPlayer - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen
	WriteString(p, 0); //Reason[]

	len = p - buf;
	SendToClient(Client, 181, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyDropKubi(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //Uin
	Write32(p, 0); //KubiNum
	for (size_t i = 0; i < n; i++)
	{ //Kubi
		BYTE* pKubi = p;
		Write16(pKubi, 0); //len

		Write32(pKubi, 0); //Key
		Write32(pKubi, 0); //Flags
		Write32(pKubi, 0); //PosIndex

		len = pKubi - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //KubiPlayer
		BYTE* pKubiPlayer = p;
		Write16(pKubiPlayer, 0); //len

		Write32(pKubiPlayer, 0); //Uin
		Write32(pKubiPlayer, 0); //State
		Write32(pKubiPlayer, 0); //KubiNum
		Write32(pKubiPlayer, 0); //KubiKeyArray[]
		Write32(pKubiPlayer, 0); //PickKubiHistory
		Write32(pKubiPlayer, 0); //TeamID
		Write32(pKubiPlayer, 0); //FinTime

		len = pKubiPlayer - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 602, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyKubiCountDown(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //KubiCountDown

	len = p - buf;
	SendToClient(Client, 603, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyKubiQuarterOver(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //QuarterTime

	len = p - buf;
	SendToClient(Client, 604, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyKubiKickPlayer(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //PlayerNum
	for (size_t i = 0; i < n; i++)
	{ //KubiPlayerInfo
		BYTE* pKubiPlayerInfo = p;
		Write16(pKubiPlayerInfo, 0); //len

		Write32(pKubiPlayerInfo, 0); //Uin
		Write32(pKubiPlayerInfo, 0); //State
		Write32(pKubiPlayerInfo, 0); //KubiNum
		Write32(pKubiPlayerInfo, 0); //KubiKeyArray[]
		Write32(pKubiPlayerInfo, 0); //PickKubiHistory
		Write32(pKubiPlayerInfo, 0); //TeamID
		Write32(pKubiPlayerInfo, 0); //FinTime

		len = pKubiPlayerInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //KubiNum
	for (size_t i = 0; i < n; i++)
	{ //Kubi
		BYTE* pKubi = p;
		Write16(pKubi, 0); //len

		Write32(pKubi, 0); //Key
		Write32(pKubi, 0); //Flags
		Write32(pKubi, 0); //PosIndex

		len = pKubi - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 605, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyKubiPlayerLeave(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	{ //KubiPlayerInfo
		BYTE* pKubiPlayerInfo = p;
		Write16(pKubiPlayerInfo, 0); //len

		Write32(pKubiPlayerInfo, 0); //Uin
		Write32(pKubiPlayerInfo, 0); //State
		Write32(pKubiPlayerInfo, 0); //KubiNum
		Write32(pKubiPlayerInfo, 0); //KubiKeyArray[]
		Write32(pKubiPlayerInfo, 0); //PickKubiHistory
		Write32(pKubiPlayerInfo, 0); //TeamID
		Write32(pKubiPlayerInfo, 0); //FinTime

		len = pKubiPlayerInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //KubiNum
	for (size_t i = 0; i < n; i++)
	{ //Kubi
		BYTE* pKubi = p;
		Write16(pKubi, 0); //len

		Write32(pKubi, 0); //Key
		Write32(pKubi, 0); //Flags
		Write32(pKubi, 0); //PosIndex

		len = pKubi - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 606, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyKubiRaceOver(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //PlayerNum
	for (size_t i = 0; i < n; i++)
	{ //KubiScore
		BYTE* pKubiScore = p;
		Write16(pKubiScore, 0); //len

		Write32(pKubiScore, 0); //Uin
		Write32(pKubiScore, 0); //State
		Write32(pKubiScore, 0); //Rank
		Write32(pKubiScore, 0); //KubiHistroy
		Write32(pKubiScore, 0); //AliveTime
		Write32(pKubiScore, 0); //TP
		Write32(pKubiScore, 0); //MoneyInc
		Write32(pKubiScore, 0); //MoneyTotal
		Write32(pKubiScore, 0); //ExpInc
		Write32(pKubiScore, 0); //ExpTotal
		Write8(pKubiScore, 0); //AwardNum
		Write32(pKubiScore, 0); //SpecialAward[]

		len = pKubiScore - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //WinTeamID
	Write32(p, 0); //WinType
	Write32(p, 0); //AwardTime
	Write8(p, 0); //PlayerNumber
	for (size_t i = 0; i < n; i++)
	{ //HideTaskResult
		BYTE* pHideTaskResult = p;
		Write16(pHideTaskResult, 0); //len

		Write32(pHideTaskResult, 0); //Uin
		Write32(pHideTaskResult, 0); //TaskId
		Write8(pHideTaskResult, 0); //HideTaskFinishResult

		len = pHideTaskResult - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 607, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestReturnToHall(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);

}

void ResponseReturnToHall(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 182, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyGuildBroadcast(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteString(p, 0); //GuildName[]
	Write16(p, 0); //ContentLength
	Write32(p, 0); //Guid

	len = p - buf;
	SendToClient(Client, 15218, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyGSvrdUpdatePlayerGuildScore(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //ContributeInc

	len = p - buf;
	SendToClient(Client, 15219, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestCreateTeam(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	BYTE TeamType = Read8(p);

}

void ResponseCreateTeam(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //TeamID
	Write32(p, 0); //Score
	Write8(p, 0); //TeamType
	Write32(p, 0); //ServerID

	len = p - buf;
	SendToClient(Client, 191, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestJoinTeam(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int TeamID = Read32(p);
	UINT LeaderUin = Read32(p);
	bool NeedAllow = Read8(p);

}

void ResponseJoinTeam(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Score
	Write8(p, 0); //TeamType
	WriteUn(p, 0); //PlayerNum
	for (size_t i = 0; i < n; i++)
	{ //TeamPlayerInfo
		BYTE* pTeamPlayerInfo = p;
		Write16(pTeamPlayerInfo, 0); //len

		Write32(pTeamPlayerInfo, 0); //Uin
		Write32(pTeamPlayerInfo, 0); //Identity
		WriteUn(pTeamPlayerInfo, 0); //PlayerID
		Write8(pTeamPlayerInfo, 0); //ReadyInRoom
		{ //PlayerDBBaseInfo
			BYTE* pPlayerDBBaseInfo = pTeamPlayerInfo;
			Write16(pPlayerDBBaseInfo, 0); //len

			WriteString(pPlayerDBBaseInfo, 0); //Nickname[]
			Write8(pPlayerDBBaseInfo, 0); //Gender
			Write8(pPlayerDBBaseInfo, 0); //Country
			Write32(pPlayerDBBaseInfo, 0); //License
			WriteUn(pPlayerDBBaseInfo, 0); //Experience
			Write32(pPlayerDBBaseInfo, 0); //SuperMoney
			Write32(pPlayerDBBaseInfo, 0); //Money
			WriteUn(pPlayerDBBaseInfo, 0); //WinNum
			Write32(pPlayerDBBaseInfo, 0); //SecondNum
			Write32(pPlayerDBBaseInfo, 0); //ThirdNum
			WriteUn(pPlayerDBBaseInfo, 0); //TotalNum
			Write32(pPlayerDBBaseInfo, 0); //CurHonor
			Write32(pPlayerDBBaseInfo, 0); //TotalHonor
			Write32(pPlayerDBBaseInfo, 0); //TodayHonor
			Write32(pPlayerDBBaseInfo, 0); //RelaxTime
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationBefore
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationCur
			Write32(pPlayerDBBaseInfo, 0); //Charm
			Write32(pPlayerDBBaseInfo, 0); //DurationGame
			Write32(pPlayerDBBaseInfo, 0); //DanceExp
			Write32(pPlayerDBBaseInfo, 0); //Coupons
			Write32(pPlayerDBBaseInfo, 0); //Admiration
			Write32(pPlayerDBBaseInfo, 0); //LuckMoney
			Write32(pPlayerDBBaseInfo, 0); //TeamWorkExp
			Write32(pPlayerDBBaseInfo, 0); //AchievePoint
			Write32(pPlayerDBBaseInfo, 0); //RegTime
			WriteString(pPlayerDBBaseInfo, 0); //Signature[]
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchPoint
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchNum
			Write16(pPlayerDBBaseInfo, 0); //LuckyMatchFirstNum
			Write8(pPlayerDBBaseInfo, 0); //LuckyMatchBestRand
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchWinNum
			Write32(pPlayerDBBaseInfo, 0); //FizzPointTotal
			Write16(pPlayerDBBaseInfo, 0); //FizzPointDaily
			Write16(pPlayerDBBaseInfo, 0); //FizzPointWeekly
			Write16(pPlayerDBBaseInfo, 0); //FizzPointLastWeek
			Write8(pPlayerDBBaseInfo, 0); //FizzLotteryStatus
			Write32(pPlayerDBBaseInfo, 0); //FizzLastUpdateTime
			Write32(pPlayerDBBaseInfo, 0); //SNSLocaleCode
			Write32(pPlayerDBBaseInfo, 0); //AuctionRightUnlockTime
			Write8(pPlayerDBBaseInfo, 0); //ReserveFlag
			Write32(pPlayerDBBaseInfo, 0); //CurConsumeScore
			Write32(pPlayerDBBaseInfo, 0); //HistoryConsumeScore
			Write8(pPlayerDBBaseInfo, 0); //CrashModeSponsorID
			Write32(pPlayerDBBaseInfo, 0); //Popularity
			Write32(pPlayerDBBaseInfo, 0); //LadderMatchAchievePoint
			Write32(pPlayerDBBaseInfo, 0); //Cash
			Write32(pPlayerDBBaseInfo, 0); //PlayerGPMIdentity
			Write32(pPlayerDBBaseInfo, 0); //PointTotalScore
			WriteUn(pPlayerDBBaseInfo, 0); //totalMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //lastMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalSeasonId
			WriteUn(pPlayerDBBaseInfo, 0); //lastClearMapMedalTime

			len = pPlayerDBBaseInfo - pTeamPlayerInfo;
			Set16(pTeamPlayerInfo, (WORD)len);
			pTeamPlayerInfo += len;
		}
		{ //PlayerGuildInfo
			BYTE* pPlayerGuildInfo = pTeamPlayerInfo;
			Write16(pPlayerGuildInfo, 0); //len

			WriteString(pPlayerGuildInfo, 0); //GuildName[]
			Write16(pPlayerGuildInfo, 0); //Duty
			Write32(pPlayerGuildInfo, 0); //GuildID
			Write32(pPlayerGuildInfo, 0); //Right
			Write32(pPlayerGuildInfo, 0); //Medal
			Write32(pPlayerGuildInfo, 0); //Contribute
			WriteString(pPlayerGuildInfo, 0); //DutyTitle[]

			len = pPlayerGuildInfo - pTeamPlayerInfo;
			Set16(pTeamPlayerInfo, (WORD)len);
			pTeamPlayerInfo += len;
		}
		{ //PlayerRelationInfo
			BYTE* pPlayerRelationInfo = pTeamPlayerInfo;
			Write16(pPlayerRelationInfo, 0); //len

			Write32(pPlayerRelationInfo, 0); //SrcUin
			Write32(pPlayerRelationInfo, 0); //RelationFlag
			Write32(pPlayerRelationInfo, 0); //RelationUin
			WriteString(pPlayerRelationInfo, 0); //RelationNickname[]
			Write32(pPlayerRelationInfo, 0); //EngageTime
			Write32(pPlayerRelationInfo, 0); //NextCanBookingTimeLimit
			Write32(pPlayerRelationInfo, 0); //BeginHoneyMoonTime
			Write32(pPlayerRelationInfo, 0); //EndHoneyMoonTime
			Write8(pPlayerRelationInfo, 0); //EngageFlag

			len = pPlayerRelationInfo - pTeamPlayerInfo;
			Set16(pTeamPlayerInfo, (WORD)len);
			pTeamPlayerInfo += len;
		}
		WriteUn(pTeamPlayerInfo, 0); //EquipedItemNum
		for (size_t i = 0; i < n; i++)
		{ //PlayerItemInfo
			BYTE* pPlayerItemInfo = pTeamPlayerInfo;
			Write16(pPlayerItemInfo, 0); //len

			Write32(pPlayerItemInfo, 0); //ItemID
			Write32(pPlayerItemInfo, 0); //ItemNum
			Write32(pPlayerItemInfo, 0); //AvailPeriod
			Write8(pPlayerItemInfo, 0); //Status
			WriteUn(pPlayerItemInfo, 0); //ObtainTime
			Write32(pPlayerItemInfo, 0); //OtherAttribute

			len = pPlayerItemInfo - pTeamPlayerInfo;
			Set16(pTeamPlayerInfo, (WORD)len);
			pTeamPlayerInfo += len;
		}
		WriteUn(pTeamPlayerInfo, 0); //PetNum
		for (size_t i = 0; i < n; i++)
		{ //PetInfo
			BYTE* pPetInfo = pTeamPlayerInfo;
			Write16(pPetInfo, 0); //len

			Write32(pPetInfo, 0); //Uin
			Write32(pPetInfo, 0); //PetId
			WriteString(pPetInfo, 0); //PetName[]
			Write8(pPetInfo, 0); //IsProper
			Write16(pPetInfo, 0); //Level
			Write8(pPetInfo, 0); //Status
			Write16(pPetInfo, 0); //PetSkillNum
			for (size_t i = 0; i < n; i++)
			{ //PetSkillList
				BYTE* pPetSkillList = pPetInfo;
				Write16(pPetSkillList, 0); //len

				Write16(pPetSkillList, 0); //SkillID
				Write8(pPetSkillList, 0); //Status
				Write8(pPetSkillList, 0); //Active
				Write32(pPetSkillList, 0); //Value

				len = pPetSkillList - pPetInfo;
				Set16(pPetInfo, (WORD)len);
				pPetInfo += len;
			}
			Write32(pPetInfo, 0); //StrengLevel

			len = pPetInfo - pTeamPlayerInfo;
			Set16(pTeamPlayerInfo, (WORD)len);
			pTeamPlayerInfo += len;
		}
		WriteUn(pTeamPlayerInfo, 0); //KartNum
		for (size_t i = 0; i < n; i++)
		{ //KartRefitInfo
			BYTE* pKartRefitInfo = pTeamPlayerInfo;
			Write16(pKartRefitInfo, 0); //len

			Write32(pKartRefitInfo, 0); //Uin
			Write32(pKartRefitInfo, 0); //KartId
			Write32(pKartRefitInfo, 0); //RefitCout
			Write16(pKartRefitInfo, 0); //MaxFlags
			Write16(pKartRefitInfo, 0); //WWeight
			Write16(pKartRefitInfo, 0); //SpeedWeight
			Write16(pKartRefitInfo, 0); //JetWeight
			Write16(pKartRefitInfo, 0); //SJetWeight
			Write16(pKartRefitInfo, 0); //AccuWeight
			Write32(pKartRefitInfo, 0); //ShapeRefitCount
			Write32(pKartRefitInfo, 0); //KartHeadRefitItemID
			Write32(pKartRefitInfo, 0); //KartTailRefitItemID
			Write32(pKartRefitInfo, 0); //KartFlankRefitItemID
			Write32(pKartRefitInfo, 0); //KartTireRefitItemID

			len = pKartRefitInfo - pTeamPlayerInfo;
			Set16(pTeamPlayerInfo, (WORD)len);
			pTeamPlayerInfo += len;
		}
		WriteUn(pTeamPlayerInfo, 0); //VipFlag
		{ //NobleInfo
			BYTE* pNobleInfo = pTeamPlayerInfo;
			Write16(pNobleInfo, 0); //len

			Write32(pNobleInfo, 0); //NobleID
			Write8(pNobleInfo, 0); //NobleLevel
			Write32(pNobleInfo, 0); //NoblePoint
			Write32(pNobleInfo, 0); //NobleLeftDays

			len = pNobleInfo - pTeamPlayerInfo;
			Set16(pTeamPlayerInfo, (WORD)len);
			pTeamPlayerInfo += len;
		}
		{ //GuildVipBaseInfo
			BYTE* pGuildVipBaseInfo = pTeamPlayerInfo;
			Write16(pGuildVipBaseInfo, 0); //len

			Write8(pGuildVipBaseInfo, 0); //GuildVipLevel
			Write32(pGuildVipBaseInfo, 0); //GuildVipPoint

			len = pGuildVipBaseInfo - pTeamPlayerInfo;
			Set16(pTeamPlayerInfo, (WORD)len);
			pTeamPlayerInfo += len;
		}
		Write8(pTeamPlayerInfo, 0); //HasLoverVip
		for (size_t i = 0; i < n; i++)
		{ //LoverVipInfo
			BYTE* pLoverVipInfo = pTeamPlayerInfo;
			Write16(pLoverVipInfo, 0); //len

			Write8(pLoverVipInfo, 0); //LoverVipLevel
			Write32(pLoverVipInfo, 0); //LoverVipPoint
			Write8(pLoverVipInfo, 0); //GrowRate

			len = pLoverVipInfo - pTeamPlayerInfo;
			Set16(pTeamPlayerInfo, (WORD)len);
			pTeamPlayerInfo += len;
		}

		len = pTeamPlayerInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 192, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyGuildMatchInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //GuildID
	Write32(p, 0); //TotalPoint
	Write32(p, 0); //WinNum
	Write32(p, 0); //TotalNum

	len = p - buf;
	SendToClient(Client, 591, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyGuildOneMemberMatchInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //DstUin
	Write32(p, 0); //SelfPoint
	Write32(p, 0); //WinNum
	Write32(p, 0); //TotalNum

	len = p - buf;
	SendToClient(Client, 592, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyJoinTeam(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Score
	{ //TeamPlayerInfo
		BYTE* pTeamPlayerInfo = p;
		Write16(pTeamPlayerInfo, 0); //len

		Write32(pTeamPlayerInfo, 0); //Uin
		Write32(pTeamPlayerInfo, 0); //Identity
		WriteUn(pTeamPlayerInfo, 0); //PlayerID
		Write8(pTeamPlayerInfo, 0); //ReadyInRoom
		{ //PlayerDBBaseInfo
			BYTE* pPlayerDBBaseInfo = pTeamPlayerInfo;
			Write16(pPlayerDBBaseInfo, 0); //len

			WriteString(pPlayerDBBaseInfo, 0); //Nickname[]
			Write8(pPlayerDBBaseInfo, 0); //Gender
			Write8(pPlayerDBBaseInfo, 0); //Country
			Write32(pPlayerDBBaseInfo, 0); //License
			WriteUn(pPlayerDBBaseInfo, 0); //Experience
			Write32(pPlayerDBBaseInfo, 0); //SuperMoney
			Write32(pPlayerDBBaseInfo, 0); //Money
			WriteUn(pPlayerDBBaseInfo, 0); //WinNum
			Write32(pPlayerDBBaseInfo, 0); //SecondNum
			Write32(pPlayerDBBaseInfo, 0); //ThirdNum
			WriteUn(pPlayerDBBaseInfo, 0); //TotalNum
			Write32(pPlayerDBBaseInfo, 0); //CurHonor
			Write32(pPlayerDBBaseInfo, 0); //TotalHonor
			Write32(pPlayerDBBaseInfo, 0); //TodayHonor
			Write32(pPlayerDBBaseInfo, 0); //RelaxTime
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationBefore
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationCur
			Write32(pPlayerDBBaseInfo, 0); //Charm
			Write32(pPlayerDBBaseInfo, 0); //DurationGame
			Write32(pPlayerDBBaseInfo, 0); //DanceExp
			Write32(pPlayerDBBaseInfo, 0); //Coupons
			Write32(pPlayerDBBaseInfo, 0); //Admiration
			Write32(pPlayerDBBaseInfo, 0); //LuckMoney
			Write32(pPlayerDBBaseInfo, 0); //TeamWorkExp
			Write32(pPlayerDBBaseInfo, 0); //AchievePoint
			Write32(pPlayerDBBaseInfo, 0); //RegTime
			WriteString(pPlayerDBBaseInfo, 0); //Signature[]
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchPoint
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchNum
			Write16(pPlayerDBBaseInfo, 0); //LuckyMatchFirstNum
			Write8(pPlayerDBBaseInfo, 0); //LuckyMatchBestRand
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchWinNum
			Write32(pPlayerDBBaseInfo, 0); //FizzPointTotal
			Write16(pPlayerDBBaseInfo, 0); //FizzPointDaily
			Write16(pPlayerDBBaseInfo, 0); //FizzPointWeekly
			Write16(pPlayerDBBaseInfo, 0); //FizzPointLastWeek
			Write8(pPlayerDBBaseInfo, 0); //FizzLotteryStatus
			Write32(pPlayerDBBaseInfo, 0); //FizzLastUpdateTime
			Write32(pPlayerDBBaseInfo, 0); //SNSLocaleCode
			Write32(pPlayerDBBaseInfo, 0); //AuctionRightUnlockTime
			Write8(pPlayerDBBaseInfo, 0); //ReserveFlag
			Write32(pPlayerDBBaseInfo, 0); //CurConsumeScore
			Write32(pPlayerDBBaseInfo, 0); //HistoryConsumeScore
			Write8(pPlayerDBBaseInfo, 0); //CrashModeSponsorID
			Write32(pPlayerDBBaseInfo, 0); //Popularity
			Write32(pPlayerDBBaseInfo, 0); //LadderMatchAchievePoint
			Write32(pPlayerDBBaseInfo, 0); //Cash
			Write32(pPlayerDBBaseInfo, 0); //PlayerGPMIdentity
			Write32(pPlayerDBBaseInfo, 0); //PointTotalScore
			WriteUn(pPlayerDBBaseInfo, 0); //totalMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //lastMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalSeasonId
			WriteUn(pPlayerDBBaseInfo, 0); //lastClearMapMedalTime

			len = pPlayerDBBaseInfo - pTeamPlayerInfo;
			Set16(pTeamPlayerInfo, (WORD)len);
			pTeamPlayerInfo += len;
		}
		{ //PlayerGuildInfo
			BYTE* pPlayerGuildInfo = pTeamPlayerInfo;
			Write16(pPlayerGuildInfo, 0); //len

			WriteString(pPlayerGuildInfo, 0); //GuildName[]
			Write16(pPlayerGuildInfo, 0); //Duty
			Write32(pPlayerGuildInfo, 0); //GuildID
			Write32(pPlayerGuildInfo, 0); //Right
			Write32(pPlayerGuildInfo, 0); //Medal
			Write32(pPlayerGuildInfo, 0); //Contribute
			WriteString(pPlayerGuildInfo, 0); //DutyTitle[]

			len = pPlayerGuildInfo - pTeamPlayerInfo;
			Set16(pTeamPlayerInfo, (WORD)len);
			pTeamPlayerInfo += len;
		}
		{ //PlayerRelationInfo
			BYTE* pPlayerRelationInfo = pTeamPlayerInfo;
			Write16(pPlayerRelationInfo, 0); //len

			Write32(pPlayerRelationInfo, 0); //SrcUin
			Write32(pPlayerRelationInfo, 0); //RelationFlag
			Write32(pPlayerRelationInfo, 0); //RelationUin
			WriteString(pPlayerRelationInfo, 0); //RelationNickname[]
			Write32(pPlayerRelationInfo, 0); //EngageTime
			Write32(pPlayerRelationInfo, 0); //NextCanBookingTimeLimit
			Write32(pPlayerRelationInfo, 0); //BeginHoneyMoonTime
			Write32(pPlayerRelationInfo, 0); //EndHoneyMoonTime
			Write8(pPlayerRelationInfo, 0); //EngageFlag

			len = pPlayerRelationInfo - pTeamPlayerInfo;
			Set16(pTeamPlayerInfo, (WORD)len);
			pTeamPlayerInfo += len;
		}
		WriteUn(pTeamPlayerInfo, 0); //EquipedItemNum
		for (size_t i = 0; i < n; i++)
		{ //PlayerItemInfo
			BYTE* pPlayerItemInfo = pTeamPlayerInfo;
			Write16(pPlayerItemInfo, 0); //len

			Write32(pPlayerItemInfo, 0); //ItemID
			Write32(pPlayerItemInfo, 0); //ItemNum
			Write32(pPlayerItemInfo, 0); //AvailPeriod
			Write8(pPlayerItemInfo, 0); //Status
			WriteUn(pPlayerItemInfo, 0); //ObtainTime
			Write32(pPlayerItemInfo, 0); //OtherAttribute

			len = pPlayerItemInfo - pTeamPlayerInfo;
			Set16(pTeamPlayerInfo, (WORD)len);
			pTeamPlayerInfo += len;
		}
		WriteUn(pTeamPlayerInfo, 0); //PetNum
		for (size_t i = 0; i < n; i++)
		{ //PetInfo
			BYTE* pPetInfo = pTeamPlayerInfo;
			Write16(pPetInfo, 0); //len

			Write32(pPetInfo, 0); //Uin
			Write32(pPetInfo, 0); //PetId
			WriteString(pPetInfo, 0); //PetName[]
			Write8(pPetInfo, 0); //IsProper
			Write16(pPetInfo, 0); //Level
			Write8(pPetInfo, 0); //Status
			Write16(pPetInfo, 0); //PetSkillNum
			for (size_t i = 0; i < n; i++)
			{ //PetSkillList
				BYTE* pPetSkillList = pPetInfo;
				Write16(pPetSkillList, 0); //len

				Write16(pPetSkillList, 0); //SkillID
				Write8(pPetSkillList, 0); //Status
				Write8(pPetSkillList, 0); //Active
				Write32(pPetSkillList, 0); //Value

				len = pPetSkillList - pPetInfo;
				Set16(pPetInfo, (WORD)len);
				pPetInfo += len;
			}
			Write32(pPetInfo, 0); //StrengLevel

			len = pPetInfo - pTeamPlayerInfo;
			Set16(pTeamPlayerInfo, (WORD)len);
			pTeamPlayerInfo += len;
		}
		WriteUn(pTeamPlayerInfo, 0); //KartNum
		for (size_t i = 0; i < n; i++)
		{ //KartRefitInfo
			BYTE* pKartRefitInfo = pTeamPlayerInfo;
			Write16(pKartRefitInfo, 0); //len

			Write32(pKartRefitInfo, 0); //Uin
			Write32(pKartRefitInfo, 0); //KartId
			Write32(pKartRefitInfo, 0); //RefitCout
			Write16(pKartRefitInfo, 0); //MaxFlags
			Write16(pKartRefitInfo, 0); //WWeight
			Write16(pKartRefitInfo, 0); //SpeedWeight
			Write16(pKartRefitInfo, 0); //JetWeight
			Write16(pKartRefitInfo, 0); //SJetWeight
			Write16(pKartRefitInfo, 0); //AccuWeight
			Write32(pKartRefitInfo, 0); //ShapeRefitCount
			Write32(pKartRefitInfo, 0); //KartHeadRefitItemID
			Write32(pKartRefitInfo, 0); //KartTailRefitItemID
			Write32(pKartRefitInfo, 0); //KartFlankRefitItemID
			Write32(pKartRefitInfo, 0); //KartTireRefitItemID

			len = pKartRefitInfo - pTeamPlayerInfo;
			Set16(pTeamPlayerInfo, (WORD)len);
			pTeamPlayerInfo += len;
		}
		WriteUn(pTeamPlayerInfo, 0); //VipFlag
		{ //NobleInfo
			BYTE* pNobleInfo = pTeamPlayerInfo;
			Write16(pNobleInfo, 0); //len

			Write32(pNobleInfo, 0); //NobleID
			Write8(pNobleInfo, 0); //NobleLevel
			Write32(pNobleInfo, 0); //NoblePoint
			Write32(pNobleInfo, 0); //NobleLeftDays

			len = pNobleInfo - pTeamPlayerInfo;
			Set16(pTeamPlayerInfo, (WORD)len);
			pTeamPlayerInfo += len;
		}
		{ //GuildVipBaseInfo
			BYTE* pGuildVipBaseInfo = pTeamPlayerInfo;
			Write16(pGuildVipBaseInfo, 0); //len

			Write8(pGuildVipBaseInfo, 0); //GuildVipLevel
			Write32(pGuildVipBaseInfo, 0); //GuildVipPoint

			len = pGuildVipBaseInfo - pTeamPlayerInfo;
			Set16(pTeamPlayerInfo, (WORD)len);
			pTeamPlayerInfo += len;
		}
		Write8(pTeamPlayerInfo, 0); //HasLoverVip
		for (size_t i = 0; i < n; i++)
		{ //LoverVipInfo
			BYTE* pLoverVipInfo = pTeamPlayerInfo;
			Write16(pLoverVipInfo, 0); //len

			Write8(pLoverVipInfo, 0); //LoverVipLevel
			Write32(pLoverVipInfo, 0); //LoverVipPoint
			Write8(pLoverVipInfo, 0); //GrowRate

			len = pLoverVipInfo - pTeamPlayerInfo;
			Set16(pTeamPlayerInfo, (WORD)len);
			pTeamPlayerInfo += len;
		}

		len = pTeamPlayerInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 611, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestRemoveTeamMember(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT DstUin = Read32(p);

}

void ResponseRemoveTeamMember(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 193, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestQuitTeam(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseQuitTeam(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 194, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyQuitTeam(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //NewLeaderUin

	len = p - buf;
	SendToClient(Client, 612, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetTeamList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT StartIdx = Read32(p);
	UINT TeamCount = Read32(p);
	bool Range = Read8(p);
	int Score1 = Read32(p);
	int Score2 = Read32(p);

}

void ResponseGetTeamList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //GuildScore
	Write32(p, 0); //StartIdx
	Write32(p, 0); //TeamCount
	for (size_t i = 0; i < n; i++)
	{ //TeamInfo
		BYTE* pTeamInfo = p;
		Write16(pTeamInfo, 0); //len

		Write32(pTeamInfo, 0); //TeamID
		Write32(pTeamInfo, 0); //GuildScore
		WriteString(pTeamInfo, 0); //GuildName[]
		WriteString(pTeamInfo, 0); //LeaderName[]

		len = pTeamInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 195, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetTeamListByGuildName(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	char[] GuildName[] = ReadString(p);

}

void ResponseGetTeamListByGuildName(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //GuildScore
	WriteString(p, 0); //GuildName[]
	Write32(p, 0); //TeamCount
	for (size_t i = 0; i < n; i++)
	{ //TeamInfo
		BYTE* pTeamInfo = p;
		Write16(pTeamInfo, 0); //len

		Write32(pTeamInfo, 0); //TeamID
		Write32(pTeamInfo, 0); //GuildScore
		WriteString(pTeamInfo, 0); //GuildName[]
		WriteString(pTeamInfo, 0); //LeaderName[]

		len = pTeamInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 198, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetTeamMemeberList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int TeamID = Read32(p);

}

void ResponseGetTeamMemeberList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //TeamID
	Write32(p, 0); //MemberCount
	for (size_t i = 0; i < n; i++)
	{ //FriendBaseInfo
		BYTE* pFriendBaseInfo = p;
		Write16(pFriendBaseInfo, 0); //len

		WriteUn(pFriendBaseInfo, 0); //Uin
		WriteString(pFriendBaseInfo, 0); //Nickname[]
		Write8(pFriendBaseInfo, 0); //Gender
		WriteUn(pFriendBaseInfo, 0); //Identity
		Write8(pFriendBaseInfo, 0); //IsOnLine
		WriteUn(pFriendBaseInfo, 0); //Experience
		Write32(pFriendBaseInfo, 0); //License
		Write32(pFriendBaseInfo, 0); //TotalHonor
		Write32(pFriendBaseInfo, 0); //Charm
		Write32(pFriendBaseInfo, 0); //DanceExp
		Write32(pFriendBaseInfo, 0); //Admiration
		Write32(pFriendBaseInfo, 0); //TeamWorkExp
		WriteString(pFriendBaseInfo, 0); //Signature[]
		WriteUn(pFriendBaseInfo, 0); //VipFlag
		Write32(pFriendBaseInfo, 0); //LocaleCode
		Write8(pFriendBaseInfo, 0); //HaveAppellation
		for (size_t i = 0; i < n; i++)
		{ //CurAppellation
			BYTE* pCurAppellation = pFriendBaseInfo;
			Write16(pCurAppellation, 0); //len

			Write8(pCurAppellation, 0); //Type
			Write8(pCurAppellation, 0); //Level
			Write8(pCurAppellation, 0); //Status
			Write8(pCurAppellation, 0); //Difficulty
			Write32(pCurAppellation, 0); //MapId
			Write32(pCurAppellation, 0); //Value

			len = pCurAppellation - pFriendBaseInfo;
			Set16(pFriendBaseInfo, (WORD)len);
			pFriendBaseInfo += len;
		}
		{ //NobleInfo
			BYTE* pNobleInfo = pFriendBaseInfo;
			Write16(pNobleInfo, 0); //len

			Write32(pNobleInfo, 0); //NobleID
			Write8(pNobleInfo, 0); //NobleLevel
			Write32(pNobleInfo, 0); //NoblePoint
			Write32(pNobleInfo, 0); //NobleLeftDays

			len = pNobleInfo - pFriendBaseInfo;
			Set16(pFriendBaseInfo, (WORD)len);
			pFriendBaseInfo += len;
		}
		Write8(pFriendBaseInfo, 0); //HasWizard
		{ //GuildVipBaseInfo
			BYTE* pGuildVipBaseInfo = pFriendBaseInfo;
			Write16(pGuildVipBaseInfo, 0); //len

			Write8(pGuildVipBaseInfo, 0); //GuildVipLevel
			Write32(pGuildVipBaseInfo, 0); //GuildVipPoint

			len = pGuildVipBaseInfo - pFriendBaseInfo;
			Set16(pFriendBaseInfo, (WORD)len);
			pFriendBaseInfo += len;
		}
		Write8(pFriendBaseInfo, 0); //HasLDMInfo
		for (size_t i = 0; i < n; i++)
		{ //LDMInfo
			BYTE* pLDMInfo = pFriendBaseInfo;
			Write16(pLDMInfo, 0); //len

			Write8(pLDMInfo, 0); //Grade
			Write32(pLDMInfo, 0); //Score
			Write32(pLDMInfo, 0); //MaxScore
			Write32(pLDMInfo, 0); //MaxGrade

			len = pLDMInfo - pFriendBaseInfo;
			Set16(pFriendBaseInfo, (WORD)len);
			pFriendBaseInfo += len;
		}
		Write8(pFriendBaseInfo, 0); //HasLoverVip
		for (size_t i = 0; i < n; i++)
		{ //LoverVipInfo
			BYTE* pLoverVipInfo = pFriendBaseInfo;
			Write16(pLoverVipInfo, 0); //len

			Write8(pLoverVipInfo, 0); //LoverVipLevel
			Write32(pLoverVipInfo, 0); //LoverVipPoint
			Write8(pLoverVipInfo, 0); //GrowRate

			len = pLoverVipInfo - pFriendBaseInfo;
			Set16(pFriendBaseInfo, (WORD)len);
			pFriendBaseInfo += len;
		}
		Write32(pFriendBaseInfo, 0); //MaxDayPveScore
		Write32(pFriendBaseInfo, 0); //MaxHistoryPveScore
		WriteUn(pFriendBaseInfo, 0); //totalMapMedalNum

		len = pFriendBaseInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 196, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestTeamInvitePlayer(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT DstUin = Read32(p);

}

void ResponseTeamInvitePlayer(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //DstUin
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 197, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyBeTeamInvited(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //SrcUin
	WriteString(p, 0); //SrcNickName[]
	Write32(p, 0); //DstUin
	Write32(p, 0); //ServerID
	Write32(p, 0); //TeamID

	len = p - buf;
	SendToClient(Client, 613, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestCreateTeamRoom(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	short GameMode = Read16(p);
	char[] RoomName[] = ReadString(p);
	int MapID = Read32(p);
	int CarID = Read32(p);
	bool Flag = Read8(p);
	char[] Password[] = ReadString(p);

}

void ResponseCreateTeamRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 211, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyCreateTeamRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //GameMode
	WriteString(p, 0); //RoomName[]
	Write32(p, 0); //MapID
	Write32(p, 0); //CarID
	Write32(p, 0); //RoomOwnerUin
	Write8(p, 0); //RoomType
	Write32(p, 0); //PreKnowMapID

	len = p - buf;
	SendToClient(Client, 623, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestEnterTeamRoom(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	Un Time = ReadUn(p);
	short RoomID = Read16(p);
	char[] Password[] = ReadString(p);
	UINT InviteUin = Read32(p);

}

void ResponseEnterTeamRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 212, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyRoomAndOtherTeamInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //GameMode
	WriteString(p, 0); //RoomName[]
	Write32(p, 0); //MapID
	Write32(p, 0); //CarID
	Write32(p, 0); //RoomOwnerUin
	Write8(p, 0); //RoomType
	Write16(p, 0); //GameScore
	Write8(p, 0); //MasterTeam
	WriteUn(p, 0); //MemberNum
	for (size_t i = 0; i < n; i++)
	{ //MemberInfo
		BYTE* pMemberInfo = p;
		Write16(pMemberInfo, 0); //len

		Write32(pMemberInfo, 0); //Uin
		Write32(pMemberInfo, 0); //Identity
		WriteUn(pMemberInfo, 0); //PlayerID
		Write8(pMemberInfo, 0); //ReadyInRoom
		{ //PlayerDBBaseInfo
			BYTE* pPlayerDBBaseInfo = pMemberInfo;
			Write16(pPlayerDBBaseInfo, 0); //len

			WriteString(pPlayerDBBaseInfo, 0); //Nickname[]
			Write8(pPlayerDBBaseInfo, 0); //Gender
			Write8(pPlayerDBBaseInfo, 0); //Country
			Write32(pPlayerDBBaseInfo, 0); //License
			WriteUn(pPlayerDBBaseInfo, 0); //Experience
			Write32(pPlayerDBBaseInfo, 0); //SuperMoney
			Write32(pPlayerDBBaseInfo, 0); //Money
			WriteUn(pPlayerDBBaseInfo, 0); //WinNum
			Write32(pPlayerDBBaseInfo, 0); //SecondNum
			Write32(pPlayerDBBaseInfo, 0); //ThirdNum
			WriteUn(pPlayerDBBaseInfo, 0); //TotalNum
			Write32(pPlayerDBBaseInfo, 0); //CurHonor
			Write32(pPlayerDBBaseInfo, 0); //TotalHonor
			Write32(pPlayerDBBaseInfo, 0); //TodayHonor
			Write32(pPlayerDBBaseInfo, 0); //RelaxTime
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationBefore
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationCur
			Write32(pPlayerDBBaseInfo, 0); //Charm
			Write32(pPlayerDBBaseInfo, 0); //DurationGame
			Write32(pPlayerDBBaseInfo, 0); //DanceExp
			Write32(pPlayerDBBaseInfo, 0); //Coupons
			Write32(pPlayerDBBaseInfo, 0); //Admiration
			Write32(pPlayerDBBaseInfo, 0); //LuckMoney
			Write32(pPlayerDBBaseInfo, 0); //TeamWorkExp
			Write32(pPlayerDBBaseInfo, 0); //AchievePoint
			Write32(pPlayerDBBaseInfo, 0); //RegTime
			WriteString(pPlayerDBBaseInfo, 0); //Signature[]
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchPoint
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchNum
			Write16(pPlayerDBBaseInfo, 0); //LuckyMatchFirstNum
			Write8(pPlayerDBBaseInfo, 0); //LuckyMatchBestRand
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchWinNum
			Write32(pPlayerDBBaseInfo, 0); //FizzPointTotal
			Write16(pPlayerDBBaseInfo, 0); //FizzPointDaily
			Write16(pPlayerDBBaseInfo, 0); //FizzPointWeekly
			Write16(pPlayerDBBaseInfo, 0); //FizzPointLastWeek
			Write8(pPlayerDBBaseInfo, 0); //FizzLotteryStatus
			Write32(pPlayerDBBaseInfo, 0); //FizzLastUpdateTime
			Write32(pPlayerDBBaseInfo, 0); //SNSLocaleCode
			Write32(pPlayerDBBaseInfo, 0); //AuctionRightUnlockTime
			Write8(pPlayerDBBaseInfo, 0); //ReserveFlag
			Write32(pPlayerDBBaseInfo, 0); //CurConsumeScore
			Write32(pPlayerDBBaseInfo, 0); //HistoryConsumeScore
			Write8(pPlayerDBBaseInfo, 0); //CrashModeSponsorID
			Write32(pPlayerDBBaseInfo, 0); //Popularity
			Write32(pPlayerDBBaseInfo, 0); //LadderMatchAchievePoint
			Write32(pPlayerDBBaseInfo, 0); //Cash
			Write32(pPlayerDBBaseInfo, 0); //PlayerGPMIdentity
			Write32(pPlayerDBBaseInfo, 0); //PointTotalScore
			WriteUn(pPlayerDBBaseInfo, 0); //totalMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //lastMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalSeasonId
			WriteUn(pPlayerDBBaseInfo, 0); //lastClearMapMedalTime

			len = pPlayerDBBaseInfo - pMemberInfo;
			Set16(pMemberInfo, (WORD)len);
			pMemberInfo += len;
		}
		{ //PlayerGuildInfo
			BYTE* pPlayerGuildInfo = pMemberInfo;
			Write16(pPlayerGuildInfo, 0); //len

			WriteString(pPlayerGuildInfo, 0); //GuildName[]
			Write16(pPlayerGuildInfo, 0); //Duty
			Write32(pPlayerGuildInfo, 0); //GuildID
			Write32(pPlayerGuildInfo, 0); //Right
			Write32(pPlayerGuildInfo, 0); //Medal
			Write32(pPlayerGuildInfo, 0); //Contribute
			WriteString(pPlayerGuildInfo, 0); //DutyTitle[]

			len = pPlayerGuildInfo - pMemberInfo;
			Set16(pMemberInfo, (WORD)len);
			pMemberInfo += len;
		}
		{ //PlayerRelationInfo
			BYTE* pPlayerRelationInfo = pMemberInfo;
			Write16(pPlayerRelationInfo, 0); //len

			Write32(pPlayerRelationInfo, 0); //SrcUin
			Write32(pPlayerRelationInfo, 0); //RelationFlag
			Write32(pPlayerRelationInfo, 0); //RelationUin
			WriteString(pPlayerRelationInfo, 0); //RelationNickname[]
			Write32(pPlayerRelationInfo, 0); //EngageTime
			Write32(pPlayerRelationInfo, 0); //NextCanBookingTimeLimit
			Write32(pPlayerRelationInfo, 0); //BeginHoneyMoonTime
			Write32(pPlayerRelationInfo, 0); //EndHoneyMoonTime
			Write8(pPlayerRelationInfo, 0); //EngageFlag

			len = pPlayerRelationInfo - pMemberInfo;
			Set16(pMemberInfo, (WORD)len);
			pMemberInfo += len;
		}
		WriteUn(pMemberInfo, 0); //EquipedItemNum
		for (size_t i = 0; i < n; i++)
		{ //PlayerItemInfo
			BYTE* pPlayerItemInfo = pMemberInfo;
			Write16(pPlayerItemInfo, 0); //len

			Write32(pPlayerItemInfo, 0); //ItemID
			Write32(pPlayerItemInfo, 0); //ItemNum
			Write32(pPlayerItemInfo, 0); //AvailPeriod
			Write8(pPlayerItemInfo, 0); //Status
			WriteUn(pPlayerItemInfo, 0); //ObtainTime
			Write32(pPlayerItemInfo, 0); //OtherAttribute

			len = pPlayerItemInfo - pMemberInfo;
			Set16(pMemberInfo, (WORD)len);
			pMemberInfo += len;
		}
		WriteUn(pMemberInfo, 0); //PetNum
		for (size_t i = 0; i < n; i++)
		{ //PetInfo
			BYTE* pPetInfo = pMemberInfo;
			Write16(pPetInfo, 0); //len

			Write32(pPetInfo, 0); //Uin
			Write32(pPetInfo, 0); //PetId
			WriteString(pPetInfo, 0); //PetName[]
			Write8(pPetInfo, 0); //IsProper
			Write16(pPetInfo, 0); //Level
			Write8(pPetInfo, 0); //Status
			Write16(pPetInfo, 0); //PetSkillNum
			for (size_t i = 0; i < n; i++)
			{ //PetSkillList
				BYTE* pPetSkillList = pPetInfo;
				Write16(pPetSkillList, 0); //len

				Write16(pPetSkillList, 0); //SkillID
				Write8(pPetSkillList, 0); //Status
				Write8(pPetSkillList, 0); //Active
				Write32(pPetSkillList, 0); //Value

				len = pPetSkillList - pPetInfo;
				Set16(pPetInfo, (WORD)len);
				pPetInfo += len;
			}
			Write32(pPetInfo, 0); //StrengLevel

			len = pPetInfo - pMemberInfo;
			Set16(pMemberInfo, (WORD)len);
			pMemberInfo += len;
		}
		WriteUn(pMemberInfo, 0); //KartNum
		for (size_t i = 0; i < n; i++)
		{ //KartRefitInfo
			BYTE* pKartRefitInfo = pMemberInfo;
			Write16(pKartRefitInfo, 0); //len

			Write32(pKartRefitInfo, 0); //Uin
			Write32(pKartRefitInfo, 0); //KartId
			Write32(pKartRefitInfo, 0); //RefitCout
			Write16(pKartRefitInfo, 0); //MaxFlags
			Write16(pKartRefitInfo, 0); //WWeight
			Write16(pKartRefitInfo, 0); //SpeedWeight
			Write16(pKartRefitInfo, 0); //JetWeight
			Write16(pKartRefitInfo, 0); //SJetWeight
			Write16(pKartRefitInfo, 0); //AccuWeight
			Write32(pKartRefitInfo, 0); //ShapeRefitCount
			Write32(pKartRefitInfo, 0); //KartHeadRefitItemID
			Write32(pKartRefitInfo, 0); //KartTailRefitItemID
			Write32(pKartRefitInfo, 0); //KartFlankRefitItemID
			Write32(pKartRefitInfo, 0); //KartTireRefitItemID

			len = pKartRefitInfo - pMemberInfo;
			Set16(pMemberInfo, (WORD)len);
			pMemberInfo += len;
		}
		WriteUn(pMemberInfo, 0); //VipFlag
		{ //NobleInfo
			BYTE* pNobleInfo = pMemberInfo;
			Write16(pNobleInfo, 0); //len

			Write32(pNobleInfo, 0); //NobleID
			Write8(pNobleInfo, 0); //NobleLevel
			Write32(pNobleInfo, 0); //NoblePoint
			Write32(pNobleInfo, 0); //NobleLeftDays

			len = pNobleInfo - pMemberInfo;
			Set16(pMemberInfo, (WORD)len);
			pMemberInfo += len;
		}
		{ //GuildVipBaseInfo
			BYTE* pGuildVipBaseInfo = pMemberInfo;
			Write16(pGuildVipBaseInfo, 0); //len

			Write8(pGuildVipBaseInfo, 0); //GuildVipLevel
			Write32(pGuildVipBaseInfo, 0); //GuildVipPoint

			len = pGuildVipBaseInfo - pMemberInfo;
			Set16(pMemberInfo, (WORD)len);
			pMemberInfo += len;
		}
		Write8(pMemberInfo, 0); //HasLoverVip
		for (size_t i = 0; i < n; i++)
		{ //LoverVipInfo
			BYTE* pLoverVipInfo = pMemberInfo;
			Write16(pLoverVipInfo, 0); //len

			Write8(pLoverVipInfo, 0); //LoverVipLevel
			Write32(pLoverVipInfo, 0); //LoverVipPoint
			Write8(pLoverVipInfo, 0); //GrowRate

			len = pLoverVipInfo - pMemberInfo;
			Set16(pMemberInfo, (WORD)len);
			pMemberInfo += len;
		}

		len = pMemberInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //PreKnowMapID

	len = p - buf;
	SendToClient(Client, 624, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyTeamInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //GameScore
	WriteUn(p, 0); //MemberNum
	for (size_t i = 0; i < n; i++)
	{ //MemberInfo
		BYTE* pMemberInfo = p;
		Write16(pMemberInfo, 0); //len

		Write32(pMemberInfo, 0); //Uin
		Write32(pMemberInfo, 0); //Identity
		WriteUn(pMemberInfo, 0); //PlayerID
		Write8(pMemberInfo, 0); //ReadyInRoom
		{ //PlayerDBBaseInfo
			BYTE* pPlayerDBBaseInfo = pMemberInfo;
			Write16(pPlayerDBBaseInfo, 0); //len

			WriteString(pPlayerDBBaseInfo, 0); //Nickname[]
			Write8(pPlayerDBBaseInfo, 0); //Gender
			Write8(pPlayerDBBaseInfo, 0); //Country
			Write32(pPlayerDBBaseInfo, 0); //License
			WriteUn(pPlayerDBBaseInfo, 0); //Experience
			Write32(pPlayerDBBaseInfo, 0); //SuperMoney
			Write32(pPlayerDBBaseInfo, 0); //Money
			WriteUn(pPlayerDBBaseInfo, 0); //WinNum
			Write32(pPlayerDBBaseInfo, 0); //SecondNum
			Write32(pPlayerDBBaseInfo, 0); //ThirdNum
			WriteUn(pPlayerDBBaseInfo, 0); //TotalNum
			Write32(pPlayerDBBaseInfo, 0); //CurHonor
			Write32(pPlayerDBBaseInfo, 0); //TotalHonor
			Write32(pPlayerDBBaseInfo, 0); //TodayHonor
			Write32(pPlayerDBBaseInfo, 0); //RelaxTime
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationBefore
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationCur
			Write32(pPlayerDBBaseInfo, 0); //Charm
			Write32(pPlayerDBBaseInfo, 0); //DurationGame
			Write32(pPlayerDBBaseInfo, 0); //DanceExp
			Write32(pPlayerDBBaseInfo, 0); //Coupons
			Write32(pPlayerDBBaseInfo, 0); //Admiration
			Write32(pPlayerDBBaseInfo, 0); //LuckMoney
			Write32(pPlayerDBBaseInfo, 0); //TeamWorkExp
			Write32(pPlayerDBBaseInfo, 0); //AchievePoint
			Write32(pPlayerDBBaseInfo, 0); //RegTime
			WriteString(pPlayerDBBaseInfo, 0); //Signature[]
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchPoint
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchNum
			Write16(pPlayerDBBaseInfo, 0); //LuckyMatchFirstNum
			Write8(pPlayerDBBaseInfo, 0); //LuckyMatchBestRand
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchWinNum
			Write32(pPlayerDBBaseInfo, 0); //FizzPointTotal
			Write16(pPlayerDBBaseInfo, 0); //FizzPointDaily
			Write16(pPlayerDBBaseInfo, 0); //FizzPointWeekly
			Write16(pPlayerDBBaseInfo, 0); //FizzPointLastWeek
			Write8(pPlayerDBBaseInfo, 0); //FizzLotteryStatus
			Write32(pPlayerDBBaseInfo, 0); //FizzLastUpdateTime
			Write32(pPlayerDBBaseInfo, 0); //SNSLocaleCode
			Write32(pPlayerDBBaseInfo, 0); //AuctionRightUnlockTime
			Write8(pPlayerDBBaseInfo, 0); //ReserveFlag
			Write32(pPlayerDBBaseInfo, 0); //CurConsumeScore
			Write32(pPlayerDBBaseInfo, 0); //HistoryConsumeScore
			Write8(pPlayerDBBaseInfo, 0); //CrashModeSponsorID
			Write32(pPlayerDBBaseInfo, 0); //Popularity
			Write32(pPlayerDBBaseInfo, 0); //LadderMatchAchievePoint
			Write32(pPlayerDBBaseInfo, 0); //Cash
			Write32(pPlayerDBBaseInfo, 0); //PlayerGPMIdentity
			Write32(pPlayerDBBaseInfo, 0); //PointTotalScore
			WriteUn(pPlayerDBBaseInfo, 0); //totalMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //lastMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalSeasonId
			WriteUn(pPlayerDBBaseInfo, 0); //lastClearMapMedalTime

			len = pPlayerDBBaseInfo - pMemberInfo;
			Set16(pMemberInfo, (WORD)len);
			pMemberInfo += len;
		}
		{ //PlayerGuildInfo
			BYTE* pPlayerGuildInfo = pMemberInfo;
			Write16(pPlayerGuildInfo, 0); //len

			WriteString(pPlayerGuildInfo, 0); //GuildName[]
			Write16(pPlayerGuildInfo, 0); //Duty
			Write32(pPlayerGuildInfo, 0); //GuildID
			Write32(pPlayerGuildInfo, 0); //Right
			Write32(pPlayerGuildInfo, 0); //Medal
			Write32(pPlayerGuildInfo, 0); //Contribute
			WriteString(pPlayerGuildInfo, 0); //DutyTitle[]

			len = pPlayerGuildInfo - pMemberInfo;
			Set16(pMemberInfo, (WORD)len);
			pMemberInfo += len;
		}
		{ //PlayerRelationInfo
			BYTE* pPlayerRelationInfo = pMemberInfo;
			Write16(pPlayerRelationInfo, 0); //len

			Write32(pPlayerRelationInfo, 0); //SrcUin
			Write32(pPlayerRelationInfo, 0); //RelationFlag
			Write32(pPlayerRelationInfo, 0); //RelationUin
			WriteString(pPlayerRelationInfo, 0); //RelationNickname[]
			Write32(pPlayerRelationInfo, 0); //EngageTime
			Write32(pPlayerRelationInfo, 0); //NextCanBookingTimeLimit
			Write32(pPlayerRelationInfo, 0); //BeginHoneyMoonTime
			Write32(pPlayerRelationInfo, 0); //EndHoneyMoonTime
			Write8(pPlayerRelationInfo, 0); //EngageFlag

			len = pPlayerRelationInfo - pMemberInfo;
			Set16(pMemberInfo, (WORD)len);
			pMemberInfo += len;
		}
		WriteUn(pMemberInfo, 0); //EquipedItemNum
		for (size_t i = 0; i < n; i++)
		{ //PlayerItemInfo
			BYTE* pPlayerItemInfo = pMemberInfo;
			Write16(pPlayerItemInfo, 0); //len

			Write32(pPlayerItemInfo, 0); //ItemID
			Write32(pPlayerItemInfo, 0); //ItemNum
			Write32(pPlayerItemInfo, 0); //AvailPeriod
			Write8(pPlayerItemInfo, 0); //Status
			WriteUn(pPlayerItemInfo, 0); //ObtainTime
			Write32(pPlayerItemInfo, 0); //OtherAttribute

			len = pPlayerItemInfo - pMemberInfo;
			Set16(pMemberInfo, (WORD)len);
			pMemberInfo += len;
		}
		WriteUn(pMemberInfo, 0); //PetNum
		for (size_t i = 0; i < n; i++)
		{ //PetInfo
			BYTE* pPetInfo = pMemberInfo;
			Write16(pPetInfo, 0); //len

			Write32(pPetInfo, 0); //Uin
			Write32(pPetInfo, 0); //PetId
			WriteString(pPetInfo, 0); //PetName[]
			Write8(pPetInfo, 0); //IsProper
			Write16(pPetInfo, 0); //Level
			Write8(pPetInfo, 0); //Status
			Write16(pPetInfo, 0); //PetSkillNum
			for (size_t i = 0; i < n; i++)
			{ //PetSkillList
				BYTE* pPetSkillList = pPetInfo;
				Write16(pPetSkillList, 0); //len

				Write16(pPetSkillList, 0); //SkillID
				Write8(pPetSkillList, 0); //Status
				Write8(pPetSkillList, 0); //Active
				Write32(pPetSkillList, 0); //Value

				len = pPetSkillList - pPetInfo;
				Set16(pPetInfo, (WORD)len);
				pPetInfo += len;
			}
			Write32(pPetInfo, 0); //StrengLevel

			len = pPetInfo - pMemberInfo;
			Set16(pMemberInfo, (WORD)len);
			pMemberInfo += len;
		}
		WriteUn(pMemberInfo, 0); //KartNum
		for (size_t i = 0; i < n; i++)
		{ //KartRefitInfo
			BYTE* pKartRefitInfo = pMemberInfo;
			Write16(pKartRefitInfo, 0); //len

			Write32(pKartRefitInfo, 0); //Uin
			Write32(pKartRefitInfo, 0); //KartId
			Write32(pKartRefitInfo, 0); //RefitCout
			Write16(pKartRefitInfo, 0); //MaxFlags
			Write16(pKartRefitInfo, 0); //WWeight
			Write16(pKartRefitInfo, 0); //SpeedWeight
			Write16(pKartRefitInfo, 0); //JetWeight
			Write16(pKartRefitInfo, 0); //SJetWeight
			Write16(pKartRefitInfo, 0); //AccuWeight
			Write32(pKartRefitInfo, 0); //ShapeRefitCount
			Write32(pKartRefitInfo, 0); //KartHeadRefitItemID
			Write32(pKartRefitInfo, 0); //KartTailRefitItemID
			Write32(pKartRefitInfo, 0); //KartFlankRefitItemID
			Write32(pKartRefitInfo, 0); //KartTireRefitItemID

			len = pKartRefitInfo - pMemberInfo;
			Set16(pMemberInfo, (WORD)len);
			pMemberInfo += len;
		}
		WriteUn(pMemberInfo, 0); //VipFlag
		{ //NobleInfo
			BYTE* pNobleInfo = pMemberInfo;
			Write16(pNobleInfo, 0); //len

			Write32(pNobleInfo, 0); //NobleID
			Write8(pNobleInfo, 0); //NobleLevel
			Write32(pNobleInfo, 0); //NoblePoint
			Write32(pNobleInfo, 0); //NobleLeftDays

			len = pNobleInfo - pMemberInfo;
			Set16(pMemberInfo, (WORD)len);
			pMemberInfo += len;
		}
		{ //GuildVipBaseInfo
			BYTE* pGuildVipBaseInfo = pMemberInfo;
			Write16(pGuildVipBaseInfo, 0); //len

			Write8(pGuildVipBaseInfo, 0); //GuildVipLevel
			Write32(pGuildVipBaseInfo, 0); //GuildVipPoint

			len = pGuildVipBaseInfo - pMemberInfo;
			Set16(pMemberInfo, (WORD)len);
			pMemberInfo += len;
		}
		Write8(pMemberInfo, 0); //HasLoverVip
		for (size_t i = 0; i < n; i++)
		{ //LoverVipInfo
			BYTE* pLoverVipInfo = pMemberInfo;
			Write16(pLoverVipInfo, 0); //len

			Write8(pLoverVipInfo, 0); //LoverVipLevel
			Write32(pLoverVipInfo, 0); //LoverVipPoint
			Write8(pLoverVipInfo, 0); //GrowRate

			len = pLoverVipInfo - pMemberInfo;
			Set16(pMemberInfo, (WORD)len);
			pMemberInfo += len;
		}

		len = pMemberInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 621, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestLeaveTeamRoom(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	Un Time = ReadUn(p);

}

void ResponseLeaveTeamRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 213, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyLeaveTeamRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write8(p, 0); //Type
	Write32(p, 0); //NewRoomOwnerUin

	len = p - buf;
	SendToClient(Client, 622, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestKickFromTeamRoom(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	Un Time = ReadUn(p);
	UINT DstUin = Read32(p);

}

void ResponseKickFromTeamRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 215, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyKickFromTeamRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //DstUin

	len = p - buf;
	SendToClient(Client, 625, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetTeamRoomList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT StartIdx = Read32(p);
	UINT RoomCount = Read32(p);
	bool Range = Read8(p);
	int Score1 = Read32(p);
	int Score2 = Read32(p);

}

void ResponseGetTeamRoomList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //GuildScore
	Write32(p, 0); //StartIdx
	Write32(p, 0); //RoomCount
	for (size_t i = 0; i < n; i++)
	{ //RoomInfo
		BYTE* pRoomInfo = p;
		Write16(pRoomInfo, 0); //len

		Write32(pRoomInfo, 0); //RoomID
		Write32(pRoomInfo, 0); //GuildScore
		WriteString(pRoomInfo, 0); //GuildName[]
		WriteString(pRoomInfo, 0); //LeaderName[]
		Write8(pRoomInfo, 0); //HasKey
		Write8(pRoomInfo, 0); //RoomType
		Write8(pRoomInfo, 0); //RoomStatus
		Write32(pRoomInfo, 0); //MapID
		Write32(pRoomInfo, 0); //CarID
		Write16(pRoomInfo, 0); //GameMode

		len = pRoomInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 214, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetTeamRoomListByGuildName(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	char[] GuildName[] = ReadString(p);

}

void ResponseGetTeamRoomListByGuildName(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //GuildScore
	WriteString(p, 0); //GuildName[]
	Write32(p, 0); //RoomCount
	for (size_t i = 0; i < n; i++)
	{ //RoomInfo
		BYTE* pRoomInfo = p;
		Write16(pRoomInfo, 0); //len

		Write32(pRoomInfo, 0); //RoomID
		Write32(pRoomInfo, 0); //GuildScore
		WriteString(pRoomInfo, 0); //GuildName[]
		WriteString(pRoomInfo, 0); //LeaderName[]
		Write8(pRoomInfo, 0); //HasKey
		Write8(pRoomInfo, 0); //RoomType
		Write8(pRoomInfo, 0); //RoomStatus
		Write32(pRoomInfo, 0); //MapID
		Write32(pRoomInfo, 0); //CarID
		Write16(pRoomInfo, 0); //GameMode

		len = pRoomInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 219, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyTeamRaceOver(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //CurrentPlayerNum
	for (size_t i = 0; i < n; i++)
	{ //RaceScore
		BYTE* pRaceScore = p;
		Write16(pRaceScore, 0); //len

		WriteUn(pRaceScore, 0); //Uin
		WriteUn(pRaceScore, 0); //FinTime
		Write32(pRaceScore, 0); //TP
		Write32(pRaceScore, 0); //MoneyInc
		Write32(pRaceScore, 0); //TotalMoney
		Write32(pRaceScore, 0); //ExpInc
		Write32(pRaceScore, 0); //TotalExp
		Write8(pRaceScore, 0); //AwardNum
		Write32(pRaceScore, 0); //SpecialAward[]
		Write32(pRaceScore, 0); //TeamWorkExpInc
		Write32(pRaceScore, 0); //PropPoint
		Write32(pRaceScore, 0); //PropPointAddExp
		Write32(pRaceScore, 0); //LuckyMatchPointInc
		Write32(pRaceScore, 0); //LuckyMatchPointTotal
		Write32(pRaceScore, 0); //LuckyMatchScoreInc
		Write32(pRaceScore, 0); //LuckyMatchScoreTotal
		Write32(pRaceScore, 0); //LuckMoneyInc
		Write32(pRaceScore, 0); //LuckMoneyTotal
		Write32(pRaceScore, 0); //GuildScoreInc
		Write8(pRaceScore, 0); //CrazyPropAchieveNum
		Write32(pRaceScore, 0); //CrazyPropAchieve[]
		WriteU(pRaceScore, 0); //IncWlMatchScore
		WriteU(pRaceScore, 0); //IncWlDegree
		WriteU(pRaceScore, 0); //IncItemNumByWl
		for (size_t i = 0; i < n; i++)
		{ //IncItemInfoByWl
			BYTE* pIncItemInfoByWl = pRaceScore;
			Write16(pIncItemInfoByWl, 0); //len

			Write16(pIncItemInfoByWl, 0); //GenderItemNum
			Write32(pIncItemInfoByWl, 0); //ItemID[]
			Write16(pIncItemInfoByWl, 0); //ItemNum
			Write32(pIncItemInfoByWl, 0); //AvailPeriod

			len = pIncItemInfoByWl - pRaceScore;
			Set16(pRaceScore, (WORD)len);
			pRaceScore += len;
		}
		Write32(pRaceScore, 0); //WlMutiplyCard
		Write32(pRaceScore, 0); //SkateCoinInc
		Write32(pRaceScore, 0); //SkateCoinTotal
		Write32(pRaceScore, 0); //SkateCoinHistoryTotal

		len = pRaceScore - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //WinTeamLeaderUin
	Write32(p, 0); //WinTeamScore
	Write32(p, 0); //LoseTeamScore
	Write16(p, 0); //NextGameScore
	WriteUn(p, 0); //AwardTime
	Write16(p, 0); //MsgLength
	Write16(p, 0); //PointChanged

	len = p - buf;
	SendToClient(Client, 626, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestInviteTeamIntoRoom(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int DstTeamID = Read32(p);

}

void ResponseInviteTeamIntoRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //TeamID
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 216, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyTeamBeInvitedIntoRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //SrcUin
	WriteString(p, 0); //SrcPlayerName[]
	WriteString(p, 0); //GuildName[]
	Write32(p, 0); //GuildScore
	Write16(p, 0); //SrcRoomID
	WriteString(p, 0); //RoomName[]
	Write16(p, 0); //GameMode
	Write32(p, 0); //MapID
	Write32(p, 0); //CarID
	WriteString(p, 0); //Password[]

	len = p - buf;
	SendToClient(Client, 627, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyOtherTeamSelfInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Score
	{ //TeamPlayerInfo
		BYTE* pTeamPlayerInfo = p;
		Write16(pTeamPlayerInfo, 0); //len

		Write32(pTeamPlayerInfo, 0); //Uin
		Write32(pTeamPlayerInfo, 0); //Identity
		WriteUn(pTeamPlayerInfo, 0); //PlayerID
		Write8(pTeamPlayerInfo, 0); //ReadyInRoom
		{ //PlayerDBBaseInfo
			BYTE* pPlayerDBBaseInfo = pTeamPlayerInfo;
			Write16(pPlayerDBBaseInfo, 0); //len

			WriteString(pPlayerDBBaseInfo, 0); //Nickname[]
			Write8(pPlayerDBBaseInfo, 0); //Gender
			Write8(pPlayerDBBaseInfo, 0); //Country
			Write32(pPlayerDBBaseInfo, 0); //License
			WriteUn(pPlayerDBBaseInfo, 0); //Experience
			Write32(pPlayerDBBaseInfo, 0); //SuperMoney
			Write32(pPlayerDBBaseInfo, 0); //Money
			WriteUn(pPlayerDBBaseInfo, 0); //WinNum
			Write32(pPlayerDBBaseInfo, 0); //SecondNum
			Write32(pPlayerDBBaseInfo, 0); //ThirdNum
			WriteUn(pPlayerDBBaseInfo, 0); //TotalNum
			Write32(pPlayerDBBaseInfo, 0); //CurHonor
			Write32(pPlayerDBBaseInfo, 0); //TotalHonor
			Write32(pPlayerDBBaseInfo, 0); //TodayHonor
			Write32(pPlayerDBBaseInfo, 0); //RelaxTime
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationBefore
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationCur
			Write32(pPlayerDBBaseInfo, 0); //Charm
			Write32(pPlayerDBBaseInfo, 0); //DurationGame
			Write32(pPlayerDBBaseInfo, 0); //DanceExp
			Write32(pPlayerDBBaseInfo, 0); //Coupons
			Write32(pPlayerDBBaseInfo, 0); //Admiration
			Write32(pPlayerDBBaseInfo, 0); //LuckMoney
			Write32(pPlayerDBBaseInfo, 0); //TeamWorkExp
			Write32(pPlayerDBBaseInfo, 0); //AchievePoint
			Write32(pPlayerDBBaseInfo, 0); //RegTime
			WriteString(pPlayerDBBaseInfo, 0); //Signature[]
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchPoint
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchNum
			Write16(pPlayerDBBaseInfo, 0); //LuckyMatchFirstNum
			Write8(pPlayerDBBaseInfo, 0); //LuckyMatchBestRand
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchWinNum
			Write32(pPlayerDBBaseInfo, 0); //FizzPointTotal
			Write16(pPlayerDBBaseInfo, 0); //FizzPointDaily
			Write16(pPlayerDBBaseInfo, 0); //FizzPointWeekly
			Write16(pPlayerDBBaseInfo, 0); //FizzPointLastWeek
			Write8(pPlayerDBBaseInfo, 0); //FizzLotteryStatus
			Write32(pPlayerDBBaseInfo, 0); //FizzLastUpdateTime
			Write32(pPlayerDBBaseInfo, 0); //SNSLocaleCode
			Write32(pPlayerDBBaseInfo, 0); //AuctionRightUnlockTime
			Write8(pPlayerDBBaseInfo, 0); //ReserveFlag
			Write32(pPlayerDBBaseInfo, 0); //CurConsumeScore
			Write32(pPlayerDBBaseInfo, 0); //HistoryConsumeScore
			Write8(pPlayerDBBaseInfo, 0); //CrashModeSponsorID
			Write32(pPlayerDBBaseInfo, 0); //Popularity
			Write32(pPlayerDBBaseInfo, 0); //LadderMatchAchievePoint
			Write32(pPlayerDBBaseInfo, 0); //Cash
			Write32(pPlayerDBBaseInfo, 0); //PlayerGPMIdentity
			Write32(pPlayerDBBaseInfo, 0); //PointTotalScore
			WriteUn(pPlayerDBBaseInfo, 0); //totalMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //lastMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalSeasonId
			WriteUn(pPlayerDBBaseInfo, 0); //lastClearMapMedalTime

			len = pPlayerDBBaseInfo - pTeamPlayerInfo;
			Set16(pTeamPlayerInfo, (WORD)len);
			pTeamPlayerInfo += len;
		}
		{ //PlayerGuildInfo
			BYTE* pPlayerGuildInfo = pTeamPlayerInfo;
			Write16(pPlayerGuildInfo, 0); //len

			WriteString(pPlayerGuildInfo, 0); //GuildName[]
			Write16(pPlayerGuildInfo, 0); //Duty
			Write32(pPlayerGuildInfo, 0); //GuildID
			Write32(pPlayerGuildInfo, 0); //Right
			Write32(pPlayerGuildInfo, 0); //Medal
			Write32(pPlayerGuildInfo, 0); //Contribute
			WriteString(pPlayerGuildInfo, 0); //DutyTitle[]

			len = pPlayerGuildInfo - pTeamPlayerInfo;
			Set16(pTeamPlayerInfo, (WORD)len);
			pTeamPlayerInfo += len;
		}
		{ //PlayerRelationInfo
			BYTE* pPlayerRelationInfo = pTeamPlayerInfo;
			Write16(pPlayerRelationInfo, 0); //len

			Write32(pPlayerRelationInfo, 0); //SrcUin
			Write32(pPlayerRelationInfo, 0); //RelationFlag
			Write32(pPlayerRelationInfo, 0); //RelationUin
			WriteString(pPlayerRelationInfo, 0); //RelationNickname[]
			Write32(pPlayerRelationInfo, 0); //EngageTime
			Write32(pPlayerRelationInfo, 0); //NextCanBookingTimeLimit
			Write32(pPlayerRelationInfo, 0); //BeginHoneyMoonTime
			Write32(pPlayerRelationInfo, 0); //EndHoneyMoonTime
			Write8(pPlayerRelationInfo, 0); //EngageFlag

			len = pPlayerRelationInfo - pTeamPlayerInfo;
			Set16(pTeamPlayerInfo, (WORD)len);
			pTeamPlayerInfo += len;
		}
		WriteUn(pTeamPlayerInfo, 0); //EquipedItemNum
		for (size_t i = 0; i < n; i++)
		{ //PlayerItemInfo
			BYTE* pPlayerItemInfo = pTeamPlayerInfo;
			Write16(pPlayerItemInfo, 0); //len

			Write32(pPlayerItemInfo, 0); //ItemID
			Write32(pPlayerItemInfo, 0); //ItemNum
			Write32(pPlayerItemInfo, 0); //AvailPeriod
			Write8(pPlayerItemInfo, 0); //Status
			WriteUn(pPlayerItemInfo, 0); //ObtainTime
			Write32(pPlayerItemInfo, 0); //OtherAttribute

			len = pPlayerItemInfo - pTeamPlayerInfo;
			Set16(pTeamPlayerInfo, (WORD)len);
			pTeamPlayerInfo += len;
		}
		WriteUn(pTeamPlayerInfo, 0); //PetNum
		for (size_t i = 0; i < n; i++)
		{ //PetInfo
			BYTE* pPetInfo = pTeamPlayerInfo;
			Write16(pPetInfo, 0); //len

			Write32(pPetInfo, 0); //Uin
			Write32(pPetInfo, 0); //PetId
			WriteString(pPetInfo, 0); //PetName[]
			Write8(pPetInfo, 0); //IsProper
			Write16(pPetInfo, 0); //Level
			Write8(pPetInfo, 0); //Status
			Write16(pPetInfo, 0); //PetSkillNum
			for (size_t i = 0; i < n; i++)
			{ //PetSkillList
				BYTE* pPetSkillList = pPetInfo;
				Write16(pPetSkillList, 0); //len

				Write16(pPetSkillList, 0); //SkillID
				Write8(pPetSkillList, 0); //Status
				Write8(pPetSkillList, 0); //Active
				Write32(pPetSkillList, 0); //Value

				len = pPetSkillList - pPetInfo;
				Set16(pPetInfo, (WORD)len);
				pPetInfo += len;
			}
			Write32(pPetInfo, 0); //StrengLevel

			len = pPetInfo - pTeamPlayerInfo;
			Set16(pTeamPlayerInfo, (WORD)len);
			pTeamPlayerInfo += len;
		}
		WriteUn(pTeamPlayerInfo, 0); //KartNum
		for (size_t i = 0; i < n; i++)
		{ //KartRefitInfo
			BYTE* pKartRefitInfo = pTeamPlayerInfo;
			Write16(pKartRefitInfo, 0); //len

			Write32(pKartRefitInfo, 0); //Uin
			Write32(pKartRefitInfo, 0); //KartId
			Write32(pKartRefitInfo, 0); //RefitCout
			Write16(pKartRefitInfo, 0); //MaxFlags
			Write16(pKartRefitInfo, 0); //WWeight
			Write16(pKartRefitInfo, 0); //SpeedWeight
			Write16(pKartRefitInfo, 0); //JetWeight
			Write16(pKartRefitInfo, 0); //SJetWeight
			Write16(pKartRefitInfo, 0); //AccuWeight
			Write32(pKartRefitInfo, 0); //ShapeRefitCount
			Write32(pKartRefitInfo, 0); //KartHeadRefitItemID
			Write32(pKartRefitInfo, 0); //KartTailRefitItemID
			Write32(pKartRefitInfo, 0); //KartFlankRefitItemID
			Write32(pKartRefitInfo, 0); //KartTireRefitItemID

			len = pKartRefitInfo - pTeamPlayerInfo;
			Set16(pTeamPlayerInfo, (WORD)len);
			pTeamPlayerInfo += len;
		}
		WriteUn(pTeamPlayerInfo, 0); //VipFlag
		{ //NobleInfo
			BYTE* pNobleInfo = pTeamPlayerInfo;
			Write16(pNobleInfo, 0); //len

			Write32(pNobleInfo, 0); //NobleID
			Write8(pNobleInfo, 0); //NobleLevel
			Write32(pNobleInfo, 0); //NoblePoint
			Write32(pNobleInfo, 0); //NobleLeftDays

			len = pNobleInfo - pTeamPlayerInfo;
			Set16(pTeamPlayerInfo, (WORD)len);
			pTeamPlayerInfo += len;
		}
		{ //GuildVipBaseInfo
			BYTE* pGuildVipBaseInfo = pTeamPlayerInfo;
			Write16(pGuildVipBaseInfo, 0); //len

			Write8(pGuildVipBaseInfo, 0); //GuildVipLevel
			Write32(pGuildVipBaseInfo, 0); //GuildVipPoint

			len = pGuildVipBaseInfo - pTeamPlayerInfo;
			Set16(pTeamPlayerInfo, (WORD)len);
			pTeamPlayerInfo += len;
		}
		Write8(pTeamPlayerInfo, 0); //HasLoverVip
		for (size_t i = 0; i < n; i++)
		{ //LoverVipInfo
			BYTE* pLoverVipInfo = pTeamPlayerInfo;
			Write16(pLoverVipInfo, 0); //len

			Write8(pLoverVipInfo, 0); //LoverVipLevel
			Write32(pLoverVipInfo, 0); //LoverVipPoint
			Write8(pLoverVipInfo, 0); //GrowRate

			len = pLoverVipInfo - pTeamPlayerInfo;
			Set16(pTeamPlayerInfo, (WORD)len);
			pTeamPlayerInfo += len;
		}

		len = pTeamPlayerInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 628, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyTeamMatchNotice(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //MsgLen

	len = p - buf;
	SendToClient(Client, 629, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestQuickEnterTeamRoom(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	Un Time = ReadUn(p);

}

void ResponseQuickEnterTeamRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 220, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetLimitKartList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetLimitKartList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //KartNum
	Write32(p, 0); //KartList[]

	len = p - buf;
	SendToClient(Client, 217, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestScoreRules(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetScoreRules(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //Num
	for (size_t i = 0; i < n; i++)
	{ //ScoreRules
		BYTE* pScoreRules = p;
		Write16(pScoreRules, 0); //len

		Write32(pScoreRules, 0); //RightBorder
		Write32(pScoreRules, 0); //Value

		len = pScoreRules - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 218, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetMemberInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Tiem = Read32(p);
	UINT GuildID = Read32(p);

}

void ResponseGetMemberInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //GuildID
	Write16(p, 0); //Member
	for (size_t i = 0; i < n; i++)
	{ //MemberInfo
		BYTE* pMemberInfo = p;
		Write16(pMemberInfo, 0); //len

		Write32(pMemberInfo, 0); //Uin
		Write32(pMemberInfo, 0); //SelfPoint
		Write32(pMemberInfo, 0); //WinMatchNum
		Write32(pMemberInfo, 0); //TotalMatchNum

		len = pMemberInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 200, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetAllTeam(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetAllTeam(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //TeamCount
	for (size_t i = 0; i < n; i++)
	{ //TeamInfo
		BYTE* pTeamInfo = p;
		Write16(pTeamInfo, 0); //len

		Write32(pTeamInfo, 0); //TeamID
		Write8(pTeamInfo, 0); //Type
		Write32(pTeamInfo, 0); //MemberCount
		Write8(pTeamInfo, 0); //InRoom
		Write32(pTeamInfo, 0); //Uin
		WriteString(pTeamInfo, 0); //LeaderName[]

		len = pTeamInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 201, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestChangeTeamLeader(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT DstUin = Read32(p);

}

void ResponseChangeTeamLeader(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyChangeTeamLeader(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //OldLeader
	Write32(p, 0); //NewLeader
	Write8(p, 0); //IsSelfTeam

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestEnterTeamMatchServer(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseEnterTeamMatchServer(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 250, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyTopListDesc(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //Count
	for (size_t i = 0; i < n; i++)
	{ //Descs
		BYTE* pDescs = p;
		Write16(pDescs, 0); //len

		Write16(pDescs, 0); //ID
		WriteString(pDescs, 0); //Name[]
		WriteString(pDescs, 0); //ValueDesc[]

		len = pDescs - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 701, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestTopList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	Un Time = ReadUn(p);
	USHORT ID = Read16(p);

}

void ResponseTopList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ID
	Write16(p, 0); //Count
	for (size_t i = 0; i < n; i++)
	{ //Items
		BYTE* pItems = p;
		Write16(pItems, 0); //len

		Write32(pItems, 0); //Uin
		WriteString(pItems, 0); //NickName[]
		Write32(pItems, 0); //Value

		len = pItems - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //SelfRank

	len = p - buf;
	SendToClient(Client, 461, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestDanceGetRoomList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	short StartRoomIdx = Read16(p);
	short GetRoomNum = Read16(p);
	short BaseGameMode = Read16(p);
	short SubGameMode = Read16(p);

}

void ResponseDanceGetRoomList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	WriteUn(p, 0); //Uin
	Write16(p, 0); //CurTotalRoomNum
	Write16(p, 0); //StartIdx
	Write16(p, 0); //RoomNum
	for (size_t i = 0; i < n; i++)
	{ //DanceRooms
		BYTE* pDanceRooms = p;
		Write16(pDanceRooms, 0); //len

		Write16(pDanceRooms, 0); //RoomID
		Write16(pDanceRooms, 0); //BaseGameMode
		Write16(pDanceRooms, 0); //SubGameMode
		Write8(pDanceRooms, 0); //CurrentPlayerNum
		Write8(pDanceRooms, 0); //TotalSeatNum
		Write8(pDanceRooms, 0); //Status
		Write32(pDanceRooms, 0); //Mode
		Write32(pDanceRooms, 0); //SceneID
		Write32(pDanceRooms, 0); //MusicID
		Write8(pDanceRooms, 0); //RandKeyFlag
		Write8(pDanceRooms, 0); //Flag
		WriteString(pDanceRooms, 0); //RoomName[]

		len = pDanceRooms - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen
	WriteString(p, 0); //Reason[]
	Write16(p, 0); //BaseGameMode
	Write16(p, 0); //SubGameMode

	len = p - buf;
	SendToClient(Client, 251, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestDanceEnterRoom(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	short RoomID = Read16(p);
	char[] Password[] = ReadString(p);
	BYTE InviteType = Read8(p);
	Un InviterUin = ReadUn(p);

}

void ResponseDanceEnterRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //RoomID
	Write16(p, 0); //BaseGameMode
	Write16(p, 0); //SubGameMode
	WriteString(p, 0); //RoomName[]
	Write8(p, 0); //SeatNum
	Write8(p, 0); //Flag
	Write8(p, 0); //SeatID
	Write8(p, 0); //TeamID
	Write32(p, 0); //Mode
	Write32(p, 0); //SceneID
	Write32(p, 0); //MusicID
	Write8(p, 0); //RandKeyFlag
	Write16(p, 0); //RoomOwnerID
	Write8(p, 0); //SeatStatus[]
	Write8(p, 0); //PlayerCount
	for (size_t i = 0; i < n; i++)
	{ //PlayerRoomVisibleInfo
		BYTE* pPlayerRoomVisibleInfo = p;
		Write16(pPlayerRoomVisibleInfo, 0); //len

		WriteUn(pPlayerRoomVisibleInfo, 0); //Uin
		WriteUn(pPlayerRoomVisibleInfo, 0); //Identity
		Write8(pPlayerRoomVisibleInfo, 0); //SeatID
		Write8(pPlayerRoomVisibleInfo, 0); //TeamID
		Write16(pPlayerRoomVisibleInfo, 0); //PlayerID
		Write8(pPlayerRoomVisibleInfo, 0); //Status
		{ //PlayerDBBaseInfo
			BYTE* pPlayerDBBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerDBBaseInfo, 0); //len

			WriteString(pPlayerDBBaseInfo, 0); //Nickname[]
			Write8(pPlayerDBBaseInfo, 0); //Gender
			Write8(pPlayerDBBaseInfo, 0); //Country
			Write32(pPlayerDBBaseInfo, 0); //License
			WriteUn(pPlayerDBBaseInfo, 0); //Experience
			Write32(pPlayerDBBaseInfo, 0); //SuperMoney
			Write32(pPlayerDBBaseInfo, 0); //Money
			WriteUn(pPlayerDBBaseInfo, 0); //WinNum
			Write32(pPlayerDBBaseInfo, 0); //SecondNum
			Write32(pPlayerDBBaseInfo, 0); //ThirdNum
			WriteUn(pPlayerDBBaseInfo, 0); //TotalNum
			Write32(pPlayerDBBaseInfo, 0); //CurHonor
			Write32(pPlayerDBBaseInfo, 0); //TotalHonor
			Write32(pPlayerDBBaseInfo, 0); //TodayHonor
			Write32(pPlayerDBBaseInfo, 0); //RelaxTime
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationBefore
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationCur
			Write32(pPlayerDBBaseInfo, 0); //Charm
			Write32(pPlayerDBBaseInfo, 0); //DurationGame
			Write32(pPlayerDBBaseInfo, 0); //DanceExp
			Write32(pPlayerDBBaseInfo, 0); //Coupons
			Write32(pPlayerDBBaseInfo, 0); //Admiration
			Write32(pPlayerDBBaseInfo, 0); //LuckMoney
			Write32(pPlayerDBBaseInfo, 0); //TeamWorkExp
			Write32(pPlayerDBBaseInfo, 0); //AchievePoint
			Write32(pPlayerDBBaseInfo, 0); //RegTime
			WriteString(pPlayerDBBaseInfo, 0); //Signature[]
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchPoint
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchNum
			Write16(pPlayerDBBaseInfo, 0); //LuckyMatchFirstNum
			Write8(pPlayerDBBaseInfo, 0); //LuckyMatchBestRand
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchWinNum
			Write32(pPlayerDBBaseInfo, 0); //FizzPointTotal
			Write16(pPlayerDBBaseInfo, 0); //FizzPointDaily
			Write16(pPlayerDBBaseInfo, 0); //FizzPointWeekly
			Write16(pPlayerDBBaseInfo, 0); //FizzPointLastWeek
			Write8(pPlayerDBBaseInfo, 0); //FizzLotteryStatus
			Write32(pPlayerDBBaseInfo, 0); //FizzLastUpdateTime
			Write32(pPlayerDBBaseInfo, 0); //SNSLocaleCode
			Write32(pPlayerDBBaseInfo, 0); //AuctionRightUnlockTime
			Write8(pPlayerDBBaseInfo, 0); //ReserveFlag
			Write32(pPlayerDBBaseInfo, 0); //CurConsumeScore
			Write32(pPlayerDBBaseInfo, 0); //HistoryConsumeScore
			Write8(pPlayerDBBaseInfo, 0); //CrashModeSponsorID
			Write32(pPlayerDBBaseInfo, 0); //Popularity
			Write32(pPlayerDBBaseInfo, 0); //LadderMatchAchievePoint
			Write32(pPlayerDBBaseInfo, 0); //Cash
			Write32(pPlayerDBBaseInfo, 0); //PlayerGPMIdentity
			Write32(pPlayerDBBaseInfo, 0); //PointTotalScore
			WriteUn(pPlayerDBBaseInfo, 0); //totalMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //lastMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalSeasonId
			WriteUn(pPlayerDBBaseInfo, 0); //lastClearMapMedalTime

			len = pPlayerDBBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //PlayerGuildInfo
			BYTE* pPlayerGuildInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerGuildInfo, 0); //len

			WriteString(pPlayerGuildInfo, 0); //GuildName[]
			Write16(pPlayerGuildInfo, 0); //Duty
			Write32(pPlayerGuildInfo, 0); //GuildID
			Write32(pPlayerGuildInfo, 0); //Right
			Write32(pPlayerGuildInfo, 0); //Medal
			Write32(pPlayerGuildInfo, 0); //Contribute
			WriteString(pPlayerGuildInfo, 0); //DutyTitle[]

			len = pPlayerGuildInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write16(pPlayerRoomVisibleInfo, 0); //EquipedItemNum
		for (size_t i = 0; i < n; i++)
		{ //PlayerItemInfo
			BYTE* pPlayerItemInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerItemInfo, 0); //len

			Write32(pPlayerItemInfo, 0); //ItemID
			Write32(pPlayerItemInfo, 0); //ItemNum
			Write32(pPlayerItemInfo, 0); //AvailPeriod
			Write8(pPlayerItemInfo, 0); //Status
			WriteUn(pPlayerItemInfo, 0); //ObtainTime
			Write32(pPlayerItemInfo, 0); //OtherAttribute

			len = pPlayerItemInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write16(pPlayerRoomVisibleInfo, 0); //PetNum
		for (size_t i = 0; i < n; i++)
		{ //PetInfo
			BYTE* pPetInfo = pPlayerRoomVisibleInfo;
			Write16(pPetInfo, 0); //len

			Write32(pPetInfo, 0); //Uin
			Write32(pPetInfo, 0); //PetId
			WriteString(pPetInfo, 0); //PetName[]
			Write8(pPetInfo, 0); //IsProper
			Write16(pPetInfo, 0); //Level
			Write8(pPetInfo, 0); //Status
			Write16(pPetInfo, 0); //PetSkillNum
			for (size_t i = 0; i < n; i++)
			{ //PetSkillList
				BYTE* pPetSkillList = pPetInfo;
				Write16(pPetSkillList, 0); //len

				Write16(pPetSkillList, 0); //SkillID
				Write8(pPetSkillList, 0); //Status
				Write8(pPetSkillList, 0); //Active
				Write32(pPetSkillList, 0); //Value

				len = pPetSkillList - pPetInfo;
				Set16(pPetInfo, (WORD)len);
				pPetInfo += len;
			}
			Write32(pPetInfo, 0); //StrengLevel

			len = pPetInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //PlayerGuildMatchInfo
			BYTE* pPlayerGuildMatchInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerGuildMatchInfo, 0); //len

			Write32(pPlayerGuildMatchInfo, 0); //SelfPoint
			Write32(pPlayerGuildMatchInfo, 0); //WinNum
			Write32(pPlayerGuildMatchInfo, 0); //TotalNum

			len = pPlayerGuildMatchInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //IsInTopList
		Write8(pPlayerRoomVisibleInfo, 0); //LoverRaceOrPro
		Write8(pPlayerRoomVisibleInfo, 0); //TmpEffectNum
		Write32(pPlayerRoomVisibleInfo, 0); //TmpEffectItems[]
		Write8(pPlayerRoomVisibleInfo, 0); //OBState
		Write8(pPlayerRoomVisibleInfo, 0); //DebutOrX5
		Write8(pPlayerRoomVisibleInfo, 0); //RandKeyFlag
		WriteUn(pPlayerRoomVisibleInfo, 0); //VipFlag
		Write8(pPlayerRoomVisibleInfo, 0); //HaveAppellation
		for (size_t i = 0; i < n; i++)
		{ //CurAppellation
			BYTE* pCurAppellation = pPlayerRoomVisibleInfo;
			Write16(pCurAppellation, 0); //len

			Write8(pCurAppellation, 0); //Type
			Write8(pCurAppellation, 0); //Level
			Write8(pCurAppellation, 0); //Status
			Write8(pCurAppellation, 0); //Difficulty
			Write32(pCurAppellation, 0); //MapId
			Write32(pCurAppellation, 0); //Value

			len = pCurAppellation - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //NobleInfo
			BYTE* pNobleInfo = pPlayerRoomVisibleInfo;
			Write16(pNobleInfo, 0); //len

			Write32(pNobleInfo, 0); //NobleID
			Write8(pNobleInfo, 0); //NobleLevel
			Write32(pNobleInfo, 0); //NoblePoint
			Write32(pNobleInfo, 0); //NobleLeftDays

			len = pNobleInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasCarryWizard
		for (size_t i = 0; i < n; i++)
		{ //CarryWizardInfo
			BYTE* pCarryWizardInfo = pPlayerRoomVisibleInfo;
			Write16(pCarryWizardInfo, 0); //len

			Write16(pCarryWizardInfo, 0); //WizardID
			WriteString(pCarryWizardInfo, 0); //Nickname[]
			Write16(pCarryWizardInfo, 0); //WizardType
			Write8(pCarryWizardInfo, 0); //Order
			Write8(pCarryWizardInfo, 0); //EvolutionBranch
			Write8(pCarryWizardInfo, 0); //IsHuanHua

			len = pCarryWizardInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //GuildVipBaseInfo
			BYTE* pGuildVipBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pGuildVipBaseInfo, 0); //len

			Write8(pGuildVipBaseInfo, 0); //GuildVipLevel
			Write32(pGuildVipBaseInfo, 0); //GuildVipPoint

			len = pGuildVipBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write32(pPlayerRoomVisibleInfo, 0); //ExFlag
		Write8(pPlayerRoomVisibleInfo, 0); //HaveLDMBaseInfo
		for (size_t i = 0; i < n; i++)
		{ //PlayerLDMBaseInfo
			BYTE* pPlayerLDMBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerLDMBaseInfo, 0); //len

			Write8(pPlayerLDMBaseInfo, 0); //Grade
			Write32(pPlayerLDMBaseInfo, 0); //Score
			Write32(pPlayerLDMBaseInfo, 0); //MaxScore
			Write32(pPlayerLDMBaseInfo, 0); //MaxGrade

			len = pPlayerLDMBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasWl
		for (size_t i = 0; i < n; i++)
		{ //PlayerWlVisibleInfo
			BYTE* pPlayerWlVisibleInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerWlVisibleInfo, 0); //len

			Write32(pPlayerWlVisibleInfo, 0); //WonderLandID
			WriteString(pPlayerWlVisibleInfo, 0); //WonderLandName[]
			Write16(pPlayerWlVisibleInfo, 0); //WonderLandDuty
			Write8(pPlayerWlVisibleInfo, 0); //SubType
			Write8(pPlayerWlVisibleInfo, 0); //GuildGrade

			len = pPlayerWlVisibleInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasLoverVip
		for (size_t i = 0; i < n; i++)
		{ //LoverVipInfo
			BYTE* pLoverVipInfo = pPlayerRoomVisibleInfo;
			Write16(pLoverVipInfo, 0); //len

			Write8(pLoverVipInfo, 0); //LoverVipLevel
			Write32(pLoverVipInfo, 0); //LoverVipPoint
			Write8(pLoverVipInfo, 0); //GrowRate

			len = pLoverVipInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasBattleModeSkillInfoList
		for (size_t i = 0; i < n; i++)
		{ //BattleModeSkillInfoList
			BYTE* pBattleModeSkillInfoList = pPlayerRoomVisibleInfo;
			Write16(pBattleModeSkillInfoList, 0); //len

			Write8(pBattleModeSkillInfoList, 0); //SkillNum
			for (size_t i = 0; i < n; i++)
			{ //SkillInfo
				BYTE* pSkillInfo = pBattleModeSkillInfoList;
				Write16(pSkillInfo, 0); //len

				Write16(pSkillInfo, 0); //SkillId
				Write8(pSkillInfo, 0); //SkillLevel

				len = pSkillInfo - pBattleModeSkillInfoList;
				Set16(pBattleModeSkillInfoList, (WORD)len);
				pBattleModeSkillInfoList += len;
			}

			len = pBattleModeSkillInfoList - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}

		len = pPlayerRoomVisibleInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen
	Write8(p, 0); //PlayerCount2
	for (size_t i = 0; i < n; i++)
	{ //PlayerRelationInfo
		BYTE* pPlayerRelationInfo = p;
		Write16(pPlayerRelationInfo, 0); //len

		Write32(pPlayerRelationInfo, 0); //SrcUin
		Write32(pPlayerRelationInfo, 0); //RelationFlag
		Write32(pPlayerRelationInfo, 0); //RelationUin
		WriteString(pPlayerRelationInfo, 0); //RelationNickname[]
		Write32(pPlayerRelationInfo, 0); //EngageTime
		Write32(pPlayerRelationInfo, 0); //NextCanBookingTimeLimit
		Write32(pPlayerRelationInfo, 0); //BeginHoneyMoonTime
		Write32(pPlayerRelationInfo, 0); //EndHoneyMoonTime
		Write8(pPlayerRelationInfo, 0); //EngageFlag

		len = pPlayerRelationInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //DebutOrX5
	Write32(p, 0); //PreKnownMusicID
	Write8(p, 0); //HasMoreInfo
	Write16(p, 0); //KartNum
	for (size_t i = 0; i < n; i++)
	{ //KartRefitInfo
		BYTE* pKartRefitInfo = p;
		Write16(pKartRefitInfo, 0); //len

		Write32(pKartRefitInfo, 0); //Uin
		Write32(pKartRefitInfo, 0); //KartId
		Write32(pKartRefitInfo, 0); //RefitCout
		Write16(pKartRefitInfo, 0); //MaxFlags
		Write16(pKartRefitInfo, 0); //WWeight
		Write16(pKartRefitInfo, 0); //SpeedWeight
		Write16(pKartRefitInfo, 0); //JetWeight
		Write16(pKartRefitInfo, 0); //SJetWeight
		Write16(pKartRefitInfo, 0); //AccuWeight
		Write32(pKartRefitInfo, 0); //ShapeRefitCount
		Write32(pKartRefitInfo, 0); //KartHeadRefitItemID
		Write32(pKartRefitInfo, 0); //KartTailRefitItemID
		Write32(pKartRefitInfo, 0); //KartFlankRefitItemID
		Write32(pKartRefitInfo, 0); //KartTireRefitItemID

		len = pKartRefitInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 252, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyEnterDanceRoomMoreInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //PlayerCount
	for (size_t i = 0; i < n; i++)
	{ //PlayerRoomVisibleInfo
		BYTE* pPlayerRoomVisibleInfo = p;
		Write16(pPlayerRoomVisibleInfo, 0); //len

		WriteUn(pPlayerRoomVisibleInfo, 0); //Uin
		WriteUn(pPlayerRoomVisibleInfo, 0); //Identity
		Write8(pPlayerRoomVisibleInfo, 0); //SeatID
		Write8(pPlayerRoomVisibleInfo, 0); //TeamID
		Write16(pPlayerRoomVisibleInfo, 0); //PlayerID
		Write8(pPlayerRoomVisibleInfo, 0); //Status
		{ //PlayerDBBaseInfo
			BYTE* pPlayerDBBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerDBBaseInfo, 0); //len

			WriteString(pPlayerDBBaseInfo, 0); //Nickname[]
			Write8(pPlayerDBBaseInfo, 0); //Gender
			Write8(pPlayerDBBaseInfo, 0); //Country
			Write32(pPlayerDBBaseInfo, 0); //License
			WriteUn(pPlayerDBBaseInfo, 0); //Experience
			Write32(pPlayerDBBaseInfo, 0); //SuperMoney
			Write32(pPlayerDBBaseInfo, 0); //Money
			WriteUn(pPlayerDBBaseInfo, 0); //WinNum
			Write32(pPlayerDBBaseInfo, 0); //SecondNum
			Write32(pPlayerDBBaseInfo, 0); //ThirdNum
			WriteUn(pPlayerDBBaseInfo, 0); //TotalNum
			Write32(pPlayerDBBaseInfo, 0); //CurHonor
			Write32(pPlayerDBBaseInfo, 0); //TotalHonor
			Write32(pPlayerDBBaseInfo, 0); //TodayHonor
			Write32(pPlayerDBBaseInfo, 0); //RelaxTime
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationBefore
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationCur
			Write32(pPlayerDBBaseInfo, 0); //Charm
			Write32(pPlayerDBBaseInfo, 0); //DurationGame
			Write32(pPlayerDBBaseInfo, 0); //DanceExp
			Write32(pPlayerDBBaseInfo, 0); //Coupons
			Write32(pPlayerDBBaseInfo, 0); //Admiration
			Write32(pPlayerDBBaseInfo, 0); //LuckMoney
			Write32(pPlayerDBBaseInfo, 0); //TeamWorkExp
			Write32(pPlayerDBBaseInfo, 0); //AchievePoint
			Write32(pPlayerDBBaseInfo, 0); //RegTime
			WriteString(pPlayerDBBaseInfo, 0); //Signature[]
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchPoint
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchNum
			Write16(pPlayerDBBaseInfo, 0); //LuckyMatchFirstNum
			Write8(pPlayerDBBaseInfo, 0); //LuckyMatchBestRand
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchWinNum
			Write32(pPlayerDBBaseInfo, 0); //FizzPointTotal
			Write16(pPlayerDBBaseInfo, 0); //FizzPointDaily
			Write16(pPlayerDBBaseInfo, 0); //FizzPointWeekly
			Write16(pPlayerDBBaseInfo, 0); //FizzPointLastWeek
			Write8(pPlayerDBBaseInfo, 0); //FizzLotteryStatus
			Write32(pPlayerDBBaseInfo, 0); //FizzLastUpdateTime
			Write32(pPlayerDBBaseInfo, 0); //SNSLocaleCode
			Write32(pPlayerDBBaseInfo, 0); //AuctionRightUnlockTime
			Write8(pPlayerDBBaseInfo, 0); //ReserveFlag
			Write32(pPlayerDBBaseInfo, 0); //CurConsumeScore
			Write32(pPlayerDBBaseInfo, 0); //HistoryConsumeScore
			Write8(pPlayerDBBaseInfo, 0); //CrashModeSponsorID
			Write32(pPlayerDBBaseInfo, 0); //Popularity
			Write32(pPlayerDBBaseInfo, 0); //LadderMatchAchievePoint
			Write32(pPlayerDBBaseInfo, 0); //Cash
			Write32(pPlayerDBBaseInfo, 0); //PlayerGPMIdentity
			Write32(pPlayerDBBaseInfo, 0); //PointTotalScore
			WriteUn(pPlayerDBBaseInfo, 0); //totalMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //lastMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalSeasonId
			WriteUn(pPlayerDBBaseInfo, 0); //lastClearMapMedalTime

			len = pPlayerDBBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //PlayerGuildInfo
			BYTE* pPlayerGuildInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerGuildInfo, 0); //len

			WriteString(pPlayerGuildInfo, 0); //GuildName[]
			Write16(pPlayerGuildInfo, 0); //Duty
			Write32(pPlayerGuildInfo, 0); //GuildID
			Write32(pPlayerGuildInfo, 0); //Right
			Write32(pPlayerGuildInfo, 0); //Medal
			Write32(pPlayerGuildInfo, 0); //Contribute
			WriteString(pPlayerGuildInfo, 0); //DutyTitle[]

			len = pPlayerGuildInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write16(pPlayerRoomVisibleInfo, 0); //EquipedItemNum
		for (size_t i = 0; i < n; i++)
		{ //PlayerItemInfo
			BYTE* pPlayerItemInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerItemInfo, 0); //len

			Write32(pPlayerItemInfo, 0); //ItemID
			Write32(pPlayerItemInfo, 0); //ItemNum
			Write32(pPlayerItemInfo, 0); //AvailPeriod
			Write8(pPlayerItemInfo, 0); //Status
			WriteUn(pPlayerItemInfo, 0); //ObtainTime
			Write32(pPlayerItemInfo, 0); //OtherAttribute

			len = pPlayerItemInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write16(pPlayerRoomVisibleInfo, 0); //PetNum
		for (size_t i = 0; i < n; i++)
		{ //PetInfo
			BYTE* pPetInfo = pPlayerRoomVisibleInfo;
			Write16(pPetInfo, 0); //len

			Write32(pPetInfo, 0); //Uin
			Write32(pPetInfo, 0); //PetId
			WriteString(pPetInfo, 0); //PetName[]
			Write8(pPetInfo, 0); //IsProper
			Write16(pPetInfo, 0); //Level
			Write8(pPetInfo, 0); //Status
			Write16(pPetInfo, 0); //PetSkillNum
			for (size_t i = 0; i < n; i++)
			{ //PetSkillList
				BYTE* pPetSkillList = pPetInfo;
				Write16(pPetSkillList, 0); //len

				Write16(pPetSkillList, 0); //SkillID
				Write8(pPetSkillList, 0); //Status
				Write8(pPetSkillList, 0); //Active
				Write32(pPetSkillList, 0); //Value

				len = pPetSkillList - pPetInfo;
				Set16(pPetInfo, (WORD)len);
				pPetInfo += len;
			}
			Write32(pPetInfo, 0); //StrengLevel

			len = pPetInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //PlayerGuildMatchInfo
			BYTE* pPlayerGuildMatchInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerGuildMatchInfo, 0); //len

			Write32(pPlayerGuildMatchInfo, 0); //SelfPoint
			Write32(pPlayerGuildMatchInfo, 0); //WinNum
			Write32(pPlayerGuildMatchInfo, 0); //TotalNum

			len = pPlayerGuildMatchInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //IsInTopList
		Write8(pPlayerRoomVisibleInfo, 0); //LoverRaceOrPro
		Write8(pPlayerRoomVisibleInfo, 0); //TmpEffectNum
		Write32(pPlayerRoomVisibleInfo, 0); //TmpEffectItems[]
		Write8(pPlayerRoomVisibleInfo, 0); //OBState
		Write8(pPlayerRoomVisibleInfo, 0); //DebutOrX5
		Write8(pPlayerRoomVisibleInfo, 0); //RandKeyFlag
		WriteUn(pPlayerRoomVisibleInfo, 0); //VipFlag
		Write8(pPlayerRoomVisibleInfo, 0); //HaveAppellation
		for (size_t i = 0; i < n; i++)
		{ //CurAppellation
			BYTE* pCurAppellation = pPlayerRoomVisibleInfo;
			Write16(pCurAppellation, 0); //len

			Write8(pCurAppellation, 0); //Type
			Write8(pCurAppellation, 0); //Level
			Write8(pCurAppellation, 0); //Status
			Write8(pCurAppellation, 0); //Difficulty
			Write32(pCurAppellation, 0); //MapId
			Write32(pCurAppellation, 0); //Value

			len = pCurAppellation - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //NobleInfo
			BYTE* pNobleInfo = pPlayerRoomVisibleInfo;
			Write16(pNobleInfo, 0); //len

			Write32(pNobleInfo, 0); //NobleID
			Write8(pNobleInfo, 0); //NobleLevel
			Write32(pNobleInfo, 0); //NoblePoint
			Write32(pNobleInfo, 0); //NobleLeftDays

			len = pNobleInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasCarryWizard
		for (size_t i = 0; i < n; i++)
		{ //CarryWizardInfo
			BYTE* pCarryWizardInfo = pPlayerRoomVisibleInfo;
			Write16(pCarryWizardInfo, 0); //len

			Write16(pCarryWizardInfo, 0); //WizardID
			WriteString(pCarryWizardInfo, 0); //Nickname[]
			Write16(pCarryWizardInfo, 0); //WizardType
			Write8(pCarryWizardInfo, 0); //Order
			Write8(pCarryWizardInfo, 0); //EvolutionBranch
			Write8(pCarryWizardInfo, 0); //IsHuanHua

			len = pCarryWizardInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //GuildVipBaseInfo
			BYTE* pGuildVipBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pGuildVipBaseInfo, 0); //len

			Write8(pGuildVipBaseInfo, 0); //GuildVipLevel
			Write32(pGuildVipBaseInfo, 0); //GuildVipPoint

			len = pGuildVipBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write32(pPlayerRoomVisibleInfo, 0); //ExFlag
		Write8(pPlayerRoomVisibleInfo, 0); //HaveLDMBaseInfo
		for (size_t i = 0; i < n; i++)
		{ //PlayerLDMBaseInfo
			BYTE* pPlayerLDMBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerLDMBaseInfo, 0); //len

			Write8(pPlayerLDMBaseInfo, 0); //Grade
			Write32(pPlayerLDMBaseInfo, 0); //Score
			Write32(pPlayerLDMBaseInfo, 0); //MaxScore
			Write32(pPlayerLDMBaseInfo, 0); //MaxGrade

			len = pPlayerLDMBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasWl
		for (size_t i = 0; i < n; i++)
		{ //PlayerWlVisibleInfo
			BYTE* pPlayerWlVisibleInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerWlVisibleInfo, 0); //len

			Write32(pPlayerWlVisibleInfo, 0); //WonderLandID
			WriteString(pPlayerWlVisibleInfo, 0); //WonderLandName[]
			Write16(pPlayerWlVisibleInfo, 0); //WonderLandDuty
			Write8(pPlayerWlVisibleInfo, 0); //SubType
			Write8(pPlayerWlVisibleInfo, 0); //GuildGrade

			len = pPlayerWlVisibleInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasLoverVip
		for (size_t i = 0; i < n; i++)
		{ //LoverVipInfo
			BYTE* pLoverVipInfo = pPlayerRoomVisibleInfo;
			Write16(pLoverVipInfo, 0); //len

			Write8(pLoverVipInfo, 0); //LoverVipLevel
			Write32(pLoverVipInfo, 0); //LoverVipPoint
			Write8(pLoverVipInfo, 0); //GrowRate

			len = pLoverVipInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasBattleModeSkillInfoList
		for (size_t i = 0; i < n; i++)
		{ //BattleModeSkillInfoList
			BYTE* pBattleModeSkillInfoList = pPlayerRoomVisibleInfo;
			Write16(pBattleModeSkillInfoList, 0); //len

			Write8(pBattleModeSkillInfoList, 0); //SkillNum
			for (size_t i = 0; i < n; i++)
			{ //SkillInfo
				BYTE* pSkillInfo = pBattleModeSkillInfoList;
				Write16(pSkillInfo, 0); //len

				Write16(pSkillInfo, 0); //SkillId
				Write8(pSkillInfo, 0); //SkillLevel

				len = pSkillInfo - pBattleModeSkillInfoList;
				Set16(pBattleModeSkillInfoList, (WORD)len);
				pBattleModeSkillInfoList += len;
			}

			len = pBattleModeSkillInfoList - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}

		len = pPlayerRoomVisibleInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //PlayerCount2
	for (size_t i = 0; i < n; i++)
	{ //PlayerRelationInfo
		BYTE* pPlayerRelationInfo = p;
		Write16(pPlayerRelationInfo, 0); //len

		Write32(pPlayerRelationInfo, 0); //SrcUin
		Write32(pPlayerRelationInfo, 0); //RelationFlag
		Write32(pPlayerRelationInfo, 0); //RelationUin
		WriteString(pPlayerRelationInfo, 0); //RelationNickname[]
		Write32(pPlayerRelationInfo, 0); //EngageTime
		Write32(pPlayerRelationInfo, 0); //NextCanBookingTimeLimit
		Write32(pPlayerRelationInfo, 0); //BeginHoneyMoonTime
		Write32(pPlayerRelationInfo, 0); //EndHoneyMoonTime
		Write8(pPlayerRelationInfo, 0); //EngageFlag

		len = pPlayerRelationInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasNext
	Write16(p, 0); //KartNum
	for (size_t i = 0; i < n; i++)
	{ //KartRefitInfo
		BYTE* pKartRefitInfo = p;
		Write16(pKartRefitInfo, 0); //len

		Write32(pKartRefitInfo, 0); //Uin
		Write32(pKartRefitInfo, 0); //KartId
		Write32(pKartRefitInfo, 0); //RefitCout
		Write16(pKartRefitInfo, 0); //MaxFlags
		Write16(pKartRefitInfo, 0); //WWeight
		Write16(pKartRefitInfo, 0); //SpeedWeight
		Write16(pKartRefitInfo, 0); //JetWeight
		Write16(pKartRefitInfo, 0); //SJetWeight
		Write16(pKartRefitInfo, 0); //AccuWeight
		Write32(pKartRefitInfo, 0); //ShapeRefitCount
		Write32(pKartRefitInfo, 0); //KartHeadRefitItemID
		Write32(pKartRefitInfo, 0); //KartTailRefitItemID
		Write32(pKartRefitInfo, 0); //KartFlankRefitItemID
		Write32(pKartRefitInfo, 0); //KartTireRefitItemID

		len = pKartRefitInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 226, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestDanceChangeMusic(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	int MusicID = Read32(p);

}

void ResponseDanceChangeMusic(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //NewMusicID
	Write8(p, 0); //ReasonLen
	WriteString(p, 0); //Reason[]
	Write32(p, 0); //PreKnownMusicID

	len = p - buf;
	SendToClient(Client, 253, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyDanceChangeMusic(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //Uin
	Write32(p, 0); //NewMusicID
	Write32(p, 0); //PreKnownMusicID

	len = p - buf;
	SendToClient(Client, 721, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestChangeScene(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	int SceneID = Read32(p);

}

void ResponseChangeScene(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //NewSceneID
	Write8(p, 0); //ReasonLen
	WriteString(p, 0); //Reason[]

	len = p - buf;
	SendToClient(Client, 254, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyChangeScene(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //Uin
	Write32(p, 0); //NewSceneID

	len = p - buf;
	SendToClient(Client, 722, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyDanceGameBegin(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //NormalLoadTime
	WriteUn(p, 0); //GameID
	WriteUn(p, 0); //Seed
	Write8(p, 0); //CurrentPlayers
	Write32(p, 0); //Mode
	Write32(p, 0); //SceneID
	Write32(p, 0); //MusicID
	Write8(p, 0); //RandKeyFlag
	Write8(p, 0); //PlayerNum
	for (size_t i = 0; i < n; i++)
	{ //LoverDanceStartGameInfo
		BYTE* pLoverDanceStartGameInfo = p;
		Write16(pLoverDanceStartGameInfo, 0); //len

		Write32(pLoverDanceStartGameInfo, 0); //Uin
		Write32(pLoverDanceStartGameInfo, 0); //Mode
		Write8(pLoverDanceStartGameInfo, 0); //RandKeyFlag
		Write8(pLoverDanceStartGameInfo, 0); //TeamID

		len = pLoverDanceStartGameInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 726, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyDanceWaitUnReadyPlayers(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //WaitLoadTime

	len = p - buf;
	SendToClient(Client, 727, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestDancePrepareReady(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	int Mode = Read32(p);
	int SceneID = Read32(p);
	char[] SceneHash[] = ReadString(p);
	int MusicID = Read32(p);
	char[] MusicHash[] = ReadString(p);
	bool RandKeyFlag = Read8(p);
	UINT ClothesWeight = Read32(p);

}

void NotifyDanceRaceBegin(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //CountDownTime
	Write8(p, 0); //PlayerNum
	Write32(p, 0); //Uin[]

	len = p - buf;
	SendToClient(Client, 728, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyDanceShow(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //ShowTime

	len = p - buf;
	SendToClient(Client, 729, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyDanceRaceOver(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //PlayerNum
	for (size_t i = 0; i < n; i++)
	{ //DanceScores
		BYTE* pDanceScores = p;
		Write16(pDanceScores, 0); //len

		WriteUn(pDanceScores, 0); //Uin
		Write32(pDanceScores, 0); //Rank
		Write32(pDanceScores, 0); //Score
		Write32(pDanceScores, 0); //DanceExpInc
		Write32(pDanceScores, 0); //TotalDanceExp
		Write32(pDanceScores, 0); //MaxCombo
		Write32(pDanceScores, 0); //MaxPerfect
		Write32(pDanceScores, 0); //ExpInc
		Write32(pDanceScores, 0); //TotalExp
		Write32(pDanceScores, 0); //MoneyInc
		Write32(pDanceScores, 0); //TotalMoney
		Write8(pDanceScores, 0); //AwardNum
		Write32(pDanceScores, 0); //SpecialAward[]
		Write32(pDanceScores, 0); //Degree
		Write32(pDanceScores, 0); //LoverVipDanceExpMulti

		len = pDanceScores - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //WinTeamID
	WriteUn(p, 0); //AwardTime
	Write8(p, 0); //TeamNum
	for (size_t i = 0; i < n; i++)
	{ //TeamDanceScores
		BYTE* pTeamDanceScores = p;
		Write16(pTeamDanceScores, 0); //len

		Write8(pTeamDanceScores, 0); //TeamID
		Write8(pTeamDanceScores, 0); //TeamRank
		Write32(pTeamDanceScores, 0); //TotalCooper
		Write32(pTeamDanceScores, 0); //TotalScore
		for (size_t i = 0; i < n; i++)
		{ //MemDanceScore
			BYTE* pMemDanceScore = pTeamDanceScores;
			Write16(pMemDanceScore, 0); //len

			WriteUn(pMemDanceScore, 0); //Uin
			Write32(pMemDanceScore, 0); //Rank
			Write32(pMemDanceScore, 0); //Score
			Write32(pMemDanceScore, 0); //DanceExpInc
			Write32(pMemDanceScore, 0); //TotalDanceExp
			Write32(pMemDanceScore, 0); //MaxCombo
			Write32(pMemDanceScore, 0); //MaxPerfect
			Write32(pMemDanceScore, 0); //ExpInc
			Write32(pMemDanceScore, 0); //TotalExp
			Write32(pMemDanceScore, 0); //MoneyInc
			Write32(pMemDanceScore, 0); //TotalMoney
			Write8(pMemDanceScore, 0); //AwardNum
			Write32(pMemDanceScore, 0); //SpecialAward[]
			Write32(pMemDanceScore, 0); //Degree
			Write32(pMemDanceScore, 0); //LoverVipDanceExpMulti

			len = pMemDanceScore - pTeamDanceScores;
			Set16(pTeamDanceScores, (WORD)len);
			pTeamDanceScores += len;
		}

		len = pTeamDanceScores - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 730, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyDanceGameOver(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 731, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestDanceStepStatistics(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	int SegID = Read32(p);
	int StepID = Read32(p);
	int Checksum = Read32(p);
	Un Hits = ReadUn(p);
	{ //Combo
		BYTE* pCombo = p;
		len = Read16(pCombo);

		short First = Read16(pCombo);
		short Last = Read16(pCombo);

		p += len;
	}
	short Decision = Read16(p);

}

void ResponseDanceStepStatistics(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	WriteUn(p, 0); //Uin
	Write32(p, 0); //ScoresInc
	Write32(p, 0); //ScoresTotal

	len = p - buf;
	SendToClient(Client, 260, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyDanceStepStatistics(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //Uin
	Write32(p, 0); //ScoresInc
	Write32(p, 0); //ScoresTotal

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyDanceRank(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //PlayerNum
	Write32(p, 0); //Uin[]

	len = p - buf;
	SendToClient(Client, 733, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetInviteList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);

}

void ResponseGetInviteList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	WriteUn(p, 0); //Uin
	Write16(p, 0); //PlayerNum
	for (size_t i = 0; i < n; i++)
	{ //InvitePlayerBaseInfo
		BYTE* pInvitePlayerBaseInfo = p;
		Write16(pInvitePlayerBaseInfo, 0); //len

		WriteUn(pInvitePlayerBaseInfo, 0); //Uin
		WriteString(pInvitePlayerBaseInfo, 0); //Nickname[]
		Write8(pInvitePlayerBaseInfo, 0); //Gender
		WriteUn(pInvitePlayerBaseInfo, 0); //Identity
		WriteUn(pInvitePlayerBaseInfo, 0); //Experience
		Write32(pInvitePlayerBaseInfo, 0); //License
		Write32(pInvitePlayerBaseInfo, 0); //TotalHonor
		Write32(pInvitePlayerBaseInfo, 0); //Charm
		Write32(pInvitePlayerBaseInfo, 0); //DanceExp
		Write32(pInvitePlayerBaseInfo, 0); //Admiration
		Write32(pInvitePlayerBaseInfo, 0); //TeamWorkExp

		len = pInvitePlayerBaseInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen
	Write8(p, 0); //Type

	len = p - buf;
	SendToClient(Client, 255, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestDanceQuickEnterRoom(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	short BaseGameMode = Read16(p);
	short SubGameMode = Read16(p);
	int DanceMode = Read32(p);

}

void ResponseDanceQuickEnterRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //RoomID
	Write16(p, 0); //BaseGameMode
	Write16(p, 0); //SubGameMode
	WriteString(p, 0); //RoomName[]
	Write8(p, 0); //SeatNum
	Write8(p, 0); //Flag
	Write8(p, 0); //SeatID
	Write8(p, 0); //TeamID
	Write32(p, 0); //Mode
	Write32(p, 0); //SceneID
	Write32(p, 0); //MusicID
	Write8(p, 0); //RandKeyFlag
	Write16(p, 0); //RoomOwnerID
	Write8(p, 0); //SeatStatus[]
	Write8(p, 0); //PlayerCount
	for (size_t i = 0; i < n; i++)
	{ //PlayerRoomVisibleInfo
		BYTE* pPlayerRoomVisibleInfo = p;
		Write16(pPlayerRoomVisibleInfo, 0); //len

		WriteUn(pPlayerRoomVisibleInfo, 0); //Uin
		WriteUn(pPlayerRoomVisibleInfo, 0); //Identity
		Write8(pPlayerRoomVisibleInfo, 0); //SeatID
		Write8(pPlayerRoomVisibleInfo, 0); //TeamID
		Write16(pPlayerRoomVisibleInfo, 0); //PlayerID
		Write8(pPlayerRoomVisibleInfo, 0); //Status
		{ //PlayerDBBaseInfo
			BYTE* pPlayerDBBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerDBBaseInfo, 0); //len

			WriteString(pPlayerDBBaseInfo, 0); //Nickname[]
			Write8(pPlayerDBBaseInfo, 0); //Gender
			Write8(pPlayerDBBaseInfo, 0); //Country
			Write32(pPlayerDBBaseInfo, 0); //License
			WriteUn(pPlayerDBBaseInfo, 0); //Experience
			Write32(pPlayerDBBaseInfo, 0); //SuperMoney
			Write32(pPlayerDBBaseInfo, 0); //Money
			WriteUn(pPlayerDBBaseInfo, 0); //WinNum
			Write32(pPlayerDBBaseInfo, 0); //SecondNum
			Write32(pPlayerDBBaseInfo, 0); //ThirdNum
			WriteUn(pPlayerDBBaseInfo, 0); //TotalNum
			Write32(pPlayerDBBaseInfo, 0); //CurHonor
			Write32(pPlayerDBBaseInfo, 0); //TotalHonor
			Write32(pPlayerDBBaseInfo, 0); //TodayHonor
			Write32(pPlayerDBBaseInfo, 0); //RelaxTime
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationBefore
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationCur
			Write32(pPlayerDBBaseInfo, 0); //Charm
			Write32(pPlayerDBBaseInfo, 0); //DurationGame
			Write32(pPlayerDBBaseInfo, 0); //DanceExp
			Write32(pPlayerDBBaseInfo, 0); //Coupons
			Write32(pPlayerDBBaseInfo, 0); //Admiration
			Write32(pPlayerDBBaseInfo, 0); //LuckMoney
			Write32(pPlayerDBBaseInfo, 0); //TeamWorkExp
			Write32(pPlayerDBBaseInfo, 0); //AchievePoint
			Write32(pPlayerDBBaseInfo, 0); //RegTime
			WriteString(pPlayerDBBaseInfo, 0); //Signature[]
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchPoint
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchNum
			Write16(pPlayerDBBaseInfo, 0); //LuckyMatchFirstNum
			Write8(pPlayerDBBaseInfo, 0); //LuckyMatchBestRand
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchWinNum
			Write32(pPlayerDBBaseInfo, 0); //FizzPointTotal
			Write16(pPlayerDBBaseInfo, 0); //FizzPointDaily
			Write16(pPlayerDBBaseInfo, 0); //FizzPointWeekly
			Write16(pPlayerDBBaseInfo, 0); //FizzPointLastWeek
			Write8(pPlayerDBBaseInfo, 0); //FizzLotteryStatus
			Write32(pPlayerDBBaseInfo, 0); //FizzLastUpdateTime
			Write32(pPlayerDBBaseInfo, 0); //SNSLocaleCode
			Write32(pPlayerDBBaseInfo, 0); //AuctionRightUnlockTime
			Write8(pPlayerDBBaseInfo, 0); //ReserveFlag
			Write32(pPlayerDBBaseInfo, 0); //CurConsumeScore
			Write32(pPlayerDBBaseInfo, 0); //HistoryConsumeScore
			Write8(pPlayerDBBaseInfo, 0); //CrashModeSponsorID
			Write32(pPlayerDBBaseInfo, 0); //Popularity
			Write32(pPlayerDBBaseInfo, 0); //LadderMatchAchievePoint
			Write32(pPlayerDBBaseInfo, 0); //Cash
			Write32(pPlayerDBBaseInfo, 0); //PlayerGPMIdentity
			Write32(pPlayerDBBaseInfo, 0); //PointTotalScore
			WriteUn(pPlayerDBBaseInfo, 0); //totalMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //lastMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalSeasonId
			WriteUn(pPlayerDBBaseInfo, 0); //lastClearMapMedalTime

			len = pPlayerDBBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //PlayerGuildInfo
			BYTE* pPlayerGuildInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerGuildInfo, 0); //len

			WriteString(pPlayerGuildInfo, 0); //GuildName[]
			Write16(pPlayerGuildInfo, 0); //Duty
			Write32(pPlayerGuildInfo, 0); //GuildID
			Write32(pPlayerGuildInfo, 0); //Right
			Write32(pPlayerGuildInfo, 0); //Medal
			Write32(pPlayerGuildInfo, 0); //Contribute
			WriteString(pPlayerGuildInfo, 0); //DutyTitle[]

			len = pPlayerGuildInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write16(pPlayerRoomVisibleInfo, 0); //EquipedItemNum
		for (size_t i = 0; i < n; i++)
		{ //PlayerItemInfo
			BYTE* pPlayerItemInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerItemInfo, 0); //len

			Write32(pPlayerItemInfo, 0); //ItemID
			Write32(pPlayerItemInfo, 0); //ItemNum
			Write32(pPlayerItemInfo, 0); //AvailPeriod
			Write8(pPlayerItemInfo, 0); //Status
			WriteUn(pPlayerItemInfo, 0); //ObtainTime
			Write32(pPlayerItemInfo, 0); //OtherAttribute

			len = pPlayerItemInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write16(pPlayerRoomVisibleInfo, 0); //PetNum
		for (size_t i = 0; i < n; i++)
		{ //PetInfo
			BYTE* pPetInfo = pPlayerRoomVisibleInfo;
			Write16(pPetInfo, 0); //len

			Write32(pPetInfo, 0); //Uin
			Write32(pPetInfo, 0); //PetId
			WriteString(pPetInfo, 0); //PetName[]
			Write8(pPetInfo, 0); //IsProper
			Write16(pPetInfo, 0); //Level
			Write8(pPetInfo, 0); //Status
			Write16(pPetInfo, 0); //PetSkillNum
			for (size_t i = 0; i < n; i++)
			{ //PetSkillList
				BYTE* pPetSkillList = pPetInfo;
				Write16(pPetSkillList, 0); //len

				Write16(pPetSkillList, 0); //SkillID
				Write8(pPetSkillList, 0); //Status
				Write8(pPetSkillList, 0); //Active
				Write32(pPetSkillList, 0); //Value

				len = pPetSkillList - pPetInfo;
				Set16(pPetInfo, (WORD)len);
				pPetInfo += len;
			}
			Write32(pPetInfo, 0); //StrengLevel

			len = pPetInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //PlayerGuildMatchInfo
			BYTE* pPlayerGuildMatchInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerGuildMatchInfo, 0); //len

			Write32(pPlayerGuildMatchInfo, 0); //SelfPoint
			Write32(pPlayerGuildMatchInfo, 0); //WinNum
			Write32(pPlayerGuildMatchInfo, 0); //TotalNum

			len = pPlayerGuildMatchInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //IsInTopList
		Write8(pPlayerRoomVisibleInfo, 0); //LoverRaceOrPro
		Write8(pPlayerRoomVisibleInfo, 0); //TmpEffectNum
		Write32(pPlayerRoomVisibleInfo, 0); //TmpEffectItems[]
		Write8(pPlayerRoomVisibleInfo, 0); //OBState
		Write8(pPlayerRoomVisibleInfo, 0); //DebutOrX5
		Write8(pPlayerRoomVisibleInfo, 0); //RandKeyFlag
		WriteUn(pPlayerRoomVisibleInfo, 0); //VipFlag
		Write8(pPlayerRoomVisibleInfo, 0); //HaveAppellation
		for (size_t i = 0; i < n; i++)
		{ //CurAppellation
			BYTE* pCurAppellation = pPlayerRoomVisibleInfo;
			Write16(pCurAppellation, 0); //len

			Write8(pCurAppellation, 0); //Type
			Write8(pCurAppellation, 0); //Level
			Write8(pCurAppellation, 0); //Status
			Write8(pCurAppellation, 0); //Difficulty
			Write32(pCurAppellation, 0); //MapId
			Write32(pCurAppellation, 0); //Value

			len = pCurAppellation - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //NobleInfo
			BYTE* pNobleInfo = pPlayerRoomVisibleInfo;
			Write16(pNobleInfo, 0); //len

			Write32(pNobleInfo, 0); //NobleID
			Write8(pNobleInfo, 0); //NobleLevel
			Write32(pNobleInfo, 0); //NoblePoint
			Write32(pNobleInfo, 0); //NobleLeftDays

			len = pNobleInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasCarryWizard
		for (size_t i = 0; i < n; i++)
		{ //CarryWizardInfo
			BYTE* pCarryWizardInfo = pPlayerRoomVisibleInfo;
			Write16(pCarryWizardInfo, 0); //len

			Write16(pCarryWizardInfo, 0); //WizardID
			WriteString(pCarryWizardInfo, 0); //Nickname[]
			Write16(pCarryWizardInfo, 0); //WizardType
			Write8(pCarryWizardInfo, 0); //Order
			Write8(pCarryWizardInfo, 0); //EvolutionBranch
			Write8(pCarryWizardInfo, 0); //IsHuanHua

			len = pCarryWizardInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //GuildVipBaseInfo
			BYTE* pGuildVipBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pGuildVipBaseInfo, 0); //len

			Write8(pGuildVipBaseInfo, 0); //GuildVipLevel
			Write32(pGuildVipBaseInfo, 0); //GuildVipPoint

			len = pGuildVipBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write32(pPlayerRoomVisibleInfo, 0); //ExFlag
		Write8(pPlayerRoomVisibleInfo, 0); //HaveLDMBaseInfo
		for (size_t i = 0; i < n; i++)
		{ //PlayerLDMBaseInfo
			BYTE* pPlayerLDMBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerLDMBaseInfo, 0); //len

			Write8(pPlayerLDMBaseInfo, 0); //Grade
			Write32(pPlayerLDMBaseInfo, 0); //Score
			Write32(pPlayerLDMBaseInfo, 0); //MaxScore
			Write32(pPlayerLDMBaseInfo, 0); //MaxGrade

			len = pPlayerLDMBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasWl
		for (size_t i = 0; i < n; i++)
		{ //PlayerWlVisibleInfo
			BYTE* pPlayerWlVisibleInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerWlVisibleInfo, 0); //len

			Write32(pPlayerWlVisibleInfo, 0); //WonderLandID
			WriteString(pPlayerWlVisibleInfo, 0); //WonderLandName[]
			Write16(pPlayerWlVisibleInfo, 0); //WonderLandDuty
			Write8(pPlayerWlVisibleInfo, 0); //SubType
			Write8(pPlayerWlVisibleInfo, 0); //GuildGrade

			len = pPlayerWlVisibleInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasLoverVip
		for (size_t i = 0; i < n; i++)
		{ //LoverVipInfo
			BYTE* pLoverVipInfo = pPlayerRoomVisibleInfo;
			Write16(pLoverVipInfo, 0); //len

			Write8(pLoverVipInfo, 0); //LoverVipLevel
			Write32(pLoverVipInfo, 0); //LoverVipPoint
			Write8(pLoverVipInfo, 0); //GrowRate

			len = pLoverVipInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasBattleModeSkillInfoList
		for (size_t i = 0; i < n; i++)
		{ //BattleModeSkillInfoList
			BYTE* pBattleModeSkillInfoList = pPlayerRoomVisibleInfo;
			Write16(pBattleModeSkillInfoList, 0); //len

			Write8(pBattleModeSkillInfoList, 0); //SkillNum
			for (size_t i = 0; i < n; i++)
			{ //SkillInfo
				BYTE* pSkillInfo = pBattleModeSkillInfoList;
				Write16(pSkillInfo, 0); //len

				Write16(pSkillInfo, 0); //SkillId
				Write8(pSkillInfo, 0); //SkillLevel

				len = pSkillInfo - pBattleModeSkillInfoList;
				Set16(pBattleModeSkillInfoList, (WORD)len);
				pBattleModeSkillInfoList += len;
			}

			len = pBattleModeSkillInfoList - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}

		len = pPlayerRoomVisibleInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen
	Write8(p, 0); //PlayerCount2
	for (size_t i = 0; i < n; i++)
	{ //PlayerRelationInfo
		BYTE* pPlayerRelationInfo = p;
		Write16(pPlayerRelationInfo, 0); //len

		Write32(pPlayerRelationInfo, 0); //SrcUin
		Write32(pPlayerRelationInfo, 0); //RelationFlag
		Write32(pPlayerRelationInfo, 0); //RelationUin
		WriteString(pPlayerRelationInfo, 0); //RelationNickname[]
		Write32(pPlayerRelationInfo, 0); //EngageTime
		Write32(pPlayerRelationInfo, 0); //NextCanBookingTimeLimit
		Write32(pPlayerRelationInfo, 0); //BeginHoneyMoonTime
		Write32(pPlayerRelationInfo, 0); //EndHoneyMoonTime
		Write8(pPlayerRelationInfo, 0); //EngageFlag

		len = pPlayerRelationInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //DebutOrX5
	Write32(p, 0); //PreKnownMusicID
	Write8(p, 0); //HasMoreInfo
	Write16(p, 0); //KartNum
	for (size_t i = 0; i < n; i++)
	{ //KartRefitInfo
		BYTE* pKartRefitInfo = p;
		Write16(pKartRefitInfo, 0); //len

		Write32(pKartRefitInfo, 0); //Uin
		Write32(pKartRefitInfo, 0); //KartId
		Write32(pKartRefitInfo, 0); //RefitCout
		Write16(pKartRefitInfo, 0); //MaxFlags
		Write16(pKartRefitInfo, 0); //WWeight
		Write16(pKartRefitInfo, 0); //SpeedWeight
		Write16(pKartRefitInfo, 0); //JetWeight
		Write16(pKartRefitInfo, 0); //SJetWeight
		Write16(pKartRefitInfo, 0); //AccuWeight
		Write32(pKartRefitInfo, 0); //ShapeRefitCount
		Write32(pKartRefitInfo, 0); //KartHeadRefitItemID
		Write32(pKartRefitInfo, 0); //KartTailRefitItemID
		Write32(pKartRefitInfo, 0); //KartFlankRefitItemID
		Write32(pKartRefitInfo, 0); //KartTireRefitItemID

		len = pKartRefitInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 256, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyQuickEnterDanceRoomMoreInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //PlayerCount
	for (size_t i = 0; i < n; i++)
	{ //PlayerRoomVisibleInfo
		BYTE* pPlayerRoomVisibleInfo = p;
		Write16(pPlayerRoomVisibleInfo, 0); //len

		WriteUn(pPlayerRoomVisibleInfo, 0); //Uin
		WriteUn(pPlayerRoomVisibleInfo, 0); //Identity
		Write8(pPlayerRoomVisibleInfo, 0); //SeatID
		Write8(pPlayerRoomVisibleInfo, 0); //TeamID
		Write16(pPlayerRoomVisibleInfo, 0); //PlayerID
		Write8(pPlayerRoomVisibleInfo, 0); //Status
		{ //PlayerDBBaseInfo
			BYTE* pPlayerDBBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerDBBaseInfo, 0); //len

			WriteString(pPlayerDBBaseInfo, 0); //Nickname[]
			Write8(pPlayerDBBaseInfo, 0); //Gender
			Write8(pPlayerDBBaseInfo, 0); //Country
			Write32(pPlayerDBBaseInfo, 0); //License
			WriteUn(pPlayerDBBaseInfo, 0); //Experience
			Write32(pPlayerDBBaseInfo, 0); //SuperMoney
			Write32(pPlayerDBBaseInfo, 0); //Money
			WriteUn(pPlayerDBBaseInfo, 0); //WinNum
			Write32(pPlayerDBBaseInfo, 0); //SecondNum
			Write32(pPlayerDBBaseInfo, 0); //ThirdNum
			WriteUn(pPlayerDBBaseInfo, 0); //TotalNum
			Write32(pPlayerDBBaseInfo, 0); //CurHonor
			Write32(pPlayerDBBaseInfo, 0); //TotalHonor
			Write32(pPlayerDBBaseInfo, 0); //TodayHonor
			Write32(pPlayerDBBaseInfo, 0); //RelaxTime
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationBefore
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationCur
			Write32(pPlayerDBBaseInfo, 0); //Charm
			Write32(pPlayerDBBaseInfo, 0); //DurationGame
			Write32(pPlayerDBBaseInfo, 0); //DanceExp
			Write32(pPlayerDBBaseInfo, 0); //Coupons
			Write32(pPlayerDBBaseInfo, 0); //Admiration
			Write32(pPlayerDBBaseInfo, 0); //LuckMoney
			Write32(pPlayerDBBaseInfo, 0); //TeamWorkExp
			Write32(pPlayerDBBaseInfo, 0); //AchievePoint
			Write32(pPlayerDBBaseInfo, 0); //RegTime
			WriteString(pPlayerDBBaseInfo, 0); //Signature[]
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchPoint
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchNum
			Write16(pPlayerDBBaseInfo, 0); //LuckyMatchFirstNum
			Write8(pPlayerDBBaseInfo, 0); //LuckyMatchBestRand
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchWinNum
			Write32(pPlayerDBBaseInfo, 0); //FizzPointTotal
			Write16(pPlayerDBBaseInfo, 0); //FizzPointDaily
			Write16(pPlayerDBBaseInfo, 0); //FizzPointWeekly
			Write16(pPlayerDBBaseInfo, 0); //FizzPointLastWeek
			Write8(pPlayerDBBaseInfo, 0); //FizzLotteryStatus
			Write32(pPlayerDBBaseInfo, 0); //FizzLastUpdateTime
			Write32(pPlayerDBBaseInfo, 0); //SNSLocaleCode
			Write32(pPlayerDBBaseInfo, 0); //AuctionRightUnlockTime
			Write8(pPlayerDBBaseInfo, 0); //ReserveFlag
			Write32(pPlayerDBBaseInfo, 0); //CurConsumeScore
			Write32(pPlayerDBBaseInfo, 0); //HistoryConsumeScore
			Write8(pPlayerDBBaseInfo, 0); //CrashModeSponsorID
			Write32(pPlayerDBBaseInfo, 0); //Popularity
			Write32(pPlayerDBBaseInfo, 0); //LadderMatchAchievePoint
			Write32(pPlayerDBBaseInfo, 0); //Cash
			Write32(pPlayerDBBaseInfo, 0); //PlayerGPMIdentity
			Write32(pPlayerDBBaseInfo, 0); //PointTotalScore
			WriteUn(pPlayerDBBaseInfo, 0); //totalMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //lastMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalSeasonId
			WriteUn(pPlayerDBBaseInfo, 0); //lastClearMapMedalTime

			len = pPlayerDBBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //PlayerGuildInfo
			BYTE* pPlayerGuildInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerGuildInfo, 0); //len

			WriteString(pPlayerGuildInfo, 0); //GuildName[]
			Write16(pPlayerGuildInfo, 0); //Duty
			Write32(pPlayerGuildInfo, 0); //GuildID
			Write32(pPlayerGuildInfo, 0); //Right
			Write32(pPlayerGuildInfo, 0); //Medal
			Write32(pPlayerGuildInfo, 0); //Contribute
			WriteString(pPlayerGuildInfo, 0); //DutyTitle[]

			len = pPlayerGuildInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write16(pPlayerRoomVisibleInfo, 0); //EquipedItemNum
		for (size_t i = 0; i < n; i++)
		{ //PlayerItemInfo
			BYTE* pPlayerItemInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerItemInfo, 0); //len

			Write32(pPlayerItemInfo, 0); //ItemID
			Write32(pPlayerItemInfo, 0); //ItemNum
			Write32(pPlayerItemInfo, 0); //AvailPeriod
			Write8(pPlayerItemInfo, 0); //Status
			WriteUn(pPlayerItemInfo, 0); //ObtainTime
			Write32(pPlayerItemInfo, 0); //OtherAttribute

			len = pPlayerItemInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write16(pPlayerRoomVisibleInfo, 0); //PetNum
		for (size_t i = 0; i < n; i++)
		{ //PetInfo
			BYTE* pPetInfo = pPlayerRoomVisibleInfo;
			Write16(pPetInfo, 0); //len

			Write32(pPetInfo, 0); //Uin
			Write32(pPetInfo, 0); //PetId
			WriteString(pPetInfo, 0); //PetName[]
			Write8(pPetInfo, 0); //IsProper
			Write16(pPetInfo, 0); //Level
			Write8(pPetInfo, 0); //Status
			Write16(pPetInfo, 0); //PetSkillNum
			for (size_t i = 0; i < n; i++)
			{ //PetSkillList
				BYTE* pPetSkillList = pPetInfo;
				Write16(pPetSkillList, 0); //len

				Write16(pPetSkillList, 0); //SkillID
				Write8(pPetSkillList, 0); //Status
				Write8(pPetSkillList, 0); //Active
				Write32(pPetSkillList, 0); //Value

				len = pPetSkillList - pPetInfo;
				Set16(pPetInfo, (WORD)len);
				pPetInfo += len;
			}
			Write32(pPetInfo, 0); //StrengLevel

			len = pPetInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //PlayerGuildMatchInfo
			BYTE* pPlayerGuildMatchInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerGuildMatchInfo, 0); //len

			Write32(pPlayerGuildMatchInfo, 0); //SelfPoint
			Write32(pPlayerGuildMatchInfo, 0); //WinNum
			Write32(pPlayerGuildMatchInfo, 0); //TotalNum

			len = pPlayerGuildMatchInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //IsInTopList
		Write8(pPlayerRoomVisibleInfo, 0); //LoverRaceOrPro
		Write8(pPlayerRoomVisibleInfo, 0); //TmpEffectNum
		Write32(pPlayerRoomVisibleInfo, 0); //TmpEffectItems[]
		Write8(pPlayerRoomVisibleInfo, 0); //OBState
		Write8(pPlayerRoomVisibleInfo, 0); //DebutOrX5
		Write8(pPlayerRoomVisibleInfo, 0); //RandKeyFlag
		WriteUn(pPlayerRoomVisibleInfo, 0); //VipFlag
		Write8(pPlayerRoomVisibleInfo, 0); //HaveAppellation
		for (size_t i = 0; i < n; i++)
		{ //CurAppellation
			BYTE* pCurAppellation = pPlayerRoomVisibleInfo;
			Write16(pCurAppellation, 0); //len

			Write8(pCurAppellation, 0); //Type
			Write8(pCurAppellation, 0); //Level
			Write8(pCurAppellation, 0); //Status
			Write8(pCurAppellation, 0); //Difficulty
			Write32(pCurAppellation, 0); //MapId
			Write32(pCurAppellation, 0); //Value

			len = pCurAppellation - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //NobleInfo
			BYTE* pNobleInfo = pPlayerRoomVisibleInfo;
			Write16(pNobleInfo, 0); //len

			Write32(pNobleInfo, 0); //NobleID
			Write8(pNobleInfo, 0); //NobleLevel
			Write32(pNobleInfo, 0); //NoblePoint
			Write32(pNobleInfo, 0); //NobleLeftDays

			len = pNobleInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasCarryWizard
		for (size_t i = 0; i < n; i++)
		{ //CarryWizardInfo
			BYTE* pCarryWizardInfo = pPlayerRoomVisibleInfo;
			Write16(pCarryWizardInfo, 0); //len

			Write16(pCarryWizardInfo, 0); //WizardID
			WriteString(pCarryWizardInfo, 0); //Nickname[]
			Write16(pCarryWizardInfo, 0); //WizardType
			Write8(pCarryWizardInfo, 0); //Order
			Write8(pCarryWizardInfo, 0); //EvolutionBranch
			Write8(pCarryWizardInfo, 0); //IsHuanHua

			len = pCarryWizardInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		{ //GuildVipBaseInfo
			BYTE* pGuildVipBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pGuildVipBaseInfo, 0); //len

			Write8(pGuildVipBaseInfo, 0); //GuildVipLevel
			Write32(pGuildVipBaseInfo, 0); //GuildVipPoint

			len = pGuildVipBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write32(pPlayerRoomVisibleInfo, 0); //ExFlag
		Write8(pPlayerRoomVisibleInfo, 0); //HaveLDMBaseInfo
		for (size_t i = 0; i < n; i++)
		{ //PlayerLDMBaseInfo
			BYTE* pPlayerLDMBaseInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerLDMBaseInfo, 0); //len

			Write8(pPlayerLDMBaseInfo, 0); //Grade
			Write32(pPlayerLDMBaseInfo, 0); //Score
			Write32(pPlayerLDMBaseInfo, 0); //MaxScore
			Write32(pPlayerLDMBaseInfo, 0); //MaxGrade

			len = pPlayerLDMBaseInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasWl
		for (size_t i = 0; i < n; i++)
		{ //PlayerWlVisibleInfo
			BYTE* pPlayerWlVisibleInfo = pPlayerRoomVisibleInfo;
			Write16(pPlayerWlVisibleInfo, 0); //len

			Write32(pPlayerWlVisibleInfo, 0); //WonderLandID
			WriteString(pPlayerWlVisibleInfo, 0); //WonderLandName[]
			Write16(pPlayerWlVisibleInfo, 0); //WonderLandDuty
			Write8(pPlayerWlVisibleInfo, 0); //SubType
			Write8(pPlayerWlVisibleInfo, 0); //GuildGrade

			len = pPlayerWlVisibleInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasLoverVip
		for (size_t i = 0; i < n; i++)
		{ //LoverVipInfo
			BYTE* pLoverVipInfo = pPlayerRoomVisibleInfo;
			Write16(pLoverVipInfo, 0); //len

			Write8(pLoverVipInfo, 0); //LoverVipLevel
			Write32(pLoverVipInfo, 0); //LoverVipPoint
			Write8(pLoverVipInfo, 0); //GrowRate

			len = pLoverVipInfo - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}
		Write8(pPlayerRoomVisibleInfo, 0); //HasBattleModeSkillInfoList
		for (size_t i = 0; i < n; i++)
		{ //BattleModeSkillInfoList
			BYTE* pBattleModeSkillInfoList = pPlayerRoomVisibleInfo;
			Write16(pBattleModeSkillInfoList, 0); //len

			Write8(pBattleModeSkillInfoList, 0); //SkillNum
			for (size_t i = 0; i < n; i++)
			{ //SkillInfo
				BYTE* pSkillInfo = pBattleModeSkillInfoList;
				Write16(pSkillInfo, 0); //len

				Write16(pSkillInfo, 0); //SkillId
				Write8(pSkillInfo, 0); //SkillLevel

				len = pSkillInfo - pBattleModeSkillInfoList;
				Set16(pBattleModeSkillInfoList, (WORD)len);
				pBattleModeSkillInfoList += len;
			}

			len = pBattleModeSkillInfoList - pPlayerRoomVisibleInfo;
			Set16(pPlayerRoomVisibleInfo, (WORD)len);
			pPlayerRoomVisibleInfo += len;
		}

		len = pPlayerRoomVisibleInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //PlayerCount2
	for (size_t i = 0; i < n; i++)
	{ //PlayerRelationInfo
		BYTE* pPlayerRelationInfo = p;
		Write16(pPlayerRelationInfo, 0); //len

		Write32(pPlayerRelationInfo, 0); //SrcUin
		Write32(pPlayerRelationInfo, 0); //RelationFlag
		Write32(pPlayerRelationInfo, 0); //RelationUin
		WriteString(pPlayerRelationInfo, 0); //RelationNickname[]
		Write32(pPlayerRelationInfo, 0); //EngageTime
		Write32(pPlayerRelationInfo, 0); //NextCanBookingTimeLimit
		Write32(pPlayerRelationInfo, 0); //BeginHoneyMoonTime
		Write32(pPlayerRelationInfo, 0); //EndHoneyMoonTime
		Write8(pPlayerRelationInfo, 0); //EngageFlag

		len = pPlayerRelationInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasNext
	Write16(p, 0); //KartNum
	for (size_t i = 0; i < n; i++)
	{ //KartRefitInfo
		BYTE* pKartRefitInfo = p;
		Write16(pKartRefitInfo, 0); //len

		Write32(pKartRefitInfo, 0); //Uin
		Write32(pKartRefitInfo, 0); //KartId
		Write32(pKartRefitInfo, 0); //RefitCout
		Write16(pKartRefitInfo, 0); //MaxFlags
		Write16(pKartRefitInfo, 0); //WWeight
		Write16(pKartRefitInfo, 0); //SpeedWeight
		Write16(pKartRefitInfo, 0); //JetWeight
		Write16(pKartRefitInfo, 0); //SJetWeight
		Write16(pKartRefitInfo, 0); //AccuWeight
		Write32(pKartRefitInfo, 0); //ShapeRefitCount
		Write32(pKartRefitInfo, 0); //KartHeadRefitItemID
		Write32(pKartRefitInfo, 0); //KartTailRefitItemID
		Write32(pKartRefitInfo, 0); //KartFlankRefitItemID
		Write32(pKartRefitInfo, 0); //KartTireRefitItemID

		len = pKartRefitInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 227, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifySkillStoneKartInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //uin
	WriteUn(p, 0); //kartNum
	for (size_t i = 0; i < n; i++)
	{ //kartInfo
		BYTE* pkartInfo = p;
		Write16(pkartInfo, 0); //len

		Write32(pkartInfo, 0); //KartID
		Write32(pkartInfo, 0); //StoneGrooveNum
		for (size_t i = 0; i < n; i++)
		{ //StoneGrooveInfo
			BYTE* pStoneGrooveInfo = pkartInfo;
			Write16(pStoneGrooveInfo, 0); //len

			Write32(pStoneGrooveInfo, 0); //StoneUseOccaType
			Write32(pStoneGrooveInfo, 0); //SkillStoneID

			len = pStoneGrooveInfo - pkartInfo;
			Set16(pkartInfo, (WORD)len);
			pkartInfo += len;
		}

		len = pkartInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 228, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestDanceChangeMode(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	int Mode = Read32(p);

}

void ResponseDanceChangeMode(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //NewMode
	Write8(p, 0); //ReasonLen
	Write32(p, 0); //PreKnownMusicID

	len = p - buf;
	SendToClient(Client, 257, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyDanceChangeMode(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //Uin
	Write32(p, 0); //NewMode
	Write32(p, 0); //PreKnownMusicID

	len = p - buf;
	SendToClient(Client, 723, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestDanceChangeRandKeyFlag(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	bool RandKeyFlag = Read8(p);

}

void ResponseDanceChangeRandKeyFlag(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //NewRandKeyFlag
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 258, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyDanceChangeRandKeyFlag(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //Uin
	Write8(p, 0); //NewRandKeyFlag

	len = p - buf;
	SendToClient(Client, 724, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestAffection(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	Un Time = ReadUn(p);
	UINT SrcUin = Read32(p);
	UINT DstUin = Read32(p);
	short RoomID = Read16(p);
	int ItemID = Read32(p);

}

void NotifyAffection(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //SrcUin
	Write32(p, 0); //DstUin
	Write16(p, 0); //RoomID
	Write32(p, 0); //ItemID
	Write16(p, 0); //IncAdiration
	Write32(p, 0); //CurAdiration

	len = p - buf;
	SendToClient(Client, 593, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestAKAffection(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	Un Time = ReadUn(p);
	UINT SrcUin = Read32(p);
	UINT DstUin = Read32(p);
	short RoomID = Read16(p);
	int ItemID = Read32(p);

}

void NotifyAKAffection(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //SrcUin
	Write32(p, 0); //DstUin
	Write16(p, 0); //RoomID
	Write32(p, 0); //ItemID
	Write16(p, 0); //IncAdiration
	Write32(p, 0); //CurAdiration

	len = p - buf;
	SendToClient(Client, 594, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestChangeRoomName(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	char[] NewRoomName[] = ReadString(p);

}

void ResponseChangeRoomName(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	WriteString(p, 0); //NewRoomName[]
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 222, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyChangeRoomName(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteString(p, 0); //NewRoomName[]

	len = p - buf;
	SendToClient(Client, 598, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyNPCInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //NPCCfgVer
	Write8(p, 0); //NPCNum
	for (size_t i = 0; i < n; i++)
	{ //NPCInfo
		BYTE* pNPCInfo = p;
		Write16(pNPCInfo, 0); //len

		Write32(pNPCInfo, 0); //NPCID
		WriteString(pNPCInfo, 0); //NPCName[]
		Write8(pNPCInfo, 0); //SceneNum
		for (size_t i = 0; i < n; i++)
		{ //NPCPositionInScene
			BYTE* pNPCPositionInScene = pNPCInfo;
			Write16(pNPCPositionInScene, 0); //len

			Write32(pNPCPositionInScene, 0); //SceneID
			Write8(pNPCPositionInScene, 0); //NPCPositionNum
			for (size_t i = 0; i < n; i++)
			{ //NPCPosition
				BYTE* pNPCPosition = pNPCPositionInScene;
				Write16(pNPCPosition, 0); //len

				Write32(pNPCPosition, 0); //Postion[]

				len = pNPCPosition - pNPCPositionInScene;
				Set16(pNPCPositionInScene, (WORD)len);
				pNPCPositionInScene += len;
			}

			len = pNPCPositionInScene - pNPCInfo;
			Set16(pNPCInfo, (WORD)len);
			pNPCInfo += len;
		}
		Write8(pNPCInfo, 0); //ActNum
		Write32(pNPCInfo, 0); //ActionID[]
		Write8(pNPCInfo, 0); //SpeechNum
		for (size_t i = 0; i < n; i++)
		{ //Speech
			BYTE* pSpeech = pNPCInfo;
			Write16(pSpeech, 0); //len

			Write8(pSpeech, 0); //Len

			len = pSpeech - pNPCInfo;
			Set16(pNPCInfo, (WORD)len);
			pNPCInfo += len;
		}
		Write8(pNPCInfo, 0); //SpeechNum2
		for (size_t i = 0; i < n; i++)
		{ //Speech2
			BYTE* pSpeech2 = pNPCInfo;
			Write16(pSpeech2, 0); //len

			Write8(pSpeech2, 0); //Len

			len = pSpeech2 - pNPCInfo;
			Set16(pNPCInfo, (WORD)len);
			pNPCInfo += len;
		}
		{ //NPCItemInfo
			BYTE* pNPCItemInfo = pNPCInfo;
			Write16(pNPCItemInfo, 0); //len

			Write32(pNPCItemInfo, 0); //RoleID
			Write32(pNPCItemInfo, 0); //HairID
			Write32(pNPCItemInfo, 0); //FaceID
			Write32(pNPCItemInfo, 0); //GlassID
			Write32(pNPCItemInfo, 0); //CoatID
			Write32(pNPCItemInfo, 0); //GloveID
			Write32(pNPCItemInfo, 0); //TrousersID
			Write32(pNPCItemInfo, 0); //PersonarID
			Write32(pNPCItemInfo, 0); //TattooID
			Write32(pNPCItemInfo, 0); //WingID
			Write32(pNPCItemInfo, 0); //DecoratorID
			Write32(pNPCItemInfo, 0); //KartID
			Write32(pNPCItemInfo, 0); //ColorID
			Write32(pNPCItemInfo, 0); //TrackID
			Write32(pNPCItemInfo, 0); //EffectID
			Write32(pNPCItemInfo, 0); //BrandID
			Write32(pNPCItemInfo, 0); //TailID

			len = pNPCItemInfo - pNPCInfo;
			Set16(pNPCInfo, (WORD)len);
			pNPCInfo += len;
		}
		Write8(pNPCInfo, 0); //DialogNum
		for (size_t i = 0; i < n; i++)
		{ //NPCDialogInfo
			BYTE* pNPCDialogInfo = pNPCInfo;
			Write16(pNPCDialogInfo, 0); //len

			Write32(pNPCDialogInfo, 0); //DialogID
			WriteString(pNPCDialogInfo, 0); //Title[]
			Write16(pNPCDialogInfo, 0); //ContLen
			Write8(pNPCDialogInfo, 0); //LinkNum
			for (size_t i = 0; i < n; i++)
			{ //LinkInfo
				BYTE* pLinkInfo = pNPCDialogInfo;
				Write16(pLinkInfo, 0); //len

				Write16(pLinkInfo, 0); //LinkLen

				len = pLinkInfo - pNPCDialogInfo;
				Set16(pNPCDialogInfo, (WORD)len);
				pNPCDialogInfo += len;
			}

			len = pNPCDialogInfo - pNPCInfo;
			Set16(pNPCInfo, (WORD)len);
			pNPCInfo += len;
		}
		Write8(pNPCInfo, 0); //NPCType
		Write32(pNPCInfo, 0); //Interval
		Write8(pNPCInfo, 0); //UnChangeItemTypeNum
		Write32(pNPCInfo, 0); //UnChangeItemType[]
		Write32(pNPCInfo, 0); //SpeechInterval

		len = pNPCInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 863, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetPkableNPCInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetPkableNPCInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //NPCNum
	for (size_t i = 0; i < n; i++)
	{ //NPCInfo
		BYTE* pNPCInfo = p;
		Write16(pNPCInfo, 0); //len

		{ //NPCBaseInfo
			BYTE* pNPCBaseInfo = pNPCInfo;
			Write16(pNPCBaseInfo, 0); //len

			Write32(pNPCBaseInfo, 0); //NPCID
			WriteString(pNPCBaseInfo, 0); //NPCNickName[]
			{ //NPCItemInfo
				BYTE* pNPCItemInfo = pNPCBaseInfo;
				Write16(pNPCItemInfo, 0); //len

				Write32(pNPCItemInfo, 0); //RoleID
				Write32(pNPCItemInfo, 0); //HairID
				Write32(pNPCItemInfo, 0); //FaceID
				Write32(pNPCItemInfo, 0); //GlassID
				Write32(pNPCItemInfo, 0); //CoatID
				Write32(pNPCItemInfo, 0); //GloveID
				Write32(pNPCItemInfo, 0); //TrousersID
				Write32(pNPCItemInfo, 0); //PersonarID
				Write32(pNPCItemInfo, 0); //TattooID
				Write32(pNPCItemInfo, 0); //WingID
				Write32(pNPCItemInfo, 0); //DecoratorID
				Write32(pNPCItemInfo, 0); //KartID
				Write32(pNPCItemInfo, 0); //ColorID
				Write32(pNPCItemInfo, 0); //TrackID
				Write32(pNPCItemInfo, 0); //EffectID
				Write32(pNPCItemInfo, 0); //BrandID
				Write32(pNPCItemInfo, 0); //TailID

				len = pNPCItemInfo - pNPCBaseInfo;
				Set16(pNPCBaseInfo, (WORD)len);
				pNPCBaseInfo += len;
			}

			len = pNPCBaseInfo - pNPCInfo;
			Set16(pNPCInfo, (WORD)len);
			pNPCInfo += len;
		}
		{ //NPCStatusInfo
			BYTE* pNPCStatusInfo = pNPCInfo;
			Write16(pNPCStatusInfo, 0); //len

			Write32(pNPCStatusInfo, 0); //Interval
			Write32(pNPCStatusInfo, 0); //LastPlayerUin
			WriteString(pNPCStatusInfo, 0); //LastPlayerNickName[]
			Write32(pNPCStatusInfo, 0); //Time

			len = pNPCStatusInfo - pNPCInfo;
			Set16(pNPCInfo, (WORD)len);
			pNPCInfo += len;
		}

		len = pNPCInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 431, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestCheckNickName(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	char[] NickName[] = ReadString(p);

}

void ResponseCheckNickName(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	WriteString(p, 0); //NickName[]

	len = p - buf;
	SendToClient(Client, 432, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestSetPkableNPCInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	{ //NPCBaseInfo
		BYTE* pNPCBaseInfo = p;
		len = Read16(pNPCBaseInfo);

		int NPCID = Read32(pNPCBaseInfo);
		char[] NPCNickName[] = ReadString(pNPCBaseInfo);
		{ //NPCItemInfo
			BYTE* pNPCItemInfo = pNPCBaseInfo;
			len = Read16(pNPCItemInfo);

			int RoleID = Read32(pNPCItemInfo);
			int HairID = Read32(pNPCItemInfo);
			int FaceID = Read32(pNPCItemInfo);
			int GlassID = Read32(pNPCItemInfo);
			int CoatID = Read32(pNPCItemInfo);
			int GloveID = Read32(pNPCItemInfo);
			int TrousersID = Read32(pNPCItemInfo);
			int PersonarID = Read32(pNPCItemInfo);
			int TattooID = Read32(pNPCItemInfo);
			int WingID = Read32(pNPCItemInfo);
			int DecoratorID = Read32(pNPCItemInfo);
			int KartID = Read32(pNPCItemInfo);
			int ColorID = Read32(pNPCItemInfo);
			int TrackID = Read32(pNPCItemInfo);
			int EffectID = Read32(pNPCItemInfo);
			int BrandID = Read32(pNPCItemInfo);
			int TailID = Read32(pNPCItemInfo);

			pNPCBaseInfo += len;
		}

		p += len;
	}

}

void ResponseSetPkableNPCInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	{ //NPCInfo
		BYTE* pNPCInfo = p;
		Write16(pNPCInfo, 0); //len

		{ //NPCBaseInfo
			BYTE* pNPCBaseInfo = pNPCInfo;
			Write16(pNPCBaseInfo, 0); //len

			Write32(pNPCBaseInfo, 0); //NPCID
			WriteString(pNPCBaseInfo, 0); //NPCNickName[]
			{ //NPCItemInfo
				BYTE* pNPCItemInfo = pNPCBaseInfo;
				Write16(pNPCItemInfo, 0); //len

				Write32(pNPCItemInfo, 0); //RoleID
				Write32(pNPCItemInfo, 0); //HairID
				Write32(pNPCItemInfo, 0); //FaceID
				Write32(pNPCItemInfo, 0); //GlassID
				Write32(pNPCItemInfo, 0); //CoatID
				Write32(pNPCItemInfo, 0); //GloveID
				Write32(pNPCItemInfo, 0); //TrousersID
				Write32(pNPCItemInfo, 0); //PersonarID
				Write32(pNPCItemInfo, 0); //TattooID
				Write32(pNPCItemInfo, 0); //WingID
				Write32(pNPCItemInfo, 0); //DecoratorID
				Write32(pNPCItemInfo, 0); //KartID
				Write32(pNPCItemInfo, 0); //ColorID
				Write32(pNPCItemInfo, 0); //TrackID
				Write32(pNPCItemInfo, 0); //EffectID
				Write32(pNPCItemInfo, 0); //BrandID
				Write32(pNPCItemInfo, 0); //TailID

				len = pNPCItemInfo - pNPCBaseInfo;
				Set16(pNPCBaseInfo, (WORD)len);
				pNPCBaseInfo += len;
			}

			len = pNPCBaseInfo - pNPCInfo;
			Set16(pNPCInfo, (WORD)len);
			pNPCInfo += len;
		}
		{ //NPCStatusInfo
			BYTE* pNPCStatusInfo = pNPCInfo;
			Write16(pNPCStatusInfo, 0); //len

			Write32(pNPCStatusInfo, 0); //Interval
			Write32(pNPCStatusInfo, 0); //LastPlayerUin
			WriteString(pNPCStatusInfo, 0); //LastPlayerNickName[]
			Write32(pNPCStatusInfo, 0); //Time

			len = pNPCStatusInfo - pNPCInfo;
			Set16(pNPCInfo, (WORD)len);
			pNPCInfo += len;
		}

		len = pNPCInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 433, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifySetPkableNPCInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	{ //NPCInfo
		BYTE* pNPCInfo = p;
		Write16(pNPCInfo, 0); //len

		{ //NPCBaseInfo
			BYTE* pNPCBaseInfo = pNPCInfo;
			Write16(pNPCBaseInfo, 0); //len

			Write32(pNPCBaseInfo, 0); //NPCID
			WriteString(pNPCBaseInfo, 0); //NPCNickName[]
			{ //NPCItemInfo
				BYTE* pNPCItemInfo = pNPCBaseInfo;
				Write16(pNPCItemInfo, 0); //len

				Write32(pNPCItemInfo, 0); //RoleID
				Write32(pNPCItemInfo, 0); //HairID
				Write32(pNPCItemInfo, 0); //FaceID
				Write32(pNPCItemInfo, 0); //GlassID
				Write32(pNPCItemInfo, 0); //CoatID
				Write32(pNPCItemInfo, 0); //GloveID
				Write32(pNPCItemInfo, 0); //TrousersID
				Write32(pNPCItemInfo, 0); //PersonarID
				Write32(pNPCItemInfo, 0); //TattooID
				Write32(pNPCItemInfo, 0); //WingID
				Write32(pNPCItemInfo, 0); //DecoratorID
				Write32(pNPCItemInfo, 0); //KartID
				Write32(pNPCItemInfo, 0); //ColorID
				Write32(pNPCItemInfo, 0); //TrackID
				Write32(pNPCItemInfo, 0); //EffectID
				Write32(pNPCItemInfo, 0); //BrandID
				Write32(pNPCItemInfo, 0); //TailID

				len = pNPCItemInfo - pNPCBaseInfo;
				Set16(pNPCBaseInfo, (WORD)len);
				pNPCBaseInfo += len;
			}

			len = pNPCBaseInfo - pNPCInfo;
			Set16(pNPCInfo, (WORD)len);
			pNPCInfo += len;
		}
		{ //NPCStatusInfo
			BYTE* pNPCStatusInfo = pNPCInfo;
			Write16(pNPCStatusInfo, 0); //len

			Write32(pNPCStatusInfo, 0); //Interval
			Write32(pNPCStatusInfo, 0); //LastPlayerUin
			WriteString(pNPCStatusInfo, 0); //LastPlayerNickName[]
			Write32(pNPCStatusInfo, 0); //Time

			len = pNPCStatusInfo - pNPCInfo;
			Set16(pNPCInfo, (WORD)len);
			pNPCInfo += len;
		}

		len = pNPCInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 434, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestNPCDoAction(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int NPCID = Read32(p);
	short ActionID = Read16(p);
	bool SpeedIdx = Read8(p);

}

void ResponseNPCDoAction(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //NPCID
	Write16(p, 0); //ActionID
	Write8(p, 0); //SpeedIdx

	len = p - buf;
	SendToClient(Client, 435, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyNPCDoAction(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //NPCID
	Write16(p, 0); //ActionID
	Write8(p, 0); //SpeedIdx

	len = p - buf;
	SendToClient(Client, 436, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyChairInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	for (size_t i = 0; i < n; i++)
	{ //ChairInfo
		BYTE* pChairInfo = p;
		Write16(pChairInfo, 0); //len

		Write32(pChairInfo, 0); //UinInChair[]

		len = pChairInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 864, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestChangeChairState(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	bool ChangeState = Read8(p);
	int ChairIndx = Read32(p);
	bool SeatIndx = Read8(p);

}

void RequestReportListenMusic(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseChangeChairState(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //Result
	Write8(p, 0); //ChangeState
	Write32(p, 0); //ChairIndx
	Write8(p, 0); //SeatIndx

	len = p - buf;
	SendToClient(Client, 360, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyChangeChairState(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //ChairIndx
	Write8(p, 0); //SeatIndx
	Write32(p, 0); //Uin
	Write8(p, 0); //State

	len = p - buf;
	SendToClient(Client, 865, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestChangeUdpState(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	Un Time = ReadUn(p);
	bool State = Read8(p);

}

void RequestDeleteOneItem(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	int ItemID = Read32(p);

}

void ResponseDeleteOneItem(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	WriteUn(p, 0); //Uin
	Write32(p, 0); //ItemID
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 261, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyRunnerInitInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	for (size_t i = 0; i < n; i++)
	{ //RunnerRoleAttributes
		BYTE* pRunnerRoleAttributes = p;
		Write16(pRunnerRoleAttributes, 0); //len

		Write8(pRunnerRoleAttributes, 0); //HitProtect
		Write32(pRunnerRoleAttributes, 0); //MaxAccFuelOfGroove

		len = pRunnerRoleAttributes - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //PlayerNum
	for (size_t i = 0; i < n; i++)
	{ //RunnerInfo
		BYTE* pRunnerInfo = p;
		Write16(pRunnerInfo, 0); //len

		WriteUn(pRunnerInfo, 0); //Uin
		Write8(pRunnerInfo, 0); //RacerRole
		Write32(pRunnerInfo, 0); //RacerHP
		WriteUn(pRunnerInfo, 0); //Converter
		Write16(pRunnerInfo, 0); //ConvertCount
		Write16(pRunnerInfo, 0); //CatchCount

		len = pRunnerInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 741, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyRunnerReportPos(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //NotifyTime

	len = p - buf;
	SendToClient(Client, 742, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyRunnerBoltResult(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //Uin
	Write8(p, 0); //PropNum
	Write32(p, 0); //PropIdx[]
	Write32(p, 0); //NextInterval

	len = p - buf;
	SendToClient(Client, 743, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyRunnerHPChange(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //Uin
	Write32(p, 0); //HP
	Write8(p, 0); //ChangeReason

	len = p - buf;
	SendToClient(Client, 744, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyRunnerRoleChange(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //Uin
	WriteUn(p, 0); //ConverterUin
	Write8(p, 0); //PrevRole
	Write8(p, 0); //Role

	len = p - buf;
	SendToClient(Client, 745, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestRunnerReportPos(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	int DistanceToEnd = Read32(p);

}

void RequestRunnerOverTake(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	Un DstUin = ReadUn(p);

}

void ResponseRunnerOverTake(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //IsSucceed
	WriteUn(p, 0); //OverTakeUin

	len = p - buf;
	SendToClient(Client, 322, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestRunnerBuyNo2(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);

}

void ResponseRunnerBuyNo2(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //PropNum
	Write32(p, 0); //PropIdx[]

	len = p - buf;
	SendToClient(Client, 323, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestChangeTempEffect(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT ItemID = Read32(p);
	char Flag = Read8(p);

}

void ResponseChangeTempEffect(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //ItemID
	Write8(p, 0); //Result

	len = p - buf;
	SendToClient(Client, 221, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyChangeTempEffect(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //SrcUin
	Write32(p, 0); //ItemID
	Write8(p, 0); //State

	len = p - buf;
	SendToClient(Client, 595, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyShooterInitInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //CompensateModifyRate[]
	Write32(p, 0); //PowerIncRate[]
	Write8(p, 0); //PlayerNum
	for (size_t i = 0; i < n; i++)
	{ //ShooterRaceInitInfo
		BYTE* pShooterRaceInitInfo = p;
		Write16(pShooterRaceInitInfo, 0); //len

		Write32(pShooterRaceInitInfo, 0); //Uin
		Write32(pShooterRaceInitInfo, 0); //InitPower
		Write32(pShooterRaceInitInfo, 0); //InitHP
		Write32(pShooterRaceInitInfo, 0); //RestTime
		Write32(pShooterRaceInitInfo, 0); //RecoverHP
		Write32(pShooterRaceInitInfo, 0); //RecoverPower

		len = pShooterRaceInitInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 771, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyShooterGunPhysParam(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //GunNum
	for (size_t i = 0; i < n; i++)
	{ //GunPhysParam
		BYTE* pGunPhysParam = p;
		Write16(pGunPhysParam, 0); //len

		Write32(pGunPhysParam, 0); //GunID
		Write32(pGunPhysParam, 0); //FireRate
		Write32(pGunPhysParam, 0); //PowerPerShot
		Write32(pGunPhysParam, 0); //Precision
		Write32(pGunPhysParam, 0); //MaxDamage
		Write32(pGunPhysParam, 0); //MinDamage
		Write32(pGunPhysParam, 0); //Stability
		Write32(pGunPhysParam, 0); //MaxPowerAddtion
		Write32(pGunPhysParam, 0); //AttRadius
		Write32(pGunPhysParam, 0); //AttDelta
		Write32(pGunPhysParam, 0); //EscRadius
		Write32(pGunPhysParam, 0); //EscDelta

		len = pGunPhysParam - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyShooterMissilePhysParam(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //MissileNum
	for (size_t i = 0; i < n; i++)
	{ //MissilePhysParam
		BYTE* pMissilePhysParam = p;
		Write16(pMissilePhysParam, 0); //len

		Write32(pMissilePhysParam, 0); //MissileID
		Write32(pMissilePhysParam, 0); //Precision
		Write32(pMissilePhysParam, 0); //MaxDamage
		Write32(pMissilePhysParam, 0); //Stability
		Write32(pMissilePhysParam, 0); //Target
		Write32(pMissilePhysParam, 0); //PowerConRate

		len = pMissilePhysParam - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyShooterDestroy(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //SrcUin
	Write32(p, 0); //DstUin
	Write32(p, 0); //AwardHP
	Write32(p, 0); //AwardPower

	len = p - buf;
	SendToClient(Client, 774, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyShooterMissileDenDeter(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //MissileSeq

	len = p - buf;
	SendToClient(Client, 775, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyShooterMissileResult(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //SrcUin
	Write32(p, 0); //DstUin
	Write8(p, 0); //IsHit
	Write32(p, 0); //DecHP

	len = p - buf;
	SendToClient(Client, 776, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyShooterCurrentHP(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //CurrentHP

	len = p - buf;
	SendToClient(Client, 777, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestShooterDestroyed(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT SrcUin = Read32(p);
	bool Criminal = Read8(p);

}

void RequestShooterRecover(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void RequestShooterMissileAttDeter(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT DstUin = Read32(p);

}

void ResponseShooterMissileAttDeter(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //MissileSeq
	Write8(p, 0); //IsSuccess
	Write8(p, 0); //FailReason

	len = p - buf;
	SendToClient(Client, 334, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestShooterMissileAttRes(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int MissileSeq = Read32(p);
	int Damage = Read32(p);

}

void RequestShooterMissileDenRes(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int MissileSeq = Read32(p);
	int Probability = Read32(p);

}

void RequestShooterReportCurrentHP(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int CurrentHP = Read32(p);

}

void RequestReportCurrentNPCInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int NpcID = Read32(p);
	int RoundNum = Read32(p);

}

void NotifyNPCWeedOut(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //NpcID

	len = p - buf;
	SendToClient(Client, 186, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyMsgBox(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //MsgType
	{ //MsgBox
		BYTE* pMsgBox = p;
		Write16(pMsgBox, 0); //len

		{ //OnlineTaskMsg
			BYTE* pOnlineTaskMsg = pMsgBox;
			Write16(pOnlineTaskMsg, 0); //len

			Write8(pOnlineTaskMsg, 0); //MsgType
			Write32(pOnlineTaskMsg, 0); //OpenDate
			Write32(pOnlineTaskMsg, 0); //OpenTime
			Write32(pOnlineTaskMsg, 0); //CloseDate
			Write32(pOnlineTaskMsg, 0); //CloseTime
			Write8(pOnlineTaskMsg, 0); //IsToday
			Write8(pOnlineTaskMsg, 0); //URLLen
			Write8(pOnlineTaskMsg, 0); //WeekLimit

			len = pOnlineTaskMsg - pMsgBox;
			Set16(pMsgBox, (WORD)len);
			pMsgBox += len;
		}
		{ //VipPages
			BYTE* pVipPages = pMsgBox;
			Write16(pVipPages, 0); //len

			Write8(pVipPages, 0); //URLLen1
			Write8(pVipPages, 0); //URLLen2
			Write8(pVipPages, 0); //URLLen3

			len = pVipPages - pMsgBox;
			Set16(pMsgBox, (WORD)len);
			pMsgBox += len;
		}
		{ //ActivitiesAd
			BYTE* pActivitiesAd = pMsgBox;
			Write16(pActivitiesAd, 0); //len

			Write8(pActivitiesAd, 0); //URLLen

			len = pActivitiesAd - pMsgBox;
			Set16(pMsgBox, (WORD)len);
			pMsgBox += len;
		}
		{ //MatchSchedule
			BYTE* pMatchSchedule = pMsgBox;
			Write16(pMatchSchedule, 0); //len

			Write8(pMatchSchedule, 0); //URLLen

			len = pMatchSchedule - pMsgBox;
			Set16(pMsgBox, (WORD)len);
			pMsgBox += len;
		}
		{ //LoadingAd
			BYTE* pLoadingAd = pMsgBox;
			Write16(pLoadingAd, 0); //len

			Write8(pLoadingAd, 0); //Ver
			Write8(pLoadingAd, 0); //URLLen

			len = pLoadingAd - pMsgBox;
			Set16(pMsgBox, (WORD)len);
			pMsgBox += len;
		}
		{ //TaskAdvAd
			BYTE* pTaskAdvAd = pMsgBox;
			Write16(pTaskAdvAd, 0); //len

			Write8(pTaskAdvAd, 0); //URLLen

			len = pTaskAdvAd - pMsgBox;
			Set16(pMsgBox, (WORD)len);
			pMsgBox += len;
		}

		len = pMsgBox - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 596, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyNianShouInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //NianShouNum
	for (size_t i = 0; i < n; i++)
	{ //NianShouSingleInfo
		BYTE* pNianShouSingleInfo = p;
		Write16(pNianShouSingleInfo, 0); //len

		Write32(pNianShouSingleInfo, 0); //OpenDate
		Write32(pNianShouSingleInfo, 0); //OpenTime
		Write32(pNianShouSingleInfo, 0); //CloseDate
		Write32(pNianShouSingleInfo, 0); //CloseTime
		Write32(pNianShouSingleInfo, 0); //ActIdForClient
		Write16(pNianShouSingleInfo, 0); //MapNum
		Write32(pNianShouSingleInfo, 0); //MapID[]

		len = pNianShouSingleInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 597, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyRandRoomNameList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //Count
	for (size_t i = 0; i < n; i++)
	{ //RoomNames
		BYTE* pRoomNames = p;
		Write16(pRoomNames, 0); //len

		Write8(pRoomNames, 0); //NameLen
		Write16(pRoomNames, 0); //BaseModes

		len = pRoomNames - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 760, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetLuckAwardList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int ExchangeID = Read32(p);

}

void ResponseGetLuckAwardList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //Time
	Write32(p, 0); //ExchangeID
	Write8(p, 0); //AwardNum
	for (size_t i = 0; i < n; i++)
	{ //LuckAwardList
		BYTE* pLuckAwardList = p;
		Write16(pLuckAwardList, 0); //len

		Write8(pLuckAwardList, 0); //AwardType
		Write32(pLuckAwardList, 0); //AwardPara
		Write8(pLuckAwardList, 0); //AwardPostion
		Write8(pLuckAwardList, 0); //AwardDesLen
		Write32(pLuckAwardList, 0); //ItemNum
		Write32(pLuckAwardList, 0); //AvailPeriod

		len = pLuckAwardList - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 172, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetRandomTask(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR Flag = Read8(p);

}

void ResponseGetRandomTask(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write32(p, 0); //TaskPackNum
	for (size_t i = 0; i < n; i++)
	{ //SystemTaskPackInfo
		BYTE* pSystemTaskPackInfo = p;
		Write16(pSystemTaskPackInfo, 0); //len

		Write32(pSystemTaskPackInfo, 0); //PackID
		WriteString(pSystemTaskPackInfo, 0); //PackName[]
		Write16(pSystemTaskPackInfo, 0); //PackType
		Write16(pSystemTaskPackInfo, 0); //TaskNum
		Write32(pSystemTaskPackInfo, 0); //TaskID[]
		Write16(pSystemTaskPackInfo, 0); //Priority
		Write16(pSystemTaskPackInfo, 0); //PackMode

		len = pSystemTaskPackInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //TaskNum
	for (size_t i = 0; i < n; i++)
	{ //SystemTaskInfo
		BYTE* pSystemTaskInfo = p;
		Write16(pSystemTaskInfo, 0); //len

		Write32(pSystemTaskInfo, 0); //TaskID
		Write32(pSystemTaskInfo, 0); //PackID
		WriteString(pSystemTaskInfo, 0); //TaskName[]
		Write16(pSystemTaskInfo, 0); //TaskIntroLen
		Write8(pSystemTaskInfo, 0); //SuccDialogLen
		Write8(pSystemTaskInfo, 0); //FailDialogLen
		Write8(pSystemTaskInfo, 0); //AwardInfoLen
		Write8(pSystemTaskInfo, 0); //AwardOtherInfoLen
		Write8(pSystemTaskInfo, 0); //ProgressLen
		Write16(pSystemTaskInfo, 0); //ExecuteNum
		Write8(pSystemTaskInfo, 0); //PrevTaskNum
		Write32(pSystemTaskInfo, 0); //PrevTaskID[]
		Write16(pSystemTaskInfo, 0); //LogicType
		Write16(pSystemTaskInfo, 0); //TaskType
		Write8(pSystemTaskInfo, 0); //OperatorType
		Write32(pSystemTaskInfo, 0); //OperatorParam
		Write32(pSystemTaskInfo, 0); //Option
		Write32(pSystemTaskInfo, 0); //Identity
		Write32(pSystemTaskInfo, 0); //NeedNum
		Write16(pSystemTaskInfo, 0); //ShowType
		Write32(pSystemTaskInfo, 0); //TotalTime
		Write8(pSystemTaskInfo, 0); //DiffInfoLen

		len = pSystemTaskInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //TaskNum
	for (size_t i = 0; i < n; i++)
	{ //TaskInfo
		BYTE* pTaskInfo = p;
		Write16(pTaskInfo, 0); //len

		{ //PlayerDBTaskInfo
			BYTE* pPlayerDBTaskInfo = pTaskInfo;
			Write16(pPlayerDBTaskInfo, 0); //len

			Write32(pPlayerDBTaskInfo, 0); //TaskID
			Write16(pPlayerDBTaskInfo, 0); //OptionID
			Write8(pPlayerDBTaskInfo, 0); //Status
			Write8(pPlayerDBTaskInfo, 0); //PrevStatus
			Write32(pPlayerDBTaskInfo, 0); //ProgressRate
			Write32(pPlayerDBTaskInfo, 0); //Other
			Write32(pPlayerDBTaskInfo, 0); //TakeTime
			Write32(pPlayerDBTaskInfo, 0); //LastUpdateTime

			len = pPlayerDBTaskInfo - pTaskInfo;
			Set16(pTaskInfo, (WORD)len);
			pTaskInfo += len;
		}
		Write16(pTaskInfo, 0); //MapID

		len = pTaskInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //TaskDescNum
	for (size_t i = 0; i < n; i++)
	{ //TaskDescInfo
		BYTE* pTaskDescInfo = p;
		Write16(pTaskDescInfo, 0); //len

		Write32(pTaskDescInfo, 0); //TaskID
		Write8(pTaskDescInfo, 0); //RandTaskType
		Write32(pTaskDescInfo, 0); //GameMode
		Write32(pTaskDescInfo, 0); //GameSubMode
		Write32(pTaskDescInfo, 0); //ID
		Write16(pTaskDescInfo, 0); //PlayerNum
		Write16(pTaskDescInfo, 0); //Score
		Write16(pTaskDescInfo, 0); //NeedNum

		len = pTaskDescInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 187, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetSpecialBroadcasts(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	bool Type = Read8(p);

}

void ResponseGetSpecialBroadcasts(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //Type
	Write8(p, 0); //BroadcastNum
	for (size_t i = 0; i < n; i++)
	{ //Broadcast
		BYTE* pBroadcast = p;
		Write16(pBroadcast, 0); //len

		Write8(pBroadcast, 0); //BCFlag
		Write16(pBroadcast, 0); //ConTime
		Write16(pBroadcast, 0); //ContentLen
		Write32(pBroadcast, 0); //BroadcastType
		Write8(pBroadcast, 0); //DisplayFlag

		len = pBroadcast - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 362, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestFishRegister(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseFishRegister(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //Result
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 10500, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestFishLogin(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseFishLogin(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //Result
	Write32(p, 0); //Uin
	{ //BaseFishInfo
		BYTE* pBaseFishInfo = p;
		Write16(pBaseFishInfo, 0); //len

		Write32(pBaseFishInfo, 0); //Experience
		Write32(pBaseFishInfo, 0); //Money
		Write8(pBaseFishInfo, 0); //FishStockNum
		Write8(pBaseFishInfo, 0); //RubbishCount

		len = pBaseFishInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //TodayInfo
		BYTE* pTodayInfo = p;
		Write16(pTodayInfo, 0); //len

		Write8(pTodayInfo, 0); //RestStealCount
		Write8(pTodayInfo, 0); //RestVisitStrangerCount
		Write8(pTodayInfo, 0); //RestClearRubbishCount

		len = pTodayInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //FishStockNum
	for (size_t i = 0; i < n; i++)
	{ //FishStockInfo
		BYTE* pFishStockInfo = p;
		Write16(pFishStockInfo, 0); //len

		Write8(pFishStockInfo, 0); //FishStockID
		Write8(pFishStockInfo, 0); //MaturityCount
		Write8(pFishStockInfo, 0); //TotalGrowStage
		Write8(pFishStockInfo, 0); //CurrentGrowStage
		Write8(pFishStockInfo, 0); //FishNum
		Write8(pFishStockInfo, 0); //StealedCount
		Write8(pFishStockInfo, 0); //FeedInfo
		Write32(pFishStockInfo, 0); //FishItemID
		Write32(pFishStockInfo, 0); //FishStartTime
		Write32(pFishStockInfo, 0); //MaturityTime
		Write32(pFishStockInfo, 0); //CurGrowStageEndTime

		len = pFishStockInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 10501, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestFishEnter(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT DstUin = Read32(p);
	UCHAR IsFriend = Read8(p);

}

void ResponseFishEnter(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //DstUin
	Write16(p, 0); //Result
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 10503, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestFishExit(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseFishExit(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //Result
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 10504, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestFishGetFishInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR HaveBaseInfo = Read8(p);
	UCHAR HaveTodayInfo = Read8(p);
	UCHAR HaveFishStockInfo = Read8(p);

}

void ResponseFishGetFishInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //Result
	Write8(p, 0); //HaveBaseInfo
	for (size_t i = 0; i < n; i++)
	{ //BaseFishInfo
		BYTE* pBaseFishInfo = p;
		Write16(pBaseFishInfo, 0); //len

		Write32(pBaseFishInfo, 0); //Experience
		Write32(pBaseFishInfo, 0); //Money
		Write8(pBaseFishInfo, 0); //FishStockNum
		Write8(pBaseFishInfo, 0); //RubbishCount

		len = pBaseFishInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HaveTodayInfo
	for (size_t i = 0; i < n; i++)
	{ //TodayInfo
		BYTE* pTodayInfo = p;
		Write16(pTodayInfo, 0); //len

		Write8(pTodayInfo, 0); //RestStealCount
		Write8(pTodayInfo, 0); //RestVisitStrangerCount
		Write8(pTodayInfo, 0); //RestClearRubbishCount

		len = pTodayInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //FishStockNum
	for (size_t i = 0; i < n; i++)
	{ //FishStockInfo
		BYTE* pFishStockInfo = p;
		Write16(pFishStockInfo, 0); //len

		Write8(pFishStockInfo, 0); //FishStockID
		Write8(pFishStockInfo, 0); //MaturityCount
		Write8(pFishStockInfo, 0); //TotalGrowStage
		Write8(pFishStockInfo, 0); //CurrentGrowStage
		Write8(pFishStockInfo, 0); //FishNum
		Write8(pFishStockInfo, 0); //StealedCount
		Write8(pFishStockInfo, 0); //FeedInfo
		Write32(pFishStockInfo, 0); //FishItemID
		Write32(pFishStockInfo, 0); //FishStartTime
		Write32(pFishStockInfo, 0); //MaturityTime
		Write32(pFishStockInfo, 0); //CurGrowStageEndTime

		len = pFishStockInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 10505, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestFishGetLeaveWord(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseFishGetLeaveWord(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //Result
	Write8(p, 0); //LeaveWordNum
	for (size_t i = 0; i < n; i++)
	{ //LeaveWord
		BYTE* pLeaveWord = p;
		Write16(pLeaveWord, 0); //len

		Write32(pLeaveWord, 0); //LeaveTime
		Write32(pLeaveWord, 0); //SrcUin
		WriteString(pLeaveWord, 0); //SrcName[]
		Write8(pLeaveWord, 0); //LeaveWordLen

		len = pLeaveWord - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 10506, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestFishGetMsg(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseFishGetMsg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //Result
	Write8(p, 0); //MsgNum
	for (size_t i = 0; i < n; i++)
	{ //Msg
		BYTE* pMsg = p;
		Write16(pMsg, 0); //len

		Write32(pMsg, 0); //MsgTime
		Write32(pMsg, 0); //OpType
		Write32(pMsg, 0); //SrcUin
		WriteString(pMsg, 0); //SrcName[]
		Write32(pMsg, 0); //OtherInfo

		len = pMsg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 10507, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestFishGetBulletin(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseFishGetBulletin(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //Result
	Write16(p, 0); //ContentLen
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 10508, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestFishGetHarvestInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseFishGetHarvestInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //Result
	Write8(p, 0); //HarvestNum
	for (size_t i = 0; i < n; i++)
	{ //HarvestInfo
		BYTE* pHarvestInfo = p;
		Write16(pHarvestInfo, 0); //len

		Write32(pHarvestInfo, 0); //FishItemID
		Write32(pHarvestInfo, 0); //FishNum

		len = pHarvestInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 10509, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestFishGetStorageInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseFishGetStorageInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //Result
	Write8(p, 0); //GridNum
	for (size_t i = 0; i < n; i++)
	{ //GridInfo
		BYTE* pGridInfo = p;
		Write16(pGridInfo, 0); //len

		Write16(pGridInfo, 0); //GridID
		Write32(pGridInfo, 0); //ItemID
		Write32(pGridInfo, 0); //ItemNum

		len = pGridInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 10510, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestFishStartFeedFish(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR FishStockID = Read8(p);
	USHORT GridID = Read16(p);

}

void ResponseFishStartFeedFish(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //Result
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 10514, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestFishHarvestFish(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR FishStockID = Read8(p);

}

void ResponseFishHarvestFish(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //Result
	Write32(p, 0); //Uin
	Write32(p, 0); //AddExpr
	{ //ResHarvestInfo
		BYTE* pResHarvestInfo = p;
		Write16(pResHarvestInfo, 0); //len

		Write8(pResHarvestInfo, 0); //FishStockID
		Write8(pResHarvestInfo, 0); //FishNum
		Write32(pResHarvestInfo, 0); //FishItemID

		len = pResHarvestInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 10511, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestFishHarvestAllFish(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseFishHarvestAllFish(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //Result
	Write32(p, 0); //Uin
	Write32(p, 0); //AddExpr
	Write8(p, 0); //ResHarvestInfoNum
	for (size_t i = 0; i < n; i++)
	{ //ResHarvestInfo
		BYTE* pResHarvestInfo = p;
		Write16(pResHarvestInfo, 0); //len

		Write8(pResHarvestInfo, 0); //FishStockID
		Write8(pResHarvestInfo, 0); //FishNum
		Write32(pResHarvestInfo, 0); //FishItemID

		len = pResHarvestInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 10517, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestFishUseFeed(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT GridID = Read16(p);
	UCHAR FishStockID = Read8(p);

}

void ResponseFishUseFeed(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //Result
	{ //ResInfo
		BYTE* pResInfo = p;
		Write16(pResInfo, 0); //len

		Write32(pResInfo, 0); //FeedItemID
		Write32(pResInfo, 0); //AccelTime
		Write32(pResInfo, 0); //AddExpr

		len = pResInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 10512, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestFishSellFish(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT GridID = Read16(p);
	UINT ItemNum = Read32(p);

}

void ResponseFishSellFish(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //Result
	Write32(p, 0); //Uin
	Write32(p, 0); //AddMoney
	{ //ResSellInfo
		BYTE* pResSellInfo = p;
		Write16(pResSellInfo, 0); //len

		Write32(pResSellInfo, 0); //FishNum
		Write32(pResSellInfo, 0); //FishItemID

		len = pResSellInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 10515, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestFishSellAllFish(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseFishSellAllFish(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //Result
	Write32(p, 0); //Uin
	Write32(p, 0); //AddMoney
	Write8(p, 0); //ResSellInfoNum
	for (size_t i = 0; i < n; i++)
	{ //ResSellInfo
		BYTE* pResSellInfo = p;
		Write16(pResSellInfo, 0); //len

		Write32(pResSellInfo, 0); //FishNum
		Write32(pResSellInfo, 0); //FishItemID

		len = pResSellInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 10516, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestFishBuyFishStock(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseFishBuyFishStock(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //Result
	Write32(p, 0); //Uin
	Write8(p, 0); //FishStockNum
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 10518, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestFishGetGiftBoxInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseFishGetGiftBoxInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //Result
	Write32(p, 0); //Uin
	Write8(p, 0); //GiftBoxNum
	for (size_t i = 0; i < n; i++)
	{ //GiftBoxInfo
		BYTE* pGiftBoxInfo = p;
		Write16(pGiftBoxInfo, 0); //len

		Write8(pGiftBoxInfo, 0); //BoxID
		Write32(pGiftBoxInfo, 0); //ItemID
		Write32(pGiftBoxInfo, 0); //ItemNum

		len = pGiftBoxInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 10519, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestFishThrowRubbish(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT DstUin = Read32(p);
	UCHAR SrcNameLen = Read8(p);

}

void ResponseFishThrowRubbish(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //Result
	Write32(p, 0); //DstUin
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 10521, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestFishClearRubbish(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT DstUin = Read32(p);
	UCHAR SrcNameLen = Read8(p);

}

void ResponseFishClearRubbish(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //Result
	Write32(p, 0); //DstUin
	{ //ResInfo
		BYTE* pResInfo = p;
		Write16(pResInfo, 0); //len

		Write32(pResInfo, 0); //AddExpr

		len = pResInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 10522, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestFishStealFish(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT DstUin = Read32(p);
	UCHAR FishStockID = Read8(p);
	int FishItemID = Read32(p);
	UCHAR SrcNameLen = Read8(p);
	UCHAR IsFriend = Read8(p);

}

void ResponseFishStealFish(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //Result
	Write32(p, 0); //Uin
	Write32(p, 0); //DstUin
	Write8(p, 0); //FishStockID
	Write32(p, 0); //FishItemID
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 10523, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestFishLeaveWord(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT DstUin = Read32(p);
	char[] SrcName[] = ReadString(p);
	UCHAR LeaveWordLen = Read8(p);

}

void ResponseFishLeaveWord(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //Result
	Write32(p, 0); //Uin
	Write32(p, 0); //DstUin
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 10524, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestFishReceiveGift(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseFishReceiveGift(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //Result
	Write32(p, 0); //Uin
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 10525, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestFishGetPlayerAllFishInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT DstUin = Read32(p);

}

void ResponseFishGetPlayerAllFishInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //Result
	Write32(p, 0); //Uin
	Write32(p, 0); //DstUin
	{ //BaseFishInfo
		BYTE* pBaseFishInfo = p;
		Write16(pBaseFishInfo, 0); //len

		Write32(pBaseFishInfo, 0); //Experience
		Write32(pBaseFishInfo, 0); //Money
		Write8(pBaseFishInfo, 0); //FishStockNum
		Write8(pBaseFishInfo, 0); //RubbishCount

		len = pBaseFishInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //CanThrowRubbish
	Write8(p, 0); //CanClearRubbish
	Write8(p, 0); //FishStockNum
	for (size_t i = 0; i < n; i++)
	{ //FishStockInfo
		BYTE* pFishStockInfo = p;
		Write16(pFishStockInfo, 0); //len

		Write8(pFishStockInfo, 0); //FishStockID
		Write8(pFishStockInfo, 0); //MaturityCount
		Write8(pFishStockInfo, 0); //TotalGrowStage
		Write8(pFishStockInfo, 0); //CurrentGrowStage
		Write8(pFishStockInfo, 0); //FishNum
		Write8(pFishStockInfo, 0); //StealedCount
		Write8(pFishStockInfo, 0); //CanSteal
		Write32(pFishStockInfo, 0); //FishItemID
		Write32(pFishStockInfo, 0); //FishStartTime
		Write32(pFishStockInfo, 0); //MaturityTime
		Write32(pFishStockInfo, 0); //CurGrowStageEndTime

		len = pFishStockInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 10526, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyClientReceiveNewLeaveWord(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	{ //LeaveWord
		BYTE* pLeaveWord = p;
		Write16(pLeaveWord, 0); //len

		Write32(pLeaveWord, 0); //LeaveTime
		Write32(pLeaveWord, 0); //SrcUin
		WriteString(pLeaveWord, 0); //SrcName[]
		Write8(pLeaveWord, 0); //LeaveWordLen

		len = pLeaveWord - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 10550, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyClientReceiveNewMsg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	{ //Msg
		BYTE* pMsg = p;
		Write16(pMsg, 0); //len

		Write32(pMsg, 0); //MsgTime
		Write32(pMsg, 0); //OpType
		Write32(pMsg, 0); //SrcUin
		WriteString(pMsg, 0); //SrcName[]
		Write32(pMsg, 0); //OtherInfo

		len = pMsg - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 10551, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyClientFishStealed(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write8(p, 0); //FishStockID
	Write8(p, 0); //FishNum

	len = p - buf;
	SendToClient(Client, 10552, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyClientRubbishThrown(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write8(p, 0); //RubbishCount

	len = p - buf;
	SendToClient(Client, 10553, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyClientUpdateFishInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //HaveBaseFishInfo
	for (size_t i = 0; i < n; i++)
	{ //BaseFishInfo
		BYTE* pBaseFishInfo = p;
		Write16(pBaseFishInfo, 0); //len

		Write32(pBaseFishInfo, 0); //Experience
		Write32(pBaseFishInfo, 0); //Money
		Write8(pBaseFishInfo, 0); //FishStockNum
		Write8(pBaseFishInfo, 0); //RubbishCount

		len = pBaseFishInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HaveTodayInfo
	for (size_t i = 0; i < n; i++)
	{ //TodayInfo
		BYTE* pTodayInfo = p;
		Write16(pTodayInfo, 0); //len

		Write8(pTodayInfo, 0); //RestStealCount
		Write8(pTodayInfo, 0); //RestVisitStrangerCount
		Write8(pTodayInfo, 0); //RestClearRubbishCount

		len = pTodayInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //FishStockInfoNum
	for (size_t i = 0; i < n; i++)
	{ //FishStockInfo
		BYTE* pFishStockInfo = p;
		Write16(pFishStockInfo, 0); //len

		Write8(pFishStockInfo, 0); //FishStockID
		Write8(pFishStockInfo, 0); //MaturityCount
		Write8(pFishStockInfo, 0); //TotalGrowStage
		Write8(pFishStockInfo, 0); //CurrentGrowStage
		Write8(pFishStockInfo, 0); //FishNum
		Write8(pFishStockInfo, 0); //StealedCount
		Write8(pFishStockInfo, 0); //FeedInfo
		Write32(pFishStockInfo, 0); //FishItemID
		Write32(pFishStockInfo, 0); //FishStartTime
		Write32(pFishStockInfo, 0); //MaturityTime
		Write32(pFishStockInfo, 0); //CurGrowStageEndTime

		len = pFishStockInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //StorageInfoNum
	for (size_t i = 0; i < n; i++)
	{ //StorageInfo
		BYTE* pStorageInfo = p;
		Write16(pStorageInfo, 0); //len

		Write16(pStorageInfo, 0); //GridID
		Write32(pStorageInfo, 0); //ItemID
		Write32(pStorageInfo, 0); //ItemNum

		len = pStorageInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HarvestInfoNum
	for (size_t i = 0; i < n; i++)
	{ //HarvestInfo
		BYTE* pHarvestInfo = p;
		Write16(pHarvestInfo, 0); //len

		Write32(pHarvestInfo, 0); //FishItemID
		Write32(pHarvestInfo, 0); //FishNum

		len = pHarvestInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //GiftBoxInfoNum
	for (size_t i = 0; i < n; i++)
	{ //GiftBoxInfo
		BYTE* pGiftBoxInfo = p;
		Write16(pGiftBoxInfo, 0); //len

		Write8(pGiftBoxInfo, 0); //BoxID
		Write32(pGiftBoxInfo, 0); //ItemID
		Write32(pGiftBoxInfo, 0); //ItemNum

		len = pGiftBoxInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 10554, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyClientTimeOutAtOtherStock(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin

	len = p - buf;
	SendToClient(Client, 10555, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyClientRubbishCleared(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write8(p, 0); //RubbishCount

	len = p - buf;
	SendToClient(Client, 10557, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyClientHaveNewGift(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write8(p, 0); //GiftBoxInfoNum
	for (size_t i = 0; i < n; i++)
	{ //GiftBoxInfo
		BYTE* pGiftBoxInfo = p;
		Write16(pGiftBoxInfo, 0); //len

		Write8(pGiftBoxInfo, 0); //BoxID
		Write32(pGiftBoxInfo, 0); //ItemID
		Write32(pGiftBoxInfo, 0); //ItemNum

		len = pGiftBoxInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 10559, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyClientCloseFishsys(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin

	len = p - buf;
	SendToClient(Client, 10560, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestFishGetPlayerList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT StartIdx = Read16(p);

}

void ResponseFishGetPlayerList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //Result
	Write16(p, 0); //StartIdx
	Write32(p, 0); //TotalNum
	Write16(p, 0); //PlayerNum
	for (size_t i = 0; i < n; i++)
	{ //BaseInfo
		BYTE* pBaseInfo = p;
		Write16(pBaseInfo, 0); //len

		Write32(pBaseInfo, 0); //Uin
		WriteString(pBaseInfo, 0); //SrcName[]

		len = pBaseInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 10532, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestFishQueryPlayerInfoInList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR UinNum = Read8(p);
	UINT[] Uin[] = Read32(p);

}

void ResponseFishQueryPlayerInfoInList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //Result
	Write32(p, 0); //Uin
	{ //FishInfo
		BYTE* pFishInfo = p;
		Write16(pFishInfo, 0); //len

		Write32(pFishInfo, 0); //Uin
		Write8(pFishInfo, 0); //CanSteal
		Write8(pFishInfo, 0); //CanThrowRubbish
		Write8(pFishInfo, 0); //CanClearRubbish

		len = pFishInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 10533, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetMaster(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetMaster(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write8(p, 0); //AccStatus
	Write32(p, 0); //MasterUin
	Write32(p, 0); //AccTime
	Write32(p, 0); //GraduateTime
	Write16(p, 0); //RecentPMAwardNum
	for (size_t i = 0; i < n; i++)
	{ //RecentPMAwards
		BYTE* pRecentPMAwards = p;
		Write16(pRecentPMAwards, 0); //len

		Write16(pRecentPMAwards, 0); //RecentPMAwardDesLen

		len = pRecentPMAwards - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 363, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetPrentices(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetPrentices(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write32(p, 0); //MasterPoint
	Write32(p, 0); //TeachedNum
	Write32(p, 0); //GraduatedNum
	Write16(p, 0); //StudyingNum
	Write16(p, 0); //MaxPrenticeNum
	Write16(p, 0); //CurrentPrenticeNum
	for (size_t i = 0; i < n; i++)
	{ //PrenticeInfo
		BYTE* pPrenticeInfo = p;
		Write16(pPrenticeInfo, 0); //len

		Write32(pPrenticeInfo, 0); //Uin
		Write8(pPrenticeInfo, 0); //IsGraduated
		Write32(pPrenticeInfo, 0); //AccTime
		Write32(pPrenticeInfo, 0); //GraduatedTime

		len = pPrenticeInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasFirstConsumeAward
	Write8(p, 0); //ReasonLen
	Write32(p, 0); //GetGraduateAwardCd

	len = p - buf;
	SendToClient(Client, 364, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetClassMates(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetClassMates(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write16(p, 0); //ClassMatesNum
	for (size_t i = 0; i < n; i++)
	{ //PrenticeInfo
		BYTE* pPrenticeInfo = p;
		Write16(pPrenticeInfo, 0); //len

		Write32(pPrenticeInfo, 0); //Uin
		Write8(pPrenticeInfo, 0); //IsGraduated
		Write32(pPrenticeInfo, 0); //AccTime
		Write32(pPrenticeInfo, 0); //GraduatedTime

		len = pPrenticeInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 365, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestQueryMPAward(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT PrenticeUin = Read32(p);
	char IsOnlyNum = Read8(p);

}

void ResponseQueryMPAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write8(p, 0); //IsOnlyNum
	{ //MasterAwardList
		BYTE* pMasterAwardList = p;
		Write16(pMasterAwardList, 0); //len

		Write32(pMasterAwardList, 0); //TriggerUin
		Write16(pMasterAwardList, 0); //AwardNum
		for (size_t i = 0; i < n; i++)
		{ //AwardInfo
			BYTE* pAwardInfo = pMasterAwardList;
			Write16(pAwardInfo, 0); //len

			Write8(pAwardInfo, 0); //AwardType
			Write32(pAwardInfo, 0); //AwardID
			Write32(pAwardInfo, 0); //EffectTime
			{ //AwardMoneyExp
				BYTE* pAwardMoneyExp = pAwardInfo;
				Write16(pAwardMoneyExp, 0); //len

				Write32(pAwardMoneyExp, 0); //Money
				Write32(pAwardMoneyExp, 0); //SuperMoney
				Write32(pAwardMoneyExp, 0); //Exp
				Write32(pAwardMoneyExp, 0); //Charm
				Write32(pAwardMoneyExp, 0); //DanceExp
				Write32(pAwardMoneyExp, 0); //Coupons
				Write32(pAwardMoneyExp, 0); //Admiration
				Write32(pAwardMoneyExp, 0); //LuckMoney
				Write32(pAwardMoneyExp, 0); //TeamWorkExp
				Write32(pAwardMoneyExp, 0); //AchievePoint
				Write32(pAwardMoneyExp, 0); //ConsumeScore
				Write32(pAwardMoneyExp, 0); //HistoryConsumeScore
				Write32(pAwardMoneyExp, 0); //LadderMatchAchievePoint

				len = pAwardMoneyExp - pAwardInfo;
				Set16(pAwardInfo, (WORD)len);
				pAwardInfo += len;
			}
			Write16(pAwardInfo, 0); //AwardItemNum
			for (size_t i = 0; i < n; i++)
			{ //AwardItem
				BYTE* pAwardItem = pAwardInfo;
				Write16(pAwardItem, 0); //len

				Write16(pAwardItem, 0); //GenderItemNum
				Write32(pAwardItem, 0); //ItemID[]
				Write8(pAwardItem, 0); //ItemType
				Write32(pAwardItem, 0); //Quantity

				len = pAwardItem - pAwardInfo;
				Set16(pAwardInfo, (WORD)len);
				pAwardInfo += len;
			}

			len = pAwardInfo - pMasterAwardList;
			Set16(pMasterAwardList, (WORD)len);
			pMasterAwardList += len;
		}

		len = pMasterAwardList - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //RecentPMAwardNum
	for (size_t i = 0; i < n; i++)
	{ //RecentPMAwards
		BYTE* pRecentPMAwards = p;
		Write16(pRecentPMAwards, 0); //len

		Write16(pRecentPMAwards, 0); //RecentPMAwardDesLen

		len = pRecentPMAwards - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 366, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestAcc(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT DstUin = Read32(p);
	char MPPlayerType = Read8(p);
	short WordLength = Read16(p);

}

void ResponseAcc(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write32(p, 0); //DstUin
	Write8(p, 0); //MPPlayerType
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 367, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestDismiss(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT DstUin = Read32(p);
	char MPPlayerType = Read8(p);
	short WordLength = Read16(p);

}

void ResponseDismiss(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write32(p, 0); //DstUin
	Write8(p, 0); //MPPlayerType
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 368, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetMPAward(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT PrenticeUin = Read32(p);

}

void ResponseGetMPAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	{ //MasterAwardList
		BYTE* pMasterAwardList = p;
		Write16(pMasterAwardList, 0); //len

		Write32(pMasterAwardList, 0); //TriggerUin
		Write16(pMasterAwardList, 0); //AwardNum
		for (size_t i = 0; i < n; i++)
		{ //AwardInfo
			BYTE* pAwardInfo = pMasterAwardList;
			Write16(pAwardInfo, 0); //len

			Write8(pAwardInfo, 0); //AwardType
			Write32(pAwardInfo, 0); //AwardID
			Write32(pAwardInfo, 0); //EffectTime
			{ //AwardMoneyExp
				BYTE* pAwardMoneyExp = pAwardInfo;
				Write16(pAwardMoneyExp, 0); //len

				Write32(pAwardMoneyExp, 0); //Money
				Write32(pAwardMoneyExp, 0); //SuperMoney
				Write32(pAwardMoneyExp, 0); //Exp
				Write32(pAwardMoneyExp, 0); //Charm
				Write32(pAwardMoneyExp, 0); //DanceExp
				Write32(pAwardMoneyExp, 0); //Coupons
				Write32(pAwardMoneyExp, 0); //Admiration
				Write32(pAwardMoneyExp, 0); //LuckMoney
				Write32(pAwardMoneyExp, 0); //TeamWorkExp
				Write32(pAwardMoneyExp, 0); //AchievePoint
				Write32(pAwardMoneyExp, 0); //ConsumeScore
				Write32(pAwardMoneyExp, 0); //HistoryConsumeScore
				Write32(pAwardMoneyExp, 0); //LadderMatchAchievePoint

				len = pAwardMoneyExp - pAwardInfo;
				Set16(pAwardInfo, (WORD)len);
				pAwardInfo += len;
			}
			Write16(pAwardInfo, 0); //AwardItemNum
			for (size_t i = 0; i < n; i++)
			{ //AwardItem
				BYTE* pAwardItem = pAwardInfo;
				Write16(pAwardItem, 0); //len

				Write16(pAwardItem, 0); //GenderItemNum
				Write32(pAwardItem, 0); //ItemID[]
				Write8(pAwardItem, 0); //ItemType
				Write32(pAwardItem, 0); //Quantity

				len = pAwardItem - pAwardInfo;
				Set16(pAwardInfo, (WORD)len);
				pAwardInfo += len;
			}

			len = pAwardInfo - pMasterAwardList;
			Set16(pMasterAwardList, (WORD)len);
			pMasterAwardList += len;
		}

		len = pMasterAwardList - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen
	Write32(p, 0); //GetGraduateAwardCd

	len = p - buf;
	SendToClient(Client, 369, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyMPAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write8(p, 0); //ContentLen

	len = p - buf;
	SendToClient(Client, 758, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetCommendMP(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	char MPPlayerType = Read8(p);

}

void ResponseGetCommendMP(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write8(p, 0); //MPPlayerType
	Write16(p, 0); //CommendNum
	Write32(p, 0); //CommendMP[]
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 370, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyReqAcc(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //DstUin
	Write8(p, 0); //MPPlayerType
	Write16(p, 0); //WordLength

	len = p - buf;
	SendToClient(Client, 751, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void AckReqAcc(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	short ResultID = Read16(p);
	UINT Uin = Read32(p);
	UINT DstUin = Read32(p);
	char MPPlayerType = Read8(p);
	short WordLength = Read16(p);

}

void NotifyAccResult(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write32(p, 0); //DstUin
	Write8(p, 0); //MPPlayerType
	Write8(p, 0); //ReasonLen
	Write16(p, 0); //WordLength

	len = p - buf;
	SendToClient(Client, 752, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyGraduate(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //DstUin
	Write8(p, 0); //MPPlayerType
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 753, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyDismiss(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //DstUin
	Write8(p, 0); //MPPlayerType
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 754, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyIncMasterPoint(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //MasterPointInc
	Write32(p, 0); //MasterPointTotal

	len = p - buf;
	SendToClient(Client, 755, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyIncMaxPrenticeNum(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //MaxPrenticeNumInc
	Write16(p, 0); //MaxPrenticeNumTotal

	len = p - buf;
	SendToClient(Client, 756, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyPMAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	{ //MasterAwardInfo
		BYTE* pMasterAwardInfo = p;
		Write16(pMasterAwardInfo, 0); //len

		Write8(pMasterAwardInfo, 0); //AwardType
		Write32(pMasterAwardInfo, 0); //AwardID
		Write32(pMasterAwardInfo, 0); //EffectTime
		{ //AwardMoneyExp
			BYTE* pAwardMoneyExp = pMasterAwardInfo;
			Write16(pAwardMoneyExp, 0); //len

			Write32(pAwardMoneyExp, 0); //Money
			Write32(pAwardMoneyExp, 0); //SuperMoney
			Write32(pAwardMoneyExp, 0); //Exp
			Write32(pAwardMoneyExp, 0); //Charm
			Write32(pAwardMoneyExp, 0); //DanceExp
			Write32(pAwardMoneyExp, 0); //Coupons
			Write32(pAwardMoneyExp, 0); //Admiration
			Write32(pAwardMoneyExp, 0); //LuckMoney
			Write32(pAwardMoneyExp, 0); //TeamWorkExp
			Write32(pAwardMoneyExp, 0); //AchievePoint
			Write32(pAwardMoneyExp, 0); //ConsumeScore
			Write32(pAwardMoneyExp, 0); //HistoryConsumeScore
			Write32(pAwardMoneyExp, 0); //LadderMatchAchievePoint

			len = pAwardMoneyExp - pMasterAwardInfo;
			Set16(pMasterAwardInfo, (WORD)len);
			pMasterAwardInfo += len;
		}
		Write16(pMasterAwardInfo, 0); //AwardItemNum
		for (size_t i = 0; i < n; i++)
		{ //AwardItem
			BYTE* pAwardItem = pMasterAwardInfo;
			Write16(pAwardItem, 0); //len

			Write16(pAwardItem, 0); //GenderItemNum
			Write32(pAwardItem, 0); //ItemID[]
			Write8(pAwardItem, 0); //ItemType
			Write32(pAwardItem, 0); //Quantity

			len = pAwardItem - pMasterAwardInfo;
			Set16(pMasterAwardInfo, (WORD)len);
			pMasterAwardInfo += len;
		}

		len = pMasterAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 757, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetPlayerSummaryInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	short PlayerNum = Read16(p);
	UINT[] DstUins[] = Read32(p);

}

void ResponseGetPlayerSummaryInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write32(p, 0); //DstUin
	WriteString(p, 0); //Nickname[]
	Write8(p, 0); //Gender
	Write16(p, 0); //Level
	Write8(p, 0); //IsOnLine
	Write32(p, 0); //LastLogin
	Write8(p, 0); //ReasonLen
	WriteUn(p, 0); //VipFlag
	{ //NobleInfo
		BYTE* pNobleInfo = p;
		Write16(pNobleInfo, 0); //len

		Write32(pNobleInfo, 0); //NobleID
		Write8(pNobleInfo, 0); //NobleLevel
		Write32(pNobleInfo, 0); //NoblePoint
		Write32(pNobleInfo, 0); //NobleLeftDays

		len = pNobleInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //GuildVipBaseInfo
		BYTE* pGuildVipBaseInfo = p;
		Write16(pGuildVipBaseInfo, 0); //len

		Write8(pGuildVipBaseInfo, 0); //GuildVipLevel
		Write32(pGuildVipBaseInfo, 0); //GuildVipPoint

		len = pGuildVipBaseInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasLoverVip
	for (size_t i = 0; i < n; i++)
	{ //LoverVipInfo
		BYTE* pLoverVipInfo = p;
		Write16(pLoverVipInfo, 0); //len

		Write8(pLoverVipInfo, 0); //LoverVipLevel
		Write32(pLoverVipInfo, 0); //LoverVipPoint
		Write8(pLoverVipInfo, 0); //GrowRate

		len = pLoverVipInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 371, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetMPAwardRule(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	char AwardType = Read8(p);

}

void ResponseGetMPAwardRule(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write8(p, 0); //AwardType
	Write16(p, 0); //DescNum
	for (size_t i = 0; i < n; i++)
	{ //RuleDesc
		BYTE* pRuleDesc = p;
		Write16(pRuleDesc, 0); //len

		Write16(pRuleDesc, 0); //DescLen

		len = pRuleDesc - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 372, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestReceiveTaskAward(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int TaskID = Read32(p);

}

void ResponseReceiveTaskAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write32(p, 0); //TaskID
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 188, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyRRModeExtraInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //PassOnDistanceLimit
	Write16(p, 0); //PassOnCD
	Write16(p, 0); //ExplosionCD
	Write16(p, 0); //ExplosionFrozenCD
	Write16(p, 0); //ExplosionAffNum
	for (size_t i = 0; i < n; i++)
	{ //ExplosionAff
		BYTE* pExplosionAff = p;
		Write16(pExplosionAff, 0); //len

		Write32(pExplosionAff, 0); //SpeedLost
		Write32(pExplosionAff, 0); //AffTime

		len = pExplosionAff - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 782, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyBatonPassOn(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //PassOnType
	Write32(p, 0); //SrcUin
	Write32(p, 0); //DstUin

	len = p - buf;
	SendToClient(Client, 780, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestBatonPassOn(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT SrcUin = Read32(p);
	UINT DstUin = Read32(p);

}

void ResponseBatonPassOn(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Result
	Write32(p, 0); //SrcUin
	Write32(p, 0); //DstUin

	len = p - buf;
	SendToClient(Client, 230, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyBatonExplosion(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin

	len = p - buf;
	SendToClient(Client, 781, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyRelayRaceOver(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //CurrentPlayerNum
	for (size_t i = 0; i < n; i++)
	{ //RaceScore
		BYTE* pRaceScore = p;
		Write16(pRaceScore, 0); //len

		WriteUn(pRaceScore, 0); //Uin
		WriteUn(pRaceScore, 0); //FinTime
		Write32(pRaceScore, 0); //TP
		Write32(pRaceScore, 0); //MoneyInc
		Write32(pRaceScore, 0); //TotalMoney
		Write32(pRaceScore, 0); //ExpInc
		Write32(pRaceScore, 0); //TotalExp
		Write8(pRaceScore, 0); //AwardNum
		Write32(pRaceScore, 0); //SpecialAward[]
		Write32(pRaceScore, 0); //TeamWorkExpInc
		Write32(pRaceScore, 0); //PropPoint
		Write32(pRaceScore, 0); //PropPointAddExp
		Write32(pRaceScore, 0); //LuckyMatchPointInc
		Write32(pRaceScore, 0); //LuckyMatchPointTotal
		Write32(pRaceScore, 0); //LuckyMatchScoreInc
		Write32(pRaceScore, 0); //LuckyMatchScoreTotal
		Write32(pRaceScore, 0); //LuckMoneyInc
		Write32(pRaceScore, 0); //LuckMoneyTotal
		Write32(pRaceScore, 0); //GuildScoreInc
		Write8(pRaceScore, 0); //CrazyPropAchieveNum
		Write32(pRaceScore, 0); //CrazyPropAchieve[]
		WriteU(pRaceScore, 0); //IncWlMatchScore
		WriteU(pRaceScore, 0); //IncWlDegree
		WriteU(pRaceScore, 0); //IncItemNumByWl
		for (size_t i = 0; i < n; i++)
		{ //IncItemInfoByWl
			BYTE* pIncItemInfoByWl = pRaceScore;
			Write16(pIncItemInfoByWl, 0); //len

			Write16(pIncItemInfoByWl, 0); //GenderItemNum
			Write32(pIncItemInfoByWl, 0); //ItemID[]
			Write16(pIncItemInfoByWl, 0); //ItemNum
			Write32(pIncItemInfoByWl, 0); //AvailPeriod

			len = pIncItemInfoByWl - pRaceScore;
			Set16(pRaceScore, (WORD)len);
			pRaceScore += len;
		}
		Write32(pRaceScore, 0); //WlMutiplyCard
		Write32(pRaceScore, 0); //SkateCoinInc
		Write32(pRaceScore, 0); //SkateCoinTotal
		Write32(pRaceScore, 0); //SkateCoinHistoryTotal

		len = pRaceScore - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //WinTeamID
	Write32(p, 0); //WinType
	WriteUn(p, 0); //AwardTime
	Write8(p, 0); //TeamNum
	Write32(p, 0); //FinishTime[]
	Write8(p, 0); //PlayerNumber
	for (size_t i = 0; i < n; i++)
	{ //HideTaskResult
		BYTE* pHideTaskResult = p;
		Write16(pHideTaskResult, 0); //len

		Write32(pHideTaskResult, 0); //Uin
		Write32(pHideTaskResult, 0); //TaskId
		Write8(pHideTaskResult, 0); //HideTaskFinishResult

		len = pHideTaskResult - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 783, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetAchieveList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT DstUin = Read32(p);

}

void ResponseGetAchieveList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //DstUin
	Write16(p, 0); //Result
	Write16(p, 0); //AchieveNum
	for (size_t i = 0; i < n; i++)
	{ //Achieves
		BYTE* pAchieves = p;
		Write16(pAchieves, 0); //len

		Write16(pAchieves, 0); //ID
		Write8(pAchieves, 0); //ShowType
		Write8(pAchieves, 0); //LogicType
		Write8(pAchieves, 0); //Status
		Write16(pAchieves, 0); //Progress
		Write16(pAchieves, 0); //TotalProgress
		Write32(pAchieves, 0); //FinTime
		Write16(pAchieves, 0); //AchieveValue
		Write32(pAchieves, 0); //AchieveFlagType

		len = pAchieves - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 373, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestQueryAchieveAward(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT AchieveID = Read16(p);

}

void ResponseQueryAchieveAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //AchieveID
	Write16(p, 0); //Result
	{ //AwardMoneyExp
		BYTE* pAwardMoneyExp = p;
		Write16(pAwardMoneyExp, 0); //len

		Write32(pAwardMoneyExp, 0); //Money
		Write32(pAwardMoneyExp, 0); //SuperMoney
		Write32(pAwardMoneyExp, 0); //Exp
		Write32(pAwardMoneyExp, 0); //Charm
		Write32(pAwardMoneyExp, 0); //DanceExp
		Write32(pAwardMoneyExp, 0); //Coupons
		Write32(pAwardMoneyExp, 0); //Admiration
		Write32(pAwardMoneyExp, 0); //LuckMoney
		Write32(pAwardMoneyExp, 0); //TeamWorkExp
		Write32(pAwardMoneyExp, 0); //AchievePoint
		Write32(pAwardMoneyExp, 0); //ConsumeScore
		Write32(pAwardMoneyExp, 0); //HistoryConsumeScore
		Write32(pAwardMoneyExp, 0); //LadderMatchAchievePoint

		len = pAwardMoneyExp - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //AwardItemNum
	for (size_t i = 0; i < n; i++)
	{ //AwardItem
		BYTE* pAwardItem = p;
		Write16(pAwardItem, 0); //len

		Write32(pAwardItem, 0); //ItemID
		Write32(pAwardItem, 0); //ItemNum
		Write32(pAwardItem, 0); //AvailPeriod
		Write8(pAwardItem, 0); //Status
		WriteUn(pAwardItem, 0); //ObtainTime
		Write32(pAwardItem, 0); //OtherAttribute

		len = pAwardItem - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 374, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetAchieveAward(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT AchieveID = Read16(p);

}

void ResponseGetAchieveAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //AchieveID
	Write16(p, 0); //Result
	{ //AwardMoneyExp
		BYTE* pAwardMoneyExp = p;
		Write16(pAwardMoneyExp, 0); //len

		Write32(pAwardMoneyExp, 0); //Money
		Write32(pAwardMoneyExp, 0); //SuperMoney
		Write32(pAwardMoneyExp, 0); //Exp
		Write32(pAwardMoneyExp, 0); //Charm
		Write32(pAwardMoneyExp, 0); //DanceExp
		Write32(pAwardMoneyExp, 0); //Coupons
		Write32(pAwardMoneyExp, 0); //Admiration
		Write32(pAwardMoneyExp, 0); //LuckMoney
		Write32(pAwardMoneyExp, 0); //TeamWorkExp
		Write32(pAwardMoneyExp, 0); //AchievePoint
		Write32(pAwardMoneyExp, 0); //ConsumeScore
		Write32(pAwardMoneyExp, 0); //HistoryConsumeScore
		Write32(pAwardMoneyExp, 0); //LadderMatchAchievePoint

		len = pAwardMoneyExp - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //AwardItemNum
	for (size_t i = 0; i < n; i++)
	{ //AwardItem
		BYTE* pAwardItem = p;
		Write16(pAwardItem, 0); //len

		Write32(pAwardItem, 0); //ItemID
		Write32(pAwardItem, 0); //ItemNum
		Write32(pAwardItem, 0); //AvailPeriod
		Write8(pAwardItem, 0); //Status
		WriteUn(pAwardItem, 0); //ObtainTime
		Write32(pAwardItem, 0); //OtherAttribute

		len = pAwardItem - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 375, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyUpdateAchieveProgress(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //AchieveNum
	for (size_t i = 0; i < n; i++)
	{ //Achieve
		BYTE* pAchieve = p;
		Write16(pAchieve, 0); //len

		Write16(pAchieve, 0); //ID
		Write8(pAchieve, 0); //ShowType
		Write8(pAchieve, 0); //LogicType
		Write8(pAchieve, 0); //Status
		Write16(pAchieve, 0); //Progress
		Write16(pAchieve, 0); //TotalProgress
		Write32(pAchieve, 0); //FinTime
		Write16(pAchieve, 0); //AchieveValue
		Write32(pAchieve, 0); //AchieveFlagType

		len = pAchieve - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 759, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestStartShadowChallenge(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	int MapID = Read32(p);

}

void ResponseStartShadowChallenge(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 1500, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestEndShadowChallenge(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	int Time = Read32(p);
	UCHAR GuildChallengePractice = Read8(p);
	USHORT MapID = Read16(p);

}

void ResponseEndShadowChallenge(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //ResultID
	Write32(p, 0); //MoneyInc
	Write32(p, 0); //ExpInc
	Write32(p, 0); //MoneyTotal
	WriteUn(p, 0); //ExpTotal
	Write16(p, 0); //ItemNum
	Write32(p, 0); //ItemID[]

	len = p - buf;
	SendToClient(Client, 1501, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyPropPoint(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //PropID
	Write8(p, 0); //PropType
	Write32(p, 0); //DstUin
	Write32(p, 0); //PropPointInc
	Write32(p, 0); //PropPointDec
	Write32(p, 0); //PropPointTotal
	Write8(p, 0); //AttackNum
	Write8(p, 0); //AttackTeammateNum
	Write8(p, 0); //ProtectNum
	Write8(p, 0); //ProtectTeammatetNum
	Write8(p, 0); //ComboFlag

	len = p - buf;
	SendToClient(Client, 1502, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestCheckRealName(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseCheckRealName(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 1499, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyPlayerIdentify(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Time
	Write32(p, 0); //Identify

	len = p - buf;
	SendToClient(Client, 608, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestRecommendGuildList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseRecommendGuildList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //GuildCount
	for (size_t i = 0; i < n; i++)
	{ //GuildDescInfo
		BYTE* pGuildDescInfo = p;
		Write16(pGuildDescInfo, 0); //len

		Write32(pGuildDescInfo, 0); //GuildID
		WriteString(pGuildDescInfo, 0); //Name[]
		Write32(pGuildDescInfo, 0); //Level
		Write32(pGuildDescInfo, 0); //Score
		Write32(pGuildDescInfo, 0); //CreateTime
		Write16(pGuildDescInfo, 0); //Attribute
		Write16(pGuildDescInfo, 0); //MaxMember
		Write16(pGuildDescInfo, 0); //CurrentMember
		Write32(pGuildDescInfo, 0); //Prosperity
		Write16(pGuildDescInfo, 0); //Level
		{ //GuildEnlistCond
			BYTE* pGuildEnlistCond = pGuildDescInfo;
			Write16(pGuildEnlistCond, 0); //len

			Write32(pGuildEnlistCond, 0); //ProsperityCondition
			Write32(pGuildEnlistCond, 0); //JoinTotalCondition
			Write32(pGuildEnlistCond, 0); //HonorCondition
			Write32(pGuildEnlistCond, 0); //CharmCondition
			Write32(pGuildEnlistCond, 0); //DanceExpCondition
			Write32(pGuildEnlistCond, 0); //SkillPointCondition
			Write32(pGuildEnlistCond, 0); //ExpLevelCondition

			len = pGuildEnlistCond - pGuildDescInfo;
			Set16(pGuildDescInfo, (WORD)len);
			pGuildDescInfo += len;
		}
		Write8(pGuildDescInfo, 0); //SubType

		len = pGuildDescInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 15020, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetGuildChatRoomInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT GuildID = Read32(p);
	short PreSvrID = Read16(p);

}

void ResponseGetGuildChatRoomInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteU(p, 0); //Result
	Write32(p, 0); //GuildID
	Write32(p, 0); //ExtenalIP
	Write16(p, 0); //ServerID
	Write8(p, 0); //ExtTcpPortNum
	Write16(p, 0); //ExternalTcpPort[]
	Write8(p, 0); //ExtUdpPortNum
	Write16(p, 0); //ExternalUdpPort[]
	Write8(p, 0); //RoomNum
	for (size_t i = 0; i < n; i++)
	{ //RoomInfo
		BYTE* pRoomInfo = p;
		Write16(pRoomInfo, 0); //len

		Write8(pRoomInfo, 0); //Flag
		Write8(pRoomInfo, 0); //GuildRoomID
		Write8(pRoomInfo, 0); //RoomNameLen
		Write32(pRoomInfo, 0); //MaxPlayerNum
		Write32(pRoomInfo, 0); //CurPlayerNum

		len = pRoomInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 380, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestEnterGuildRoom(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT GuildID = Read32(p);
	UCHAR GuildRoomID = Read8(p);
	USHORT NPCCfgVer = Read16(p);
	UINT ClientStatusContex = Read32(p);

}

void ResponseEnterGuildRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen
	Write32(p, 0); //GuildID
	Write8(p, 0); //GuildRoomID
	Write16(p, 0); //SceneID
	{ //HeroMoveInfo
		BYTE* pHeroMoveInfo = p;
		Write16(pHeroMoveInfo, 0); //len

		Write32(pHeroMoveInfo, 0); //Uin
		Write8(pHeroMoveInfo, 0); //WalkStatue
		Write32(pHeroMoveInfo, 0); //Posion[]
		Write32(pHeroMoveInfo, 0); //Ori[]
		Write32(pHeroMoveInfo, 0); //AttachUin
		Write32(pHeroMoveInfo, 0); //WalkExtState

		len = pHeroMoveInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //MaxHeroNumInRoom
	Write32(p, 0); //ClientStatusContex
	Write8(p, 0); //GuildBirthStage

	len = p - buf;
	SendToClient(Client, 11011, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyGuildRoomMoreInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //GuildID
	Write8(p, 0); //GuildRoomID
	Write16(p, 0); //HeroCount
	for (size_t i = 0; i < n; i++)
	{ //HeroInfo
		BYTE* pHeroInfo = p;
		Write16(pHeroInfo, 0); //len

		{ //HeroMoveInfo
			BYTE* pHeroMoveInfo = pHeroInfo;
			Write16(pHeroMoveInfo, 0); //len

			Write32(pHeroMoveInfo, 0); //Uin
			Write8(pHeroMoveInfo, 0); //WalkStatue
			Write32(pHeroMoveInfo, 0); //Posion[]
			Write32(pHeroMoveInfo, 0); //Ori[]
			Write32(pHeroMoveInfo, 0); //AttachUin
			Write32(pHeroMoveInfo, 0); //WalkExtState

			len = pHeroMoveInfo - pHeroInfo;
			Set16(pHeroInfo, (WORD)len);
			pHeroInfo += len;
		}
		Write32(pHeroInfo, 0); //NextPoint
		Write16(pHeroInfo, 0); //PathLen
		Write32(pHeroInfo, 0); //Path[]
		{ //HeroVisbleInfo
			BYTE* pHeroVisbleInfo = pHeroInfo;
			Write16(pHeroVisbleInfo, 0); //len

			WriteUn(pHeroVisbleInfo, 0); //Uin
			WriteUn(pHeroVisbleInfo, 0); //Identity
			Write8(pHeroVisbleInfo, 0); //SeatID
			Write8(pHeroVisbleInfo, 0); //TeamID
			Write16(pHeroVisbleInfo, 0); //PlayerID
			Write8(pHeroVisbleInfo, 0); //Status
			{ //PlayerDBBaseInfo
				BYTE* pPlayerDBBaseInfo = pHeroVisbleInfo;
				Write16(pPlayerDBBaseInfo, 0); //len

				WriteString(pPlayerDBBaseInfo, 0); //Nickname[]
				Write8(pPlayerDBBaseInfo, 0); //Gender
				Write8(pPlayerDBBaseInfo, 0); //Country
				Write32(pPlayerDBBaseInfo, 0); //License
				WriteUn(pPlayerDBBaseInfo, 0); //Experience
				Write32(pPlayerDBBaseInfo, 0); //SuperMoney
				Write32(pPlayerDBBaseInfo, 0); //Money
				WriteUn(pPlayerDBBaseInfo, 0); //WinNum
				Write32(pPlayerDBBaseInfo, 0); //SecondNum
				Write32(pPlayerDBBaseInfo, 0); //ThirdNum
				WriteUn(pPlayerDBBaseInfo, 0); //TotalNum
				Write32(pPlayerDBBaseInfo, 0); //CurHonor
				Write32(pPlayerDBBaseInfo, 0); //TotalHonor
				Write32(pPlayerDBBaseInfo, 0); //TodayHonor
				Write32(pPlayerDBBaseInfo, 0); //RelaxTime
				Write32(pPlayerDBBaseInfo, 0); //MonthDurationBefore
				Write32(pPlayerDBBaseInfo, 0); //MonthDurationCur
				Write32(pPlayerDBBaseInfo, 0); //Charm
				Write32(pPlayerDBBaseInfo, 0); //DurationGame
				Write32(pPlayerDBBaseInfo, 0); //DanceExp
				Write32(pPlayerDBBaseInfo, 0); //Coupons
				Write32(pPlayerDBBaseInfo, 0); //Admiration
				Write32(pPlayerDBBaseInfo, 0); //LuckMoney
				Write32(pPlayerDBBaseInfo, 0); //TeamWorkExp
				Write32(pPlayerDBBaseInfo, 0); //AchievePoint
				Write32(pPlayerDBBaseInfo, 0); //RegTime
				WriteString(pPlayerDBBaseInfo, 0); //Signature[]
				Write32(pPlayerDBBaseInfo, 0); //LuckyMatchPoint
				Write32(pPlayerDBBaseInfo, 0); //LuckyMatchNum
				Write16(pPlayerDBBaseInfo, 0); //LuckyMatchFirstNum
				Write8(pPlayerDBBaseInfo, 0); //LuckyMatchBestRand
				Write32(pPlayerDBBaseInfo, 0); //LuckyMatchWinNum
				Write32(pPlayerDBBaseInfo, 0); //FizzPointTotal
				Write16(pPlayerDBBaseInfo, 0); //FizzPointDaily
				Write16(pPlayerDBBaseInfo, 0); //FizzPointWeekly
				Write16(pPlayerDBBaseInfo, 0); //FizzPointLastWeek
				Write8(pPlayerDBBaseInfo, 0); //FizzLotteryStatus
				Write32(pPlayerDBBaseInfo, 0); //FizzLastUpdateTime
				Write32(pPlayerDBBaseInfo, 0); //SNSLocaleCode
				Write32(pPlayerDBBaseInfo, 0); //AuctionRightUnlockTime
				Write8(pPlayerDBBaseInfo, 0); //ReserveFlag
				Write32(pPlayerDBBaseInfo, 0); //CurConsumeScore
				Write32(pPlayerDBBaseInfo, 0); //HistoryConsumeScore
				Write8(pPlayerDBBaseInfo, 0); //CrashModeSponsorID
				Write32(pPlayerDBBaseInfo, 0); //Popularity
				Write32(pPlayerDBBaseInfo, 0); //LadderMatchAchievePoint
				Write32(pPlayerDBBaseInfo, 0); //Cash
				Write32(pPlayerDBBaseInfo, 0); //PlayerGPMIdentity
				Write32(pPlayerDBBaseInfo, 0); //PointTotalScore
				WriteUn(pPlayerDBBaseInfo, 0); //totalMapMedalNum
				WriteUn(pPlayerDBBaseInfo, 0); //lastMapMedalNum
				WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalNum
				WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalSeasonId
				WriteUn(pPlayerDBBaseInfo, 0); //lastClearMapMedalTime

				len = pPlayerDBBaseInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			{ //PlayerGuildInfo
				BYTE* pPlayerGuildInfo = pHeroVisbleInfo;
				Write16(pPlayerGuildInfo, 0); //len

				WriteString(pPlayerGuildInfo, 0); //GuildName[]
				Write16(pPlayerGuildInfo, 0); //Duty
				Write32(pPlayerGuildInfo, 0); //GuildID
				Write32(pPlayerGuildInfo, 0); //Right
				Write32(pPlayerGuildInfo, 0); //Medal
				Write32(pPlayerGuildInfo, 0); //Contribute
				WriteString(pPlayerGuildInfo, 0); //DutyTitle[]

				len = pPlayerGuildInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write16(pHeroVisbleInfo, 0); //EquipedItemNum
			for (size_t i = 0; i < n; i++)
			{ //PlayerItemInfo
				BYTE* pPlayerItemInfo = pHeroVisbleInfo;
				Write16(pPlayerItemInfo, 0); //len

				Write32(pPlayerItemInfo, 0); //ItemID
				Write32(pPlayerItemInfo, 0); //ItemNum
				Write32(pPlayerItemInfo, 0); //AvailPeriod
				Write8(pPlayerItemInfo, 0); //Status
				WriteUn(pPlayerItemInfo, 0); //ObtainTime
				Write32(pPlayerItemInfo, 0); //OtherAttribute

				len = pPlayerItemInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write16(pHeroVisbleInfo, 0); //PetNum
			for (size_t i = 0; i < n; i++)
			{ //PetInfo
				BYTE* pPetInfo = pHeroVisbleInfo;
				Write16(pPetInfo, 0); //len

				Write32(pPetInfo, 0); //Uin
				Write32(pPetInfo, 0); //PetId
				WriteString(pPetInfo, 0); //PetName[]
				Write8(pPetInfo, 0); //IsProper
				Write16(pPetInfo, 0); //Level
				Write8(pPetInfo, 0); //Status
				Write16(pPetInfo, 0); //PetSkillNum
				for (size_t i = 0; i < n; i++)
				{ //PetSkillList
					BYTE* pPetSkillList = pPetInfo;
					Write16(pPetSkillList, 0); //len

					Write16(pPetSkillList, 0); //SkillID
					Write8(pPetSkillList, 0); //Status
					Write8(pPetSkillList, 0); //Active
					Write32(pPetSkillList, 0); //Value

					len = pPetSkillList - pPetInfo;
					Set16(pPetInfo, (WORD)len);
					pPetInfo += len;
				}
				Write32(pPetInfo, 0); //StrengLevel

				len = pPetInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			{ //PlayerGuildMatchInfo
				BYTE* pPlayerGuildMatchInfo = pHeroVisbleInfo;
				Write16(pPlayerGuildMatchInfo, 0); //len

				Write32(pPlayerGuildMatchInfo, 0); //SelfPoint
				Write32(pPlayerGuildMatchInfo, 0); //WinNum
				Write32(pPlayerGuildMatchInfo, 0); //TotalNum

				len = pPlayerGuildMatchInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //IsInTopList
			Write8(pHeroVisbleInfo, 0); //LoverRaceOrPro
			Write8(pHeroVisbleInfo, 0); //TmpEffectNum
			Write32(pHeroVisbleInfo, 0); //TmpEffectItems[]
			Write8(pHeroVisbleInfo, 0); //OBState
			Write8(pHeroVisbleInfo, 0); //DebutOrX5
			Write8(pHeroVisbleInfo, 0); //RandKeyFlag
			WriteUn(pHeroVisbleInfo, 0); //VipFlag
			Write8(pHeroVisbleInfo, 0); //HaveAppellation
			for (size_t i = 0; i < n; i++)
			{ //CurAppellation
				BYTE* pCurAppellation = pHeroVisbleInfo;
				Write16(pCurAppellation, 0); //len

				Write8(pCurAppellation, 0); //Type
				Write8(pCurAppellation, 0); //Level
				Write8(pCurAppellation, 0); //Status
				Write8(pCurAppellation, 0); //Difficulty
				Write32(pCurAppellation, 0); //MapId
				Write32(pCurAppellation, 0); //Value

				len = pCurAppellation - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			{ //NobleInfo
				BYTE* pNobleInfo = pHeroVisbleInfo;
				Write16(pNobleInfo, 0); //len

				Write32(pNobleInfo, 0); //NobleID
				Write8(pNobleInfo, 0); //NobleLevel
				Write32(pNobleInfo, 0); //NoblePoint
				Write32(pNobleInfo, 0); //NobleLeftDays

				len = pNobleInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //HasCarryWizard
			for (size_t i = 0; i < n; i++)
			{ //CarryWizardInfo
				BYTE* pCarryWizardInfo = pHeroVisbleInfo;
				Write16(pCarryWizardInfo, 0); //len

				Write16(pCarryWizardInfo, 0); //WizardID
				WriteString(pCarryWizardInfo, 0); //Nickname[]
				Write16(pCarryWizardInfo, 0); //WizardType
				Write8(pCarryWizardInfo, 0); //Order
				Write8(pCarryWizardInfo, 0); //EvolutionBranch
				Write8(pCarryWizardInfo, 0); //IsHuanHua

				len = pCarryWizardInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			{ //GuildVipBaseInfo
				BYTE* pGuildVipBaseInfo = pHeroVisbleInfo;
				Write16(pGuildVipBaseInfo, 0); //len

				Write8(pGuildVipBaseInfo, 0); //GuildVipLevel
				Write32(pGuildVipBaseInfo, 0); //GuildVipPoint

				len = pGuildVipBaseInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write32(pHeroVisbleInfo, 0); //ExFlag
			Write8(pHeroVisbleInfo, 0); //HaveLDMBaseInfo
			for (size_t i = 0; i < n; i++)
			{ //PlayerLDMBaseInfo
				BYTE* pPlayerLDMBaseInfo = pHeroVisbleInfo;
				Write16(pPlayerLDMBaseInfo, 0); //len

				Write8(pPlayerLDMBaseInfo, 0); //Grade
				Write32(pPlayerLDMBaseInfo, 0); //Score
				Write32(pPlayerLDMBaseInfo, 0); //MaxScore
				Write32(pPlayerLDMBaseInfo, 0); //MaxGrade

				len = pPlayerLDMBaseInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //HasWl
			for (size_t i = 0; i < n; i++)
			{ //PlayerWlVisibleInfo
				BYTE* pPlayerWlVisibleInfo = pHeroVisbleInfo;
				Write16(pPlayerWlVisibleInfo, 0); //len

				Write32(pPlayerWlVisibleInfo, 0); //WonderLandID
				WriteString(pPlayerWlVisibleInfo, 0); //WonderLandName[]
				Write16(pPlayerWlVisibleInfo, 0); //WonderLandDuty
				Write8(pPlayerWlVisibleInfo, 0); //SubType
				Write8(pPlayerWlVisibleInfo, 0); //GuildGrade

				len = pPlayerWlVisibleInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //HasLoverVip
			for (size_t i = 0; i < n; i++)
			{ //LoverVipInfo
				BYTE* pLoverVipInfo = pHeroVisbleInfo;
				Write16(pLoverVipInfo, 0); //len

				Write8(pLoverVipInfo, 0); //LoverVipLevel
				Write32(pLoverVipInfo, 0); //LoverVipPoint
				Write8(pLoverVipInfo, 0); //GrowRate

				len = pLoverVipInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //HasBattleModeSkillInfoList
			for (size_t i = 0; i < n; i++)
			{ //BattleModeSkillInfoList
				BYTE* pBattleModeSkillInfoList = pHeroVisbleInfo;
				Write16(pBattleModeSkillInfoList, 0); //len

				Write8(pBattleModeSkillInfoList, 0); //SkillNum
				for (size_t i = 0; i < n; i++)
				{ //SkillInfo
					BYTE* pSkillInfo = pBattleModeSkillInfoList;
					Write16(pSkillInfo, 0); //len

					Write16(pSkillInfo, 0); //SkillId
					Write8(pSkillInfo, 0); //SkillLevel

					len = pSkillInfo - pBattleModeSkillInfoList;
					Set16(pBattleModeSkillInfoList, (WORD)len);
					pBattleModeSkillInfoList += len;
				}

				len = pBattleModeSkillInfoList - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}

			len = pHeroVisbleInfo - pHeroInfo;
			Set16(pHeroInfo, (WORD)len);
			pHeroInfo += len;
		}
		Write16(pHeroInfo, 0); //HeroEnterDelayTime

		len = pHeroInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //RelationHeroCount
	for (size_t i = 0; i < n; i++)
	{ //PlayerRelationInfo
		BYTE* pPlayerRelationInfo = p;
		Write16(pPlayerRelationInfo, 0); //len

		Write32(pPlayerRelationInfo, 0); //SrcUin
		Write32(pPlayerRelationInfo, 0); //RelationFlag
		Write32(pPlayerRelationInfo, 0); //RelationUin
		WriteString(pPlayerRelationInfo, 0); //RelationNickname[]
		Write32(pPlayerRelationInfo, 0); //EngageTime
		Write32(pPlayerRelationInfo, 0); //NextCanBookingTimeLimit
		Write32(pPlayerRelationInfo, 0); //BeginHoneyMoonTime
		Write32(pPlayerRelationInfo, 0); //EndHoneyMoonTime
		Write8(pPlayerRelationInfo, 0); //EngageFlag

		len = pPlayerRelationInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //KartNum
	for (size_t i = 0; i < n; i++)
	{ //KartRefitInfo
		BYTE* pKartRefitInfo = p;
		Write16(pKartRefitInfo, 0); //len

		Write32(pKartRefitInfo, 0); //Uin
		Write32(pKartRefitInfo, 0); //KartId
		Write32(pKartRefitInfo, 0); //RefitCout
		Write16(pKartRefitInfo, 0); //MaxFlags
		Write16(pKartRefitInfo, 0); //WWeight
		Write16(pKartRefitInfo, 0); //SpeedWeight
		Write16(pKartRefitInfo, 0); //JetWeight
		Write16(pKartRefitInfo, 0); //SJetWeight
		Write16(pKartRefitInfo, 0); //AccuWeight
		Write32(pKartRefitInfo, 0); //ShapeRefitCount
		Write32(pKartRefitInfo, 0); //KartHeadRefitItemID
		Write32(pKartRefitInfo, 0); //KartTailRefitItemID
		Write32(pKartRefitInfo, 0); //KartFlankRefitItemID
		Write32(pKartRefitInfo, 0); //KartTireRefitItemID

		len = pKartRefitInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //HammerCount
	for (size_t i = 0; i < n; i++)
	{ //EquipedHammer
		BYTE* pEquipedHammer = p;
		Write16(pEquipedHammer, 0); //len

		Write32(pEquipedHammer, 0); //EquipedHammerID

		len = pEquipedHammer - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //StealPigCount
	for (size_t i = 0; i < n; i++)
	{ //StealPig
		BYTE* pStealPig = p;
		Write16(pStealPig, 0); //len

		Write8(pStealPig, 0); //Status
		Write8(pStealPig, 0); //PigPos
		Write32(pStealPig, 0); //ItemID

		len = pStealPig - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HaveNext
	Write8(p, 0); //HaveAppellation
	for (size_t i = 0; i < n; i++)
	{ //CurAppellation
		BYTE* pCurAppellation = p;
		Write16(pCurAppellation, 0); //len

		Write8(pCurAppellation, 0); //Type
		Write8(pCurAppellation, 0); //Level
		Write8(pCurAppellation, 0); //Status
		Write8(pCurAppellation, 0); //Difficulty
		Write32(pCurAppellation, 0); //MapId
		Write32(pCurAppellation, 0); //Value

		len = pCurAppellation - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11019, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestLeaveGuildRoom(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT ClientStatusContex = Read32(p);

}

void ResponseLeaveGuildRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //ClientStatusContex

	len = p - buf;
	SendToClient(Client, 11012, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestKickOtherFromGuildRoom(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	U KickUin = ReadU(p);

}

void ResponseKickOtherFromGuildRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 11013, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyKickFromGuildRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //GuildID
	Write8(p, 0); //GuildNameLen
	Write32(p, 0); //KickerUin
	Write8(p, 0); //KickerNameLen
	Write16(p, 0); //KickReasonID
	Write8(p, 0); //KickReasonLen

	len = p - buf;
	SendToClient(Client, 11014, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyOtherEnterGuildRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //GuildID
	Write8(p, 0); //GuildRoomID
	Write16(p, 0); //SceneID
	Write32(p, 0); //Time
	{ //HeroInfo
		BYTE* pHeroInfo = p;
		Write16(pHeroInfo, 0); //len

		{ //HeroMoveInfo
			BYTE* pHeroMoveInfo = pHeroInfo;
			Write16(pHeroMoveInfo, 0); //len

			Write32(pHeroMoveInfo, 0); //Uin
			Write8(pHeroMoveInfo, 0); //WalkStatue
			Write32(pHeroMoveInfo, 0); //Posion[]
			Write32(pHeroMoveInfo, 0); //Ori[]
			Write32(pHeroMoveInfo, 0); //AttachUin
			Write32(pHeroMoveInfo, 0); //WalkExtState

			len = pHeroMoveInfo - pHeroInfo;
			Set16(pHeroInfo, (WORD)len);
			pHeroInfo += len;
		}
		Write32(pHeroInfo, 0); //NextPoint
		Write16(pHeroInfo, 0); //PathLen
		Write32(pHeroInfo, 0); //Path[]
		{ //HeroVisbleInfo
			BYTE* pHeroVisbleInfo = pHeroInfo;
			Write16(pHeroVisbleInfo, 0); //len

			WriteUn(pHeroVisbleInfo, 0); //Uin
			WriteUn(pHeroVisbleInfo, 0); //Identity
			Write8(pHeroVisbleInfo, 0); //SeatID
			Write8(pHeroVisbleInfo, 0); //TeamID
			Write16(pHeroVisbleInfo, 0); //PlayerID
			Write8(pHeroVisbleInfo, 0); //Status
			{ //PlayerDBBaseInfo
				BYTE* pPlayerDBBaseInfo = pHeroVisbleInfo;
				Write16(pPlayerDBBaseInfo, 0); //len

				WriteString(pPlayerDBBaseInfo, 0); //Nickname[]
				Write8(pPlayerDBBaseInfo, 0); //Gender
				Write8(pPlayerDBBaseInfo, 0); //Country
				Write32(pPlayerDBBaseInfo, 0); //License
				WriteUn(pPlayerDBBaseInfo, 0); //Experience
				Write32(pPlayerDBBaseInfo, 0); //SuperMoney
				Write32(pPlayerDBBaseInfo, 0); //Money
				WriteUn(pPlayerDBBaseInfo, 0); //WinNum
				Write32(pPlayerDBBaseInfo, 0); //SecondNum
				Write32(pPlayerDBBaseInfo, 0); //ThirdNum
				WriteUn(pPlayerDBBaseInfo, 0); //TotalNum
				Write32(pPlayerDBBaseInfo, 0); //CurHonor
				Write32(pPlayerDBBaseInfo, 0); //TotalHonor
				Write32(pPlayerDBBaseInfo, 0); //TodayHonor
				Write32(pPlayerDBBaseInfo, 0); //RelaxTime
				Write32(pPlayerDBBaseInfo, 0); //MonthDurationBefore
				Write32(pPlayerDBBaseInfo, 0); //MonthDurationCur
				Write32(pPlayerDBBaseInfo, 0); //Charm
				Write32(pPlayerDBBaseInfo, 0); //DurationGame
				Write32(pPlayerDBBaseInfo, 0); //DanceExp
				Write32(pPlayerDBBaseInfo, 0); //Coupons
				Write32(pPlayerDBBaseInfo, 0); //Admiration
				Write32(pPlayerDBBaseInfo, 0); //LuckMoney
				Write32(pPlayerDBBaseInfo, 0); //TeamWorkExp
				Write32(pPlayerDBBaseInfo, 0); //AchievePoint
				Write32(pPlayerDBBaseInfo, 0); //RegTime
				WriteString(pPlayerDBBaseInfo, 0); //Signature[]
				Write32(pPlayerDBBaseInfo, 0); //LuckyMatchPoint
				Write32(pPlayerDBBaseInfo, 0); //LuckyMatchNum
				Write16(pPlayerDBBaseInfo, 0); //LuckyMatchFirstNum
				Write8(pPlayerDBBaseInfo, 0); //LuckyMatchBestRand
				Write32(pPlayerDBBaseInfo, 0); //LuckyMatchWinNum
				Write32(pPlayerDBBaseInfo, 0); //FizzPointTotal
				Write16(pPlayerDBBaseInfo, 0); //FizzPointDaily
				Write16(pPlayerDBBaseInfo, 0); //FizzPointWeekly
				Write16(pPlayerDBBaseInfo, 0); //FizzPointLastWeek
				Write8(pPlayerDBBaseInfo, 0); //FizzLotteryStatus
				Write32(pPlayerDBBaseInfo, 0); //FizzLastUpdateTime
				Write32(pPlayerDBBaseInfo, 0); //SNSLocaleCode
				Write32(pPlayerDBBaseInfo, 0); //AuctionRightUnlockTime
				Write8(pPlayerDBBaseInfo, 0); //ReserveFlag
				Write32(pPlayerDBBaseInfo, 0); //CurConsumeScore
				Write32(pPlayerDBBaseInfo, 0); //HistoryConsumeScore
				Write8(pPlayerDBBaseInfo, 0); //CrashModeSponsorID
				Write32(pPlayerDBBaseInfo, 0); //Popularity
				Write32(pPlayerDBBaseInfo, 0); //LadderMatchAchievePoint
				Write32(pPlayerDBBaseInfo, 0); //Cash
				Write32(pPlayerDBBaseInfo, 0); //PlayerGPMIdentity
				Write32(pPlayerDBBaseInfo, 0); //PointTotalScore
				WriteUn(pPlayerDBBaseInfo, 0); //totalMapMedalNum
				WriteUn(pPlayerDBBaseInfo, 0); //lastMapMedalNum
				WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalNum
				WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalSeasonId
				WriteUn(pPlayerDBBaseInfo, 0); //lastClearMapMedalTime

				len = pPlayerDBBaseInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			{ //PlayerGuildInfo
				BYTE* pPlayerGuildInfo = pHeroVisbleInfo;
				Write16(pPlayerGuildInfo, 0); //len

				WriteString(pPlayerGuildInfo, 0); //GuildName[]
				Write16(pPlayerGuildInfo, 0); //Duty
				Write32(pPlayerGuildInfo, 0); //GuildID
				Write32(pPlayerGuildInfo, 0); //Right
				Write32(pPlayerGuildInfo, 0); //Medal
				Write32(pPlayerGuildInfo, 0); //Contribute
				WriteString(pPlayerGuildInfo, 0); //DutyTitle[]

				len = pPlayerGuildInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write16(pHeroVisbleInfo, 0); //EquipedItemNum
			for (size_t i = 0; i < n; i++)
			{ //PlayerItemInfo
				BYTE* pPlayerItemInfo = pHeroVisbleInfo;
				Write16(pPlayerItemInfo, 0); //len

				Write32(pPlayerItemInfo, 0); //ItemID
				Write32(pPlayerItemInfo, 0); //ItemNum
				Write32(pPlayerItemInfo, 0); //AvailPeriod
				Write8(pPlayerItemInfo, 0); //Status
				WriteUn(pPlayerItemInfo, 0); //ObtainTime
				Write32(pPlayerItemInfo, 0); //OtherAttribute

				len = pPlayerItemInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write16(pHeroVisbleInfo, 0); //PetNum
			for (size_t i = 0; i < n; i++)
			{ //PetInfo
				BYTE* pPetInfo = pHeroVisbleInfo;
				Write16(pPetInfo, 0); //len

				Write32(pPetInfo, 0); //Uin
				Write32(pPetInfo, 0); //PetId
				WriteString(pPetInfo, 0); //PetName[]
				Write8(pPetInfo, 0); //IsProper
				Write16(pPetInfo, 0); //Level
				Write8(pPetInfo, 0); //Status
				Write16(pPetInfo, 0); //PetSkillNum
				for (size_t i = 0; i < n; i++)
				{ //PetSkillList
					BYTE* pPetSkillList = pPetInfo;
					Write16(pPetSkillList, 0); //len

					Write16(pPetSkillList, 0); //SkillID
					Write8(pPetSkillList, 0); //Status
					Write8(pPetSkillList, 0); //Active
					Write32(pPetSkillList, 0); //Value

					len = pPetSkillList - pPetInfo;
					Set16(pPetInfo, (WORD)len);
					pPetInfo += len;
				}
				Write32(pPetInfo, 0); //StrengLevel

				len = pPetInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			{ //PlayerGuildMatchInfo
				BYTE* pPlayerGuildMatchInfo = pHeroVisbleInfo;
				Write16(pPlayerGuildMatchInfo, 0); //len

				Write32(pPlayerGuildMatchInfo, 0); //SelfPoint
				Write32(pPlayerGuildMatchInfo, 0); //WinNum
				Write32(pPlayerGuildMatchInfo, 0); //TotalNum

				len = pPlayerGuildMatchInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //IsInTopList
			Write8(pHeroVisbleInfo, 0); //LoverRaceOrPro
			Write8(pHeroVisbleInfo, 0); //TmpEffectNum
			Write32(pHeroVisbleInfo, 0); //TmpEffectItems[]
			Write8(pHeroVisbleInfo, 0); //OBState
			Write8(pHeroVisbleInfo, 0); //DebutOrX5
			Write8(pHeroVisbleInfo, 0); //RandKeyFlag
			WriteUn(pHeroVisbleInfo, 0); //VipFlag
			Write8(pHeroVisbleInfo, 0); //HaveAppellation
			for (size_t i = 0; i < n; i++)
			{ //CurAppellation
				BYTE* pCurAppellation = pHeroVisbleInfo;
				Write16(pCurAppellation, 0); //len

				Write8(pCurAppellation, 0); //Type
				Write8(pCurAppellation, 0); //Level
				Write8(pCurAppellation, 0); //Status
				Write8(pCurAppellation, 0); //Difficulty
				Write32(pCurAppellation, 0); //MapId
				Write32(pCurAppellation, 0); //Value

				len = pCurAppellation - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			{ //NobleInfo
				BYTE* pNobleInfo = pHeroVisbleInfo;
				Write16(pNobleInfo, 0); //len

				Write32(pNobleInfo, 0); //NobleID
				Write8(pNobleInfo, 0); //NobleLevel
				Write32(pNobleInfo, 0); //NoblePoint
				Write32(pNobleInfo, 0); //NobleLeftDays

				len = pNobleInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //HasCarryWizard
			for (size_t i = 0; i < n; i++)
			{ //CarryWizardInfo
				BYTE* pCarryWizardInfo = pHeroVisbleInfo;
				Write16(pCarryWizardInfo, 0); //len

				Write16(pCarryWizardInfo, 0); //WizardID
				WriteString(pCarryWizardInfo, 0); //Nickname[]
				Write16(pCarryWizardInfo, 0); //WizardType
				Write8(pCarryWizardInfo, 0); //Order
				Write8(pCarryWizardInfo, 0); //EvolutionBranch
				Write8(pCarryWizardInfo, 0); //IsHuanHua

				len = pCarryWizardInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			{ //GuildVipBaseInfo
				BYTE* pGuildVipBaseInfo = pHeroVisbleInfo;
				Write16(pGuildVipBaseInfo, 0); //len

				Write8(pGuildVipBaseInfo, 0); //GuildVipLevel
				Write32(pGuildVipBaseInfo, 0); //GuildVipPoint

				len = pGuildVipBaseInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write32(pHeroVisbleInfo, 0); //ExFlag
			Write8(pHeroVisbleInfo, 0); //HaveLDMBaseInfo
			for (size_t i = 0; i < n; i++)
			{ //PlayerLDMBaseInfo
				BYTE* pPlayerLDMBaseInfo = pHeroVisbleInfo;
				Write16(pPlayerLDMBaseInfo, 0); //len

				Write8(pPlayerLDMBaseInfo, 0); //Grade
				Write32(pPlayerLDMBaseInfo, 0); //Score
				Write32(pPlayerLDMBaseInfo, 0); //MaxScore
				Write32(pPlayerLDMBaseInfo, 0); //MaxGrade

				len = pPlayerLDMBaseInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //HasWl
			for (size_t i = 0; i < n; i++)
			{ //PlayerWlVisibleInfo
				BYTE* pPlayerWlVisibleInfo = pHeroVisbleInfo;
				Write16(pPlayerWlVisibleInfo, 0); //len

				Write32(pPlayerWlVisibleInfo, 0); //WonderLandID
				WriteString(pPlayerWlVisibleInfo, 0); //WonderLandName[]
				Write16(pPlayerWlVisibleInfo, 0); //WonderLandDuty
				Write8(pPlayerWlVisibleInfo, 0); //SubType
				Write8(pPlayerWlVisibleInfo, 0); //GuildGrade

				len = pPlayerWlVisibleInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //HasLoverVip
			for (size_t i = 0; i < n; i++)
			{ //LoverVipInfo
				BYTE* pLoverVipInfo = pHeroVisbleInfo;
				Write16(pLoverVipInfo, 0); //len

				Write8(pLoverVipInfo, 0); //LoverVipLevel
				Write32(pLoverVipInfo, 0); //LoverVipPoint
				Write8(pLoverVipInfo, 0); //GrowRate

				len = pLoverVipInfo - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}
			Write8(pHeroVisbleInfo, 0); //HasBattleModeSkillInfoList
			for (size_t i = 0; i < n; i++)
			{ //BattleModeSkillInfoList
				BYTE* pBattleModeSkillInfoList = pHeroVisbleInfo;
				Write16(pBattleModeSkillInfoList, 0); //len

				Write8(pBattleModeSkillInfoList, 0); //SkillNum
				for (size_t i = 0; i < n; i++)
				{ //SkillInfo
					BYTE* pSkillInfo = pBattleModeSkillInfoList;
					Write16(pSkillInfo, 0); //len

					Write16(pSkillInfo, 0); //SkillId
					Write8(pSkillInfo, 0); //SkillLevel

					len = pSkillInfo - pBattleModeSkillInfoList;
					Set16(pBattleModeSkillInfoList, (WORD)len);
					pBattleModeSkillInfoList += len;
				}

				len = pBattleModeSkillInfoList - pHeroVisbleInfo;
				Set16(pHeroVisbleInfo, (WORD)len);
				pHeroVisbleInfo += len;
			}

			len = pHeroVisbleInfo - pHeroInfo;
			Set16(pHeroInfo, (WORD)len);
			pHeroInfo += len;
		}
		Write16(pHeroInfo, 0); //HeroEnterDelayTime

		len = pHeroInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //PlayerRelationInfo
		BYTE* pPlayerRelationInfo = p;
		Write16(pPlayerRelationInfo, 0); //len

		Write32(pPlayerRelationInfo, 0); //SrcUin
		Write32(pPlayerRelationInfo, 0); //RelationFlag
		Write32(pPlayerRelationInfo, 0); //RelationUin
		WriteString(pPlayerRelationInfo, 0); //RelationNickname[]
		Write32(pPlayerRelationInfo, 0); //EngageTime
		Write32(pPlayerRelationInfo, 0); //NextCanBookingTimeLimit
		Write32(pPlayerRelationInfo, 0); //BeginHoneyMoonTime
		Write32(pPlayerRelationInfo, 0); //EndHoneyMoonTime
		Write8(pPlayerRelationInfo, 0); //EngageFlag

		len = pPlayerRelationInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //KartNum
	for (size_t i = 0; i < n; i++)
	{ //KartRefitInfo
		BYTE* pKartRefitInfo = p;
		Write16(pKartRefitInfo, 0); //len

		Write32(pKartRefitInfo, 0); //Uin
		Write32(pKartRefitInfo, 0); //KartId
		Write32(pKartRefitInfo, 0); //RefitCout
		Write16(pKartRefitInfo, 0); //MaxFlags
		Write16(pKartRefitInfo, 0); //WWeight
		Write16(pKartRefitInfo, 0); //SpeedWeight
		Write16(pKartRefitInfo, 0); //JetWeight
		Write16(pKartRefitInfo, 0); //SJetWeight
		Write16(pKartRefitInfo, 0); //AccuWeight
		Write32(pKartRefitInfo, 0); //ShapeRefitCount
		Write32(pKartRefitInfo, 0); //KartHeadRefitItemID
		Write32(pKartRefitInfo, 0); //KartTailRefitItemID
		Write32(pKartRefitInfo, 0); //KartFlankRefitItemID
		Write32(pKartRefitInfo, 0); //KartTireRefitItemID

		len = pKartRefitInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //StealPig
		BYTE* pStealPig = p;
		Write16(pStealPig, 0); //len

		Write8(pStealPig, 0); //Status
		Write8(pStealPig, 0); //PigPos
		Write32(pStealPig, 0); //ItemID

		len = pStealPig - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11015, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyOtherLeavedGuildRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin

	len = p - buf;
	SendToClient(Client, 11016, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifySwitchGuildChatServer(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //GuildID

	len = p - buf;
	SendToClient(Client, 11017, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestChangeOBState(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	bool OBState = Read8(p);

}

void ResponseChangeOBState(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //OBState
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 134, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyChangeOBState(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //Uin
	Write8(p, 0); //OBState

	len = p - buf;
	SendToClient(Client, 609, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestParticipateLuckyMatch(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseParticipateLuckyMatch(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //CurPlayerNum
	Write8(p, 0); //NeedPlayerNum
	Write8(p, 0); //NewPlayerNumPerMinute
	Write8(p, 0); //NeedMapNum
	Write32(p, 0); //MapID[]

	len = p - buf;
	SendToClient(Client, 400, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestCancelParticipateLuckyMatch(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseCancelParticipateLuckyMatch(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 401, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyParticipateLuckyMatchTimeOut(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 816, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestLuckyMatchBillboard(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseLuckyMatchBillboard(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //Num
	for (size_t i = 0; i < n; i++)
	{ //Info
		BYTE* pInfo = p;
		Write16(pInfo, 0); //len

		Write8(pInfo, 0); //Type
		WriteString(pInfo, 0); //Name[]
		WriteString(pInfo, 0); //MatchType[]
		WriteString(pInfo, 0); //Award[]

		len = pInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 402, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifySvrConfig(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteU(p, 0); //GuildScoreThreshold
	{ //LuckyMatchCfg
		BYTE* pLuckyMatchCfg = p;
		Write16(pLuckyMatchCfg, 0); //len

		WriteString(pLuckyMatchCfg, 0); //Time[]
		WriteString(pLuckyMatchCfg, 0); //Award[]
		WriteString(pLuckyMatchCfg, 0); //StartCondition[]
		WriteU(pLuckyMatchCfg, 0); //LuckyMoney
		WriteString(pLuckyMatchCfg, 0); //MatchTitle[]

		len = pLuckyMatchCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //MsgStoneSysCfg
		BYTE* pMsgStoneSysCfg = p;
		Write16(pMsgStoneSysCfg, 0); //len

		WriteU(pMsgStoneSysCfg, 0); //IsStoneSkillTakeEffect
		{ //SkillStoneCfg
			BYTE* pSkillStoneCfg = pMsgStoneSysCfg;
			Write16(pSkillStoneCfg, 0); //len

			Write32(pSkillStoneCfg, 0); //SkillStoneNum
			for (size_t i = 0; i < n; i++)
			{ //SingleSkillStoneCfg
				BYTE* pSingleSkillStoneCfg = pSkillStoneCfg;
				Write16(pSingleSkillStoneCfg, 0); //len

				Write32(pSingleSkillStoneCfg, 0); //StoneID
				Write32(pSingleSkillStoneCfg, 0); //ActiveCondVal1
				Write32(pSingleSkillStoneCfg, 0); //UseCountUpperlimit
				Write32(pSingleSkillStoneCfg, 0); //ActiveSuccessProb
				Write32(pSingleSkillStoneCfg, 0); //CoolTime
				Write32(pSingleSkillStoneCfg, 0); //GenResultVal1

				len = pSingleSkillStoneCfg - pSkillStoneCfg;
				Set16(pSkillStoneCfg, (WORD)len);
				pSkillStoneCfg += len;
			}

			len = pSkillStoneCfg - pMsgStoneSysCfg;
			Set16(pMsgStoneSysCfg, (WORD)len);
			pMsgStoneSysCfg += len;
		}
		Write32(pMsgStoneSysCfg, 0); //Kart2StoneGrooveNum
		for (size_t i = 0; i < n; i++)
		{ //Kart2StoneGrooveCfg
			BYTE* pKart2StoneGrooveCfg = pMsgStoneSysCfg;
			Write16(pKart2StoneGrooveCfg, 0); //len

			Write32(pKart2StoneGrooveCfg, 0); //KartID
			Write32(pKart2StoneGrooveCfg, 0); //InitStoneGrooveNum
			Write32(pKart2StoneGrooveCfg, 0); //StoneUseOccasionType[]

			len = pKart2StoneGrooveCfg - pMsgStoneSysCfg;
			Set16(pMsgStoneSysCfg, (WORD)len);
			pMsgStoneSysCfg += len;
		}

		len = pMsgStoneSysCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //UITitleDispInfo
		BYTE* pUITitleDispInfo = p;
		Write16(pUITitleDispInfo, 0); //len

		Write8(pUITitleDispInfo, 0); //DisplayBitMap[]
		{ //ADText
			BYTE* pADText = pUITitleDispInfo;
			Write16(pADText, 0); //len

			Write8(pADText, 0); //TextLen

			len = pADText - pUITitleDispInfo;
			Set16(pUITitleDispInfo, (WORD)len);
			pUITitleDispInfo += len;
		}

		len = pUITitleDispInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //LoaderTipInfo
		BYTE* pLoaderTipInfo = p;
		Write16(pLoaderTipInfo, 0); //len

		Write32(pLoaderTipInfo, 0); //Version
		Write8(pLoaderTipInfo, 0); //TipsNum
		for (size_t i = 0; i < n; i++)
		{ //LoaderTipText
			BYTE* pLoaderTipText = pLoaderTipInfo;
			Write16(pLoaderTipText, 0); //len

			Write8(pLoaderTipText, 0); //TextLen

			len = pLoaderTipText - pLoaderTipInfo;
			Set16(pLoaderTipInfo, (WORD)len);
			pLoaderTipInfo += len;
		}

		len = pLoaderTipInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //MailSysAD
		BYTE* pMailSysAD = p;
		Write16(pMailSysAD, 0); //len

		Write16(pMailSysAD, 0); //TextLen

		len = pMailSysAD - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //CheatReportCfg
		BYTE* pCheatReportCfg = p;
		Write16(pCheatReportCfg, 0); //len

		Write8(pCheatReportCfg, 0); //ReplayDayNum
		Write8(pCheatReportCfg, 0); //IsReportCheatEnable

		len = pCheatReportCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //MaintainableKartNum
	Write32(p, 0); //MaintainableKartID[]
	Write32(p, 0); //CommonBitSwitch
	Write8(p, 0); //QQKart2ButtonLen
	{ //GuildEnlistCfg
		BYTE* pGuildEnlistCfg = p;
		Write16(pGuildEnlistCfg, 0); //len

		Write8(pGuildEnlistCfg, 0); //MinUnloginDay
		Write8(pGuildEnlistCfg, 0); //CdDay
		Write8(pGuildEnlistCfg, 0); //MaxAwardTimeOneDay

		len = pGuildEnlistCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //CloseQT
	Write32(p, 0); //QTCommonRoomID
	Write8(p, 0); //WlFetionDayLimit
	Write8(p, 0); //ShowShopIcon
	Write32(p, 0); //TiroRecommendMapNum
	Write32(p, 0); //TiroRecommendMapIdList[]
	Write16(p, 0); //BoxMutiOpenLimit
	Write8(p, 0); //HallButtonShow
	Write8(p, 0); //HallButtonShowUrlLen
	Write32(p, 0); //EndlessModeBaseScorePerLevel

	len = p - buf;
	SendToClient(Client, 800, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestLmtEnterChatRoom(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT RoomID = Read32(p);

}

void ResponseLmtEnterChatRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen
	Write16(p, 0); //PlayerNum
	for (size_t i = 0; i < n; i++)
	{ //PlayerInfo
		BYTE* pPlayerInfo = p;
		Write16(pPlayerInfo, 0); //len

		Write32(pPlayerInfo, 0); //Uin
		WriteString(pPlayerInfo, 0); //Nickname[]
		Write32(pPlayerInfo, 0); //Identify
		Write8(pPlayerInfo, 0); //Gender
		Write32(pPlayerInfo, 0); //EquipedIconID
		WriteUn(pPlayerInfo, 0); //Experience
		{ //PlayerRecord
			BYTE* pPlayerRecord = pPlayerInfo;
			Write16(pPlayerRecord, 0); //len

			Write32(pPlayerRecord, 0); //MatchNum
			Write8(pPlayerRecord, 0); //BestRank
			Write32(pPlayerRecord, 0); //ChamNum
			Write32(pPlayerRecord, 0); //WinNum

			len = pPlayerRecord - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		WriteUn(pPlayerInfo, 0); //VipFlag
		{ //NobleInfo
			BYTE* pNobleInfo = pPlayerInfo;
			Write16(pNobleInfo, 0); //len

			Write32(pNobleInfo, 0); //NobleID
			Write8(pNobleInfo, 0); //NobleLevel
			Write32(pNobleInfo, 0); //NoblePoint
			Write32(pNobleInfo, 0); //NobleLeftDays

			len = pNobleInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		{ //GuildVipBaseInfo
			BYTE* pGuildVipBaseInfo = pPlayerInfo;
			Write16(pGuildVipBaseInfo, 0); //len

			Write8(pGuildVipBaseInfo, 0); //GuildVipLevel
			Write32(pGuildVipBaseInfo, 0); //GuildVipPoint

			len = pGuildVipBaseInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		Write8(pPlayerInfo, 0); //HasLoverVip
		for (size_t i = 0; i < n; i++)
		{ //LoverVipInfo
			BYTE* pLoverVipInfo = pPlayerInfo;
			Write16(pLoverVipInfo, 0); //len

			Write8(pLoverVipInfo, 0); //LoverVipLevel
			Write32(pLoverVipInfo, 0); //LoverVipPoint
			Write8(pLoverVipInfo, 0); //GrowRate

			len = pLoverVipInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}

		len = pPlayerInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 381, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestLmtUpdateStatus(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseLmtUpdateStatus(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen
	Write8(p, 0); //PlayerStatus
	Write32(p, 0); //LeftTime

	len = p - buf;
	SendToClient(Client, 382, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestLmtGetScoreInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseLmtGetScoreInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen
	{ //ScoreInfo
		BYTE* pScoreInfo = p;
		Write16(pScoreInfo, 0); //len

		Write32(pScoreInfo, 0); //Score
		Write16(pScoreInfo, 0); //Rank
		Write16(pScoreInfo, 0); //TotalPlayerNum
		Write8(pScoreInfo, 0); //RoundNum
		for (size_t i = 0; i < n; i++)
		{ //RoundResult
			BYTE* pRoundResult = pScoreInfo;
			Write16(pRoundResult, 0); //len

			Write8(pRoundResult, 0); //Result
			Write32(pRoundResult, 0); //ScoreChg

			len = pRoundResult - pScoreInfo;
			Set16(pScoreInfo, (WORD)len);
			pScoreInfo += len;
		}
		{ //PlayerRecord
			BYTE* pPlayerRecord = pScoreInfo;
			Write16(pPlayerRecord, 0); //len

			Write32(pPlayerRecord, 0); //MatchNum
			Write8(pPlayerRecord, 0); //BestRank
			Write32(pPlayerRecord, 0); //ChamNum
			Write32(pPlayerRecord, 0); //WinNum

			len = pPlayerRecord - pScoreInfo;
			Set16(pScoreInfo, (WORD)len);
			pScoreInfo += len;
		}

		len = pScoreInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 383, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestLmtGetElimInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseLmtGetElimInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen
	Write8(p, 0); //Round
	Write8(p, 0); //MatchNum
	for (size_t i = 0; i < n; i++)
	{ //MatchInfo
		BYTE* pMatchInfo = p;
		Write16(pMatchInfo, 0); //len

		Write32(pMatchInfo, 0); //PlayerUin[]
		Write8(pMatchInfo, 0); //MatchResult

		len = pMatchInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 384, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestLmtRoll(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	bool Position = Read8(p);

}

void ResponseLmtRoll(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen
	Write8(p, 0); //Position
	Write32(p, 0); //ItemID

	len = p - buf;
	SendToClient(Client, 385, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyLuckyMatchReady(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ServerID
	WriteU(p, 0); //ExtenalIP
	Write8(p, 0); //ExtTcpPortNum
	Write16(p, 0); //ExternalTcpPort[]
	Write8(p, 0); //ExtUdpPortNum
	Write16(p, 0); //ExternalUdpPort[]
	Write32(p, 0); //RoomID

	len = p - buf;
	SendToClient(Client, 815, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyLmtEnterRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	{ //PlayerInfo
		BYTE* pPlayerInfo = p;
		Write16(pPlayerInfo, 0); //len

		Write32(pPlayerInfo, 0); //Uin
		WriteString(pPlayerInfo, 0); //Nickname[]
		Write32(pPlayerInfo, 0); //Identify
		Write8(pPlayerInfo, 0); //Gender
		Write32(pPlayerInfo, 0); //EquipedIconID
		WriteUn(pPlayerInfo, 0); //Experience
		{ //PlayerRecord
			BYTE* pPlayerRecord = pPlayerInfo;
			Write16(pPlayerRecord, 0); //len

			Write32(pPlayerRecord, 0); //MatchNum
			Write8(pPlayerRecord, 0); //BestRank
			Write32(pPlayerRecord, 0); //ChamNum
			Write32(pPlayerRecord, 0); //WinNum

			len = pPlayerRecord - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		WriteUn(pPlayerInfo, 0); //VipFlag
		{ //NobleInfo
			BYTE* pNobleInfo = pPlayerInfo;
			Write16(pNobleInfo, 0); //len

			Write32(pNobleInfo, 0); //NobleID
			Write8(pNobleInfo, 0); //NobleLevel
			Write32(pNobleInfo, 0); //NoblePoint
			Write32(pNobleInfo, 0); //NobleLeftDays

			len = pNobleInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		{ //GuildVipBaseInfo
			BYTE* pGuildVipBaseInfo = pPlayerInfo;
			Write16(pGuildVipBaseInfo, 0); //len

			Write8(pGuildVipBaseInfo, 0); //GuildVipLevel
			Write32(pGuildVipBaseInfo, 0); //GuildVipPoint

			len = pGuildVipBaseInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		Write8(pPlayerInfo, 0); //HasLoverVip
		for (size_t i = 0; i < n; i++)
		{ //LoverVipInfo
			BYTE* pLoverVipInfo = pPlayerInfo;
			Write16(pLoverVipInfo, 0); //len

			Write8(pLoverVipInfo, 0); //LoverVipLevel
			Write32(pLoverVipInfo, 0); //LoverVipPoint
			Write8(pLoverVipInfo, 0); //GrowRate

			len = pLoverVipInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}

		len = pPlayerInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 801, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyLmtLeaveRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin

	len = p - buf;
	SendToClient(Client, 802, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyLmtUpdateStatus(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //PlayerStatus
	Write32(p, 0); //LeftTime

	len = p - buf;
	SendToClient(Client, 803, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyLmtOpponentInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	{ //PlayerInfo
		BYTE* pPlayerInfo = p;
		Write16(pPlayerInfo, 0); //len

		WriteUn(pPlayerInfo, 0); //Uin
		WriteUn(pPlayerInfo, 0); //Identity
		Write8(pPlayerInfo, 0); //SeatID
		Write8(pPlayerInfo, 0); //TeamID
		Write16(pPlayerInfo, 0); //PlayerID
		Write8(pPlayerInfo, 0); //Status
		{ //PlayerDBBaseInfo
			BYTE* pPlayerDBBaseInfo = pPlayerInfo;
			Write16(pPlayerDBBaseInfo, 0); //len

			WriteString(pPlayerDBBaseInfo, 0); //Nickname[]
			Write8(pPlayerDBBaseInfo, 0); //Gender
			Write8(pPlayerDBBaseInfo, 0); //Country
			Write32(pPlayerDBBaseInfo, 0); //License
			WriteUn(pPlayerDBBaseInfo, 0); //Experience
			Write32(pPlayerDBBaseInfo, 0); //SuperMoney
			Write32(pPlayerDBBaseInfo, 0); //Money
			WriteUn(pPlayerDBBaseInfo, 0); //WinNum
			Write32(pPlayerDBBaseInfo, 0); //SecondNum
			Write32(pPlayerDBBaseInfo, 0); //ThirdNum
			WriteUn(pPlayerDBBaseInfo, 0); //TotalNum
			Write32(pPlayerDBBaseInfo, 0); //CurHonor
			Write32(pPlayerDBBaseInfo, 0); //TotalHonor
			Write32(pPlayerDBBaseInfo, 0); //TodayHonor
			Write32(pPlayerDBBaseInfo, 0); //RelaxTime
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationBefore
			Write32(pPlayerDBBaseInfo, 0); //MonthDurationCur
			Write32(pPlayerDBBaseInfo, 0); //Charm
			Write32(pPlayerDBBaseInfo, 0); //DurationGame
			Write32(pPlayerDBBaseInfo, 0); //DanceExp
			Write32(pPlayerDBBaseInfo, 0); //Coupons
			Write32(pPlayerDBBaseInfo, 0); //Admiration
			Write32(pPlayerDBBaseInfo, 0); //LuckMoney
			Write32(pPlayerDBBaseInfo, 0); //TeamWorkExp
			Write32(pPlayerDBBaseInfo, 0); //AchievePoint
			Write32(pPlayerDBBaseInfo, 0); //RegTime
			WriteString(pPlayerDBBaseInfo, 0); //Signature[]
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchPoint
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchNum
			Write16(pPlayerDBBaseInfo, 0); //LuckyMatchFirstNum
			Write8(pPlayerDBBaseInfo, 0); //LuckyMatchBestRand
			Write32(pPlayerDBBaseInfo, 0); //LuckyMatchWinNum
			Write32(pPlayerDBBaseInfo, 0); //FizzPointTotal
			Write16(pPlayerDBBaseInfo, 0); //FizzPointDaily
			Write16(pPlayerDBBaseInfo, 0); //FizzPointWeekly
			Write16(pPlayerDBBaseInfo, 0); //FizzPointLastWeek
			Write8(pPlayerDBBaseInfo, 0); //FizzLotteryStatus
			Write32(pPlayerDBBaseInfo, 0); //FizzLastUpdateTime
			Write32(pPlayerDBBaseInfo, 0); //SNSLocaleCode
			Write32(pPlayerDBBaseInfo, 0); //AuctionRightUnlockTime
			Write8(pPlayerDBBaseInfo, 0); //ReserveFlag
			Write32(pPlayerDBBaseInfo, 0); //CurConsumeScore
			Write32(pPlayerDBBaseInfo, 0); //HistoryConsumeScore
			Write8(pPlayerDBBaseInfo, 0); //CrashModeSponsorID
			Write32(pPlayerDBBaseInfo, 0); //Popularity
			Write32(pPlayerDBBaseInfo, 0); //LadderMatchAchievePoint
			Write32(pPlayerDBBaseInfo, 0); //Cash
			Write32(pPlayerDBBaseInfo, 0); //PlayerGPMIdentity
			Write32(pPlayerDBBaseInfo, 0); //PointTotalScore
			WriteUn(pPlayerDBBaseInfo, 0); //totalMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //lastMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalNum
			WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalSeasonId
			WriteUn(pPlayerDBBaseInfo, 0); //lastClearMapMedalTime

			len = pPlayerDBBaseInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		{ //PlayerGuildInfo
			BYTE* pPlayerGuildInfo = pPlayerInfo;
			Write16(pPlayerGuildInfo, 0); //len

			WriteString(pPlayerGuildInfo, 0); //GuildName[]
			Write16(pPlayerGuildInfo, 0); //Duty
			Write32(pPlayerGuildInfo, 0); //GuildID
			Write32(pPlayerGuildInfo, 0); //Right
			Write32(pPlayerGuildInfo, 0); //Medal
			Write32(pPlayerGuildInfo, 0); //Contribute
			WriteString(pPlayerGuildInfo, 0); //DutyTitle[]

			len = pPlayerGuildInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		Write16(pPlayerInfo, 0); //EquipedItemNum
		for (size_t i = 0; i < n; i++)
		{ //PlayerItemInfo
			BYTE* pPlayerItemInfo = pPlayerInfo;
			Write16(pPlayerItemInfo, 0); //len

			Write32(pPlayerItemInfo, 0); //ItemID
			Write32(pPlayerItemInfo, 0); //ItemNum
			Write32(pPlayerItemInfo, 0); //AvailPeriod
			Write8(pPlayerItemInfo, 0); //Status
			WriteUn(pPlayerItemInfo, 0); //ObtainTime
			Write32(pPlayerItemInfo, 0); //OtherAttribute

			len = pPlayerItemInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		Write16(pPlayerInfo, 0); //PetNum
		for (size_t i = 0; i < n; i++)
		{ //PetInfo
			BYTE* pPetInfo = pPlayerInfo;
			Write16(pPetInfo, 0); //len

			Write32(pPetInfo, 0); //Uin
			Write32(pPetInfo, 0); //PetId
			WriteString(pPetInfo, 0); //PetName[]
			Write8(pPetInfo, 0); //IsProper
			Write16(pPetInfo, 0); //Level
			Write8(pPetInfo, 0); //Status
			Write16(pPetInfo, 0); //PetSkillNum
			for (size_t i = 0; i < n; i++)
			{ //PetSkillList
				BYTE* pPetSkillList = pPetInfo;
				Write16(pPetSkillList, 0); //len

				Write16(pPetSkillList, 0); //SkillID
				Write8(pPetSkillList, 0); //Status
				Write8(pPetSkillList, 0); //Active
				Write32(pPetSkillList, 0); //Value

				len = pPetSkillList - pPetInfo;
				Set16(pPetInfo, (WORD)len);
				pPetInfo += len;
			}
			Write32(pPetInfo, 0); //StrengLevel

			len = pPetInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		{ //PlayerGuildMatchInfo
			BYTE* pPlayerGuildMatchInfo = pPlayerInfo;
			Write16(pPlayerGuildMatchInfo, 0); //len

			Write32(pPlayerGuildMatchInfo, 0); //SelfPoint
			Write32(pPlayerGuildMatchInfo, 0); //WinNum
			Write32(pPlayerGuildMatchInfo, 0); //TotalNum

			len = pPlayerGuildMatchInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		Write8(pPlayerInfo, 0); //IsInTopList
		Write8(pPlayerInfo, 0); //LoverRaceOrPro
		Write8(pPlayerInfo, 0); //TmpEffectNum
		Write32(pPlayerInfo, 0); //TmpEffectItems[]
		Write8(pPlayerInfo, 0); //OBState
		Write8(pPlayerInfo, 0); //DebutOrX5
		Write8(pPlayerInfo, 0); //RandKeyFlag
		WriteUn(pPlayerInfo, 0); //VipFlag
		Write8(pPlayerInfo, 0); //HaveAppellation
		for (size_t i = 0; i < n; i++)
		{ //CurAppellation
			BYTE* pCurAppellation = pPlayerInfo;
			Write16(pCurAppellation, 0); //len

			Write8(pCurAppellation, 0); //Type
			Write8(pCurAppellation, 0); //Level
			Write8(pCurAppellation, 0); //Status
			Write8(pCurAppellation, 0); //Difficulty
			Write32(pCurAppellation, 0); //MapId
			Write32(pCurAppellation, 0); //Value

			len = pCurAppellation - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		{ //NobleInfo
			BYTE* pNobleInfo = pPlayerInfo;
			Write16(pNobleInfo, 0); //len

			Write32(pNobleInfo, 0); //NobleID
			Write8(pNobleInfo, 0); //NobleLevel
			Write32(pNobleInfo, 0); //NoblePoint
			Write32(pNobleInfo, 0); //NobleLeftDays

			len = pNobleInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		Write8(pPlayerInfo, 0); //HasCarryWizard
		for (size_t i = 0; i < n; i++)
		{ //CarryWizardInfo
			BYTE* pCarryWizardInfo = pPlayerInfo;
			Write16(pCarryWizardInfo, 0); //len

			Write16(pCarryWizardInfo, 0); //WizardID
			WriteString(pCarryWizardInfo, 0); //Nickname[]
			Write16(pCarryWizardInfo, 0); //WizardType
			Write8(pCarryWizardInfo, 0); //Order
			Write8(pCarryWizardInfo, 0); //EvolutionBranch
			Write8(pCarryWizardInfo, 0); //IsHuanHua

			len = pCarryWizardInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		{ //GuildVipBaseInfo
			BYTE* pGuildVipBaseInfo = pPlayerInfo;
			Write16(pGuildVipBaseInfo, 0); //len

			Write8(pGuildVipBaseInfo, 0); //GuildVipLevel
			Write32(pGuildVipBaseInfo, 0); //GuildVipPoint

			len = pGuildVipBaseInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		Write32(pPlayerInfo, 0); //ExFlag
		Write8(pPlayerInfo, 0); //HaveLDMBaseInfo
		for (size_t i = 0; i < n; i++)
		{ //PlayerLDMBaseInfo
			BYTE* pPlayerLDMBaseInfo = pPlayerInfo;
			Write16(pPlayerLDMBaseInfo, 0); //len

			Write8(pPlayerLDMBaseInfo, 0); //Grade
			Write32(pPlayerLDMBaseInfo, 0); //Score
			Write32(pPlayerLDMBaseInfo, 0); //MaxScore
			Write32(pPlayerLDMBaseInfo, 0); //MaxGrade

			len = pPlayerLDMBaseInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		Write8(pPlayerInfo, 0); //HasWl
		for (size_t i = 0; i < n; i++)
		{ //PlayerWlVisibleInfo
			BYTE* pPlayerWlVisibleInfo = pPlayerInfo;
			Write16(pPlayerWlVisibleInfo, 0); //len

			Write32(pPlayerWlVisibleInfo, 0); //WonderLandID
			WriteString(pPlayerWlVisibleInfo, 0); //WonderLandName[]
			Write16(pPlayerWlVisibleInfo, 0); //WonderLandDuty
			Write8(pPlayerWlVisibleInfo, 0); //SubType
			Write8(pPlayerWlVisibleInfo, 0); //GuildGrade

			len = pPlayerWlVisibleInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		Write8(pPlayerInfo, 0); //HasLoverVip
		for (size_t i = 0; i < n; i++)
		{ //LoverVipInfo
			BYTE* pLoverVipInfo = pPlayerInfo;
			Write16(pLoverVipInfo, 0); //len

			Write8(pLoverVipInfo, 0); //LoverVipLevel
			Write32(pLoverVipInfo, 0); //LoverVipPoint
			Write8(pLoverVipInfo, 0); //GrowRate

			len = pLoverVipInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		Write8(pPlayerInfo, 0); //HasBattleModeSkillInfoList
		for (size_t i = 0; i < n; i++)
		{ //BattleModeSkillInfoList
			BYTE* pBattleModeSkillInfoList = pPlayerInfo;
			Write16(pBattleModeSkillInfoList, 0); //len

			Write8(pBattleModeSkillInfoList, 0); //SkillNum
			for (size_t i = 0; i < n; i++)
			{ //SkillInfo
				BYTE* pSkillInfo = pBattleModeSkillInfoList;
				Write16(pSkillInfo, 0); //len

				Write16(pSkillInfo, 0); //SkillId
				Write8(pSkillInfo, 0); //SkillLevel

				len = pSkillInfo - pBattleModeSkillInfoList;
				Set16(pBattleModeSkillInfoList, (WORD)len);
				pBattleModeSkillInfoList += len;
			}

			len = pBattleModeSkillInfoList - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}

		len = pPlayerInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //KartNum
	for (size_t i = 0; i < n; i++)
	{ //KartRefitInfo
		BYTE* pKartRefitInfo = p;
		Write16(pKartRefitInfo, 0); //len

		Write32(pKartRefitInfo, 0); //Uin
		Write32(pKartRefitInfo, 0); //KartId
		Write32(pKartRefitInfo, 0); //RefitCout
		Write16(pKartRefitInfo, 0); //MaxFlags
		Write16(pKartRefitInfo, 0); //WWeight
		Write16(pKartRefitInfo, 0); //SpeedWeight
		Write16(pKartRefitInfo, 0); //JetWeight
		Write16(pKartRefitInfo, 0); //SJetWeight
		Write16(pKartRefitInfo, 0); //AccuWeight
		Write32(pKartRefitInfo, 0); //ShapeRefitCount
		Write32(pKartRefitInfo, 0); //KartHeadRefitItemID
		Write32(pKartRefitInfo, 0); //KartTailRefitItemID
		Write32(pKartRefitInfo, 0); //KartFlankRefitItemID
		Write32(pKartRefitInfo, 0); //KartTireRefitItemID

		len = pKartRefitInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 804, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyLmtMatchOver(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //OverReason
	Write16(p, 0); //Rank
	Write8(p, 0); //AwardItemNum
	Write32(p, 0); //AwardItem[]
	Write32(p, 0); //AwardLuckMoney
	Write32(p, 0); //AwardLuckyMatchPoint
	Write16(p, 0); //WinNum

	len = p - buf;
	SendToClient(Client, 805, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyLmtRoll(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write8(p, 0); //Position
	Write32(p, 0); //ItemID

	len = p - buf;
	SendToClient(Client, 806, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyLmtAllRollAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Award[]
	for (size_t i = 0; i < n; i++)
	{ //LmtRollResult
		BYTE* pLmtRollResult = p;
		Write16(pLmtRollResult, 0); //len

		Write32(pLmtRollResult, 0); //Uin
		Write8(pLmtRollResult, 0); //Position

		len = pLmtRollResult - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 807, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyLmtBroadCast(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	{ //BroadInfo
		BYTE* pBroadInfo = p;
		Write16(pBroadInfo, 0); //len

		Write8(pBroadInfo, 0); //Type
		WriteString(pBroadInfo, 0); //Name[]
		WriteString(pBroadInfo, 0); //MatchType[]
		WriteString(pBroadInfo, 0); //Award[]

		len = pBroadInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 808, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyLmtGetElimInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //Round
	Write8(p, 0); //MatchNum
	for (size_t i = 0; i < n; i++)
	{ //MatchInfo
		BYTE* pMatchInfo = p;
		Write16(pMatchInfo, 0); //len

		Write32(pMatchInfo, 0); //PlayerUin[]
		Write8(pMatchInfo, 0); //MatchResult

		len = pMatchInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 809, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyLmtGetScoreInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	{ //ScoreInfo
		BYTE* pScoreInfo = p;
		Write16(pScoreInfo, 0); //len

		Write32(pScoreInfo, 0); //Score
		Write16(pScoreInfo, 0); //Rank
		Write16(pScoreInfo, 0); //TotalPlayerNum
		Write8(pScoreInfo, 0); //RoundNum
		for (size_t i = 0; i < n; i++)
		{ //RoundResult
			BYTE* pRoundResult = pScoreInfo;
			Write16(pRoundResult, 0); //len

			Write8(pRoundResult, 0); //Result
			Write32(pRoundResult, 0); //ScoreChg

			len = pRoundResult - pScoreInfo;
			Set16(pScoreInfo, (WORD)len);
			pScoreInfo += len;
		}
		{ //PlayerRecord
			BYTE* pPlayerRecord = pScoreInfo;
			Write16(pPlayerRecord, 0); //len

			Write32(pPlayerRecord, 0); //MatchNum
			Write8(pPlayerRecord, 0); //BestRank
			Write32(pPlayerRecord, 0); //ChamNum
			Write32(pPlayerRecord, 0); //WinNum

			len = pPlayerRecord - pScoreInfo;
			Set16(pScoreInfo, (WORD)len);
			pScoreInfo += len;
		}

		len = pScoreInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 810, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyLmtSummaryInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //PlayerNum
	for (size_t i = 0; i < n; i++)
	{ //SummaryInfo
		BYTE* pSummaryInfo = p;
		Write16(pSummaryInfo, 0); //len

		Write32(pSummaryInfo, 0); //Uin
		Write16(pSummaryInfo, 0); //Score
		Write8(pSummaryInfo, 0); //Rank
		Write8(pSummaryInfo, 0); //Status

		len = pSummaryInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 811, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyAddOverdueItem(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //OverdueItemNum
	for (size_t i = 0; i < n; i++)
	{ //OverdueItem
		BYTE* pOverdueItem = p;
		Write16(pOverdueItem, 0); //len

		Write32(pOverdueItem, 0); //ItemID
		Write32(pOverdueItem, 0); //OverdueTime
		Write32(pOverdueItem, 0); //OtherAttr

		len = pOverdueItem - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 931, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyDelOverdueItem(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //OverdueItemNum
	Write32(p, 0); //OverdueItemID[]

	len = p - buf;
	SendToClient(Client, 932, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestDelOverdueItem(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int DelOverdueItemID = Read32(p);

}

void ResponseDelOverdueItem(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //DelOverdueItemID

	len = p - buf;
	SendToClient(Client, 933, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestInlaySkillStone(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	U Uin = ReadU(p);
	U Time = ReadU(p);
	int KartID = Read32(p);
	int StoneGrooveID = Read32(p);
	int SkillStoneID = Read32(p);

}

void ResponseInlaySkillStone(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteU(p, 0); //ResultID
	WriteU(p, 0); //ReasonLen
	Write32(p, 0); //KartID
	Write32(p, 0); //StoneGrooveID
	Write32(p, 0); //SkillStoneID

	len = p - buf;
	SendToClient(Client, 901, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestAddStoneGroove(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	U Uin = ReadU(p);
	U Time = ReadU(p);
	int KartID = Read32(p);
	int CarveKnifeID = Read32(p);
	int StoneGrooveType = Read32(p);

}

void ResponseAddStoneGroove(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteU(p, 0); //ResultID
	WriteU(p, 0); //ReasonLen
	Write32(p, 0); //KartID
	Write32(p, 0); //CarveKnifeID
	Write32(p, 0); //StoneGrooveType

	len = p - buf;
	SendToClient(Client, 903, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestCompositeSkillStone(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	U Uin = ReadU(p);
	U Time = ReadU(p);
	int SkillStoneID = Read32(p);
	int LuckyStoneID = Read32(p);
	int BlessStoneID = Read32(p);

}

void ResponseCompositeSkillStone(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteU(p, 0); //ResultID
	WriteU(p, 0); //ReasonLen
	Write32(p, 0); //SkillStoneID
	Write32(p, 0); //LuckyStoneID
	Write32(p, 0); //BlessStoneID
	Write32(p, 0); //DecSkillStoneNum
	Write32(p, 0); //GenStillStoneID
	Write32(p, 0); //ExperienceCompensation

	len = p - buf;
	SendToClient(Client, 905, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyUpdateKartSkillStoneInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteU(p, 0); //Uin
	{ //KartStoneInfo
		BYTE* pKartStoneInfo = p;
		Write16(pKartStoneInfo, 0); //len

		Write32(pKartStoneInfo, 0); //KartID
		Write32(pKartStoneInfo, 0); //StoneGrooveNum
		for (size_t i = 0; i < n; i++)
		{ //StoneGrooveInfo
			BYTE* pStoneGrooveInfo = pKartStoneInfo;
			Write16(pStoneGrooveInfo, 0); //len

			Write32(pStoneGrooveInfo, 0); //StoneUseOccaType
			Write32(pStoneGrooveInfo, 0); //SkillStoneID

			len = pStoneGrooveInfo - pKartStoneInfo;
			Set16(pKartStoneInfo, (WORD)len);
			pKartStoneInfo += len;
		}

		len = pKartStoneInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 906, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyOtherKartStoneInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //OtherStoneKartNum
	for (size_t i = 0; i < n; i++)
	{ //KartStoneGrooveInfo
		BYTE* pKartStoneGrooveInfo = p;
		Write16(pKartStoneGrooveInfo, 0); //len

		WriteU(pKartStoneGrooveInfo, 0); //Uin
		{ //KartStoneGrooveInfo
			BYTE* pKartStoneGrooveInfo = pKartStoneGrooveInfo;
			Write16(pKartStoneGrooveInfo, 0); //len

			Write32(pKartStoneGrooveInfo, 0); //KartID
			Write32(pKartStoneGrooveInfo, 0); //StoneGrooveNum
			for (size_t i = 0; i < n; i++)
			{ //StoneGrooveInfo
				BYTE* pStoneGrooveInfo = pKartStoneGrooveInfo;
				Write16(pStoneGrooveInfo, 0); //len

				Write32(pStoneGrooveInfo, 0); //StoneUseOccaType
				Write32(pStoneGrooveInfo, 0); //SkillStoneID

				len = pStoneGrooveInfo - pKartStoneGrooveInfo;
				Set16(pKartStoneGrooveInfo, (WORD)len);
				pKartStoneGrooveInfo += len;
			}

			len = pKartStoneGrooveInfo - pKartStoneGrooveInfo;
			Set16(pKartStoneGrooveInfo, (WORD)len);
			pKartStoneGrooveInfo += len;
		}

		len = pKartStoneGrooveInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 907, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyAddPropBySkillStone(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //StoneSkillType
	Write16(p, 0); //PropID
	Write32(p, 0); //PropIndex

	len = p - buf;
	SendToClient(Client, 908, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestReportSkillStoneTakeEffect(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	U Uin = ReadU(p);
	U Time = ReadU(p);
	int StoneID = Read32(p);

}

void NotifyOtherSkillStoneTakeEffect(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteU(p, 0); //Uin
	Write32(p, 0); //StoneID

	len = p - buf;
	SendToClient(Client, 910, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestReportSkillStoneTakeEffectForStatistic(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	U Uin = ReadU(p);
	U Time = ReadU(p);
	int SkillStoneID = Read32(p);
	int StoneSkillType = Read32(p);
	Un needTransfer = ReadUn(p);

}

void RequestRemoveSkillStone(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	U Uin = ReadU(p);
	U Time = ReadU(p);
	int KartID = Read32(p);
	int StoneGrooveID = Read32(p);
	int RemovalToolID = Read32(p);

}

void ResponseRemoveSkillStone(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteU(p, 0); //ResultID
	Write32(p, 0); //KartID
	Write32(p, 0); //StoneGrooveID
	Write32(p, 0); //RemovalToolID
	Write32(p, 0); //ObtainSkillStoneID

	len = p - buf;
	SendToClient(Client, 912, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestAskGuildBonus(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int TaskID = Read32(p);

}

void ResponseAskGuildBonus(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 941, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyLeaderAskGuildBonus(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //ReqUin
	WriteString(p, 0); //ReqName[]

	len = p - buf;
	SendToClient(Client, 942, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestReplyAskGuildBonus(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	char ReplyStat = Read8(p);
	UINT AskUin = Read32(p);

}

void RequestReportCheckData(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	{ //CheckData
		BYTE* pCheckData = p;
		len = Read16(pCheckData);

		int CheckPointIdx = Read32(pCheckData);
		UINT ClientCurrTime = Read32(pCheckData);
		int CurrSpeed = Read32(pCheckData);
		{ //ClientReportSelfErr
			BYTE* pClientReportSelfErr = pCheckData;
			len = Read16(pClientReportSelfErr);

			int RemoveFailedCount = Read32(pClientReportSelfErr);
			int No2CheckErrCount = Read32(pClientReportSelfErr);
			int FrictionCheckErrCount = Read32(pClientReportSelfErr);
			int GPTargetCheckErrCount = Read32(pClientReportSelfErr);
			int PowerCheckErrCount = Read32(pClientReportSelfErr);
			int StoneCheckErrCount = Read32(pClientReportSelfErr);
			int HashCheckErrCount = Read32(pClientReportSelfErr);
			int TencentCarCheckErrCount = Read32(pClientReportSelfErr);
			int UseIlleagleNo2Count = Read32(pClientReportSelfErr);
			int ListAffectGPsCheckErrCount = Read32(pClientReportSelfErr);
			int GPTargetInvalidErrCount = Read32(pClientReportSelfErr);

			pCheckData += len;
		}
		{ //ClientReportSeflTag
			BYTE* pClientReportSeflTag = pCheckData;
			len = Read16(pClientReportSeflTag);

			int PowerCheckTag = Read32(pClientReportSeflTag);
			int No2CheckTag = Read32(pClientReportSeflTag);
			int TencentCarCheckTag = Read32(pClientReportSeflTag);
			int GPTargetInvalidCheckTag = Read32(pClientReportSeflTag);

			pCheckData += len;
		}

		p += len;
	}

}

void RequestSampleCheckPointData(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	UCHAR DataNum = Read8(p);
	for (size_t i = 0; i < n; i++)
	{ //Data
		BYTE* pData = p;
		len = Read16(pData);

		short LastCheckPointIdx = Read16(pData);
		short CurCheckPointIdx = Read16(pData);
		UCHAR StateDataNum = Read8(pData);
		UINT[] StateData[] = Read32(pData);
		UCHAR StateChangeDataNum = Read8(pData);
		UINT[] StateChangeData[] = Read32(pData);

		p += len;
	}

}

void RequestFizzInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseFizzInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	{ //FizzBaseInfo
		BYTE* pFizzBaseInfo = p;
		Write16(pFizzBaseInfo, 0); //len

		Write16(pFizzBaseInfo, 0); //FizzPointDaily
		Write16(pFizzBaseInfo, 0); //FizzPointWeekly
		Write32(pFizzBaseInfo, 0); //FizzPointTotal
		Write8(pFizzBaseInfo, 0); //FizzEmblem

		len = pFizzBaseInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //FizzTaskNum
	for (size_t i = 0; i < n; i++)
	{ //FizzTaskInfo
		BYTE* pFizzTaskInfo = p;
		Write16(pFizzTaskInfo, 0); //len

		Write8(pFizzTaskInfo, 0); //TaskID
		Write8(pFizzTaskInfo, 0); //Status
		Write32(pFizzTaskInfo, 0); //TotalProgress
		Write32(pFizzTaskInfo, 0); //CurrentProgress
		Write16(pFizzTaskInfo, 0); //FizzPoint
		Write8(pFizzTaskInfo, 0); //DisplayPri
		Write8(pFizzTaskInfo, 0); //SpecialFlag

		len = pFizzTaskInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //FizzLotteryNum
	for (size_t i = 0; i < n; i++)
	{ //FizzLotteryInfo
		BYTE* pFizzLotteryInfo = p;
		Write16(pFizzLotteryInfo, 0); //len

		Write8(pFizzLotteryInfo, 0); //LotteryType
		Write8(pFizzLotteryInfo, 0); //Status
		Write16(pFizzLotteryInfo, 0); //FizzPoint
		Write8(pFizzLotteryInfo, 0); //ControlledItemNum
		Write32(pFizzLotteryInfo, 0); //ControlledItem[]

		len = pFizzLotteryInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 944, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestFizzLottery(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	bool LotteryType = Read8(p);

}

void ResponseFizzLottery(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	{ //AwardMoneyExp
		BYTE* pAwardMoneyExp = p;
		Write16(pAwardMoneyExp, 0); //len

		Write32(pAwardMoneyExp, 0); //Money
		Write32(pAwardMoneyExp, 0); //SuperMoney
		Write32(pAwardMoneyExp, 0); //Exp
		Write32(pAwardMoneyExp, 0); //Charm
		Write32(pAwardMoneyExp, 0); //DanceExp
		Write32(pAwardMoneyExp, 0); //Coupons
		Write32(pAwardMoneyExp, 0); //Admiration
		Write32(pAwardMoneyExp, 0); //LuckMoney
		Write32(pAwardMoneyExp, 0); //TeamWorkExp
		Write32(pAwardMoneyExp, 0); //AchievePoint
		Write32(pAwardMoneyExp, 0); //ConsumeScore
		Write32(pAwardMoneyExp, 0); //HistoryConsumeScore
		Write32(pAwardMoneyExp, 0); //LadderMatchAchievePoint

		len = pAwardMoneyExp - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //AwardItemNum
	for (size_t i = 0; i < n; i++)
	{ //AwardItemInfo
		BYTE* pAwardItemInfo = p;
		Write16(pAwardItemInfo, 0); //len

		Write32(pAwardItemInfo, 0); //ItemID
		Write32(pAwardItemInfo, 0); //ItemNum
		Write32(pAwardItemInfo, 0); //AvailPeriod
		Write8(pAwardItemInfo, 0); //Status
		WriteUn(pAwardItemInfo, 0); //ObtainTime
		Write32(pAwardItemInfo, 0); //OtherAttribute

		len = pAwardItemInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 945, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyFizzInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	{ //FizzBaseInfo
		BYTE* pFizzBaseInfo = p;
		Write16(pFizzBaseInfo, 0); //len

		Write16(pFizzBaseInfo, 0); //FizzPointDaily
		Write16(pFizzBaseInfo, 0); //FizzPointWeekly
		Write32(pFizzBaseInfo, 0); //FizzPointTotal
		Write8(pFizzBaseInfo, 0); //FizzEmblem

		len = pFizzBaseInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //FizzTaskNum
	for (size_t i = 0; i < n; i++)
	{ //FizzTaskInfo
		BYTE* pFizzTaskInfo = p;
		Write16(pFizzTaskInfo, 0); //len

		Write8(pFizzTaskInfo, 0); //TaskID
		Write8(pFizzTaskInfo, 0); //Status
		Write32(pFizzTaskInfo, 0); //TotalProgress
		Write32(pFizzTaskInfo, 0); //CurrentProgress
		Write16(pFizzTaskInfo, 0); //FizzPoint
		Write8(pFizzTaskInfo, 0); //DisplayPri
		Write8(pFizzTaskInfo, 0); //SpecialFlag

		len = pFizzTaskInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //FizzLotteryNum
	for (size_t i = 0; i < n; i++)
	{ //FizzLotteryInfo
		BYTE* pFizzLotteryInfo = p;
		Write16(pFizzLotteryInfo, 0); //len

		Write8(pFizzLotteryInfo, 0); //LotteryType
		Write8(pFizzLotteryInfo, 0); //Status
		Write16(pFizzLotteryInfo, 0); //FizzPoint
		Write8(pFizzLotteryInfo, 0); //ControlledItemNum
		Write32(pFizzLotteryInfo, 0); //ControlledItem[]

		len = pFizzLotteryInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 946, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyDeleteFizzTask(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //DelFizzTaskNum

	len = p - buf;
	SendToClient(Client, 947, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void AckMultiSynchronize(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT SvrTime = Read32(p);

}

void NotifyMultiSynchronize(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //SvrTime

	len = p - buf;
	SendToClient(Client, 1503, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetExchangeDesc(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	bool ExchangeNum = Read8(p);
	int[] ExchangeIDs[] = Read32(p);

}

void ResponseGetExchangeDesc(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //ExchangeNum
	for (size_t i = 0; i < n; i++)
	{ //Desc
		BYTE* pDesc = p;
		Write16(pDesc, 0); //len

		Write32(pDesc, 0); //ExchangeID
		Write16(pDesc, 0); //DescLen

		len = pDesc - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 936, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestReportFeedBack(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	{ //FeedBack
		BYTE* pFeedBack = p;
		len = Read16(pFeedBack);

		UINT TotalHitPoint = Read32(pFeedBack);
		UINT ComboHitPoint = Read32(pFeedBack);
		bool AssessNum = Read8(pFeedBack);
		for (size_t i = 0; i < n; i++)
		{ //Assess
			BYTE* pAssess = pFeedBack;
			len = Read16(pAssess);

			bool Type = Read8(pAssess);
			USHORT Count = Read16(pAssess);

			pFeedBack += len;
		}

		p += len;
	}

}

void NotifyFeedBackData(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	{ //FeedBack
		BYTE* pFeedBack = p;
		Write16(pFeedBack, 0); //len

		Write32(pFeedBack, 0); //Rank
		Write8(pFeedBack, 0); //Level

		len = pFeedBack - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 935, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetMailHeaderList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	bool Type = Read8(p);

}

void ResponseGetMailHeaderList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //Result
	Write8(p, 0); //Type
	Write8(p, 0); //HeaderNum
	for (size_t i = 0; i < n; i++)
	{ //Headers
		BYTE* pHeaders = p;
		Write16(pHeaders, 0); //len

		{ //MailID
			BYTE* pMailID = pHeaders;
			Write16(pMailID, 0); //len

			Write8(pMailID, 0); //Data[]

			len = pMailID - pHeaders;
			Set16(pHeaders, (WORD)len);
			pHeaders += len;
		}
		WriteString(pHeaders, 0); //SenderName[]
		WriteString(pHeaders, 0); //ReceiverName[]
		Write32(pHeaders, 0); //SenderUin
		Write32(pHeaders, 0); //ReceiverUin
		WriteString(pHeaders, 0); //Title[]
		Write32(pHeaders, 0); //TimeStamp
		Write8(pHeaders, 0); //Type
		Write8(pHeaders, 0); //Flag
		Write8(pHeaders, 0); //MatchFlag

		len = pHeaders - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 406, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetMailBody(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	{ //MailID
		BYTE* pMailID = p;
		len = Read16(pMailID);

		char[] Data[] = Read8(pMailID);

		p += len;
	}

}

void ResponseGetMailBody(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //Result
	{ //MailID
		BYTE* pMailID = p;
		Write16(pMailID, 0); //len

		Write8(pMailID, 0); //Data[]

		len = pMailID - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HaveMailBody
	for (size_t i = 0; i < n; i++)
	{ //MailBody
		BYTE* pMailBody = p;
		Write16(pMailBody, 0); //len

		{ //MailID
			BYTE* pMailID = pMailBody;
			Write16(pMailID, 0); //len

			Write8(pMailID, 0); //Data[]

			len = pMailID - pMailBody;
			Set16(pMailBody, (WORD)len);
			pMailBody += len;
		}
		{ //Content
			BYTE* pContent = pMailBody;
			Write16(pContent, 0); //len

			{ //Attach
				BYTE* pAttach = pContent;
				Write16(pAttach, 0); //len

				Write8(pAttach, 0); //Type
				Write16(pAttach, 0); //Len

				len = pAttach - pContent;
				Set16(pContent, (WORD)len);
				pContent += len;
			}
			{ //Text
				BYTE* pText = pContent;
				Write16(pText, 0); //len

				Write16(pText, 0); //Len

				len = pText - pContent;
				Set16(pContent, (WORD)len);
				pContent += len;
			}

			len = pContent - pMailBody;
			Set16(pMailBody, (WORD)len);
			pMailBody += len;
		}

		len = pMailBody - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 407, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetMailAttach(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	{ //MailID
		BYTE* pMailID = p;
		len = Read16(pMailID);

		char[] Data[] = Read8(pMailID);

		p += len;
	}

}

void ResponseGetMailAttach(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //Result
	{ //MailID
		BYTE* pMailID = p;
		Write16(pMailID, 0); //len

		Write8(pMailID, 0); //Data[]

		len = pMailID - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 408, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestSendMail(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	bool Type = Read8(p);
	UINT ReceiverUin = Read32(p);
	char[] ReceiverName[] = ReadString(p);
	char[] Title[] = ReadString(p);
	USHORT TextLen = Read16(p);
	bool IsInvalid = Read8(p);

}

void ResponseSendMail(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //Result
	Write8(p, 0); //IsReturnHeader
	for (size_t i = 0; i < n; i++)
	{ //Header
		BYTE* pHeader = p;
		Write16(pHeader, 0); //len

		{ //MailID
			BYTE* pMailID = pHeader;
			Write16(pMailID, 0); //len

			Write8(pMailID, 0); //Data[]

			len = pMailID - pHeader;
			Set16(pHeader, (WORD)len);
			pHeader += len;
		}
		WriteString(pHeader, 0); //SenderName[]
		WriteString(pHeader, 0); //ReceiverName[]
		Write32(pHeader, 0); //SenderUin
		Write32(pHeader, 0); //ReceiverUin
		WriteString(pHeader, 0); //Title[]
		Write32(pHeader, 0); //TimeStamp
		Write8(pHeader, 0); //Type
		Write8(pHeader, 0); //Flag
		Write8(pHeader, 0); //MatchFlag

		len = pHeader - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //CoolTime

	len = p - buf;
	SendToClient(Client, 409, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestModifyMailFlag(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	{ //MailID
		BYTE* pMailID = p;
		len = Read16(pMailID);

		char[] Data[] = Read8(pMailID);

		p += len;
	}
	bool NewFlag = Read8(p);

}

void ResponseModifyMailFlag(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //Result
	{ //MailID
		BYTE* pMailID = p;
		Write16(pMailID, 0); //len

		Write8(pMailID, 0); //Data[]

		len = pMailID - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //NewFlag

	len = p - buf;
	SendToClient(Client, 410, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestDeleteMail(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	{ //MailID
		BYTE* pMailID = p;
		len = Read16(pMailID);

		char[] Data[] = Read8(pMailID);

		p += len;
	}

}

void ResponseDeleteMail(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //Result
	{ //MailID
		BYTE* pMailID = p;
		Write16(pMailID, 0); //len

		Write8(pMailID, 0); //Data[]

		len = pMailID - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 411, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyNewMailHeader(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //HaveMailHeader
	for (size_t i = 0; i < n; i++)
	{ //MailHeader
		BYTE* pMailHeader = p;
		Write16(pMailHeader, 0); //len

		{ //MailID
			BYTE* pMailID = pMailHeader;
			Write16(pMailID, 0); //len

			Write8(pMailID, 0); //Data[]

			len = pMailID - pMailHeader;
			Set16(pMailHeader, (WORD)len);
			pMailHeader += len;
		}
		WriteString(pMailHeader, 0); //SenderName[]
		WriteString(pMailHeader, 0); //ReceiverName[]
		Write32(pMailHeader, 0); //SenderUin
		Write32(pMailHeader, 0); //ReceiverUin
		WriteString(pMailHeader, 0); //Title[]
		Write32(pMailHeader, 0); //TimeStamp
		Write8(pMailHeader, 0); //Type
		Write8(pMailHeader, 0); //Flag
		Write8(pMailHeader, 0); //MatchFlag

		len = pMailHeader - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //IsMailBoxFull
	Write8(p, 0); //HaveNewMail
	Write8(p, 0); //HaveNewAnonymMail
	Write8(p, 0); //IsRecvAnonymMailFull
	Write8(p, 0); //IsSentAnonymMailFull
	Write8(p, 0); //HasDialog
	for (size_t i = 0; i < n; i++)
	{ //Dialog
		BYTE* pDialog = p;
		Write16(pDialog, 0); //len

		Write8(pDialog, 0); //PlayerIdx
		Write16(pDialog, 0); //Len
		Write32(pDialog, 0); //Time

		len = pDialog - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 412, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyMailSomeFlag(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //SomeFlag
	Write16(p, 0); //CanSendAnonymMailNum
	Write16(p, 0); //CanRecvAnonymMailNum
	Write32(p, 0); //EquipedIconID
	Write16(p, 0); //SpecialFlag

	len = p - buf;
	SendToClient(Client, 413, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestChangeMailSomeFlag(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT SomeFlag = Read16(p);
	USHORT SpecialFlag = Read16(p);

}

void ResponseChangeMailSomeFlag(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //Result
	Write16(p, 0); //SomeFlag
	Write16(p, 0); //SpecialFlag

	len = p - buf;
	SendToClient(Client, 414, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetAnonymMail(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetAnonymMail(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //HasHeader
	for (size_t i = 0; i < n; i++)
	{ //MailHeader
		BYTE* pMailHeader = p;
		Write16(pMailHeader, 0); //len

		{ //MailID
			BYTE* pMailID = pMailHeader;
			Write16(pMailID, 0); //len

			Write8(pMailID, 0); //Data[]

			len = pMailID - pMailHeader;
			Set16(pMailHeader, (WORD)len);
			pMailHeader += len;
		}
		WriteString(pMailHeader, 0); //SenderName[]
		WriteString(pMailHeader, 0); //ReceiverName[]
		Write32(pMailHeader, 0); //SenderUin
		Write32(pMailHeader, 0); //ReceiverUin
		WriteString(pMailHeader, 0); //Title[]
		Write32(pMailHeader, 0); //TimeStamp
		Write8(pMailHeader, 0); //Type
		Write8(pMailHeader, 0); //Flag
		Write8(pMailHeader, 0); //MatchFlag

		len = pMailHeader - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //AwardItemNum
	for (size_t i = 0; i < n; i++)
	{ //AwardItem
		BYTE* pAwardItem = p;
		Write16(pAwardItem, 0); //len

		Write32(pAwardItem, 0); //ItemID
		Write32(pAwardItem, 0); //ItemNum
		Write32(pAwardItem, 0); //AvailPeriod
		Write8(pAwardItem, 0); //Status
		WriteUn(pAwardItem, 0); //ObtainTime
		Write32(pAwardItem, 0); //OtherAttribute

		len = pAwardItem - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 426, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestReplyAnonymMail(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	{ //MailID
		BYTE* pMailID = p;
		len = Read16(pMailID);

		char[] Data[] = Read8(pMailID);

		p += len;
	}
	{ //MailDialog
		BYTE* pMailDialog = p;
		len = Read16(pMailDialog);

		bool PlayerIdx = Read8(pMailDialog);
		USHORT Len = Read16(pMailDialog);
		UINT Time = Read32(pMailDialog);

		p += len;
	}

}

void ResponseReplyAnonymMail(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //HasHeader
	for (size_t i = 0; i < n; i++)
	{ //MailHeader
		BYTE* pMailHeader = p;
		Write16(pMailHeader, 0); //len

		{ //MailID
			BYTE* pMailID = pMailHeader;
			Write16(pMailID, 0); //len

			Write8(pMailID, 0); //Data[]

			len = pMailID - pMailHeader;
			Set16(pMailHeader, (WORD)len);
			pMailHeader += len;
		}
		WriteString(pMailHeader, 0); //SenderName[]
		WriteString(pMailHeader, 0); //ReceiverName[]
		Write32(pMailHeader, 0); //SenderUin
		Write32(pMailHeader, 0); //ReceiverUin
		WriteString(pMailHeader, 0); //Title[]
		Write32(pMailHeader, 0); //TimeStamp
		Write8(pMailHeader, 0); //Type
		Write8(pMailHeader, 0); //Flag
		Write8(pMailHeader, 0); //MatchFlag

		len = pMailHeader - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasDialog
	for (size_t i = 0; i < n; i++)
	{ //MailDialog
		BYTE* pMailDialog = p;
		Write16(pMailDialog, 0); //len

		Write8(pMailDialog, 0); //PlayerIdx
		Write16(pMailDialog, 0); //Len
		Write32(pMailDialog, 0); //Time

		len = pMailDialog - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 427, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestRecycleAnonymMail(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	{ //MailID
		BYTE* pMailID = p;
		len = Read16(pMailID);

		char[] Data[] = Read8(pMailID);

		p += len;
	}

}

void ResponseRecycleAnonymMail(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	{ //MailID
		BYTE* pMailID = p;
		Write16(pMailID, 0); //len

		Write8(pMailID, 0); //Data[]

		len = pMailID - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 428, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGuildWelfareInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT GuildID = Read32(p);

}

void ResponseGuildWelfareInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //GuildID
	{ //GuildWelfare
		BYTE* pGuildWelfare = p;
		Write16(pGuildWelfare, 0); //len

		Write16(pGuildWelfare, 0); //ExpAdd
		Write16(pGuildWelfare, 0); //LuckMoneyAdd
		Write16(pGuildWelfare, 0); //WagesAdd
		Write16(pGuildWelfare, 0); //MinMemHaveExpAdd
		Write16(pGuildWelfare, 0); //MinMemHaveLuckMoneyAdd
		Write16(pGuildWelfare, 0); //MinMemHaveWagesAdd
		Write32(pGuildWelfare, 0); //GetGuildWardMinProsperity
		Write8(pGuildWelfare, 0); //IsJoinGuildToday
		{ //AwardMoneyExp
			BYTE* pAwardMoneyExp = pGuildWelfare;
			Write16(pAwardMoneyExp, 0); //len

			Write32(pAwardMoneyExp, 0); //Money
			Write32(pAwardMoneyExp, 0); //SuperMoney
			Write32(pAwardMoneyExp, 0); //Exp
			Write32(pAwardMoneyExp, 0); //Charm
			Write32(pAwardMoneyExp, 0); //DanceExp
			Write32(pAwardMoneyExp, 0); //Coupons
			Write32(pAwardMoneyExp, 0); //Admiration
			Write32(pAwardMoneyExp, 0); //LuckMoney
			Write32(pAwardMoneyExp, 0); //TeamWorkExp
			Write32(pAwardMoneyExp, 0); //AchievePoint
			Write32(pAwardMoneyExp, 0); //ConsumeScore
			Write32(pAwardMoneyExp, 0); //HistoryConsumeScore
			Write32(pAwardMoneyExp, 0); //LadderMatchAchievePoint

			len = pAwardMoneyExp - pGuildWelfare;
			Set16(pGuildWelfare, (WORD)len);
			pGuildWelfare += len;
		}
		Write8(pGuildWelfare, 0); //AwardItemNum
		for (size_t i = 0; i < n; i++)
		{ //AwardItemInfo
			BYTE* pAwardItemInfo = pGuildWelfare;
			Write16(pAwardItemInfo, 0); //len

			Write32(pAwardItemInfo, 0); //ItemID
			Write32(pAwardItemInfo, 0); //ItemNum
			Write32(pAwardItemInfo, 0); //AvailPeriod
			Write8(pAwardItemInfo, 0); //Status
			WriteUn(pAwardItemInfo, 0); //ObtainTime
			Write32(pAwardItemInfo, 0); //OtherAttribute

			len = pAwardItemInfo - pGuildWelfare;
			Set16(pGuildWelfare, (WORD)len);
			pGuildWelfare += len;
		}
		Write32(pGuildWelfare, 0); //NextAwardProsperity
		{ //NextAwardMoneyExp
			BYTE* pNextAwardMoneyExp = pGuildWelfare;
			Write16(pNextAwardMoneyExp, 0); //len

			Write32(pNextAwardMoneyExp, 0); //Money
			Write32(pNextAwardMoneyExp, 0); //SuperMoney
			Write32(pNextAwardMoneyExp, 0); //Exp
			Write32(pNextAwardMoneyExp, 0); //Charm
			Write32(pNextAwardMoneyExp, 0); //DanceExp
			Write32(pNextAwardMoneyExp, 0); //Coupons
			Write32(pNextAwardMoneyExp, 0); //Admiration
			Write32(pNextAwardMoneyExp, 0); //LuckMoney
			Write32(pNextAwardMoneyExp, 0); //TeamWorkExp
			Write32(pNextAwardMoneyExp, 0); //AchievePoint
			Write32(pNextAwardMoneyExp, 0); //ConsumeScore
			Write32(pNextAwardMoneyExp, 0); //HistoryConsumeScore
			Write32(pNextAwardMoneyExp, 0); //LadderMatchAchievePoint

			len = pNextAwardMoneyExp - pGuildWelfare;
			Set16(pGuildWelfare, (WORD)len);
			pGuildWelfare += len;
		}
		Write8(pGuildWelfare, 0); //NextAwardItemNum
		for (size_t i = 0; i < n; i++)
		{ //NextAwardItemInfo
			BYTE* pNextAwardItemInfo = pGuildWelfare;
			Write16(pNextAwardItemInfo, 0); //len

			Write32(pNextAwardItemInfo, 0); //ItemID
			Write32(pNextAwardItemInfo, 0); //ItemNum
			Write32(pNextAwardItemInfo, 0); //AvailPeriod
			Write8(pNextAwardItemInfo, 0); //Status
			WriteUn(pNextAwardItemInfo, 0); //ObtainTime
			Write32(pNextAwardItemInfo, 0); //OtherAttribute

			len = pNextAwardItemInfo - pGuildWelfare;
			Set16(pGuildWelfare, (WORD)len);
			pGuildWelfare += len;
		}

		len = pGuildWelfare - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 15022, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGuildListOtherInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT GuildCount = Read32(p);
	[] GuildID[] = Read(p);

}

void ResponseGuildListOtherInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //GuildCount
	for (size_t i = 0; i < n; i++)
	{ //GuildListOtherInfo
		BYTE* pGuildListOtherInfo = p;
		Write16(pGuildListOtherInfo, 0); //len

		Write32(pGuildListOtherInfo, 0); //GuidID
		Write32(pGuildListOtherInfo, 0); //Prosperity
		Write16(pGuildListOtherInfo, 0); //Level
		Write16(pGuildListOtherInfo, 0); //MaxMember
		Write16(pGuildListOtherInfo, 0); //Attribute
		{ //GuildEnlistCond
			BYTE* pGuildEnlistCond = pGuildListOtherInfo;
			Write16(pGuildEnlistCond, 0); //len

			Write32(pGuildEnlistCond, 0); //ProsperityCondition
			Write32(pGuildEnlistCond, 0); //JoinTotalCondition
			Write32(pGuildEnlistCond, 0); //HonorCondition
			Write32(pGuildEnlistCond, 0); //CharmCondition
			Write32(pGuildEnlistCond, 0); //DanceExpCondition
			Write32(pGuildEnlistCond, 0); //SkillPointCondition
			Write32(pGuildEnlistCond, 0); //ExpLevelCondition

			len = pGuildEnlistCond - pGuildListOtherInfo;
			Set16(pGuildListOtherInfo, (WORD)len);
			pGuildListOtherInfo += len;
		}
		Write8(pGuildListOtherInfo, 0); //SubType

		len = pGuildListOtherInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 15021, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestDayProsperityAward(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT GuildID = Read32(p);

}

void ResponseDayProsperityAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //GuildID
	{ //AwardMoneyExp
		BYTE* pAwardMoneyExp = p;
		Write16(pAwardMoneyExp, 0); //len

		Write32(pAwardMoneyExp, 0); //Money
		Write32(pAwardMoneyExp, 0); //SuperMoney
		Write32(pAwardMoneyExp, 0); //Exp
		Write32(pAwardMoneyExp, 0); //Charm
		Write32(pAwardMoneyExp, 0); //DanceExp
		Write32(pAwardMoneyExp, 0); //Coupons
		Write32(pAwardMoneyExp, 0); //Admiration
		Write32(pAwardMoneyExp, 0); //LuckMoney
		Write32(pAwardMoneyExp, 0); //TeamWorkExp
		Write32(pAwardMoneyExp, 0); //AchievePoint
		Write32(pAwardMoneyExp, 0); //ConsumeScore
		Write32(pAwardMoneyExp, 0); //HistoryConsumeScore
		Write32(pAwardMoneyExp, 0); //LadderMatchAchievePoint

		len = pAwardMoneyExp - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //AwardItemNum
	for (size_t i = 0; i < n; i++)
	{ //AwardItemInfo
		BYTE* pAwardItemInfo = p;
		Write16(pAwardItemInfo, 0); //len

		Write32(pAwardItemInfo, 0); //ItemID
		Write32(pAwardItemInfo, 0); //ItemNum
		Write32(pAwardItemInfo, 0); //AvailPeriod
		Write8(pAwardItemInfo, 0); //Status
		WriteUn(pAwardItemInfo, 0); //ObtainTime
		Write32(pAwardItemInfo, 0); //OtherAttribute

		len = pAwardItemInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 15023, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyLastProsperityAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //GuildID
	{ //AwardMoneyExp
		BYTE* pAwardMoneyExp = p;
		Write16(pAwardMoneyExp, 0); //len

		Write32(pAwardMoneyExp, 0); //Money
		Write32(pAwardMoneyExp, 0); //SuperMoney
		Write32(pAwardMoneyExp, 0); //Exp
		Write32(pAwardMoneyExp, 0); //Charm
		Write32(pAwardMoneyExp, 0); //DanceExp
		Write32(pAwardMoneyExp, 0); //Coupons
		Write32(pAwardMoneyExp, 0); //Admiration
		Write32(pAwardMoneyExp, 0); //LuckMoney
		Write32(pAwardMoneyExp, 0); //TeamWorkExp
		Write32(pAwardMoneyExp, 0); //AchievePoint
		Write32(pAwardMoneyExp, 0); //ConsumeScore
		Write32(pAwardMoneyExp, 0); //HistoryConsumeScore
		Write32(pAwardMoneyExp, 0); //LadderMatchAchievePoint

		len = pAwardMoneyExp - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //AwardItemNum
	for (size_t i = 0; i < n; i++)
	{ //AwardItemInfo
		BYTE* pAwardItemInfo = p;
		Write16(pAwardItemInfo, 0); //len

		Write32(pAwardItemInfo, 0); //ItemID
		Write32(pAwardItemInfo, 0); //ItemNum
		Write32(pAwardItemInfo, 0); //AvailPeriod
		Write8(pAwardItemInfo, 0); //Status
		WriteUn(pAwardItemInfo, 0); //ObtainTime
		Write32(pAwardItemInfo, 0); //OtherAttribute

		len = pAwardItemInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 15224, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestEltQQOnlineFriends(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);

}

void ResponseEltQQOnlineFriends(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen
	Write16(p, 0); //EnlistQQFriendNum
	for (size_t i = 0; i < n; i++)
	{ //EnlistQQFriends
		BYTE* pEnlistQQFriends = p;
		Write16(pEnlistQQFriends, 0); //len

		Write8(pEnlistQQFriends, 0); //EnlistFlag
		Write8(pEnlistQQFriends, 0); //IsEnlistToday
		{ //QQBaseInfo
			BYTE* pQQBaseInfo = pEnlistQQFriends;
			Write16(pQQBaseInfo, 0); //len

			WriteUn(pQQBaseInfo, 0); //Uin
			Write8(pQQBaseInfo, 0); //QQNickNameLen
			Write8(pQQBaseInfo, 0); //QQGender
			Write8(pQQBaseInfo, 0); //IsQQOnline
			Write8(pQQBaseInfo, 0); //GroupID

			len = pQQBaseInfo - pEnlistQQFriends;
			Set16(pEnlistQQFriends, (WORD)len);
			pEnlistQQFriends += len;
		}
		Write32(pEnlistQQFriends, 0); //GameLevel
		WriteUn(pEnlistQQFriends, 0); //UnLoginTime
		Write8(pEnlistQQFriends, 0); //IsOnline

		len = pEnlistQQFriends - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //QQGroupNum
	for (size_t i = 0; i < n; i++)
	{ //QQGroup
		BYTE* pQQGroup = p;
		Write16(pQQGroup, 0); //len

		Write8(pQQGroup, 0); //GroupID
		WriteString(pQQGroup, 0); //GroupName[]

		len = pQQGroup - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 10900, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyClientEnlistGuid(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //Time

	len = p - buf;
	SendToClient(Client, 10913, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestEltEnlist(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	{ //EnlistFriend
		BYTE* pEnlistFriend = p;
		len = Read16(pEnlistFriend);

		Un Uin = ReadUn(pEnlistFriend);
		char QQNickNameLen = Read8(pEnlistFriend);
		char QQGender = Read8(pEnlistFriend);
		char IsQQOnline = Read8(pEnlistFriend);
		char GroupID = Read8(pEnlistFriend);

		p += len;
	}
	char EnlistFlag = Read8(p);

}

void ResponseEltEnlist(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen
	WriteUn(p, 0); //EnlistUin

	len = p - buf;
	SendToClient(Client, 10901, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestEltEnlistAward(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);

}

void ResponseEltEnlistAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //AwardNum
	for (size_t i = 0; i < n; i++)
	{ //EnlistQQFriends
		BYTE* pEnlistQQFriends = p;
		Write16(pEnlistQQFriends, 0); //len

		WriteUn(pEnlistQQFriends, 0); //EnlistUin
		{ //AwardMoneyExp
			BYTE* pAwardMoneyExp = pEnlistQQFriends;
			Write16(pAwardMoneyExp, 0); //len

			Write32(pAwardMoneyExp, 0); //Money
			Write32(pAwardMoneyExp, 0); //SuperMoney
			Write32(pAwardMoneyExp, 0); //Exp
			Write32(pAwardMoneyExp, 0); //Charm
			Write32(pAwardMoneyExp, 0); //DanceExp
			Write32(pAwardMoneyExp, 0); //Coupons
			Write32(pAwardMoneyExp, 0); //Admiration
			Write32(pAwardMoneyExp, 0); //LuckMoney
			Write32(pAwardMoneyExp, 0); //TeamWorkExp
			Write32(pAwardMoneyExp, 0); //AchievePoint
			Write32(pAwardMoneyExp, 0); //ConsumeScore
			Write32(pAwardMoneyExp, 0); //HistoryConsumeScore
			Write32(pAwardMoneyExp, 0); //LadderMatchAchievePoint

			len = pAwardMoneyExp - pEnlistQQFriends;
			Set16(pEnlistQQFriends, (WORD)len);
			pEnlistQQFriends += len;
		}
		Write8(pEnlistQQFriends, 0); //AwardItemNum
		for (size_t i = 0; i < n; i++)
		{ //AwardItemInfo
			BYTE* pAwardItemInfo = pEnlistQQFriends;
			Write16(pAwardItemInfo, 0); //len

			Write32(pAwardItemInfo, 0); //ItemID
			Write32(pAwardItemInfo, 0); //ItemNum
			Write32(pAwardItemInfo, 0); //AvailPeriod
			Write8(pAwardItemInfo, 0); //Status
			WriteUn(pAwardItemInfo, 0); //ObtainTime
			Write32(pAwardItemInfo, 0); //OtherAttribute

			len = pAwardItemInfo - pEnlistQQFriends;
			Set16(pEnlistQQFriends, (WORD)len);
			pEnlistQQFriends += len;
		}
		Write8(pEnlistQQFriends, 0); //NickNameLen

		len = pEnlistQQFriends - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 10902, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetConItemLeftNum(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	bool Num = Read8(p);
	for (size_t i = 0; i < n; i++)
	{ //ConItemQueryInfo
		BYTE* pConItemQueryInfo = p;
		len = Read16(pConItemQueryInfo);

		int ExchangeID = Read32(pConItemQueryInfo);
		int ItemID = Read32(pConItemQueryInfo);
		int ItemLeftNum = Read32(pConItemQueryInfo);

		p += len;
	}

}

void ResponseGetConItemLeftNum(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //Num
	for (size_t i = 0; i < n; i++)
	{ //ConItemQueryInfo
		BYTE* pConItemQueryInfo = p;
		Write16(pConItemQueryInfo, 0); //len

		Write32(pConItemQueryInfo, 0); //ExchangeID
		Write32(pConItemQueryInfo, 0); //ItemID
		Write32(pConItemQueryInfo, 0); //ItemLeftNum

		len = pConItemQueryInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 10903, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestReportCheat(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	Un DstUin = ReadUn(p);
	BYTE MultiInfoLen = Read8(p);
	BYTE IsNetworkStable = Read8(p);
	char[] DstNickname[] = ReadString(p);

}

void ResponseReportCheat(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 1600, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyCheatWarning(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //MsgLen

	len = p - buf;
	SendToClient(Client, 1601, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetWareHouseStatus(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetWareHouseStatus(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //Status
	Write16(p, 0); //MaxSize

	len = p - buf;
	SendToClient(Client, 420, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetWareHouseItemList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetWareHouseItemList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ItemNum
	for (size_t i = 0; i < n; i++)
	{ //WareHouseItems
		BYTE* pWareHouseItems = p;
		Write16(pWareHouseItems, 0); //len

		Write32(pWareHouseItems, 0); //ItemID
		Write32(pWareHouseItems, 0); //ItemNum
		Write32(pWareHouseItems, 0); //AvailPeriod
		Write8(pWareHouseItems, 0); //Status
		WriteUn(pWareHouseItems, 0); //ObtainTime
		Write32(pWareHouseItems, 0); //OtherAttribute

		len = pWareHouseItems - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 421, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestDoWareHouseOperation(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int ItemID = Read32(p);
	bool OpType = Read8(p);

}

void ResponseWareHouseOperation(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //OpType
	{ //ItemInfo
		BYTE* pItemInfo = p;
		Write16(pItemInfo, 0); //len

		Write32(pItemInfo, 0); //ItemID
		Write32(pItemInfo, 0); //ItemNum
		Write32(pItemInfo, 0); //AvailPeriod
		Write8(pItemInfo, 0); //Status
		WriteUn(pItemInfo, 0); //ObtainTime
		Write32(pItemInfo, 0); //OtherAttribute

		len = pItemInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 422, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyWareHouseDelItem(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ItemNum
	Write32(p, 0); //Item[]

	len = p - buf;
	SendToClient(Client, 423, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestReportN2OChangeEvent(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	UINT LapTime = Read32(p);
	UCHAR N2OChangeEventNum = Read8(p);
	for (size_t i = 0; i < n; i++)
	{ //N2OChangeEvent
		BYTE* pN2OChangeEvent = p;
		len = Read16(pN2OChangeEvent);

		USHORT EventID = Read16(pN2OChangeEvent);
		UINT BeginLapTime = Read32(pN2OChangeEvent);
		USHORT LastingTime = Read16(pN2OChangeEvent);
		UCHAR EventType = Read8(pN2OChangeEvent);
		short N2OChange = Read16(pN2OChangeEvent);

		p += len;
	}

}

void RequestUseHyperJet(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	UINT LapTime = Read32(p);
	UCHAR N2OChangeEventNum = Read8(p);
	for (size_t i = 0; i < n; i++)
	{ //N2OChangeEvent
		BYTE* pN2OChangeEvent = p;
		len = Read16(pN2OChangeEvent);

		USHORT EventID = Read16(pN2OChangeEvent);
		UINT BeginLapTime = Read32(pN2OChangeEvent);
		USHORT LastingTime = Read16(pN2OChangeEvent);
		UCHAR EventType = Read8(pN2OChangeEvent);
		short N2OChange = Read16(pN2OChangeEvent);

		p += len;
	}

}

void RequestLoverDanceChangeOneMode(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	int Mode = Read32(p);

}

void ResponseLoverDanceChangeOneMode(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //NewMode
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 262, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyLoverDanceChangeOneMode(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //MasterUin
	WriteUn(p, 0); //Uin
	Write32(p, 0); //NewMode

	len = p - buf;
	SendToClient(Client, 725, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestLoverDanceStepStatistics(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	int SegID = Read32(p);
	int StepID = Read32(p);
	int Checksum = Read32(p);
	Un Hits = ReadUn(p);
	{ //Combo
		BYTE* pCombo = p;
		len = Read16(pCombo);

		short First = Read16(pCombo);
		short Last = Read16(pCombo);

		p += len;
	}
	short Decision = Read16(p);
	short NormalKeyTotalHits = Read16(p);

}

void NotifyLoverDanceStepStatistics(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //TeamID
	Write32(p, 0); //ScoresInc
	Write32(p, 0); //ScoresTotal
	Write8(p, 0); //CooperInc
	Write8(p, 0); //CooperScoresInc
	Write32(p, 0); //TotalCooper

	len = p - buf;
	SendToClient(Client, 735, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyLoverDanceWaitCooperKey(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //WaitKeyTime

	len = p - buf;
	SendToClient(Client, 736, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestLoverDanceCooperKey(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	UCHAR TeamID = Read8(p);
	USHORT Key = Read16(p);

}

void NotifyLoverDanceCooperKey(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //TeamNum
	for (size_t i = 0; i < n; i++)
	{ //TeamCooperKey
		BYTE* pTeamCooperKey = p;
		Write16(pTeamCooperKey, 0); //len

		Write8(pTeamCooperKey, 0); //TeamID
		Write8(pTeamCooperKey, 0); //IsSame
		Write8(pTeamCooperKey, 0); //Key

		len = pTeamCooperKey - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 737, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetFavoriteTask(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetFavoriteTask(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //Result
	Write8(p, 0); //FavoriteTaskNum
	for (size_t i = 0; i < n; i++)
	{ //FavoriteTask
		BYTE* pFavoriteTask = p;
		Write16(pFavoriteTask, 0); //len

		Write32(pFavoriteTask, 0); //TaskID
		Write32(pFavoriteTask, 0); //AddTime

		len = pFavoriteTask - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 415, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestAddFavoriteTask(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int AddFavoriteTaskID = Read32(p);

}

void ResponseAddFavoriteTask(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //Result
	{ //AddFavoriteTask
		BYTE* pAddFavoriteTask = p;
		Write16(pAddFavoriteTask, 0); //len

		Write32(pAddFavoriteTask, 0); //TaskID
		Write32(pAddFavoriteTask, 0); //AddTime

		len = pAddFavoriteTask - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //DeleteFavoriteTaskID

	len = p - buf;
	SendToClient(Client, 416, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestDeleteFavoriteTask(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int DeleteFavoriteTaskID = Read32(p);

}

void ResponseDeleteFavoriteTask(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //Result
	Write32(p, 0); //DeleteFavoriteTaskID

	len = p - buf;
	SendToClient(Client, 417, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyDeleteOneItem(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	WriteUn(p, 0); //Uin
	Write32(p, 0); //ItemID
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 610, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestLoveDanceShowTimeAffection(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT SrcUin = Read32(p);
	Un Time = ReadUn(p);
	UINT DstUin = Read32(p);
	short RoomID = Read16(p);
	short GameLogicID = Read16(p);
	int ItemID = Read32(p);

}

void ResponseLoveDanceShowTimeAffection(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //SrcUin
	Write32(p, 0); //DstUin
	Write16(p, 0); //IncAdiration
	Write32(p, 0); //CurAdiration
	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 265, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyLoveDanceShowTimeAffection(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //SrcUin
	Write32(p, 0); //DstUin
	Write16(p, 0); //IncAdiration
	Write32(p, 0); //CurAdiration

	len = p - buf;
	SendToClient(Client, 738, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetPetSkillList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetPetSkillList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //PetNum
	for (size_t i = 0; i < n; i++)
	{ //PetSkills
		BYTE* pPetSkills = p;
		Write16(pPetSkills, 0); //len

		Write32(pPetSkills, 0); //PetID
		Write8(pPetSkills, 0); //SkillNum
		Write16(pPetSkills, 0); //PetSkillIDs[]

		len = pPetSkills - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 440, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestSetSecPwd(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	char[] Pwd[] = ReadString(p);

}

void ResponseSetSecPwd(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 441, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestModSecPwd(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	char[] OldPwd[] = ReadString(p);
	char[] NewPwd[] = ReadString(p);

}

void ResponseModSecPwd(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 442, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestEmptySecPwd(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseEmptySecPwd(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 443, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestCancelEmptySecPwd(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseCancelEmptySecPwd(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 444, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestCheckSecPwd(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	char[] SecPwd[] = ReadString(p);

}

void ResponseCheckSecPwd(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 445, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetSecPwdStatus(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetSecPwdStatus(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write8(p, 0); //IsEmpty
	Write32(p, 0); //ReqEmptyTime

	len = p - buf;
	SendToClient(Client, 447, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyS2CEvent(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //EventID
	Write16(p, 0); //MsgLen
	Write8(p, 0); //Context

	len = p - buf;
	SendToClient(Client, 446, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetShoppingCarItemList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetShoppingCarItemList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	{ //ShoppingCarItemList
		BYTE* pShoppingCarItemList = p;
		Write16(pShoppingCarItemList, 0); //len

		Write8(pShoppingCarItemList, 0); //ItemNum
		Write32(pShoppingCarItemList, 0); //Item[]

		len = pShoppingCarItemList - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 452, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestUpdateShoppingCarItemList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	{ //ShoppingCarItemList
		BYTE* pShoppingCarItemList = p;
		len = Read16(pShoppingCarItemList);

		bool ItemNum = Read8(pShoppingCarItemList);
		int[] Item[] = Read32(pShoppingCarItemList);

		p += len;
	}

}

void ResponseUpdateShoppingCarItemList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 453, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestTakeStealPigTask(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseTakeStealPigTask(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen
	Write32(p, 0); //ActiveLeftTime
	Write16(p, 0); //TaskLeftTime

	len = p - buf;
	SendToClient(Client, 11024, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestTransferToGuildRoom(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT DstSvrID = Read16(p);
	U DstGuildID = ReadU(p);
	U DstGuildRoomID = ReadU(p);
	UCHAR TransferReason = Read8(p);

}

void ResponseTransferToGuildRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write8(p, 0); //TransferReason
	Write16(p, 0); //DstSvrID
	WriteU(p, 0); //DstGuildID
	WriteU(p, 0); //DstGuildRoomID
	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 11025, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGuildRoomPigInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGuildRoomPigInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen
	Write8(p, 0); //PigNum
	for (size_t i = 0; i < n; i++)
	{ //PigInfo
		BYTE* pPigInfo = p;
		Write16(pPigInfo, 0); //len

		Write8(pPigInfo, 0); //PigPos
		Write32(pPigInfo, 0); //ItemID

		len = pPigInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11026, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyGuildRoomPigInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //PigNum
	for (size_t i = 0; i < n; i++)
	{ //PigInfo
		BYTE* pPigInfo = p;
		Write16(pPigInfo, 0); //len

		Write8(pPigInfo, 0); //PigPos
		Write32(pPigInfo, 0); //ItemID

		len = pPigInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11027, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestDigPig(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	{ //PigInfo
		BYTE* pPigInfo = p;
		len = Read16(pPigInfo);

		UCHAR PigPos = Read8(pPigInfo);
		int ItemID = Read32(pPigInfo);

		p += len;
	}

}

void ResponseDigPig(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen
	{ //PigInfo
		BYTE* pPigInfo = p;
		Write16(pPigInfo, 0); //len

		Write8(pPigInfo, 0); //PigPos
		Write32(pPigInfo, 0); //ItemID

		len = pPigInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11028, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyDigPig(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	{ //PigInfo
		BYTE* pPigInfo = p;
		Write16(pPigInfo, 0); //len

		Write8(pPigInfo, 0); //PigPos
		Write32(pPigInfo, 0); //ItemID

		len = pPigInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11029, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetPig(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	{ //PigInfo
		BYTE* pPigInfo = p;
		len = Read16(pPigInfo);

		UCHAR PigPos = Read8(pPigInfo);
		int ItemID = Read32(pPigInfo);

		p += len;
	}

}

void ResponseGetPig(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen
	{ //PigInfo
		BYTE* pPigInfo = p;
		Write16(pPigInfo, 0); //len

		Write8(pPigInfo, 0); //PigPos
		Write32(pPigInfo, 0); //ItemID

		len = pPigInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11030, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyGetPig(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	{ //PigInfo
		BYTE* pPigInfo = p;
		Write16(pPigInfo, 0); //len

		Write8(pPigInfo, 0); //PigPos
		Write32(pPigInfo, 0); //ItemID

		len = pPigInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11031, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestSubmitPig(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseSubmitPig(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 11032, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifySubmitPig(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //ItemID

	len = p - buf;
	SendToClient(Client, 11033, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyStealPigStatus(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //LeftTime
	Write16(p, 0); //Other

	len = p - buf;
	SendToClient(Client, 11034, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestModifyGuildEnlistCondition(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT NewAttr = Read16(p);
	{ //NewGuildEnlistCond
		BYTE* pNewGuildEnlistCond = p;
		len = Read16(pNewGuildEnlistCond);

		UINT ProsperityCondition = Read32(pNewGuildEnlistCond);
		UINT JoinTotalCondition = Read32(pNewGuildEnlistCond);
		UINT HonorCondition = Read32(pNewGuildEnlistCond);
		UINT CharmCondition = Read32(pNewGuildEnlistCond);
		UINT DanceExpCondition = Read32(pNewGuildEnlistCond);
		UINT SkillPointCondition = Read32(pNewGuildEnlistCond);
		UINT ExpLevelCondition = Read32(pNewGuildEnlistCond);

		p += len;
	}

}

void ResponseModifyGuildEnlistCondition(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen
	Write16(p, 0); //NewAttr
	{ //NewGuildEnlistCond
		BYTE* pNewGuildEnlistCond = p;
		Write16(pNewGuildEnlistCond, 0); //len

		Write32(pNewGuildEnlistCond, 0); //ProsperityCondition
		Write32(pNewGuildEnlistCond, 0); //JoinTotalCondition
		Write32(pNewGuildEnlistCond, 0); //HonorCondition
		Write32(pNewGuildEnlistCond, 0); //CharmCondition
		Write32(pNewGuildEnlistCond, 0); //DanceExpCondition
		Write32(pNewGuildEnlistCond, 0); //SkillPointCondition
		Write32(pNewGuildEnlistCond, 0); //ExpLevelCondition

		len = pNewGuildEnlistCond - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 15026, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestAdvanceQueryGuild(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	short CurrentGuild = Read16(p);
	USHORT Start = Read16(p);
	USHORT QueryNum = Read16(p);
	UINT ClassifyCfgVersion = Read32(p);
	USHORT Num = Read16(p);
	for (size_t i = 0; i < n; i++)
	{ //AdanceQueryCondIdx
		BYTE* pAdanceQueryCondIdx = p;
		len = Read16(pAdanceQueryCondIdx);

		USHORT ID = Read16(pAdanceQueryCondIdx);
		USHORT ConditionIdx = Read16(pAdanceQueryCondIdx);

		p += len;
	}

}

void ResponseAdvanceQueryGuild(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //Start
	Write32(p, 0); //GuildCount
	for (size_t i = 0; i < n; i++)
	{ //GuildDescInfo
		BYTE* pGuildDescInfo = p;
		Write16(pGuildDescInfo, 0); //len

		Write32(pGuildDescInfo, 0); //GuildID
		WriteString(pGuildDescInfo, 0); //Name[]
		Write32(pGuildDescInfo, 0); //Level
		Write32(pGuildDescInfo, 0); //Score
		Write32(pGuildDescInfo, 0); //CreateTime
		Write16(pGuildDescInfo, 0); //Attribute
		Write16(pGuildDescInfo, 0); //MaxMember
		Write16(pGuildDescInfo, 0); //CurrentMember
		Write32(pGuildDescInfo, 0); //Prosperity
		Write16(pGuildDescInfo, 0); //Level
		{ //GuildEnlistCond
			BYTE* pGuildEnlistCond = pGuildDescInfo;
			Write16(pGuildEnlistCond, 0); //len

			Write32(pGuildEnlistCond, 0); //ProsperityCondition
			Write32(pGuildEnlistCond, 0); //JoinTotalCondition
			Write32(pGuildEnlistCond, 0); //HonorCondition
			Write32(pGuildEnlistCond, 0); //CharmCondition
			Write32(pGuildEnlistCond, 0); //DanceExpCondition
			Write32(pGuildEnlistCond, 0); //SkillPointCondition
			Write32(pGuildEnlistCond, 0); //ExpLevelCondition

			len = pGuildEnlistCond - pGuildDescInfo;
			Set16(pGuildDescInfo, (WORD)len);
			pGuildDescInfo += len;
		}
		Write8(pGuildDescInfo, 0); //SubType

		len = pGuildDescInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //CurrentGuild
	Write32(p, 0); //TotalCount
	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen
	{ //GuildClassifyCfg
		BYTE* pGuildClassifyCfg = p;
		Write16(pGuildClassifyCfg, 0); //len

		Write32(pGuildClassifyCfg, 0); //Version
		Write16(pGuildClassifyCfg, 0); //ClassifyEntryNum
		for (size_t i = 0; i < n; i++)
		{ //ClassifyEntry
			BYTE* pClassifyEntry = pGuildClassifyCfg;
			Write16(pClassifyEntry, 0); //len

			Write16(pClassifyEntry, 0); //ID
			Write16(pClassifyEntry, 0); //ClassifyNum
			Write32(pClassifyEntry, 0); //ClassifyLimit[]

			len = pClassifyEntry - pGuildClassifyCfg;
			Set16(pGuildClassifyCfg, (WORD)len);
			pGuildClassifyCfg += len;
		}

		len = pGuildClassifyCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //NextGuild

	len = p - buf;
	SendToClient(Client, 15025, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestModifyDutyProperty(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT DutyPropertyNum = Read16(p);
	for (size_t i = 0; i < n; i++)
	{ //NewDutyProperty
		BYTE* pNewDutyProperty = p;
		len = Read16(pNewDutyProperty);

		USHORT Duty = Read16(pNewDutyProperty);
		USHORT Right = Read16(pNewDutyProperty);
		{ //AutoPromLimit
			BYTE* pAutoPromLimit = pNewDutyProperty;
			len = Read16(pAutoPromLimit);

			UINT ScoreLimit = Read32(pAutoPromLimit);
			UINT ProsperityLimit = Read32(pAutoPromLimit);

			pNewDutyProperty += len;
		}
		{ //ApplyPromLimit
			BYTE* pApplyPromLimit = pNewDutyProperty;
			len = Read16(pApplyPromLimit);

			UINT ScoreLimit = Read32(pApplyPromLimit);
			UINT ProsperityLimit = Read32(pApplyPromLimit);

			pNewDutyProperty += len;
		}
		[] DutyTitle[] = Read(pNewDutyProperty);

		p += len;
	}

}

void ResponseModifyDutyProperty(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //DutyPropertyNum
	for (size_t i = 0; i < n; i++)
	{ //NewDutyProperty
		BYTE* pNewDutyProperty = p;
		Write16(pNewDutyProperty, 0); //len

		Write16(pNewDutyProperty, 0); //Duty
		Write16(pNewDutyProperty, 0); //Right
		{ //AutoPromLimit
			BYTE* pAutoPromLimit = pNewDutyProperty;
			Write16(pAutoPromLimit, 0); //len

			Write32(pAutoPromLimit, 0); //ScoreLimit
			Write32(pAutoPromLimit, 0); //ProsperityLimit

			len = pAutoPromLimit - pNewDutyProperty;
			Set16(pNewDutyProperty, (WORD)len);
			pNewDutyProperty += len;
		}
		{ //ApplyPromLimit
			BYTE* pApplyPromLimit = pNewDutyProperty;
			Write16(pApplyPromLimit, 0); //len

			Write32(pApplyPromLimit, 0); //ScoreLimit
			Write32(pApplyPromLimit, 0); //ProsperityLimit

			len = pApplyPromLimit - pNewDutyProperty;
			Set16(pNewDutyProperty, (WORD)len);
			pNewDutyProperty += len;
		}
		Write(pNewDutyProperty, 0); //DutyTitle[]

		len = pNewDutyProperty - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 15032, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestApplyDuty(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT Duty = Read16(p);

}

void ResponseApplyDuty(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //Duty
	Write16(p, 0); //NameLen
	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 15033, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestDutyApplyList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseDutyApplyList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //ApplyNum
	for (size_t i = 0; i < n; i++)
	{ //Apply
		BYTE* pApply = p;
		Write16(pApply, 0); //len

		Write32(pApply, 0); //Uin
		Write16(pApply, 0); //Duty

		len = pApply - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 15034, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestDutyApplyReply(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT ApplyNum = Read32(p);
	for (size_t i = 0; i < n; i++)
	{ //ApplyReply
		BYTE* pApplyReply = p;
		len = Read16(pApplyReply);

		UINT Uin = Read32(pApplyReply);
		USHORT Duty = Read16(pApplyReply);
		char Agree = Read8(pApplyReply);

		p += len;
	}

}

void ResponseDutyApplyReply(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //ApplyNum
	for (size_t i = 0; i < n; i++)
	{ //ApplyReply
		BYTE* pApplyReply = p;
		Write16(pApplyReply, 0); //len

		Write32(pApplyReply, 0); //Uin
		Write16(pApplyReply, 0); //Duty
		Write8(pApplyReply, 0); //Agree

		len = pApplyReply - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //ResNum
	for (size_t i = 0; i < n; i++)
	{ //ApplyRes
		BYTE* pApplyRes = p;
		Write16(pApplyRes, 0); //len

		WriteString(pApplyRes, 0); //NickName[]
		WriteString(pApplyRes, 0); //DutyTitle[]

		len = pApplyRes - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 15035, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetGuildCommercialInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetGuildCommercialInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //Time
	{ //GuildClothItem
		BYTE* pGuildClothItem = p;
		Write16(pGuildClothItem, 0); //len

		Write32(pGuildClothItem, 0); //ClothSetTime
		for (size_t i = 0; i < n; i++)
		{ //GuildClothItem
			BYTE* pGuildClothItem = pGuildClothItem;
			Write16(pGuildClothItem, 0); //len

			Write16(pGuildClothItem, 0); //ClothItemNum
			Write32(pGuildClothItem, 0); //ClothItems[]
			Write32(pGuildClothItem, 0); //ChooseFlag

			len = pGuildClothItem - pGuildClothItem;
			Set16(pGuildClothItem, (WORD)len);
			pGuildClothItem += len;
		}

		len = pGuildClothItem - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //GroupBuyNum
	for (size_t i = 0; i < n; i++)
	{ //GuildGroupBuy
		BYTE* pGuildGroupBuy = p;
		Write16(pGuildGroupBuy, 0); //len

		Write8(pGuildGroupBuy, 0); //Status
		Write8(pGuildGroupBuy, 0); //LeftSecond
		{ //BaseEntry
			BYTE* pBaseEntry = pGuildGroupBuy;
			Write16(pBaseEntry, 0); //len

			Write32(pBaseEntry, 0); //PubTime
			Write16(pBaseEntry, 0); //CommodityID
			Write32(pBaseEntry, 0); //TotalSuperMoney
			Write16(pBaseEntry, 0); //JoinNum

			len = pBaseEntry - pGuildGroupBuy;
			Set16(pGuildGroupBuy, (WORD)len);
			pGuildGroupBuy += len;
		}

		len = pGuildGroupBuy - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 15028, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestChangeGuildCloth(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	{ //NewGuildClothItem
		BYTE* pNewGuildClothItem = p;
		len = Read16(pNewGuildClothItem);

		UINT ClothSetTime = Read32(pNewGuildClothItem);
		for (size_t i = 0; i < n; i++)
		{ //GuildClothItem
			BYTE* pGuildClothItem = pNewGuildClothItem;
			len = Read16(pGuildClothItem);

			USHORT ClothItemNum = Read16(pGuildClothItem);
			UINT[] ClothItems[] = Read32(pGuildClothItem);
			UINT ChooseFlag = Read32(pGuildClothItem);

			pNewGuildClothItem += len;
		}

		p += len;
	}

}

void ResponseChangeGuildCloth(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //Time
	{ //NewGuildClothItem
		BYTE* pNewGuildClothItem = p;
		Write16(pNewGuildClothItem, 0); //len

		Write32(pNewGuildClothItem, 0); //ClothSetTime
		for (size_t i = 0; i < n; i++)
		{ //GuildClothItem
			BYTE* pGuildClothItem = pNewGuildClothItem;
			Write16(pGuildClothItem, 0); //len

			Write16(pGuildClothItem, 0); //ClothItemNum
			Write32(pGuildClothItem, 0); //ClothItems[]
			Write32(pGuildClothItem, 0); //ChooseFlag

			len = pGuildClothItem - pNewGuildClothItem;
			Set16(pNewGuildClothItem, (WORD)len);
			pNewGuildClothItem += len;
		}

		len = pNewGuildClothItem - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 15029, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyModifyDutyRight(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //GuidID
	Write16(p, 0); //Duty
	Write16(p, 0); //NewRight

	len = p - buf;
	SendToClient(Client, 15223, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyChangeGuildCloth(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //GuildID
	{ //NewGuildClothItem
		BYTE* pNewGuildClothItem = p;
		Write16(pNewGuildClothItem, 0); //len

		Write32(pNewGuildClothItem, 0); //ClothSetTime
		for (size_t i = 0; i < n; i++)
		{ //GuildClothItem
			BYTE* pGuildClothItem = pNewGuildClothItem;
			Write16(pGuildClothItem, 0); //len

			Write16(pGuildClothItem, 0); //ClothItemNum
			Write32(pGuildClothItem, 0); //ClothItems[]
			Write32(pGuildClothItem, 0); //ChooseFlag

			len = pGuildClothItem - pNewGuildClothItem;
			Set16(pNewGuildClothItem, (WORD)len);
			pNewGuildClothItem += len;
		}

		len = pNewGuildClothItem - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 15227, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestTransferMapInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int MapID = Read32(p);
	bool MapInfo = Read8(p);

}

void NotifyOtherClientMapInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //SrcUin
	Write32(p, 0); //MapID
	Write8(p, 0); //MapInfo

	len = p - buf;
	SendToClient(Client, 463, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestTransferMusicResHoldInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int MusicID = Read32(p);
	UCHAR ResHoldInfo = Read8(p);

}

void NotifyTransferMusicResHoldInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //SrcUin
	Write32(p, 0); //MusicID
	Write8(p, 0); //ResHoldInfo

	len = p - buf;
	SendToClient(Client, 266, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestTransferResourceDownloadStatus(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR ResourceType = Read8(p);
	UCHAR DownloadStatusValue = Read8(p);

}

void NotifyResourceDownloadStatus(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //SrcUin
	Write8(p, 0); //ResourceType
	Write8(p, 0); //DownloadStatusValue

	len = p - buf;
	SendToClient(Client, 268, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyClientVipFlag(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	WriteUn(p, 0); //VipFlag
	Write16(p, 0); //MsgLen
	WriteUn(p, 0); //VipGrowRate

	len = p - buf;
	SendToClient(Client, 948, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyClientDeadLineItemTips(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ToBeExpiredItemNum
	for (size_t i = 0; i < n; i++)
	{ //ToBeExpiredItem
		BYTE* pToBeExpiredItem = p;
		Write16(pToBeExpiredItem, 0); //len

		{ //ItemInfo
			BYTE* pItemInfo = pToBeExpiredItem;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute

			len = pItemInfo - pToBeExpiredItem;
			Set16(pToBeExpiredItem, (WORD)len);
			pToBeExpiredItem += len;
		}
		Write32(pToBeExpiredItem, 0); //ExpiredTime

		len = pToBeExpiredItem - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //ExpiredItemNum
	for (size_t i = 0; i < n; i++)
	{ //ExpiredItem
		BYTE* pExpiredItem = p;
		Write16(pExpiredItem, 0); //len

		{ //ItemInfo
			BYTE* pItemInfo = pExpiredItem;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute

			len = pItemInfo - pExpiredItem;
			Set16(pExpiredItem, (WORD)len);
			pExpiredItem += len;
		}
		Write32(pExpiredItem, 0); //ExpiredTime

		len = pExpiredItem - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 949, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyClientDeadLineItemExpired(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	{ //ExpiredItemInfo
		BYTE* pExpiredItemInfo = p;
		Write16(pExpiredItemInfo, 0); //len

		{ //ItemInfo
			BYTE* pItemInfo = pExpiredItemInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute

			len = pItemInfo - pExpiredItemInfo;
			Set16(pExpiredItemInfo, (WORD)len);
			pExpiredItemInfo += len;
		}
		Write32(pExpiredItemInfo, 0); //ExpiredTime

		len = pExpiredItemInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 950, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestReportClickStream(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	bool Num = Read8(p);
	for (size_t i = 0; i < n; i++)
	{ //Events
		BYTE* pEvents = p;
		len = Read16(pEvents);

		USHORT EventID = Read16(pEvents);
		UINT EventParam = Read32(pEvents);
		bool ContextID = Read8(pEvents);
		UINT Time = Read32(pEvents);

		p += len;
	}

}

void NotifySvrConfig2(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //HaveTopMapRecord
	for (size_t i = 0; i < n; i++)
	{ //TopMapRecordConfig
		BYTE* pTopMapRecordConfig = p;
		Write16(pTopMapRecordConfig, 0); //len

		Write32(pTopMapRecordConfig, 0); //Version
		Write32(pTopMapRecordConfig, 0); //RecordDisplayLimit
		Write8(pTopMapRecordConfig, 0); //RecordNumber
		for (size_t i = 0; i < n; i++)
		{ //Record
			BYTE* pRecord = pTopMapRecordConfig;
			Write16(pRecord, 0); //len

			Write32(pRecord, 0); //MapId
			Write32(pRecord, 0); //Record
			Write32(pRecord, 0); //Uin
			Write8(pRecord, 0); //WorldId
			Write8(pRecord, 0); //NameLength
			Write8(pRecord, 0); //UrlLength

			len = pRecord - pTopMapRecordConfig;
			Set16(pTopMapRecordConfig, (WORD)len);
			pTopMapRecordConfig += len;
		}

		len = pTopMapRecordConfig - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HaveKartRoomPushInfo
	for (size_t i = 0; i < n; i++)
	{ //KartRoomPushInfo
		BYTE* pKartRoomPushInfo = p;
		Write16(pKartRoomPushInfo, 0); //len

		Write32(pKartRoomPushInfo, 0); //Version
		Write16(pKartRoomPushInfo, 0); //PushItemNumber
		for (size_t i = 0; i < n; i++)
		{ //PushItem
			BYTE* pPushItem = pKartRoomPushInfo;
			Write16(pPushItem, 0); //len

			Write32(pPushItem, 0); //KartId
			Write8(pPushItem, 0); //TextLength

			len = pPushItem - pKartRoomPushInfo;
			Set16(pKartRoomPushInfo, (WORD)len);
			pKartRoomPushInfo += len;
		}

		len = pKartRoomPushInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //ClickStreamCfg
		BYTE* pClickStreamCfg = p;
		Write16(pClickStreamCfg, 0); //len

		Write8(pClickStreamCfg, 0); //ReportMode
		Write8(pClickStreamCfg, 0); //ContextNum
		Write32(pClickStreamCfg, 0); //MaxNum

		len = pClickStreamCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 822, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestC2GGetHRoomNum(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseC2GGetHRoomNum(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //HRoomNum

	len = p - buf;
	SendToClient(Client, 11040, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GGetHRoomList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT BeginIdx = Read16(p);
	USHORT EndIdx = Read16(p);

}

void ResponseC2GGetHRoomList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //BeginIdx
	Write16(p, 0); //EndIdx
	Write8(p, 0); //HRoomNum
	for (size_t i = 0; i < n; i++)
	{ //HRoomDisplayInfo
		BYTE* pHRoomDisplayInfo = p;
		Write16(pHRoomDisplayInfo, 0); //len

		Write16(pHRoomDisplayInfo, 0); //SvrID
		Write32(pHRoomDisplayInfo, 0); //HRoomID
		Write8(pHRoomDisplayInfo, 0); //TotalPlayerNum
		Write16(pHRoomDisplayInfo, 0); //LeftTime
		Write32(pHRoomDisplayInfo, 0); //Uin1
		Write8(pHRoomDisplayInfo, 0); //NameLen1
		Write32(pHRoomDisplayInfo, 0); //Uin2
		Write8(pHRoomDisplayInfo, 0); //NameLen2
		WriteUn(pHRoomDisplayInfo, 0); //HRoomType
		{ //DynInfo
			BYTE* pDynInfo = pHRoomDisplayInfo;
			Write16(pDynInfo, 0); //len

			Write8(pDynInfo, 0); //HRoomNameLen
			Write8(pDynInfo, 0); //CurrentPlayerNum
			WriteUn(pDynInfo, 0); //OpenFlag

			len = pDynInfo - pHRoomDisplayInfo;
			Set16(pHRoomDisplayInfo, (WORD)len);
			pHRoomDisplayInfo += len;
		}

		len = pHRoomDisplayInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //TotalRoomNum

	len = p - buf;
	SendToClient(Client, 11041, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GGetHRoomBookingInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseC2GGetHRoomBookingInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //TimeZoneNum
	for (size_t i = 0; i < n; i++)
	{ //BookingInfo
		BYTE* pBookingInfo = p;
		Write16(pBookingInfo, 0); //len

		Write8(pBookingInfo, 0); //BeginHour
		Write16(pBookingInfo, 0); //AvailableNum
		Write16(pBookingInfo, 0); //TotalNum

		len = pBookingInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11042, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GGetHRoomPhyInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	bool TargetType = Read8(p);
	UINT TargetID = Read32(p);

}

void ResponseC2GGetHRoomPhyInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //TargetType
	Write16(p, 0); //ServerID
	{ //PhyInfo
		BYTE* pPhyInfo = p;
		Write16(pPhyInfo, 0); //len

		WriteU(pPhyInfo, 0); //ExtenalIP
		Write8(pPhyInfo, 0); //ExtTcpPortNum
		Write16(pPhyInfo, 0); //ExternalTcpPort[]
		Write8(pPhyInfo, 0); //ExtUdpPortNum
		Write16(pPhyInfo, 0); //ExternalUdpPort[]

		len = pPhyInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //HRoomID

	len = p - buf;
	SendToClient(Client, 11043, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GBookingHRoom(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	Un HRoomType = ReadUn(p);
	Un OpenFlag = ReadUn(p);
	bool BeginHour = Read8(p);
	bool HRoomNameLen = Read8(p);

}

void ResponseC2GBookingHRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 11044, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GGetBookingRoom(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseC2GGetBookingRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	{ //HRoomInfo
		BYTE* pHRoomInfo = p;
		Write16(pHRoomInfo, 0); //len

		Write8(pHRoomInfo, 0); //HRoomNameLen
		WriteUn(pHRoomInfo, 0); //OpenFlag

		len = pHRoomInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11046, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GSendWeddingMail(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	bool GuestNum = Read8(p);
	UINT[] GuestUin[] = Read32(p);

}

void ResponseC2GSendWeddingMail(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 11045, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyG2CWeddingMsg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ContentLen
	Write32(p, 0); //HRoomID

	len = p - buf;
	SendToClient(Client, 11047, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestG2CTodayPreWeddingStatus(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR CliContex = Read8(p);

}

void ResponseG2CTodayPreWeddingStatus(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write8(p, 0); //CliContex
	Write8(p, 0); //HasBookingHRoom
	Write8(p, 0); //HasSendWeddingMail

	len = p - buf;
	SendToClient(Client, 11048, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2HCEnterHRoom(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT HRoomID = Read32(p);

}

void ResponseC2HCEnterHRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //HRoomID
	Write16(p, 0); //HRoomObjID
	Write8(p, 0); //PlayerIdentify
	Write16(p, 0); //SceneID
	{ //HeroMoveInfo
		BYTE* pHeroMoveInfo = p;
		Write16(pHeroMoveInfo, 0); //len

		Write32(pHeroMoveInfo, 0); //Uin
		Write8(pHeroMoveInfo, 0); //WalkStatue
		Write32(pHeroMoveInfo, 0); //Posion[]
		Write32(pHeroMoveInfo, 0); //Ori[]
		Write32(pHeroMoveInfo, 0); //AttachUin
		Write32(pHeroMoveInfo, 0); //WalkExtState

		len = pHeroMoveInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //Uin1
	Write8(p, 0); //NameLen1
	Write32(p, 0); //Uin2
	Write8(p, 0); //NameLen2
	Write8(p, 0); //HRoomType

	len = p - buf;
	SendToClient(Client, 11060, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2HCGetHRoomInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseC2HCGetHRoomInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	{ //HRoomInfo
		BYTE* pHRoomInfo = p;
		Write16(pHRoomInfo, 0); //len

		Write8(pHRoomInfo, 0); //HRoomNameLen
		WriteUn(pHRoomInfo, 0); //OpenFlag

		len = pHRoomInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11061, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2HCModifyHRoomInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	{ //HRoomInfo
		BYTE* pHRoomInfo = p;
		len = Read16(pHRoomInfo);

		bool HRoomNameLen = Read8(pHRoomInfo);
		Un OpenFlag = ReadUn(pHRoomInfo);

		p += len;
	}

}

void ResponseC2HCModifyHRoomInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	{ //HRoomInfo
		BYTE* pHRoomInfo = p;
		Write16(pHRoomInfo, 0); //len

		Write8(pHRoomInfo, 0); //HRoomNameLen
		WriteUn(pHRoomInfo, 0); //OpenFlag

		len = pHRoomInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11062, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2HCGetHRoomStatus(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseC2HCGetHRoomStatus(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //Status
	Write8(p, 0); //Num

	len = p - buf;
	SendToClient(Client, 11063, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2HCSwitchHRoomStatus(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	bool Status = Read8(p);

}

void ResponseC2HCSwitchHRoomStatus(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //Status

	len = p - buf;
	SendToClient(Client, 11064, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2HCInviteWeddingGuest(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	bool GuestNum = Read8(p);
	UINT[] GuestUin[] = Read32(p);

}

void ResponseC2HCInviteWeddingGuest(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 11065, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2HCReportQTEAction(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT QTEActionSeq = Read32(p);
	bool Result = Read8(p);

}

void ResponseC2HCReportQTEAction(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //QTEActionSeq
	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 11066, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2HCPickupItem(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT ItemPositionIdx = Read16(p);

}

void ResponseC2HCPickupItem(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //ItemPositionIdx
	Write32(p, 0); //ItemType
	{ //Item
		BYTE* pItem = p;
		Write16(pItem, 0); //len

		Write32(pItem, 0); //ItemID
		Write32(pItem, 0); //ItemNum
		Write32(pItem, 0); //AvailPeriod
		Write8(pItem, 0); //Status
		WriteUn(pItem, 0); //ObtainTime
		Write32(pItem, 0); //OtherAttribute

		len = pItem - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11067, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2HCKickPlayer(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT DstUin = Read32(p);

}

void ResponseC2HCKickPlayer(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //DstUin

	len = p - buf;
	SendToClient(Client, 11068, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2CKickPlayer(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT DstUin = Read32(p);

}

void ResponseC2CKickplayer(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //DstUin

	len = p - buf;
	SendToClient(Client, 1670, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyC2CLeaveRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //RoomID
	Write32(p, 0); //Time
	Write8(p, 0); //Reason

	len = p - buf;
	SendToClient(Client, 1671, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestC2HCGetAllGenItems(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseC2HCGetAllGenItems(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //ItemNum
	for (size_t i = 0; i < n; i++)
	{ //Item
		BYTE* pItem = p;
		Write16(pItem, 0); //len

		Write32(pItem, 0); //ItemID
		Write16(pItem, 0); //ItemPositionIdx
		Write32(pItem, 0); //ItemType

		len = pItem - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11069, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyHC2CWeddingStatus(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //Status
	Write32(p, 0); //TimePass
	Write32(p, 0); //LeftTime
	Write32(p, 0); //TotalTimePass
	Write32(p, 0); //TotalLeftTime
	Write8(p, 0); //Num
	Write8(p, 0); //InfoLen

	len = p - buf;
	SendToClient(Client, 11070, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyHC2CQTEEvent(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //QTEActionSeq
	Write8(p, 0); //ActionKeyNum
	Write32(p, 0); //MaxInterval

	len = p - buf;
	SendToClient(Client, 11071, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyHC2CQTEResult(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //QTEActionSeq
	Write16(p, 0); //Result

	len = p - buf;
	SendToClient(Client, 11076, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyHC2CGenItemEvent(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //ItemNum
	for (size_t i = 0; i < n; i++)
	{ //Item
		BYTE* pItem = p;
		Write16(pItem, 0); //len

		Write32(pItem, 0); //ItemID
		Write16(pItem, 0); //ItemPositionIdx
		Write32(pItem, 0); //ItemType

		len = pItem - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11072, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyHC2CPickUpItem(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //PlayerUin
	Write16(p, 0); //ItemPositionIdx
	Write32(p, 0); //ItemType
	WriteString(p, 0); //NickName[]

	len = p - buf;
	SendToClient(Client, 11073, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyHC2CWeddingBroadcast(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //ContentLen

	len = p - buf;
	SendToClient(Client, 11074, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyHC2CLeaveHRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //HRoomID
	Write32(p, 0); //Time
	Write8(p, 0); //Reason
	{ //StatInfo
		BYTE* pStatInfo = p;
		Write16(pStatInfo, 0); //len

		Write8(pStatInfo, 0); //Type
		Write16(pStatInfo, 0); //AttendNum
		Write16(pStatInfo, 0); //TotalItemNum1
		Write16(pStatInfo, 0); //TotalItemNum2
		Write8(pStatInfo, 0); //Num
		for (size_t i = 0; i < n; i++)
		{ //PlayerStatInfo
			BYTE* pPlayerStatInfo = pStatInfo;
			Write16(pPlayerStatInfo, 0); //len

			Write8(pPlayerStatInfo, 0); //NameLen
			Write16(pPlayerStatInfo, 0); //ItemNum1

			len = pPlayerStatInfo - pStatInfo;
			Set16(pStatInfo, (WORD)len);
			pStatInfo += len;
		}

		len = pStatInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11075, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetGuildMemberList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	char Type = Read8(p);

}

void ResponseGetGuildMemberList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	WriteUn(p, 0); //Uin
	Write16(p, 0); //MemberNum
	for (size_t i = 0; i < n; i++)
	{ //Member
		BYTE* pMember = p;
		Write16(pMember, 0); //len

		Write32(pMember, 0); //Uin
		WriteString(pMember, 0); //NickName[]
		Write8(pMember, 0); //OnlineFlag
		Write32(pMember, 0); //Score
		Write32(pMember, 0); //LastLogin
		Write32(pMember, 0); //LastEnlistedTime
		Write8(pMember, 0); //EnlistFlag
		Write32(pMember, 0); //Duty
		Write32(pMember, 0); //Prosperity

		len = pMember - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //Type

	len = p - buf;
	SendToClient(Client, 15037, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GCancelHRoomBooking(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseC2GCancelHRoomBooking(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 11049, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestKartRefitInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	U Time = ReadU(p);

}

void ResponseKartRefitInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write16(p, 0); //KartNum
	for (size_t i = 0; i < n; i++)
	{ //KartRefitInfo
		BYTE* pKartRefitInfo = p;
		Write16(pKartRefitInfo, 0); //len

		Write32(pKartRefitInfo, 0); //Uin
		Write32(pKartRefitInfo, 0); //KartId
		Write32(pKartRefitInfo, 0); //RefitCout
		Write16(pKartRefitInfo, 0); //MaxFlags
		Write16(pKartRefitInfo, 0); //WWeight
		Write16(pKartRefitInfo, 0); //SpeedWeight
		Write16(pKartRefitInfo, 0); //JetWeight
		Write16(pKartRefitInfo, 0); //SJetWeight
		Write16(pKartRefitInfo, 0); //AccuWeight
		Write32(pKartRefitInfo, 0); //ShapeRefitCount
		Write32(pKartRefitInfo, 0); //KartHeadRefitItemID
		Write32(pKartRefitInfo, 0); //KartTailRefitItemID
		Write32(pKartRefitInfo, 0); //KartFlankRefitItemID
		Write32(pKartRefitInfo, 0); //KartTireRefitItemID
		{ //KartRefitExInfo
			BYTE* pKartRefitExInfo = pKartRefitInfo;
			Write16(pKartRefitExInfo, 0); //len

			Write8(pKartRefitExInfo, 0); //SpeedRefitStar
			Write8(pKartRefitExInfo, 0); //JetRefitStar
			Write8(pKartRefitExInfo, 0); //SJetRefitStar
			Write8(pKartRefitExInfo, 0); //AccuRefitStar
			Write8(pKartRefitExInfo, 0); //SpeedAddRatio
			Write8(pKartRefitExInfo, 0); //JetAddRatio
			Write8(pKartRefitExInfo, 0); //SJetAddRatio
			Write8(pKartRefitExInfo, 0); //AccuAddRatio

			len = pKartRefitExInfo - pKartRefitInfo;
			Set16(pKartRefitInfo, (WORD)len);
			pKartRefitInfo += len;
		}

		len = pKartRefitInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 271, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestShapeRefit(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	U Time = ReadU(p);
	int KartItemID = Read32(p);
	int RefitItemID = Read32(p);
	UCHAR KartNameLen = Read8(p);

}

void ResponseShapeRefit(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen
	Write32(p, 0); //KartItemID
	Write32(p, 0); //RefitItemID
	Write8(p, 0); //RefitLocation
	{ //KartRefitExInfo
		BYTE* pKartRefitExInfo = p;
		Write16(pKartRefitExInfo, 0); //len

		Write8(pKartRefitExInfo, 0); //SpeedRefitStar
		Write8(pKartRefitExInfo, 0); //JetRefitStar
		Write8(pKartRefitExInfo, 0); //SJetRefitStar
		Write8(pKartRefitExInfo, 0); //AccuRefitStar
		Write8(pKartRefitExInfo, 0); //SpeedAddRatio
		Write8(pKartRefitExInfo, 0); //JetAddRatio
		Write8(pKartRefitExInfo, 0); //SJetAddRatio
		Write8(pKartRefitExInfo, 0); //AccuAddRatio

		len = pKartRefitExInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 272, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestCancelShapeRefit(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	U Time = ReadU(p);
	int KartItemID = Read32(p);
	int CancelRefitItemID = Read32(p);
	char CancelRefitLocation = Read8(p);
	UCHAR KartNameLen = Read8(p);

}

void ResponseCancelShapeRefit(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen
	Write32(p, 0); //KartItemID
	Write32(p, 0); //CancelRefitItemID
	Write8(p, 0); //CancelRefitLocation
	{ //KartRefitExInfo
		BYTE* pKartRefitExInfo = p;
		Write16(pKartRefitExInfo, 0); //len

		Write8(pKartRefitExInfo, 0); //SpeedRefitStar
		Write8(pKartRefitExInfo, 0); //JetRefitStar
		Write8(pKartRefitExInfo, 0); //SJetRefitStar
		Write8(pKartRefitExInfo, 0); //AccuRefitStar
		Write8(pKartRefitExInfo, 0); //SpeedAddRatio
		Write8(pKartRefitExInfo, 0); //JetAddRatio
		Write8(pKartRefitExInfo, 0); //SJetAddRatio
		Write8(pKartRefitExInfo, 0); //AccuAddRatio

		len = pKartRefitExInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 273, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestCheckGuanJiaStatus(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	U Time = ReadU(p);
	BYTE[] GUID[] = Read8(p);
	UINT Version = Read32(p);

}

void ResponseCheckGuanJiaStatus(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 651, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestSNSRegister(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	{ //SNSBaseInfo
		BYTE* pSNSBaseInfo = p;
		len = Read16(pSNSBaseInfo);

		UINT Uin = Read32(pSNSBaseInfo);
		UINT RegisterTime = Read32(pSNSBaseInfo);
		UCHAR Gender = Read8(pSNSBaseInfo);
		USHORT BornYear = Read16(pSNSBaseInfo);
		UCHAR Zodiac = Read8(pSNSBaseInfo);
		UINT LocaleCode = Read32(pSNSBaseInfo);
		UINT Flag = Read32(pSNSBaseInfo);
		Un tLastReportTime = ReadUn(pSNSBaseInfo);

		p += len;
	}

}

void ResponseSNSRegister(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	{ //SNSBaseInfo
		BYTE* pSNSBaseInfo = p;
		Write16(pSNSBaseInfo, 0); //len

		Write32(pSNSBaseInfo, 0); //Uin
		Write32(pSNSBaseInfo, 0); //RegisterTime
		Write8(pSNSBaseInfo, 0); //Gender
		Write16(pSNSBaseInfo, 0); //BornYear
		Write8(pSNSBaseInfo, 0); //Zodiac
		Write32(pSNSBaseInfo, 0); //LocaleCode
		Write32(pSNSBaseInfo, 0); //Flag
		WriteUn(pSNSBaseInfo, 0); //tLastReportTime

		len = pSNSBaseInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 10850, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestQuitSNS(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseQuitSNS(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 10851, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestUpdateSNSInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	{ //SNSBaseInfo
		BYTE* pSNSBaseInfo = p;
		len = Read16(pSNSBaseInfo);

		UINT Uin = Read32(pSNSBaseInfo);
		UINT RegisterTime = Read32(pSNSBaseInfo);
		UCHAR Gender = Read8(pSNSBaseInfo);
		USHORT BornYear = Read16(pSNSBaseInfo);
		UCHAR Zodiac = Read8(pSNSBaseInfo);
		UINT LocaleCode = Read32(pSNSBaseInfo);
		UINT Flag = Read32(pSNSBaseInfo);
		Un tLastReportTime = ReadUn(pSNSBaseInfo);

		p += len;
	}

}

void ResponseUpdateSNSInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //HasInfo
	for (size_t i = 0; i < n; i++)
	{ //SNSBaseInfo
		BYTE* pSNSBaseInfo = p;
		Write16(pSNSBaseInfo, 0); //len

		Write32(pSNSBaseInfo, 0); //Uin
		Write32(pSNSBaseInfo, 0); //RegisterTime
		Write8(pSNSBaseInfo, 0); //Gender
		Write16(pSNSBaseInfo, 0); //BornYear
		Write8(pSNSBaseInfo, 0); //Zodiac
		Write32(pSNSBaseInfo, 0); //LocaleCode
		Write32(pSNSBaseInfo, 0); //Flag
		WriteUn(pSNSBaseInfo, 0); //tLastReportTime

		len = pSNSBaseInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 10852, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetPlayerSNSInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR Type = Read8(p);
	UINT TgtUin = Read32(p);

}

void ResponseGetPlayerSNSInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultId
	Write32(p, 0); //TgtUin
	Write8(p, 0); //Type
	Write8(p, 0); //HasInfo
	for (size_t i = 0; i < n; i++)
	{ //SNSInfo
		BYTE* pSNSInfo = p;
		Write16(pSNSInfo, 0); //len

		Write32(pSNSInfo, 0); //Uin
		Write32(pSNSInfo, 0); //RegisterTime
		Write8(pSNSInfo, 0); //Gender
		Write16(pSNSInfo, 0); //BornYear
		Write8(pSNSInfo, 0); //Zodiac
		Write32(pSNSInfo, 0); //LocaleCode
		Write32(pSNSInfo, 0); //Flag
		WriteUn(pSNSInfo, 0); //tLastReportTime

		len = pSNSInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 10853, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestInviteEnterSNSGame(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT InviteeUin = Read32(p);
	char[] InviteeName[] = ReadString(p);

}

void ResponseInviteEnterSNSGame(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultId
	Write32(p, 0); //InviteeUin
	WriteString(p, 0); //InviteeName[]

	len = p - buf;
	SendToClient(Client, 10854, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyInvitedSNSGame(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //SrcSvrID
	Write32(p, 0); //InviterUin
	WriteString(p, 0); //InviterName[]

	len = p - buf;
	SendToClient(Client, 10855, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void AckInvitedSNSGame(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	short SrcSvrID = Read16(p);
	UINT InviterUin = Read32(p);
	char[] InviterName[] = ReadString(p);
	UCHAR IsAccept = Read8(p);

}

void NotifyEnterSNSGame(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //RivalUin
	{ //SNSServerInfo
		BYTE* pSNSServerInfo = p;
		Write16(pSNSServerInfo, 0); //len

		Write16(pSNSServerInfo, 0); //SvrID
		WriteU(pSNSServerInfo, 0); //ExtenalIP
		Write8(pSNSServerInfo, 0); //ExtTcpPortNum
		Write16(pSNSServerInfo, 0); //ExternalTcpPort[]
		Write8(pSNSServerInfo, 0); //ExtUdpPortNum
		Write16(pSNSServerInfo, 0); //ExternalUdpPort[]

		len = pSNSServerInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 10856, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestEnterSNSGame(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT RivalUin = Read32(p);
	UCHAR SnsMatchType = Read8(p);

}

void ResponseEnterSNSGame(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultId

	len = p - buf;
	SendToClient(Client, 10857, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestAllocSNSServer(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR AllocReason = Read8(p);

}

void ResponseAllocSNSServer(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultId
	Write8(p, 0); //AllocReason
	Write8(p, 0); //HasSNSServer
	for (size_t i = 0; i < n; i++)
	{ //SNSServerInfo
		BYTE* pSNSServerInfo = p;
		Write16(pSNSServerInfo, 0); //len

		Write16(pSNSServerInfo, 0); //SvrID
		WriteU(pSNSServerInfo, 0); //ExtenalIP
		Write8(pSNSServerInfo, 0); //ExtTcpPortNum
		Write16(pSNSServerInfo, 0); //ExternalTcpPort[]
		Write8(pSNSServerInfo, 0); //ExtUdpPortNum
		Write16(pSNSServerInfo, 0); //ExternalUdpPort[]

		len = pSNSServerInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 10858, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestMatchSNSGame(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR MatchType = Read8(p);

}

void ResponseMatchSNSGame(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultId

	len = p - buf;
	SendToClient(Client, 10859, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyMatchSNSGameResult(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultId
	Write32(p, 0); //RivalUin

	len = p - buf;
	SendToClient(Client, 10860, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetSNSBroadcast(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	{ //SessionData
		BYTE* pSessionData = p;
		len = Read16(pSessionData);

		UINT SystemCurPage = Read32(pSessionData);
		UCHAR SystemCurLocLvl = Read8(pSessionData);
		UCHAR SystemCurAgeLvl = Read8(pSessionData);
		UINT LocaleCurPage = Read32(pSessionData);
		UCHAR LocaleCurLocLvl = Read8(pSessionData);
		UINT CondCurPage = Read32(pSessionData);
		UCHAR CondCurZodiacLvl = Read8(pSessionData);
		UCHAR CondCurAgeLvl = Read8(pSessionData);
		UCHAR CondCurLocLvl = Read8(pSessionData);
		UCHAR CondCurGenderLvl = Read8(pSessionData);
		UCHAR CondCurLvlLvl = Read8(pSessionData);
		UINT BroadcastCurPage = Read32(pSessionData);
		UCHAR SystemCurTab = Read8(pSessionData);
		UCHAR LocaleCurTab = Read8(pSessionData);
		UCHAR CondCurTab = Read8(pSessionData);
		UCHAR BroadcastCurTab = Read8(pSessionData);

		p += len;
	}

}

void ResponseGetSNSBroadcast(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //SystemBCNum
	for (size_t i = 0; i < n; i++)
	{ //Content
		BYTE* pContent = p;
		Write16(pContent, 0); //len

		Write16(pContent, 0); //ContentLen

		len = pContent - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //Num
	for (size_t i = 0; i < n; i++)
	{ //SNSBCInfo
		BYTE* pSNSBCInfo = p;
		Write16(pSNSBCInfo, 0); //len

		Write8(pSNSBCInfo, 0); //Type
		{ //PlayerSNSInfo
			BYTE* pPlayerSNSInfo = pSNSBCInfo;
			Write16(pPlayerSNSInfo, 0); //len

			WriteString(pPlayerSNSInfo, 0); //Name[]
			{ //BaseInfo
				BYTE* pBaseInfo = pPlayerSNSInfo;
				Write16(pBaseInfo, 0); //len

				Write32(pBaseInfo, 0); //Uin
				Write32(pBaseInfo, 0); //RegisterTime
				Write8(pBaseInfo, 0); //Gender
				Write16(pBaseInfo, 0); //BornYear
				Write8(pBaseInfo, 0); //Zodiac
				Write32(pBaseInfo, 0); //LocaleCode
				Write32(pBaseInfo, 0); //Flag
				WriteUn(pBaseInfo, 0); //tLastReportTime

				len = pBaseInfo - pPlayerSNSInfo;
				Set16(pPlayerSNSInfo, (WORD)len);
				pPlayerSNSInfo += len;
			}
			Write32(pPlayerSNSInfo, 0); //Exp
			Write32(pPlayerSNSInfo, 0); //RightFlag

			len = pPlayerSNSInfo - pSNSBCInfo;
			Set16(pSNSBCInfo, (WORD)len);
			pSNSBCInfo += len;
		}

		len = pSNSBCInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //SessionData
		BYTE* pSessionData = p;
		Write16(pSessionData, 0); //len

		Write32(pSessionData, 0); //SystemCurPage
		Write8(pSessionData, 0); //SystemCurLocLvl
		Write8(pSessionData, 0); //SystemCurAgeLvl
		Write32(pSessionData, 0); //LocaleCurPage
		Write8(pSessionData, 0); //LocaleCurLocLvl
		Write32(pSessionData, 0); //CondCurPage
		Write8(pSessionData, 0); //CondCurZodiacLvl
		Write8(pSessionData, 0); //CondCurAgeLvl
		Write8(pSessionData, 0); //CondCurLocLvl
		Write8(pSessionData, 0); //CondCurGenderLvl
		Write8(pSessionData, 0); //CondCurLvlLvl
		Write32(pSessionData, 0); //BroadcastCurPage
		Write8(pSessionData, 0); //SystemCurTab
		Write8(pSessionData, 0); //LocaleCurTab
		Write8(pSessionData, 0); //CondCurTab
		Write8(pSessionData, 0); //BroadcastCurTab

		len = pSessionData - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 10861, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestSNSRecommand(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR Type = Read8(p);
	{ //Session
		BYTE* pSession = p;
		len = Read16(pSession);

		UINT SystemCurPage = Read32(pSession);
		UCHAR SystemCurLocLvl = Read8(pSession);
		UCHAR SystemCurAgeLvl = Read8(pSession);
		UINT LocaleCurPage = Read32(pSession);
		UCHAR LocaleCurLocLvl = Read8(pSession);
		UINT CondCurPage = Read32(pSession);
		UCHAR CondCurZodiacLvl = Read8(pSession);
		UCHAR CondCurAgeLvl = Read8(pSession);
		UCHAR CondCurLocLvl = Read8(pSession);
		UCHAR CondCurGenderLvl = Read8(pSession);
		UCHAR CondCurLvlLvl = Read8(pSession);
		UINT BroadcastCurPage = Read32(pSession);
		UCHAR SystemCurTab = Read8(pSession);
		UCHAR LocaleCurTab = Read8(pSession);
		UCHAR CondCurTab = Read8(pSession);
		UCHAR BroadcastCurTab = Read8(pSession);

		p += len;
	}
	UCHAR HasCond = Read8(p);
	for (size_t i = 0; i < n; i++)
	{ //Cond
		BYTE* pCond = p;
		len = Read16(pCond);

		UCHAR Gender = Read8(pCond);
		UCHAR AgeUpperBound = Read8(pCond);
		UCHAR AgeLowerBound = Read8(pCond);
		UCHAR Zodiac = Read8(pCond);
		UINT Locale = Read32(pCond);
		UINT LowerExp = Read32(pCond);
		UINT UpperExp = Read32(pCond);

		p += len;
	}

}

void ResponseSNSRecommand(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //Type
	{ //Session
		BYTE* pSession = p;
		Write16(pSession, 0); //len

		Write32(pSession, 0); //SystemCurPage
		Write8(pSession, 0); //SystemCurLocLvl
		Write8(pSession, 0); //SystemCurAgeLvl
		Write32(pSession, 0); //LocaleCurPage
		Write8(pSession, 0); //LocaleCurLocLvl
		Write32(pSession, 0); //CondCurPage
		Write8(pSession, 0); //CondCurZodiacLvl
		Write8(pSession, 0); //CondCurAgeLvl
		Write8(pSession, 0); //CondCurLocLvl
		Write8(pSession, 0); //CondCurGenderLvl
		Write8(pSession, 0); //CondCurLvlLvl
		Write32(pSession, 0); //BroadcastCurPage
		Write8(pSession, 0); //SystemCurTab
		Write8(pSession, 0); //LocaleCurTab
		Write8(pSession, 0); //CondCurTab
		Write8(pSession, 0); //BroadcastCurTab

		len = pSession - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasCond
	for (size_t i = 0; i < n; i++)
	{ //Cond
		BYTE* pCond = p;
		Write16(pCond, 0); //len

		Write8(pCond, 0); //Gender
		Write8(pCond, 0); //AgeUpperBound
		Write8(pCond, 0); //AgeLowerBound
		Write8(pCond, 0); //Zodiac
		Write32(pCond, 0); //Locale
		Write32(pCond, 0); //LowerExp
		Write32(pCond, 0); //UpperExp

		len = pCond - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //Num
	for (size_t i = 0; i < n; i++)
	{ //PlayerInfo
		BYTE* pPlayerInfo = p;
		Write16(pPlayerInfo, 0); //len

		WriteString(pPlayerInfo, 0); //Name[]
		{ //BaseInfo
			BYTE* pBaseInfo = pPlayerInfo;
			Write16(pBaseInfo, 0); //len

			Write32(pBaseInfo, 0); //Uin
			Write32(pBaseInfo, 0); //RegisterTime
			Write8(pBaseInfo, 0); //Gender
			Write16(pBaseInfo, 0); //BornYear
			Write8(pBaseInfo, 0); //Zodiac
			Write32(pBaseInfo, 0); //LocaleCode
			Write32(pBaseInfo, 0); //Flag
			WriteUn(pBaseInfo, 0); //tLastReportTime

			len = pBaseInfo - pPlayerInfo;
			Set16(pPlayerInfo, (WORD)len);
			pPlayerInfo += len;
		}
		Write32(pPlayerInfo, 0); //Exp
		Write32(pPlayerInfo, 0); //RightFlag

		len = pPlayerInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 10862, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestCancelMatchSNSGame(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseCancelMatchSNSGame(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 10863, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestSNSLoverMatch(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseSNSLoverMatch(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 10864, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestCancelSNSLoverMatch(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseCancelSNSLoverMatch(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 10865, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifySNSLoverMatchResult(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //HasInfo
	for (size_t i = 0; i < n; i++)
	{ //Info
		BYTE* pInfo = p;
		Write16(pInfo, 0); //len

		WriteString(pInfo, 0); //Name[]
		{ //BaseInfo
			BYTE* pBaseInfo = pInfo;
			Write16(pBaseInfo, 0); //len

			Write32(pBaseInfo, 0); //Uin
			Write32(pBaseInfo, 0); //RegisterTime
			Write8(pBaseInfo, 0); //Gender
			Write16(pBaseInfo, 0); //BornYear
			Write8(pBaseInfo, 0); //Zodiac
			Write32(pBaseInfo, 0); //LocaleCode
			Write32(pBaseInfo, 0); //Flag
			WriteUn(pBaseInfo, 0); //tLastReportTime

			len = pBaseInfo - pInfo;
			Set16(pInfo, (WORD)len);
			pInfo += len;
		}
		Write32(pInfo, 0); //Exp
		Write32(pInfo, 0); //RightFlag

		len = pInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 10866, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifySnsGameInviteFailed(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ReasonId
	Write32(p, 0); //InviterUin
	Write32(p, 0); //InviteeUin

	len = p - buf;
	SendToClient(Client, 10867, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestReportSNSPlayer(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT TgtUin = Read32(p);

}

void ResponseReportSNSPlayer(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 10868, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestUpdateSNSFlag(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR IsSet = Read8(p);
	UINT Flag = Read32(p);

}

void ResponseUpdateSNSFlag(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //NewFlag

	len = p - buf;
	SendToClient(Client, 10869, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetPlayerSignature(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR Type = Read8(p);
	UINT TgtUin = Read32(p);

}

void ResponseGetPlayerSignature(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //Type
	Write32(p, 0); //DstUin
	Write8(p, 0); //Len

	len = p - buf;
	SendToClient(Client, 378, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestChangeRecommandStatus(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR Idle = Read8(p);

}

void ResponseChangeRecommandStatus(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 275, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyRecommandResult(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //RcmdType
	{ //PlayerSNSInfo
		BYTE* pPlayerSNSInfo = p;
		Write16(pPlayerSNSInfo, 0); //len

		WriteString(pPlayerSNSInfo, 0); //Name[]
		{ //BaseInfo
			BYTE* pBaseInfo = pPlayerSNSInfo;
			Write16(pBaseInfo, 0); //len

			Write32(pBaseInfo, 0); //Uin
			Write32(pBaseInfo, 0); //RegisterTime
			Write8(pBaseInfo, 0); //Gender
			Write16(pBaseInfo, 0); //BornYear
			Write8(pBaseInfo, 0); //Zodiac
			Write32(pBaseInfo, 0); //LocaleCode
			Write32(pBaseInfo, 0); //Flag
			WriteUn(pBaseInfo, 0); //tLastReportTime

			len = pBaseInfo - pPlayerSNSInfo;
			Set16(pPlayerSNSInfo, (WORD)len);
			pPlayerSNSInfo += len;
		}
		Write32(pPlayerSNSInfo, 0); //Exp
		Write32(pPlayerSNSInfo, 0); //RightFlag

		len = pPlayerSNSInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 276, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestReportSnsPanelOpenCount(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT OpenCount = Read32(p);

}

void RequestC2GGetChallengeInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	U Time = ReadU(p);

}

void ResponseC2GGetChallengeInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //CostDayPoint
	Write16(p, 0); //DayPoint
	Write16(p, 0); //DayGuildPoint

	len = p - buf;
	SendToClient(Client, 11210, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GGetGuildChallengeInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	U Time = ReadU(p);
	UINT DstGuildID = Read32(p);
	UCHAR GetExInfo = Read8(p);
	UCHAR GetLog = Read8(p);
	UCHAR Type = Read8(p);

}

void ResponseC2GGetGuildChallengeInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //DstGuildID
	{ //Info
		BYTE* pInfo = p;
		Write16(pInfo, 0); //len

		Write16(pInfo, 0); //MapID
		Write16(pInfo, 0); //Rank
		Write32(pInfo, 0); //UseTime
		Write32(pInfo, 0); //HeroUin
		Write32(pInfo, 0); //KartID
		Write8(pInfo, 0); //HeroNameLen
		Write32(pInfo, 0); //Victory
		Write32(pInfo, 0); //Failure
		Write32(pInfo, 0); //DayChallenge
		Write16(pInfo, 0); //RecentMapID
		Write16(pInfo, 0); //RecentRankID

		len = pInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //Addition
		BYTE* pAddition = p;
		Write16(pAddition, 0); //len

		Write16(pAddition, 0); //ExpAddition
		Write16(pAddition, 0); //WageAddition

		len = pAddition - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasExInfo
	for (size_t i = 0; i < n; i++)
	{ //ExInfo
		BYTE* pExInfo = p;
		Write16(pExInfo, 0); //len

		Write16(pExInfo, 0); //LastSeasonMapID
		Write16(pExInfo, 0); //LastSeasonRank
		Write16(pExInfo, 0); //HistoryBestMapID
		Write16(pExInfo, 0); //HistoryBestRank
		Write32(pExInfo, 0); //TotalVictory
		Write32(pExInfo, 0); //TotalFailure
		Write32(pExInfo, 0); //HateGuildID

		len = pExInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //LogNum
	for (size_t i = 0; i < n; i++)
	{ //Log
		BYTE* pLog = p;
		Write16(pLog, 0); //len

		Write16(pLog, 0); //SeasonID
		Write8(pLog, 0); //Type
		Write32(pLog, 0); //SrcGuildID
		WriteString(pLog, 0); //SrcGuildName[]
		Write32(pLog, 0); //Uin
		WriteString(pLog, 0); //NickName[]
		Write32(pLog, 0); //Kart
		Write16(pLog, 0); //MapID
		Write16(pLog, 0); //RankID
		Write32(pLog, 0); //UseTime
		Write32(pLog, 0); //Time

		len = pLog - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //Type

	len = p - buf;
	SendToClient(Client, 11211, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GGetMapsChallengeInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	U Time = ReadU(p);

}

void ResponseC2GGetMapsChallengeInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //MapNum
	for (size_t i = 0; i < n; i++)
	{ //MapStatus
		BYTE* pMapStatus = p;
		Write16(pMapStatus, 0); //len

		Write16(pMapStatus, 0); //MapID
		Write32(pMapStatus, 0); //ChallengeCnt
		Write16(pMapStatus, 0); //FreeRank
		Write32(pMapStatus, 0); //MaxFiniTime
		Write32(pMapStatus, 0); //MinFiniTime

		len = pMapStatus - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11212, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GGetMapChallengeRank(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	U Time = ReadU(p);
	USHORT MapID = Read16(p);
	USHORT StartRank = Read16(p);
	USHORT EndRank = Read16(p);

}

void ResponseC2GGetMapChallengeRank(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write16(p, 0); //MapID
	Write16(p, 0); //StartRank
	Write16(p, 0); //EndRank
	Write16(p, 0); //TotalCount
	Write16(p, 0); //Count
	for (size_t i = 0; i < n; i++)
	{ //MapRankEntry
		BYTE* pMapRankEntry = p;
		Write16(pMapRankEntry, 0); //len

		Write16(pMapRankEntry, 0); //MapID
		Write16(pMapRankEntry, 0); //Rank
		Write16(pMapRankEntry, 0); //Uin
		Write8(pMapRankEntry, 0); //NameLen
		Write32(pMapRankEntry, 0); //GuildID
		Write8(pMapRankEntry, 0); //GuildNameLen
		Write32(pMapRankEntry, 0); //UseTime
		Write32(pMapRankEntry, 0); //KartID
		Write32(pMapRankEntry, 0); //ShadowFileSize
		Write8(pMapRankEntry, 0); //FileMd5[]
		Write16(pMapRankEntry, 0); //UUidLen
		Write16(pMapRankEntry, 0); //LastUUidLen
		Write32(pMapRankEntry, 0); //UpdateTime
		Write8(pMapRankEntry, 0); //Status
		Write32(pMapRankEntry, 0); //ReportedNum
		Write32(pMapRankEntry, 0); //KeepCnt
		Write32(pMapRankEntry, 0); //ChallengeCnt
		Write8(pMapRankEntry, 0); //EmpMode

		len = pMapRankEntry - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //OtherCount
	for (size_t i = 0; i < n; i++)
	{ //RankState
		BYTE* pRankState = p;
		Write16(pRankState, 0); //len

		Write8(pRankState, 0); //LeapNum

		len = pRankState - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11213, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GGetRecentChallengeMsg(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	U Time = ReadU(p);

}

void ResponseC2GGetRecentChallengeMsg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write8(p, 0); //MsgNum
	for (size_t i = 0; i < n; i++)
	{ //Msg
		BYTE* pMsg = p;
		Write16(pMsg, 0); //len

		Write8(pMsg, 0); //Type
		Write32(pMsg, 0); //Uin
		Write32(pMsg, 0); //GuildID
		Write8(pMsg, 0); //GuildNameLen
		Write8(pMsg, 0); //NameLen
		Write16(pMsg, 0); //SrcMapID
		Write16(pMsg, 0); //SrcRank
		Write32(pMsg, 0); //KartID
		Write16(pMsg, 0); //MapID
		Write16(pMsg, 0); //Rank
		Write32(pMsg, 0); //UseTime
		Write32(pMsg, 0); //Leaps
		Write32(pMsg, 0); //DstGuildID
		Write8(pMsg, 0); //DstGuildNameLen

		len = pMsg - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11214, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyG2CGuildChallengeMsg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	{ //Msg
		BYTE* pMsg = p;
		Write16(pMsg, 0); //len

		Write8(pMsg, 0); //Type
		Write32(pMsg, 0); //Uin
		Write32(pMsg, 0); //GuildID
		Write8(pMsg, 0); //GuildNameLen
		Write8(pMsg, 0); //NameLen
		Write16(pMsg, 0); //SrcMapID
		Write16(pMsg, 0); //SrcRank
		Write32(pMsg, 0); //KartID
		Write16(pMsg, 0); //MapID
		Write16(pMsg, 0); //Rank
		Write32(pMsg, 0); //UseTime
		Write32(pMsg, 0); //Leaps
		Write32(pMsg, 0); //DstGuildID
		Write8(pMsg, 0); //DstGuildNameLen

		len = pMsg - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11215, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestC2GGetMapOwner(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	U Time = ReadU(p);
	USHORT MapID = Read16(p);
	bool Lastest = Read8(p);

}

void ResponseC2GGetMapOwner(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //MapID
	{ //Brief
		BYTE* pBrief = p;
		Write16(pBrief, 0); //len

		Write16(pBrief, 0); //MapID
		Write32(pBrief, 0); //ChallengeCnt
		Write16(pBrief, 0); //FreeRank
		Write32(pBrief, 0); //MaxFiniTime
		Write32(pBrief, 0); //MinFiniTime

		len = pBrief - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasOwner
	for (size_t i = 0; i < n; i++)
	{ //MapOwner
		BYTE* pMapOwner = p;
		Write16(pMapOwner, 0); //len

		Write16(pMapOwner, 0); //Rank
		Write32(pMapOwner, 0); //Uin
		Write8(pMapOwner, 0); //NameLen
		Write32(pMapOwner, 0); //GuildID
		Write8(pMapOwner, 0); //GuildNameLen
		Write32(pMapOwner, 0); //UseTime
		Write32(pMapOwner, 0); //KartID
		Write16(pMapOwner, 0); //UUidLen

		len = pMapOwner - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11216, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GChallenge(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	U Time = ReadU(p);
	USHORT MapID = Read16(p);
	USHORT Rank = Read16(p);
	UCHAR FileMd5Len = Read8(p);

}

void ResponseC2GChallenge(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen
	Write32(p, 0); //Uin
	Write16(p, 0); //MapID
	Write16(p, 0); //Rank
	Write16(p, 0); //LeapCnt
	Write8(p, 0); //QQHelpCardMeet
	Write32(p, 0); //KubiCost
	Write16(p, 0); //QQHelpCardCost
	Write8(p, 0); //HasRankEntry
	for (size_t i = 0; i < n; i++)
	{ //RankEntry
		BYTE* pRankEntry = p;
		Write16(pRankEntry, 0); //len

		Write16(pRankEntry, 0); //MapID
		Write16(pRankEntry, 0); //Rank
		Write16(pRankEntry, 0); //Uin
		Write8(pRankEntry, 0); //NameLen
		Write32(pRankEntry, 0); //GuildID
		Write8(pRankEntry, 0); //GuildNameLen
		Write32(pRankEntry, 0); //UseTime
		Write32(pRankEntry, 0); //KartID
		Write32(pRankEntry, 0); //ShadowFileSize
		Write8(pRankEntry, 0); //FileMd5[]
		Write16(pRankEntry, 0); //UUidLen
		Write16(pRankEntry, 0); //LastUUidLen
		Write32(pRankEntry, 0); //UpdateTime
		Write8(pRankEntry, 0); //Status
		Write32(pRankEntry, 0); //ReportedNum
		Write32(pRankEntry, 0); //KeepCnt
		Write32(pRankEntry, 0); //ChallengeCnt
		Write8(pRankEntry, 0); //EmpMode

		len = pRankEntry - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasStatus
	for (size_t i = 0; i < n; i++)
	{ //QueueStatus
		BYTE* pQueueStatus = p;
		Write16(pQueueStatus, 0); //len

		Write8(pQueueStatus, 0); //FreeRank
		Write16(pQueueStatus, 0); //WaitLoadNum
		Write16(pQueueStatus, 0); //LoadNum
		Write16(pQueueStatus, 0); //WaitChallengeNum
		Write16(pQueueStatus, 0); //ChallengeNum
		Write16(pQueueStatus, 0); //WaitSendNum

		len = pQueueStatus - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11217, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GCancelChallenge(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	U Time = ReadU(p);

}

void ResponseC2GCancelChallenge(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin

	len = p - buf;
	SendToClient(Client, 11218, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyG2CLoadChallengeFile(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //LeapCnt
	Write8(p, 0); //QQHelpCardMeet
	Write32(p, 0); //KubiCost
	Write16(p, 0); //QQHelpCardCost
	{ //RankEntry
		BYTE* pRankEntry = p;
		Write16(pRankEntry, 0); //len

		Write16(pRankEntry, 0); //MapID
		Write16(pRankEntry, 0); //Rank
		Write16(pRankEntry, 0); //Uin
		Write8(pRankEntry, 0); //NameLen
		Write32(pRankEntry, 0); //GuildID
		Write8(pRankEntry, 0); //GuildNameLen
		Write32(pRankEntry, 0); //UseTime
		Write32(pRankEntry, 0); //KartID
		Write32(pRankEntry, 0); //ShadowFileSize
		Write8(pRankEntry, 0); //FileMd5[]
		Write16(pRankEntry, 0); //UUidLen
		Write16(pRankEntry, 0); //LastUUidLen
		Write32(pRankEntry, 0); //UpdateTime
		Write8(pRankEntry, 0); //Status
		Write32(pRankEntry, 0); //ReportedNum
		Write32(pRankEntry, 0); //KeepCnt
		Write32(pRankEntry, 0); //ChallengeCnt
		Write8(pRankEntry, 0); //EmpMode

		len = pRankEntry - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //QueueStatus
		BYTE* pQueueStatus = p;
		Write16(pQueueStatus, 0); //len

		Write8(pQueueStatus, 0); //FreeRank
		Write16(pQueueStatus, 0); //WaitLoadNum
		Write16(pQueueStatus, 0); //LoadNum
		Write16(pQueueStatus, 0); //WaitChallengeNum
		Write16(pQueueStatus, 0); //ChallengeNum
		Write16(pQueueStatus, 0); //WaitSendNum

		len = pQueueStatus - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //UrlLen

	len = p - buf;
	SendToClient(Client, 11219, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyC2GLoadChallengeFileResult(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	WriteU(p, 0); //Time
	Write16(p, 0); //ResultID
	Write8(p, 0); //FileMd5Len

	len = p - buf;
	SendToClient(Client, 11220, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyG2CStartChallenge(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //LeapCnt
	Write32(p, 0); //KubiCost
	Write8(p, 0); //QQHelpCardMeet
	Write16(p, 0); //QQHelpCardCost
	{ //RankEntry
		BYTE* pRankEntry = p;
		Write16(pRankEntry, 0); //len

		Write16(pRankEntry, 0); //MapID
		Write16(pRankEntry, 0); //Rank
		Write16(pRankEntry, 0); //Uin
		Write8(pRankEntry, 0); //NameLen
		Write32(pRankEntry, 0); //GuildID
		Write8(pRankEntry, 0); //GuildNameLen
		Write32(pRankEntry, 0); //UseTime
		Write32(pRankEntry, 0); //KartID
		Write32(pRankEntry, 0); //ShadowFileSize
		Write8(pRankEntry, 0); //FileMd5[]
		Write16(pRankEntry, 0); //UUidLen
		Write16(pRankEntry, 0); //LastUUidLen
		Write32(pRankEntry, 0); //UpdateTime
		Write8(pRankEntry, 0); //Status
		Write32(pRankEntry, 0); //ReportedNum
		Write32(pRankEntry, 0); //KeepCnt
		Write32(pRankEntry, 0); //ChallengeCnt
		Write8(pRankEntry, 0); //EmpMode

		len = pRankEntry - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //QueueStatus
		BYTE* pQueueStatus = p;
		Write16(pQueueStatus, 0); //len

		Write8(pQueueStatus, 0); //FreeRank
		Write16(pQueueStatus, 0); //WaitLoadNum
		Write16(pQueueStatus, 0); //LoadNum
		Write16(pQueueStatus, 0); //WaitChallengeNum
		Write16(pQueueStatus, 0); //ChallengeNum
		Write16(pQueueStatus, 0); //WaitSendNum

		len = pQueueStatus - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //PreUpdateRankLimit
	Write16(p, 0); //SelfMapID

	len = p - buf;
	SendToClient(Client, 11221, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyC2GStartChallengeResult(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	WriteU(p, 0); //Time
	Write8(p, 0); //Ok
	Write8(p, 0); //FileMd5Len

	len = p - buf;
	SendToClient(Client, 11222, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyC2GChallengeBegin(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //NormalLoadTime
	Write32(p, 0); //MapID
	WriteString(p, 0); //MapHash[]
	WriteUn(p, 0); //GameID
	WriteUn(p, 0); //Seed
	Write16(p, 0); //TotalMapRound
	Write32(p, 0); //TimeLimit

	len = p - buf;
	SendToClient(Client, 11223, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyG2CChallengeResult(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //Result
	Write8(p, 0); //ReasonLen
	Write8(p, 0); //HasResult
	for (size_t i = 0; i < n; i++)
	{ //Result
		BYTE* pResult = p;
		Write16(pResult, 0); //len

		Write8(pResult, 0); //PreUpdateRankLimit
		Write16(pResult, 0); //LeapCnt
		Write16(pResult, 0); //QQHelpCardCost
		WriteUn(pResult, 0); //FinTime
		{ //Award
			BYTE* pAward = pResult;
			Write16(pAward, 0); //len

			Write32(pAward, 0); //SuperMoney
			Write32(pAward, 0); //Coupons
			Write32(pAward, 0); //GuildScore
			Write32(pAward, 0); //ItemID
			Write16(pAward, 0); //AwardStrLen
			Write32(pAward, 0); //TotalSuperMoney
			Write32(pAward, 0); //TotalCoupons

			len = pAward - pResult;
			Set16(pResult, (WORD)len);
			pResult += len;
		}

		len = pResult - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11224, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestC2GUpdateChallengeRank(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	U Time = ReadU(p);
	UCHAR ExpectArea = Read8(p);

}

void ResponseC2GUpdateChallengeRank(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 11225, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GCancelUpdateChallengeRank(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	U Time = ReadU(p);

}

void ResponseC2GCancelUpdateChallengeRank(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 11226, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyG2CUpLoadChallengeFile(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //UuidLen
	Write16(p, 0); //AuthInfoLen
	{ //PhyInfo
		BYTE* pPhyInfo = p;
		Write16(pPhyInfo, 0); //len

		WriteU(pPhyInfo, 0); //ExtenalIP
		Write8(pPhyInfo, 0); //ExtTcpPortNum
		Write16(pPhyInfo, 0); //ExternalTcpPort[]
		Write8(pPhyInfo, 0); //ExtUdpPortNum
		Write16(pPhyInfo, 0); //ExternalUdpPort[]

		len = pPhyInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11227, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyG2CUpdateChallengeRankResult(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //Result
	Write8(p, 0); //ReasonLen
	Write8(p, 0); //HasResult
	for (size_t i = 0; i < n; i++)
	{ //Result
		BYTE* pResult = p;
		Write16(pResult, 0); //len

		{ //Award
			BYTE* pAward = pResult;
			Write16(pAward, 0); //len

			Write32(pAward, 0); //SuperMoney
			Write32(pAward, 0); //Coupons
			Write32(pAward, 0); //GuildScore
			Write32(pAward, 0); //ItemID
			Write16(pAward, 0); //AwardStrLen
			Write32(pAward, 0); //TotalSuperMoney
			Write32(pAward, 0); //TotalCoupons

			len = pAward - pResult;
			Set16(pResult, (WORD)len);
			pResult += len;
		}

		len = pResult - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11228, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestC2GLoadFile(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	U Time = ReadU(p);
	UCHAR Cmd = Read8(p);
	USHORT UuidLen = Read16(p);

}

void ResponseC2GLoadFile(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write8(p, 0); //Cmd
	Write16(p, 0); //UrlLen

	len = p - buf;
	SendToClient(Client, 11229, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GChallengeMapRecommend(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	U Time = ReadU(p);

}

void ResponseC2GChallengeMapRecommend(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //SelfRecommend
	for (size_t i = 0; i < n; i++)
	{ //SelfRecommend
		BYTE* pSelfRecommend = p;
		Write16(pSelfRecommend, 0); //len

		Write16(pSelfRecommend, 0); //MapID
		Write32(pSelfRecommend, 0); //ChallengeCnt
		Write16(pSelfRecommend, 0); //FreeRank
		Write32(pSelfRecommend, 0); //MaxFiniTime
		Write32(pSelfRecommend, 0); //MinFiniTime

		len = pSelfRecommend - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //HotRecommend
	for (size_t i = 0; i < n; i++)
	{ //HotRecommend
		BYTE* pHotRecommend = p;
		Write16(pHotRecommend, 0); //len

		Write16(pHotRecommend, 0); //MapID
		Write32(pHotRecommend, 0); //ChallengeCnt
		Write16(pHotRecommend, 0); //FreeRank
		Write32(pHotRecommend, 0); //MaxFiniTime
		Write32(pHotRecommend, 0); //MinFiniTime

		len = pHotRecommend - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //ColdRecommend
	for (size_t i = 0; i < n; i++)
	{ //ColdRecommend
		BYTE* pColdRecommend = p;
		Write16(pColdRecommend, 0); //len

		Write16(pColdRecommend, 0); //MapID
		Write32(pColdRecommend, 0); //ChallengeCnt
		Write16(pColdRecommend, 0); //FreeRank
		Write32(pColdRecommend, 0); //MaxFiniTime
		Write32(pColdRecommend, 0); //MinFiniTime

		len = pColdRecommend - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //SimilarRecommend
	for (size_t i = 0; i < n; i++)
	{ //SimilarRecommend
		BYTE* pSimilarRecommend = p;
		Write16(pSimilarRecommend, 0); //len

		Write16(pSimilarRecommend, 0); //MapID
		Write32(pSimilarRecommend, 0); //ChallengeCnt
		Write16(pSimilarRecommend, 0); //FreeRank
		Write32(pSimilarRecommend, 0); //MaxFiniTime
		Write32(pSimilarRecommend, 0); //MinFiniTime

		len = pSimilarRecommend - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11230, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GChallengeRankRecommend(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	U Time = ReadU(p);

}

void ResponseC2GChallengeRankRecommend(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //Num
	for (size_t i = 0; i < n; i++)
	{ //RankRecommend
		BYTE* pRankRecommend = p;
		Write16(pRankRecommend, 0); //len

		Write16(pRankRecommend, 0); //MapID
		Write16(pRankRecommend, 0); //Rank
		Write8(pRankRecommend, 0); //Type

		len = pRankRecommend - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11231, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyG2CChallengeRankRecommendDetail(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //Num
	for (size_t i = 0; i < n; i++)
	{ //RankRecommend
		BYTE* pRankRecommend = p;
		Write16(pRankRecommend, 0); //len

		Write16(pRankRecommend, 0); //MapID
		Write16(pRankRecommend, 0); //Num
		for (size_t i = 0; i < n; i++)
		{ //RankBrief
			BYTE* pRankBrief = pRankRecommend;
			Write16(pRankBrief, 0); //len

			Write16(pRankBrief, 0); //Rank
			Write32(pRankBrief, 0); //Uin
			Write8(pRankBrief, 0); //NameLen
			Write32(pRankBrief, 0); //GuildID
			Write8(pRankBrief, 0); //GuildNameLen
			Write32(pRankBrief, 0); //UseTime
			Write32(pRankBrief, 0); //KartID
			Write16(pRankBrief, 0); //UUidLen

			len = pRankBrief - pRankRecommend;
			Set16(pRankRecommend, (WORD)len);
			pRankRecommend += len;
		}

		len = pRankRecommend - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11232, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestC2GChallengeCfg(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	U Time = ReadU(p);
	UINT CliAwardVer = Read32(p);
	UINT CliMapVer = Read32(p);
	UINT CliNormalMsgVer = Read32(p);
	UINT CliTemporaryMsgVer = Read32(p);

}

void ResponseC2GChallengeCfg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	{ //BaseCfg
		BYTE* pBaseCfg = p;
		Write16(pBaseCfg, 0); //len

		Write16(pBaseCfg, 0); //SeasonID
		Write32(pBaseCfg, 0); //OpenDate
		Write32(pBaseCfg, 0); //CloseDate
		Write32(pBaseCfg, 0); //OpenTime
		Write32(pBaseCfg, 0); //CloseTime
		Write32(pBaseCfg, 0); //FreezeDate

		len = pBaseCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //SvrAwardVer
	Write8(p, 0); //AwardNum
	for (size_t i = 0; i < n; i++)
	{ //AwardEntry
		BYTE* pAwardEntry = p;
		Write16(pAwardEntry, 0); //len

		Write16(pAwardEntry, 0); //HighRank
		Write16(pAwardEntry, 0); //LowRank
		{ //ChallengeAwardCfg
			BYTE* pChallengeAwardCfg = pAwardEntry;
			Write16(pChallengeAwardCfg, 0); //len

			Write32(pChallengeAwardCfg, 0); //SuperMoney
			Write32(pChallengeAwardCfg, 0); //Coupons
			Write32(pChallengeAwardCfg, 0); //GuildScore
			Write16(pChallengeAwardCfg, 0); //GetBoxPro
			Write32(pChallengeAwardCfg, 0); //ItemID
			Write16(pChallengeAwardCfg, 0); //AwardStrLen

			len = pChallengeAwardCfg - pAwardEntry;
			Set16(pAwardEntry, (WORD)len);
			pAwardEntry += len;
		}
		{ //UpdateRankAwardCfg
			BYTE* pUpdateRankAwardCfg = pAwardEntry;
			Write16(pUpdateRankAwardCfg, 0); //len

			Write32(pUpdateRankAwardCfg, 0); //SuperMoney
			Write32(pUpdateRankAwardCfg, 0); //Coupons
			Write32(pUpdateRankAwardCfg, 0); //GuildScore
			Write16(pUpdateRankAwardCfg, 0); //GetBoxPro
			Write32(pUpdateRankAwardCfg, 0); //ItemID
			Write16(pUpdateRankAwardCfg, 0); //AwardStrLen

			len = pUpdateRankAwardCfg - pAwardEntry;
			Set16(pAwardEntry, (WORD)len);
			pAwardEntry += len;
		}
		Write8(pAwardEntry, 0); //MemTitleLen
		Write16(pAwardEntry, 0); //ExpAdd
		Write16(pAwardEntry, 0); //WageAdd
		Write8(pAwardEntry, 0); //GuildTitleLen

		len = pAwardEntry - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //SvrMapVer
	Write16(p, 0); //MapNum
	for (size_t i = 0; i < n; i++)
	{ //MapEntry
		BYTE* pMapEntry = p;
		Write16(pMapEntry, 0); //len

		Write16(pMapEntry, 0); //MapID
		Write8(pMapEntry, 0); //Open
		Write8(pMapEntry, 0); //New

		len = pMapEntry - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //SvrNormalMsgVer
	Write8(p, 0); //NormalNum
	for (size_t i = 0; i < n; i++)
	{ //Normal
		BYTE* pNormal = p;
		Write16(pNormal, 0); //len

		Write16(pNormal, 0); //Len

		len = pNormal - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //SvrTemporaryMsgVer
	Write8(p, 0); //TemporaryNum
	for (size_t i = 0; i < n; i++)
	{ //Temporary
		BYTE* pTemporary = p;
		Write16(pTemporary, 0); //len

		Write16(pTemporary, 0); //Len

		len = pTemporary - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //TotalRank

	len = p - buf;
	SendToClient(Client, 11233, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GChallengeReport(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	U Time = ReadU(p);
	UCHAR Type = Read8(p);
	USHORT MapID = Read16(p);
	USHORT RankID = Read16(p);
	USHORT UuidLen = Read16(p);
	UINT DstUin = Read32(p);
	char[] DstNickname[] = ReadString(p);

}

void ResponseC2GChallengeReport(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen
	Write8(p, 0); //Type

	len = p - buf;
	SendToClient(Client, 11234, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyAppellationList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //AppellationNum
	for (size_t i = 0; i < n; i++)
	{ //Record
		BYTE* pRecord = p;
		Write16(pRecord, 0); //len

		Write8(pRecord, 0); //Type
		Write8(pRecord, 0); //Level
		Write8(pRecord, 0); //Status
		Write8(pRecord, 0); //Difficulty
		Write32(pRecord, 0); //MapId
		Write32(pRecord, 0); //Value

		len = pRecord - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 1616, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestWearAppellation(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR Type = Read8(p);

}

void ResponseWearAppellation(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultId
	Write8(p, 0); //Type

	len = p - buf;
	SendToClient(Client, 1618, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestUnwearAppellation(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR Type = Read8(p);

}

void ResponseUnwearAppellation(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultId
	Write8(p, 0); //Type

	len = p - buf;
	SendToClient(Client, 1619, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyUpdateAppellation(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //AddNum
	for (size_t i = 0; i < n; i++)
	{ //AddRecord
		BYTE* pAddRecord = p;
		Write16(pAddRecord, 0); //len

		Write8(pAddRecord, 0); //Type
		Write8(pAddRecord, 0); //Level
		Write8(pAddRecord, 0); //Status
		Write8(pAddRecord, 0); //Difficulty
		Write32(pAddRecord, 0); //MapId
		Write32(pAddRecord, 0); //Value

		len = pAddRecord - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //DelNum
	for (size_t i = 0; i < n; i++)
	{ //DelRecord
		BYTE* pDelRecord = p;
		Write16(pDelRecord, 0); //len

		Write8(pDelRecord, 0); //Type
		Write8(pDelRecord, 0); //Level
		Write8(pDelRecord, 0); //Status
		Write8(pDelRecord, 0); //Difficulty
		Write32(pDelRecord, 0); //MapId
		Write32(pDelRecord, 0); //Value

		len = pDelRecord - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //UpdateNum
	for (size_t i = 0; i < n; i++)
	{ //UpdateRecord
		BYTE* pUpdateRecord = p;
		Write16(pUpdateRecord, 0); //len

		Write8(pUpdateRecord, 0); //Type
		Write8(pUpdateRecord, 0); //Level
		Write8(pUpdateRecord, 0); //Status
		Write8(pUpdateRecord, 0); //Difficulty
		Write32(pUpdateRecord, 0); //MapId
		Write32(pUpdateRecord, 0); //Value

		len = pUpdateRecord - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HaveMoneyExpAward
	for (size_t i = 0; i < n; i++)
	{ //AwardMoneyExp
		BYTE* pAwardMoneyExp = p;
		Write16(pAwardMoneyExp, 0); //len

		Write32(pAwardMoneyExp, 0); //Money
		Write32(pAwardMoneyExp, 0); //SuperMoney
		Write32(pAwardMoneyExp, 0); //Exp
		Write32(pAwardMoneyExp, 0); //Charm
		Write32(pAwardMoneyExp, 0); //DanceExp
		Write32(pAwardMoneyExp, 0); //Coupons
		Write32(pAwardMoneyExp, 0); //Admiration
		Write32(pAwardMoneyExp, 0); //LuckMoney
		Write32(pAwardMoneyExp, 0); //TeamWorkExp
		Write32(pAwardMoneyExp, 0); //AchievePoint
		Write32(pAwardMoneyExp, 0); //ConsumeScore
		Write32(pAwardMoneyExp, 0); //HistoryConsumeScore
		Write32(pAwardMoneyExp, 0); //LadderMatchAchievePoint

		len = pAwardMoneyExp - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //AwardItemNum
	for (size_t i = 0; i < n; i++)
	{ //AwardItem
		BYTE* pAwardItem = p;
		Write16(pAwardItem, 0); //len

		Write32(pAwardItem, 0); //ItemID
		Write32(pAwardItem, 0); //ItemNum
		Write32(pAwardItem, 0); //AvailPeriod
		Write8(pAwardItem, 0); //Status
		WriteUn(pAwardItem, 0); //ObtainTime
		Write32(pAwardItem, 0); //OtherAttribute

		len = pAwardItem - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 1620, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyCurrentAppellationInRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write8(p, 0); //HaveAppellation
	for (size_t i = 0; i < n; i++)
	{ //CurAppellation
		BYTE* pCurAppellation = p;
		Write16(pCurAppellation, 0); //len

		Write8(pCurAppellation, 0); //Type
		Write8(pCurAppellation, 0); //Level
		Write8(pCurAppellation, 0); //Status
		Write8(pCurAppellation, 0); //Difficulty
		Write32(pCurAppellation, 0); //MapId
		Write32(pCurAppellation, 0); //Value

		len = pCurAppellation - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 1621, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestKartMaintenance(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int KartID = Read32(p);
	UCHAR Type = Read8(p);

}

void ResponseKartMaintenance(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //KartID
	Write8(p, 0); //Type
	Write32(p, 0); //CurPeriod
	Write32(p, 0); //IncPeriod

	len = p - buf;
	SendToClient(Client, 10910, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestConsoleCmd(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT MsgLen = Read16(p);

}

void ResponseConsoleCmd(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //MsgLen

	len = p - buf;
	SendToClient(Client, 652, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestReportNewPlayerTutorStatistic(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	Un Time = ReadUn(p);
	UINT TaskID = Read32(p);

}

void RequestGetPhantomN2O(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT LapTime = Read32(p);
	int[] CurPosition[] = Read32(p);
	USHORT Idx = Read16(p);

}

void NotifyGetPhantomN2O(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //Idx

	len = p - buf;
	SendToClient(Client, 10916, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestStartPhantomN2OJet(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT LapTime = Read32(p);
	USHORT JetType = Read16(p);
	UINT SJetSeq = Read32(p);

}

void RequestEndPhantomN2OJet(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT LapTime = Read32(p);
	USHORT JetType = Read16(p);
	UINT SJetSeq = Read32(p);

}

void NotifyClientUpdateNobleInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	{ //NobleInfo
		BYTE* pNobleInfo = p;
		Write16(pNobleInfo, 0); //len

		Write32(pNobleInfo, 0); //NobleID
		Write8(pNobleInfo, 0); //NobleLevel
		Write32(pNobleInfo, 0); //NoblePoint
		Write32(pNobleInfo, 0); //NobleLeftDays

		len = pNobleInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 961, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyCustomMapList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	{ //CustomMapList
		BYTE* pCustomMapList = p;
		Write16(pCustomMapList, 0); //len

		Write8(pCustomMapList, 0); //RandType
		Write8(pCustomMapList, 0); //MapNum
		Write32(pCustomMapList, 0); //MapList[]

		len = pCustomMapList - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 631, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestUpdateCustomMapList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	{ //CustomMapList
		BYTE* pCustomMapList = p;
		len = Read16(pCustomMapList);

		UCHAR RandType = Read8(pCustomMapList);
		UCHAR MapNum = Read8(pCustomMapList);
		UINT[] MapList[] = Read32(pCustomMapList);

		p += len;
	}

}

void ResponseUpdateCustomMapList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 1651, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestChangeFishingStatus(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR FishingStatus = Read8(p);

}

void ResponseChangeFishingStatus(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //FishingStatus

	len = p - buf;
	SendToClient(Client, 11400, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyChangeFishingStatus(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write8(p, 0); //FishingStatus

	len = p - buf;
	SendToClient(Client, 11401, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyFishingResult(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	{ //FishingAward
		BYTE* pFishingAward = p;
		Write16(pFishingAward, 0); //len

		Write8(pFishingAward, 0); //FishingAwardType
		Write32(pFishingAward, 0); //AwardItemID
		Write8(pFishingAward, 0); //AwardItemNum

		len = pFishingAward - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11402, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyDragonBallQTEBegin(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin

	len = p - buf;
	SendToClient(Client, 11403, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestReportDragonBallQTEResult(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT ResultID = Read16(p);

}

void RequestRoastFish(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int ExchangeID = Read32(p);
	USHORT ExchangeTimes = Read16(p);

}

void ResponseRoastFish(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 11405, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyFBInitInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //TotalTime
	Write8(p, 0); //TargetNum
	for (size_t i = 0; i < n; i++)
	{ //Target
		BYTE* pTarget = p;
		Write16(pTarget, 0); //len

		{ //ID
			BYTE* pID = pTarget;
			Write16(pID, 0); //len

			Write8(pID, 0); //Type
			Write32(pID, 0); //ID

			len = pID - pTarget;
			Set16(pTarget, (WORD)len);
			pTarget += len;
		}
		{ //StaticInfo
			BYTE* pStaticInfo = pTarget;
			Write16(pStaticInfo, 0); //len

			Write32(pStaticInfo, 0); //MaxHP
			Write32(pStaticInfo, 0); //Rate

			len = pStaticInfo - pTarget;
			Set16(pTarget, (WORD)len);
			pTarget += len;
		}
		{ //DynamicInfo
			BYTE* pDynamicInfo = pTarget;
			Write16(pDynamicInfo, 0); //len

			Write32(pDynamicInfo, 0); //HP
			Write8(pDynamicInfo, 0); //Status
			Write8(pDynamicInfo, 0); //DeadTimes
			Write8(pDynamicInfo, 0); //Flag
			Write32(pDynamicInfo, 0); //Damage

			len = pDynamicInfo - pTarget;
			Set16(pTarget, (WORD)len);
			pTarget += len;
		}

		len = pTarget - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11362, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestFBReportTrigger(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int TriggerID = Read32(p);
	int TriggerPara = Read32(p);

}

void RequestFBReportPlayerEvent(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int SkillID = Read32(p);
	int GPID = Read32(p);

}

void RequestFBReportBossEvent(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int SkillID = Read32(p);
	int SkillPower = Read32(p);
	int SkillPara = Read32(p);
	int SkillNum = Read32(p);

}

void NotifyFBPlayerEvent(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //Time
	Write32(p, 0); //SkillID
	Write32(p, 0); //GPID

	len = p - buf;
	SendToClient(Client, 11366, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyFBBossEvent(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //Time
	Write32(p, 0); //SkillID
	Write32(p, 0); //SkillPower
	Write32(p, 0); //SkillPara

	len = p - buf;
	SendToClient(Client, 11367, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyFBAction(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //ActionID
	Write8(p, 0); //TargetNum
	for (size_t i = 0; i < n; i++)
	{ //Target
		BYTE* pTarget = p;
		Write16(pTarget, 0); //len

		Write8(pTarget, 0); //Type
		Write32(pTarget, 0); //ID

		len = pTarget - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //ActionPara

	len = p - buf;
	SendToClient(Client, 11368, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyFBStatus(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //TWValue
	Write32(p, 0); //SrcUin
	Write8(p, 0); //TargetNum
	for (size_t i = 0; i < n; i++)
	{ //ChangeInfo
		BYTE* pChangeInfo = p;
		Write16(pChangeInfo, 0); //len

		{ //ID
			BYTE* pID = pChangeInfo;
			Write16(pID, 0); //len

			Write8(pID, 0); //Type
			Write32(pID, 0); //ID

			len = pID - pChangeInfo;
			Set16(pChangeInfo, (WORD)len);
			pChangeInfo += len;
		}
		{ //DynamicInfo
			BYTE* pDynamicInfo = pChangeInfo;
			Write16(pDynamicInfo, 0); //len

			Write32(pDynamicInfo, 0); //HP
			Write8(pDynamicInfo, 0); //Status
			Write8(pDynamicInfo, 0); //DeadTimes
			Write8(pDynamicInfo, 0); //Flag
			Write32(pDynamicInfo, 0); //Damage

			len = pDynamicInfo - pChangeInfo;
			Set16(pChangeInfo, (WORD)len);
			pChangeInfo += len;
		}

		len = pChangeInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11369, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyFBRaceOver(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //Result
	{ //RoomInfo
		BYTE* pRoomInfo = p;
		Write16(pRoomInfo, 0); //len

		Write8(pRoomInfo, 0); //AvailableLev
		Write8(pRoomInfo, 0); //Lev
		Write8(pRoomInfo, 0); //SubLev
		Write32(pRoomInfo, 0); //BossID
		Write8(pRoomInfo, 0); //FBSeason

		len = pRoomInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //PlayerNum
	for (size_t i = 0; i < n; i++)
	{ //Score
		BYTE* pScore = p;
		Write16(pScore, 0); //len

		Write32(pScore, 0); //Uin
		Write8(pScore, 0); //Flag
		Write8(pScore, 0); //Rank
		Write32(pScore, 0); //Damage
		Write32(pScore, 0); //MoneyInc
		Write32(pScore, 0); //MoneyTotal
		Write32(pScore, 0); //ExpInc
		Write32(pScore, 0); //ExpTotal
		Write8(pScore, 0); //AwardItemNum
		for (size_t i = 0; i < n; i++)
		{ //AwardItems
			BYTE* pAwardItems = pScore;
			Write16(pAwardItems, 0); //len

			Write32(pAwardItems, 0); //ItemID
			Write32(pAwardItems, 0); //ItemNum
			Write32(pAwardItems, 0); //AvailPeriod
			Write8(pAwardItems, 0); //Status
			WriteUn(pAwardItems, 0); //ObtainTime
			Write32(pAwardItems, 0); //OtherAttribute

			len = pAwardItems - pScore;
			Set16(pScore, (WORD)len);
			pScore += len;
		}
		Write8(pScore, 0); //HasBattleModeResult
		for (size_t i = 0; i < n; i++)
		{ //BattleModeResult
			BYTE* pBattleModeResult = pScore;
			Write16(pBattleModeResult, 0); //len

			Write32(pBattleModeResult, 0); //Score
			Write32(pBattleModeResult, 0); //MaximumBatter
			Write32(pBattleModeResult, 0); //KillLittleMonstersNum

			len = pBattleModeResult - pScore;
			Set16(pScore, (WORD)len);
			pScore += len;
		}

		len = pScore - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11370, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyFBGenPropBox(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //PropPositionNO

	len = p - buf;
	SendToClient(Client, 11371, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetPlayerEventCfg(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetPlayerEventCfg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //GetFriendsEventInterval
	Write32(p, 0); //GetOtherEventInterval
	Write32(p, 0); //FilterTimeLimit

	len = p - buf;
	SendToClient(Client, 11451, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetPlayerEvent(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR TargetType = Read8(p);
	UCHAR TimeType = Read8(p);
	USHORT TarGetNum = Read16(p);
	for (size_t i = 0; i < n; i++)
	{ //TarGetInfo
		BYTE* pTarGetInfo = p;
		len = Read16(pTarGetInfo);

		UINT Uin = Read32(pTarGetInfo);
		UINT EventID = Read32(pTarGetInfo);

		p += len;
	}

}

void ResponseGetPlayerEvent(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //TargetType
	Write8(p, 0); //TimeType
	Write16(p, 0); //Num
	for (size_t i = 0; i < n; i++)
	{ //Event
		BYTE* pEvent = p;
		Write16(pEvent, 0); //len

		Write32(pEvent, 0); //Uin
		Write8(pEvent, 0); //Type
		Write32(pEvent, 0); //EventID
		Write8(pEvent, 0); //IntNum
		Write32(pEvent, 0); //Para[]
		Write8(pEvent, 0); //ShortNum
		Write16(pEvent, 0); //Para[]
		WriteU(pEvent, 0); //StrNum
		for (size_t i = 0; i < n; i++)
		{ //Para
			BYTE* pPara = pEvent;
			Write16(pPara, 0); //len

			WriteString(pPara, 0); //Str[]

			len = pPara - pEvent;
			Set16(pEvent, (WORD)len);
			pEvent += len;
		}
		Write32(pEvent, 0); //Time

		len = pEvent - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11452, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestReadPlayerEvent(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT TarGetNum = Read16(p);
	for (size_t i = 0; i < n; i++)
	{ //TarGetInfo
		BYTE* pTarGetInfo = p;
		len = Read16(pTarGetInfo);

		UINT Uin = Read32(pTarGetInfo);
		UINT EventID = Read32(pTarGetInfo);

		p += len;
	}

}

void ResponseReadPlayerEvent(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 11453, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestChangeFocus(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR Op = Read8(p);
	UINT FriendUin = Read32(p);

}

void ResponseChangeFocus(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //Op
	Write32(p, 0); //FriendUin

	len = p - buf;
	SendToClient(Client, 11454, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestStartChallengeFriend(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	UINT DstUin = Read32(p);
	int DstMapID = Read32(p);
	UINT DstTime = Read32(p);

}

void ResponseStartChallengeFriend(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //DstUin
	Write32(p, 0); //DstMapID
	Write32(p, 0); //DstTime

	len = p - buf;
	SendToClient(Client, 11455, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestEndChallengeFriend(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	UINT DstUin = Read32(p);
	int DstMapID = Read32(p);
	UINT DstTime = Read32(p);
	int Time = Read32(p);
	char[] DstName[] = ReadString(p);

}

void ResponseEndChallengeFriend(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 11456, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifySpeed2Cfg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //MapEffectMaskNum
	for (size_t i = 0; i < n; i++)
	{ //MapEffectMask
		BYTE* pMapEffectMask = p;
		Write16(pMapEffectMask, 0); //len

		Write16(pMapEffectMask, 0); //MapID
		Write32(pMapEffectMask, 0); //EffectMask

		len = pMapEffectMask - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //Speed2ShopLimit
	Write32(p, 0); //OpenFlag

	len = p - buf;
	SendToClient(Client, 11358, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestChangeModel(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	BYTE NewModel = Read8(p);

}

void ResponseChangeModel(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ReasonLen
	Write8(p, 0); //NewModel

	len = p - buf;
	SendToClient(Client, 277, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyChangeModel(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write8(p, 0); //NewModel

	len = p - buf;
	SendToClient(Client, 278, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestEnlistGuildMember(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT DstUin = Read32(p);

}

void ResponseEnlistGuildMember(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write32(p, 0); //DstUin
	Write8(p, 0); //EnlistNum
	Write8(p, 0); //MaxAwardNum
	Write8(p, 0); //HasAward
	Write32(p, 0); //AwardExp
	Write32(p, 0); //AwardGuildScore

	len = p - buf;
	SendToClient(Client, 300, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestModifyGuildName(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	char[] DstGuildName[] = ReadString(p);

}

void ResponseModifyGuildName(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen
	WriteString(p, 0); //DstGuildName[]

	len = p - buf;
	SendToClient(Client, 288, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyGUMCModifyGuildName(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //DstGuildID
	WriteString(p, 0); //DstGuildName[]

	len = p - buf;
	SendToClient(Client, 15235, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetSpringInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetSpringInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //LeftSpringTime
	Write16(p, 0); //LeftBatheCount

	len = p - buf;
	SendToClient(Client, 280, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestEnterSpring(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseEnterSpring(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 281, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestLeaveSpring(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseLeaveSpring(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 282, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyLeaveSpring(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin

	len = p - buf;
	SendToClient(Client, 287, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifySpringHoleInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //SpringHoleNum
	for (size_t i = 0; i < n; i++)
	{ //SpringHole
		BYTE* pSpringHole = p;
		Write16(pSpringHole, 0); //len

		Write32(pSpringHole, 0); //Posion[]

		len = pSpringHole - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 283, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyBatheAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	{ //Award
		BYTE* pAward = p;
		Write16(pAward, 0); //len

		Write32(pAward, 0); //Exp
		Write32(pAward, 0); //Money
		Write32(pAward, 0); //SuperMoney
		Write16(pAward, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAward;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute

			len = pItemInfo - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write32(pAward, 0); //Coupons
		Write32(pAward, 0); //GuildPoint
		Write32(pAward, 0); //LuckMoney

		len = pAward - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //LeftBatheCount

	len = p - buf;
	SendToClient(Client, 284, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyOutDoorEggDisappear(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //EggNumber
	for (size_t i = 0; i < n; i++)
	{ //EggInfo
		BYTE* pEggInfo = p;
		Write16(pEggInfo, 0); //len

		WriteUn(pEggInfo, 0); //EggPosition
		Write32(pEggInfo, 0); //EggTypeID

		len = pEggInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 285, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyEnterSpring(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin

	len = p - buf;
	SendToClient(Client, 286, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestCrashModeIncEgg(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT LapTime = Read32(p);
	UCHAR Type = Read8(p);
	UCHAR IncNum = Read8(p);
	UCHAR TotalNum = Read8(p);

}

void RequestCrashModeDecEgg(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT LapTime = Read32(p);
	UCHAR Type = Read8(p);
	UCHAR DecNum = Read8(p);
	UCHAR TotalNum = Read8(p);

}

void RequestChangeCrashModeSponsor(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR SponsorID = Read8(p);

}

void ResponseChangeCrashModeSponsor(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //CurSponsorID

	len = p - buf;
	SendToClient(Client, 10922, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestWorldOnlineInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseWorldOnlineInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //UpdateOnlineInfoInterval
	{ //Info
		BYTE* pInfo = p;
		Write16(pInfo, 0); //len

		Write8(pInfo, 0); //CountryCount
		for (size_t i = 0; i < n; i++)
		{ //CountryInfo
			BYTE* pCountryInfo = pInfo;
			Write16(pCountryInfo, 0); //len

			Write8(pCountryInfo, 0); //CountryID
			Write8(pCountryInfo, 0); //ChannelNum
			for (size_t i = 0; i < n; i++)
			{ //ChannelInfo
				BYTE* pChannelInfo = pCountryInfo;
				Write16(pChannelInfo, 0); //len

				Write8(pChannelInfo, 0); //ChannelID
				Write8(pChannelInfo, 0); //IDCNum
				for (size_t i = 0; i < n; i++)
				{ //IDCServerInfo
					BYTE* pIDCServerInfo = pChannelInfo;
					Write16(pIDCServerInfo, 0); //len

					Write16(pIDCServerInfo, 0); //LocationID
					Write8(pIDCServerInfo, 0); //GameServerNum
					for (size_t i = 0; i < n; i++)
					{ //GameServerInfo
						BYTE* pGameServerInfo = pIDCServerInfo;
						Write16(pGameServerInfo, 0); //len

						Write32(pGameServerInfo, 0); //ServerID
						Write16(pGameServerInfo, 0); //MaxPlayerNum
						Write16(pGameServerInfo, 0); //CurrentPlayerNum
						Write8(pGameServerInfo, 0); //PlayerIncPerSec
						Write32(pGameServerInfo, 0); //ServerIP
						Write16(pGameServerInfo, 0); //TcpPort
						Write16(pGameServerInfo, 0); //UdpPort
						Write32(pGameServerInfo, 0); //RandomKey

						len = pGameServerInfo - pIDCServerInfo;
						Set16(pIDCServerInfo, (WORD)len);
						pIDCServerInfo += len;
					}

					len = pIDCServerInfo - pChannelInfo;
					Set16(pChannelInfo, (WORD)len);
					pChannelInfo += len;
				}

				len = pChannelInfo - pCountryInfo;
				Set16(pCountryInfo, (WORD)len);
				pCountryInfo += len;
			}

			len = pCountryInfo - pInfo;
			Set16(pInfo, (WORD)len);
			pInfo += len;
		}
		Write8(pInfo, 0); //BorderServerCount
		for (size_t i = 0; i < n; i++)
		{ //BorderServerInfo
			BYTE* pBorderServerInfo = pInfo;
			Write16(pBorderServerInfo, 0); //len

			Write16(pBorderServerInfo, 0); //LocationID
			{ //OnlineInfo
				BYTE* pOnlineInfo = pBorderServerInfo;
				Write16(pOnlineInfo, 0); //len

				Write32(pOnlineInfo, 0); //ServerID
				Write16(pOnlineInfo, 0); //MaxPlayerNum
				Write16(pOnlineInfo, 0); //CurrentPlayerNum
				Write8(pOnlineInfo, 0); //PlayerIncPerSec
				Write32(pOnlineInfo, 0); //ServerIP
				Write16(pOnlineInfo, 0); //TcpPort
				Write16(pOnlineInfo, 0); //UdpPort
				Write32(pOnlineInfo, 0); //RandomKey

				len = pOnlineInfo - pBorderServerInfo;
				Set16(pBorderServerInfo, (WORD)len);
				pBorderServerInfo += len;
			}

			len = pBorderServerInfo - pInfo;
			Set16(pInfo, (WORD)len);
			pInfo += len;
		}
		Write8(pInfo, 0); //MatchServerCount
		for (size_t i = 0; i < n; i++)
		{ //MatchServerInfo
			BYTE* pMatchServerInfo = pInfo;
			Write16(pMatchServerInfo, 0); //len

			Write16(pMatchServerInfo, 0); //LocationID
			{ //OnlineInfo
				BYTE* pOnlineInfo = pMatchServerInfo;
				Write16(pOnlineInfo, 0); //len

				Write32(pOnlineInfo, 0); //ServerID
				Write16(pOnlineInfo, 0); //MaxPlayerNum
				Write16(pOnlineInfo, 0); //CurrentPlayerNum
				Write8(pOnlineInfo, 0); //PlayerIncPerSec
				Write32(pOnlineInfo, 0); //ServerIP
				Write16(pOnlineInfo, 0); //TcpPort
				Write16(pOnlineInfo, 0); //UdpPort
				Write32(pOnlineInfo, 0); //RandomKey

				len = pOnlineInfo - pMatchServerInfo;
				Set16(pMatchServerInfo, (WORD)len);
				pMatchServerInfo += len;
			}

			len = pMatchServerInfo - pInfo;
			Set16(pInfo, (WORD)len);
			pInfo += len;
		}
		Write8(pInfo, 0); //RelaxServerCount
		for (size_t i = 0; i < n; i++)
		{ //RelaxServerInfo
			BYTE* pRelaxServerInfo = pInfo;
			Write16(pRelaxServerInfo, 0); //len

			Write16(pRelaxServerInfo, 0); //LocationID
			{ //OnlineInfo
				BYTE* pOnlineInfo = pRelaxServerInfo;
				Write16(pOnlineInfo, 0); //len

				Write32(pOnlineInfo, 0); //ServerID
				Write16(pOnlineInfo, 0); //MaxPlayerNum
				Write16(pOnlineInfo, 0); //CurrentPlayerNum
				Write8(pOnlineInfo, 0); //PlayerIncPerSec
				Write32(pOnlineInfo, 0); //ServerIP
				Write16(pOnlineInfo, 0); //TcpPort
				Write16(pOnlineInfo, 0); //UdpPort
				Write32(pOnlineInfo, 0); //RandomKey

				len = pOnlineInfo - pRelaxServerInfo;
				Set16(pRelaxServerInfo, (WORD)len);
				pRelaxServerInfo += len;
			}

			len = pRelaxServerInfo - pInfo;
			Set16(pInfo, (WORD)len);
			pInfo += len;
		}
		Write8(pInfo, 0); //TeamServerCount
		for (size_t i = 0; i < n; i++)
		{ //TeamServerInfo
			BYTE* pTeamServerInfo = pInfo;
			Write16(pTeamServerInfo, 0); //len

			Write16(pTeamServerInfo, 0); //LocationID
			{ //OnlineInfo
				BYTE* pOnlineInfo = pTeamServerInfo;
				Write16(pOnlineInfo, 0); //len

				Write32(pOnlineInfo, 0); //ServerID
				Write16(pOnlineInfo, 0); //MaxPlayerNum
				Write16(pOnlineInfo, 0); //CurrentPlayerNum
				Write8(pOnlineInfo, 0); //PlayerIncPerSec
				Write32(pOnlineInfo, 0); //ServerIP
				Write16(pOnlineInfo, 0); //TcpPort
				Write16(pOnlineInfo, 0); //UdpPort
				Write32(pOnlineInfo, 0); //RandomKey

				len = pOnlineInfo - pTeamServerInfo;
				Set16(pTeamServerInfo, (WORD)len);
				pTeamServerInfo += len;
			}

			len = pTeamServerInfo - pInfo;
			Set16(pInfo, (WORD)len);
			pInfo += len;
		}
		Write8(pInfo, 0); //DanceServerCount
		for (size_t i = 0; i < n; i++)
		{ //DanceServerInfo
			BYTE* pDanceServerInfo = pInfo;
			Write16(pDanceServerInfo, 0); //len

			Write16(pDanceServerInfo, 0); //LocationID
			{ //OnlineInfo
				BYTE* pOnlineInfo = pDanceServerInfo;
				Write16(pOnlineInfo, 0); //len

				Write32(pOnlineInfo, 0); //ServerID
				Write16(pOnlineInfo, 0); //MaxPlayerNum
				Write16(pOnlineInfo, 0); //CurrentPlayerNum
				Write8(pOnlineInfo, 0); //PlayerIncPerSec
				Write32(pOnlineInfo, 0); //ServerIP
				Write16(pOnlineInfo, 0); //TcpPort
				Write16(pOnlineInfo, 0); //UdpPort
				Write32(pOnlineInfo, 0); //RandomKey

				len = pOnlineInfo - pDanceServerInfo;
				Set16(pDanceServerInfo, (WORD)len);
				pDanceServerInfo += len;
			}

			len = pDanceServerInfo - pInfo;
			Set16(pInfo, (WORD)len);
			pInfo += len;
		}
		Write8(pInfo, 0); //SlideServerCount
		for (size_t i = 0; i < n; i++)
		{ //SlideServerInfo
			BYTE* pSlideServerInfo = pInfo;
			Write16(pSlideServerInfo, 0); //len

			Write16(pSlideServerInfo, 0); //LocationID
			{ //OnlineInfo
				BYTE* pOnlineInfo = pSlideServerInfo;
				Write16(pOnlineInfo, 0); //len

				Write32(pOnlineInfo, 0); //ServerID
				Write16(pOnlineInfo, 0); //MaxPlayerNum
				Write16(pOnlineInfo, 0); //CurrentPlayerNum
				Write8(pOnlineInfo, 0); //PlayerIncPerSec
				Write32(pOnlineInfo, 0); //ServerIP
				Write16(pOnlineInfo, 0); //TcpPort
				Write16(pOnlineInfo, 0); //UdpPort
				Write32(pOnlineInfo, 0); //RandomKey

				len = pOnlineInfo - pSlideServerInfo;
				Set16(pSlideServerInfo, (WORD)len);
				pSlideServerInfo += len;
			}

			len = pSlideServerInfo - pInfo;
			Set16(pInfo, (WORD)len);
			pInfo += len;
		}
		Write8(pInfo, 0); //FBServerCount
		for (size_t i = 0; i < n; i++)
		{ //FBServerInfo
			BYTE* pFBServerInfo = pInfo;
			Write16(pFBServerInfo, 0); //len

			Write16(pFBServerInfo, 0); //LocationID
			{ //OnlineInfo
				BYTE* pOnlineInfo = pFBServerInfo;
				Write16(pOnlineInfo, 0); //len

				Write32(pOnlineInfo, 0); //ServerID
				Write16(pOnlineInfo, 0); //MaxPlayerNum
				Write16(pOnlineInfo, 0); //CurrentPlayerNum
				Write8(pOnlineInfo, 0); //PlayerIncPerSec
				Write32(pOnlineInfo, 0); //ServerIP
				Write16(pOnlineInfo, 0); //TcpPort
				Write16(pOnlineInfo, 0); //UdpPort
				Write32(pOnlineInfo, 0); //RandomKey

				len = pOnlineInfo - pFBServerInfo;
				Set16(pFBServerInfo, (WORD)len);
				pFBServerInfo += len;
			}

			len = pFBServerInfo - pInfo;
			Set16(pInfo, (WORD)len);
			pInfo += len;
		}
		Write8(pInfo, 0); //WlMatchSvrCount
		for (size_t i = 0; i < n; i++)
		{ //WlMatchSvrInfo
			BYTE* pWlMatchSvrInfo = pInfo;
			Write16(pWlMatchSvrInfo, 0); //len

			Write16(pWlMatchSvrInfo, 0); //LocationID
			{ //OnlineInfo
				BYTE* pOnlineInfo = pWlMatchSvrInfo;
				Write16(pOnlineInfo, 0); //len

				Write32(pOnlineInfo, 0); //ServerID
				Write16(pOnlineInfo, 0); //MaxPlayerNum
				Write16(pOnlineInfo, 0); //CurrentPlayerNum
				Write8(pOnlineInfo, 0); //PlayerIncPerSec
				Write32(pOnlineInfo, 0); //ServerIP
				Write16(pOnlineInfo, 0); //TcpPort
				Write16(pOnlineInfo, 0); //UdpPort
				Write32(pOnlineInfo, 0); //RandomKey

				len = pOnlineInfo - pWlMatchSvrInfo;
				Set16(pWlMatchSvrInfo, (WORD)len);
				pWlMatchSvrInfo += len;
			}

			len = pWlMatchSvrInfo - pInfo;
			Set16(pInfo, (WORD)len);
			pInfo += len;
		}
		Write8(pInfo, 0); //SkateServerCount
		for (size_t i = 0; i < n; i++)
		{ //SkateServerInfo
			BYTE* pSkateServerInfo = pInfo;
			Write16(pSkateServerInfo, 0); //len

			Write16(pSkateServerInfo, 0); //LocationID
			{ //OnlineInfo
				BYTE* pOnlineInfo = pSkateServerInfo;
				Write16(pOnlineInfo, 0); //len

				Write32(pOnlineInfo, 0); //ServerID
				Write16(pOnlineInfo, 0); //MaxPlayerNum
				Write16(pOnlineInfo, 0); //CurrentPlayerNum
				Write8(pOnlineInfo, 0); //PlayerIncPerSec
				Write32(pOnlineInfo, 0); //ServerIP
				Write16(pOnlineInfo, 0); //TcpPort
				Write16(pOnlineInfo, 0); //UdpPort
				Write32(pOnlineInfo, 0); //RandomKey

				len = pOnlineInfo - pSkateServerInfo;
				Set16(pSkateServerInfo, (WORD)len);
				pSkateServerInfo += len;
			}

			len = pSkateServerInfo - pInfo;
			Set16(pInfo, (WORD)len);
			pInfo += len;
		}

		len = pInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 1400, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GGetSpecialTaskData(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseC2GGetSpecialTaskData(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //Num
	for (size_t i = 0; i < n; i++)
	{ //Data
		BYTE* pData = p;
		Write16(pData, 0); //len

		Write32(pData, 0); //TaskID
		Write8(pData, 0); //Num
		for (size_t i = 0; i < n; i++)
		{ //Data
			BYTE* pData = pData;
			Write16(pData, 0); //len

			Write8(pData, 0); //Num
			for (size_t i = 0; i < n; i++)
			{ //Data
				BYTE* pData = pData;
				Write16(pData, 0); //len

				Write8(pData, 0); //Num
				Write32(pData, 0); //ID[]

				len = pData - pData;
				Set16(pData, (WORD)len);
				pData += len;
			}

			len = pData - pData;
			Set16(pData, (WORD)len);
			pData += len;
		}

		len = pData - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 231, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GUpdateSpecialTaskProgress(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int TaskID = Read32(p);
	int Progress = Read32(p);

}

void ResponseC2GUpdateSpecialTaskProgress(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //Result

	len = p - buf;
	SendToClient(Client, 232, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyFizzStarTaskComplete(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	{ //FizzStarTaskResult
		BYTE* pFizzStarTaskResult = p;
		Write16(pFizzStarTaskResult, 0); //len

		Write32(pFizzStarTaskResult, 0); //Uin
		Write32(pFizzStarTaskResult, 0); //TaskId
		Write8(pFizzStarTaskResult, 0); //FizzStarTaskFinishResult
		Write8(pFizzStarTaskResult, 0); //HasFriendAddition
		Write32(pFizzStarTaskResult, 0); //LeftTaskAwardMultipleCount

		len = pFizzStarTaskResult - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 11598, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyUpdateGuildScore(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //GuildSocreInc
	Write16(p, 0); //PrefixStringLen

	len = p - buf;
	SendToClient(Client, 12041, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestUseSpecialProp(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	short PropID = Read16(p);
	int PropIndex = Read32(p);
	bool ActiveTriggerFlag = Read8(p);

}

void ResponseUseSpecialProp(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write16(p, 0); //PropID
	Write32(p, 0); //PropIndex
	Write8(p, 0); //ActiveTriggerFlag

	len = p - buf;
	SendToClient(Client, 11636, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyUseSpecialProp(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //PropID
	Write32(p, 0); //PropIndex
	Write8(p, 0); //ActiveTriggerFlag

	len = p - buf;
	SendToClient(Client, 11637, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyCrazyPropAchieve(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write8(p, 0); //CrazyPropAchieveNum
	Write32(p, 0); //CrazyPropAchieve[]

	len = p - buf;
	SendToClient(Client, 11638, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyMusicBlackList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //AddressNum
	for (size_t i = 0; i < n; i++)
	{ //Address
		BYTE* pAddress = p;
		Write16(pAddress, 0); //len

		Write16(pAddress, 0); //Len

		len = pAddress - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //IDNum
	Write32(p, 0); //ID[]

	len = p - buf;
	SendToClient(Client, 952, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyPopularityChange(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //DstUin
	Write32(p, 0); //TotoalPopularity
	Write32(p, 0); //ChangePopularity

	len = p - buf;
	SendToClient(Client, 1701, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyPlayerUpdateLadderMatchInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	{ //PlayerLDMBaseInfo
		BYTE* pPlayerLDMBaseInfo = p;
		Write16(pPlayerLDMBaseInfo, 0); //len

		Write8(pPlayerLDMBaseInfo, 0); //Grade
		Write32(pPlayerLDMBaseInfo, 0); //Score
		Write32(pPlayerLDMBaseInfo, 0); //MaxScore
		Write32(pPlayerLDMBaseInfo, 0); //MaxGrade

		len = pPlayerLDMBaseInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //PlayerLDMDetailInfo
		BYTE* pPlayerLDMDetailInfo = p;
		Write16(pPlayerLDMDetailInfo, 0); //len

		Write8(pPlayerLDMDetailInfo, 0); //NextGrade
		Write32(pPlayerLDMDetailInfo, 0); //NextGradeLeftScore
		{ //RankInfo
			BYTE* pRankInfo = pPlayerLDMDetailInfo;
			Write16(pRankInfo, 0); //len

			Write8(pRankInfo, 0); //RankType
			Write8(pRankInfo, 0); //RankValue

			len = pRankInfo - pPlayerLDMDetailInfo;
			Set16(pPlayerLDMDetailInfo, (WORD)len);
			pPlayerLDMDetailInfo += len;
		}
		Write8(pPlayerLDMDetailInfo, 0); //BadgeType
		Write32(pPlayerLDMDetailInfo, 0); //MatchCount
		Write32(pPlayerLDMDetailInfo, 0); //WinCount
		Write32(pPlayerLDMDetailInfo, 0); //WinStreakCount
		Write32(pPlayerLDMDetailInfo, 0); //MaxWinStreakCount
		Write32(pPlayerLDMDetailInfo, 0); //CollisionCount
		Write32(pPlayerLDMDetailInfo, 0); //BeatCount

		len = pPlayerLDMDetailInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 13050, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyFreeForbiddenMode(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //Time

	len = p - buf;
	SendToClient(Client, 13064, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestEnterWonderLandMap(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	int Time = Read32(p);
	UINT WonderId = Read32(p);
	UINT CityId = Read32(p);

}

void ResponseEnterWonderLandMap(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultId
	Write32(p, 0); //WonderId
	Write32(p, 0); //CityId
	Write16(p, 0); //MapId
	WriteU(p, 0); //HasMoveInfo
	for (size_t i = 0; i < n; i++)
	{ //MoveInfo
		BYTE* pMoveInfo = p;
		Write16(pMoveInfo, 0); //len

		Write32(pMoveInfo, 0); //Uin
		Write8(pMoveInfo, 0); //WalkStatue
		Write32(pMoveInfo, 0); //Posion[]
		Write32(pMoveInfo, 0); //Ori[]
		Write32(pMoveInfo, 0); //AttachUin
		Write32(pMoveInfo, 0); //WalkExtState

		len = pMoveInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //BuildingNum
	for (size_t i = 0; i < n; i++)
	{ //BuildingInfo
		BYTE* pBuildingInfo = p;
		Write16(pBuildingInfo, 0); //len

		Write32(pBuildingInfo, 0); //WlId
		Write32(pBuildingInfo, 0); //CityId
		Write32(pBuildingInfo, 0); //BuildingID
		Write8(pBuildingInfo, 0); //BuildingLevel
		Write8(pBuildingInfo, 0); //BuildingStatus
		Write32(pBuildingInfo, 0); //StartTime
		Write32(pBuildingInfo, 0); //EndTime
		Write32(pBuildingInfo, 0); //LeftTime
		Write8(pBuildingInfo, 0); //OpenAttribute

		len = pBuildingInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //Master_Uin
	WriteString(p, 0); //WonderLandNameLen
	Write8(p, 0); //ReasonLen
	Write16(p, 0); //Capacity
	Write32(p, 0); //QTRoomID
	Write32(p, 0); //WishTreeLev
	WriteU(p, 0); //TransCastCash
	WriteU(p, 0); //ReportCurPosInterval
	Write32(p, 0); //EnterWLRoomContrLimit

	len = p - buf;
	SendToClient(Client, 866, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestExitWonderLandMap(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	int Time = Read32(p);

}

void ResponseExitWonderLandMap(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultId
	Write32(p, 0); //WonderId
	Write32(p, 0); //CityId

	len = p - buf;
	SendToClient(Client, 867, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyEnterViewList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ViewActorNum
	for (size_t i = 0; i < n; i++)
	{ //ViemActor
		BYTE* pViemActor = p;
		Write16(pViemActor, 0); //len

		Write32(pViemActor, 0); //Uin
		{ //MoveInfo
			BYTE* pMoveInfo = pViemActor;
			Write16(pMoveInfo, 0); //len

			Write32(pMoveInfo, 0); //Uin
			Write8(pMoveInfo, 0); //WalkStatue
			Write32(pMoveInfo, 0); //Posion[]
			Write32(pMoveInfo, 0); //Ori[]
			Write32(pMoveInfo, 0); //AttachUin
			Write32(pMoveInfo, 0); //WalkExtState

			len = pMoveInfo - pViemActor;
			Set16(pViemActor, (WORD)len);
			pViemActor += len;
		}
		{ //VisibleInfo
			BYTE* pVisibleInfo = pViemActor;
			Write16(pVisibleInfo, 0); //len

			WriteUn(pVisibleInfo, 0); //Uin
			WriteUn(pVisibleInfo, 0); //Identity
			Write8(pVisibleInfo, 0); //SeatID
			Write8(pVisibleInfo, 0); //TeamID
			Write16(pVisibleInfo, 0); //PlayerID
			Write8(pVisibleInfo, 0); //Status
			{ //PlayerDBBaseInfo
				BYTE* pPlayerDBBaseInfo = pVisibleInfo;
				Write16(pPlayerDBBaseInfo, 0); //len

				WriteString(pPlayerDBBaseInfo, 0); //Nickname[]
				Write8(pPlayerDBBaseInfo, 0); //Gender
				Write8(pPlayerDBBaseInfo, 0); //Country
				Write32(pPlayerDBBaseInfo, 0); //License
				WriteUn(pPlayerDBBaseInfo, 0); //Experience
				Write32(pPlayerDBBaseInfo, 0); //SuperMoney
				Write32(pPlayerDBBaseInfo, 0); //Money
				WriteUn(pPlayerDBBaseInfo, 0); //WinNum
				Write32(pPlayerDBBaseInfo, 0); //SecondNum
				Write32(pPlayerDBBaseInfo, 0); //ThirdNum
				WriteUn(pPlayerDBBaseInfo, 0); //TotalNum
				Write32(pPlayerDBBaseInfo, 0); //CurHonor
				Write32(pPlayerDBBaseInfo, 0); //TotalHonor
				Write32(pPlayerDBBaseInfo, 0); //TodayHonor
				Write32(pPlayerDBBaseInfo, 0); //RelaxTime
				Write32(pPlayerDBBaseInfo, 0); //MonthDurationBefore
				Write32(pPlayerDBBaseInfo, 0); //MonthDurationCur
				Write32(pPlayerDBBaseInfo, 0); //Charm
				Write32(pPlayerDBBaseInfo, 0); //DurationGame
				Write32(pPlayerDBBaseInfo, 0); //DanceExp
				Write32(pPlayerDBBaseInfo, 0); //Coupons
				Write32(pPlayerDBBaseInfo, 0); //Admiration
				Write32(pPlayerDBBaseInfo, 0); //LuckMoney
				Write32(pPlayerDBBaseInfo, 0); //TeamWorkExp
				Write32(pPlayerDBBaseInfo, 0); //AchievePoint
				Write32(pPlayerDBBaseInfo, 0); //RegTime
				WriteString(pPlayerDBBaseInfo, 0); //Signature[]
				Write32(pPlayerDBBaseInfo, 0); //LuckyMatchPoint
				Write32(pPlayerDBBaseInfo, 0); //LuckyMatchNum
				Write16(pPlayerDBBaseInfo, 0); //LuckyMatchFirstNum
				Write8(pPlayerDBBaseInfo, 0); //LuckyMatchBestRand
				Write32(pPlayerDBBaseInfo, 0); //LuckyMatchWinNum
				Write32(pPlayerDBBaseInfo, 0); //FizzPointTotal
				Write16(pPlayerDBBaseInfo, 0); //FizzPointDaily
				Write16(pPlayerDBBaseInfo, 0); //FizzPointWeekly
				Write16(pPlayerDBBaseInfo, 0); //FizzPointLastWeek
				Write8(pPlayerDBBaseInfo, 0); //FizzLotteryStatus
				Write32(pPlayerDBBaseInfo, 0); //FizzLastUpdateTime
				Write32(pPlayerDBBaseInfo, 0); //SNSLocaleCode
				Write32(pPlayerDBBaseInfo, 0); //AuctionRightUnlockTime
				Write8(pPlayerDBBaseInfo, 0); //ReserveFlag
				Write32(pPlayerDBBaseInfo, 0); //CurConsumeScore
				Write32(pPlayerDBBaseInfo, 0); //HistoryConsumeScore
				Write8(pPlayerDBBaseInfo, 0); //CrashModeSponsorID
				Write32(pPlayerDBBaseInfo, 0); //Popularity
				Write32(pPlayerDBBaseInfo, 0); //LadderMatchAchievePoint
				Write32(pPlayerDBBaseInfo, 0); //Cash
				Write32(pPlayerDBBaseInfo, 0); //PlayerGPMIdentity
				Write32(pPlayerDBBaseInfo, 0); //PointTotalScore
				WriteUn(pPlayerDBBaseInfo, 0); //totalMapMedalNum
				WriteUn(pPlayerDBBaseInfo, 0); //lastMapMedalNum
				WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalNum
				WriteUn(pPlayerDBBaseInfo, 0); //curMapMedalSeasonId
				WriteUn(pPlayerDBBaseInfo, 0); //lastClearMapMedalTime

				len = pPlayerDBBaseInfo - pVisibleInfo;
				Set16(pVisibleInfo, (WORD)len);
				pVisibleInfo += len;
			}
			{ //PlayerGuildInfo
				BYTE* pPlayerGuildInfo = pVisibleInfo;
				Write16(pPlayerGuildInfo, 0); //len

				WriteString(pPlayerGuildInfo, 0); //GuildName[]
				Write16(pPlayerGuildInfo, 0); //Duty
				Write32(pPlayerGuildInfo, 0); //GuildID
				Write32(pPlayerGuildInfo, 0); //Right
				Write32(pPlayerGuildInfo, 0); //Medal
				Write32(pPlayerGuildInfo, 0); //Contribute
				WriteString(pPlayerGuildInfo, 0); //DutyTitle[]

				len = pPlayerGuildInfo - pVisibleInfo;
				Set16(pVisibleInfo, (WORD)len);
				pVisibleInfo += len;
			}
			Write16(pVisibleInfo, 0); //EquipedItemNum
			for (size_t i = 0; i < n; i++)
			{ //PlayerItemInfo
				BYTE* pPlayerItemInfo = pVisibleInfo;
				Write16(pPlayerItemInfo, 0); //len

				Write32(pPlayerItemInfo, 0); //ItemID
				Write32(pPlayerItemInfo, 0); //ItemNum
				Write32(pPlayerItemInfo, 0); //AvailPeriod
				Write8(pPlayerItemInfo, 0); //Status
				WriteUn(pPlayerItemInfo, 0); //ObtainTime
				Write32(pPlayerItemInfo, 0); //OtherAttribute

				len = pPlayerItemInfo - pVisibleInfo;
				Set16(pVisibleInfo, (WORD)len);
				pVisibleInfo += len;
			}
			Write16(pVisibleInfo, 0); //PetNum
			for (size_t i = 0; i < n; i++)
			{ //PetInfo
				BYTE* pPetInfo = pVisibleInfo;
				Write16(pPetInfo, 0); //len

				Write32(pPetInfo, 0); //Uin
				Write32(pPetInfo, 0); //PetId
				WriteString(pPetInfo, 0); //PetName[]
				Write8(pPetInfo, 0); //IsProper
				Write16(pPetInfo, 0); //Level
				Write8(pPetInfo, 0); //Status
				Write16(pPetInfo, 0); //PetSkillNum
				for (size_t i = 0; i < n; i++)
				{ //PetSkillList
					BYTE* pPetSkillList = pPetInfo;
					Write16(pPetSkillList, 0); //len

					Write16(pPetSkillList, 0); //SkillID
					Write8(pPetSkillList, 0); //Status
					Write8(pPetSkillList, 0); //Active
					Write32(pPetSkillList, 0); //Value

					len = pPetSkillList - pPetInfo;
					Set16(pPetInfo, (WORD)len);
					pPetInfo += len;
				}
				Write32(pPetInfo, 0); //StrengLevel

				len = pPetInfo - pVisibleInfo;
				Set16(pVisibleInfo, (WORD)len);
				pVisibleInfo += len;
			}
			{ //PlayerGuildMatchInfo
				BYTE* pPlayerGuildMatchInfo = pVisibleInfo;
				Write16(pPlayerGuildMatchInfo, 0); //len

				Write32(pPlayerGuildMatchInfo, 0); //SelfPoint
				Write32(pPlayerGuildMatchInfo, 0); //WinNum
				Write32(pPlayerGuildMatchInfo, 0); //TotalNum

				len = pPlayerGuildMatchInfo - pVisibleInfo;
				Set16(pVisibleInfo, (WORD)len);
				pVisibleInfo += len;
			}
			Write8(pVisibleInfo, 0); //IsInTopList
			Write8(pVisibleInfo, 0); //LoverRaceOrPro
			Write8(pVisibleInfo, 0); //TmpEffectNum
			Write32(pVisibleInfo, 0); //TmpEffectItems[]
			Write8(pVisibleInfo, 0); //OBState
			Write8(pVisibleInfo, 0); //DebutOrX5
			Write8(pVisibleInfo, 0); //RandKeyFlag
			WriteUn(pVisibleInfo, 0); //VipFlag
			Write8(pVisibleInfo, 0); //HaveAppellation
			for (size_t i = 0; i < n; i++)
			{ //CurAppellation
				BYTE* pCurAppellation = pVisibleInfo;
				Write16(pCurAppellation, 0); //len

				Write8(pCurAppellation, 0); //Type
				Write8(pCurAppellation, 0); //Level
				Write8(pCurAppellation, 0); //Status
				Write8(pCurAppellation, 0); //Difficulty
				Write32(pCurAppellation, 0); //MapId
				Write32(pCurAppellation, 0); //Value

				len = pCurAppellation - pVisibleInfo;
				Set16(pVisibleInfo, (WORD)len);
				pVisibleInfo += len;
			}
			{ //NobleInfo
				BYTE* pNobleInfo = pVisibleInfo;
				Write16(pNobleInfo, 0); //len

				Write32(pNobleInfo, 0); //NobleID
				Write8(pNobleInfo, 0); //NobleLevel
				Write32(pNobleInfo, 0); //NoblePoint
				Write32(pNobleInfo, 0); //NobleLeftDays

				len = pNobleInfo - pVisibleInfo;
				Set16(pVisibleInfo, (WORD)len);
				pVisibleInfo += len;
			}
			Write8(pVisibleInfo, 0); //HasCarryWizard
			for (size_t i = 0; i < n; i++)
			{ //CarryWizardInfo
				BYTE* pCarryWizardInfo = pVisibleInfo;
				Write16(pCarryWizardInfo, 0); //len

				Write16(pCarryWizardInfo, 0); //WizardID
				WriteString(pCarryWizardInfo, 0); //Nickname[]
				Write16(pCarryWizardInfo, 0); //WizardType
				Write8(pCarryWizardInfo, 0); //Order
				Write8(pCarryWizardInfo, 0); //EvolutionBranch
				Write8(pCarryWizardInfo, 0); //IsHuanHua

				len = pCarryWizardInfo - pVisibleInfo;
				Set16(pVisibleInfo, (WORD)len);
				pVisibleInfo += len;
			}
			{ //GuildVipBaseInfo
				BYTE* pGuildVipBaseInfo = pVisibleInfo;
				Write16(pGuildVipBaseInfo, 0); //len

				Write8(pGuildVipBaseInfo, 0); //GuildVipLevel
				Write32(pGuildVipBaseInfo, 0); //GuildVipPoint

				len = pGuildVipBaseInfo - pVisibleInfo;
				Set16(pVisibleInfo, (WORD)len);
				pVisibleInfo += len;
			}
			Write32(pVisibleInfo, 0); //ExFlag
			Write8(pVisibleInfo, 0); //HaveLDMBaseInfo
			for (size_t i = 0; i < n; i++)
			{ //PlayerLDMBaseInfo
				BYTE* pPlayerLDMBaseInfo = pVisibleInfo;
				Write16(pPlayerLDMBaseInfo, 0); //len

				Write8(pPlayerLDMBaseInfo, 0); //Grade
				Write32(pPlayerLDMBaseInfo, 0); //Score
				Write32(pPlayerLDMBaseInfo, 0); //MaxScore
				Write32(pPlayerLDMBaseInfo, 0); //MaxGrade

				len = pPlayerLDMBaseInfo - pVisibleInfo;
				Set16(pVisibleInfo, (WORD)len);
				pVisibleInfo += len;
			}
			Write8(pVisibleInfo, 0); //HasWl
			for (size_t i = 0; i < n; i++)
			{ //PlayerWlVisibleInfo
				BYTE* pPlayerWlVisibleInfo = pVisibleInfo;
				Write16(pPlayerWlVisibleInfo, 0); //len

				Write32(pPlayerWlVisibleInfo, 0); //WonderLandID
				WriteString(pPlayerWlVisibleInfo, 0); //WonderLandName[]
				Write16(pPlayerWlVisibleInfo, 0); //WonderLandDuty
				Write8(pPlayerWlVisibleInfo, 0); //SubType
				Write8(pPlayerWlVisibleInfo, 0); //GuildGrade

				len = pPlayerWlVisibleInfo - pVisibleInfo;
				Set16(pVisibleInfo, (WORD)len);
				pVisibleInfo += len;
			}
			Write8(pVisibleInfo, 0); //HasLoverVip
			for (size_t i = 0; i < n; i++)
			{ //LoverVipInfo
				BYTE* pLoverVipInfo = pVisibleInfo;
				Write16(pLoverVipInfo, 0); //len

				Write8(pLoverVipInfo, 0); //LoverVipLevel
				Write32(pLoverVipInfo, 0); //LoverVipPoint
				Write8(pLoverVipInfo, 0); //GrowRate

				len = pLoverVipInfo - pVisibleInfo;
				Set16(pVisibleInfo, (WORD)len);
				pVisibleInfo += len;
			}
			Write8(pVisibleInfo, 0); //HasBattleModeSkillInfoList
			for (size_t i = 0; i < n; i++)
			{ //BattleModeSkillInfoList
				BYTE* pBattleModeSkillInfoList = pVisibleInfo;
				Write16(pBattleModeSkillInfoList, 0); //len

				Write8(pBattleModeSkillInfoList, 0); //SkillNum
				for (size_t i = 0; i < n; i++)
				{ //SkillInfo
					BYTE* pSkillInfo = pBattleModeSkillInfoList;
					Write16(pSkillInfo, 0); //len

					Write16(pSkillInfo, 0); //SkillId
					Write8(pSkillInfo, 0); //SkillLevel

					len = pSkillInfo - pBattleModeSkillInfoList;
					Set16(pBattleModeSkillInfoList, (WORD)len);
					pBattleModeSkillInfoList += len;
				}

				len = pBattleModeSkillInfoList - pVisibleInfo;
				Set16(pVisibleInfo, (WORD)len);
				pVisibleInfo += len;
			}

			len = pVisibleInfo - pViemActor;
			Set16(pViemActor, (WORD)len);
			pViemActor += len;
		}
		{ //otherInfo
			BYTE* potherInfo = pViemActor;
			Write16(potherInfo, 0); //len

			Write32(potherInfo, 0); //EquipedHammer

			len = potherInfo - pViemActor;
			Set16(pViemActor, (WORD)len);
			pViemActor += len;
		}

		len = pViemActor - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HaveMore

	len = p - buf;
	SendToClient(Client, 869, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyLeaveViewList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ViewActorNum
	Write32(p, 0); //ViewActorUin[]

	len = p - buf;
	SendToClient(Client, 870, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyClearViewList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;


	len = p - buf;
	SendToClient(Client, 871, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyPlayerListOfEnterWlCity(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //WlId
	Write32(p, 0); //CityId
	Write32(p, 0); //PlayerNum
	for (size_t i = 0; i < n; i++)
	{ //PlayerList
		BYTE* pPlayerList = p;
		Write16(pPlayerList, 0); //len

		WriteUn(pPlayerList, 0); //Uin
		WriteUn(pPlayerList, 0); //Identity
		WriteString(pPlayerList, 0); //Nickname[]
		Write8(pPlayerList, 0); //Gender
		Write32(pPlayerList, 0); //Charm
		WriteUn(pPlayerList, 0); //Experience
		Write32(pPlayerList, 0); //CurHonor
		WriteUn(pPlayerList, 0); //VipFlag
		Write32(pPlayerList, 0); //WlId
		Write32(pPlayerList, 0); //WlDuty
		Write32(pPlayerList, 0); //License
		{ //NobleInfo
			BYTE* pNobleInfo = pPlayerList;
			Write16(pNobleInfo, 0); //len

			Write32(pNobleInfo, 0); //NobleID
			Write8(pNobleInfo, 0); //NobleLevel
			Write32(pNobleInfo, 0); //NoblePoint
			Write32(pNobleInfo, 0); //NobleLeftDays

			len = pNobleInfo - pPlayerList;
			Set16(pPlayerList, (WORD)len);
			pPlayerList += len;
		}
		{ //GuildVipBaseInfo
			BYTE* pGuildVipBaseInfo = pPlayerList;
			Write16(pGuildVipBaseInfo, 0); //len

			Write8(pGuildVipBaseInfo, 0); //GuildVipLevel
			Write32(pGuildVipBaseInfo, 0); //GuildVipPoint

			len = pGuildVipBaseInfo - pPlayerList;
			Set16(pPlayerList, (WORD)len);
			pPlayerList += len;
		}
		Write8(pPlayerList, 0); //HasLoverVip
		for (size_t i = 0; i < n; i++)
		{ //LoverVipInfo
			BYTE* pLoverVipInfo = pPlayerList;
			Write16(pLoverVipInfo, 0); //len

			Write8(pLoverVipInfo, 0); //LoverVipLevel
			Write32(pLoverVipInfo, 0); //LoverVipPoint
			Write8(pLoverVipInfo, 0); //GrowRate

			len = pLoverVipInfo - pPlayerList;
			Set16(pPlayerList, (WORD)len);
			pPlayerList += len;
		}

		len = pPlayerList - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 872, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyPlayerListOfExitWlCity(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //WlId
	Write32(p, 0); //CityId
	Write32(p, 0); //PlayerNum
	Write(p, 0); //PlayerUinList[]

	len = p - buf;
	SendToClient(Client, 873, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestWonderLandInnerToplist(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT TopType = Read16(p);

}

void ResponseWonderLandInnerToplist(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //GetInterVal
	Write16(p, 0); //TopType
	Write16(p, 0); //Num
	for (size_t i = 0; i < n; i++)
	{ //TopListItem
		BYTE* pTopListItem = p;
		Write16(pTopListItem, 0); //len

		Write32(pTopListItem, 0); //Uin
		Write8(pTopListItem, 0); //NameLen
		Write32(pTopListItem, 0); //Value

		len = pTopListItem - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //MasterUin

	len = p - buf;
	SendToClient(Client, 977, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GCreateWonderLand(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	char[] WonderLandName[] = ReadString(p);
	bool ExecuterNum = Read8(p);
	[] Executer[] = Read(p);
	bool UseDonate = Read8(p);

}

void ResponseC2GCreateWonderLand(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen
	WriteString(p, 0); //WonderLandName[]
	Write32(p, 0); //WonderLandID
	Write8(p, 0); //ExecuterNum
	Write(p, 0); //Executer[]
	Write8(p, 0); //UseDonate

	len = p - buf;
	SendToClient(Client, 881, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyC2GCreateWonderLandResult(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //LeaderUin
	WriteString(p, 0); //GuildLeaderName[]
	WriteString(p, 0); //WonderLandName[]
	Write32(p, 0); //WonderLandID
	Write8(p, 0); //ExecuterNum
	Write(p, 0); //Executer[]

	len = p - buf;
	SendToClient(Client, 882, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyC2GBriefWonderLandInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	WriteString(p, 0); //WonderLandName[]
	Write32(p, 0); //WonderLandID
	Write8(p, 0); //GuildType
	Write8(p, 0); //GuildGrade
	Write32(p, 0); //GuildContribute
	Write32(p, 0); //WlLevel
	Write16(p, 0); //WonderLandDuty
	Write32(p, 0); //WonderLandRight
	Write32(p, 0); //QTRoomID

	len = p - buf;
	SendToClient(Client, 880, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetWonderLandGameSvrInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	int Time = Read32(p);
	UINT WonderLandId = Read32(p);
	UINT CityId = Read32(p);
	UCHAR HasLastWLSvrInfo = Read8(p);
	for (size_t i = 0; i < n; i++)
	{ //WLSvrInfo
		BYTE* pWLSvrInfo = p;
		len = Read16(pWLSvrInfo);

		short SvrId = Read16(pWLSvrInfo);
		UINT SvrIP = Read32(pWLSvrInfo);
		UCHAR TcpPortNum = Read8(pWLSvrInfo);
		USHORT TcpPort[] = Read16(pWLSvrInfo);
		UCHAR UdpPortNum = Read8(pWLSvrInfo);
		USHORT UdpPort[] = Read16(pWLSvrInfo);

		p += len;
	}

}

void ResponseGetWonderLandGameSvrInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultId
	Write32(p, 0); //WonderLandId
	Write32(p, 0); //CityId
	Write8(p, 0); //HasWLSvrInfo
	for (size_t i = 0; i < n; i++)
	{ //WLSvrInfo
		BYTE* pWLSvrInfo = p;
		Write16(pWLSvrInfo, 0); //len

		Write16(pWLSvrInfo, 0); //SvrId
		Write32(pWLSvrInfo, 0); //SvrIP
		Write8(pWLSvrInfo, 0); //TcpPortNum
		Write16(pWLSvrInfo, 0); //TcpPort[]
		Write8(pWLSvrInfo, 0); //UdpPortNum
		Write16(pWLSvrInfo, 0); //UdpPort[]

		len = pWLSvrInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 889, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GApplyJoinWonderLand(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT DstWonderLandID = Read32(p);

}

void ResponseC2GApplyJoinWonderLand(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen
	Write32(p, 0); //DstWonderLandID
	WriteString(p, 0); //DstWonderLandName[]

	len = p - buf;
	SendToClient(Client, 883, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyC2GApplyJoinWonderLand(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //ApplyUin
	WriteString(p, 0); //ApplyNickName[]
	Write32(p, 0); //ApplyGuildID
	WriteString(p, 0); //ApplyGuildName[]

	len = p - buf;
	SendToClient(Client, 884, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestC2GReplyJoinWonderLand(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT ApplyUin = Read32(p);
	char[] ApplyNickName[] = ReadString(p);
	UINT ApplyGuildID = Read32(p);
	char[] ApplyGuildName[] = ReadString(p);
	short ResultID = Read16(p);

}

void ResponseC2GReplyJoinWonderLand(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen
	Write32(p, 0); //ApplyUin
	WriteString(p, 0); //ApplyNickName[]
	Write32(p, 0); //ApplyGuildID
	WriteString(p, 0); //ApplyGuildName[]

	len = p - buf;
	SendToClient(Client, 885, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyAddToWonderLandResult(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //ApplyUin
	WriteString(p, 0); //ApplyNickName[]
	Write32(p, 0); //ApplyGuildID
	WriteString(p, 0); //ApplyGuildName[]
	WriteString(p, 0); //DstWonderLandName[]
	Write32(p, 0); //DstWonderLandID

	len = p - buf;
	SendToClient(Client, 886, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestC2GWonderLandDetail(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseC2GWonderLandDetail(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen
	Write8(p, 0); //HasWonderLand
	for (size_t i = 0; i < n; i++)
	{ //WonderLandDescInfo
		BYTE* pWonderLandDescInfo = p;
		Write16(pWonderLandDescInfo, 0); //len

		Write32(pWonderLandDescInfo, 0); //WonderLandID
		WriteString(pWonderLandDescInfo, 0); //WonderLandName[]
		Write32(pWonderLandDescInfo, 0); //CrystalNum
		Write32(pWonderLandDescInfo, 0); //Activity
		Write32(pWonderLandDescInfo, 0); //Prosperity
		Write16(pWonderLandDescInfo, 0); //NotesLen
		Write16(pWonderLandDescInfo, 0); //DescLen
		Write32(pWonderLandDescInfo, 0); //CreateTime
		Write32(pWonderLandDescInfo, 0); //Attribute
		Write32(pWonderLandDescInfo, 0); //WlLevel
		Write32(pWonderLandDescInfo, 0); //WishTreeExp
		Write32(pWonderLandDescInfo, 0); //WishTreeWaterCnt
		Write32(pWonderLandDescInfo, 0); //WishTreeLastWaterTime
		Write32(pWonderLandDescInfo, 0); //EnterWLRoomContrLimit

		len = pWonderLandDescInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //MemberGuildNum
	for (size_t i = 0; i < n; i++)
	{ //MemberGuild
		BYTE* pMemberGuild = p;
		Write16(pMemberGuild, 0); //len

		Write32(pMemberGuild, 0); //GuildId
		Write32(pMemberGuild, 0); //JoinTime
		Write8(pMemberGuild, 0); //SubGuildType
		Write32(pMemberGuild, 0); //Contribute
		Write32(pMemberGuild, 0); //LastWeekContribute
		Write32(pMemberGuild, 0); //WeekContribute
		Write8(pMemberGuild, 0); //Grade

		len = pMemberGuild - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasDuty
	for (size_t i = 0; i < n; i++)
	{ //Duty
		BYTE* pDuty = p;
		Write16(pDuty, 0); //len

		Write16(pDuty, 0); //Dutys[]

		len = pDuty - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasAutoJoinCond
	for (size_t i = 0; i < n; i++)
	{ //AutoJoinCond
		BYTE* pAutoJoinCond = p;
		Write16(pAutoJoinCond, 0); //len

		Write16(pAutoJoinCond, 0); //GuildLevel
		Write32(pAutoJoinCond, 0); //GuildScore
		Write32(pAutoJoinCond, 0); //GuildProsperity
		Write16(pAutoJoinCond, 0); //MemberNum

		len = pAutoJoinCond - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //QTRoomID
	Write16(p, 0); //WlCapcity
	Write32(p, 0); //WlMatchScore
	Write16(p, 0); //MstNum
	Write16(p, 0); //CurMstType
	Write32(p, 0); //CurMstExp
	WriteU(p, 0); //BuildingNum
	for (size_t i = 0; i < n; i++)
	{ //BuildingInfo
		BYTE* pBuildingInfo = p;
		Write16(pBuildingInfo, 0); //len

		Write32(pBuildingInfo, 0); //BuildingId
		Write32(pBuildingInfo, 0); //BuildingLevel
		Write32(pBuildingInfo, 0); //BuildingStatus
		Write32(pBuildingInfo, 0); //OpenAttribute
		Write32(pBuildingInfo, 0); //StartTime
		Write32(pBuildingInfo, 0); //EndTime
		Write32(pBuildingInfo, 0); //UpgradeFinished

		len = pBuildingInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //CurMstStyle
	Write32(p, 0); //TotalWlDegree
	Write32(p, 0); //WeeklyWlDegree
	Write32(p, 0); //WeeklyMatchScore
	Write32(p, 0); //TotalMatchScore
	Write32(p, 0); //Cash
	Write32(p, 0); //WlWeeklyMatchScore
	Write32(p, 0); //WlFetionLeftCnt

	len = p - buf;
	SendToClient(Client, 887, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GWonderLandGuildInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT GuildNum = Read16(p);
	UINT[] GuildId[] = Read32(p);

}

void ResponseC2GWonderLandGuildInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen
	Write16(p, 0); //GuildNum
	for (size_t i = 0; i < n; i++)
	{ //GuildDescInfo
		BYTE* pGuildDescInfo = p;
		Write16(pGuildDescInfo, 0); //len

		Write32(pGuildDescInfo, 0); //GuildID
		WriteString(pGuildDescInfo, 0); //Name[]
		{ //LeaderInfo
			BYTE* pLeaderInfo = pGuildDescInfo;
			Write16(pLeaderInfo, 0); //len

			Write32(pLeaderInfo, 0); //Uin
			WriteString(pLeaderInfo, 0); //NickName[]
			Write16(pLeaderInfo, 0); //Duty
			Write8(pLeaderInfo, 0); //OnlineFlag
			WriteUn(pLeaderInfo, 0); //LastLogin
			Write32(pLeaderInfo, 0); //MemProsperity
			Write32(pLeaderInfo, 0); //LastEnlistedTime
			Write8(pLeaderInfo, 0); //EnlistFlag
			Write16(pLeaderInfo, 0); //WonderLandDuty
			Write32(pLeaderInfo, 0); //TotalWlDegree
			Write32(pLeaderInfo, 0); //WeeklyWlDegree
			Write32(pLeaderInfo, 0); //Donate

			len = pLeaderInfo - pGuildDescInfo;
			Set16(pGuildDescInfo, (WORD)len);
			pGuildDescInfo += len;
		}
		Write16(pGuildDescInfo, 0); //NotesLen
		Write16(pGuildDescInfo, 0); //DescLen
		Write32(pGuildDescInfo, 0); //Level
		Write32(pGuildDescInfo, 0); //Score
		Write32(pGuildDescInfo, 0); //CreateTime
		Write16(pGuildDescInfo, 0); //Attribute
		Write16(pGuildDescInfo, 0); //MaxMember
		Write16(pGuildDescInfo, 0); //CurrentMember
		Write16(pGuildDescInfo, 0); //TeamAddition
		Write16(pGuildDescInfo, 0); //YesterdayMaxOnline
		Write16(pGuildDescInfo, 0); //HistoryMaxOnline
		Write32(pGuildDescInfo, 0); //HistoryMaxOnlineTime
		Write32(pGuildDescInfo, 0); //Prosperity
		Write16(pGuildDescInfo, 0); //Level
		{ //GuildEnlistCond
			BYTE* pGuildEnlistCond = pGuildDescInfo;
			Write16(pGuildEnlistCond, 0); //len

			Write32(pGuildEnlistCond, 0); //ProsperityCondition
			Write32(pGuildEnlistCond, 0); //JoinTotalCondition
			Write32(pGuildEnlistCond, 0); //HonorCondition
			Write32(pGuildEnlistCond, 0); //CharmCondition
			Write32(pGuildEnlistCond, 0); //DanceExpCondition
			Write32(pGuildEnlistCond, 0); //SkillPointCondition
			Write32(pGuildEnlistCond, 0); //ExpLevelCondition

			len = pGuildEnlistCond - pGuildDescInfo;
			Set16(pGuildDescInfo, (WORD)len);
			pGuildDescInfo += len;
		}
		Write8(pGuildDescInfo, 0); //NewGuildType
		Write32(pGuildDescInfo, 0); //GuildQQGroup
		{ //WorkDayActiveTimeSeg
			BYTE* pWorkDayActiveTimeSeg = pGuildDescInfo;
			Write16(pWorkDayActiveTimeSeg, 0); //len

			Write16(pWorkDayActiveTimeSeg, 0); //BeginTimeInt
			Write16(pWorkDayActiveTimeSeg, 0); //EndTimeInt

			len = pWorkDayActiveTimeSeg - pGuildDescInfo;
			Set16(pGuildDescInfo, (WORD)len);
			pGuildDescInfo += len;
		}
		{ //WeekendActiveTimeSeg
			BYTE* pWeekendActiveTimeSeg = pGuildDescInfo;
			Write16(pWeekendActiveTimeSeg, 0); //len

			Write16(pWeekendActiveTimeSeg, 0); //BeginTimeInt
			Write16(pWeekendActiveTimeSeg, 0); //EndTimeInt

			len = pWeekendActiveTimeSeg - pGuildDescInfo;
			Set16(pGuildDescInfo, (WORD)len);
			pGuildDescInfo += len;
		}
		Write32(pGuildDescInfo, 0); //LastEnlistTime
		Write8(pGuildDescInfo, 0); //EnlistNum
		Write32(pGuildDescInfo, 0); //LastModGuildNameTime
		Write32(pGuildDescInfo, 0); //WonderLandID
		WriteUn(pGuildDescInfo, 0); //UiCurDonate

		len = pGuildDescInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 888, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GRemoveWonderlandGuild(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	bool RemoveType = Read8(p);
	UINT DstGuildID = Read32(p);
	char[] DstGuildName[] = ReadString(p);

}

void ResponseC2GRemoveWonderlandGuild(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen
	Write8(p, 0); //RemoveType
	Write32(p, 0); //DstGuildID

	len = p - buf;
	SendToClient(Client, 890, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyG2CRemoveWonderlandGuild(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //RemoveType
	Write32(p, 0); //SrcUin
	WriteString(p, 0); //SrcNickName[]
	Write32(p, 0); //DstGuildID
	WriteString(p, 0); //DstGuildName[]
	WriteU(p, 0); //AddCash

	len = p - buf;
	SendToClient(Client, 891, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyG2CRemoveWonderlandPlayer(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //RemoveType
	Write32(p, 0); //SrcUin
	WriteString(p, 0); //SrcNickName[]
	Write32(p, 0); //DstGuildID
	WriteString(p, 0); //DstGuildName[]

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestC2GCheckWonderLandName(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	char[] DstWonderLandName[] = ReadString(p);

}

void ResponseC2GCheckWonderLandName(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen
	WriteString(p, 0); //DstWonderLandName[]

	len = p - buf;
	SendToClient(Client, 895, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GFindWonderland(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT DstWonderLandID = Read32(p);
	char[] DstWonderLandName[] = ReadString(p);
	bool CliFindDlg = Read8(p);

}

void ResponseC2GFindWonderland(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen
	Write8(p, 0); //HasWonderLand
	for (size_t i = 0; i < n; i++)
	{ //WonderLandDescInfo
		BYTE* pWonderLandDescInfo = p;
		Write16(pWonderLandDescInfo, 0); //len

		Write32(pWonderLandDescInfo, 0); //WonderLandID
		WriteString(pWonderLandDescInfo, 0); //WonderLandName[]
		Write32(pWonderLandDescInfo, 0); //CrystalNum
		Write32(pWonderLandDescInfo, 0); //Activity
		Write32(pWonderLandDescInfo, 0); //Prosperity
		Write16(pWonderLandDescInfo, 0); //NotesLen
		Write16(pWonderLandDescInfo, 0); //DescLen
		Write32(pWonderLandDescInfo, 0); //CreateTime
		Write32(pWonderLandDescInfo, 0); //Attribute
		Write32(pWonderLandDescInfo, 0); //WlLevel
		Write32(pWonderLandDescInfo, 0); //WishTreeExp
		Write32(pWonderLandDescInfo, 0); //WishTreeWaterCnt
		Write32(pWonderLandDescInfo, 0); //WishTreeLastWaterTime
		Write32(pWonderLandDescInfo, 0); //EnterWLRoomContrLimit

		len = pWonderLandDescInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //MemberGuildNum
	for (size_t i = 0; i < n; i++)
	{ //MemberGuild
		BYTE* pMemberGuild = p;
		Write16(pMemberGuild, 0); //len

		Write32(pMemberGuild, 0); //GuildId
		Write32(pMemberGuild, 0); //JoinTime
		Write8(pMemberGuild, 0); //SubGuildType
		Write32(pMemberGuild, 0); //Contribute
		Write32(pMemberGuild, 0); //LastWeekContribute
		Write32(pMemberGuild, 0); //WeekContribute
		Write8(pMemberGuild, 0); //Grade

		len = pMemberGuild - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //CliFindDlg
	WriteU(p, 0); //BuildingNum
	for (size_t i = 0; i < n; i++)
	{ //BuildingInfo
		BYTE* pBuildingInfo = p;
		Write16(pBuildingInfo, 0); //len

		Write32(pBuildingInfo, 0); //BuildingId
		Write32(pBuildingInfo, 0); //BuildingLevel
		Write32(pBuildingInfo, 0); //BuildingStatus
		Write32(pBuildingInfo, 0); //OpenAttribute
		Write32(pBuildingInfo, 0); //StartTime
		Write32(pBuildingInfo, 0); //EndTime
		Write32(pBuildingInfo, 0); //UpgradeFinished

		len = pBuildingInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //WlCapcity
	Write32(p, 0); //MatchScore
	Write16(p, 0); //MstNum
	Write16(p, 0); //CurMstType
	Write32(p, 0); //CurMstExp
	Write16(p, 0); //CurMstStyle

	len = p - buf;
	SendToClient(Client, 896, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GFindWonderLandGuildInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT GuildNum = Read16(p);
	UINT[] GuildId[] = Read32(p);
	bool CliFindDlg = Read8(p);

}

void ResponseC2GFindWonderLandGuildInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen
	Write16(p, 0); //GuildNum
	for (size_t i = 0; i < n; i++)
	{ //GuildBriefInfo
		BYTE* pGuildBriefInfo = p;
		Write16(pGuildBriefInfo, 0); //len

		Write32(pGuildBriefInfo, 0); //GuildID
		WriteString(pGuildBriefInfo, 0); //Name[]
		{ //LeaderInfo
			BYTE* pLeaderInfo = pGuildBriefInfo;
			Write16(pLeaderInfo, 0); //len

			Write32(pLeaderInfo, 0); //Uin
			WriteString(pLeaderInfo, 0); //NickName[]
			Write16(pLeaderInfo, 0); //Duty
			Write8(pLeaderInfo, 0); //OnlineFlag
			WriteUn(pLeaderInfo, 0); //LastLogin
			Write32(pLeaderInfo, 0); //MemProsperity
			Write32(pLeaderInfo, 0); //LastEnlistedTime
			Write8(pLeaderInfo, 0); //EnlistFlag
			Write16(pLeaderInfo, 0); //WonderLandDuty
			Write32(pLeaderInfo, 0); //TotalWlDegree
			Write32(pLeaderInfo, 0); //WeeklyWlDegree
			Write32(pLeaderInfo, 0); //Donate

			len = pLeaderInfo - pGuildBriefInfo;
			Set16(pGuildBriefInfo, (WORD)len);
			pGuildBriefInfo += len;
		}
		Write16(pGuildBriefInfo, 0); //MaxMember
		Write16(pGuildBriefInfo, 0); //CurrentMember

		len = pGuildBriefInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //CliFindDlg

	len = p - buf;
	SendToClient(Client, 919, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GGetWonderlandList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT StartIdx = Read32(p);
	UINT WonderLandCount = Read32(p);
	bool ListType = Read8(p);

}

void ResponseC2GGetWonderlandList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen
	Write32(p, 0); //StartIdx
	Write32(p, 0); //WonderLandCount
	Write32(p, 0); //TotalCount
	Write32(p, 0); //Count
	for (size_t i = 0; i < n; i++)
	{ //TopListItem
		BYTE* pTopListItem = p;
		Write16(pTopListItem, 0); //len

		Write32(pTopListItem, 0); //WonderLandID
		WriteString(pTopListItem, 0); //WonderLandName[]
		Write32(pTopListItem, 0); //Value

		len = pTopListItem - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ListType

	len = p - buf;
	SendToClient(Client, 897, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GGetWonderlandSummaryInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT Count = Read32(p);
	[] DstWonderLandID[] = Read(p);
	bool ListType = Read8(p);

}

void ResponseC2GGetWonderlandSummaryInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Count
	for (size_t i = 0; i < n; i++)
	{ //WonderLandSummaryInfo
		BYTE* pWonderLandSummaryInfo = p;
		Write16(pWonderLandSummaryInfo, 0); //len

		Write32(pWonderLandSummaryInfo, 0); //WonderLandID
		WriteString(pWonderLandSummaryInfo, 0); //WonderLandName[]
		Write32(pWonderLandSummaryInfo, 0); //Level
		Write32(pWonderLandSummaryInfo, 0); //MaxGuildNum
		Write32(pWonderLandSummaryInfo, 0); //CurrentGuildNum
		Write32(pWonderLandSummaryInfo, 0); //Activity
		Write32(pWonderLandSummaryInfo, 0); //Attribute
		Write32(pWonderLandSummaryInfo, 0); //CrystalNum
		Write32(pWonderLandSummaryInfo, 0); //Prosperity
		Write32(pWonderLandSummaryInfo, 0); //MatchScore
		WriteU(pWonderLandSummaryInfo, 0); //WlCityCapacity
		WriteU(pWonderLandSummaryInfo, 0); //WlCityCurPersonNum

		len = pWonderLandSummaryInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //ListType

	len = p - buf;
	SendToClient(Client, 898, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GChangeWonderlandPlayerDuty(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT DstUin = Read32(p);
	UINT DstGuildID = Read32(p);
	USHORT DstNewDuty = Read16(p);

}

void ResponseC2GChangeWonderlandPlayerDuty(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen
	Write32(p, 0); //Uin
	Write16(p, 0); //NewDuty
	Write32(p, 0); //NewRight
	Write32(p, 0); //DstUin
	Write32(p, 0); //DstGuildID
	Write16(p, 0); //DstNewDuty

	len = p - buf;
	SendToClient(Client, 893, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyG2CChangeWonderlandPlayerDuty(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //DstGuildID
	Write32(p, 0); //DstUin
	Write16(p, 0); //DstNewDuty
	Write32(p, 0); //DstNewDutyRight

	len = p - buf;
	SendToClient(Client, 894, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestC2GModifyWonderlandDutyRight(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT Duty = Read16(p);
	UINT Right = Read32(p);

}

void ResponseC2GModifyWonderlandDutyRight(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //Duty
	Write32(p, 0); //Right

	len = p - buf;
	SendToClient(Client, 925, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyC2GModifyWonderlandDutyRight(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //Duty
	Write32(p, 0); //Right

	len = p - buf;
	SendToClient(Client, 937, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestC2GModifyWonderlandRecruitSetting(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT NewAttr = Read32(p);
	bool HasAutoJoinCond = Read8(p);
	for (size_t i = 0; i < n; i++)
	{ //AutoJoinCond
		BYTE* pAutoJoinCond = p;
		len = Read16(pAutoJoinCond);

		USHORT GuildLevel = Read16(pAutoJoinCond);
		UINT GuildScore = Read32(pAutoJoinCond);
		UINT GuildProsperity = Read32(pAutoJoinCond);
		USHORT MemberNum = Read16(pAutoJoinCond);

		p += len;
	}

}

void ResponseC2GModifyWonderlandRecruitSetting(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //NewAttr
	Write8(p, 0); //HasAutoJoinCond
	for (size_t i = 0; i < n; i++)
	{ //AutoJoinCond
		BYTE* pAutoJoinCond = p;
		Write16(pAutoJoinCond, 0); //len

		Write16(pAutoJoinCond, 0); //GuildLevel
		Write32(pAutoJoinCond, 0); //GuildScore
		Write32(pAutoJoinCond, 0); //GuildProsperity
		Write16(pAutoJoinCond, 0); //MemberNum

		len = pAutoJoinCond - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 926, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GModifyWonderlandAttri(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT NewAttr = Read32(p);
	UINT EnterWLRoomContrLimit = Read32(p);

}

void ResponseC2GModifyWonderlandAttri(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //NewAttr
	Write32(p, 0); //EnterWLRoomContrLimit

	len = p - buf;
	SendToClient(Client, 927, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GModifyWonderlandNotes(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT NotesLen = Read16(p);

}

void ResponseC2GModifyWonderlandNotes(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //NotesLen

	len = p - buf;
	SendToClient(Client, 928, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GModifyWonderlandDescs(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT DescLen = Read16(p);

}

void ResponseC2GModifyWonderlandDescs(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //DescLen
	Write16(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 929, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GModifyGuildPlayerFlag(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT DstUin = Read32(p);
	UINT Flag = Read32(p);
	UINT Value = Read32(p);

}

void ResponseC2GModifyGuildPlayerFlag(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //DstUin
	Write32(p, 0); //Flag
	Write32(p, 0); //Value

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GGetWLMstInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT ID = Read16(p);
	bool GetType = Read8(p);

}

void ResponseC2GGetWLMstInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //GetType
	Write16(p, 0); //Num
	for (size_t i = 0; i < n; i++)
	{ //WLMonsterInfo
		BYTE* pWLMonsterInfo = p;
		Write16(pWLMonsterInfo, 0); //len

		Write16(pWLMonsterInfo, 0); //ID
		WriteString(pWLMonsterInfo, 0); //Nickname[]
		Write16(pWLMonsterInfo, 0); //Type
		Write16(pWLMonsterInfo, 0); //Style
		Write32(pWLMonsterInfo, 0); //Experience
		Write8(pWLMonsterInfo, 0); //Flag
		Write8(pWLMonsterInfo, 0); //Status
		Write32(pWLMonsterInfo, 0); //EndTime
		Write32(pWLMonsterInfo, 0); //LeftTime

		len = pWLMonsterInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //MstEggNum
	for (size_t i = 0; i < n; i++)
	{ //MstEggs
		BYTE* pMstEggs = p;
		Write16(pMstEggs, 0); //len

		Write32(pMstEggs, 0); //ItemID
		Write32(pMstEggs, 0); //Posion[]

		len = pMstEggs - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 938, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyC2GUpdateWLMstInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ID
	{ //WlMonsterValueInfo
		BYTE* pWlMonsterValueInfo = p;
		Write16(pWlMonsterValueInfo, 0); //len

		Write32(pWlMonsterValueInfo, 0); //Experience

		len = pWlMonsterValueInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 939, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestC2GCheckNameDirty(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	char[] Name[] = ReadString(p);

}

void ResponseC2GCheckNameDirty(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 940, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GChangeWLMstName(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT ID = Read16(p);
	char[] Name[] = ReadString(p);

}

void ResponseC2GChangeWLMstName(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //ID
	WriteString(p, 0); //Name[]

	len = p - buf;
	SendToClient(Client, 960, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GInitWLMonsterEgg(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT Type = Read16(p);
	char[] Name[] = ReadString(p);

}

void ResponseC2GInitWLMonsterEgg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //ID
	Write16(p, 0); //Type
	WriteString(p, 0); //Name[]

	len = p - buf;
	SendToClient(Client, 953, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyC2GInitWLMonsterEgg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ID
	Write16(p, 0); //Type
	WriteString(p, 0); //Name[]
	Write32(p, 0); //LeftTime

	len = p - buf;
	SendToClient(Client, 954, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestC2GEvolutionWLMst(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT ID = Read16(p);

}

void ResponseC2GEvolutionWLMst(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //ID
	Write16(p, 0); //Style
	{ //WlMonsterValueInfo
		BYTE* pWlMonsterValueInfo = p;
		Write16(pWlMonsterValueInfo, 0); //len

		Write32(pWlMonsterValueInfo, 0); //Experience

		len = pWlMonsterValueInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 955, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyC2GEvolutionWLMst(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ID
	Write16(p, 0); //Style
	{ //WlMonsterValueInfo
		BYTE* pWlMonsterValueInfo = p;
		Write16(pWlMonsterValueInfo, 0); //len

		Write32(pWlMonsterValueInfo, 0); //Experience

		len = pWlMonsterValueInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //LeftTime

	len = p - buf;
	SendToClient(Client, 956, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyC2GEvolutionWLMstFinish(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ID
	Write16(p, 0); //Style
	{ //WlMonsterValueInfo
		BYTE* pWlMonsterValueInfo = p;
		Write16(pWlMonsterValueInfo, 0); //len

		Write32(pWlMonsterValueInfo, 0); //Experience

		len = pWlMonsterValueInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 957, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestC2GFeedWLMst(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT ID = Read16(p);
	UINT FeedItemID = Read32(p);

}

void ResponseC2GFeedWLMst(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //Award
	for (size_t i = 0; i < n; i++)
	{ //MutualAward
		BYTE* pMutualAward = p;
		Write16(pMutualAward, 0); //len

		Write32(pMutualAward, 0); //IncWlMstExperience
		Write32(pMutualAward, 0); //TotalWlMstExperience
		Write32(pMutualAward, 0); //IncExperience
		Write32(pMutualAward, 0); //TotalExperience
		Write32(pMutualAward, 0); //IncWlDegree
		Write32(pMutualAward, 0); //TotalWlDegree
		Write32(pMutualAward, 0); //WeeklyWlDegree

		len = pMutualAward - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //MstIncExpType

	len = p - buf;
	SendToClient(Client, 958, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GCareWLMst(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT ID = Read16(p);
	int[] GenEggPosion[] = Read32(p);

}

void ResponseC2GCareWLMst(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //Award
	for (size_t i = 0; i < n; i++)
	{ //MutualAward
		BYTE* pMutualAward = p;
		Write16(pMutualAward, 0); //len

		Write32(pMutualAward, 0); //IncWlMstExperience
		Write32(pMutualAward, 0); //TotalWlMstExperience
		Write32(pMutualAward, 0); //IncExperience
		Write32(pMutualAward, 0); //TotalExperience
		Write32(pMutualAward, 0); //IncWlDegree
		Write32(pMutualAward, 0); //TotalWlDegree
		Write32(pMutualAward, 0); //WeeklyWlDegree

		len = pMutualAward - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 959, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestDonateEnergyMstEvolution(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT MstID = Read16(p);
	UINT CashNum = Read32(p);

}

void ResponseDonateEnergyMstEvolution(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //MstID
	Write32(p, 0); //CashNum
	Write32(p, 0); //TotalCashNum
	Write32(p, 0); //ContributionNum
	Write32(p, 0); //TotalWlDegree
	Write32(p, 0); //WeeklyWlDegree
	Write32(p, 0); //LeftTime

	len = p - buf;
	SendToClient(Client, 966, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestPickRoomGenItem(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	bool ItemType = Read8(p);
	{ //ItemInfo
		BYTE* pItemInfo = p;
		len = Read16(pItemInfo);

		int ItemID = Read32(pItemInfo);
		int[] Posion[] = Read32(pItemInfo);

		p += len;
	}

}

void ResponsePickRoomGenItem(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	WriteUn(p, 0); //Uin
	Write8(p, 0); //ItemType
	{ //ItemInfo
		BYTE* pItemInfo = p;
		Write16(pItemInfo, 0); //len

		Write32(pItemInfo, 0); //ItemID
		Write32(pItemInfo, 0); //Posion[]

		len = pItemInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //UseItemID
	Write32(p, 0); //UseItemNum
	Write8(p, 0); //IncInfo
	for (size_t i = 0; i < n; i++)
	{ //IncInfo
		BYTE* pIncInfo = p;
		Write16(pIncInfo, 0); //len

		Write32(pIncInfo, 0); //Money
		Write32(pIncInfo, 0); //SuperMoney
		Write32(pIncInfo, 0); //Exp
		Write32(pIncInfo, 0); //Charm
		Write32(pIncInfo, 0); //DanceExp
		Write32(pIncInfo, 0); //Coupons
		Write32(pIncInfo, 0); //Admiration
		Write32(pIncInfo, 0); //LuckMoney
		Write32(pIncInfo, 0); //TeamWorkExp
		Write32(pIncInfo, 0); //AchievePoint
		Write32(pIncInfo, 0); //ConsumeScore
		Write32(pIncInfo, 0); //HistoryConsumeScore
		Write32(pIncInfo, 0); //LadderMatchAchievePoint

		len = pIncInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //ItemNum
	for (size_t i = 0; i < n; i++)
	{ //AddItemInfo
		BYTE* pAddItemInfo = p;
		Write16(pAddItemInfo, 0); //len

		Write32(pAddItemInfo, 0); //ItemID
		Write32(pAddItemInfo, 0); //ItemNum
		Write32(pAddItemInfo, 0); //AvailPeriod
		Write8(pAddItemInfo, 0); //Status
		WriteUn(pAddItemInfo, 0); //ObtainTime
		Write32(pAddItemInfo, 0); //OtherAttribute

		len = pAddItemInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 967, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyPickRoomGenItem(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //Uin
	Write8(p, 0); //ItemType
	{ //ItemInfo
		BYTE* pItemInfo = p;
		Write16(pItemInfo, 0); //len

		Write32(pItemInfo, 0); //ItemID
		Write32(pItemInfo, 0); //Posion[]

		len = pItemInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 968, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyRoomGenItem(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //All
	Write8(p, 0); //ItemType
	Write16(p, 0); //ItemNum
	for (size_t i = 0; i < n; i++)
	{ //Items
		BYTE* pItems = p;
		Write16(pItems, 0); //len

		Write32(pItems, 0); //ItemID
		Write32(pItems, 0); //Posion[]

		len = pItems - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 969, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestC2GUpdateWlMstFlag(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT ID = Read16(p);
	bool Flag = Read8(p);

}

void ResponseC2GUpdateWlMstFlag(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //ID
	Write8(p, 0); //Flag

	len = p - buf;
	SendToClient(Client, 974, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyC2GUpdateWlMstFlag(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ID
	Write8(p, 0); //Flag

	len = p - buf;
	SendToClient(Client, 975, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetWonderLandBuildingInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetWonderLandBuildingInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen
	Write16(p, 0); //BuildingNum
	for (size_t i = 0; i < n; i++)
	{ //BuildingInfo
		BYTE* pBuildingInfo = p;
		Write16(pBuildingInfo, 0); //len

		Write32(pBuildingInfo, 0); //WlId
		Write32(pBuildingInfo, 0); //CityId
		Write32(pBuildingInfo, 0); //BuildingID
		Write8(pBuildingInfo, 0); //BuildingLevel
		Write8(pBuildingInfo, 0); //BuildingStatus
		Write32(pBuildingInfo, 0); //StartTime
		Write32(pBuildingInfo, 0); //EndTime
		Write32(pBuildingInfo, 0); //LeftTime
		Write8(pBuildingInfo, 0); //OpenAttribute

		len = pBuildingInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 899, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestUpgradeWonderLandBuilding(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT WlId = Read32(p);
	UINT DstCityId = Read32(p);
	UINT DstBuildingID = Read32(p);

}

void ResponseUpgradeWonderLandBuilding(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen
	Write32(p, 0); //WlId
	Write32(p, 0); //DstCityId
	Write32(p, 0); //DstBuildingID
	WriteU(p, 0); //HasBuildingInfo
	for (size_t i = 0; i < n; i++)
	{ //BuildingInfo
		BYTE* pBuildingInfo = p;
		Write16(pBuildingInfo, 0); //len

		Write32(pBuildingInfo, 0); //WlId
		Write32(pBuildingInfo, 0); //CityId
		Write32(pBuildingInfo, 0); //BuildingID
		Write8(pBuildingInfo, 0); //BuildingLevel
		Write8(pBuildingInfo, 0); //BuildingStatus
		Write32(pBuildingInfo, 0); //StartTime
		Write32(pBuildingInfo, 0); //EndTime
		Write32(pBuildingInfo, 0); //LeftTime
		Write8(pBuildingInfo, 0); //OpenAttribute

		len = pBuildingInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 915, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestDonateEnergy(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT WlId = Read32(p);
	UINT CityId = Read32(p);
	UINT BuildingID = Read32(p);
	UINT EnergyNum = Read32(p);

}

void ResponseDonateEnergy(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen
	Write32(p, 0); //WlId
	Write32(p, 0); //DstCityId
	Write32(p, 0); //DstBuildingID
	Write32(p, 0); //EnergyNum
	Write32(p, 0); //CashNum
	Write32(p, 0); //TotalCashNum
	Write32(p, 0); //ContributionNum
	Write32(p, 0); //TotalContributionNum
	Write32(p, 0); //LeftTime

	len = p - buf;
	SendToClient(Client, 916, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyUpgradeWonderLandBuildingFinished(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //WlId
	Write32(p, 0); //DstCityId
	Write32(p, 0); //DstBuildingID
	Write8(p, 0); //BuildingLevel

	len = p - buf;
	SendToClient(Client, 917, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestSetWonderLandBuildingAttribute(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT WlId = Read32(p);
	UINT DstCityId = Read32(p);
	UINT DstBuildingID = Read32(p);
	bool OpenAttribute = Read8(p);

}

void ResponseSetWonderLandBuildingAttribute(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //ReasonLen
	Write32(p, 0); //WlId
	Write32(p, 0); //DstCityId
	Write32(p, 0); //DstBuildingID
	Write8(p, 0); //OpenAttribute

	len = p - buf;
	SendToClient(Client, 918, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyUpdateWlBuilding(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	{ //Building
		BYTE* pBuilding = p;
		Write16(pBuilding, 0); //len

		Write32(pBuilding, 0); //WlId
		Write32(pBuilding, 0); //CityId
		Write32(pBuilding, 0); //BuildingID
		Write8(pBuilding, 0); //BuildingLevel
		Write8(pBuilding, 0); //BuildingStatus
		Write32(pBuilding, 0); //StartTime
		Write32(pBuilding, 0); //EndTime
		Write32(pBuilding, 0); //LeftTime
		Write8(pBuilding, 0); //OpenAttribute

		len = pBuilding - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 914, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyClientWlCapacityChanage(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //WlId
	Write32(p, 0); //CityId
	Write16(p, 0); //NewCapacity
	Write32(p, 0); //LeftWaitTime
	Write8(p, 0); //IsCapacityAdd

	len = p - buf;
	SendToClient(Client, 979, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestC2GGetRecommendWLList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseC2GGetRecommendWLList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Count
	for (size_t i = 0; i < n; i++)
	{ //WonderLandSummaryInfo
		BYTE* pWonderLandSummaryInfo = p;
		Write16(pWonderLandSummaryInfo, 0); //len

		Write32(pWonderLandSummaryInfo, 0); //WonderLandID
		WriteString(pWonderLandSummaryInfo, 0); //WonderLandName[]
		Write32(pWonderLandSummaryInfo, 0); //Level
		Write32(pWonderLandSummaryInfo, 0); //MaxGuildNum
		Write32(pWonderLandSummaryInfo, 0); //CurrentGuildNum
		Write32(pWonderLandSummaryInfo, 0); //Activity
		Write32(pWonderLandSummaryInfo, 0); //Attribute
		Write32(pWonderLandSummaryInfo, 0); //CrystalNum
		Write32(pWonderLandSummaryInfo, 0); //Prosperity
		Write32(pWonderLandSummaryInfo, 0); //MatchScore
		WriteU(pWonderLandSummaryInfo, 0); //WlCityCapacity
		WriteU(pWonderLandSummaryInfo, 0); //WlCityCurPersonNum

		len = pWonderLandSummaryInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 983, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GGetRecommendWlGuildList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseC2GGetRecommendWlGuildList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Count
	for (size_t i = 0; i < n; i++)
	{ //GuildDescInfo
		BYTE* pGuildDescInfo = p;
		Write16(pGuildDescInfo, 0); //len

		Write32(pGuildDescInfo, 0); //GuildID
		WriteString(pGuildDescInfo, 0); //Name[]
		Write32(pGuildDescInfo, 0); //Level
		Write32(pGuildDescInfo, 0); //Score
		Write32(pGuildDescInfo, 0); //CreateTime
		Write16(pGuildDescInfo, 0); //Attribute
		Write16(pGuildDescInfo, 0); //MaxMember
		Write16(pGuildDescInfo, 0); //CurrentMember
		Write32(pGuildDescInfo, 0); //Prosperity
		Write16(pGuildDescInfo, 0); //Level
		{ //GuildEnlistCond
			BYTE* pGuildEnlistCond = pGuildDescInfo;
			Write16(pGuildEnlistCond, 0); //len

			Write32(pGuildEnlistCond, 0); //ProsperityCondition
			Write32(pGuildEnlistCond, 0); //JoinTotalCondition
			Write32(pGuildEnlistCond, 0); //HonorCondition
			Write32(pGuildEnlistCond, 0); //CharmCondition
			Write32(pGuildEnlistCond, 0); //DanceExpCondition
			Write32(pGuildEnlistCond, 0); //SkillPointCondition
			Write32(pGuildEnlistCond, 0); //ExpLevelCondition

			len = pGuildEnlistCond - pGuildDescInfo;
			Set16(pGuildDescInfo, (WORD)len);
			pGuildDescInfo += len;
		}
		Write8(pGuildDescInfo, 0); //SubType

		len = pGuildDescInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 984, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetRecommendWlCityList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	U Uin = ReadU(p);
	int Time = Read32(p);

}

void ResponseGetRecommendWlCityList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteU(p, 0); //ResultId
	WriteU(p, 0); //Num
	for (size_t i = 0; i < n; i++)
	{ //WlCityList
		BYTE* pWlCityList = p;
		Write16(pWlCityList, 0); //len

		Write32(pWlCityList, 0); //WlId
		Write32(pWlCityList, 0); //CityId

		len = pWlCityList - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 991, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestBanWlTalk(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	U SrcUin = ReadU(p);
	int Time = Read32(p);
	U DstUin = ReadU(p);
	U DstGuildId = ReadU(p);
	U BanTime = ReadU(p);

}

void ResponseBanWlTalk(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteU(p, 0); //ResultId
	WriteU(p, 0); //DstUin

	len = p - buf;
	SendToClient(Client, 992, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestQueryWlWelfareInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	U Uin = ReadU(p);
	int Time = Read32(p);

}

void ResponseQueryWlWelfareInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteU(p, 0); //ResultId
	WriteU(p, 0); //HasWelfareInfo
	for (size_t i = 0; i < n; i++)
	{ //WelfareInfo
		BYTE* pWelfareInfo = p;
		Write16(pWelfareInfo, 0); //len

		WriteU(pWelfareInfo, 0); //CanGetWelfareForS
		WriteU(pWelfareInfo, 0); //CanGetWelfareOfBox1
		WriteU(pWelfareInfo, 0); //NeedDegreeOfBox1
		WriteU(pWelfareInfo, 0); //CanGetWelfareOfBox2
		WriteU(pWelfareInfo, 0); //NeedDegreeOfBox2
		WriteU(pWelfareInfo, 0); //CanGetWelfareOfBox3
		WriteU(pWelfareInfo, 0); //NeedDegreeOfBox3
		WriteU(pWelfareInfo, 0); //AppellationAdd

		len = pWelfareInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 990, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetWlWelfare(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	U Uin = ReadU(p);
	int Time = Read32(p);
	U WelfareId = ReadU(p);

}

void ResponseGetWlWelfare(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteU(p, 0); //ResultId
	WriteU(p, 0); //WelfareId
	WriteU(p, 0); //IncCash

	len = p - buf;
	SendToClient(Client, 985, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestQueryWlBonusInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	U Uin = ReadU(p);
	int Time = Read32(p);

}

void ResponseQueryWlBonusInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteU(p, 0); //ResultId
	WriteU(p, 0); //HasWlBonusInfo
	for (size_t i = 0; i < n; i++)
	{ //WlBonusInfo
		BYTE* pWlBonusInfo = p;
		Write16(pWlBonusInfo, 0); //len

		WriteU(pWlBonusInfo, 0); //TotalTimesByCrystal
		WriteU(pWlBonusInfo, 0); //LeftTimesByCrystal
		WriteU(pWlBonusInfo, 0); //TotalTimesByCard
		WriteU(pWlBonusInfo, 0); //LeftTimesByCard
		WriteU(pWlBonusInfo, 0); //CanGetWlBonus
		WriteU(pWlBonusInfo, 0); //CanStartWlBonus
		WriteU(pWlBonusInfo, 0); //NeedCrystalForStartWlBonus

		len = pWlBonusInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 986, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestStartWlBonus(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	U Uin = ReadU(p);
	int Time = Read32(p);
	U StartWlBonusType = ReadU(p);

}

void ResponseStartWlBonus(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteU(p, 0); //ResultId
	WriteU(p, 0); //IncCash

	len = p - buf;
	SendToClient(Client, 987, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetWlBonus(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	U Uin = ReadU(p);
	int Time = Read32(p);

}

void ResponseGetWlBonus(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteU(p, 0); //ResultId
	WriteU(p, 0); //IncCash

	len = p - buf;
	SendToClient(Client, 988, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestKickFromWlRoom(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT DstUin = Read32(p);

}

void ResponseKickFromWlRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 874, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyKickFromWlRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ReasonID

	len = p - buf;
	SendToClient(Client, 875, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGuildDonate(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT DonateValue = Read32(p);

}

void ResponseGuildDonate(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //DonateValue
	Write32(p, 0); //CurGuildDonateValue

	len = p - buf;
	SendToClient(Client, 997, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyGS2CUserVisionOnNPC(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	{ //NPCMapInfo
		BYTE* pNPCMapInfo = p;
		Write16(pNPCMapInfo, 0); //len

		Write32(pNPCMapInfo, 0); //WLGid
		Write32(pNPCMapInfo, 0); //CityId
		Write32(pNPCMapInfo, 0); //MapId

		len = pNPCMapInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //NPCNum
	for (size_t i = 0; i < n; i++)
	{ //NPCVisionList
		BYTE* pNPCVisionList = p;
		Write16(pNPCVisionList, 0); //len

		Write32(pNPCVisionList, 0); //ActType
		Write32(pNPCVisionList, 0); //ActivityType
		{ //NPCInfo
			BYTE* pNPCInfo = pNPCVisionList;
			Write16(pNPCInfo, 0); //len

			Write32(pNPCInfo, 0); //NPCGid
			WriteString(pNPCInfo, 0); //WLNPCName[]
			Write32(pNPCInfo, 0); //WLNPCType
			Write32(pNPCInfo, 0); //AwardPara
			{ //Position
				BYTE* pPosition = pNPCInfo;
				Write16(pPosition, 0); //len

				Write32(pPosition, 0); //X
				Write32(pPosition, 0); //Y
				Write32(pPosition, 0); //Z

				len = pPosition - pNPCInfo;
				Set16(pNPCInfo, (WORD)len);
				pNPCInfo += len;
			}
			Write32(pNPCInfo, 0); //Blood
			Write32(pNPCInfo, 0); //TotalBlood
			Write32(pNPCInfo, 0); //Status
			Write32(pNPCInfo, 0); //LifeTime

			len = pNPCInfo - pNPCVisionList;
			Set16(pNPCVisionList, (WORD)len);
			pNPCVisionList += len;
		}

		len = pNPCVisionList - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 13001, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyGS2CUpdateNPCAttr(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	{ //NPCMapInfo
		BYTE* pNPCMapInfo = p;
		Write16(pNPCMapInfo, 0); //len

		Write32(pNPCMapInfo, 0); //WLGid
		Write32(pNPCMapInfo, 0); //CityId
		Write32(pNPCMapInfo, 0); //MapId

		len = pNPCMapInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //UpdateNum
	for (size_t i = 0; i < n; i++)
	{ //AttrList
		BYTE* pAttrList = p;
		Write16(pAttrList, 0); //len

		Write32(pAttrList, 0); //NPCGid
		Write32(pAttrList, 0); //AttrType
		Write32(pAttrList, 0); //AttrValue

		len = pAttrList - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 13002, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGSUserActOnNPC(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	{ //NPCMapInfo
		BYTE* pNPCMapInfo = p;
		len = Read16(pNPCMapInfo);

		UINT WLGid = Read32(pNPCMapInfo);
		UINT CityId = Read32(pNPCMapInfo);
		UINT MapId = Read32(pNPCMapInfo);

		p += len;
	}
	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT ActType = Read32(p);
	UINT ToolID = Read32(p);
	UINT NPCID = Read32(p);
	UINT ActivityType = Read32(p);

}

void ResponseGSUserActOnNPC(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	{ //NPCMapInfo
		BYTE* pNPCMapInfo = p;
		Write16(pNPCMapInfo, 0); //len

		Write32(pNPCMapInfo, 0); //WLGid
		Write32(pNPCMapInfo, 0); //CityId
		Write32(pNPCMapInfo, 0); //MapId

		len = pNPCMapInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //ActType
	Write32(p, 0); //NPCID
	Write32(p, 0); //ResultID
	Write32(p, 0); //ResultLen
	{ //AwardInfo
		BYTE* pAwardInfo = p;
		Write16(pAwardInfo, 0); //len

		Write32(pAwardInfo, 0); //Contribution
		Write32(pAwardInfo, 0); //Experience
		Write32(pAwardInfo, 0); //Money
		Write32(pAwardInfo, 0); //Coupons
		{ //ItemInfo
			BYTE* pItemInfo = pAwardInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute

			len = pItemInfo - pAwardInfo;
			Set16(pAwardInfo, (WORD)len);
			pAwardInfo += len;
		}

		len = pAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //ActivityType

	len = p - buf;
	SendToClient(Client, 13003, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyGS2CUserActOnNPC(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	{ //NPCMapInfo
		BYTE* pNPCMapInfo = p;
		Write16(pNPCMapInfo, 0); //len

		Write32(pNPCMapInfo, 0); //WLGid
		Write32(pNPCMapInfo, 0); //CityId
		Write32(pNPCMapInfo, 0); //MapId

		len = pNPCMapInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //UserUin
	Write32(p, 0); //ActType
	Write32(p, 0); //NPCID
	Write32(p, 0); //ResultID
	{ //AwardInfo
		BYTE* pAwardInfo = p;
		Write16(pAwardInfo, 0); //len

		Write32(pAwardInfo, 0); //Contribution
		Write32(pAwardInfo, 0); //Experience
		Write32(pAwardInfo, 0); //Money
		Write32(pAwardInfo, 0); //Coupons
		{ //ItemInfo
			BYTE* pItemInfo = pAwardInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute

			len = pItemInfo - pAwardInfo;
			Set16(pAwardInfo, (WORD)len);
			pAwardInfo += len;
		}

		len = pAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 13004, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyGS2CUserActionResult(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	{ //NPCMapInfo
		BYTE* pNPCMapInfo = p;
		Write16(pNPCMapInfo, 0); //len

		Write32(pNPCMapInfo, 0); //WLGid
		Write32(pNPCMapInfo, 0); //CityId
		Write32(pNPCMapInfo, 0); //MapId

		len = pNPCMapInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //NPCID
	Write32(p, 0); //ActType
	Write32(p, 0); //ResultID
	{ //AwardInfo
		BYTE* pAwardInfo = p;
		Write16(pAwardInfo, 0); //len

		Write32(pAwardInfo, 0); //Contribution
		Write32(pAwardInfo, 0); //Experience
		Write32(pAwardInfo, 0); //Money
		Write32(pAwardInfo, 0); //Coupons
		{ //ItemInfo
			BYTE* pItemInfo = pAwardInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute

			len = pItemInfo - pAwardInfo;
			Set16(pAwardInfo, (WORD)len);
			pAwardInfo += len;
		}

		len = pAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 13005, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyGS2CCatchTraitorSettle(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //KillHeaderUin
	WriteString(p, 0); //KillHeaderName[]
	Write32(p, 0); //KillNormalTraitorNum
	Write32(p, 0); //TotalTraitorNum
	Write32(p, 0); //WlCrystalNum
	{ //UserRecord
		BYTE* pUserRecord = p;
		Write16(pUserRecord, 0); //len

		WriteUn(pUserRecord, 0); //uszIsKillHeader
		Write32(pUserRecord, 0); //KillTraitorNum
		Write32(pUserRecord, 0); //Contribution

		len = pUserRecord - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //RankNum
	for (size_t i = 0; i < n; i++)
	{ //RankList
		BYTE* pRankList = p;
		Write16(pRankList, 0); //len

		Write32(pRankList, 0); //UserUin
		WriteString(pRankList, 0); //UserName[]
		Write32(pRankList, 0); //UCTANum

		len = pRankList - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 13006, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGSGetCatchTraitorInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT ActivityType = Read32(p);

}

void ResponseGSGetCatchTraitorInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //ResultId
	Write32(p, 0); //CatchedNum
	Write32(p, 0); //TotalNum
	Write32(p, 0); //CatchedHeaderNum
	Write32(p, 0); //TotalHeaderNum

	len = p - buf;
	SendToClient(Client, 13107, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void ResponseGSBeginCatchTraitor(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //ResultId

	len = p - buf;
	SendToClient(Client, 13007, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestUserApplyInMaze(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT ActivityType = Read32(p);

}

void ResponseUserApplyInMaze(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //ResultId
	Write32(p, 0); //DoorBit
	Write32(p, 0); //ActivityType
	Write32(p, 0); //GetedChestNum
	Write32(p, 0); //PermitChestNum

	len = p - buf;
	SendToClient(Client, 13008, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestUserApplyOutMaze(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT ActivityType = Read32(p);

}

void ResponseUserApplyOutMaze(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //ResultId
	Write32(p, 0); //ActivityType

	len = p - buf;
	SendToClient(Client, 13009, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyUserOutMaze(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //ReasonId
	Write32(p, 0); //ActivityType

	len = p - buf;
	SendToClient(Client, 13106, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyWlNpcMove(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //NPCID
	{ //SrcPos
		BYTE* pSrcPos = p;
		Write16(pSrcPos, 0); //len

		Write32(pSrcPos, 0); //X
		Write32(pSrcPos, 0); //Y
		Write32(pSrcPos, 0); //Z

		len = pSrcPos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //DstPos
		BYTE* pDstPos = p;
		Write16(pDstPos, 0); //len

		Write32(pDstPos, 0); //X
		Write32(pDstPos, 0); //Y
		Write32(pDstPos, 0); //Z

		len = pDstPos - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //MoveType

	len = p - buf;
	SendToClient(Client, 13108, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyWlNpcAttackPlayer(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //NPCID
	Write32(p, 0); //GetHitUin
	Write32(p, 0); //AttackType

	len = p - buf;
	SendToClient(Client, 13109, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyAttackBeastSettle(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //LastHitUin
	WriteString(p, 0); //LastHitName[]
	Write32(p, 0); //LastHitExtCoupons
	Write32(p, 0); //LastHitExtChest
	Write32(p, 0); //TimeConsume
	Write32(p, 0); //HittedBlood
	Write32(p, 0); //GetCoupons
	Write32(p, 0); //GetExtCoupons
	Write32(p, 0); //GetChest
	Write32(p, 0); //CrystalOre

	len = p - buf;
	SendToClient(Client, 13114, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyWlNpcCarryCoupons(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //NPCID
	Write32(p, 0); //Coupons

	len = p - buf;
	SendToClient(Client, 13116, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestC2GGetWlQTRoomList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	Un Time = ReadUn(p);
	bool TlvNum = Read8(p);

}

void ResponseC2GGetWlQTRoomList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //MessageLen
	Write8(p, 0); //RoomNum
	for (size_t i = 0; i < n; i++)
	{ //RoomList
		BYTE* pRoomList = p;
		Write16(pRoomList, 0); //len

		Write8(pRoomList, 0); //TlvNum
		for (size_t i = 0; i < n; i++)
		{ //TlvValue
			BYTE* pTlvValue = pRoomList;
			Write16(pTlvValue, 0); //len

			Write8(pTlvValue, 0); //Tid
			Write16(pTlvValue, 0); //Len

			len = pTlvValue - pRoomList;
			Set16(pRoomList, (WORD)len);
			pRoomList += len;
		}

		len = pRoomList - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 980, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GCreateWlQTRoom(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	Un Time = ReadUn(p);
	USHORT NameLen = Read16(p);
	bool Type = Read8(p);

}

void ResponseC2GCreateWlQTRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //MessageLen
	Write32(p, 0); //RoomID

	len = p - buf;
	SendToClient(Client, 981, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GSetWlQTRoom(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	Un Time = ReadUn(p);
	UINT RoomID = Read32(p);

}

void ResponseC2GSetWlQTRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //RoomID

	len = p - buf;
	SendToClient(Client, 982, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void ResponseWishTreeInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Result
	{ //WishTreeBaseInfo
		BYTE* pWishTreeBaseInfo = p;
		Write16(pWishTreeBaseInfo, 0); //len

		Write32(pWishTreeBaseInfo, 0); //WishTreeExp
		Write32(pWishTreeBaseInfo, 0); //WaterNum
		Write32(pWishTreeBaseInfo, 0); //LastWaterTime

		len = pWishTreeBaseInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //Info
		BYTE* pInfo = p;
		Write16(pInfo, 0); //len

		Write(pInfo, 0); //Num
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute

			len = pItemInfo - pInfo;
			Set16(pInfo, (WORD)len);
			pInfo += len;
		}
		WriteUn(pInfo, 0); //astcostNum
		for (size_t i = 0; i < n; i++)
		{ //ItemCost
			BYTE* pItemCost = pInfo;
			Write16(pItemCost, 0); //len

			Write32(pItemCost, 0); //CashCost
			Write32(pItemCost, 0); //ItemCost

			len = pItemCost - pInfo;
			Set16(pInfo, (WORD)len);
			pInfo += len;
		}

		len = pInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //BCNum
	for (size_t i = 0; i < n; i++)
	{ //BC
		BYTE* pBC = p;
		Write16(pBC, 0); //len

		Write16(pBC, 0); //ContentLen

		len = pBC - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //ItemNum
	for (size_t i = 0; i < n; i++)
	{ //ItemInfo
		BYTE* pItemInfo = p;
		Write16(pItemInfo, 0); //len

		Write32(pItemInfo, 0); //ItemID
		Write32(pItemInfo, 0); //ItemNum
		Write32(pItemInfo, 0); //AvailPeriod
		Write8(pItemInfo, 0); //Status
		WriteUn(pItemInfo, 0); //ObtainTime
		Write32(pItemInfo, 0); //OtherAttribute

		len = pItemInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 12196, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void ResponseWishTreeWater(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Result
	Write32(p, 0); //Uin
	{ //WishTreeBaseInfo
		BYTE* pWishTreeBaseInfo = p;
		Write16(pWishTreeBaseInfo, 0); //len

		Write32(pWishTreeBaseInfo, 0); //WishTreeExp
		Write32(pWishTreeBaseInfo, 0); //WaterNum
		Write32(pWishTreeBaseInfo, 0); //LastWaterTime

		len = pWishTreeBaseInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //Info
		BYTE* pInfo = p;
		Write16(pInfo, 0); //len

		Write(pInfo, 0); //Num
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pInfo;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute

			len = pItemInfo - pInfo;
			Set16(pInfo, (WORD)len);
			pInfo += len;
		}
		WriteUn(pInfo, 0); //astcostNum
		for (size_t i = 0; i < n; i++)
		{ //ItemCost
			BYTE* pItemCost = pInfo;
			Write16(pItemCost, 0); //len

			Write32(pItemCost, 0); //CashCost
			Write32(pItemCost, 0); //ItemCost

			len = pItemCost - pInfo;
			Set16(pInfo, (WORD)len);
			pInfo += len;
		}

		len = pInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //Cash

	len = p - buf;
	SendToClient(Client, 12197, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void ResponseWishTreeBuyCommodity(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //HasItem
	for (size_t i = 0; i < n; i++)
	{ //ItemInfo
		BYTE* pItemInfo = p;
		Write16(pItemInfo, 0); //len

		Write32(pItemInfo, 0); //ItemID
		Write32(pItemInfo, 0); //ItemNum
		Write32(pItemInfo, 0); //AvailPeriod
		Write8(pItemInfo, 0); //Status
		WriteUn(pItemInfo, 0); //ObtainTime
		Write32(pItemInfo, 0); //OtherAttribute

		len = pItemInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HasCost
	for (size_t i = 0; i < n; i++)
	{ //RandCost
		BYTE* pRandCost = p;
		Write16(pRandCost, 0); //len

		Write32(pRandCost, 0); //CashCost
		Write32(pRandCost, 0); //ItemCost

		len = pRandCost - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 12198, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyWishTreeBaseInfoChangeInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //IsLvUp
	{ //WishTreeBaseInfo
		BYTE* pWishTreeBaseInfo = p;
		Write16(pWishTreeBaseInfo, 0); //len

		Write32(pWishTreeBaseInfo, 0); //WishTreeExp
		Write32(pWishTreeBaseInfo, 0); //WaterNum
		Write32(pWishTreeBaseInfo, 0); //LastWaterTime

		len = pWishTreeBaseInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //Level

	len = p - buf;
	SendToClient(Client, 12199, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestC2SSearchKartAltas(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT DstUin = Read32(p);

}

void ResponseC2SearchKartAltas(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Result
	Write32(p, 0); //DstUin
	Write16(p, 0); //ItemNum
	for (size_t i = 0; i < n; i++)
	{ //ItemInfoArray
		BYTE* pItemInfoArray = p;
		Write16(pItemInfoArray, 0); //len

		Write32(pItemInfoArray, 0); //ItemID
		Write32(pItemInfoArray, 0); //RefitCout
		{ //AltasCurKartAttr
			BYTE* pAltasCurKartAttr = pItemInfoArray;
			Write16(pAltasCurKartAttr, 0); //len

			Write32(pAltasCurKartAttr, 0); //Uin
			Write32(pAltasCurKartAttr, 0); //KartId
			Write32(pAltasCurKartAttr, 0); //RefitCout
			Write16(pAltasCurKartAttr, 0); //MaxFlags
			Write16(pAltasCurKartAttr, 0); //WWeight
			Write16(pAltasCurKartAttr, 0); //SpeedWeight
			Write16(pAltasCurKartAttr, 0); //JetWeight
			Write16(pAltasCurKartAttr, 0); //SJetWeight
			Write16(pAltasCurKartAttr, 0); //AccuWeight
			Write32(pAltasCurKartAttr, 0); //ShapeRefitCount
			Write32(pAltasCurKartAttr, 0); //KartHeadRefitItemID
			Write32(pAltasCurKartAttr, 0); //KartTailRefitItemID
			Write32(pAltasCurKartAttr, 0); //KartFlankRefitItemID
			Write32(pAltasCurKartAttr, 0); //KartTireRefitItemID
			{ //KartRefitExInfo
				BYTE* pKartRefitExInfo = pAltasCurKartAttr;
				Write16(pKartRefitExInfo, 0); //len

				Write8(pKartRefitExInfo, 0); //SpeedRefitStar
				Write8(pKartRefitExInfo, 0); //JetRefitStar
				Write8(pKartRefitExInfo, 0); //SJetRefitStar
				Write8(pKartRefitExInfo, 0); //AccuRefitStar
				Write8(pKartRefitExInfo, 0); //SpeedAddRatio
				Write8(pKartRefitExInfo, 0); //JetAddRatio
				Write8(pKartRefitExInfo, 0); //SJetAddRatio
				Write8(pKartRefitExInfo, 0); //AccuAddRatio

				len = pKartRefitExInfo - pAltasCurKartAttr;
				Set16(pAltasCurKartAttr, (WORD)len);
				pAltasCurKartAttr += len;
			}

			len = pAltasCurKartAttr - pItemInfoArray;
			Set16(pItemInfoArray, (WORD)len);
			pItemInfoArray += len;
		}
		{ //AltasKartStoneGrooveInfo
			BYTE* pAltasKartStoneGrooveInfo = pItemInfoArray;
			Write16(pAltasKartStoneGrooveInfo, 0); //len

			Write32(pAltasKartStoneGrooveInfo, 0); //KartID
			Write32(pAltasKartStoneGrooveInfo, 0); //StoneGrooveNum
			for (size_t i = 0; i < n; i++)
			{ //StoneGrooveInfo
				BYTE* pStoneGrooveInfo = pAltasKartStoneGrooveInfo;
				Write16(pStoneGrooveInfo, 0); //len

				Write32(pStoneGrooveInfo, 0); //StoneUseOccaType
				Write32(pStoneGrooveInfo, 0); //SkillStoneID

				len = pStoneGrooveInfo - pAltasKartStoneGrooveInfo;
				Set16(pAltasKartStoneGrooveInfo, (WORD)len);
				pAltasKartStoneGrooveInfo += len;
			}

			len = pAltasKartStoneGrooveInfo - pItemInfoArray;
			Set16(pItemInfoArray, (WORD)len);
			pItemInfoArray += len;
		}

		len = pItemInfoArray - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 13705, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyS2CMyKartAltas(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //ItemNum
	for (size_t i = 0; i < n; i++)
	{ //ItemInfoArray
		BYTE* pItemInfoArray = p;
		Write16(pItemInfoArray, 0); //len

		Write32(pItemInfoArray, 0); //ItemID
		Write32(pItemInfoArray, 0); //RefitCout
		{ //AltasCurKartAttr
			BYTE* pAltasCurKartAttr = pItemInfoArray;
			Write16(pAltasCurKartAttr, 0); //len

			Write32(pAltasCurKartAttr, 0); //Uin
			Write32(pAltasCurKartAttr, 0); //KartId
			Write32(pAltasCurKartAttr, 0); //RefitCout
			Write16(pAltasCurKartAttr, 0); //MaxFlags
			Write16(pAltasCurKartAttr, 0); //WWeight
			Write16(pAltasCurKartAttr, 0); //SpeedWeight
			Write16(pAltasCurKartAttr, 0); //JetWeight
			Write16(pAltasCurKartAttr, 0); //SJetWeight
			Write16(pAltasCurKartAttr, 0); //AccuWeight
			Write32(pAltasCurKartAttr, 0); //ShapeRefitCount
			Write32(pAltasCurKartAttr, 0); //KartHeadRefitItemID
			Write32(pAltasCurKartAttr, 0); //KartTailRefitItemID
			Write32(pAltasCurKartAttr, 0); //KartFlankRefitItemID
			Write32(pAltasCurKartAttr, 0); //KartTireRefitItemID
			{ //KartRefitExInfo
				BYTE* pKartRefitExInfo = pAltasCurKartAttr;
				Write16(pKartRefitExInfo, 0); //len

				Write8(pKartRefitExInfo, 0); //SpeedRefitStar
				Write8(pKartRefitExInfo, 0); //JetRefitStar
				Write8(pKartRefitExInfo, 0); //SJetRefitStar
				Write8(pKartRefitExInfo, 0); //AccuRefitStar
				Write8(pKartRefitExInfo, 0); //SpeedAddRatio
				Write8(pKartRefitExInfo, 0); //JetAddRatio
				Write8(pKartRefitExInfo, 0); //SJetAddRatio
				Write8(pKartRefitExInfo, 0); //AccuAddRatio

				len = pKartRefitExInfo - pAltasCurKartAttr;
				Set16(pAltasCurKartAttr, (WORD)len);
				pAltasCurKartAttr += len;
			}

			len = pAltasCurKartAttr - pItemInfoArray;
			Set16(pItemInfoArray, (WORD)len);
			pItemInfoArray += len;
		}
		{ //AltasKartStoneGrooveInfo
			BYTE* pAltasKartStoneGrooveInfo = pItemInfoArray;
			Write16(pAltasKartStoneGrooveInfo, 0); //len

			Write32(pAltasKartStoneGrooveInfo, 0); //KartID
			Write32(pAltasKartStoneGrooveInfo, 0); //StoneGrooveNum
			for (size_t i = 0; i < n; i++)
			{ //StoneGrooveInfo
				BYTE* pStoneGrooveInfo = pAltasKartStoneGrooveInfo;
				Write16(pStoneGrooveInfo, 0); //len

				Write32(pStoneGrooveInfo, 0); //StoneUseOccaType
				Write32(pStoneGrooveInfo, 0); //SkillStoneID

				len = pStoneGrooveInfo - pAltasKartStoneGrooveInfo;
				Set16(pAltasKartStoneGrooveInfo, (WORD)len);
				pAltasKartStoneGrooveInfo += len;
			}

			len = pAltasKartStoneGrooveInfo - pItemInfoArray;
			Set16(pItemInfoArray, (WORD)len);
			pItemInfoArray += len;
		}

		len = pItemInfoArray - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 13706, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestC2SGetKartAltasConfig(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT CfgVersion = Read32(p);

}

void ResponseC2SGetKartAltasConfig(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //CfgVersion
	Write8(p, 0); //Result
	Write16(p, 0); //KartAltasCfgNum
	for (size_t i = 0; i < n; i++)
	{ //KartAltasConfig
		BYTE* pKartAltasConfig = p;
		Write16(pKartAltasConfig, 0); //len

		Write32(pKartAltasConfig, 0); //ItemID
		WriteUn(pKartAltasConfig, 0); //KartAltasUrlLen
		Write32(pKartAltasConfig, 0); //KartJetNum

		len = pKartAltasConfig - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 13710, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2STakePartInCarnival(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseC2STakePartInCarnival(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //Result
	Write32(p, 0); //MapID
	Write32(p, 0); //TakeInNum
	Write32(p, 0); //BestScore
	WriteUn(p, 0); //us8TypeNum
	for (size_t i = 0; i < n; i++)
	{ //Carnival_info
		BYTE* pCarnival_info = p;
		Write16(pCarnival_info, 0); //len

		Write32(pCarnival_info, 0); //FinishTime
		Write32(pCarnival_info, 0); //Carnival_Status
		{ //TaskAwardInfo
			BYTE* pTaskAwardInfo = pCarnival_info;
			Write16(pTaskAwardInfo, 0); //len

			Write32(pTaskAwardInfo, 0); //AwardMoney
			Write32(pTaskAwardInfo, 0); //TotalMoney
			Write32(pTaskAwardInfo, 0); //AwardSuperMoney
			Write32(pTaskAwardInfo, 0); //TotalSuperMoney
			Write32(pTaskAwardInfo, 0); //AwardExp
			Write32(pTaskAwardInfo, 0); //TotalExp
			Write32(pTaskAwardInfo, 0); //AwardItemNum
			for (size_t i = 0; i < n; i++)
			{ //AwardItemInfo
				BYTE* pAwardItemInfo = pTaskAwardInfo;
				Write16(pAwardItemInfo, 0); //len

				Write32(pAwardItemInfo, 0); //ItemID
				Write32(pAwardItemInfo, 0); //ItemNum
				Write32(pAwardItemInfo, 0); //AvailPeriod
				Write8(pAwardItemInfo, 0); //Status
				WriteUn(pAwardItemInfo, 0); //ObtainTime
				Write32(pAwardItemInfo, 0); //OtherAttribute

				len = pAwardItemInfo - pTaskAwardInfo;
				Set16(pTaskAwardInfo, (WORD)len);
				pTaskAwardInfo += len;
			}
			Write32(pTaskAwardInfo, 0); //AwardCoupons
			Write32(pTaskAwardInfo, 0); //TotalCoupons
			Write32(pTaskAwardInfo, 0); //AwardLuckMoney
			Write32(pTaskAwardInfo, 0); //TotalLuckMoney
			Write32(pTaskAwardInfo, 0); //AwardTeamWorkExp
			Write32(pTaskAwardInfo, 0); //TotalTeamWorkExp
			Write32(pTaskAwardInfo, 0); //AwardWlCash
			Write32(pTaskAwardInfo, 0); //AwardWlCrystal
			Write32(pTaskAwardInfo, 0); //AwardWlDegree

			len = pTaskAwardInfo - pCarnival_info;
			Set16(pCarnival_info, (WORD)len);
			pCarnival_info += len;
		}
		Write32(pCarnival_info, 0); //CarnivalTaskID

		len = pCarnival_info - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //ReasonLen

	len = p - buf;
	SendToClient(Client, 13077, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifySMCCarnivalGameResult(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write8(p, 0); //IsSuccess
	Write32(p, 0); //TaskSetNum
	for (size_t i = 0; i < n; i++)
	{ //CarnivalGameResultInfo
		BYTE* pCarnivalGameResultInfo = p;
		Write16(pCarnivalGameResultInfo, 0); //len

		Write32(pCarnivalGameResultInfo, 0); //TaskID
		{ //TaskAward
			BYTE* pTaskAward = pCarnivalGameResultInfo;
			Write16(pTaskAward, 0); //len

			Write32(pTaskAward, 0); //AwardMoney
			Write32(pTaskAward, 0); //TotalMoney
			Write32(pTaskAward, 0); //AwardSuperMoney
			Write32(pTaskAward, 0); //TotalSuperMoney
			Write32(pTaskAward, 0); //AwardExp
			Write32(pTaskAward, 0); //TotalExp
			Write32(pTaskAward, 0); //AwardItemNum
			for (size_t i = 0; i < n; i++)
			{ //AwardItemInfo
				BYTE* pAwardItemInfo = pTaskAward;
				Write16(pAwardItemInfo, 0); //len

				Write32(pAwardItemInfo, 0); //ItemID
				Write32(pAwardItemInfo, 0); //ItemNum
				Write32(pAwardItemInfo, 0); //AvailPeriod
				Write8(pAwardItemInfo, 0); //Status
				WriteUn(pAwardItemInfo, 0); //ObtainTime
				Write32(pAwardItemInfo, 0); //OtherAttribute

				len = pAwardItemInfo - pTaskAward;
				Set16(pTaskAward, (WORD)len);
				pTaskAward += len;
			}
			Write32(pTaskAward, 0); //AwardCoupons
			Write32(pTaskAward, 0); //TotalCoupons
			Write32(pTaskAward, 0); //AwardLuckMoney
			Write32(pTaskAward, 0); //TotalLuckMoney
			Write32(pTaskAward, 0); //AwardTeamWorkExp
			Write32(pTaskAward, 0); //TotalTeamWorkExp
			Write32(pTaskAward, 0); //AwardWlCash
			Write32(pTaskAward, 0); //AwardWlCrystal
			Write32(pTaskAward, 0); //AwardWlDegree

			len = pTaskAward - pCarnivalGameResultInfo;
			Set16(pCarnivalGameResultInfo, (WORD)len);
			pCarnivalGameResultInfo += len;
		}

		len = pCarnivalGameResultInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write32(p, 0); //FinishTime

	len = p - buf;
	SendToClient(Client, 13080, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestPointCfg(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT PointID = Read16(p);
	UCHAR Contex = Read8(p);

}

void ResponsePointCfg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //Num
	for (size_t i = 0; i < n; i++)
	{ //SynCliPointCfg
		BYTE* pSynCliPointCfg = p;
		Write16(pSynCliPointCfg, 0); //len

		Write16(pSynCliPointCfg, 0); //PointID
		Write8(pSynCliPointCfg, 0); //PointType
		Write8(pSynCliPointCfg, 0); //FileMd5Len
		Write16(pSynCliPointCfg, 0); //Len
		Write8(pSynCliPointCfg, 0); //FinSpecType
		Write32(pSynCliPointCfg, 0); //TimeLimit
		Write8(pSynCliPointCfg, 0); //RankLimit
		Write32(pSynCliPointCfg, 0); //SkillLimit
		Write32(pSynCliPointCfg, 0); //MaxStar
		Write32(pSynCliPointCfg, 0); //StarScoreLim[]

		len = pSynCliPointCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //Contex

	len = p - buf;
	SendToClient(Client, 13711, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestPointChallengeInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponsePointChallengeInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //Num
	for (size_t i = 0; i < n; i++)
	{ //PointInfo
		BYTE* pPointInfo = p;
		Write16(pPointInfo, 0); //len

		Write16(pPointInfo, 0); //PointID
		Write32(pPointInfo, 0); //MaxFinishStar
		Write32(pPointInfo, 0); //MaxScore

		len = pPointInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 13712, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestStartPointChallenge(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT PointID = Read16(p);

}

void ResponseStartPointChallenge(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID

	len = p - buf;
	SendToClient(Client, 13713, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyPointChallengeResult(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //Result
	Write8(p, 0); //FailReason
	WriteUn(p, 0); //UseTime
	Write32(p, 0); //IncScore
	Write32(p, 0); //TotalScore
	Write32(p, 0); //FinStar
	Write8(p, 0); //AwardFlag
	Write8(p, 0); //HasAward
	for (size_t i = 0; i < n; i++)
	{ //Award
		BYTE* pAward = p;
		Write16(pAward, 0); //len

		Write32(pAward, 0); //AwardMoney
		Write32(pAward, 0); //TotalMoney
		Write32(pAward, 0); //AwardSuperMoney
		Write32(pAward, 0); //TotalSuperMoney
		Write32(pAward, 0); //AwardExp
		Write32(pAward, 0); //TotalExp
		Write32(pAward, 0); //AwardItemNum
		for (size_t i = 0; i < n; i++)
		{ //AwardItemInfo
			BYTE* pAwardItemInfo = pAward;
			Write16(pAwardItemInfo, 0); //len

			Write32(pAwardItemInfo, 0); //ItemID
			Write32(pAwardItemInfo, 0); //ItemNum
			Write32(pAwardItemInfo, 0); //AvailPeriod
			Write8(pAwardItemInfo, 0); //Status
			WriteUn(pAwardItemInfo, 0); //ObtainTime
			Write32(pAwardItemInfo, 0); //OtherAttribute

			len = pAwardItemInfo - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write32(pAward, 0); //AwardCoupons
		Write32(pAward, 0); //TotalCoupons
		Write32(pAward, 0); //AwardLuckMoney
		Write32(pAward, 0); //TotalLuckMoney
		Write32(pAward, 0); //AwardTeamWorkExp
		Write32(pAward, 0); //TotalTeamWorkExp
		Write32(pAward, 0); //AwardWlCash
		Write32(pAward, 0); //AwardWlCrystal
		Write32(pAward, 0); //AwardWlDegree

		len = pAward - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 13714, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestQuitPointChallenge(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void RequestReportRoomChat(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	Un DstUin = ReadUn(p);
	char[] DstNickName[] = ReadString(p);
	short ContentLength = Read16(p);

}

void NotifyFirstRechargeCfg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write8(p, 0); //CanGainAward
	{ //FirstExchangeAwardInfo
		BYTE* pFirstExchangeAwardInfo = p;
		Write16(pFirstExchangeAwardInfo, 0); //len

		Write32(pFirstExchangeAwardInfo, 0); //Money
		Write32(pFirstExchangeAwardInfo, 0); //SuperMoney
		Write32(pFirstExchangeAwardInfo, 0); //Experience
		Write16(pFirstExchangeAwardInfo, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pFirstExchangeAwardInfo;
			Write16(pItemInfo, 0); //len

			Write16(pItemInfo, 0); //GenderItemNum
			Write32(pItemInfo, 0); //ItemID[]
			Write16(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod

			len = pItemInfo - pFirstExchangeAwardInfo;
			Set16(pFirstExchangeAwardInfo, (WORD)len);
			pFirstExchangeAwardInfo += len;
		}

		len = pFirstExchangeAwardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 13722, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestFirstRechargeAarwd(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseFirstRechargeAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	WriteUn(p, 0); //us16ResultID

	len = p - buf;
	SendToClient(Client, 13721, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyClientUpdateLoverVipInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	{ //LoverVipBaseInfo
		BYTE* pLoverVipBaseInfo = p;
		Write16(pLoverVipBaseInfo, 0); //len

		Write8(pLoverVipBaseInfo, 0); //LoverVipLevel
		Write32(pLoverVipBaseInfo, 0); //LoverVipPoint
		Write8(pLoverVipBaseInfo, 0); //GrowRate

		len = pLoverVipBaseInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}
	{ //LoverVipOtherInfo
		BYTE* pLoverVipOtherInfo = p;
		Write16(pLoverVipOtherInfo, 0); //len

		Write32(pLoverVipOtherInfo, 0); //LoverVipLeftDays
		Write8(pLoverVipOtherInfo, 0); //CanReceiveGift
		Write8(pLoverVipOtherInfo, 0); //ShowExpireTips

		len = pLoverVipOtherInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 13800, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyClientLoverVipExpireInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //LoverUin
	Write32(p, 0); //LoverVipLeftDays

	len = p - buf;
	SendToClient(Client, 13801, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestReceiveLoverVipGift(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseReceiveLoverVipGift(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	{ //GiftAward
		BYTE* pGiftAward = p;
		Write16(pGiftAward, 0); //len

		Write32(pGiftAward, 0); //Exp
		Write32(pGiftAward, 0); //Money
		Write32(pGiftAward, 0); //SuperMoney
		Write16(pGiftAward, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pGiftAward;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute

			len = pItemInfo - pGiftAward;
			Set16(pGiftAward, (WORD)len);
			pGiftAward += len;
		}
		Write32(pGiftAward, 0); //Coupons
		Write32(pGiftAward, 0); //GuildPoint
		Write32(pGiftAward, 0); //LuckMoney

		len = pGiftAward - p;
		Set16(p, (WORD)len);
		p += len;
	}
	for (size_t i = 0; i < n; i++)
	{ //OtherAwardList
		BYTE* pOtherAwardList = p;
		Write16(pOtherAwardList, 0); //len

		Write32(pOtherAwardList, 0); //Exp
		Write32(pOtherAwardList, 0); //Money
		Write32(pOtherAwardList, 0); //SuperMoney
		Write16(pOtherAwardList, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pOtherAwardList;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute

			len = pItemInfo - pOtherAwardList;
			Set16(pOtherAwardList, (WORD)len);
			pOtherAwardList += len;
		}
		Write32(pOtherAwardList, 0); //Coupons
		Write32(pOtherAwardList, 0); //GuildPoint
		Write32(pOtherAwardList, 0); //LuckMoney

		len = pOtherAwardList - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 13802, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestRefreshLoverTarotAward(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseRefreshLoverTarotAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	for (size_t i = 0; i < n; i++)
	{ //AwardList
		BYTE* pAwardList = p;
		Write16(pAwardList, 0); //len

		Write32(pAwardList, 0); //Exp
		Write32(pAwardList, 0); //Money
		Write32(pAwardList, 0); //SuperMoney
		Write16(pAwardList, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAwardList;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute

			len = pItemInfo - pAwardList;
			Set16(pAwardList, (WORD)len);
			pAwardList += len;
		}
		Write32(pAwardList, 0); //Coupons
		Write32(pAwardList, 0); //GuildPoint
		Write32(pAwardList, 0); //LuckMoney

		len = pAwardList - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 13803, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetLoverTarotAward(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR Index = Read8(p);

}

void ResponseGetLoverTarotAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	{ //Award
		BYTE* pAward = p;
		Write16(pAward, 0); //len

		Write32(pAward, 0); //Exp
		Write32(pAward, 0); //Money
		Write32(pAward, 0); //SuperMoney
		Write16(pAward, 0); //ItemNum
		for (size_t i = 0; i < n; i++)
		{ //ItemInfo
			BYTE* pItemInfo = pAward;
			Write16(pItemInfo, 0); //len

			Write32(pItemInfo, 0); //ItemID
			Write32(pItemInfo, 0); //ItemNum
			Write32(pItemInfo, 0); //AvailPeriod
			Write8(pItemInfo, 0); //Status
			WriteUn(pItemInfo, 0); //ObtainTime
			Write32(pItemInfo, 0); //OtherAttribute

			len = pItemInfo - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write32(pAward, 0); //Coupons
		Write32(pAward, 0); //GuildPoint
		Write32(pAward, 0); //LuckMoney

		len = pAward - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //ReasonLen
	Write8(p, 0); //CurLeftNum
	Write8(p, 0); //Index

	len = p - buf;
	SendToClient(Client, 13804, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetLoverTarotBroadcast(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetLoverTarotBroadcast(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write8(p, 0); //BCNum
	for (size_t i = 0; i < n; i++)
	{ //BCList
		BYTE* pBCList = p;
		Write16(pBCList, 0); //len

		Write16(pBCList, 0); //ContentLen

		len = pBCList - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 13805, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetControlItemInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un uin = ReadUn(p);
	Un time = ReadUn(p);
	Un queryType = ReadUn(p);
	Un queryKey = ReadUn(p);
	Un queryKey2 = ReadUn(p);

}

void ResponseGetControlItemInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //resultId
	WriteUn(p, 0); //queryType
	WriteUn(p, 0); //queryKey
	WriteUn(p, 0); //queryKey2
	WriteUn(p, 0); //awardNum
	for (size_t i = 0; i < n; i++)
	{ //awardInfo
		BYTE* pawardInfo = p;
		Write16(pawardInfo, 0); //len

		Write32(pawardInfo, 0); //Type
		Write32(pawardInfo, 0); //SpecialFlag
		Write16(pawardInfo, 0); //ControlledItemNum
		for (size_t i = 0; i < n; i++)
		{ //ControlledItemInfo
			BYTE* pControlledItemInfo = pawardInfo;
			Write16(pControlledItemInfo, 0); //len

			Write32(pControlledItemInfo, 0); //MaxUseNum
			Write32(pControlledItemInfo, 0); //CurrUsedNum
			Write32(pControlledItemInfo, 0); //ItemID

			len = pControlledItemInfo - pawardInfo;
			Set16(pawardInfo, (WORD)len);
			pawardInfo += len;
		}

		len = pawardInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestAddItem(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un uin = ReadUn(p);
	Un time = ReadUn(p);
	{ //item
		BYTE* pitem = p;
		len = Read16(pitem);

		int ItemID = Read32(pitem);
		int ItemNum = Read32(pitem);
		int AvailPeriod = Read32(pitem);
		bool Status = Read8(pitem);
		Un ObtainTime = ReadUn(pitem);
		int OtherAttribute = Read32(pitem);

		p += len;
	}

}

void ResponseAddItem(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //resultId

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetNextGuessFigureQuestion(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un uin = ReadUn(p);
	Un time = ReadUn(p);
	Un questionType = ReadUn(p);

}

void ResponseGetNextGuessFigureQuestion(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //resultId
	WriteUn(p, 0); //questionType
	WriteUn(p, 0); //hasQuestion
	for (size_t i = 0; i < n; i++)
	{ //question
		BYTE* pquestion = p;
		Write16(pquestion, 0); //len

		WriteUn(pquestion, 0); //questionId
		WriteUn(pquestion, 0); //leftTime
		WriteUn(pquestion, 0); //uriLen

		len = pquestion - p;
		Set16(p, (WORD)len);
		p += len;
	}
	WriteUn(p, 0); //todayAnswerRightNum
	WriteUn(p, 0); //todayLeftQuesionNum
	WriteUn(p, 0); //totalAnswerRightNum

	len = p - buf;
	SendToClient(Client, 20011, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestAnswerGuessFigureQuestion(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un uin = ReadUn(p);
	Un time = ReadUn(p);
	Un questionType = ReadUn(p);
	Un answerLen = ReadUn(p);

}

void ResponseAnswerGuessFigureQuestion(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //resultId
	WriteUn(p, 0); //questionType
	WriteUn(p, 0); //questionId
	WriteUn(p, 0); //addExperience

	len = p - buf;
	SendToClient(Client, 20012, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetHelpForGuessFigureQuestion(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un uin = ReadUn(p);
	Un time = ReadUn(p);
	{ //question
		BYTE* pquestion = p;
		len = Read16(pquestion);

		Un questionId = ReadUn(pquestion);
		Un leftTime = ReadUn(pquestion);
		Un uriLen = ReadUn(pquestion);

		p += len;
	}

}

void ResponseGetHelpForGuessFigureQuestion(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //resultId

	len = p - buf;
	SendToClient(Client, 20013, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyGetHelpForGuessFigureQuestion(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //uin
	WriteUn(p, 0); //nickName[]
	{ //question
		BYTE* pquestion = p;
		Write16(pquestion, 0); //len

		WriteUn(pquestion, 0); //questionId
		WriteUn(pquestion, 0); //leftTime
		WriteUn(pquestion, 0); //uriLen

		len = pquestion - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 20014, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyShareGuessFigureQuestionAnswer(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //uin
	WriteUn(p, 0); //continueRightNum

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void AckShareGuessFigureQuestionAnswer(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un uin = ReadUn(p);
	Un time = ReadUn(p);

}

void NotifyS2CGodFortuneStatus(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //8GodFortuneStatus
	Write16(p, 0); //GodFortuneNpcId
	WriteUn(p, 0); //8NpcGodFortuneType

	len = p - buf;
	SendToClient(Client, 20025, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyS2CGodFortunePackage(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //FortunePacNum
	for (size_t i = 0; i < n; i++)
	{ //GodFortunePacInfo
		BYTE* pGodFortunePacInfo = p;
		Write16(pGodFortunePacInfo, 0); //len

		WriteUn(pGodFortunePacInfo, 0); //FortunePacIndexID
		WriteUn(pGodFortunePacInfo, 0); //FortunePacBoxId

		len = pGodFortunePacInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 20026, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestC2SPickUpFortunePac(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT FortunePackIndexID = Read32(p);

}

void ResponseC2SPickUpFortunePac(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //Result
	{ //GodFortunePac
		BYTE* pGodFortunePac = p;
		Write16(pGodFortunePac, 0); //len

		WriteUn(pGodFortunePac, 0); //FortunePacIndexID
		WriteUn(pGodFortunePac, 0); //FortunePacBoxId

		len = pGodFortunePac - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 20027, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyS2CPackageBeenPickUp(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //PickUin
	Write32(p, 0); //FortunePackIndexID

	len = p - buf;
	SendToClient(Client, 20028, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyS2CEnterGodFortuneActivity(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //GodFortuneNpcId
	WriteUn(p, 0); //8NpcGodFortuneType
	Write16(p, 0); //FortunePacNum
	for (size_t i = 0; i < n; i++)
	{ //GodFortunePacInfo
		BYTE* pGodFortunePacInfo = p;
		Write16(pGodFortunePacInfo, 0); //len

		WriteUn(pGodFortunePacInfo, 0); //FortunePacIndexID
		WriteUn(pGodFortunePacInfo, 0); //FortunePacBoxId

		len = pGodFortunePacInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 20029, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyClientTips(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //tipsLen

	len = p - buf;
	SendToClient(Client, 20030, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestClientReportDataMinintLog(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un uin = ReadUn(p);
	Un time = ReadUn(p);
	Un logContentLen = ReadUn(p);

}

void RequestGetBattleModeCarSkillInfoList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	int CarID = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetBattleModeCarSkillInfoList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	Write32(p, 0); //CarID
	{ //BattleModeSkillInfoList
		BYTE* pBattleModeSkillInfoList = p;
		Write16(pBattleModeSkillInfoList, 0); //len

		Write8(pBattleModeSkillInfoList, 0); //SkillNum
		for (size_t i = 0; i < n; i++)
		{ //SkillInfo
			BYTE* pSkillInfo = pBattleModeSkillInfoList;
			Write16(pSkillInfo, 0); //len

			Write16(pSkillInfo, 0); //SkillId
			Write8(pSkillInfo, 0); //SkillLevel

			len = pSkillInfo - pBattleModeSkillInfoList;
			Set16(pBattleModeSkillInfoList, (WORD)len);
			pBattleModeSkillInfoList += len;
		}

		len = pBattleModeSkillInfoList - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 10929, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetBattleModeRoleSkillInfoList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseGetBattleModeRoleSkillInfoList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //Uin
	{ //BattleModeSkillInfoList
		BYTE* pBattleModeSkillInfoList = p;
		Write16(pBattleModeSkillInfoList, 0); //len

		Write8(pBattleModeSkillInfoList, 0); //SkillNum
		for (size_t i = 0; i < n; i++)
		{ //SkillInfo
			BYTE* pSkillInfo = pBattleModeSkillInfoList;
			Write16(pSkillInfo, 0); //len

			Write16(pSkillInfo, 0); //SkillId
			Write8(pSkillInfo, 0); //SkillLevel

			len = pSkillInfo - pBattleModeSkillInfoList;
			Set16(pBattleModeSkillInfoList, (WORD)len);
			pBattleModeSkillInfoList += len;
		}

		len = pBattleModeSkillInfoList - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 10930, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestSkillStrengthenBattleModeCar(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	int CarID = Read32(p);
	short SkillId = Read16(p);
	UINT Time = Read32(p);

}

void ResponseSkillStrengthenBattleModeCar(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write32(p, 0); //CarID
	{ //SkillInfo
		BYTE* pSkillInfo = p;
		Write16(pSkillInfo, 0); //len

		Write16(pSkillInfo, 0); //SkillId
		Write8(pSkillInfo, 0); //SkillLevel

		len = pSkillInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 10931, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestSkillStrengthenBattleModeRole(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	short SkillId = Read16(p);
	UINT Time = Read32(p);

}

void ResponseSkillStrengthenBattleModeRole(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	{ //SkillInfo
		BYTE* pSkillInfo = p;
		Write16(pSkillInfo, 0); //len

		Write16(pSkillInfo, 0); //SkillId
		Write8(pSkillInfo, 0); //SkillLevel

		len = pSkillInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 10932, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GGetBattleModeConfig(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT CfgVersion = Read32(p);

}

void ResponseC2GGetBattleModeConfig(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //CfgVersion
	Write8(p, 0); //Result
	Write32(p, 0); //FragmentItemID
	Write32(p, 0); //FragmentItemID2
	Write32(p, 0); //FragmentItemID3
	Write8(p, 0); //SkillInfoCfgNum
	for (size_t i = 0; i < n; i++)
	{ //BattleModeSkillInfoCfg
		BYTE* pBattleModeSkillInfoCfg = p;
		Write16(pBattleModeSkillInfoCfg, 0); //len

		Write16(pBattleModeSkillInfoCfg, 0); //SkillId
		Write8(pBattleModeSkillInfoCfg, 0); //SkillLevelNum
		for (size_t i = 0; i < n; i++)
		{ //LevelElementCfg
			BYTE* pLevelElementCfg = pBattleModeSkillInfoCfg;
			Write16(pLevelElementCfg, 0); //len

			Write8(pLevelElementCfg, 0); //SkillLevel
			Write32(pLevelElementCfg, 0); //FragmentCost
			Write32(pLevelElementCfg, 0); //FragmentCost2
			Write32(pLevelElementCfg, 0); //FragmentCost3
			Write32(pLevelElementCfg, 0); //SkillParam1
			Write32(pLevelElementCfg, 0); //SkillParam2
			Write32(pLevelElementCfg, 0); //SkillParam3
			Write32(pLevelElementCfg, 0); //CombatPower
			Write32(pLevelElementCfg, 0); //BaseFactor

			len = pLevelElementCfg - pBattleModeSkillInfoCfg;
			Set16(pBattleModeSkillInfoCfg, (WORD)len);
			pBattleModeSkillInfoCfg += len;
		}

		len = pBattleModeSkillInfoCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //DayPveScoreRankAwardCfgNum
	for (size_t i = 0; i < n; i++)
	{ //DayPveScoreRankAwardCfg
		BYTE* pDayPveScoreRankAwardCfg = p;
		Write16(pDayPveScoreRankAwardCfg, 0); //len

		Write32(pDayPveScoreRankAwardCfg, 0); //RankUpper
		{ //Award
			BYTE* pAward = pDayPveScoreRankAwardCfg;
			Write16(pAward, 0); //len

			Write32(pAward, 0); //Exp
			Write32(pAward, 0); //Money
			Write32(pAward, 0); //SuperMoney
			Write16(pAward, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAward;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute

				len = pItemInfo - pAward;
				Set16(pAward, (WORD)len);
				pAward += len;
			}
			Write32(pAward, 0); //Coupons
			Write32(pAward, 0); //GuildPoint
			Write32(pAward, 0); //LuckMoney

			len = pAward - pDayPveScoreRankAwardCfg;
			Set16(pDayPveScoreRankAwardCfg, (WORD)len);
			pDayPveScoreRankAwardCfg += len;
		}

		len = pDayPveScoreRankAwardCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //HistoryPveScoreRankAwardCfgNum
	for (size_t i = 0; i < n; i++)
	{ //HistoryPveScoreRankAwardCfg
		BYTE* pHistoryPveScoreRankAwardCfg = p;
		Write16(pHistoryPveScoreRankAwardCfg, 0); //len

		Write32(pHistoryPveScoreRankAwardCfg, 0); //RankUpper
		{ //Award
			BYTE* pAward = pHistoryPveScoreRankAwardCfg;
			Write16(pAward, 0); //len

			Write32(pAward, 0); //Exp
			Write32(pAward, 0); //Money
			Write32(pAward, 0); //SuperMoney
			Write16(pAward, 0); //ItemNum
			for (size_t i = 0; i < n; i++)
			{ //ItemInfo
				BYTE* pItemInfo = pAward;
				Write16(pItemInfo, 0); //len

				Write32(pItemInfo, 0); //ItemID
				Write32(pItemInfo, 0); //ItemNum
				Write32(pItemInfo, 0); //AvailPeriod
				Write8(pItemInfo, 0); //Status
				WriteUn(pItemInfo, 0); //ObtainTime
				Write32(pItemInfo, 0); //OtherAttribute

				len = pItemInfo - pAward;
				Set16(pAward, (WORD)len);
				pAward += len;
			}
			Write32(pAward, 0); //Coupons
			Write32(pAward, 0); //GuildPoint
			Write32(pAward, 0); //LuckMoney

			len = pAward - pHistoryPveScoreRankAwardCfg;
			Set16(pHistoryPveScoreRankAwardCfg, (WORD)len);
			pHistoryPveScoreRankAwardCfg += len;
		}

		len = pHistoryPveScoreRankAwardCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 10933, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2GGetBattleModeScoreList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseC2GGetBattleModeScoreList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write16(p, 0); //FriendNum
	Write32(p, 0); //Score[]
	Write16(p, 0); //LastSeasonFriendNum
	Write32(p, 0); //LastSeasonScore[]
	Write32(p, 0); //PeriodLeftTime

	len = p - buf;
	SendToClient(Client, 10934, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2SReceiveTimesExperience(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT ReceiveTime = Read32(p);

}

void ResponseC2SReceiveTimesExperience(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Result
	Write32(p, 0); //SurplusTime
	Write32(p, 0); //UseSurplusTime

	len = p - buf;
	SendToClient(Client, 20040, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2SFrostThawTimesExperience(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT Action = Read32(p);

}

void ResponseC2SFrostThawTimesExperience(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Result

	len = p - buf;
	SendToClient(Client, 20041, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2SGetTimesExperienceInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseC2SGetTimesExperienceInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Result
	Write32(p, 0); //SurplusTime
	Write32(p, 0); //UseSurplusTime
	Write32(p, 0); //Multiple
	Write32(p, 0); //Status
	Write32(p, 0); //ExtralTime
	Write32(p, 0); //PlayerTag
	Write32(p, 0); //MaxExpTime
	Write32(p, 0); //BaseTime
	Write32(p, 0); //ServerTime

	len = p - buf;
	SendToClient(Client, 20042, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestC2SUpdateDayUpgradeInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int SurTime = Read32(p);
	int Multiple = Read32(p);
	int StartTime = Read32(p);
	int Status = Read32(p);
	int UseTime = Read32(p);

}

void ResponseC2SUpdateDayUpgradeInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Result

	len = p - buf;
	SendToClient(Client, ?, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyClientPop(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Type
	Write16(p, 0); //URLLen

	len = p - buf;
	SendToClient(Client, 20045, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestRedPacketPresentInfo(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);

}

void ResponseRedPacketPresentInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //PresentedOtherCnt
	Write16(p, 0); //LeftPresentOtherCnt
	Write16(p, 0); //Num
	Write32(p, 0); //PresentedList[]
	Write8(p, 0); //CharmLimit
	Write32(p, 0); //CharmLimit

	len = p - buf;
	SendToClient(Client, 20046, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestPresentFriendRedPacket(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	USHORT Num = Read16(p);
	UINT[] FriendUin[] = Read32(p);
	USHORT InfoLen = Read16(p);

}

void ResponsePresentFriendRedPacket(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //HasAward
	for (size_t i = 0; i < n; i++)
	{ //Award
		BYTE* pAward = p;
		Write16(pAward, 0); //len

		Write32(pAward, 0); //AwardMoney
		Write32(pAward, 0); //TotalMoney
		Write32(pAward, 0); //AwardSuperMoney
		Write32(pAward, 0); //TotalSuperMoney
		Write32(pAward, 0); //AwardExp
		Write32(pAward, 0); //TotalExp
		Write32(pAward, 0); //AwardItemNum
		for (size_t i = 0; i < n; i++)
		{ //AwardItemInfo
			BYTE* pAwardItemInfo = pAward;
			Write16(pAwardItemInfo, 0); //len

			Write32(pAwardItemInfo, 0); //ItemID
			Write32(pAwardItemInfo, 0); //ItemNum
			Write32(pAwardItemInfo, 0); //AvailPeriod
			Write8(pAwardItemInfo, 0); //Status
			WriteUn(pAwardItemInfo, 0); //ObtainTime
			Write32(pAwardItemInfo, 0); //OtherAttribute

			len = pAwardItemInfo - pAward;
			Set16(pAward, (WORD)len);
			pAward += len;
		}
		Write32(pAward, 0); //AwardCoupons
		Write32(pAward, 0); //TotalCoupons
		Write32(pAward, 0); //AwardLuckMoney
		Write32(pAward, 0); //TotalLuckMoney
		Write32(pAward, 0); //AwardTeamWorkExp
		Write32(pAward, 0); //TotalTeamWorkExp
		Write32(pAward, 0); //AwardWlCash
		Write32(pAward, 0); //AwardWlCrystal
		Write32(pAward, 0); //AwardWlDegree

		len = pAward - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write16(p, 0); //PresentedOtherCnt
	Write16(p, 0); //LeftPresentOtherCnt
	Write16(p, 0); //Num
	Write32(p, 0); //PresentedList[]
	Write16(p, 0); //LimitNum
	Write32(p, 0); //LimitUin[]

	len = p - buf;
	SendToClient(Client, 20047, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyReduceCouponsDayConsumeInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //Num
	for (size_t i = 0; i < n; i++)
	{ //Info
		BYTE* pInfo = p;
		Write16(pInfo, 0); //len

		Write32(pInfo, 0); //ItemID
		Write32(pInfo, 0); //ConsumeNum

		len = pInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 20050, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyFBMonsterRefresh(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //GenCheckPointID
	Write16(p, 0); //MonsterNum
	for (size_t i = 0; i < n; i++)
	{ //MonsterList
		BYTE* pMonsterList = p;
		Write16(pMonsterList, 0); //len

		Write32(pMonsterList, 0); //ID
		Write16(pMonsterList, 0); //HP
		Write16(pMonsterList, 0); //Type
		Write16(pMonsterList, 0); //BornIdx
		Write16(pMonsterList, 0); //Lev
		Write16(pMonsterList, 0); //SubType

		len = pMonsterList - p;
		Set16(p, (WORD)len);
		p += len;
	}
	Write8(p, 0); //RefreshType

	len = p - buf;
	SendToClient(Client, 20070, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestFBReportMonsterEvent(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UCHAR EventCount = Read8(p);
	for (size_t i = 0; i < n; i++)
	{ //EventList
		BYTE* pEventList = p;
		len = Read16(pEventList);

		int SkillID = Read32(pEventList);
		int SkillPower = Read32(pEventList);
		int MonsterID = Read32(pEventList);
		UCHAR ComboNum = Read8(pEventList);

		p += len;
	}

}

void NotifyFBScoreEvent(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //EventType
	Write32(p, 0); //ScoreInc
	Write32(p, 0); //ScoreTotal

	len = p - buf;
	SendToClient(Client, 20073, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyFBUpdateMonsterInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //MonsterNum
	for (size_t i = 0; i < n; i++)
	{ //MonsterInfo
		BYTE* pMonsterInfo = p;
		Write16(pMonsterInfo, 0); //len

		Write32(pMonsterInfo, 0); //ID
		Write16(pMonsterInfo, 0); //HP
		Write16(pMonsterInfo, 0); //Type
		Write16(pMonsterInfo, 0); //BornIdx
		Write16(pMonsterInfo, 0); //Lev
		Write16(pMonsterInfo, 0); //SubType

		len = pMonsterInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 20072, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestFBReportCurrentCP(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	int CheckPointID = Read32(p);

}

void RequestGetRecommendItemList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un uin = ReadUn(p);
	Un time = ReadUn(p);
	Un sceneId = ReadUn(p);
	Un dataType[] = ReadUn(p);
	Un dataBegin = ReadUn(p);
	Un dataEnd = ReadUn(p);

}

void ResponseGetRecommendItemList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //resultId
	WriteUn(p, 0); //propNum
	for (size_t i = 0; i < n; i++)
	{ //props
		BYTE* pprops = p;
		Write16(pprops, 0); //len

		WriteUn(pprops, 0); //id
		WriteUn(pprops, 0); //mainType
		WriteUn(pprops, 0); //type
		WriteUn(pprops, 0); //algo

		len = pprops - p;
		Set16(p, (WORD)len);
		p += len;
	}
	WriteUn(p, 0); //totalNum

	len = p - buf;
	SendToClient(Client, 20075, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestCanGetRecommendItemList(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un uin = ReadUn(p);
	Un time = ReadUn(p);

}

void ResponseCanGetRecommendItemList(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //canGetItemList

	len = p - buf;
	SendToClient(Client, 20076, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyTaskPresentAward(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write16(p, 0); //IsPhysical
	Write16(p, 0); //ResultLen
	Write32(p, 0); //AwardId

	len = p - buf;
	SendToClient(Client, 20048, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestSaveDataForPresent(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	UINT ReportUin = Read32(p);
	USHORT ZipLen = Read16(p);
	USHORT TelNumLen = Read16(p);
	USHORT NameLen = Read16(p);
	USHORT AddressLen = Read16(p);

}

void ResponseSaveDataForPresent(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //ResultId

	len = p - buf;
	SendToClient(Client, 20049, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestAddToMatchQueue(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un uin = ReadUn(p);
	Un time = ReadUn(p);
	Un matchQueueType = ReadUn(p);
	Un para1 = ReadUn(p);

}

void ResponseAddToMatchQueue(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //resultId
	WriteUn(p, 0); //reasonLen
	WriteUn(p, 0); //matchQueueType

	len = p - buf;
	SendToClient(Client, 20079, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestCancelMatchQueue(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un uin = ReadUn(p);
	Un time = ReadUn(p);
	Un matchQueueType = ReadUn(p);

}

void ResponseCancelMatchQueue(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //uin
	WriteUn(p, 0); //time
	WriteUn(p, 0); //resultId
	WriteUn(p, 0); //reasonLen
	WriteUn(p, 0); //matchQueueType

	len = p - buf;
	SendToClient(Client, 20080, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyMatchResult(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //resultId
	WriteUn(p, 0); //reasonLen
	WriteUn(p, 0); //matchQueueType
	WriteUn(p, 0); //hasEnterInfo
	for (size_t i = 0; i < n; i++)
	{ //enterInfo
		BYTE* penterInfo = p;
		Write16(penterInfo, 0); //len

		{ //addrInfo
			BYTE* paddrInfo = penterInfo;
			Write16(paddrInfo, 0); //len

			WriteUn(paddrInfo, 0); //svrId
			WriteUn(paddrInfo, 0); //svrIP
			WriteUn(paddrInfo, 0); //tcpPortNum
			WriteUn(paddrInfo, 0); //tcpPort[]
			WriteUn(paddrInfo, 0); //udpPortNum
			WriteUn(paddrInfo, 0); //udpPort[]

			len = paddrInfo - penterInfo;
			Set16(penterInfo, (WORD)len);
			penterInfo += len;
		}
		WriteUn(penterInfo, 0); //roomId

		len = penterInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 20081, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestEnterMatchRoom(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un uin = ReadUn(p);
	Un time = ReadUn(p);
	Un roomId = ReadUn(p);

}

void ResponseEnterMatchRoom(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //resultId
	WriteUn(p, 0); //reasonLen

	len = p - buf;
	SendToClient(Client, 20082, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestGetBorderGameCondition(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un uin = ReadUn(p);
	Un time = ReadUn(p);

}

void NotifyFBPlayerLevInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //Lev[]

	len = p - buf;
	SendToClient(Client, 20069, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyPetStrengCfgInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //StrengCardId
	Write32(p, 0); //PetStrengNum
	for (size_t i = 0; i < n; i++)
	{ //PetStrengInfos
		BYTE* pPetStrengInfos = p;
		Write16(pPetStrengInfos, 0); //len

		Write32(pPetStrengInfos, 0); //Petid
		Write32(pPetStrengInfos, 0); //LevelNum
		for (size_t i = 0; i < n; i++)
		{ //PetStrengLevels
			BYTE* pPetStrengLevels = pPetStrengInfos;
			Write16(pPetStrengLevels, 0); //len

			Write32(pPetStrengLevels, 0); //Level
			Write32(pPetStrengLevels, 0); //SuccProb
			Write32(pPetStrengLevels, 0); //ConsCardNum
			Write32(pPetStrengLevels, 0); //ConsSuperMoney
			Write32(pPetStrengLevels, 0); //SkillNum
			for (size_t i = 0; i < n; i++)
			{ //SkillInfos
				BYTE* pSkillInfos = pPetStrengLevels;
				Write16(pSkillInfos, 0); //len

				Write16(pSkillInfos, 0); //SkillID
				Write8(pSkillInfos, 0); //Status
				Write8(pSkillInfos, 0); //Active
				Write32(pSkillInfos, 0); //Value

				len = pSkillInfos - pPetStrengLevels;
				Set16(pPetStrengLevels, (WORD)len);
				pPetStrengLevels += len;
			}

			len = pPetStrengLevels - pPetStrengInfos;
			Set16(pPetStrengInfos, (WORD)len);
			pPetStrengInfos += len;
		}

		len = pPetStrengInfos - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 20100, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestPetStrengthen(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	UINT Uin = Read32(p);
	UINT Time = Read32(p);
	Un petId = ReadUn(p);

}

void ResponsePetStrengthen(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write32(p, 0); //Uin
	Write32(p, 0); //ResultId
	Write32(p, 0); //Level
	{ //FailAward
		BYTE* pFailAward = p;
		Write16(pFailAward, 0); //len

		Write32(pFailAward, 0); //AwardMoney
		Write32(pFailAward, 0); //TotalMoney
		Write32(pFailAward, 0); //AwardSuperMoney
		Write32(pFailAward, 0); //TotalSuperMoney
		Write32(pFailAward, 0); //AwardExp
		Write32(pFailAward, 0); //TotalExp
		Write32(pFailAward, 0); //AwardItemNum
		for (size_t i = 0; i < n; i++)
		{ //AwardItemInfo
			BYTE* pAwardItemInfo = pFailAward;
			Write16(pAwardItemInfo, 0); //len

			Write32(pAwardItemInfo, 0); //ItemID
			Write32(pAwardItemInfo, 0); //ItemNum
			Write32(pAwardItemInfo, 0); //AvailPeriod
			Write8(pAwardItemInfo, 0); //Status
			WriteUn(pAwardItemInfo, 0); //ObtainTime
			Write32(pAwardItemInfo, 0); //OtherAttribute

			len = pAwardItemInfo - pFailAward;
			Set16(pFailAward, (WORD)len);
			pFailAward += len;
		}
		Write32(pFailAward, 0); //AwardCoupons
		Write32(pFailAward, 0); //TotalCoupons
		Write32(pFailAward, 0); //AwardLuckMoney
		Write32(pFailAward, 0); //TotalLuckMoney
		Write32(pFailAward, 0); //AwardTeamWorkExp
		Write32(pFailAward, 0); //TotalTeamWorkExp
		Write32(pFailAward, 0); //AwardWlCash
		Write32(pFailAward, 0); //AwardWlCrystal
		Write32(pFailAward, 0); //AwardWlDegree

		len = pFailAward - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 20101, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyMapMedalInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //mapNum
	for (size_t i = 0; i < n; i++)
	{ //medalInfo
		BYTE* pmedalInfo = p;
		Write16(pmedalInfo, 0); //len

		WriteUn(pmedalInfo, 0); //mapId
		WriteUn(pmedalInfo, 0); //medalTypeNum
		for (size_t i = 0; i < n; i++)
		{ //infoByType
			BYTE* pinfoByType = pmedalInfo;
			Write16(pinfoByType, 0); //len

			WriteUn(pinfoByType, 0); //medalType
			WriteUn(pinfoByType, 0); //medalNum
			for (size_t i = 0; i < n; i++)
			{ //statusInfo
				BYTE* pstatusInfo = pinfoByType;
				Write16(pstatusInfo, 0); //len

				WriteUn(pstatusInfo, 0); //conditionStatus
				WriteUn(pstatusInfo, 0); //curProgress

				len = pstatusInfo - pinfoByType;
				Set16(pinfoByType, (WORD)len);
				pinfoByType += len;
			}

			len = pinfoByType - pmedalInfo;
			Set16(pmedalInfo, (WORD)len);
			pmedalInfo += len;
		}

		len = pmedalInfo - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 20084, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void NotifyUpdateMapMedalInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //mapId
	{ //infoByType
		BYTE* pinfoByType = p;
		Write16(pinfoByType, 0); //len

		WriteUn(pinfoByType, 0); //medalType
		WriteUn(pinfoByType, 0); //medalNum
		for (size_t i = 0; i < n; i++)
		{ //statusInfo
			BYTE* pstatusInfo = pinfoByType;
			Write16(pstatusInfo, 0); //len

			WriteUn(pstatusInfo, 0); //conditionStatus
			WriteUn(pstatusInfo, 0); //curProgress

			len = pstatusInfo - pinfoByType;
			Set16(pinfoByType, (WORD)len);
			pinfoByType += len;
		}

		len = pinfoByType - p;
		Set16(p, (WORD)len);
		p += len;
	}

	len = p - buf;
	SendToClient(Client, 20085, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetMapMedalCfg(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un uin = ReadUn(p);
	Un time = ReadUn(p);

}

void ResponseGetMapMedalCfg(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //svrVersion
	WriteUn(p, 0); //mapNum
	for (size_t i = 0; i < n; i++)
	{ //medalCfg
		BYTE* pmedalCfg = p;
		Write16(pmedalCfg, 0); //len

		WriteUn(pmedalCfg, 0); //mapId
		WriteUn(pmedalCfg, 0); //medalTypeNum
		for (size_t i = 0; i < n; i++)
		{ //conditionByType
			BYTE* pconditionByType = pmedalCfg;
			Write16(pconditionByType, 0); //len

			WriteUn(pconditionByType, 0); //medalType
			for (size_t i = 0; i < n; i++)
			{ //condition
				BYTE* pcondition = pconditionByType;
				Write16(pcondition, 0); //len

				WriteUn(pcondition, 0); //gameSubMode
				WriteUn(pcondition, 0); //needFriend
				WriteUn(pcondition, 0); //collisionNum
				WriteUn(pcondition, 0); //doubleJetNum
				WriteUn(pcondition, 0); //driftNum
				WriteUn(pcondition, 0); //nitrogenNum
				WriteUn(pcondition, 0); //propNum
				WriteUn(pcondition, 0); //playerNum
				WriteUn(pcondition, 0); //rankNum
				WriteUn(pcondition, 0); //finishTime
				WriteUn(pcondition, 0); //finishNum
				WriteUn(pcondition, 0); //expMulti

				len = pcondition - pconditionByType;
				Set16(pconditionByType, (WORD)len);
				pconditionByType += len;
			}

			len = pconditionByType - pmedalCfg;
			Set16(pmedalCfg, (WORD)len);
			pmedalCfg += len;
		}

		len = pmedalCfg - p;
		Set16(p, (WORD)len);
		p += len;
	}
	WriteUn(p, 0); //isOpen
	WriteUn(p, 0); //endTime

	len = p - buf;
	SendToClient(Client, 20086, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void NotifyClearMapMedalAllInfo(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	WriteUn(p, 0); //uin

	len = p - buf;
	SendToClient(Client, 20087, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Notify);
}

void RequestGetVipLv7Item(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un uin = ReadUn(p);
	Un time = ReadUn(p);

}

void ResponseGetVipLv7Item(ClientNode* Client)
{
	BYTE buf[8192]; BYTE* p = buf; size_t len;

	Write16(p, 0); //ResultID
	Write8(p, 0); //ExRightFlag[]

	len = p - buf;
	SendToClient(Client, 20102, buf, len, Client->ConnID, FE_PLAYER, Client->ConnID, Response);
}

void RequestReportCommonAction(ClientNode* Client, BYTE* Body, size_t BodyLen)
{
	BYTE* p = Body; WORD len;

	Un Uin = ReadUn(p);
	Un Time = ReadUn(p);
	USHORT ActionID = Read16(p);
	UCHAR ParaNum = Read8(p);
	int[] Para[] = Read32(p);

}

